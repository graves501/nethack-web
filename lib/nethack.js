
var Module = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;
  return (
function(Module) {
  Module = Module || {};



// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// Set up the promise that indicates the Module is initialized
var readyPromiseResolve, readyPromiseReject;
Module['ready'] = new Promise(function(resolve, reject) {
  readyPromiseResolve = resolve;
  readyPromiseReject = reject;
});

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

  if (!Module.expectedDataFileDownloads) {
    Module.expectedDataFileDownloads = 0;
  }
  Module.expectedDataFileDownloads++;
  (function() {
   var loadPackage = function(metadata) {
  
    function runWithFS() {
  
      function assert(check, msg) {
        if (!check) throw msg + new Error().stack;
      }
  var fileData0 = 'ICAgICAgICAgICAgICAgICAgICBORVRIQUNLIEdFTkVSQUwgUFVCTElDIExJQ0VOU0UKICAgICAgICAgICAgICAgICAgICAoQ29weXJpZ2h0IDE5ODkgTS4gU3RlcGhlbnNvbikKCiAgICAgICAgICAgICAgIChCYXNlZCBvbiB0aGUgQklTT04gZ2VuZXJhbCBwdWJsaWMgbGljZW5zZSwKICAgICAgICAgICAgICAgICAgIGNvcHlyaWdodCAxOTg4IFJpY2hhcmQgTS4gU3RhbGxtYW4pCgogRXZlcnlvbmUgaXMgcGVybWl0dGVkIHRvIGNvcHkgYW5kIGRpc3RyaWJ1dGUgdmVyYmF0aW0gY29waWVzIG9mIHRoaXMKIGxpY2Vuc2UsIGJ1dCBjaGFuZ2luZyBpdCBpcyBub3QgYWxsb3dlZC4gIFlvdSBjYW4gYWxzbyB1c2UgdGhpcyB3b3JkaW5nIHRvCiBtYWtlIHRoZSB0ZXJtcyBmb3Igb3RoZXIgcHJvZ3JhbXMuCgogIFRoZSBsaWNlbnNlIGFncmVlbWVudHMgb2YgbW9zdCBzb2Z0d2FyZSBjb21wYW5pZXMga2VlcCB5b3UgYXQgdGhlIG1lcmN5IG9mCnRob3NlIGNvbXBhbmllcy4gIEJ5IGNvbnRyYXN0LCBvdXIgZ2VuZXJhbCBwdWJsaWMgbGljZW5zZSBpcyBpbnRlbmRlZCB0byBnaXZlCmV2ZXJ5b25lIHRoZSByaWdodCB0byBzaGFyZSBOZXRIYWNrLiAgVG8gbWFrZSBzdXJlIHRoYXQgeW91IGdldCB0aGUgcmlnaHRzIHdlCndhbnQgeW91IHRvIGhhdmUsIHdlIG5lZWQgdG8gbWFrZSByZXN0cmljdGlvbnMgdGhhdCBmb3JiaWQgYW55b25lIHRvIGRlbnkgeW91CnRoZXNlIHJpZ2h0cyBvciB0byBhc2sgeW91IHRvIHN1cnJlbmRlciB0aGUgcmlnaHRzLiAgSGVuY2UgdGhpcyBsaWNlbnNlCmFncmVlbWVudC4KCiAgU3BlY2lmaWNhbGx5LCB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB0aGF0IHlvdSBoYXZlIHRoZSByaWdodCB0byBnaXZlIGF3YXkKY29waWVzIG9mIE5ldEhhY2ssIHRoYXQgeW91IHJlY2VpdmUgc291cmNlIGNvZGUgb3IgZWxzZSBjYW4gZ2V0IGl0IGlmIHlvdQp3YW50IGl0LCB0aGF0IHlvdSBjYW4gY2hhbmdlIE5ldEhhY2sgb3IgdXNlIHBpZWNlcyBvZiBpdCBpbiBuZXcgZnJlZQpwcm9ncmFtcywgYW5kIHRoYXQgeW91IGtub3cgeW91IGNhbiBkbyB0aGVzZSB0aGluZ3MuCgogIFRvIG1ha2Ugc3VyZSB0aGF0IGV2ZXJ5b25lIGhhcyBzdWNoIHJpZ2h0cywgd2UgaGF2ZSB0byBmb3JiaWQgeW91IHRvCmRlcHJpdmUgYW55b25lIGVsc2Ugb2YgdGhlc2UgcmlnaHRzLiAgRm9yIGV4YW1wbGUsIGlmIHlvdSBkaXN0cmlidXRlIGNvcGllcwpvZiBOZXRIYWNrLCB5b3UgbXVzdCBnaXZlIHRoZSByZWNpcGllbnRzIGFsbCB0aGUgcmlnaHRzIHRoYXQgeW91IGhhdmUuICBZb3UKbXVzdCBtYWtlIHN1cmUgdGhhdCB0aGV5LCB0b28sIHJlY2VpdmUgb3IgY2FuIGdldCB0aGUgc291cmNlIGNvZGUuICBBbmQgeW91Cm11c3QgdGVsbCB0aGVtIHRoZWlyIHJpZ2h0cy4KCiAgQWxzbywgZm9yIG91ciBvd24gcHJvdGVjdGlvbiwgd2UgbXVzdCBtYWtlIGNlcnRhaW4gdGhhdCBldmVyeW9uZSBmaW5kcyBvdXQKdGhhdCB0aGVyZSBpcyBubyB3YXJyYW50eSBmb3IgTmV0SGFjay4gIElmIE5ldEhhY2sgaXMgbW9kaWZpZWQgYnkgc29tZW9uZQplbHNlIGFuZCBwYXNzZWQgb24sIHdlIHdhbnQgaXRzIHJlY2lwaWVudHMgdG8ga25vdyB0aGF0IHdoYXQgdGhleSBoYXZlIGlzCm5vdCB3aGF0IHdlIGRpc3RyaWJ1dGVkLgoKICBUaGVyZWZvcmUgd2UgKE1pa2UgU3RlcGhlbnNvbiBhbmQgb3RoZXIgaG9sZGVycyBvZiBOZXRIYWNrIGNvcHlyaWdodHMpIG1ha2UKdGhlIGZvbGxvd2luZyB0ZXJtcyB3aGljaCBzYXkgd2hhdCB5b3UgbXVzdCBkbyB0byBiZSBhbGxvd2VkIHRvIGRpc3RyaWJ1dGUgb3IKY2hhbmdlIE5ldEhhY2suCgoKICAgICAgICAgICAgICAgICAgICAgICAgQ09QWUlORyBQT0xJQ0lFUwoKICAxLiBZb3UgbWF5IGNvcHkgYW5kIGRpc3RyaWJ1dGUgdmVyYmF0aW0gY29waWVzIG9mIE5ldEhhY2sgc291cmNlIGNvZGUgYXMKeW91IHJlY2VpdmUgaXQsIGluIGFueSBtZWRpdW0sIHByb3ZpZGVkIHRoYXQgeW91IGtlZXAgaW50YWN0IHRoZSBub3RpY2VzIG9uCmFsbCBmaWxlcyB0aGF0IHJlZmVyIHRvIGNvcHlyaWdodHMsIHRvIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQsIGFuZCB0byB0aGUKYWJzZW5jZSBvZiBhbnkgd2FycmFudHk7IGFuZCBnaXZlIGFueSBvdGhlciByZWNpcGllbnRzIG9mIHRoZSBOZXRIYWNrCnByb2dyYW0gYSBjb3B5IG9mIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYWxvbmcgd2l0aCB0aGUgcHJvZ3JhbS4KCiAgMi4gWW91IG1heSBtb2RpZnkgeW91ciBjb3B5IG9yIGNvcGllcyBvZiBOZXRIYWNrIG9yIGFueSBwb3J0aW9uIG9mIGl0LCBhbmQKY29weSBhbmQgZGlzdHJpYnV0ZSBzdWNoIG1vZGlmaWNhdGlvbnMgdW5kZXIgdGhlIHRlcm1zIG9mIFBhcmFncmFwaCAxIGFib3ZlCihpbmNsdWRpbmcgZGlzdHJpYnV0aW5nIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQpLCBwcm92aWRlZCB0aGF0IHlvdSBhbHNvIGRvIHRoZQpmb2xsb3dpbmc6CgogICAgYSkgY2F1c2UgdGhlIG1vZGlmaWVkIGZpbGVzIHRvIGNhcnJ5IHByb21pbmVudCBub3RpY2VzIHN0YXRpbmcgdGhhdCB5b3UKICAgIGNoYW5nZWQgdGhlIGZpbGVzIGFuZCB0aGUgZGF0ZSBvZiBhbnkgY2hhbmdlOyBhbmQKCiAgICBiKSBjYXVzZSB0aGUgd2hvbGUgb2YgYW55IHdvcmsgdGhhdCB5b3UgZGlzdHJpYnV0ZSBvciBwdWJsaXNoLCB0aGF0IGluCiAgICB3aG9sZSBvciBpbiBwYXJ0IGNvbnRhaW5zIG9yIGlzIGEgZGVyaXZhdGl2ZSBvZiBOZXRIYWNrIG9yIGFueSBwYXJ0CiAgICB0aGVyZW9mLCB0byBiZSBsaWNlbnNlZCBhdCBubyBjaGFyZ2UgdG8gYWxsIHRoaXJkIHBhcnRpZXMgb24gdGVybXMKICAgIGlkZW50aWNhbCB0byB0aG9zZSBjb250YWluZWQgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCAoZXhjZXB0IHRoYXQgeW91CiAgICBtYXkgY2hvb3NlIHRvIGdyYW50IG1vcmUgZXh0ZW5zaXZlIHdhcnJhbnR5IHByb3RlY3Rpb24gdG8gc29tZSBvciBhbGwKICAgIHRoaXJkIHBhcnRpZXMsIGF0IHlvdXIgb3B0aW9uKQoKICAgIGMpIFlvdSBtYXkgY2hhcmdlIGEgZGlzdHJpYnV0aW9uIGZlZSBmb3IgdGhlIHBoeXNpY2FsIGFjdCBvZgogICAgdHJhbnNmZXJyaW5nIGEgY29weSwgYW5kIHlvdSBtYXkgYXQgeW91ciBvcHRpb24gb2ZmZXIgd2FycmFudHkgcHJvdGVjdGlvbgogICAgaW4gZXhjaGFuZ2UgZm9yIGEgZmVlLgoKICAzLiBZb3UgbWF5IGNvcHkgYW5kIGRpc3RyaWJ1dGUgTmV0SGFjayAob3IgYSBwb3J0aW9uIG9yIGRlcml2YXRpdmUgb2YgaXQsCnVuZGVyIFBhcmFncmFwaCAyKSBpbiBvYmplY3QgY29kZSBvciBleGVjdXRhYmxlIGZvcm0gdW5kZXIgdGhlIHRlcm1zIG9mClBhcmFncmFwaHMgMSBhbmQgMiBhYm92ZSBwcm92aWRlZCB0aGF0IHlvdSBhbHNvIGRvIG9uZSBvZiB0aGUgZm9sbG93aW5nOgoKICAgIGEpIGFjY29tcGFueSBpdCB3aXRoIHRoZSBjb21wbGV0ZSBtYWNoaW5lLXJlYWRhYmxlIHNvdXJjZSBjb2RlLCB3aGljaAogICAgbXVzdCBiZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgUGFyYWdyYXBocyAxIGFuZCAyIGFib3ZlOyBvciwKCiAgICBiKSBhY2NvbXBhbnkgaXQgd2l0aCBmdWxsIGluZm9ybWF0aW9uIGFzIHRvIGhvdyB0byBvYnRhaW4gdGhlIGNvbXBsZXRlCiAgICBtYWNoaW5lLXJlYWRhYmxlIHNvdXJjZSBjb2RlIGZyb20gYW4gYXBwcm9wcmlhdGUgYXJjaGl2ZSBzaXRlLiAgKFRoaXMKICAgIGFsdGVybmF0aXZlIGlzIGFsbG93ZWQgb25seSBmb3Igbm9uY29tbWVyY2lhbCBkaXN0cmlidXRpb24uKQoKRm9yIHRoZXNlIHB1cnBvc2VzLCBjb21wbGV0ZSBzb3VyY2UgY29kZSBtZWFucyBlaXRoZXIgdGhlIGZ1bGwgc291cmNlCmRpc3RyaWJ1dGlvbiBhcyBvcmlnaW5hbGx5IHJlbGVhc2VkIG92ZXIgVXNlbmV0IG9yIHVwZGF0ZWQgY29waWVzIG9mIHRoZQpmaWxlcyBpbiB0aGlzIGRpc3RyaWJ1dGlvbiB1c2VkIHRvIGNyZWF0ZSB0aGUgb2JqZWN0IGNvZGUgb3IgZXhlY3V0YWJsZS4KCiAgNC4gWW91IG1heSBub3QgY29weSwgc3VibGljZW5zZSwgZGlzdHJpYnV0ZSBvciB0cmFuc2ZlciBOZXRIYWNrIGV4Y2VwdCBhcwpleHByZXNzbHkgcHJvdmlkZWQgdW5kZXIgdGhpcyBMaWNlbnNlIEFncmVlbWVudC4gIEFueSBhdHRlbXB0IG90aGVyd2lzZSB0bwpjb3B5LCBzdWJsaWNlbnNlLCBkaXN0cmlidXRlIG9yIHRyYW5zZmVyIE5ldEhhY2sgaXMgdm9pZCBhbmQgeW91ciByaWdodHMgdG8KdXNlIHRoZSBwcm9ncmFtIHVuZGVyIHRoaXMgTGljZW5zZSBhZ3JlZW1lbnQgc2hhbGwgYmUgYXV0b21hdGljYWxseQp0ZXJtaW5hdGVkLiAgSG93ZXZlciwgcGFydGllcyB3aG8gaGF2ZSByZWNlaXZlZCBjb21wdXRlciBzb2Z0d2FyZSBwcm9ncmFtcwpmcm9tIHlvdSB3aXRoIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgd2lsbCBub3QgaGF2ZSB0aGVpciBsaWNlbnNlcyB0ZXJtaW5hdGVkCnNvIGxvbmcgYXMgc3VjaCBwYXJ0aWVzIHJlbWFpbiBpbiBmdWxsIGNvbXBsaWFuY2UuCgoKU3RhdGVkIHBsYWlubHk6ICBZb3UgYXJlIHBlcm1pdHRlZCB0byBtb2RpZnkgTmV0SGFjaywgb3Igb3RoZXJ3aXNlIHVzZSBwYXJ0cwpvZiBOZXRIYWNrLCBwcm92aWRlZCB0aGF0IHlvdSBjb21wbHkgd2l0aCB0aGUgY29uZGl0aW9ucyBzcGVjaWZpZWQgYWJvdmU7CmluIHBhcnRpY3VsYXIsIHlvdXIgbW9kaWZpZWQgTmV0SGFjayBvciBwcm9ncmFtIGNvbnRhaW5pbmcgcGFydHMgb2YgTmV0SGFjawptdXN0IHJlbWFpbiBmcmVlbHkgYXZhaWxhYmxlIGFzIHByb3ZpZGVkIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQuICBJbgpvdGhlciB3b3JkcywgZ28gYWhlYWQgYW5kIHNoYXJlIE5ldEhhY2ssIGJ1dCBkb24ndCB0cnkgdG8gc3RvcCBhbnlvbmUgZWxzZQpmcm9tIHNoYXJpbmcgaXQgZmFydGhlci4K';
Module['FS_createDataFile']('/', 'license', decodeBase64(fileData0), true, true, false);
var fileData1 = '';
Module['FS_createDataFile']('/', 'logfile', decodeBase64(fileData1), true, true, false);
var fileData2 = 'ICAxICAgICAgMTQwICAgICAxNjYzICAgICAzMTAzICAxMjk2NjcwCm5EaXJlY3RvcnkgICAgICAgIDAKbmhlbHAgICAgIDMxMDMKbmhoICAgIDE0OTU4Cm5jbWRoZWxwICAgIDIxODI0Cm5rZXloZWxwICAgIDI5MTk0Cm5oaXN0b3J5ICAgIDMyMzcxCm5vcHRoZWxwICAgIDUwNDM0Cm53aXpoZWxwICAgIDY4ODA5Cm5kdW5nZW9uLmx1YSAgICA3MDQ5NgpudHJpYnV0ZSAgICA3Njc4NApuYXNtb2RldXMubHVhICAgNDE1MDkyCm5iYWFsei5sdWEgICA0MTc1ODEKbmJpZ3JtLTEubHVhICAgNDIwMTYzCm5iaWdybS0xMC5sdWEgICA0MjI3MjEKbmJpZ3JtLTIubHVhICAgNDI1MDY5Cm5iaWdybS0zLmx1YSAgIDQyNzMyNApuYmlncm0tNC5sdWEgICA0Mjk5NjEKbmJpZ3JtLTUubHVhICAgNDMxNjU2Cm5iaWdybS02Lmx1YSAgIDQzMzQwOApuYmlncm0tNy5sdWEgICA0MzUxNDIKbmJpZ3JtLTgubHVhICAgNDM3MDczCm5iaWdybS05Lmx1YSAgIDQzODk3MwpuY2FzdGxlLmx1YSAgIDQ0MDkxNApuZmFrZXdpejEubHVhICAgNDQ5NDc2Cm5mYWtld2l6Mi5sdWEgICA0NTA3MDQKbmp1aWJsZXgubHVhICAgNDUxODExCm5rbm94Lmx1YSAgIDQ1NTgwMApubWVkdXNhLTEubHVhICAgNDYyNjkyCm5tZWR1c2EtMi5sdWEgICA0Njc0MjUKbm1lZHVzYS0zLmx1YSAgIDQ3MzAxMgpubWVkdXNhLTQubHVhICAgNDc3OTA1Cm5taW5lbmQtMS5sdWEgICA0ODMwMTQKbm1pbmVuZC0yLmx1YSAgIDQ4NzMyOQpubWluZW5kLTMubHVhICAgNDkyMjEwCm5taW5lZmlsbC5sdWEgICA0OTU2MTUKbm1pbmV0bi0xLmx1YSAgIDQ5NjcwMApubWluZXRuLTIubHVhICAgNTAyNDcxCm5taW5ldG4tMy5sdWEgICA1MDkxMjUKbm1pbmV0bi00Lmx1YSAgIDUxMzY2NwpubWluZXRuLTUubHVhICAgNTE4NTc2Cm5taW5ldG4tNi5sdWEgICA1MjM2ODkKbm1pbmV0bi03Lmx1YSAgIDUyNjY3OQpub3JhY2xlLmx1YSAgIDUzMzk2Ngpub3JjdXMubHVhICAgNTM2MjIyCm5zYW5jdHVtLmx1YSAgIDU0MDYwMApuc29rbzEtMS5sdWEgICA1NDYwMDgKbnNva28xLTIubHVhICAgNTQ5MDM3Cm5zb2tvMi0xLmx1YSAgIDU1MjA0OApuc29rbzItMi5sdWEgICA1NTM3MDkKbnNva28zLTEubHVhICAgNTU1NDgxCm5zb2tvMy0yLmx1YSAgIDU1NzU1Mgpuc29rbzQtMS5sdWEgICA1NTk0NTAKbnNva280LTIubHVhICAgNTYyMjUyCm50b3dlcjEubHVhICAgNTYzODc4Cm50b3dlcjIubHVhICAgNTY1NjYyCm50b3dlcjMubHVhICAgNTY3MTk0Cm52YWxsZXkubHVhICAgNTY4NzIxCm53aXphcmQxLmx1YSAgIDU3NDUxOApud2l6YXJkMi5sdWEgICA1Nzc3MDYKbndpemFyZDMubHVhICAgNTc5NzE0Cm5uaGxpYi5sdWEgICA1ODI1NTEKbnRoZW1lcm1zLmx1YSAgIDU4MzY2MgpuYXN0cmFsLmx1YSAgIDYwMDAxMQpuYWlyLmx1YSAgIDYwOTU4MwpuZWFydGgubHVhICAgNjE0ODc2Cm5maXJlLmx1YSAgIDYyMTA2MQpud2F0ZXIubHVhICAgNjI2NjQ5Cm5BcmMtZ29hbC5sdWEgICA2MzExODQKbkJhci1nb2FsLmx1YSAgIDYzNTUwMwpuQ2F2LWdvYWwubHVhICAgNjM5MzM0Cm5IZWEtZ29hbC5sdWEgICA2NDE4ODAKbktuaS1nb2FsLmx1YSAgIDY0NDU5NwpuTW9uLWdvYWwubHVhICAgNjQ4ODcxCm5QcmktZ29hbC5sdWEgICA2NTA4MjkKblJhbi1nb2FsLmx1YSAgIDY1MjkzNgpuUm9nLWdvYWwubHVhICAgNjU3NTU3Cm5TYW0tZ29hbC5sdWEgICA2NjIzNTAKblRvdS1nb2FsLmx1YSAgIDY2NTcxNQpuVmFsLWdvYWwubHVhICAgNjcxODQxCm5XaXotZ29hbC5sdWEgICA2NzUyMzUKbkFyYy1maWxhLmx1YSAgIDY4MDc0MApuQXJjLWZpbGIubHVhICAgNjgyMTUzCm5CYXItZmlsYS5sdWEgICA2ODM1NzUKbkJhci1maWxiLmx1YSAgIDY4NDQwMwpuQ2F2LWZpbGEubHVhICAgNjg1NjA5Cm5DYXYtZmlsYi5sdWEgICA2ODY1NjMKbkhlYS1maWxhLmx1YSAgIDY4NzYyNgpuSGVhLWZpbGIubHVhICAgNjg4Nzc3Cm5LbmktZmlsYS5sdWEgICA2OTAwOTUKbktuaS1maWxiLmx1YSAgIDY5MTAyMApuTW9uLWZpbGEubHVhICAgNjkyMDgwCm5Nb24tZmlsYi5sdWEgICA2OTM2NjcKblByaS1maWxhLmx1YSAgIDY5NTIzMApuUHJpLWZpbGIubHVhICAgNjk2NTQ1Cm5SYW4tZmlsYS5sdWEgICA2OTgwMjgKblJhbi1maWxiLmx1YSAgIDY5OTAxMgpuUm9nLWZpbGEubHVhICAgNzAwMDQ2Cm5Sb2ctZmlsYi5sdWEgICA3MDE4NDIKblNhbS1maWxhLmx1YSAgIDcwMzYzOApuU2FtLWZpbGIubHVhICAgNzA0NDU5Cm5Ub3UtZmlsYS5sdWEgICA3MDYzNTMKblRvdS1maWxiLmx1YSAgIDcwNzMyMwpuVmFsLWZpbGEubHVhICAgNzA4MzEzCm5WYWwtZmlsYi5sdWEgICA3MDkyMzYKbldpei1maWxhLmx1YSAgIDcxMDI2NQpuV2l6LWZpbGIubHVhICAgNzExNzk2Cm5BcmMtbG9jYS5sdWEgICA3MTMzMDAKbkJhci1sb2NhLmx1YSAgIDcxODQyNQpuQ2F2LWxvY2EubHVhICAgNzIzMDcwCm5IZWEtbG9jYS5sdWEgICA3MjcyMDcKbktuaS1sb2NhLmx1YSAgIDcyOTkzNgpuTW9uLWxvY2EubHVhICAgNzM0MTc1Cm5QcmktbG9jYS5sdWEgICA3Mzc0NDEKblJhbi1sb2NhLmx1YSAgIDc0MDI2MQpuUm9nLWxvY2EubHVhICAgNzQzNDQ4Cm5TYW0tbG9jYS5sdWEgICA3NDc2NzAKblRvdS1sb2NhLmx1YSAgIDc1MjU5NwpuVmFsLWxvY2EubHVhICAgNzU4NjAwCm5XaXotbG9jYS5sdWEgICA3NjEwNDMKbkFyYy1zdHJ0Lmx1YSAgIDc2NjY5MQpuQmFyLXN0cnQubHVhICAgNzcxMTAzCm5DYXYtc3RydC5sdWEgICA3NzUzMDkKbkhlYS1zdHJ0Lmx1YSAgIDc3OTYzMQpuS25pLXN0cnQubHVhICAgNzgzNzA4Cm5Nb24tc3RydC5sdWEgICA3ODc0NjEKblByaS1zdHJ0Lmx1YSAgIDc5MTQwMgpuUmFuLXN0cnQubHVhICAgNzk1MzE3Cm5Sb2ctc3RydC5sdWEgICA3OTk1MDUKblNhbS1zdHJ0Lmx1YSAgIDgwNTMzNQpuVG91LXN0cnQubHVhICAgODA5MDg5Cm5WYWwtc3RydC5sdWEgICA4MTM4MjYKbldpei1zdHJ0Lmx1YSAgIDgxNzcyNApuYm9ndXNtb24gICA4MjIyNDkKbmRhdGEgICA4MjY2NjEKbmVuZ3JhdmUgIDEwOTQyOTEKbmVwaXRhcGggIDEwOTU2MTcKbm9yYWNsZXMgIDExMDk3NzYKbm9wdGlvbnMgIDExMTU5NTEKbnF1ZXN0Lmx1YSAgMTExNzM1NApucnVtb3JzICAxMjQ3NDk3CiAgICAgICAgV2VsY29tZSB0byBOZXRIYWNrISAgICAgICAgICAgICAgICAoIGRlc2NyaXB0aW9uIG9mIHZlcnNpb24gMy42ICkKCiAgICAgICAgTmV0SGFjayBpcyBhIER1bmdlb25zIGFuZCBEcmFnb25zIGxpa2UgZ2FtZSB3aGVyZSB5b3UgKHRoZSBhZHZlbnR1cmVyKQpkZXNjZW5kIGludG8gdGhlIGRlcHRocyBvZiB0aGUgZHVuZ2VvbiBpbiBzZWFyY2ggb2YgdGhlIEFtdWxldCBvZiBZZW5kb3IsCnJlcHV0ZWQgdG8gYmUgaGlkZGVuIHNvbWV3aGVyZSBiZWxvdyB0aGUgdHdlbnRpZXRoIGxldmVsLiAgWW91IGJlZ2luIHlvdXIKYWR2ZW50dXJlIHdpdGggYSBwZXQgdGhhdCBjYW4gaGVscCB5b3UgaW4gbWFueSB3YXlzLCBhbmQgY2FuIGJlIHRyYWluZWQKdG8gZG8gYWxsIHNvcnRzIG9mIHRoaW5ncy4gIE9uIHRoZSB3YXkgeW91IHdpbGwgZmluZCB1c2VmdWwgKG9yIHVzZWxlc3MpCml0ZW1zLCBxdWl0ZSBwb3NzaWJseSB3aXRoIG1hZ2ljIHByb3BlcnRpZXMsIGFuZCBhc3NvcnRlZCBtb25zdGVycy4gIFlvdSBjYW4KYXR0YWNrIGEgbW9uc3RlciBieSB0cnlpbmcgdG8gbW92ZSBvbnRvIHRoZSBzcGFjZSBhIG1vbnN0ZXIgaXMgb24gKGJ1dCBvZnRlbgppdCBpcyBtdWNoIHdpc2VyIHRvIGxlYXZlIGl0IGFsb25lKS4KCiAgICAgICAgVW5saWtlIG1vc3QgYWR2ZW50dXJlIGdhbWVzLCB3aGljaCBnaXZlIHlvdSBhIHZlcmJhbCBkZXNjcmlwdGlvbiBvZgp5b3VyIGxvY2F0aW9uLCBOZXRIYWNrIGdpdmVzIHlvdSBhIHZpc3VhbCBpbWFnZSBvZiB0aGUgZHVuZ2VvbiBsZXZlbCB5b3UgYXJlCm9uLgoKICAgICAgICBOZXRIYWNrIHVzZXMgdGhlIGZvbGxvd2luZyBzeW1ib2xzOgoKICAgICAgICAtIGFuZCB8ICBUaGUgd2FsbHMgb2YgYSByb29tLCBwb3NzaWJseSBhbHNvIG9wZW4gZG9vcnMgb3IgYSBncmF2ZS4KICAgICAgICAuICAgICAgICBUaGUgZmxvb3Igb2YgYSByb29tIG9yIGEgZG9vcndheS4KICAgICAgICAjICAgICAgICBBIGNvcnJpZG9yLCBvciBpcm9uIGJhcnMsIG9yIGEgdHJlZSwgb3IgcG9zc2libHkgYSBraXRjaGVuCiAgICAgICAgICAgICAgICAgc2luayAoaWYgeW91ciBkdW5nZW9uIGhhcyBzaW5rcyksIG9yIGEgZHJhd2JyaWRnZS4KICAgICAgICA+ICAgICAgICBTdGFpcnMgZG93bjogYSB3YXkgdG8gdGhlIG5leHQgbGV2ZWwuCiAgICAgICAgPCAgICAgICAgU3RhaXJzIHVwOiBhIHdheSB0byB0aGUgcHJldmlvdXMgbGV2ZWwuCiAgICAgICAgQCAgICAgICAgWW91ICh1c3VhbGx5KSwgb3IgYW5vdGhlciBodW1hbi4KICAgICAgICApICAgICAgICBBIHdlYXBvbiBvZiBzb21lIHNvcnQuCiAgICAgICAgWyAgICAgICAgQSBzdWl0IG9yIHBpZWNlIG9mIGFybW9yLgogICAgICAgICUgICAgICAgIFNvbWV0aGluZyBlZGlibGUgKG5vdCBuZWNlc3NhcmlseSBoZWFsdGh5KS4KICAgICAgICAvICAgICAgICBBIHdhbmQuCiAgICAgICAgPSAgICAgICAgQSByaW5nLgogICAgICAgID8gICAgICAgIEEgc2Nyb2xsLgogICAgICAgICEgICAgICAgIEEgcG90aW9uLgogICAgICAgICggICAgICAgIFNvbWUgb3RoZXIgdXNlZnVsIG9iamVjdCAocGljay1heGUsIGtleSwgbGFtcC4uLikKICAgICAgICAkICAgICAgICBBIHBpbGUgb2YgZ29sZC4KICAgICAgICAqICAgICAgICBBIGdlbSBvciByb2NrIChwb3NzaWJseSB2YWx1YWJsZSwgcG9zc2libHkgd29ydGhsZXNzKS4KICAgICAgICArICAgICAgICBBIGNsb3NlZCBkb29yLCBvciBhIHNwZWxsYm9vayBjb250YWluaW5nIGEgc3BlbGwKICAgICAgICAgICAgICAgICB5b3UgY2FuIGxlYXJuLgogICAgICAgIF4gICAgICAgIEEgdHJhcCAob25jZSB5b3UgZGV0ZWN0IGl0KS4KICAgICAgICAiICAgICAgICBBbiBhbXVsZXQsIG9yIGEgc3BpZGVyIHdlYi4KICAgICAgICAwICAgICAgICBBbiBpcm9uIGJhbGwuCiAgICAgICAgXyAgICAgICAgQW4gYWx0YXIsIG9yIGFuIGlyb24gY2hhaW4uCiAgICAgICAgeyAgICAgICAgQSBmb3VudGFpbi4KICAgICAgICB9ICAgICAgICBBIHBvb2wgb2Ygd2F0ZXIgb3IgbW9hdCBvciBhIHBvb2wgb2YgbGF2YS4KICAgICAgICBcICAgICAgICBBbiBvcHVsZW50IHRocm9uZS4KICAgICAgICBgICAgICAgICBBIGJvdWxkZXIgb3Igc3RhdHVlLgogICAgICAgIEEgdG8gWiwgYSB0byB6LCBhbmQgc2V2ZXJhbCBvdGhlcnM6ICBNb25zdGVycy4KICAgICAgICBJICAgICAgICBJbnZpc2libGUgb3IgdW5zZWVuIG1vbnN0ZXIncyBsYXN0IGtub3duIGxvY2F0aW9uCgogICAgICAgICAgICAgICAgIFlvdSBjYW4gZmluZCBvdXQgd2hhdCBhIHN5bWJvbCByZXByZXNlbnRzIGJ5IHR5cGluZwogICAgICAgICAgICAgICAgICcvJyBhbmQgZm9sbG93aW5nIHRoZSBkaXJlY3Rpb25zIHRvIG1vdmUgdGhlIGN1cnNvcgogICAgICAgICAgICAgICAgIHRvIHRoZSBzeW1ib2wgaW4gcXVlc3Rpb24uICBGb3IgaW5zdGFuY2UsIGEgJ2QnIG1heQogICAgICAgICAgICAgICAgIHR1cm4gb3V0IHRvIGJlIGEgZG9nLgoKCnkgayB1ICAgNyA4IDkgICBNb3ZlIGNvbW1hbmRzOgogXHwvICAgICBcfC8gICAgICAgICAgICB5dWhqa2xibjogZ28gb25lIHN0ZXAgaW4gc3BlY2lmaWVkIGRpcmVjdGlvbgpoLS4tbCAgIDQtLi02ICAgICAgICAgICBZVUhKS0xCTjogZ28gaW4gc3BlY2lmaWVkIGRpcmVjdGlvbiB1bnRpbCB5b3UKIC98XCAgICAgL3xcICAgICAgICAgICAgICAgICAgICAgICAgaGl0IGEgd2FsbCBvciBydW4gaW50byBzb21ldGhpbmcKYiBqIG4gICAxIDIgMyAgICAgICAgICAgZzxkaXI+OiAgIHJ1biBpbiBkaXJlY3Rpb24gPGRpcj4gdW50aWwgc29tZXRoaW5nCiAgICAgIG51bWJlcnBhZCAgICAgICAgICAgICAgICAgICAgIGludGVyZXN0aW5nIGlzIHNlZW4KICAgICAgICAgICAgICAgICAgICAgICAgRzxkaXI+LCAgIHNhbWUsIGV4Y2VwdCBhIGJyYW5jaGluZyBjb3JyaWRvciBpc24ndAogPCAgdXAgICAgICAgICAgICAgICAgICBePGRpcj46ICAgICBjb25zaWRlcmVkIGludGVyZXN0aW5nICh0aGUgXiBpbiB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgbWVhbnMgdGhlIENvbnRyb2wga2V5LCBub3QgYSBjYXJldCkKID4gIGRvd24gICAgICAgICAgICAgICAgbTxkaXI+OiAgIG1vdmUgd2l0aG91dCBwaWNraW5nIHVwIG9iamVjdHMKICAgICAgICAgICAgICAgICAgICAgICAgRjxkaXI+OiAgIGZpZ2h0IGV2ZW4gaWYgeW91IGRvbid0IHNlbnNlIGEgbW9uc3RlcgogICAgICAgICAgICAgICAgSWYgdGhlIG51bWJlcl9wYWQgb3B0aW9uIGlzIHNldCwgdGhlIG51bWJlciBrZXlzIG1vdmUgaW5zdGVhZC4KICAgICAgICAgICAgICAgIERlcGVuZGluZyBvbiB0aGUgcGxhdGZvcm0sIFNoaWZ0IG51bWJlciAob24gdGhlIG51bWJlcnBhZCksCiAgICAgICAgICAgICAgICBNZXRhIG51bWJlciwgb3IgQWx0IG51bWJlciB3aWxsIGludm9rZSB0aGUgWVVISktMQk4gY29tbWFuZHMuCiAgICAgICAgICAgICAgICBDb250cm9sIDxkaXI+IG1heSBvciBtYXkgbm90IHdvcmsgd2hlbiBudW1iZXJfcGFkIGlzIGVuYWJsZWQsCiAgICAgICAgICAgICAgICBkZXBlbmRpbmcgb24gdGhlIHBsYXRmb3JtJ3MgY2FwYWJpbGl0aWVzLgogICAgICAgICAgICAgICAgRGlnaXQgJzUnIGFjdHMgYXMgJ0cnIHByZWZpeCwgdW5sZXNzIG51bWJlcl9wYWQgaXMgc2V0IHRvIDIKICAgICAgICAgICAgICAgIGluIHdoaWNoIGNhc2UgaXQgYWN0cyBhcyAnZycgaW5zdGVhZC4KICAgICAgICAgICAgICAgIElmIG51bWJlcl9wYWQgaXMgc2V0IHRvIDMsIHRoZSByb2xlcyBvZiAxLDIsMyBhbmQgNyw4LDkgYXJlCiAgICAgICAgICAgICAgICByZXZlcnNlZDsgd2hlbiBzZXQgdG8gNCwgYmVoYXZlcyBzYW1lIGFzIDMgY29tYmluZWQgd2l0aCAyLgogICAgICAgICAgICAgICAgSWYgbnVtYmVyX3BhZCBpcyBzZXQgdG8gLTEsIGFscGhhYmV0aWMgbW92ZW1lbnQgY29tbWFuZHMgYXJlCiAgICAgICAgICAgICAgICB1c2VkIGJ1dCAneScgYW5kICd6JyBhcmUgc3dhcHBlZC4KCkNvbW1hbmRzOgogICAgICAgIE5ldEhhY2sga25vd3MgdGhlIGZvbGxvd2luZyBjb21tYW5kczoKICAgICAgICA/ICAgICAgIEhlbHAgbWVudS4KICAgICAgICAvICAgICAgIFdoYXQtaXMsIHRlbGwgd2hhdCBhIHN5bWJvbCByZXByZXNlbnRzLiAgWW91IG1heSBjaG9vc2UgdG8KICAgICAgICAgICAgICAgIHNwZWNpZnkgYSBsb2NhdGlvbiBvciBnaXZlIGEgc3ltYm9sIGFyZ3VtZW50LiAgRW5hYmxpbmcgdGhlCiAgICAgICAgICAgICAgICBhdXRvZGVzY3JpYmUgb3B0aW9uIHdpbGwgZ2l2ZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc3ltYm9sCiAgICAgICAgICAgICAgICBhdCBlYWNoIGxvY2F0aW9uIHlvdSBtb3ZlIHRoZSBjdXJzb3Igb250by4KICAgICAgICAmICAgICAgIFRlbGwgd2hhdCBhIGNvbW1hbmQgZG9lcy4KICAgICAgICA8ICAgICAgIEdvIHVwIGEgc3RhaXJjYXNlIChpZiB5b3UgYXJlIHN0YW5kaW5nIG9uIGl0KS4KICAgICAgICA+ICAgICAgIEdvIGRvd24gYSBzdGFpcmNhc2UgKGlmIHlvdSBhcmUgc3RhbmRpbmcgb24gaXQpLgogICAgICAgIC4gICAgICAgUmVzdCwgZG8gbm90aGluZyBmb3Igb25lIHR1cm4uCiAgICAgICAgXyAgICAgICBUcmF2ZWwgdmlhIGEgc2hvcnRlc3QtcGF0aCBhbGdvcml0aG0gdG8gYSBwb2ludCBvbiB0aGUgbWFwLgogICAgICAgIGEgICAgICAgQXBwbHkgKHVzZSkgYSB0b29sIChwaWNrLWF4ZSwga2V5LCBsYW1wLi4uKS4KICAgICAgICBBICAgICAgIFJlbW92ZSBhbGwgYXJtb3IuCiAgICAgICAgXkEgICAgICBSZWRvIHRoZSBwcmV2aW91cyBjb21tYW5kLgogICAgICAgIGMgICAgICAgQ2xvc2UgYSBkb29yLgogICAgICAgIEMgICAgICAgQ2FsbCAobmFtZSkgbW9uc3RlciwgaW5kaXZpZHVhbCBvYmplY3QsIG9yIHR5cGUgb2Ygb2JqZWN0LgogICAgICAgIGQgICAgICAgRHJvcCBzb21ldGhpbmcuICBkN2E6ICBkcm9wIHNldmVuIGl0ZW1zIG9mIG9iamVjdCBhLgogICAgICAgIEQgICAgICAgRHJvcCBtdWx0aXBsZSBpdGVtcy4gIFRoaXMgY29tbWFuZCBpcyBpbXBsZW1lbnRlZCBpbiB0d28KICAgICAgICAgICAgICAgIGRpZmZlcmVudCB3YXlzLiAgT25lIHdheSBpczoKICAgICAgICAgICAgICAgICJEIiBkaXNwbGF5cyBhIGxpc3Qgb2YgYWxsIG9mIHlvdXIgaXRlbXMsIGZyb20gd2hpY2ggeW91IGNhbgogICAgICAgICAgICAgICAgcGljayBhbmQgY2hvb3NlIHdoYXQgdG8gZHJvcC4gIEEgIisiIG5leHQgdG8gYW4gaXRlbSBtZWFucwogICAgICAgICAgICAgICAgdGhhdCBpdCB3aWxsIGJlIGRyb3BwZWQsIGEgIi0iIG1lYW5zIHRoYXQgaXQgd2lsbCBub3QgYmUKICAgICAgICAgICAgICAgIGRyb3BwZWQuICBUb2dnbGUgYW4gaXRlbSB0byBiZSBzZWxlY3RlZC9kZXNlbGVjdGVkIGJ5IHR5cGluZwogICAgICAgICAgICAgICAgdGhlIGxldHRlciBhZGphY2VudCB0byBpdHMgZGVzY3JpcHRpb24uICBTZWxlY3QgYWxsIGl0ZW1zCiAgICAgICAgICAgICAgICB3aXRoICIrIiwgZGVzZWxlY3QgYWxsIGl0ZW1zIHdpdGggIj0iLiAgVGhlIDxTUEFDRUJBUj4gbW92ZXMKICAgICAgICAgICAgICAgIHlvdSBmcm9tIG9uZSBwYWdlIG9mIHRoZSBsaXN0aW5nIHRvIHRoZSBuZXh0LgogICAgICAgICAgICAgICAgVGhlIG90aGVyIHdheSBpczoKICAgICAgICAgICAgICAgICJEIiB3aWxsIGFzayB0aGUgcXVlc3Rpb24gIldoYXQga2luZHMgb2YgdGhpbmdzIGRvIHlvdSB3YW50CiAgICAgICAgICAgICAgICB0byBkcm9wPyBbISU9IGF1XSIuICBZb3Ugc2hvdWxkIHR5cGUgemVybyBvciBtb3JlIG9iamVjdAogICAgICAgICAgICAgICAgc3ltYm9scyBwb3NzaWJseSBmb2xsb3dlZCBieSAnYScgYW5kL29yICd1Jy4KICAgICAgICAgICAgICAgIERhIC0gZHJvcCBhbGwgb2JqZWN0cywgd2l0aG91dCBhc2tpbmcgZm9yIGNvbmZpcm1hdGlvbi4KICAgICAgICAgICAgICAgIER1IC0gZHJvcCBvbmx5IHVucGFpZCBvYmplY3RzICh3aGVuIGluIGEgc2hvcCkuCiAgICAgICAgICAgICAgICBEJXUgLSBkcm9wIG9ubHkgdW5wYWlkIGZvb2QuCiAgICAgICAgXkQgICAgICBLaWNrIChmb3IgZG9vcnMsIHVzdWFsbHkpLgogICAgICAgIGUgICAgICAgRWF0IGZvb2QuCiAgICAgICAgRSAgICAgICBFbmdyYXZlIGEgbWVzc2FnZSBvbiB0aGUgZmxvb3IuCiAgICAgICAgICAgICAgICBFLSAtIHdyaXRlIGluIHRoZSBkdXN0IHdpdGggeW91ciBmaW5nZXJzLgogICAgICAgIGYgICAgICAgRmlyZSBhbW11bml0aW9uIGZyb20gcXVpdmVyLgogICAgICAgIEYgICAgICAgRm9sbG93ZWQgYnkgZGlyZWN0aW9uLCBmaWdodCBhIG1vbnN0ZXIgKGV2ZW4gaWYgeW91IGRvbid0CiAgICAgICAgICAgICAgICBzZW5zZSBpdCkuCiAgICAgICAgaSAgICAgICBEaXNwbGF5IHlvdXIgaW52ZW50b3J5LgogICAgICAgIEkgICAgICAgRGlzcGxheSBzZWxlY3RlZCBwYXJ0cyBvZiB5b3VyIGludmVudG9yeSwgYXMgaW4KICAgICAgICAgICAgICAgIEkqIC0gbGlzdCBhbGwgZ2VtcyBpbiBpbnZlbnRvcnkuCiAgICAgICAgICAgICAgICBJdSAtIGxpc3QgYWxsIHVucGFpZCBpdGVtcy4KICAgICAgICAgICAgICAgIEl4IC0gbGlzdCBhbGwgdXNlZCB1cCBpdGVtcyB0aGF0IGFyZSBvbiB5b3VyIHNob3BwaW5nIGJpbGwuCiAgICAgICAgICAgICAgICBJJCAtIGNvdW50IHlvdXIgbW9uZXkuCiAgICAgICAgbyAgICAgICBPcGVuIGEgZG9vci4KICAgICAgICBPICAgICAgIFJldmlldyBjdXJyZW50IG9wdGlvbnMgYW5kIHBvc3NpYmx5IGNoYW5nZSB0aGVtLgogICAgICAgICAgICAgICAgQSBtZW51IGRpc3BsYXlpbmcgdGhlIG9wdGlvbiBzZXR0aW5ncyB3aWxsIGJlIGRpc3BsYXllZAogICAgICAgICAgICAgICAgYW5kIG1vc3QgY2FuIGJlIGNoYW5nZWQgYnkgc2ltcGx5IHNlbGVjdGluZyB0aGVpciBlbnRyeS4KICAgICAgICAgICAgICAgIE9wdGlvbnMgYXJlIHVzdWFsbHkgc2V0IGJlZm9yZSB0aGUgZ2FtZSB3aXRoIE5FVEhBQ0tPUFRJT05TCiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudCB2YXJpYWJsZSBvciB2aWEgYSBjb25maWd1cmF0aW9uIGZpbGUgKGRlZmF1bHRzLm5oLAogICAgICAgICAgICAgICAgTmV0SGFjayBEZWZhdWx0cywgbmV0aGFjay5jbmYsIH4vLm5ldGhhY2tyYywgZXRjLikgcmF0aGVyCiAgICAgICAgICAgICAgICB0aGFuIHdpdGggdGhlICdPJyBjb21tYW5kLgogICAgICAgIHAgICAgICAgUGF5IHlvdXIgc2hvcHBpbmcgYmlsbC4KICAgICAgICBQICAgICAgIFB1dCBvbiBhbiBhY2Nlc3NvcnkgKHJpbmcsIGFtdWxldCwgZXRjKS4KICAgICAgICBeUCAgICAgIFJlcGVhdCBsYXN0IG1lc3NhZ2UgKHN1YnNlcXVlbnQgXlAncyByZXBlYXQgZWFybGllciBtZXNzYWdlcykuCiAgICAgICAgICAgICAgICBUaGUgYmVoYXZpb3IgY2FuIGJlIHZhcmllZCB2aWEgdGhlIG1zZ193aW5kb3cgb3B0aW9uLgogICAgICAgIHEgICAgICAgRHJpbmsgKHF1YWZmKSBzb21ldGhpbmcgKHBvdGlvbiwgd2F0ZXIsIGV0YykuCiAgICAgICAgUSAgICAgICBTZWxlY3QgYW1tdW5pdGlvbiBmb3IgcXVpdmVyLgogICAgICAgICNxdWl0ICAgRXhpdCB0aGUgcHJvZ3JhbSB3aXRob3V0IHNhdmluZyB0aGUgY3VycmVudCBnYW1lLgogICAgICAgIHIgICAgICAgUmVhZCBhIHNjcm9sbCBvciBzcGVsbGJvb2suCiAgICAgICAgUiAgICAgICBSZW1vdmUgYW4gYWNjZXNzb3J5IChyaW5nLCBhbXVsZXQsIGV0YykuCiAgICAgICAgXlIgICAgICBSZWRyYXcgdGhlIHNjcmVlbi4KICAgICAgICBzICAgICAgIFNlYXJjaCBmb3Igc2VjcmV0IGRvb3JzIGFuZCB0cmFwcyBhcm91bmQgeW91LgogICAgICAgIFMgICAgICAgU2F2ZSB0aGUgZ2FtZS4gIEFsc28gZXhpdHMgdGhlIHByb2dyYW0uCiAgICAgICAgICAgICAgICBbVG8gcmVzdG9yZSwganVzdCBwbGF5IGFnYWluIGFuZCB1c2UgdGhlIHNhbWUgY2hhcmFjdGVyIG5hbWUuXQogICAgICAgICAgICAgICAgW1RoZXJlIGlzIG5vICJzYXZlIGN1cnJlbnQgZGF0YSBidXQga2VlcCBwbGF5aW5nIiBjYXBhYmlsaXR5Ll0KICAgICAgICB0ICAgICAgIFRocm93IGFuIG9iamVjdCBvciBzaG9vdCBhIHByb2plY3RpbGUuCiAgICAgICAgVCAgICAgICBUYWtlIG9mZiBhcm1vci4KICAgICAgICBeVCAgICAgIFRlbGVwb3J0LCBpZiB5b3UgYXJlIGFibGUuCiAgICAgICAgdiAgICAgICBEaXNwbGF5cyB0aGUgdmVyc2lvbiBudW1iZXIuCiAgICAgICAgViAgICAgICBEaXNwbGF5IGEgbG9uZ2VyIGlkZW50aWZpY2F0aW9uIG9mIHRoZSB2ZXJzaW9uLCBpbmNsdWRpbmcgdGhlCiAgICAgICAgICAgICAgICBoaXN0b3J5IG9mIHRoZSBnYW1lLgogICAgICAgIHcgICAgICAgV2llbGQgd2VhcG9uLiAgdy0gbWVhbnMgd2llbGQgbm90aGluZywgdXNlIGJhcmUgaGFuZHMuCiAgICAgICAgVyAgICAgICBXZWFyIGFybW9yLgogICAgICAgIHggICAgICAgU3dhcCB3aWVsZGVkIGFuZCBzZWNvbmRhcnkgd2VhcG9ucy4KICAgICAgICBYICAgICAgIFRvZ2dsZSB0d28td2VhcG9uIGNvbWJhdC4KICAgICAgICBeWCAgICAgIFNob3cgeW91ciBhdHRyaWJ1dGVzLgogICAgICAgICNleHBsb3JlICBTd2l0Y2ggdG8gRXhwbG9yZSBNb2RlIChha2EgRGlzY292ZXJ5IE1vZGUpIHdoZXJlIGR5aW5nIGFuZAogICAgICAgICAgICAgICAgZGVsZXRpbmcgdGhlIHNhdmUgZmlsZSBkdXJpbmcgcmVzdG9yZSBjYW4gYm90aCBiZSBvdmVycmlkZGVuLgogICAgICAgIHogICAgICAgWmFwIGEgd2FuZC4gIChVc2UgeSBpbnN0ZWFkIG9mIHogaWYgbnVtYmVyX3BhZCBpcyAtMS4pCiAgICAgICAgWiAgICAgICBDYXN0IGEgc3BlbGwuICAoVXNlIFkgaW5zdGVhZCBvZiBaIGlmIG51bWJlcl9wYWQgaXMgLTEuKQogICAgICAgIF5aICAgICAgU3VzcGVuZCB0aGUgZ2FtZS4gICheWSBpbnN0ZWFkIG9mIF5aIGlmIG51bWJlcl9wYWQgaXMgLTEuKQogICAgICAgICAgICAgICAgW1RvIHJlc3VtZSwgdXNlIHRoZSBzaGVsbCBjb21tYW5kICdmZycuXQogICAgICAgIDogICAgICAgTG9vayBhdCB3aGF0IGlzIGhlcmUuCiAgICAgICAgOyAgICAgICBMb29rIGF0IHdoYXQgaXMgc29tZXdoZXJlIGVsc2UuCiAgICAgICAgLCAgICAgICBQaWNrIHVwIHNvbWUgdGhpbmdzLgogICAgICAgIEAgICAgICAgVG9nZ2xlIHRoZSBwaWNrdXAgb3B0aW9uLgogICAgICAgIF4gICAgICAgQXNrIGZvciB0aGUgdHlwZSBvZiBhIHRyYXAgeW91IGZvdW5kIGVhcmxpZXIuCiAgICAgICAgKSAgICAgICBUZWxsIHdoYXQgd2VhcG9uIHlvdSBhcmUgd2llbGRpbmcuCiAgICAgICAgWyAgICAgICBUZWxsIHdoYXQgYXJtb3IgeW91IGFyZSB3ZWFyaW5nLgogICAgICAgID0gICAgICAgVGVsbCB3aGF0IHJpbmdzIHlvdSBhcmUgd2VhcmluZy4KICAgICAgICAiICAgICAgIFRlbGwgd2hhdCBhbXVsZXQgeW91IGFyZSB3ZWFyaW5nLgogICAgICAgICggICAgICAgVGVsbCB3aGF0IHRvb2xzIHlvdSBhcmUgdXNpbmcuCiAgICAgICAgKiAgICAgICBUZWxsIHdoYXQgZXF1aXBtZW50IHlvdSBhcmUgdXNpbmc7IGNvbWJpbmVzIHRoZSBwcmVjZWRpbmcgZml2ZS4KICAgICAgICAkICAgICAgIENvdW50IHlvdXIgZ29sZCBwaWVjZXMuCiAgICAgICAgKyAgICAgICBMaXN0IHRoZSBzcGVsbHMgeW91IGtub3c7IGFsc28gcmVhcnJhbmdlIHRoZW0gaWYgZGVzaXJlZC4KICAgICAgICBcICAgICAgIFNob3cgd2hhdCB0eXBlcyBvZiBvYmplY3RzIGhhdmUgYmVlbiBkaXNjb3ZlcmVkLgogICAgICAgIGAgICAgICAgU2hvdyBkaXNjb3ZlcmVkIHR5cGVzIGZvciBvbmUgY2xhc3Mgb2Ygb2JqZWN0cy4KICAgICAgICAhICAgICAgIEVzY2FwZSB0byBhIHNoZWxsLCBpZiBzdXBwb3J0ZWQgaW4geW91ciB2ZXJzaW9uIGFuZCBPUy4KICAgICAgICAgICAgICAgIFtUbyByZXN1bWUgcGxheSwgdGVybWluYXRlIHRoZSBzaGVsbCBzdWJwcm9jZXNzIHZpYSAnZXhpdCcuXQogICAgICAgICMgICAgICAgSW50cm9kdWNlcyBvbmUgb2YgdGhlICJleHRlbmRlZCIgY29tbWFuZHMuICBUbyBnZXQgYSBsaXN0IG9mCiAgICAgICAgICAgICAgICB0aGUgY29tbWFuZHMgeW91IGNhbiB1c2Ugd2l0aCAiIyIgdHlwZSAiIz8iLiAgVGhlIGV4dGVuZGVkCiAgICAgICAgICAgICAgICBjb21tYW5kcyB5b3UgY2FuIHVzZSBkZXBlbmRzIHVwb24gd2hhdCBvcHRpb25zIHRoZSBnYW1lIHdhcwogICAgICAgICAgICAgICAgY29tcGlsZWQgd2l0aCwgYWxvbmcgd2l0aCB5b3VyIGNsYXNzIGFuZCB3aGF0IHR5cGUgb2YgbW9uc3RlcgogICAgICAgICAgICAgICAgeW91IG1vc3QgY2xvc2VseSByZXNlbWJsZSBhdCBhIGdpdmVuIG1vbWVudC4gIElmIHlvdXIga2V5Ym9hcmQKICAgICAgICAgICAgICAgIGhhcyBhIG1ldGEga2V5ICh3aGljaCwgd2hlbiBwcmVzc2VkIGluIGNvbWJpbmF0aW9uIHdpdGggYW5vdGhlcgogICAgICAgICAgICAgICAga2V5LCBtb2RpZmllcyBpdCBieSBzZXR0aW5nIHRoZSAnbWV0YScgKDh0aCwgb3IgJ2hpZ2gnKSBiaXQpLAogICAgICAgICAgICAgICAgdGhlc2UgZXh0ZW5kZWQgY29tbWFuZHMgY2FuIGJlIGludm9rZWQgYnkgbWV0YS1pbmcgdGhlIGZpcnN0CiAgICAgICAgICAgICAgICBsZXR0ZXIgb2YgdGhlIGNvbW1hbmQuICBBbiBhbHQga2V5IG1heSBoYXZlIGEgc2ltaWxhciBlZmZlY3QuCgogICAgICAgIElmIHRoZSAibnVtYmVyX3BhZCIgb3B0aW9uIGlzIG9uLCBzb21lIGFkZGl0aW9uYWwgbGV0dGVyIGNvbW1hbmRzCiAgICAgICAgYXJlIGF2YWlsYWJsZToKCiAgICAgICAgaCAgICAgICBkaXNwbGF5cyB0aGUgaGVscCBtZW51LCBsaWtlICc/JwogICAgICAgIGogICAgICAgSnVtcCB0byBhbm90aGVyIGxvY2F0aW9uLgogICAgICAgIGsgICAgICAgS2ljayAoZm9yIGRvb3JzLCB1c3VhbGx5KS4KICAgICAgICBsICAgICAgIExvb3QgYSBib3ggb24gdGhlIGZsb29yLgogICAgICAgIG4gICAgICAgZm9sbG93ZWQgYnkgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgbmV4dCBjb21tYW5kLgogICAgICAgIE4gICAgICAgTmFtZSBhIG1vbnN0ZXIsIGFuIGluZGl2aWR1YWwgb2JqZWN0LCBvciBhIHR5cGUgb2Ygb2JqZWN0LgogICAgICAgIHUgICAgICAgVW50cmFwIGEgdHJhcHBlZCBvYmplY3Qgb3IgZG9vci4KCiAgICAgICAgWW91IGNhbiBwdXQgYSBudW1iZXIgYmVmb3JlIGEgY29tbWFuZCB0byByZXBlYXQgaXQgdGhhdCBtYW55IHRpbWVzLAogICAgICAgIGFzIGluICI0MC4iIG9yICIyMHMiLiAgSWYgeW91IGhhdmUgdGhlIG51bWJlcl9wYWQgb3B0aW9uIHNldCwgeW91CiAgICAgICAgbXVzdCB0eXBlICduJyB0byBwcmVmaXggdGhlIGNvdW50LCBhcyBpbiAibjQwLiIgb3IgIm4yMHMiLgoKCiAgICAgICAgU29tZSBpbmZvcm1hdGlvbiBpcyBkaXNwbGF5ZWQgb24gdGhlIGJvdHRvbSBsaW5lIG9yIHBlcmhhcHMgaW4gYQogICAgICAgIGJveCwgZGVwZW5kaW5nIG9uIHRoZSBwbGF0Zm9ybSB5b3UgYXJlIHVzaW5nLiAgWW91IHNlZSB5b3VyCiAgICAgICAgYXR0cmlidXRlcywgeW91ciBhbGlnbm1lbnQsIHdoYXQgZHVuZ2VvbiBsZXZlbCB5b3UgYXJlIG9uLCBob3cgbWFueQogICAgICAgIGhpdCBwb2ludHMgeW91IGhhdmUgbm93IChhbmQgd2lsbCBoYXZlIHdoZW4gZnVsbHkgcmVjb3ZlcmVkKSwgd2hhdAogICAgICAgIHlvdXIgYXJtb3IgY2xhc3MgaXMgKHRoZSBsb3dlciB0aGUgYmV0dGVyKSwgeW91ciBleHBlcmllbmNlIGxldmVsLAogICAgICAgIGFuZCB0aGUgc3RhdGUgb2YgeW91ciBzdG9tYWNoLiAgT3B0aW9uYWxseSwgeW91IG1heSBvciBtYXkgbm90IHNlZQogICAgICAgIG90aGVyIGluZm9ybWF0aW9uIHN1Y2ggYXMgc3BlbGwgcG9pbnRzLCBob3cgbXVjaCBnb2xkIHlvdSBoYXZlLCBldGMuCgogICAgICAgIEhhdmUgRnVuLCBhbmQgSGFwcHkgSGFja2luZyEKeSBrIHUgICA3IDggOSAgIE1vdmUgY29tbWFuZHM6CiBcfC8gICAgIFx8LyAgICAgICAgICAgIHl1aGprbGJuOiBnbyBvbmUgc3RlcCBpbiBzcGVjaWZpZWQgZGlyZWN0aW9uCmgtLi1sICAgNC0uLTYgICAgICAgICAgIFlVSEpLTEJOOiBnbyBpbiBzcGVjaWZpZWQgZGlyZWN0aW9uIHVudGlsIHlvdQogL3xcICAgICAvfFwgICAgICAgICAgICAgICAgICAgICAgICBoaXQgYSB3YWxsIG9yIHJ1biBpbnRvIHNvbWV0aGluZwpiIGogbiAgIDEgMiAzICAgICAgICAgICBnPGRpcj46ICAgcnVuIGluIGRpcmVjdGlvbiA8ZGlyPiB1bnRpbCBzb21ldGhpbmcKICAgICAgbnVtYmVycGFkICAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3RpbmcgaXMgc2VlbgogICAgICAgICAgICAgICAgICAgICAgICBHPGRpcj4sICAgc2FtZSwgZXhjZXB0IGEgYnJhbmNoaW5nIGNvcnJpZG9yIGlzbid0CiA8ICB1cCAgICAgICAgICAgICAgICAgIF48ZGlyPjogICAgIGNvbnNpZGVyZWQgaW50ZXJlc3RpbmcgKHRoZSBeIGluIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBtZWFucyB0aGUgQ29udHJvbCBrZXksIG5vdCBhIGNhcmV0KQogPiAgZG93biAgICAgICAgICAgICAgICBtPGRpcj46ICAgbW92ZSB3aXRob3V0IHBpY2tpbmcgdXAgb2JqZWN0cy9maWdodGluZwogICAgICAgICAgICAgICAgICAgICAgICBGPGRpcj46ICAgZmlnaHQgZXZlbiBpZiB5b3UgZG9uJ3Qgc2Vuc2UgYSBtb25zdGVyCiAgICAgICAgICAgICAgICBJZiB0aGUgbnVtYmVyX3BhZCBvcHRpb24gaXMgc2V0LCB0aGUgbnVtYmVyIGtleXMgbW92ZSBpbnN0ZWFkLgogICAgICAgICAgICAgICAgRGVwZW5kaW5nIG9uIHRoZSBwbGF0Zm9ybSwgU2hpZnQgbnVtYmVyIChvbiB0aGUgbnVtYmVycGFkKSwKICAgICAgICAgICAgICAgIE1ldGEgbnVtYmVyLCBvciBBbHQgbnVtYmVyIHdpbGwgaW52b2tlIHRoZSBZVUhKS0xCTiBjb21tYW5kcy4KICAgICAgICAgICAgICAgIENvbnRyb2wgPGRpcj4gbWF5IG9yIG1heSBub3Qgd29yayB3aGVuIG51bWJlcl9wYWQgaXMgZW5hYmxlZCwKICAgICAgICAgICAgICAgIGRlcGVuZGluZyBvbiB0aGUgcGxhdGZvcm0ncyBjYXBhYmlsaXRpZXMuCiAgICAgICAgICAgICAgICBEaWdpdCAnNScgYWN0cyBhcyAnRycgcHJlZml4LCB1bmxlc3MgbnVtYmVyX3BhZCBpcyBzZXQgdG8gMgogICAgICAgICAgICAgICAgaW4gd2hpY2ggY2FzZSBpdCBhY3RzIGFzICdnJyBpbnN0ZWFkLgogICAgICAgICAgICAgICAgSWYgbnVtYmVyX3BhZCBpcyBzZXQgdG8gMywgdGhlIHJvbGVzIG9mIDEsMiwzIGFuZCA3LDgsOSBhcmUKICAgICAgICAgICAgICAgIHJldmVyc2VkOyB3aGVuIHNldCB0byA0LCBiZWhhdmVzIHNhbWUgYXMgMyBjb21iaW5lZCB3aXRoIDIuCiAgICAgICAgICAgICAgICBJZiBudW1iZXJfcGFkIGlzIHNldCB0byAtMSwgYWxwaGFiZXRpYyBtb3ZlbWVudCBjb21tYW5kcyBhcmUKICAgICAgICAgICAgICAgIHVzZWQgYnV0ICd5JyBhbmQgJ3onIGFyZSBzd2FwcGVkLgoKR2VuZXJhbCBjb21tYW5kczoKPyAgICAgICBoZWxwICAgIGRpc3BsYXkgb25lIG9mIHNldmVyYWwgaW5mb3JtYXRpdmUgdGV4dHMKI3F1aXQgICBxdWl0ICAgIGVuZCB0aGUgZ2FtZSB3aXRob3V0IHNhdmluZyBjdXJyZW50IGdhbWUKUyAgICAgICBzYXZlICAgIHNhdmUgdGhlIGdhbWUgKHRvIGJlIGNvbnRpbnVlZCBsYXRlcikgYW5kIGV4aXQKICAgICAgICAgICAgICAgIFt0byByZXN0b3JlLCBwbGF5IGFnYWluIGFuZCB1c2UgdGhlIHNhbWUgY2hhcmFjdGVyIG5hbWVdCiEgICAgICAgc2ggICAgICBlc2NhcGUgdG8gc29tZSBTSEVMTCAoaWYgYWxsb3dlZDsgJ2V4aXQnIHRvIHJlc3VtZSBwbGF5KQpeWiAgICAgIHN1c3BlbmQgc3VzcGVuZCB0aGUgZ2FtZSAoaW5kZXBlbmRlbnQgb2YgeW91ciBjdXJyZW50IHN1c3BlbmQgY2hhcikKICAgICAgICAgICAgICAgIFtvbiBVTklYKHRtKS1iYXNlZCBzeXN0ZW1zLCB1c2UgdGhlICdmZycgY29tbWFuZCB0byByZXN1bWVdCk8gICAgICAgb3B0aW9ucyBzZXQgb3B0aW9ucwovICAgICAgIHdoYXQtaXMgdGVsbCB3aGF0IGEgbWFwIHN5bWJvbCByZXByZXNlbnRzClwgICAgICAga25vd24gICBkaXNwbGF5IGxpc3Qgb2Ygd2hhdCdzIGJlZW4gZGlzY292ZXJlZAp2ICAgICAgIHZlcnNpb24gZGlzcGxheSB2ZXJzaW9uIG51bWJlcgpWICAgICAgIGhpc3RvcnkgZGlzcGxheSBnYW1lIGhpc3RvcnkKXkEgICAgICBhZ2FpbiAgIHJlZG8gdGhlIHByZXZpb3VzIGNvbW1hbmQgKF5BIGRlbm90ZXMgdGhlIGtleXN0cm9rZSBDVFJMLUEpCl5SICAgICAgcmVkcmF3ICByZWRyYXcgdGhlIHNjcmVlbgpeUCAgICAgIHByZXZtc2cgcmVwZWF0IHByZXZpb3VzIG1lc3NhZ2UgKHN1YnNlcXVlbnQgXlAncyByZXBlYXQgZWFybGllciBvbmVzKQojICAgICAgICAgICAgICAgaW50cm9kdWNlcyBhbiBleHRlbmRlZCBjb21tYW5kICgjPyBmb3IgYSBsaXN0IG9mIHRoZW0pCiYgICAgICAgd2hhdC1kb2VzIGRlc2NyaWJlIHRoZSBjb21tYW5kIGEga2V5c3Ryb2tlIGludm9rZXMKCkdhbWUgY29tbWFuZHM6Cl5EICAgICAga2ljayAgICBraWNrIChhIGRvb3IsIG9yIHNvbWV0aGluZyBlbHNlKQpeVCAgICAgICdwb3J0ICAgdGVsZXBvcnQgKGlmIHlvdSBjYW4pCl5YICAgICAgc2hvdyAgICBzaG93IHlvdXIgYXR0cmlidXRlcwphICAgICAgIGFwcGx5ICAgYXBwbHkgb3IgdXNlIGEgdG9vbCAocGljay1heGUsIGtleSwgY2FtZXJhLCBldGMuKQpBICAgICAgIGFybW9yICAgdGFrZSBvZmYgYWxsIGFybW9yCmMgICAgICAgY2xvc2UgICBjbG9zZSBhIGRvb3IKQyAgICAgICBjYWxsICAgIG5hbWUgYSBtb25zdGVyLCBhbiBpbmRpdmlkdWFsIG9iamVjdCwgb3IgYSB0eXBlIG9mIG9iamVjdApkICAgICAgIGRyb3AgICAgZHJvcCBhbiBvYmplY3QuICBkN2E6ICBkcm9wIHNldmVuIGl0ZW1zIG9mIG9iamVjdCAnYScKRCAgICAgICBEcm9wICAgIGRyb3Agc2VsZWN0ZWQgdHlwZXMgb2Ygb2JqZWN0cwplICAgICAgIGVhdCAgICAgZWF0IHNvbWV0aGluZwpFICAgICAgIGVuZ3JhdmUgd3JpdGUgYSBtZXNzYWdlIGluIHRoZSBkdXN0IG9uIHRoZSBmbG9vciAgKEUtICB1c2UgZmluZ2VycykKZiAgICAgICBmaXJlICAgIGZpcmUgYW1tdW5pdGlvbiBmcm9tIHF1aXZlcgpGICAgICAgIGZpZ2h0ICAgZm9sbG93ZWQgYnkgZGlyZWN0aW9uLCBmaWdodCBhIG1vbnN0ZXIKaSAgICAgICBpbnZlbnQgIGxpc3QgeW91ciBpbnZlbnRvcnkgKGFsbCBvYmplY3RzIHlvdSBhcmUgY2FycnlpbmcpCkkgICAgICAgSW52ZW50ICBsaXN0IHNlbGVjdGVkIHBhcnRzIG9mIHlvdXIgaW52ZW50b3J5CiAgICAgICAgICAgICAgICBJdTogbGlzdCB1bnBhaWQgb2JqZWN0cwogICAgICAgICAgICAgICAgSXg6IGxpc3QgdW5wYWlkIGJ1dCB1c2VkIHVwIGl0ZW1zCiAgICAgICAgICAgICAgICBJJDogY291bnQgeW91ciBtb25leQpvICAgICAgIG9wZW4gICAgb3BlbiBhIGRvb3IKcCAgICAgICBwYXkgICAgIHBheSB5b3VyIGJpbGwgKGluIGEgc2hvcCkKUCAgICAgICBwdXRvbiAgIHB1dCBvbiBhbiBhY2Nlc3NvcnkgKHJpbmcsIGFtdWxldCwgZXRjKQpxICAgICAgIHF1YWZmICAgZHJpbmsgc29tZXRoaW5nIChwb3Rpb24sIHdhdGVyLCBldGMpClEgICAgICAgcXVpdmVyICBzZWxlY3QgYW1tdW5pdGlvbiBmb3IgcXVpdmVyICh1c2UgJyNxdWl0JyB0byBxdWl0KQpyICAgICAgIHJlYWQgICAgcmVhZCBhIHNjcm9sbCBvciBzcGVsbGJvb2sKUiAgICAgICByZW1vdmUgIHJlbW92ZSBhbiBhY2Nlc3NvcnkgKHJpbmcsIGFtdWxldCwgZXRjKQpzICAgICAgIHNlYXJjaCAgc2VhcmNoIGZvciBzZWNyZXQgZG9vcnMsIGhpZGRlbiB0cmFwcyBhbmQgbW9uc3RlcnMKdCAgICAgICB0aHJvdyAgIHRocm93IG9yIHNob290IGEgd2VhcG9uClQgICAgICAgdGFrZW9mZiB0YWtlIG9mZiBzb21lIGFybW9yCncgICAgICAgd2llbGQgICB3aWVsZCBhIHdlYXBvbiAgKHctICB3aWVsZCBub3RoaW5nKQpXICAgICAgIHdlYXIgICAgcHV0IG9uIHNvbWUgYXJtb3IKeCAgICAgICB4Y2hhbmdlIHN3YXAgd2llbGRlZCBhbmQgc2Vjb25kYXJ5IHdlYXBvbnMKWCAgICAgICB0d293ZWFwb24gdG9nZ2xlIHR3by13ZWFwb24gY29tYmF0ICh1c2UgJyNleHBsb3JlJyBmb3IgZXhwbG9yZSBtb2RlKQp6ICAgICAgIHphcCAgICAgemFwIGEgd2FuZCAgKHVzZSB5IGluc3RlYWQgb2YgeiBpZiBudW1iZXJfcGFkIGlzIC0xKQpaICAgICAgIFphcCAgICAgY2FzdCBhIHNwZWxsICAodXNlIFkgaW5zdGVhZCBvZiBaIGlmIG51bWJlcl9wYWQgaXMgLTEpCjwgICAgICAgdXAgICAgICBnbyB1cCB0aGUgc3RhaXJzCj4gICAgICAgZG93biAgICBnbyBkb3duIHRoZSBzdGFpcnMKXiAgICAgICB0cmFwX2lkIGlkZW50aWZ5IGEgcHJldmlvdXNseSBmb3VuZCB0cmFwCiksWyw9LCIsKCAgICAgICBhc2sgZm9yIGN1cnJlbnQgaXRlbXMgb2Ygc3BlY2lmaWVkIHN5bWJvbCBpbiB1c2UKKiAgICAgICAgICAgICAgIGFzayBmb3IgY29tYmluYXRpb24gb2YgKSxbLD0sIiwoIGFsbCBhdCBvbmNlCiQgICAgICAgZ29sZCAgICBjb3VudCB5b3VyIGdvbGQKKyAgICAgICBzcGVsbHMgIGxpc3QgdGhlIHNwZWxscyB5b3Uga25vdzsgYWxzbyByZWFycmFuZ2UgdGhlbSBpZiBkZXNpcmVkCmAgICAgICAgY2xhc3NrbiBkaXNwbGF5IGtub3duIGl0ZW1zIGZvciBvbmUgY2xhc3Mgb2Ygb2JqZWN0cwpfICAgICAgIHRyYXZlbCAgbW92ZSB2aWEgYSBzaG9ydGVzdC1wYXRoIGFsZ29yaXRobSB0byBhIHBvaW50IG9uIHRoZSBtYXAKLiAgICAgICByZXN0ICAgIHdhaXQgYSBtb21lbnQKLCAgICAgICBwaWNrdXAgIHBpY2sgdXAgYWxsIHlvdSBjYW4gY2FycnkKQCAgICAgICAgICAgICAgIHRvZ2dsZSAicGlja3VwIiAoYXV0byBwaWNrdXApIG9wdGlvbiBvbiBhbmQgb2ZmCjogICAgICAgbG9vayAgICBsb29rIGF0IHdoYXQgaXMgaGVyZQo7ICAgICAgIGZhcmxvb2sgbG9vayBhdCB3aGF0IGlzIHNvbWV3aGVyZSBlbHNlIGJ5IHNlbGVjdGluZyBhIG1hcCBzeW1ib2wKCktleWJvYXJkcyB0aGF0IGhhdmUgYSBtZXRhIGtleSBjYW4gYWxzbyB1c2UgdGhlc2UgZXh0ZW5kZWQgY29tbWFuZHMKdmlhIHRoZSBtZXRhIG1vZGlmaWVyIGluc3RlYWQgb2YgdGhlICMgcHJlZml4OgoKTS0/ICAgICAgICAgICAgIGRpc3BsYXkgZXh0ZW5kZWQgY29tbWFuZCBoZWxwIChpZiB0aGUgcGxhdGZvcm0gYWxsb3dzIHRoaXMpCk0tMiAgICAgdHdvd2VhcG9uIHRvZ2dsZSB0d28td2VhcG9uIGNvbWJhdCAodW5sZXNzIG51bWJlcl9wYWQgaXMgZW5hYmxlZCkKTS1hICAgICBhZGp1c3QgIGFkanVzdCBpbnZlbnRvcnkgbGV0dGVycwpNLUEgICAgIGFubm90YXRlIGFkZCBhIG9uZS1saW5lIG5vdGUgdG8gdGhlIGN1cnJlbnQgZHVuZ2VvbiBsZXZlbCAoc2VlIE0tTykKTS1jICAgICBjaGF0ICAgIHRhbGsgdG8gc29tZW9uZQpNLUMgICAgIGNvbmR1Y3QgdmlldyBvcHRpb25hbCBjaGFsbGVuZ2VzCk0tZCAgICAgZGlwICAgICBkaXAgYW4gb2JqZWN0IGludG8gc29tZXRoaW5nCk0tZSAgICAgZW5oYW5jZSBhZHZhbmNlIG9yIGNoZWNrIHdlYXBvbiBhbmQgc3BlbGwgc2tpbGxzCk0tZiAgICAgZm9yY2UgICBmb3JjZSBhIGxvY2sKTS1pICAgICBpbnZva2UgIGludm9rZSBhbiBvYmplY3QncyBzcGVjaWFsIHBvd2VycwpNLWogICAgIGp1bXAgICAganVtcCB0byBhbm90aGVyIGxvY2F0aW9uCk0tbCAgICAgbG9vdCAgICBsb290IGEgYm94IG9uIHRoZSBmbG9vcgpNLW0gICAgIG1vbnN0ZXIgdXNlIGEgbW9uc3RlcidzIHNwZWNpYWwgYWJpbGl0eQpNLW4gICAgIG5hbWUgICAgbmFtZSBhIG1vbnN0ZXIsIGFuIGluZGl2aWR1YWwgb2JqZWN0LCBvciBhIHR5cGUgb2Ygb2JqZWN0Ck0tTiAgICAgbmFtZSAgICBzeW5vbnltIGZvciBNLW4KTS1vICAgICBvZmZlciAgIG9mZmVyIGEgc2FjcmlmaWNlIHRvIHRoZSBnb2RzCk0tTyAgICAgb3ZlcnZpZXcgZGlzcGxheSBpbmZvcm1hdGlvbiBhYm91dCB2aXNpdGVkIGxldmVscyBhbmQgYW5ub3RhdGlvbnMKTS1wICAgICBwcmF5ICAgIHByYXkgdG8gdGhlIGdvZHMgZm9yIGhlbHAKTS1xICAgICBxdWl0ICAgIHN0b3AgcGxheWluZwpNLXIgICAgIHJ1YiAgICAgcnViIGEgbGFtcCBvciBhIHN0b25lCk0tUiAgICAgcmlkZSAgICBtb3VudCBvciBkaXNtb3VudCBzYWRkbGVkIHN0ZWVkCk0tcyAgICAgc2l0ICAgICBzaXQgZG93bgpNLXQgICAgIHR1cm4gICAgdHVybiB1bmRlYWQKTS1UICAgICB0aXAgICAgIHVwZW5kIGEgY29udGFpbmVyIHRvIGR1bXAgb3V0IGl0cyBjb250ZW50cwpNLXUgICAgIHVudHJhcCAgdW50cmFwIHNvbWV0aGluZwpNLXYgICAgIHZlcnNpb24gcHJpbnQgY29tcGlsZSB0aW1lIG9wdGlvbnMgZm9yIHRoaXMgdmVyc2lvbgpNLXcgICAgIHdpcGUgICAgd2lwZSBvZmYgeW91ciBmYWNlCgpJZiB0aGUgIm51bWJlcl9wYWQiIG9wdGlvbiBpcyBvbiwgdGhlc2UgYWRkaXRpb25hbCB2YXJpYW50cyBhcmUgYXZhaWxhYmxlOgoKbiAgICAgICAgICAgICAgIGZvbGxvd2VkIGJ5IG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIG5leHQgY29tbWFuZApoICAgICAgIGhlbHAgICAgZGlzcGxheSBvbmUgb2Ygc2V2ZXJhbCBpbmZvcm1hdGl2ZSB0ZXh0cywgbGlrZSAnPycKaiAgICAgICBqdW1wICAgIGp1bXAgdG8gYW5vdGhlciBsb2NhdGlvbgprICAgICAgIGtpY2sgICAga2ljayBzb21ldGhpbmcgKHVzdWFsbHkgYSBkb29yKQpsICAgICAgIGxvb3QgICAgbG9vdCBhIGJveCBvbiB0aGUgZmxvb3IKTiAgICAgICBuYW1lICAgIG5hbWUgYW4gaXRlbSBvciB0eXBlIG9mIG9iamVjdAp1ICAgICAgIHVudHJhcCAgdW50cmFwIHNvbWV0aGluZyAodXN1YWxseSBhIHRyYXBwZWQgb2JqZWN0KQomIyBjbWRoZWxwCiYJVGVsbCB3aGF0IGNvbW1hbmQgYSBrZXlzdHJva2UgaW52b2tlcwpeCVNob3cgdGhlIHR5cGUgb2YgYW4gYWRqYWNlbnQgdHJhcApeWwlDYW5jZWwgY29tbWFuZCAoc2FtZSBhcyBFU0NhcGUga2V5KQomPyBkZWJ1ZwpeRQlTZWFyY2ggZm9yIG5lYXJieSB0cmFwcywgc2VjcmV0IGRvb3JzLCBhbmQgdW5zZWVuIG1vbnN0ZXJzCl5GCU1hcCBsZXZlbDsgcmV2ZWFscyB0cmFwcyBhbmQgc2VjcmV0IGNvcnJpZG9ycyBidXQgbm90IHNlY3JldCBkb29ycwpeRwlDcmVhdGUgYSBtb25zdGVyIGJ5IG5hbWUgb3IgY2xhc3MKXkkJVmlldyBpbnZlbnRvcnkgd2l0aCBhbGwgaXRlbXMgaWRlbnRpZmllZApeTwlMaXN0IHNwZWNpYWwgbGV2ZWwgbG9jYXRpb25zCl5WCVRlbGVwb3J0IGJldHdlZW4gbGV2ZWxzCl5XCVdpc2ggZm9yIHNvbWV0aGluZwomOiAjIWRlYnVnCl5FCXVuYXZhaWxhYmxlIGRlYnVnZ2luZyBjb21tYW5kCl5GCXVuYXZhaWxhYmxlIGRlYnVnZ2luZyBjb21tYW5kCl5HCXVuYXZhaWxhYmxlIGRlYnVnZ2luZyBjb21tYW5kCl5JCXVuYXZhaWxhYmxlIGRlYnVnZ2luZyBjb21tYW5kCl5PCVNob3J0Y3V0IGZvciAnI292ZXJ2aWV3JzogbGlzdCBpbnRlcmVzdGluZyBsZXZlbHMgeW91IGhhdmUgdmlzaXRlZApeVgl1bmF2YWlsYWJsZSBkZWJ1Z2dpbmcgY29tbWFuZApeVwl1bmF2YWlsYWJsZSBkZWJ1Z2dpbmcgY29tbWFuZAomLiAjP2RlYnVnCiY/IG51bWJlcl9wYWQ9MCwtMQpiCUdvIHNvdXRod2VzdCAxIHNwYWNlCkIJR28gc291dGh3ZXN0IHVudGlsIHlvdSBhcmUgb24gdG9wIG9mIHNvbWV0aGluZwpoCUdvIHdlc3QgMSBzcGFjZQpICUdvIHdlc3QgdW50aWwgeW91IGFyZSBvbiB0b3Agb2Ygc29tZXRoaW5nCmoJR28gc291dGggMSBzcGFjZQpKCUdvIHNvdXRoIHVudGlsIHlvdSBhcmUgb24gdG9wIG9mIHNvbWV0aGluZwprCUdvIG5vcnRoIDEgc3BhY2UKSwlHbyBub3J0aCB1bnRpbCB5b3UgYXJlIG9uIHRvcCBvZiBzb21ldGhpbmcKbAlHbyBlYXN0IDEgc3BhY2UKTAlHbyBlYXN0IHVudGlsIHlvdSBhcmUgb24gdG9wIG9mIHNvbWV0aGluZwpuCUdvIHNvdXRoZWFzdCAxIHNwYWNlCk4JR28gc291dGhlYXN0IHVudGlsIHlvdSBhcmUgb24gc29tZXRoaW5nCnUJR28gbm9ydGhlYXN0IDEgc3BhY2UKVQlHbyBub3J0aGVhc3QgdW50aWwgeW91IGFyZSBvbiB0b3Agb2Ygc29tZXRoaW5nCiYjIHksWSBoYW5kbGVkIGJlbG93CiY6ICNudW1iZXJfcGFkPTEsMiwzLDQKaAlIZWxwOiBzeW5vbnltIGZvciAnPycKaglKdW1wOiBzaG9ydGN1dCBmb3IgJyNqdW1wJwprCUtpY2s6IHN5bm9ueW0gZm9yICdeRCcKbAlMb290OiBzaG9ydGN1dCBmb3IgJyNsb290JwpuCVN0YXJ0IGEgY291bnQ7IGNvbnRpbnVlIHdpdGggZGlnaXQocykKTglOYW1lOiBzaG9ydGN1dCBmb3IgJyNuYW1lJwp1CVVudHJhcDogc2hvcnRjdXQgZm9yICcjdW50cmFwJwomLiAjMCwtMSB2cyAxLDIsMyw0CmEJQXBwbHkgKHVzZSkgYSB0b29sIG9yIGJyZWFrIGEgd2FuZApBCVJlbW92ZSBhbGwgYXJtb3IgYW5kL29yIGFsbCBhY2Nlc3NvcmllcyBhbmQvb3IgdW53aWVsZCB3ZWFwb25zCl5BCVJlZG8gdGhlIHByZXZpb3VzIGNvbW1hbmQKXkIJR28gc291dGh3ZXN0IHVudGlsIHlvdSBhcmUgbmVhciBzb21ldGhpbmcKYwlDbG9zZSBhIGRvb3IKQwlDYWxsIChuYW1lKSBhIG1vbnN0ZXIsIGFuIGluZGl2aWR1YWwgb2JqZWN0LCBvciBhIHR5cGUgb2Ygb2JqZWN0Cl5DCUludGVycnVwdDogcXVpdCB0aGUgZ2FtZQpkCURyb3AgYW4gaXRlbQpECURyb3Agc3BlY2lmaWMgaXRlbSB0eXBlcwpeRAlLaWNrIHNvbWV0aGluZyAodXN1YWxseSBhIGRvb3IsIGNoZXN0LCBvciBib3gpCmUJRWF0IHNvbWV0aGluZwpFCUVuZ3JhdmUgd3JpdGluZyBvbiB0aGUgZmxvb3IKZglGaXJlIGFtbXVuaXRpb24gZnJvbSBxdWl2ZXIKRglGb2xsb3dlZCBieSBkaXJlY3Rpb24sIGZpZ2h0IGEgbW9uc3RlciAoZXZlbiBpZiB5b3UgZG9uJ3Qgc2Vuc2UgaXQpCmcJRm9sbG93ZWQgYnkgZGlyZWN0aW9uLCBtb3ZlIHVudGlsIHlvdSBhcmUgbmVhciBzb21ldGhpbmcKRwlGb2xsb3dlZCBieSBkaXJlY3Rpb24sIHNhbWUgYXMgY29udHJvbC1kaXJlY3Rpb24KXkgJR28gd2VzdCB1bnRpbCB5b3UgYXJlIG5lYXIgc29tZXRoaW5nCmkJU2hvdyB5b3VyIGludmVudG9yeQpJCUludmVudG9yeSBzcGVjaWZpYyBpdGVtIHR5cGVzCl5KCUdvIHNvdXRoIHVudGlsIHlvdSBhcmUgbmVhciBzb21ldGhpbmcKXksJR28gbm9ydGggdW50aWwgeW91IGFyZSBuZWFyIHNvbWV0aGluZwpeTAlHbyBlYXN0IHVudGlsIHlvdSBhcmUgbmVhciBzb21ldGhpbmcKbQlGb2xsb3dlZCBieSBkaXJlY3Rpb24sIG1vdmUgd2l0aG91dCBwaWNraW5nIGFueXRoaW5nIHVwIG9yIGZpZ2h0aW5nCk0JRm9sbG93ZWQgYnkgZGlyZWN0aW9uLCBtb3ZlIGEgZGlzdGFuY2Ugd2l0aG91dCBwaWNraW5nIGFueXRoaW5nIHVwCl5OCUdvIHNvdXRoZWFzdCB1bnRpbCB5b3UgYXJlIG5lYXIgc29tZXRoaW5nCm8JT3BlbiBhIGRvb3IKTwlTaG93IG9wdGlvbiBzZXR0aW5ncywgcG9zc2libHkgY2hhbmdlIHRoZW0KcAlQYXkgeW91ciBzaG9wcGluZyBiaWxsClAJUHV0IG9uIGFuIGFjY2Vzc29yeSAocmluZywgYW11bGV0LCBldGM7IHdpbGwgd29yayBmb3IgYXJtb3IgdG9vKQpeUAlUb2dnbGUgdGhyb3VnaCBwcmV2aW91c2x5IGRpc3BsYXllZCBnYW1lIG1lc3NhZ2VzCnEJUXVhZmYgKGRyaW5rKSBzb21ldGhpbmcgKHBvdGlvbiwgd2F0ZXIsIGV0YykKUQlTZWxlY3QgYW1tdW5pdGlvbiBmb3IgcXVpdmVyICh1c2UgJyNxdWl0JyB0byBxdWl0KQpyCVJlYWQgYSBzY3JvbGwgb3Igc3BlbGxib29rClIJUmVtb3ZlIGFuIGFjY2Vzc29yeSAocmluZywgYW11bGV0LCBldGM7IHdpbGwgd29yayBmb3IgYXJtb3IgdG9vKQpeUglSZWRyYXcgc2NyZWVuCnMJU2VhcmNoIGFsbCBpbW1lZGlhdGVseSBhZGphY2VudCBsb2NhdGlvbnMgZm9yIHRyYXBzIGFuZCBzZWNyZXQgZG9vcnMKUwlTYXZlIHRoZSBnYW1lIChhbmQgZXhpdDsgdGhlcmUgaXMgbm8gInNhdmUgYW5kIGtlZXAgZ29pbmciKQp0CVRocm93IHNvbWV0aGluZyAoY2hvb3NlIGFuIGl0ZW0sIHRoZW4gYSBkaXJlY3Rpb24tLW5vdCBhIHRhcmdldCkKVAlUYWtlIG9mZiBvbmUgcGllY2Ugb2YgYXJtb3IgKHdpbGwgd29yayBmb3IgYWNjZXNzb3JpZXMgdG9vKQpeVAlUZWxlcG9ydCBhcm91bmQgbGV2ZWwKXlUJR28gbm9ydGhlYXN0IHVudGlsIHlvdSBhcmUgbmVhciBzb21ldGhpbmcKdglTaG93IHZlcnNpb24gKCcjdmVyc2lvbicgc2hvd3MgbW9yZSBpbmZvcm1hdGlvbikKVglTaG93IGhpc3Rvcnkgb2YgZ2FtZSdzIGRldmVsb3BtZW50CncJV2llbGQgYSB3ZWFwb24gKGZvciBkdWFsIHdlYXBvbnM6ICd3JyBzZWNvbmRhcnksICd4JywgJ3cnIHByaW1hcnksICdYJykKVwlXZWFyIGEgcGllY2Ugb2YgYXJtb3IgKHdpbGwgd29yayBmb3IgYWNjZXNzb3JpZXMgdG9vKQp4CVN3YXAgd2llbGRlZCBhbmQgc2Vjb25kYXJ5IHdlYXBvbnMKWAlUb2dnbGUgdHdvLXdlYXBvbiBjb21iYXQKXlgJU2hvdyB5b3VyIGF0dHJpYnV0ZXMgKHNob3dzIG1vcmUgaW4gZGVidWcgb3IgZXhwbG9yZSBtb2RlKQomPyBudW1iZXJfcGFkPTAsMSwyLDMsNAomPyBudW1iZXJfcGFkPTAKeQlHbyBub3J0aHdlc3QgMSBzcGFjZQpZCUdvIG5vcnRod2VzdCB1bnRpbCB5b3UgYXJlIG9uIHRvcCBvZiBzb21ldGhpbmcKJi4KXlkJR28gbm9ydGh3ZXN0IHVudGlsIHlvdSBhcmUgbmVhciBzb21ldGhpbmcKeglaYXAgYSB3YW5kCloJWmFwIChjYXN0KSBhIHNwZWxsCiY/IHN1c3BlbmQKXloJU3VzcGVuZCBnYW1lOyAnZmcnIChmb3JlZ3JvdW5kKSB0byByZXN1bWUKJjoKXloJdW5hdmFpbGFibGUgY29tbWFuZDogc3VzcGVuZAomLgomOiBudW1iZXJfcGFkPS0xCnkJWmFwIGEgd2FuZApZCVphcCAoY2FzdCkgYSBzcGVsbAomPyBzdXNwZW5kCl5ZCVN1c3BlbmQgZ2FtZTsgJ2ZnJyAoZm9yZWdyb3VuZCkgdG8gcmVzdW1lCiY6Cl5ZCXVuYXZhaWxhYmxlIGNvbW1hbmQ6IHN1c3BlbmQKJi4KeglHbyBub3J0aHdlc3QgMSBzcGFjZQpaCUdvIG5vcnRod2VzdCB1bnRpbCB5b3UgYXJlIG9uIHRvcCBvZiBzb21ldGhpbmcKXloJR28gbm9ydGh3ZXN0IHVudGlsIHlvdSBhcmUgbmVhciBzb21ldGhpbmcKJi4gIzAsMS4uNCB2cyAtMQo8CUdvIHVwIGEgc3RhaXJjYXNlCj4JR28gZG93biBhIHN0YWlyY2FzZQovCVNob3cgd2hhdCB0eXBlIG9mIHRoaW5nIGEgc3ltYm9sIGNvcnJlc3BvbmRzIHRvCj8JR2l2ZSBhIGhlbHAgbWVzc2FnZQomPyBzaGVsbAohCURvIGEgc2hlbGwgZXNjYXBlOyAnZXhpdCcgc2hlbGwgdG8gY29tZSBiYWNrCiY6CiEJdW5hdmFpbGFibGUgY29tbWFuZDogc2hlbGwKJi4KXAlTaG93IHdoYXQgb2JqZWN0IHR5cGVzIGhhdmUgYmVlbiBkaXNjb3ZlcmVkCmAJU2hvdyBkaXNjb3ZlcmVkIHR5cGVzIGZvciBvbmUgY2xhc3Mgb2Ygb2JqZWN0cwpfCVRyYXZlbCB2aWEgYSBzaG9ydGVzdC1wYXRoIGFsZ29yaXRobSB0byBhIHBvaW50IG9uIHRoZSBtYXAKLglSZXN0IG9uZSBtb3ZlIHdoaWxlIGRvaW5nIG5vdGhpbmcKJj8gcmVzdF9vbl9zcGFjZQogCVJlc3Qgb25lIG1vdmUgd2hpbGUgZG9pbmcgbm90aGluZwomLgo6CUxvb2sgYXQgd2hhdCBpcyBvbiB0aGUgZmxvb3IKOwlTaG93IHdoYXQgdHlwZSBvZiB0aGluZyBhIG1hcCBzeW1ib2wgb24gdGhlIGxldmVsIGNvcnJlc3BvbmRzIHRvCiwJUGljayB1cCB0aGluZ3MgYXQgdGhlIGN1cnJlbnQgbG9jYXRpb24KQAlUb2dnbGUgdGhlIHBpY2t1cCBvcHRpb24gb24vb2ZmCikJU2hvdyB0aGUgd2VhcG9uKHMpIGN1cnJlbnRseSB3aWVsZGVkIG9yIHJlYWRpZWQKWwlTaG93IHRoZSBhcm1vciBjdXJyZW50bHkgd29ybgo9CVNob3cgdGhlIHJpbmcocykgY3VycmVudGx5IHdvcm4KIglTaG93IHRoZSBhbXVsZXQgY3VycmVudGx5IHdvcm4KKAlTaG93IHRoZSB0b29scyBjdXJyZW50bHkgaW4gdXNlCioJU2hvdyBhbGwgZXF1aXBtZW50IGluIHVzZSAoY29tYmluYXRpb24gb2YgdGhlICksWyw9LCIsKCBjb21tYW5kcykKJAlDb3VudCB5b3VyIGdvbGQKKwlMaXN0IGtub3duIHNwZWxscwojCVBlcmZvcm0gYW4gZXh0ZW5kZWQgY29tbWFuZCAodXNlICcjPycgdG8gbGlzdCBjaG9pY2VzKQomIyBudW1iZXJfcGFkOgomIyAgLTEgPSBudW1wYWQgb2ZmLCBzd2FwIHkgd2l0aCB6IChpbmNsdWRpbmcgWSB3aXRoIFosIF5ZIHdpdGggXlosIE0teSAmYykKJiMgICAwID0gbnVtcGFkIG9mZiAoZGVmYXVsdCkKJiMgICAxID0gbnVtcGFkIG9uLCBub3JtYWwga2V5cGFkIGxheW91dCwgJzUnLT4nZycKJiMgICAyID0gbnVtcGFkIG9uLCBub3JtYWwga2V5cGFkIGxheW91dCwgJzUnLT4nRycKJiMgICAzID0gbnVtcGFkIG9uLCBwaG9uZSBrZXlwYWQgbGF5b3V0LCAnNSctPidnJwomIyAgIDQgPSBudW1wYWQgb24sIHBob25lIGtleXBhZCBsYXlvdXQsICc1Jy0+J0cnCiY/IG51bWJlcl9wYWQgPSAxLDIsMyw0CjAJU2hvdyBpbnZlbnRvcnkKNAlNb3ZlIHdlc3QKNglNb3ZlIGVhc3QKLQknRicgcHJlZml4OyBmb3JjZSBmaWdodAomOiAjLTEsMAowCUNvbnRpbnVlIGEgY291bnQKNAlTdGFydCBvciBjb250aW51ZSBhIGNvdW50CjYJU3RhcnQgb3IgY29udGludWUgYSBjb3VudAomLiAjMSwyLDMsNCB2cyAtMSwwCiY/IG51bWJlcl9wYWQ9MSwyCjcJTW92ZSBub3J0aHdlc3QKOAlNb3ZlIG5vcnRoCjkJTW92ZSBub3J0aGVhc3QKMQlNb3ZlIHNvdXRod2VzdAoyCU1vdmUgc291dGgKMwlNb3ZlIHNvdXRoZWFzdAomOiBudW1iZXJfcGFkPTMsNAoxCU1vdmUgbm9ydGh3ZXN0CjIJTW92ZSBub3J0aAozCU1vdmUgbm9ydGhlYXN0CjcJTW92ZSBzb3V0aHdlc3QKOAlNb3ZlIHNvdXRoCjkJTW92ZSBzb3V0aGVhc3QKJjogIy0xLDAKMQlTdGFydCBvciBjb250aW51ZSBhIGNvdW50CjIJU3RhcnQgb3IgY29udGludWUgYSBjb3VudAozCVN0YXJ0IG9yIGNvbnRpbnVlIGEgY291bnQKNwlTdGFydCBvciBjb250aW51ZSBhIGNvdW50CjgJU3RhcnQgb3IgY29udGludWUgYSBjb3VudAo5CVN0YXJ0IG9yIGNvbnRpbnVlIGEgY291bnQKJi4gIzEsMiB2cyAzLDQgdnMgLTEsMAomPyBudW1iZXJfcGFkPTEsMwo1CSdnJyBtb3ZlbWVudCBwcmVmaXgKTS01CSdHJyBtb3ZlbWVudCBwcmVmaXgKJjogbnVtYmVyX3BhZD0yLDQKNQknRycgbW92ZW1lbnQgcHJlZml4Ck0tNQknZycgbW92ZW1lbnQgcHJlZml4Ck0tMAlJbnZlbnRvcnkgc3BlY2lmaWMgaXRlbSB0eXBlcwomOiAjLTEsMAo1CVN0YXJ0IG9yIGNvbnRpbnVlIGEgY291bnQKTS0yCVRvZ2dsZSB0d28td2VhcG9uIGNvbWJhdAomLiAjMSwzIHZzIDIsNCB2cyAtMSwwCk0tPwlEaXNwbGF5IGV4dGVuZGVkIGNvbW1hbmQgaGVscCAoaWYgdGhlIHBsYXRmb3JtIGFsbG93cyB0aGlzKQpNLWEJQWRqdXN0IGludmVudG9yeSBsZXR0ZXJzCk0tQQlBbm5vdGF0ZTogc3VwcGx5IGEgbmFtZSBmb3IgdGhlIGN1cnJlbnQgZHVuZ2VvbiBsZXZlbApNLWMJQ2hhdDogdGFsayB0byBhbiBhZGphY2VudCBjcmVhdHVyZQpNLUMJQ29uZHVjdDogbGlzdCB2b2x1bnRhcnkgY2hhbGxlbmdlcyB5b3UgaGF2ZSBtYWludGFpbmVkCk0tZAlEaXAgYW4gb2JqZWN0IGludG8gc29tZXRoaW5nCk0tZQlFbmhhbmNlOiBjaGVjayB3ZWFwb25zIHNraWxscywgYWR2YW5jZSB0aGVtIGlmIGVsaWdpYmxlCk0tZglGb3JjZSBhIGxvY2sKTS1pCUludm9rZSBhbiBvYmplY3QncyBzcGVjaWFsIHBvd2VycwpNLWoJSnVtcCB0byBhIG5lYXJieSBsb2NhdGlvbgpNLWwJTG9vdCBhIGJveCBvbiB0aGUgZmxvb3IKTS1tCVdoZW4gcG9seW1vcnBoZWQsIHVzZSBhIG1vbnN0ZXIncyBzcGVjaWFsIGFiaWxpdHkKTS1uCU5hbWUgYSBtb25zdGVyLCBhbiBpbmRpdmlkdWFsIG9iamVjdCwgb3IgYSB0eXBlIG9mIG9iamVjdApNLU4JTmFtZSBhIG1vbnN0ZXIsIGFuIGluZGl2aWR1YWwgb2JqZWN0LCBvciBhIHR5cGUgb2Ygb2JqZWN0Ck0tbwlPZmZlciBhIHNhY3JpZmljZSB0byB0aGUgZ29kcwpNLU8JT3ZlcnZpZXc6IHNob3cgYSBzdW1tYXJ5IG9mIHRoZSBleHBsb3JlZCBkdW5nZW9uCk0tcAlQcmF5IHRvIHRoZSBnb2RzIGZvciBoZWxwCk0tcQlRdWl0IChleGl0IHdpdGhvdXQgc2F2aW5nKQpNLXIJUnViIGEgbGFtcCBvciBhIHRvdWNoc3RvbmUKTS1SCVJpZGU6IG1vdW50IG9yIGRpc21vdW50IGEgc2FkZGxlZCBzdGVlZApNLXMJU2l0IGRvd24KTS10CVR1cm4gdW5kZWFkCk0tVAlUaXA6IGVtcHR5IGEgY29udGFpbmVyCk0tdQlVbnRyYXAgc29tZXRoaW5nICh0cmFwLCBkb29yLCBvciBjaGVzdCkKTS12CVByaW50IGNvbXBpbGUgdGltZSBvcHRpb25zIGZvciB0aGlzIHZlcnNpb24gb2YgTmV0SGFjawpNLXcJV2lwZSBvZmYgeW91ciBmYWNlCglEZXBlbmRpbmcgdXBvbiBoYXJkd2FyZSBvciBvcGVyYXRpbmcgc3lzdGVtIG9yIE5ldEhhY2sncyBpbnRlcmZhY2UsCglzb21lIGtleXN0cm9rZXMgbWF5IGJlIG9mZi1saW1pdHMuCgoJRm9yIGV4YW1wbGUsIF5TIGFuZCBeUSBhcmUgb2Z0ZW4gdXNlZCBmb3IgWE9OL1hPRkYgZmxvdy1jb250cm9sLAoJbWVhbmluZyB0aGF0IF5TIHN1c3BlbmRzIG91dHB1dCBhbmQgc3Vic2VxdWVudCBeUSByZXN1bWVzIHN1c3BlbmRlZAoJb3V0cHV0LiAgV2hlbiB0aGF0IGlzIHRoZSBjYXNlLCBuZWl0aGVyIG9mIHRob3NlIGNoYXJhY3RlcnMgd2lsbAoJcmVhY2ggTmV0SGFjayB3aGVuIGl0IGlzIHdhaXRpbmcgZm9yIGEgY29tbWFuZCBrZXlzdHJva2UuICBTbyB0aGV5CglhcmVuJ3QgdXNlZCBhcyBjb21tYW5kcywgYnV0ICd3aGF0ZG9lcycgbWlnaHQgbm90IGJlIGFibGUgdG8gdGVsbAoJeW91IHRoYXQgaWYgdGhleSBkb24ndCBnZXQgcGFzc2VkIHRocm91Z2ggdG8gTmV0SGFjay4KCgleTSBvciA8cmV0dXJuPiBvciA8ZW50ZXI+IGlzIGxpa2VseSB0byBiZSB0cmFuc2Zvcm1lZCBpbnRvIF5KIG9yCgk8bGluZWZlZWQ+IG9yICduZXdsaW5lJyBiZWZvcmUgYmVpbmcgcGFzc2VkIHRvIE5ldEhhY2sgZm9yIGhhbmRsaW5nLgoJU28gaXQgaXNuJ3QgdXNlZCBhcyBhIGNvbW1hbmQsIGFuZCAnd2hhdGRvZXMnIG1pZ2h0IHNlZW0gYXMgaWYgaXQKCWlzIHJlcG9ydGluZyB0aGUgd3JvbmcgY2hhcmFjdGVyIGJ1dCB3aWxsIGJlIG9wZXJhdGluZyBjb3JyZWN0bHkgaWYKCWl0IGRlc2NyaWJlcyBeSiB3aGVuIHlvdSB0eXBlIF5NLgoKCUEgTlVMIGNoYXJhY3Rlciwgd2hpY2ggaXMgdHlwZWQgYXMgXjxzcGFjZT4gb24gc29tZSBrZXlib2FyZHMsCgleQCBvbiBvdGhlcnMsIGFuZCBtYXliZSBub3QgdHlwZWFibGUgYXQgYWxsIG9uIHlldCBvdGhlcnMsIGlzIG5vdAoJdXNlZCBhcyBhIGNvbW1hbmQsIGFuZCB3aWxsIGJlIGNvbnZlcnRlZCBpbnRvIEVTQyBiZWZvcmUgcmVhY2hpbmcKCSd3aGF0ZG9lcycuICBVbmxpa2UgXk0sIHRoaXMgdHJhbnNmb3JtYXRpb24gaXMgcGVyZm9ybWVkIHdpdGhpbgoJTmV0SGFjay4gIEJ1dCBsaWtlIF5NLCBpZiB5b3UgdHlwZSBOVUwgYW5kIGdldCBmZWVkYmFjayBhYm91dCBFU0MsCgl0aGUgc2l0dWF0aW9uIGlzIGV4cGVjdGVkLgoKCUVTQyBpdHNlbGYgaXMgYSBzeW5vbnltIGZvciBeWywgYW5kIGlzIGFub3RoZXIgc291cmNlIG9mIG9kZGl0eS4KCVZhcmlvdXMgZnVuY3Rpb24ga2V5cywgaW5jbHVkaW5nIGN1cnNvciBhcnJvdyBrZXlzLCBtYXkgdHJhbnNtaXQKCWFuICJlc2NhcGUgc2VxdWVuY2UiIG9mIEVTQyArIFsgKyBvdGhlciBzdHVmZiwgY29uZnVzaW5nIE5ldEhhY2sKCWFzIHRvIHdoYXQgY29tbWFuZCB3YXMgaW50ZW5kZWQgc2luY2UgdGhlIEVTQyB3aWxsIGJlIHByb2Nlc3NlZAoJYW5kIHRoZW4gd2hhdGV2ZXIgZm9sbG93cyB3aWxsIHNlZW0gdG8gTmV0SGFjayBsaWtlLS1hbmQgYmUgdXNlZAoJYXMtLXNvbWV0aGluZyB0eXBlZCBieSB0aGUgdXNlci4gIChJZiB5b3UgcHJlc3MgYSBmdW5jdGlvbiBrZXkgYW5kCglhIG1lbnUgb2YgdGhlIGFybW9yIHlvdXIgaGVybyBpcyB3ZWFyaW5nIGFwcGVhcnMsIHdoYXQgaGFwcGVuZWQKCXdhcyB0aGF0IGFuIGVzY2FwZSBzZXF1ZW5jZSB3YXMgc2VudCB0byBOZXRIYWNrLCBpdHMgRVNDIGFib3J0ZWQKCWFueSBwZW5kaW5nIGtleSBvcGVyYXRpb24sIGl0cyAnWycgd2FzIHRoZW4gdHJlYXRlZCBhcyBhIGNvbW1hbmQKCXRvIHNob3cgd29ybiBhcm1vciwgYW5kIHRoZSAib3RoZXIgc3R1ZmYiIHByb2JhYmx5IGdvdCBzaWxlbnRseQoJZGlzY2FyZGVkIGFzIGludmFsaWQgY2hvaWNlcyB3aGlsZSB5b3UgZGlzbWlzc2VkIHRoZSBtZW51LikKCglJZiB5b3UgaGF2ZSBOZXRIYWNrJ3MgJ2FsdG1ldGEnIG9wdGlvbiBlbmFibGVkLCBtZWFuaW5nIHRoYXQgdGhlCgk8YWx0PiBvciA8b3B0aW9uPiBrZXksIHdoZW4gdXNlZCBhcyBzaGlmdCB3aGlsZSB0eXBpbmcgc29tZSBvdGhlcgoJY2hhcmFjdGVyLCB0cmFuc21pdHMgRVNDIGFuZCB0aGVuIHRoZSBvdGhlciBjaGFyYWN0ZXIgc28gTmV0SGFjawoJc2hvdWxkIHRyZWF0IHRoYXQgb3RoZXIgY2hhcmFjdGVyIGFzIGEgbWV0YS1jaGFyYWN0ZXIsIHRoZW4gRVNDCgl0YWtlcyBvbiBhZGRlZCBwb3RlbnRpYWwgZm9yIGNvbmZ1c2lvbi4gIEltcGxpY2l0IGluIHRoZSBoYW5kbGluZwoJb2YgYSB0d28gY2hhcmFjdGVyIHNlcXVlbmNlIEVTQyArIHNvbWV0aGluZyBpcyB0aGUgZmFjdCB0aGF0IHdoZW4KCU5ldEhhY2sgc2VlcyBFU0MsIGl0IG5lZWRzIHRvIHdhaXQgZm9yIGFub3RoZXIgY2hhcmFjdGVyIGJlZm9yZQoJaXQgY2FuIGRlY2lkZSB3aGF0IHRvIGRvLiAgU28gaWYgeW91IHR5cGUgRVNDIG1hbnVhbGx5LCB5b3UnbGwKCW5lZWQgdG8gdHlwZSBpdCBhIHNlY29uZCB0aW1lIG9yIE5ldEhhY2sgd2lsbCBzaXQgdGhlcmUgd2FpdGluZy4KCShJdCB3aWxsIHRoZW4gYmUgdHJlYXRlZCBhcyBpZiB5b3UgdHlwZWQgRVNDIHJhdGhlciB0aGFuIE0tRVNDLikKCglPbiBzb21lIHN5c3RlbXMsIHR5cGluZyBeXCB3aWxsIHNlbmQgYSBRVUlUIHNpZ25hbCB0byB0aGUgY3VycmVudAoJcHJvY2VzcywgcHJvYmFibHkga2lsbGluZyBpdCBhbmQgcG9zc2libHkgY2F1c2luZyBpdCB0byBzYXZlIGEKCWNvcmUgZHVtcC4gIEl0IGlzIG5vdCB1c2VkIGZvciBhbnkgTmV0SGFjayBjb21tYW5kLCBzbyBkb24ndCB0eXBlCgl0aGF0IGNoYXJhY3Rlci4KCglPbmUgbGFzdCBub3RlOiAgY2hhcmFjdGVycyBzaG93biBhcyBeeCBtZWFuIHRoYXQgeW91IHNob3VsZCBob2xkCglkb3duIHRoZSA8Y29udHJvbD4gb3IgPGN0cmw+IGtleSBhcyBhIHNoaWZ0IGFuZCB0aGVuIHR5cGUgJ3gnLgoJQ29udHJvbCBjaGFyYWN0ZXJzIGFyZSBhbGwgaW1wbGljaXRseSB1cHBlcmNhc2UsIGJ1dCB5b3UgZG9uJ3QKCW5lZWQgdG8gcHJlc3MgdGhlIHNoaWZ0IGtleSB3aGlsZSB0eXBpbmcgdGhlbS4gIFRoZSBvcHBvc2l0ZSBpcwoJdHJ1ZSBmb3IgbWV0YS1jaGFyYWN0ZXJzOiAgdGhleSBjYW4gYmUgZWl0aGVyIGNhc2UsIHNvIHlvdSBuZWVkCgl0byB1c2Ugc2hpZnQgYXMgd2VsbCBhcyA8bWV0YT4gb3IgPGFsdD4gdG8gZ2VuZXJhdGUgYW4gdXBwZXJjYXNlCglsZXR0ZXIgbWV0YS1jaGFyYWN0ZXIuCk5ldEhhY2sgSGlzdG9yeSBmaWxlIGZvciByZWxlYXNlIDMuNgoKQmVob2xkLCBtb3J0YWwsIHRoZSBvcmlnaW5zIG9mIE5ldEhhY2suLi4KCkpheSBGZW5sYXNvbiB3cm90ZSB0aGUgb3JpZ2luYWwgSGFjaywgd2l0aCBoZWxwIGZyb20gS2VubnkgV29vZGxhbmQsCk1pa2UgVGhvbWUsIGFuZCBKb24gUGF5bmUuCgpBbmRyaWVzIEJyb3V3ZXIgZGlkIGEgbWFqb3IgcmUtd3JpdGUgd2hpbGUgYXQgU3RpY2h0aW5nIE1hdGhlbWF0aXNjaCBDZW50cnVtCihub3cgQ2VudHJ1bSBXaXNrdW5kZSAmIEluZm9ybWF0aWNhKSwgdHJhbnNmb3JtaW5nIEhhY2sgaW50byBhIHZlcnkgZGlmZmVyZW50CmdhbWUuICBIZSBwdWJsaXNoZWQgdGhlIEhhY2sgc291cmNlIGNvZGUgZm9yIHVzZSBvbiBVTklYKHRtKSBzeXN0ZW1zIGJ5CnBvc3RpbmcgdGhhdCB0byBVc2VuZXQgbmV3c2dyb3VwIG5ldC5zb3VyY2VzIChsYXRlciByZW5hbWVkIGNvbXAuc291cmNlcykKcmVsZWFzaW5nIHZlcnNpb24gMS4wIGluIERlY2VtYmVyIG9mIDE5ODQsIHRoZW4gdmVyc2lvbnMgMS4wLjEsIDEuMC4yLCBhbmQKZmluYWxseSAxLjAuMyBpbiBKdWx5IG9mIDE5ODUuICBVc2VuZXQgbmV3c2dyb3VwIG5ldC5nYW1lcy5oYWNrIChsYXRlcgpyZW5hbWVkIHJlYy5nYW1lcy5oYWNrLCBldmVudHVhbGx5IHJlcGxhY2VkIGJ5IHJlYy5nYW1lcy5yb2d1ZWxpa2UubmV0aGFjaykKd2FzIGNyZWF0ZWQgZm9yIGRpc2N1c3NpbmcgaXQuCgpEb24gRy4gS25lbGxlciBwb3J0ZWQgSGFjayAxLjAuMyB0byBNaWNyb3NvZnQodG0pIEMgYW5kIE1TLURPUyh0bSksIHByb2R1Y2luZwpQQyBIQUNLIDEuMDFlLCBhZGRlZCBzdXBwb3J0IGZvciBERUMgUmFpbmJvdyBncmFwaGljcyBpbiB2ZXJzaW9uIDEuMDNnLCBhbmQKd2VudCBvbiB0byBwcm9kdWNlIGF0IGxlYXN0IGZvdXIgbW9yZSB2ZXJzaW9ucyAoMy4wLCAzLjIsIDMuNTEsIGFuZCAzLjY7Cm5vdGUgdGhhdCB0aGVzZSBhcmUgb2xkIEhhY2sgdmVyc2lvbiBudW1iZXJzLCBub3QgY29udGVtcG9yYXJ5IE5ldEhhY2sgb25lcykuCgpSLiBCbGFjayBwb3J0ZWQgUEMgSEFDSyAzLjUxIHRvIExhdHRpY2UodG0pIEMgYW5kIHRoZSBBdGFyaSA1MjAvMTA0MFNULApwcm9kdWNpbmcgU1QgSGFjayAxLjAzLgoKTWlrZSBTdGVwaGVuc29uIG1lcmdlZCB0aGVzZSB2YXJpb3VzIHZlcnNpb25zIGJhY2sgdG9nZXRoZXIsIGluY29ycG9yYXRpbmcKbWFueSBvZiB0aGUgYWRkZWQgZmVhdHVyZXMsIGFuZCBwcm9kdWNlZCBOZXRIYWNrIHZlcnNpb24gMS40IGluIDE5ODcuICBIZQp0aGVuIGNvb3JkaW5hdGVkIGEgY2FzdCBvZiB0aG91c2FuZHMgaW4gZW5oYW5jaW5nIGFuZCBkZWJ1Z2dpbmcgTmV0SGFjayAxLjQKYW5kIHJlbGVhc2VkIE5ldEhhY2sgdmVyc2lvbnMgMi4yIGFuZCAyLjMuICBMaWtlIEhhY2ssIHRoZXkgd2VyZSByZWxlYXNlZCBieQpwb3N0aW5nIHRoZWlyIHNvdXJjZSBjb2RlIHRvIFVzZW5ldCB3aGVyZSB0aGV5IHJlbWFpbmVkIGF2YWlsYWJsZSBpbiB2YXJpb3VzCmFyY2hpdmVzIGFjY2Vzc2libGUgdmlhIGZ0cCBhbmQgdXVjcCBhZnRlciBleHBpcmluZyBmcm9tIHRoZSBuZXdzZ3JvdXAuCgpMYXRlciwgTWlrZSBjb29yZGluYXRlZCBhIG1ham9yIHJlLXdyaXRlIG9mIHRoZSBnYW1lLCBoZWFkaW5nIGEgdGVhbSB3aGljaAppbmNsdWRlZCBLZW4gQXJyb21kZWUsIEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQsIFN0ZXZlIENyZXBzLCBFcmljIEhlbmRyaWNrc29uLApJemNoYWsgTWlsbGVyLCBFcmljIFMuIFJheW1vbmQsIEpvaG4gUnVwbGV5LCBNaWtlIFRocmVlcG9pbnQsIGFuZCBKYW5ldCBXYWx6LAp0byBwcm9kdWNlIE5ldEhhY2sgMy4wYy4KCk5ldEhhY2sgMy4wIHdhcyBwb3J0ZWQgdG8gdGhlIEF0YXJpIGJ5IEVyaWMgUi4gU21pdGgsIHRvIE9TLzIgYnkgVGltbwpIYWt1bGluZW4sIGFuZCB0byBWTVMgYnkgRGF2aWQgR2VudHplbC4gIFRoZSB0aHJlZSBvZiB0aGVtIGFuZCBLZXZpbiBEYXJjeQpsYXRlciBqb2luZWQgdGhlIG1haW4gTmV0SGFjayBEZXZlbG9wbWVudCBUZWFtIHRvIHByb2R1Y2Ugc3Vic2VxdWVudApyZXZpc2lvbnMgb2YgMy4wLgoKT2xhZiBTZWliZXJ0IHBvcnRlZCBOZXRIYWNrIDIuMyBhbmQgMy4wIHRvIHRoZSBBbWlnYS4gIE5vcm0gTWVsdWNoLCBTdGVwaGVuClNwYWNrbWFuIGFuZCBQaWVycmUgTWFydGluZWF1IGRlc2lnbmVkIG92ZXJsYXkgY29kZSBmb3IgUEMgTmV0SGFjayAzLjAuCkpvaG5ueSBMZWUgcG9ydGVkIE5ldEhhY2sgMy4wIHRvIHRoZSBNYWNpbnRvc2guICBBbG9uZyB3aXRoIHZhcmlvdXMgb3RoZXIKRHVuZ2VvbmVlcnMsIHRoZXkgY29udGludWVkIHRvIGVuaGFuY2UgdGhlIFBDLCBNYWNpbnRvc2gsIGFuZCBBbWlnYSBwb3J0cwp0aHJvdWdoIHRoZSBsYXRlciByZXZpc2lvbnMgb2YgMy4wLgoKVmVyc2lvbiAzLjAgd2VudCB0aHJvdWdoIHRlbiByZWxhdGl2ZWx5IHJhcGlkbHkgcmVsZWFzZWQgInBhdGNoLWxldmVsIgpyZXZpc2lvbnMuICBWZXJzaW9ucyBhdCB0aGUgdGltZSB3ZXJlIGtub3duIGFzIDMuMCBmb3IgdGhlIGJhc2UgcmVsZWFzZQphbmQgdmFyaW91c2x5IGFzICIzLjBhIiB0aHJvdWdoICIzLjBqIiwgIjMuMCBwYXRjaGxldmVsIDEiIHRocm91Z2gKIjMuMCBwYXRjaGxldmVsIDEwIiwgb3IgIjMuMHBsMSIgdGhyb3VnaCAiMy4wcGwxMCIgcmF0aGVyIHRoYW4gMy4wLjAgYW5kCjMuMC4xIHRocm91Z2ggMy4wLjEwOyB0aGUgdGhyZWUgY29tcG9uZW50IG51bWJlcmluZyBzY2hlbWUgYmVnYW4gdG8gYmUgdXNlZAp3aXRoIDMuMS4wLgoKSGVhZGVkIGJ5IE1pa2UgU3RlcGhlbnNvbiBhbmQgY29vcmRpbmF0ZWQgYnkgSXpjaGFrIE1pbGxlciBhbmQgSmFuZXQgV2FseiwKdGhlIE5ldEhhY2sgRGV2ZWxvcG1lbnQgVGVhbSB3aGljaCBub3cgaW5jbHVkZWQgS2VuIEFycm9tZGVlLCBEYXZpZCBDb2hycywKSmVhbi1DaHJpc3RvcGhlIENvbGxldCwgS2V2aW4gRGFyY3ksIE1hdHQgRGF5LCBUaW1vIEhha3VsaW5lbiwgU3RldmUgTGluaGFydCwKRGVhbiBMdWljaywgUGF0IFJhbmtpbiwgRXJpYyBSYXltb25kLCBhbmQgRXJpYyBTbWl0aCB1bmRlcnRvb2sgYSByYWRpY2FsCnJldmlzaW9uIG9mIDMuMC4gIFRoZXkgcmUtc3RydWN0dXJlZCB0aGUgZ2FtZSdzIGRlc2lnbiwgYW5kIHJlLXdyb3RlIG1ham9yCnBhcnRzIG9mIHRoZSBjb2RlLiAgVGhleSBhZGRlZCBtdWx0aXBsZSBkdW5nZW9ucywgYSBuZXcgZGlzcGxheSwgc3BlY2lhbAppbmRpdmlkdWFsIGNoYXJhY3RlciBxdWVzdHMsIGEgbmV3IGVuZGdhbWUgYW5kIG1hbnkgb3RoZXIgbmV3IGZlYXR1cmVzLCBhbmQKcHJvZHVjZWQgTmV0SGFjayAzLjEuICBWZXJzaW9uIDMuMS4wIHdhcyByZWxlYXNlZCBpbiBKYW51YXJ5IG9mIDE5OTMuCgpLZW4gTG9yYmVyLCBHcmVnZyBXb25kZXJseSBhbmQgR3JlZyBPbHNvbiwgd2l0aCBoZWxwIGZyb20gUmljaGFyZCBBZGRpc29uLApNaWtlIFBhc3NhcmV0dGksIGFuZCBPbGFmIFNlaWJlcnQsIGRldmVsb3BlZCBOZXRIYWNrIDMuMSBmb3IgdGhlIEFtaWdhLgoKTm9ybSBNZWx1Y2ggYW5kIEtldmluIFNtb2xrb3dza2ksIHdpdGggaGVscCBmcm9tIENhcmwgU2NoZWxpbiwgU3RlcGhlbgpTcGFja21hbiwgU3RldmUgVmFuRGV2ZW5kZXIsIGFuZCBQYXVsIFdpbm5lciwgcG9ydGVkIE5ldEhhY2sgMy4xIHRvIHRoZSBQQy4KCkpvbiBXe3R0ZSBhbmQgSGFvLXlhbmcgV2FuZywgd2l0aCBoZWxwIGZyb20gUm9zcyBCcm93biwgTWlrZSBFbmdiZXIsIERhdmlkCkhhaXJzdG9uLCBNaWNoYWVsIEhhbWVsLCBKb25hdGhhbiBIYW5kbGVyLCBKb2hubnkgTGVlLCBUaW0gTGVubmFuLCBSb2IgTWVua2UsCmFuZCBBbmR5IFN3YW5zb24sIGRldmVsb3BlZCBOZXRIYWNrIDMuMSBmb3IgdGhlIE1hY2ludG9zaCwgcG9ydGluZyBpdCBmb3IKTVBXLiAgQnVpbGRpbmcgb24gdGhlaXIgZGV2ZWxvcG1lbnQsIEJhcnQgSG91c2UgYWRkZWQgYSBUaGluayBDIHBvcnQuCgpUaW1vIEhha3VsaW5lbiBwb3J0ZWQgTmV0SGFjayAzLjEgdG8gT1MvMi4gIEVyaWMgU21pdGggcG9ydGVkIE5ldEhhY2sgMy4xCnRvIHRoZSBBdGFyaS4gIFBhdCBSYW5raW4sIHdpdGggaGVscCBmcm9tIEpvc2h1YSBEZWxhaHVudHksIHdhcyByZXNwb25zaWJsZQpmb3IgdGhlIFZNUyB2ZXJzaW9uIG9mIE5ldEhhY2sgMy4xLiAgTWljaGFlbCBBbGxpc29uIHBvcnRlZCBOZXRIYWNrIDMuMSB0bwpXaW5kb3dzIE5ULgoKRGVhbiBMdWljaywgd2l0aCBoZWxwIGZyb20gRGF2aWQgQ29ocnMsIGRldmVsb3BlZCBOZXRIYWNrIDMuMSBmb3IgWDExLgpJdCBkcmV3IHRoZSBtYXAgYXMgdGV4dCByYXRoZXIgdGhhbiBncmFwaGljYWxseSBidXQgaW5jbHVkZWQgbmgxMC5iZGYsIGFuCm9wdGlvbmFsbHkgdXNlZCBjdXN0b20gWDExIGZvbnQgd2hpY2ggaGFzIHRpbnkgaW1hZ2VzIGluIHBsYWNlIG9mIGxldHRlcnMgYW5kCnB1bmN0dWF0aW9uLCBhIHByZWN1cnNvciBvZiB0aWxlcy4gIFRob3NlIGltYWdlcyBkb24ndCBleHRlbmQgdG8gaW5kaXZpZHVhbAptb25zdGVyIGFuZCBvYmplY3QgdHlwZXMsIGp1c3QgcmVwbGFjZW1lbnRzIGZvciBtb25zdGVyIGFuZCBvYmplY3QgY2xhc3Nlcwooc28gb25lIGN1c3RvbSBpbWFnZSBmb3IgYWxsICJhIiBpbnNlY3RzIGFuZCBhbm90aGVyIGZvciBhbGwgIlsiIGFybW9yIGFuZApzbyBmb3J0aCwgbm90IHNlcGFyYXRlIGltYWdlcyBmb3IgYmVldGxlcyBhbmQgYW50cyBvciBmb3IgY2xvYWtzIGFuZCBib290cykuCgpXYXJ3aWNrIEFsbGlzb24gd3JvdGUgYSBncmFwaGljYWxseSBkaXNwbGF5ZWQgdmVyc2lvbiBvZiBOZXRIYWNrIGZvciB0aGUKQXRhcmkgd2hlcmUgdGhlIHRpbnkgcGljdHVyZXMgd2VyZSBkZXNjcmliZWQgYXMgImljb25zIiBhbmQgd2VyZSBkaXN0aW5jdApmb3Igc3BlY2lmaWMgdHlwZXMgb2YgbW9uc3RlcnMgYW5kIG9iamVjdHMgcmF0aGVyIHRoYW4ganVzdCB0aGVpciBjbGFzc2VzLgpIZSBjb250cmlidXRlZCB0aGVtIHRvIHRoZSBOZXRIYWNrIERldmVsb3BtZW50IFRlYW0gd2hpY2ggcmVjaHJpc3RlbmVkIHRoZW0KInRpbGVzIiwgb3JpZ2luYWwgdXNhZ2Ugd2hpY2ggaGFzIHN1YnNlcXVlbnRseSBiZWVuIHBpY2tlZCB1cCBieSB2YXJpb3VzCm90aGVyIGdhbWVzLiAgTmV0SGFjaydzIHRpbGVzIHN1cHBvcnQgd2FzIHRoZW4gaW1wbGVtZW50ZWQgb24gb3RoZXIgcGxhdGZvcm1zCihpbml0aWFsbHkgTVMtRE9TIGJ1dCBldmVudHVhbGx5IFdpbmRvd3MsIFF0LCBhbmQgWDExIHRvbykuCgpUaGUgMy4yIE5ldEhhY2sgRGV2ZWxvcG1lbnQgVGVhbSwgY29tcHJpc2VkIG9mIE1pY2hhZWwgQWxsaXNvbiwgS2VuIEFycm9tZGVlLApEYXZpZCBDb2hycywgSmVzc2llIENvbGxldCwgU3RldmUgQ3JlcHMsIEtldmluIERhcmN5LCBUaW1vIEhha3VsaW5lbiwgU3RldmUKTGluaGFydCwgRGVhbiBMdWljaywgUGF0IFJhbmtpbiwgRXJpYyBTbWl0aCwgTWlrZSBTdGVwaGVuc29uLCBKYW5ldCBXYWx6LAphbmQgUGF1bCBXaW5uZXIsIHJlbGVhc2VkIHZlcnNpb24gMy4yLjAgaW4gQXByaWwgb2YgMTk5Ni4KClZlcnNpb24gMy4yIG1hcmtlZCB0aGUgdGVudGggYW5uaXZlcnNhcnkgb2YgdGhlIGZvcm1hdGlvbiBvZiB0aGUgZGV2ZWxvcG1lbnQKdGVhbS4gIEluIGEgdGVzdGFtZW50IHRvIHRoZWlyIGRlZGljYXRpb24gdG8gdGhlIGdhbWUsIGFsbCB0aGlydGVlbiBtZW1iZXJzCm9mIHRoZSBvcmlnaW5hbCBOZXRIYWNrIERldmVsb3BtZW50IFRlYW0gcmVtYWluZWQgb24gdGhlIHRlYW0gYXQgdGhlIHN0YXJ0Cm9mIHdvcmsgb24gdGhhdCByZWxlYXNlLiAgRHVyaW5nIHRoZSBpbnRlcnZhbCBiZXR3ZWVuIHRoZSByZWxlYXNlIG9mIDMuMS4zCmFuZCAzLjIuMCwgb25lIG9mIHRoZSBmb3VuZGluZyBtZW1iZXJzIG9mIHRoZSBOZXRIYWNrIERldmVsb3BtZW50IFRlYW0sCkRyLiBJemNoYWsgTWlsbGVyLCB3YXMgZGlhZ25vc2VkIHdpdGggY2FuY2VyIGFuZCBwYXNzZWQgYXdheS4gIFRoYXQgcmVsZWFzZQpvZiB0aGUgZ2FtZSB3YXMgZGVkaWNhdGVkIHRvIGhpbSBieSB0aGUgZGV2ZWxvcG1lbnQgYW5kIHBvcnRpbmcgdGVhbXMuCgpWZXJzaW9uIDMuMiBwcm92ZWQgdG8gYmUgbW9yZSBzdGFibGUgdGhhbiBwcmV2aW91cyB2ZXJzaW9ucy4gIE1hbnkgYnVncwp3ZXJlIGZpeGVkLCBhYnVzZXMgZWxpbWluYXRlZCwgYW5kIGdhbWUgZmVhdHVyZXMgdHVuZWQgZm9yIGJldHRlciBnYW1lCnBsYXkuCgpEdXJpbmcgdGhlIGxpZmVzcGFuIG9mIE5ldEhhY2sgMy4xIGFuZCAzLjIsIHNldmVyYWwgZW50aHVzaWFzdHMgb2YgdGhlIGdhbWUKYWRkZWQgdGhlaXIgb3duIG1vZGlmaWNhdGlvbnMgdG8gdGhlIGdhbWUgYW5kIG1hZGUgdGhlc2UgInZhcmlhbnRzIiBwdWJsaWNseQphdmFpbGFibGU6CgpUb20gUHJvdWRmb290IGFuZCBZdXZhbCBPcmVuIGNyZWF0ZWQgTmV0SGFjaysrLCB3aGljaCB3YXMgcXVpY2tseSByZW5hbWVkCk5ldEhhY2stLSB3aGVuIHNvbWUgcGVvcGxlIGluY29ycmVjdGx5IGFzc3VtZWQgdGhhdCBpdCB3YXMgYSBjb252ZXJzaW9uCm9mIHRoZSBDIHNvdXJjZSBjb2RlIHRvIEMrKy4gIFdvcmtpbmcgaW5kZXBlbmRlbnRseSwgU3RlcGhlbiBXaGl0ZSB3cm90ZQpOZXRIYWNrIFBsdXMuICBUb20gUHJvdWRmb290IGxhdGVyIG1lcmdlZCBOZXRIYWNrIFBsdXMgYW5kIGhpcyBvd24gTmV0SGFjay0tCnRvIHByb2R1Y2UgU0xBU0guICBMYXJyeSBTdGV3YXJ0LVplcmJhIGFuZCBXYXJ3aWNrIEFsbGlzb24gaW1wcm92ZWQgdGhlCnNwZWxsIGNhc3Rpbmcgc3lzdGVtIHdpdGggdGhlIFdpemFyZCBQYXRjaC4gIFdhcndpY2sgQWxsaXNvbiBhbHNvIHBvcnRlZApOZXRIYWNrIHRvIHVzZSB0aGUgUXQgaW50ZXJmYWNlLgoKV2FycmVuIENoZXVuZyBjb21iaW5lZCBTTEFTSCB3aXRoIHRoZSBXaXphcmQgUGF0Y2ggdG8gcHJvZHVjZSBTbGFzaCdFTSwgYW5kCndpdGggdGhlIGhlbHAgb2YgS2V2aW4gSHVnbywgYWRkZWQgbW9yZSBmZWF0dXJlcy4gIEtldmluIGxhdGVyIGpvaW5lZCB0aGUKTmV0SGFjayBEZXZlbG9wbWVudCBUZWFtIGFuZCBpbmNvcnBvcmF0ZWQgdGhlIGJlc3Qgb2YgdGhlc2UgaWRlYXMgaW50bwpOZXRIYWNrIDMuMy4KClRoZSBmaW5hbCB1cGRhdGUgdG8gMy4yIHdhcyB0aGUgYnVnIGZpeCByZWxlYXNlIDMuMi4zLCB3aGljaCB3YXMgcmVsZWFzZWQKc2ltdWx0YW5lb3VzbHkgd2l0aCAzLjMuMCBpbiBEZWNlbWJlciAxOTk5IGp1c3QgaW4gdGltZSBmb3IgdGhlIFllYXIgMjAwMC4KQmVjYXVzZSBvZiB0aGUgbmV3ZXIgdmVyc2lvbiwgMy4yLjMgd2FzIHJlbGVhc2VkIGFzIGEgc291cmNlIGNvZGUgcGF0Y2ggb25seSwKd2l0aG91dCBhbnkgcmVhZHktdG8tcGxheSBkaXN0cmlidXRpb24gZm9yIHN5c3RlbXMgdGhhdCB1c3VhbGx5IGhhZCBzdWNoLgoKKFRvIGFueW9uZSBjb25zaWRlcmluZyByZXN1cnJlY3RpbmcgYW4gb2xkIHZlcnNpb246ICBhbGwgdmVyc2lvbnMgYmVmb3JlCjMuMi4zIGhhZCBhIFkySyBidWcuICBUaGUgaGlnaCBzY29yZXMgZmlsZSBhbmQgdGhlIGxvZyBmaWxlIGNvbnRhaW5lZCBkYXRlcwp3aGljaCB3ZXJlIGZvcm1hdHRlZCB1c2luZyBhIHR3by1kaWdpdCB5ZWFyLCBhbmQgMTk5OSdzIHllYXIgOTkgd2FzIGZvbGxvd2VkCmJ5IDIwMDAncyB5ZWFyIDEwMC4gIFRoYXQgZ290IHdyaXR0ZW4gb3V0IHN1Y2Nlc3NmdWxseSBidXQgaXQgdW5pbnRlbnRpb25hbGx5CmludHJvZHVjZWQgYW4gZXh0cmEgY29sdW1uIGluIHRoZSBmaWxlIGxheW91dCB3aGljaCBwcmV2ZW50ZWQgc2NvcmUgZW50cmllcwpmcm9tIGJlaW5nIHJlYWQgYmFjayBpbiBjb3JyZWN0bHksIGludGVyZmVyaW5nIHdpdGggaW5zZXJ0aW9uIG9mIG5ldyBoaWdoCnNjb3JlcyBhbmQgd2l0aCByZXRyaWV2YWwgb2Ygb2xkIGNoYXJhY3RlciBuYW1lcyB0byB1c2UgZm9yIHJhbmRvbSBnaG9zdCBhbmQKc3RhdHVlIG5hbWVzIGluIHRoZSBjdXJyZW50IGdhbWUuKQoKVGhlIDMuMyBOZXRIYWNrIERldmVsb3BtZW50IFRlYW0sIGNvbnNpc3Rpbmcgb2YgTWljaGFlbCBBbGxpc29uLCBLZW4gQXJyb21kZWUsCkRhdmlkIENvaHJzLCBKZXNzaWUgQ29sbGV0LCBTdGV2ZSBDcmVwcywgS2V2aW4gRGFyY3ksIFRpbW8gSGFrdWxpbmVuLApLZXZpbiBIdWdvLCBTdGV2ZSBMaW5oYXJ0LCBLZW4gTG9yYmVyLCBEZWFuIEx1aWNrLCBQYXQgUmFua2luLCBFcmljIFNtaXRoLApNaWtlIFN0ZXBoZW5zb24sIEphbmV0IFdhbHosIGFuZCBQYXVsIFdpbm5lciwgcmVsZWFzZWQgMy4zLjAgaW4KRGVjZW1iZXIgMTk5OSBhbmQgMy4zLjEgaW4gQXVndXN0IG9mIDIwMDAuCgpWZXJzaW9uIDMuMyBvZmZlcmVkIG1hbnkgZmlyc3RzLiAgSXQgd2FzIHRoZSBmaXJzdCB2ZXJzaW9uIHRvIHNlcGFyYXRlIHJhY2UKYW5kIHByb2Zlc3Npb24uICBUaGUgRWxmIGNsYXNzIHdhcyByZW1vdmVkIGluIHByZWZlcmVuY2UgdG8gYW4gZWxmIHJhY2UsCmFuZCB0aGUgcmFjZXMgb2YgZHdhcnZlcywgZ25vbWVzLCBhbmQgb3JjcyBtYWRlIHRoZWlyIGZpcnN0IGFwcGVhcmFuY2UgaW4KdGhlIGdhbWUgYWxvbmdzaWRlIHRoZSBmYW1pbGlhciBodW1hbiByYWNlLiAgTW9uayBhbmQgUmFuZ2VyIHJvbGVzIGpvaW5lZApBcmNoZW9sb2dpc3RzLCBCYXJiYXJpYW5zLCBDYXZlbWVuLCBIZWFsZXJzLCBLbmlnaHRzLCBQcmllc3RzLCBSb2d1ZXMsClNhbXVyYWksIFRvdXJpc3RzLCBWYWxreXJpZXMgYW5kIG9mIGNvdXJzZSwgV2l6YXJkcy4gIEl0IHdhcyBhbHNvIHRoZSBmaXJzdAp2ZXJzaW9uIHRvIGFsbG93IHlvdSB0byByaWRlIGEgc3RlZWQsIGFuZCB3YXMgdGhlIGZpcnN0IHZlcnNpb24gdG8gaGF2ZSBhCnB1YmxpY2x5IGF2YWlsYWJsZSB3ZWItc2l0ZSBsaXN0aW5nIGFsbCB0aGUgYnVncyB0aGF0IGhhZCBiZWVuIGRpc2NvdmVyZWQuCkRlc3BpdGUgdGhhdCBjb25zdGFudGx5IGdyb3dpbmcgYnVnIGxpc3QsIDMuMyBwcm92ZWQgc3RhYmxlIGVub3VnaCB0byBsYXN0CmZvciBtb3JlIHRoYW4gYSB5ZWFyIGFuZCBhIGhhbGYuCgpUaGUgMy40IE5ldEhhY2sgRGV2ZWxvcG1lbnQgVGVhbSBpbml0aWFsbHkgY29uc2lzdGVkIG9mIE1pY2hhZWwgQWxsaXNvbiwKS2VuIEFycm9tZGVlLCBEYXZpZCBDb2hycywgSmVzc2llIENvbGxldCwgS2V2aW4gSHVnbywgS2VuIExvcmJlciwgRGVhbiBMdWljaywKUGF0IFJhbmtpbiwgTWlrZSBTdGVwaGVuc29uLCBKYW5ldCBXYWx6LCBhbmQgUGF1bCBXaW5uZXIsIHdpdGggV2Fyd2ljayBBbGxpc29uCmpvaW5pbmcganVzdCBiZWZvcmUgdGhlIHJlbGVhc2Ugb2YgTmV0SGFjayAzLjQuMCBpbiBNYXJjaCAyMDAyLgoKQXMgd2l0aCB2ZXJzaW9uIDMuMywgdmFyaW91cyBwZW9wbGUgY29udHJpYnV0ZWQgdG8gdGhlIGdhbWUgYXMgYSB3aG9sZSBhcwp3ZWxsIGFzIHN1cHBvcnRpbmcgcG9ydHMgb24gdGhlIGRpZmZlcmVudCBwbGF0Zm9ybXMgdGhhdCBOZXRIYWNrIHJ1bnMgb246CgpQYXQgUmFua2luIG1haW50YWluZWQgMy40IGZvciBWTVMuCgpNaWNoYWVsIEFsbGlzb24gbWFpbnRhaW5lZCBOZXRIYWNrIDMuNCBmb3IgdGhlIE1TLURPUyBwbGF0Zm9ybS4KUGF1bCBXaW5uZXIgYW5kIFlpdHpoYWsgU2FwaXIgcHJvdmlkZWQgZW5jb3VyYWdlbWVudC4KCkRlYW4gTHVpY2ssIE1hcmsgTW9kcmFsbCwgYW5kIEtldmluIEh1Z28gbWFpbnRhaW5lZCBhbmQgZW5oYW5jZWQgdGhlCk1hY2ludG9zaCBwb3J0IG9mIDMuNC4KCk1pY2hhZWwgQWxsaXNvbiwgRGF2aWQgQ29ocnMsIEFsZXggS29tcGVsLCBEaW9uIE5pY29sYWFzLCBhbmQgWWl0emhhayBTYXBpcgptYWludGFpbmVkIGFuZCBlbmhhbmNlZCAzLjQgZm9yIHRoZSBNaWNyb3NvZnQgV2luZG93cyBwbGF0Zm9ybS4gIEFsZXggS29tcGVsCmNvbnRyaWJ1dGVkIGEgbmV3IGdyYXBoaWNhbCBpbnRlcmZhY2UgZm9yIHRoZSBXaW5kb3dzIHBvcnQuICBBbGV4IEtvbXBlbCBhbHNvCmNvbnRyaWJ1dGVkIGEgV2luZG93cyBDRSBwb3J0IGZvciAzLjQuMS4KClJvbiBWYW4gSXdhYXJkZW4gbWFpbnRhaW5lZCAzLjQgZm9yIE9TLzIuCgpKYW5uZSBTYWxtaWphcnZpIGFuZCBUZWVtdSBTdWlra2kgbWFpbnRhaW5lZCBhbmQgZW5oYW5jZWQgdGhlCkFtaWdhIHBvcnQgb2YgMy40IGFmdGVyIEphbm5lIFNhbG1pamFydmkgcmVzdXJyZWN0ZWQgaXQgZm9yIDMuMy4xLgoKQ2hyaXN0aWFuICJNYXJ2aW4iIEJyZXNzbGVyIG1haW50YWluZWQgMy40IGZvciB0aGUgQXRhcmkgYWZ0ZXIgaGUKcmVzdXJyZWN0ZWQgaXQgZm9yIDMuMy4xLgoKVGhlIHJlbGVhc2Ugb2YgTmV0SGFjayAzLjQuMyBpbiBEZWNlbWJlciAyMDAzIG1hcmtlZCB0aGUgYmVnaW5uaW5nIG9mIGEKbG9uZyByZWxlYXNlIGhpYXR1cy4gIDMuNC4zIHByb3ZlZCB0byBiZSBhIHJlbWFya2FibHkgc3RhYmxlIHZlcnNpb24gdGhhdApwcm92aWRlZCBjb250aW51ZWQgZW5qb3ltZW50IGJ5IHRoZSBjb21tdW5pdHkgZm9yIG1vcmUgdGhhbiBhIGRlY2FkZS4gIFRoZQpOZXRIYWNrIERldmVsb3BtZW50IFRlYW0gc2xvd2x5IGFuZCBxdWlldGx5IGNvbnRpbnVlZCB0byB3b3JrIG9uIHRoZSBnYW1lCmJlaGluZCB0aGUgc2NlbmVzIGR1cmluZyB0aGUgdGVudXJlIG9mIDMuNC4zLiAgSXQgd2FzIGR1cmluZyB0aGF0IHNhbWUKcGVyaW9kIHRoYXQgc2V2ZXJhbCBuZXcgdmFyaWFudHMgZW1lcmdlZCB3aXRoaW4gdGhlIE5ldEhhY2sgY29tbXVuaXR5LgpOb3RhYmx5IHNwb3JraGFjayBieSBEZXJlayBTLiBSYXksIHVubmV0aGFjayBieSBQYXRyaWMgTXVlbGxlciwgbml0cm9oYWNrCmFuZCBpdHMgc3VjY2Vzc29ycyBvcmlnaW5hbGx5IGJ5IERhbmllbCBUaGFsZXIgYW5kIHRoZW4gYnkgQWxleCBTbWl0aCwgYW5kCkR5bmFoYWNrIGJ5IFR1bmcgTmd1eWVuLiAgU29tZSBvZiB0aG9zZSB2YXJpYW50cyBjb250aW51ZSB0byBiZSBkZXZlbG9wZWQsCm1haW50YWluZWQsIGFuZCBlbmpveWVkIGJ5IHRoZSBjb21tdW5pdHkgdG8gdGhpcyBkYXkuCgpJbiBTZXB0ZW1iZXIgMjAxNCwgYW4gaW50ZXJpbSBzbmFwc2hvdCBvZiB0aGUgY29kZSB1bmRlciBkZXZlbG9wbWVudCB3YXMKcmVsZWFzZWQgcHVibGljbHkgYnkgb3RoZXIgcGFydGllcy4gIFNpbmNlIHRoYXQgY29kZSB3YXMgYSB3b3JrLWluLXByb2dyZXNzCmFuZCBoYWQgbm90IGdvbmUgdGhyb3VnaCB0aGUgcHJvY2VzcyBvZiBkZWJ1Z2dpbmcgaXQgYXMgYSBzdWl0YWJsZSByZWxlYXNlLAppdCB3YXMgZGVjaWRlZCB0aGF0IHRoZSB2ZXJzaW9uIG51bWJlcnMgcHJlc2VudCBvbiB0aGF0IGNvZGUgc25hcHNob3Qgd291bGQKYmUgcmV0aXJlZCBhbmQgbmV2ZXIgdXNlZCBpbiBhbiBvZmZpY2lhbCBOZXRIYWNrIHJlbGVhc2UuICBBbiBhbm5vdW5jZW1lbnQKd2FzIHBvc3RlZCBvbiB0aGUgTmV0SGFjayBEZXZlbG9wbWVudCBUZWFtJ3Mgb2ZmaWNpYWwgbmV0aGFjay5vcmcgd2Vic2l0ZQp0byB0aGF0IGVmZmVjdCwgc3RhdGluZyB0aGF0IHRoZXJlIHdvdWxkIG5ldmVyIGJlIGEgMy40LjQsIDMuNSwgb3IgMy41LjAKb2ZmaWNpYWwgcmVsZWFzZSB2ZXJzaW9uLgoKSW4gSmFudWFyeSAyMDE1LCBwcmVwYXJhdGlvbiBiZWdhbiBmb3IgdGhlIHJlbGVhc2Ugb2YgTmV0SGFjayAzLjYuCgpBdCB0aGUgYmVnaW5uaW5nIG9mIGRldmVsb3BtZW50IGZvciB3aGF0IHdvdWxkIGV2ZW50dWFsbHkgZ2V0IHJlbGVhc2VkCmFzIDMuNi4wLCB0aGUgTmV0SGFjayBEZXZlbG9wbWVudCBUZWFtIGNvbnNpc3RlZCBvZiBXYXJ3aWNrIEFsbGlzb24sCk1pY2hhZWwgQWxsaXNvbiwgS2VuIEFycm9tZGVlLCBEYXZpZCBDb2hycywgSmVzc2llIENvbGxldCwgS2VuIExvcmJlciwKRGVhbiBMdWljaywgUGF0IFJhbmtpbiwgTWlrZSBTdGVwaGVuc29uLCBKYW5ldCBXYWx6LCBhbmQgUGF1bCBXaW5uZXIuCkluIGVhcmx5IDIwMTUsIGFoZWFkIG9mIHRoZSByZWxlYXNlIG9mIDMuNi4wLCBuZXcgbWVtYmVycyBTZWFuIEh1bnQsClBhc2kgS2FsbGluZW4sIGFuZCBEZXJlayBTLiBSYXkgam9pbmVkIHRoZSBOZXRIYWNrIERldmVsb3BtZW50IFRlYW0uCgpOZWFyIHRoZSBlbmQgb2YgdGhlIGRldmVsb3BtZW50IG9mIDMuNi4wLCBvbmUgb2YgdGhlIHNpZ25pZmljYW50IGluc3BpcmF0aW9ucwpmb3IgbWFueSBvZiB0aGUgaHVtb3JvdXMgYW5kIGZ1biBmZWF0dXJlcyBmb3VuZCBpbiB0aGUgZ2FtZSwgYXV0aG9yClRlcnJ5IFByYXRjaGV0dCwgcGFzc2VkIGF3YXkuICBOZXRIYWNrIDMuNi4wIGludHJvZHVjZWQgYSB0cmlidXRlIHRvIGhpbS4KCjMuNi4wIHdhcyByZWxlYXNlZCBpbiBEZWNlbWJlciAyMDE1LCBhbmQgbWVyZ2VkIHdvcmsgZG9uZSBieSB0aGUgZGV2ZWxvcG1lbnQKdGVhbSBzaW5jZSB0aGUgcmVsZWFzZSBvZiAzLjQuMyB3aXRoIHNvbWUgb2YgdGhlIGJlbG92ZWQgY29tbXVuaXR5IHBhdGNoZXMuCk1hbnkgYnVncyB3ZXJlIGZpeGVkIGFuZCBzb21lIGNvZGUgd2FzIHJlc3RydWN0dXJlZC4KClRoZSBOZXRIYWNrIERldmVsb3BtZW50IFRlYW0sIGFzIHdlbGwgYXMgU3RldmUgVmFuRGV2ZW5kZXIgYW5kCktldmluIFNtb2xrb3dza2ksIGVuc3VyZWQgdGhhdCBOZXRIYWNrIDMuNiBjb250aW51ZWQgdG8gb3BlcmF0ZSBvbiB2YXJpb3VzClVOSVggZmxhdm9ycyBhbmQgbWFpbnRhaW5lZCB0aGUgWDExIGludGVyZmFjZS4KCktlbiBMb3JiZXIsIEhhb3lhbmcgV2FuZywgUGF0IFJhbmtpbiwgYW5kIERlYW4gTHVpY2sgbWFpbnRhaW5lZCB0aGUgcG9ydApvZiBOZXRIYWNrIDMuNiBmb3IgTWFjIE9TWC4KCk1pY2hhZWwgQWxsaXNvbiwgRGF2aWQgQ29ocnMsIEJhcnQgSG91c2UsIFBhc2kgS2FsbGluZW4sIEFsZXggS29tcGVsLApEaW9uIE5pY29sYWFzLCBEZXJlayBTLiBSYXkgYW5kIFlpdHpoYWsgU2FwaXIgbWFpbnRhaW5lZCB0aGUgcG9ydCBvZgpOZXRIYWNrIDMuNiBmb3IgTWljcm9zb2Z0IFdpbmRvd3MuCgpQYXQgUmFua2luIGF0dGVtcHRlZCB0byBrZWVwIHRoZSBWTVMgcG9ydCBydW5uaW5nIGZvciBOZXRIYWNrIDMuNiwKaGluZGVyZWQgYnkgbGltaXRlZCBhY2Nlc3MuICBLZXZpbiBTbW9sa293c2tpIGhhcyB1cGRhdGVkIGFuZCB0ZXN0ZWQgaXQKZm9yIHRoZSBtb3N0IHJlY2VudCB2ZXJzaW9uIG9mIE9wZW5WTVMgKFY4LjQgYXMgb2YgdGhpcyB3cml0aW5nKSBvbiBBbHBoYQphbmQgSW50ZWdyaXR5IChha2EgSXRhbml1bSBha2EgSUE2NCkgYnV0IG5vdCBWQVguCgpSYXkgQ2hhc29uIHJlc3VycmVjdGVkIHRoZSBNUy1ET1MgcG9ydCBmb3IgMy42IGFuZCBjb250cmlidXRlZCB0aGUKbmVjZXNzYXJ5IHVwZGF0ZXMgdG8gdGhlIGNvbW11bml0eSBhdCBsYXJnZS4KCkluIGxhdGUgQXByaWwgMjAxOCwgc2V2ZXJhbCBodW5kcmVkIGJ1ZyBmaXhlcyBmb3IgMy42LjAgYW5kIHNvbWUgbmV3CmZlYXR1cmVzIHdlcmUgYXNzZW1ibGVkIGFuZCByZWxlYXNlZCBhcyBOZXRIYWNrIDMuNi4xLgpUaGUgTmV0SGFjayBEZXZlbG9wbWVudCBUZWFtIGF0IHRoZSB0aW1lIG9mIHJlbGVhc2Ugb2YgMy42LjEgY29uc2lzdGVkIG9mCldhcndpY2sgQWxsaXNvbiwgTWljaGFlbCBBbGxpc29uLCBLZW4gQXJyb21kZWUsIERhdmlkIENvaHJzLCBKZXNzaWUgQ29sbGV0LApQYXNpIEthbGxpbmVuLCBLZW4gTG9yYmVyLCBEZWFuIEx1aWNrLCBQYXRyaWMgTXVlbGxlciwgUGF0IFJhbmtpbiwKRGVyZWsgUy4gUmF5LCBBbGV4IFNtaXRoLCBNaWtlIFN0ZXBoZW5zb24sIEphbmV0IFdhbHosIGFuZCBQYXVsIFdpbm5lci4KCkluIGVhcmx5IE1heSAyMDE5LCBhbm90aGVyIDMyMCBidWcgZml4ZXMgYWxvbmcgd2l0aCBzb21lIGVuaGFuY2VtZW50cyBhbmQKdGhlIGFkb3B0ZWQgY3Vyc2VzIHdpbmRvdyBwb3J0LCB3ZXJlIHJlbGVhc2VkIGFzIDMuNi4yLgoKQmFydCBIb3VzZSwgd2hvIGhhZCBjb250cmlidXRlZCB0byB0aGUgZ2FtZSBhcyBhIHBvcnRpbmcgdGVhbSBwYXJ0aWNpcGFudApmb3IgZGVjYWRlcywgam9pbmVkIHRoZSBOZXRIYWNrIERldmVsb3BtZW50IFRlYW0gaW4gbGF0ZSBNYXkgMjAxOS4KCk5ldEhhY2sgMy42LjMgd2FzIHJlbGVhc2VkIG9uIERlY2VtYmVyIDUsIDIwMTkgY29udGFpbmluZyBvdmVyIDE5MCBidWcKZml4ZXMgdG8gTmV0SGFjayAzLjYuMi4KCk5ldEhhY2sgMy42LjQgd2FzIHJlbGVhc2VkIG9uIERlY2VtYmVyIDE4LCAyMDE5IGNvbnRhaW5pbmcgYSBzZWN1cml0eQpmaXggYW5kIGEgZmV3IGJ1ZyBmaXhlcy4KCk5ldEhhY2sgMy42LjUgd2FzIHJlbGVhc2VkIG9uIEphbnVhcnkgMjcsIDIwMjAgY29udGFpbmluZyBzb21lIHNlY3VyaXR5IGZpeGVzCmFuZCBhIHNtYWxsIG51bWJlciBvZiBidWcgZml4ZXMuCgpOZXRIYWNrIDMuNi42IHdhcyByZWxlYXNlZCBvbiBNYXJjaCA4LCAyMDIwIGNvbnRhaW5pbmcgYSBzZWN1cml0eSBmaXggYW5kCnNvbWUgYnVnIGZpeGVzLgoKVGhlIG9mZmljaWFsIE5ldEhhY2sgd2ViIHNpdGUgaXMgbWFpbnRhaW5lZCBieSBLZW4gTG9yYmVyIGF0Cmh0dHBzOi8vd3d3Lm5ldGhhY2sub3JnLy4KCk9uIGJlaGFsZiBvZiB0aGUgTmV0SGFjayBjb21tdW5pdHksIHRoYW5rIHlvdSB2ZXJ5IG11Y2ggb25jZSBhZ2FpbiAgdG8KTS4gIERyZXcgIFN0cmVpYiBhbmQgUGFzaSBLYWxsaW5lbiBmb3IgcHJvdmlkaW5nIGEgcHVibGljIE5ldEhhY2sgc2VydmVyCmF0IG5ldGhhY2suYWx0Lm9yZy4gVGhhbmtzIHRvICBLZWl0aCAgU2ltcHNvbiAgYW5kIEFuZHkgVGhvbXNvbiBmb3IKaGFyZGZvdWdodC5vcmcuIFRoYW5rcyB0byBhbGwgdGhvc2UgdW5uYW1lZCBkdW5nZW9uZWVycyB3aG8gaW52ZXN0IHRoZWlyCnRpbWUgYW5kICBlZmZvcnQgIGludG8gIGFubnVhbCAgTmV0SGFjayB0b3VybmFtZW50cyBzdWNoIGFzIEp1bmV0aGFjaywKVGhlIE5vdmVtYmVyIE5ldEhhY2sgVG91cm5hbWVudCwgYW5kIGluIGRheXMgcGFzdCwgZGV2bnVsbC5uZXQgKGdvbmUgZm9yCm5vdywgYnV0IG5vdCBmb3Jnb3R0ZW4pLgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgLSAtIC0gLSAtIC0gLSAtIC0gLQoKRnJvbSB0aW1lIHRvIHRpbWUsIHNvbWUgZGVwcmF2ZWQgaW5kaXZpZHVhbCBvdXQgdGhlcmUgaW4gbmV0bGFuZCBzZW5kcyBhCnBhcnRpY3VsYXJseSBpbnRyaWd1aW5nIG1vZGlmaWNhdGlvbiB0byBoZWxwIG91dCB3aXRoIHRoZSBnYW1lLiAgVGhlCk5ldEhhY2sgRGV2ZWxvcG1lbnQgVGVhbSBzb21ldGltZXMgbWFrZXMgbm90ZSBvZiB0aGUgbmFtZXMgb2YgdGhlIHdvcnN0Cm9mIHRoZXNlIG1pc2NyZWFudHMgaW4gdGhpcywgdGhlIGxpc3Qgb2YgRHVuZ2VvbmVlcnM6CgogICAgQWRhbSBBcm9ub3cgICAgICAgICAgICAgICBKLiBBbGkgSGFybG93ICAgICAgICAgICAgIE1pa2tvIEp1b2xhCiAgICBBbGV4IEtvbXBlbCAgICAgICAgICAgICAgIEphbmV0IFdhbHogICAgICAgICAgICAgICAgTmF0aGFuIEVhZHkKICAgIEFsZXggU21pdGggICAgICAgICAgICAgICAgSmFubmUgU2FsbWlqYXJ2aSAgICAgICAgICBOb3JtIE1lbHVjaAogICAgQW5kcmVhcyBEb3JuICAgICAgICAgICAgICBKZWFuLUNocmlzdG9waGUgQ29sbGV0ICAgIE9sYWYgU2VpYmVydAogICAgQW5keSBDaHVyY2ggICAgICAgICAgICAgICBKZWZmIEJhaWxleSAgICAgICAgICAgICAgIFBhc2kgS2FsbGluZW4KICAgIEFuZHkgU3dhbnNvbiAgICAgICAgICAgICAgSm9jaGVuIEVyd2llZCAgICAgICAgICAgICBQYXQgUmFua2luCiAgICBBbmR5IFRob21zb24gICAgICAgICAgICAgIEpvaG4gS2FsbGVuICAgICAgICAgICAgICAgUGF0cmljIE11ZWxsZXIKICAgIEFyaSBIdXR0dW5lbiAgICAgICAgICAgICAgSm9obiBSdXBsZXkgICAgICAgICAgICAgICBQYXVsIFdpbm5lcgogICAgQmFydCBIb3VzZSAgICAgICAgICAgICAgICBKb2huIFMuIEJpZW4gICAgICAgICAgICAgIFBpZXJyZSBNYXJ0aW5lYXUKICAgIEJlbnNvbiBJLiBNYXJndWxpZXMgICAgICAgSm9obm55IExlZSAgICAgICAgICAgICAgICBSYWxmIEJyb3duCiAgICBCaWxsIER5ZXIgICAgICAgICAgICAgICAgIEpvbiBXe3R0ZSAgICAgICAgICAgICAgICAgUmF5IENoYXNvbgogICAgQm91ZGV3aWpuIFdhaWplcnMgICAgICAgICBKb25hdGhhbiBIYW5kbGVyICAgICAgICAgIFJpY2hhcmQgQWRkaXNvbgogICAgQnJ1Y2UgQ294ICAgICAgICAgICAgICAgICBKb3NodWEgRGVsYWh1bnR5ICAgICAgICAgIFJpY2hhcmQgQmVpZ2VsCiAgICBCcnVjZSBIb2xsb3dheSAgICAgICAgICAgIEthcmwgR2Fycmlzb24gICAgICAgICAgICAgUmljaGFyZCBQLiBIdWdoZXkKICAgIEJydWNlIE1ld2Jvcm5lICAgICAgICAgICAgS2Vpem8gWWFtYW1vdG8gICAgICAgICAgICBSb2IgTWVua2UKICAgIENhcmwgU2NoZWxpbiAgICAgICAgICAgICAgS2VpdGggU2ltcHNvbiAgICAgICAgICAgICBSb2JpbiBCYW5keQogICAgQ2hyaXMgUnVzc28gICAgICAgICAgICAgICBLZW4gQXJub2xkICAgICAgICAgICAgICAgIFJvYmluIEpvaG5zb24KICAgIERhdmlkIENvaHJzICAgICAgICAgICAgICAgS2VuIEFycm9tZGVlICAgICAgICAgICAgICBSb2RlcmljayBTY2hlcnRsZXIKICAgIERhdmlkIERhbWVyZWxsICAgICAgICAgICAgS2VuIExvcmJlciAgICAgICAgICAgICAgICBSb2xhbmQgTWNHcmF0aAogICAgRGF2aWQgR2VudHplbCAgICAgICAgICAgICBLZW4gV2FzaGlraXRhICAgICAgICAgICAgIFJvbiBWYW4gSXdhYXJkZW4KICAgIERhdmlkIEhhaXJzdG9uICAgICAgICAgICAgS2V2aW4gRGFyY3kgICAgICAgICAgICAgICBSb25uZW4gTWlsbGVyCiAgICBEZWFuIEx1aWNrICAgICAgICAgICAgICAgIEtldmluIEh1Z28gICAgICAgICAgICAgICAgUm9zcyBCcm93bgogICAgRGVsIExhbWIgICAgICAgICAgICAgICAgICBLZXZpbiBTaXR6ZSAgICAgICAgICAgICAgIFNhc2NoYSBXb3N0bWFubgogICAgRGVyZWsgUy4gUmF5ICAgICAgICAgICAgICBLZXZpbiBTbW9sa293c2tpICAgICAgICAgIFNjb3R0IEJpZ2hhbQogICAgRGVyb24gTWVyYW5kYSAgICAgICAgICAgICBLZXZpbiBTd2VldCAgICAgICAgICAgICAgIFNjb3R0IFIuIFR1cm5lcgogICAgRGlvbiBOaWNvbGFhcyAgICAgICAgICAgICBMYXJzIEh1dHRhciAgICAgICAgICAgICAgIFNlYW4gSHVudAogICAgRHlsYW4gTydEb25uZWxsICAgICAgICAgICBMZW9uIEFybm90dCAgICAgICAgICAgICAgIFN0ZXBoZW4gU3BhY2ttYW4KICAgIEVyaWMgQmFja3VzICAgICAgICAgICAgICAgTS4gRHJldyBTdHJlaWIgICAgICAgICAgICBTdGVmYW4gVGhpZWxzY2hlcgogICAgRXJpYyBIZW5kcmlja3NvbiAgICAgICAgICBNYWxjb2xtIFJ5YW4gICAgICAgICAgICAgIFN0ZXBoZW4gV2hpdGUKICAgIEVyaWMgUi4gU21pdGggICAgICAgICAgICAgTWFyayBHb29kZXJ1bSAgICAgICAgICAgICBTdGV2ZSBDcmVwcwogICAgRXJpYyBTLiBSYXltb25kICAgICAgICAgICBNYXJrIE1vZHJhbGwgICAgICAgICAgICAgIFN0ZXZlIExpbmhhcnQKICAgIEVyaWsgQW5kZXJzZW4gICAgICAgICAgICAgTWFydmluIEJyZXNzbGVyICAgICAgICAgICBTdGV2ZSBWYW5EZXZlbmRlcgogICAgRnJlZHJpayBManVuZ2RhaGwgICAgICAgICBNYXR0aGV3IERheSAgICAgICAgICAgICAgIFRlZW11IFN1aWtraQogICAgRnJlZGVyaWNrIFJvZWJlciAgICAgICAgICBNZXJseW4gTGVSb3kgICAgICAgICAgICAgIFRpbSBMZW5uYW4KICAgIEdpbCBOZWlnZXIgICAgICAgICAgICAgICAgTWljaGFlbCBBbGxpc29uICAgICAgICAgICBUaW1vIEhha3VsaW5lbgogICAgR3JlZyBMYXNraW4gICAgICAgICAgICAgICBNaWNoYWVsIEZlaXIgICAgICAgICAgICAgIFRvbSBBbG15CiAgICBHcmVnIE9sc29uICAgICAgICAgICAgICAgIE1pY2hhZWwgSGFtZWwgICAgICAgICAgICAgVG9tIFdlc3QKICAgIEdyZWdnIFdvbmRlcmx5ICAgICAgICAgICAgTWljaGFlbCBTb2tvbG92ICAgICAgICAgICBXYXJyZW4gQ2hldW5nCiAgICBIYW8teWFuZyBXYW5nICAgICAgICAgICAgIE1pa2UgRW5nYmVyICAgICAgICAgICAgICAgV2Fyd2ljayBBbGxpc29uCiAgICBIZWxnZSBIYWZ0aW5nICAgICAgICAgICAgIE1pa2UgR2FsbG9wICAgICAgICAgICAgICAgWWl0emhhayBTYXBpcgogICAgSXJpbmEgUmVtcHQtRHJpamZob3V0ICAgICBNaWtlIFBhc3NhcmV0dGkKICAgIEl6Y2hhayBNaWxsZXIgICAgICAgICAgICAgTWlrZSBTdGVwaGVuc29uCkJvb2xlYW4gb3B0aW9ucyBub3QgdW5kZXIgc3BlY2lmaWMgY29tcGlsZSBmbGFncyAod2l0aCBkZWZhdWx0IHZhbHVlcyBpbiBbXSk6CihZb3UgY2FuIGxlYXJuIHdoaWNoIG9wdGlvbnMgZXhpc3QgaW4geW91ciB2ZXJzaW9uIGJ5IGNoZWNraW5nIHlvdXIgY3VycmVudApvcHRpb24gc2V0dGluZywgd2hpY2ggaXMgcmVhY2hlZCB2aWEgdGhlICdPJyBjb21tYW5kLikKCmFjb3VzdGljcyAgICAgIGNhbiB5b3VyIGNoYXJhY3RlciBoZWFyIGFueXRoaW5nICAgICAgICAgICAgICAgICAgIFtUUlVFXQphdXRvZGVzY3JpYmUgICBkZXNjcmliZSB0aGUgdGVycmFpbiB1bmRlciBjdXJzb3IgICAgICAgICAgICAgICAgICBbRkFMU0VdCmF1dG9kaWcgICAgICAgIGRpZyBpZiBtb3ZpbmcgYW5kIHdpZWxkaW5nIGRpZ2dpbmcgdG9vbCAgICAgICAgICAgIFtGQUxTRV0KYXV0b29wZW4gICAgICAgd2Fsa2luZyBpbnRvIGEgZG9vciBhdHRlbXB0cyB0byBvcGVuIGl0ICAgICAgICAgICAgW1RSVUVdCmF1dG9waWNrdXAgICAgIGF1dG9tYXRpY2FsbHkgcGljayB1cCBvYmplY3RzIHlvdSBtb3ZlIG92ZXIgICAgICAgIFtUUlVFXQphdXRvcXVpdmVyICAgICB3aGVuIGZpcmluZyB3aXRoIGFuIGVtcHR5IHF1aXZlciwgc2VsZWN0IHNvbWUgICAgICBbRkFMU0VdCiAgICAgICAgICAgICAgIHN1aXRhYmxlIGludmVudG9yeSB3ZWFwb24gdG8gZmlsbCB0aGUgcXVpdmVyCmF1dG91bmxvY2sgICAgIHdoZW4gb3BlbmluZyBhIGxvY2tlZCBkb29yIG9yIGxvb3RpbmcgYSBsb2NrZWQgICAgIFtUUlVFXQogICAgICAgICAgICAgICBjb250YWluZXIgd2hpbGUgY2FycnlpbmcgYSBrZXksIG9mZmVyIHRvIHVzZSBpdApCSU9TICAgICAgICAgICBhbGxvdyB0aGUgdXNlIG9mIElCTSBST00gQklPUyBjYWxscyAgICAgICAgICAgICAgICBbRkFMU0VdCmJsaW5kICAgICAgICAgIHlvdXIgY2hhcmFjdGVyIGlzIHBlcm1hbmVudGx5IGJsaW5kICAgICAgICAgICAgICAgIFtGQUxTRV0KYm9uZXMgICAgICAgICAgYWxsb3cgbG9hZGluZyBib25lcyBmaWxlcyAgICAgICAgICAgICAgICAgICAgICAgICAgW1RSVUVdCmNsaWNrbG9vayAgICAgIGxvb2sgYXQgbWFwIGJ5IGNsaWNraW5nIHJpZ2h0IG1vdXNlIGJ1dHRvbiAgICAgICAgIFtGQUxTRV0KY21kYXNzaXN0ICAgICAgZ2l2ZSBoZWxwIGZvciBlcnJvcnMgb24gZGlyZWN0aW9uICYgb3RoZXIgY29tbWFuZHMgW1RSVUVdCmNvbmZpcm0gICAgICAgIGFzayBiZWZvcmUgaGl0dGluZyB0YW1lIG9yIHBlYWNlZnVsIG1vbnN0ZXJzICAgICAgIFtUUlVFXQpkYXJrX3Jvb20gICAgICBzaG93IGZsb29yIG5vdCBpbiBzaWdodCBpbiBkaWZmZXJlbnQgY29sb3IgICAgICAgICBbVFJVRV0KZWlnaHRfYml0X3R0eSAgc2VuZCA4LWJpdCBjaGFyYWN0ZXJzIHN0cmFpZ2h0IHRvIHRlcm1pbmFsICAgICAgICAgW0ZBTFNFXQpleHRtZW51ICAgICAgICB0dHksIGN1cnNlczogdXNlIG1lbnUgZm9yICMgKGV4dGVuZGVkIGNvbW1hbmRzKSAgICBbRkFMU0VdCiAgICAgICAgICAgICAgIFgxMTogbWVudSBoYXMgYWxsIGNvbW1hbmRzIChUKSBvciB0cmFkaXRpb25hbCBzdWJzZXQgKEYpCmZpeGludiAgICAgICAgIHRyeSB0byByZXRhaW4gdGhlIHNhbWUgbGV0dGVyIGZvciB0aGUgc2FtZSBvYmplY3QgIFtUUlVFXQpmb3JjZV9pbnZtZW51ICBjb21tYW5kcyBhc2tpbmcgZm9yIGludmVudG9yeSBpdGVtIHNob3cgYSBtZW51ICAgICBbRkFMU0VdCmdvbGRYICAgICAgICAgIHdoZW4gZmlsdGVyaW5nIG9iamVjdHMgYnkgYmxlc3MvY3Vyc2Ugc3RhdGUsICAgICAgIFtGQUxTRV0KICAgICAgICAgICAgICAgd2hldGhlciB0byBjbGFzc2lmeSBnb2xkIGFzIFggKHVua25vd24pIG9yIFUgKHVuY3Vyc2VkKQpoZWxwICAgICAgICAgICBwcmludCBhbGwgYXZhaWxhYmxlIGluZm8gd2hlbiB1c2luZyB0aGUgLyBjb21tYW5kICBbVFJVRV0KaGVyZWNtZF9tZW51ICAgc2hvdyBtZW51IG9mIHNvbWUgcG9zc2libGUgY29tbWFuZHMgd2hlbiBjbGlja2luZwogICAgICAgICAgICAgICBvbiB5b3Vyc2VsZiBvciBuZXh0IHRvIHlvdSB3aXRoIG1vdXNlICAgICAgICAgICAgICBbRkFMU0VdCmlnbmludHIgICAgICAgIGlnbm9yZSBpbnRlcnJ1cHQgc2lnbmFsLCBpbmNsdWRpbmcgYnJlYWtzICAgICAgICAgIFtGQUxTRV0KaW1wbGljaXRfdW5jdXJzZWQgIG9taXQgInVuY3Vyc2VkIiBmcm9tIGludmVudG9yeSwgaWYgcG9zc2libGUgICAgW1RSVUVdCmxlZ2FjeSAgICAgICAgIHByaW50IGludHJvZHVjdG9yeSBtZXNzYWdlICAgICAgICAgICAgICAgICAgICAgICAgIFtUUlVFXQpsaXRfY29ycmlkb3IgICBzaG93IGEgZGFyayBjb3JyaWRvciBhcyBsaXQgaWYgaW4gc2lnaHQgICAgICAgICAgICBbRkFMU0VdCmxvb3RhYmMgICAgICAgIHVzZSBhL2IvYyByYXRoZXIgdGhhbiBvL2kvYiB3aGVuIGxvb3RpbmcgICAgICAgICAgIFtGQUxTRV0KbWFpbCAgICAgICAgICAgZW5hYmxlIHRoZSBtYWlsIGRhZW1vbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1RSVUVdCm1lbnRpb25fZGVjb3IgIGdpdmUgZmVlZGJhY2sgd2hlbiB3YWxraW5nIGFjcm9zcyBzdGFpcnMsIGFsdGFycywgIFtGQUxTRV0KICAgICAgICAgICAgICAgZm91bnRhaW5zLCBhbmQgc3VjaCBldmVuIHdoZW4gbm90IG9ic2N1cmVkIGJ5IG9iamVjdHMKbWVudGlvbl93YWxscyAgZ2l2ZSBmZWVkYmFjayB3aGVuIHdhbGtpbmcgYWdhaW5zdCBhIHdhbGwgICAgICAgICAgW0ZBTFNFXQptZW51X29ianN5bXMgICBzaG93IG9iamVjdCBzeW1ib2xzIGluIG1lbnVzIGlmIGl0IGlzIHNlbGVjdGFibGUgICBbRkFMU0VdCm1lbnVfb3ZlcmxheSAgIG92ZXJsYXkgbWVudXMgb24gdGhlIHNjcmVlbiBhbmQgYWxpZ24gdG8gcmlnaHQgICAgIFtUUlVFXQpudWRpc3QgICAgICAgICBzdGFydCB5b3VyIGNoYXJhY3RlciB3aXRob3V0IGFybW9yICAgICAgICAgICAgICAgICBbRkFMU0VdCm51bGwgICAgICAgICAgIGFsbG93IG51bGxzIHRvIGJlIHNlbnQgdG8geW91ciB0ZXJtaW5hbCAgICAgICAgICAgIFtUUlVFXQogICAgICAgICAgICAgICB0cnkgdHVybmluZyB0aGlzIG9wdGlvbiBvZmYgKGZvcmNpbmcgTmV0SGFjayB0byB1c2UgaXRzIG93bgogICAgICAgICAgICAgICBkZWxheSBjb2RlKSBpZiBtb3Zpbmcgb2JqZWN0cyBzZWVtIHRvIHRlbGVwb3J0IGFjcm9zcyByb29tcwpwZXJtX2ludmVudCAgICBrZWVwIGludmVudG9yeSBpbiBhIHBlcm1hbmVudCB3aW5kb3cgICAgICAgICAgICAgICBbRkFMU0VdCnBpY2t1cF90aHJvd24gIG92ZXJyaWRlIHBpY2t1cF90eXBlcyBmb3IgdGhyb3duIG9iamVjdHMgICAgICAgICAgIFtUUlVFXQpwdXNod2VhcG9uICAgICB3aGVuIHdpZWxkaW5nIGEgbmV3IHdlYXBvbiwgcHV0IHlvdXIgcHJldmlvdXNseSAgICBbRkFMU0VdCiAgICAgICAgICAgICAgIHdpZWxkZWQgd2VhcG9uIGludG8gdGhlIHNlY29uZGFyeSB3ZWFwb24gc2xvdApxdWlja19mYXJzaWdodCB1c3VhbGx5IHNraXAgdGhlIGNoYW5jZSB0byBicm93c2UgdGhlIG1hcCB3aGVuICAgICBbRkFMU0VdCiAgICAgICAgICAgICAgIHJhbmRvbWx5IHRyaWdnZXJlZCBjbGFpcnZveWFuY2UgdGFrZXMgcGxhY2UKcmF3aW8gICAgICAgICAgYWxsb3cgdGhlIHVzZSBvZiByYXcgSS9PICAgICAgICAgICAgICAgICAgICAgICAgICAgW0ZBTFNFXQpyZXN0X29uX3NwYWNlICBjb3VudCB0aGUgc3BhY2UgYmFyIGFzIGEgcmVzdCBjaGFyYWN0ZXIgICAgICAgICAgICBbRkFMU0VdCnNhZmVfcGV0ICAgICAgIHByZXZlbnQgeW91IGZyb20gKGtub3dpbmdseSkgYXR0YWNraW5nIHlvdXIgcGV0KHMpIFtUUlVFXQpzYW5pdHlfY2hlY2sgICBwZXJmb3JtIGRhdGEgc2FuaXR5IGNoZWNrcyAgICAgICAgICAgICAgICAgICAgICAgICBbRkFMU0VdCnNob3dleHAgICAgICAgIGRpc3BsYXkgeW91ciBhY2N1bXVsYXRlZCBleHBlcmllbmNlIHBvaW50cyAgICAgICAgIFtGQUxTRV0Kc2hvd3JhY2UgICAgICAgc2hvdyB5b3Vyc2VsZiBieSB5b3VyIHJhY2UgcmF0aGVyIHRoYW4gYnkgcm9sZSAgICAgW0ZBTFNFXQpzaWxlbnQgICAgICAgICBkb24ndCB1c2UgeW91ciB0ZXJtaW5hbCdzIGJlbGwgc291bmQgICAgICAgICAgICAgICBbVFJVRV0Kc29ydHBhY2sgICAgICAgZ3JvdXAgc2ltaWxhciBraW5kcyBvZiBvYmplY3RzIGluIGludmVudG9yeSAgICAgICAgW1RSVUVdCnNwYXJrbGUgICAgICAgIGRpc3BsYXkgc3BhcmtseSBlZmZlY3QgZm9yIHJlc2lzdGVkIG1hZ2ljYWwgICAgICAgIFtUUlVFXQogICAgICAgICAgICAgICBhdHRhY2tzIChlLmcuIGZpcmUgYXR0YWNrIG9uIGZpcmUtcmVzaXN0YW50IG1vbnN0ZXIpCnN0YW5kb3V0ICAgICAgIHVzZSBzdGFuZG91dCBtb2RlIGZvciAtLU1vcmUtLSBvbiBtZXNzYWdlcyAgICAgICAgIFtGQUxTRV0Kc3RhdHVzX3VwZGF0ZXMgdXBkYXRlIHRoZSBzdGF0dXMgbGluZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1RSVUVdCnRpbWUgICAgICAgICAgIGRpc3BsYXkgZWxhcHNlZCBnYW1lIHRpbWUsIGluIG1vdmVzICAgICAgICAgICAgICAgIFtGQUxTRV0KdG9tYnN0b25lICAgICAgcHJpbnQgdG9tYnN0b25lIHdoZW4geW91IGRpZSAgICAgICAgICAgICAgICAgICAgICAgW1RSVUVdCnRvcHRlbndpbiAgICAgIHByaW50IHRvcHRlbiBpbiBhIHdpbmRvdyByYXRoZXIgdGhhbiBzdGRvdXQgICAgICAgIFtGQUxTRV0KdHJhdmVsICAgICAgICAgZW5hYmxlcyB0cmF2ZWxsaW5nIHZpYSBtb3VzZSBjbGljayBpZiBzdXBwb3J0ZWQ7ICAgW1RSVUVdCiAgICAgICAgICAgICAgIGNhbiBiZSB0b2dnbGVkIG9mZiB0byBwcmV2ZW50IG1vdXNlIGNsaWNrcyBvbiB0aGUgbWFwIGZyb20KICAgICAgICAgICAgICAgYXR0ZW1wdGluZyB0byBtb3ZlIHRoZSBoZXJvOyBkb2VzIG5vdCBhZmZlY3QgdHJhdmVsIHZpYSAnXycKdXNlX2RhcmtncmF5ICAgdXNlIGJvbGQgYmxhY2sgaW5zdGVhZCBvZiBibHVlIGZvciBibGFjayBnbHlwaHMuICAgW1RSVUVdCnVzZV9pbnZlcnNlICAgIGRpc3BsYXkgZGV0ZWN0ZWQgbW9uc3RlcnMgaW4gaGlnaGxpZ2h0ZWQgbWFubmVyICAgIFtGQUxTRV0KdmVyYm9zZSAgICAgICAgcHJpbnQgbW9yZSBjb21tZW50YXJ5IGR1cmluZyB0aGUgZ2FtZSAgICAgICAgICAgICAgW1RSVUVdCndoYXRpc19tZW51ICAgIHNob3cgbWVudSB3aGVuIGdldHRpbmcgYSBtYXAgbG9jYXRpb24gICAgICAgICAgICAgIFtGQUxTRV0Kd2hhdGlzX21vdmVza2lwIHNraXAgc2FtZSBnbHlwaHMgd2hlbiBnZXR0aW5nIGEgbWFwIGxvY2F0aW9uICAgICAgW0ZBTFNFXQoKClRoZXJlIGFyZSBmdXJ0aGVyIGJvb2xlYW4gb3B0aW9ucyBjb250cm9sbGVkIGJ5IGNvbXBpbGF0aW9uIGZsYWdzLgoKQm9vbGVhbiBvcHRpb24gaWYgSU5TVVJBTkNFIHdhcyBzZXQgYXQgY29tcGlsZSB0aW1lOgpjaGVja3BvaW50ICAgICBzYXZlIGdhbWUgc3RhdGUgYWZ0ZXIgZWFjaCBsZXZlbCBjaGFuZ2UsIGZvciAgICAgICBbVFJVRV0KICAgICAgICAgICAgICAgcG9zc2libGUgcmVjb3ZlcnkgYWZ0ZXIgcHJvZ3JhbSBjcmFzaAoKQm9vbGVhbiBvcHRpb24gaWYgTkVXUyB3YXMgc2V0IGF0IGNvbXBpbGUgdGltZToKbmV3cyAgICAgICAgICAgcHJpbnQgYW55IG5ld3MgZnJvbSBnYW1lIGFkbWluaXN0cmF0b3Igb24gc3RhcnR1cCAgW1RSVUVdCgpCb29sZWFuIG9wdGlvbiBpZiBTQ09SRV9PTl9CT1RMIHdhcyBzZXQgYXQgY29tcGlsZSB0aW1lOgpzaG93c2NvcmUgICAgICBkaXNwbGF5IHlvdXIgYXBwcm94aW1hdGUgYWNjdW11bGF0ZWQgc2NvcmUgICAgICAgICBbRkFMU0VdCgpCb29sZWFuIG9wdGlvbnMgaWYgVEVYVENPTE9SIHdhcyBzZXQgYXQgY29tcGlsZSB0aW1lOgpjb2xvciAgICAgICAgICB1c2UgZGlmZmVyZW50IGNvbG9ycyBmb3Igb2JqZWN0cyBvbiBzY3JlZW4gW1RSVUUgZm9yIG1pY3Jvc10KaGlsaXRlX3BldCAgICAgZGlzcGxheSBwZXRzIGluIGEgaGlnaGxpZ2h0ZWQgbWFubmVyICAgICAgICAgICAgICAgW0ZBTFNFXQpoaWxpdGVfcGlsZSAgICBkaXNwbGF5IGl0ZW0gcGlsZXMgaW4gYSBoaWdobGlnaHRlZCBtYW5uZXIgICAgICAgICBbRkFMU0VdCgpCb29sZWFuIG9wdGlvbiBpZiBUSU1FRF9ERUxBWSB3YXMgc2V0IGF0IGNvbXBpbGUgdGltZSAodHR5IGludGVyZmFjZSBvbmx5KToKdGltZWRfZGVsYXkgICAgb24gdW5peCBhbmQgVk1TLCB1c2UgYSB0aW1lciBpbnN0ZWFkIG9mIHNlbmRpbmcgICAgW1RSVUVdCiAgICAgICAgICAgICAgIGV4dHJhIHNjcmVlbiBvdXRwdXQgd2hlbiBhdHRlbXB0aW5nIHRvIHBhdXNlIGZvcgogICAgICAgICAgICAgICBkaXNwbGF5IGVmZmVjdC4gIG9uIE1TRE9TIHdpdGhvdXQgdGhlIHRlcm1jYXAKICAgICAgICAgICAgICAgbGliLCB3aGV0aGVyIG9yIG5vdCB0byBwYXVzZSBmb3IgdmlzdWFsIGVmZmVjdC4KCkJvb2xlYW4gb3B0aW9uIGZvciBBbWlnYSwgb3IgZm9yIG90aGVycyBpZiBBTFRNRVRBIHdhcyBzZXQgYXQgY29tcGlsZSB0aW1lOgphbHRtZXRhICAgICAgICBGb3IgQW1pZ2EsIHRyZWF0IEFsdCtrZXkgYXMgTWV0YStrZXkuICAgICAgICAgICAgICBbVFJVRV0KYWx0bWV0YSAgICAgICAgRm9yIHVuaXggYW5kIFZNUywgdHJlYXQgdHdvIGNoYXJhY3RlciBzZXF1ZW5jZQogICAgICAgICAgICAgICAiRVNDIGMiIGFzIE0tYyAoTWV0YStjLCA4dGggYml0IHNldCkgd2hlbiBuZXRoYWNrICBbRkFMU0VdCiAgICAgICAgICAgICAgIG9idGFpbnMgYSBjb21tYW5kIGZyb20gcGxheWVyJ3Mga2V5Ym9hcmQuCgpCb29sZWFuIG9wdGlvbiBpZiBVU0VfVElMRVMgd2FzIHNldCBhdCBjb21waWxlIHRpbWUgKE1TRE9TIHByb3RlY3RlZCBtb2RlKToKcHJlbG9hZF90aWxlcyAgY29udHJvbCB3aGV0aGVyIHRpbGVzIGdldCBwcmUtbG9hZGVkIGludG8gUkFNIGF0ICAgW1RSVUVdCiAgICAgICAgICAgICAgIHRoZSBzdGFydCBvZiB0aGUgZ2FtZS4gIERvaW5nIHNvIGVuaGFuY2VzIHBlcmZvcm1hbmNlCiAgICAgICAgICAgICAgIG9mIHRoZSB0aWxlIGdyYXBoaWNzLCBidXQgdXNlcyBtb3JlIG1lbW9yeS4KCkJvb2xlYW4gb3B0aW9uIGlmIFRUWV9USUxFU19FU0NDT0RFUyB3YXMgc2V0IGF0IGNvbXBpbGUgdGltZSAodHR5IG9ubHkpOgp2dF90aWxlZGF0YSAgICBpbnNlcnQgZXh0cmEgZGF0YSBlc2NhcGUgY29kZSBtYXJrZXJzIGludG8gb3V0cHV0ICBbRkFMU0VdCgpCb29sZWFuIG9wdGlvbiBpZiBUVFlfU09VTkRfRVNDQ09ERVMgd2FzIHNldCBhdCBjb21waWxlIHRpbWUgKHR0eSBvbmx5KToKdnRfc291bmRkYXRhICAgaW5zZXJ0IHNvdW5kIGRhdGEgZXNjYXBlIGNvZGUgbWFya2VycyBpbnRvIG91dHB1dCAgW0ZBTFNFXQoKQW55IEJvb2xlYW4gb3B0aW9uIGNhbiBiZSBuZWdhdGVkIGJ5IHByZWZpeGluZyBpdCB3aXRoIGEgJyEnIG9yICdubycuCgoKQ29tcG91bmQgb3B0aW9ucyBhcmUgd3JpdHRlbiBhcyBvcHRpb25fbmFtZTpvcHRpb25fdmFsdWUuCgpDb21wb3VuZCBvcHRpb25zIHdoaWNoIGNhbiBiZSBzZXQgZHVyaW5nIHRoZSBnYW1lIGFyZToKCmJvdWxkZXIgICAgICAgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgYm91bGRlciBzeW1ib2wgICAgICAgICAgICAgICAgICAgICAgIFtgXQpkaXNjbG9zZSAgICAgIHRoZSB0eXBlcyBvZiBpbmZvcm1hdGlvbiB5b3Ugd2FudCAgICAgICAgIFtuaSBuYSBudiBuZyBuYyBub10KICAgICAgICAgICAgICBvZmZlcmVkIGF0IHRoZSBlbmQgb2YgdGhlIGdhbWUKICAgICAgICAgICAgICAoc3BhY2Ugc2VwYXJhdGVkIGxpc3Qgb2YgdHdvLWNoYXJhY3RlciB2YWx1ZXM7CiAgICAgICAgICAgICAgcHJlZml4OiAnKycgYWx3YXlzIGRpc2Nsb3NlLCAnLScgbmV2ZXIgZGlzY2xvc2UsCiAgICAgICAgICAgICAgJ24nIHByb21wdCB3aXRoIGRlZmF1bHQgIm5vIiwgJ3knIHByb21wdCB3aXRoIGRlZmF1bHQgInllcyIsCiAgICAgICAgICAgICAgJ2EnIHByb21wdCB0byBzZWxlY3Qgc29ydGluZyBvcmRlciAoZm9yIHN1ZmZpeCAndicgb25seSk7CiAgICAgICAgICAgICAgc3VmZml4OiAnaScgaW52ZW50b3J5LCAnYScgYXR0cmlidXRlcywgJ3YnIHZhbnF1aXNoZWQKICAgICAgICAgICAgICBtb25zdGVycywgJ2cnIGdlbm9jaWRlZCBhbmQgZXh0aW5jdCBtb25zdGVycywgJ2MnIGNvbmR1Y3QsCiAgICAgICAgICAgICAgJ28nIGR1bmdlb24gb3ZlcnZpZXcpCmZydWl0ICAgICAgICAgdGhlIG5hbWUgb2YgYSBmcnVpdCB5b3UgZW5qb3kgZWF0aW5nICAgICAgICAgICAgIFtzbGltZSBtb2xkXQogICAgICAgICAgICAgIChiYXNpY2FsbHkgYSB3aGltc3kgd2hpY2ggTmV0SGFjayB1c2VzIGZyb20gdGltZSB0byB0aW1lKS4KbWVudXN0eWxlICAgICB1c2VyIGludGVyZmFjZSBmb3Igc2VsZWN0aW9uIG9mIG11bHRpcGxlIG9iamVjdHM6ICAgICAgW0Z1bGxdCiAgICAgICAgICAgICAgVHJhZGl0aW9uYWwgLS0gcHJvbXB0IGZvciBjbGFzc2VzIG9mIGludGVyZXN0LCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbXB0IGl0ZW0tYnktaXRlbSBmb3IgdGhvc2UgY2xhc3NlczsKICAgICAgICAgICAgICBDb21iaW5hdGlvbiAtLSBwcm9tcHQgZm9yIGNsYXNzZXMgb2YgaW50ZXJlc3QsIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2UgYSBtZW51IGZvciBjaG9vc2luZyBpdGVtczsKICAgICAgICAgICAgICBGdWxsICAgICAgICAtLSBtZW51IGZvciBjbGFzc2VzIG9mIGludGVyZXN0LCB0aGVuIGl0ZW0gbWVudTsKICAgICAgICAgICAgICBQYXJ0aWFsICAgICAtLSBza2lwIGNsYXNzIGZpbHRlcmluZywgdXNlIG1lbnUgb2YgYWxsIGl0ZW1zOwogICAgICAgICAgICAgIG9ubHkgdGhlIGZpcnN0IGxldHRlciAoJ1QnLCdDJywnRicsJ1AnKSBtYXR0ZXJzCiAgICAgICAgICAgICAgKFdpdGggVHJhZGl0aW9uYWwsIG1hbnkgYWN0aW9ucyBhbGxvdyBwc2V1ZG8tY2xhc3MgJ20nIHRvCiAgICAgICAgICAgICAgcmVxdWVzdCBhIG1lbnUgZm9yIGNob29zaW5nIGl0ZW1zOiBvbmUtc2hvdCBDb21iaW5hdGlvbi4pCm51bWJlcl9wYWQgICAgYWxwaGFiZXRpYyB2ZXJzdXMgbnVtZXJpYyBjb250cm9sIG92ZXIgbW92ZW1lbnQ6ICAgICAgICAgIFswXQogICAgICAgICAgICAgICAwIC0tIHRyYWRpdGlvbmFsIGhqa2wgKyB5dWJuIG1vdmVtZW50IChkZWZhdWx0KTsKICAgICAgICAgICAgICAgMSAtLSBkaWdpdHMgY29udHJvbCBtb3ZlbWVudCwgZm9yIHVzZSB3aXRoIG51bWVyaWMga2V5cGFkOwogICAgICAgICAgICAgICAyIC0tIHNhbWUgYXMgMSwgYnV0ICc1JyB3b3JrcyBhcyAnZycgcHJlZml4IHJhdGhlciB0aGFuICdHJzsKICAgICAgICAgICAgICAgMyAtLSBudW1lcmljIGZvciBwaG9uZSBrZXlwYWQgKDEsMiwzIGFib3ZlLCA3LDgsOSBiZWxvdyk7CiAgICAgICAgICAgICAgIDQgLS0gcGhvbmUga2V5cGFkICgzKSBjb21iaW5lZCB3aXRoICc1JyBwcmVmZXJlbmNlICgyKTsKICAgICAgICAgICAgICAtMSAtLSBhbHBoYWJldGljIG1vdmVtZW50IGJ1dCAneicgc3dhcHBlZCB3aXRoICd5Jy4KICAgICAgICAgICAgICBTZXR0aW5nIG51bWJlcl9wYWQgKHRvIGEgcG9zaXRpdmUgdmFsdWUpIGFmZmVjdHMgaG93IGFsbAogICAgICAgICAgICAgIGRpZ2l0IGtleXMgYXJlIGhhbmRsZWQsIG5vdCBqdXN0IHRob3NlIG9uIG51bWVyaWMga2V5cGFkLgpwYWNrb3JkZXIgICAgIGEgbGlzdCBvZiBkZWZhdWx0IHN5bWJvbHMgZm9yIGtpbmRzIG9mICAgICAgIFsiKVslPyshPS8oKmAwX10KICAgICAgICAgICAgICBvYmplY3RzIHRoYXQgZ2l2ZXMgdGhlIG9yZGVyIGluIHdoaWNoIHlvdXIgaW52ZW50b3J5IChhbmQKICAgICAgICAgICAgICBzb21lIG90aGVyIHRoaW5ncykgZ2V0cyBzaG93biBpZiB0aGUgJ3NvcnRwYWNrJyBvcHRpb24gaXMgb24KICAgICAgICAgICAgICAoSWYgeW91IHNwZWNpZnkgb25seSBzb21lIGtpbmRzIG9mIGl0ZW1zLCB0aGUgb3RoZXJzIGZyb20gdGhlCiAgICAgICAgICAgICAgZGVmYXVsdCBvcmRlciB3aWxsIGJlIGFwcGVuZGVkIHRvIHRoZSBlbmQuKQpwYXJhbm9pZF9jb25maXJtYXRpb24gIHNwYWNlIHNlcGFyYXRlZCBsaXN0ICAgIFtwYXJhbm9pZF9jb25maXJtYXRpb246cHJheV0KICAgICAgICAgICAgICBvZiBzaXR1YXRpb25zIHdoZXJlIGFsdGVybmF0ZSBwcm9tcHRpbmcgaXMgZGVzaXJlZAogICAgICAgICAgICAgIENvbmZpcm0gLS0gd2hlbiByZXF1aXJpbmcgInllcyIsIGFsc28gcmVxdWlyZSAibm8iIHRvIHJlamVjdAogICAgICAgICAgICAgIHF1aXQgICAgLS0geWVzIHZzIHkgdG8gY29uZmlybSBxdWl0dGluZyBvciB0byBlbnRlciBleHBsb3JlIG1vZGUKICAgICAgICAgICAgICBkaWUgICAgIC0tIHllcyB2cyB5IHRvIGNvbmZpcm0gZHlpbmcgKGZvciBleHBsb3JlIG9yIGRlYnVnIG1vZGUpCiAgICAgICAgICAgICAgYm9uZXMgICAtLSB5ZXMgdnMgeSB0byBjb25maXJtIHNhdmluZyBib25lcyBkYXRhIGluIGRlYnVnIG1vZGUKICAgICAgICAgICAgICBhdHRhY2sgIC0tIHllcyB2cyB5IHRvIGNvbmZpcm0gYXR0YWNraW5nIGEgcGVhY2VmdWwgbW9uc3RlcgogICAgICAgICAgICAgIHdhbmQtYnJlYWsgIC0tIHllcyB2cyB5IHRvIGNvbmZpcm0gYnJlYWtpbmcgYSB3YW5kCiAgICAgICAgICAgICAgZWF0aW5nICAtLSB5ZXMgdnMgeSB0byBjb25maXJtIHdoZXRoZXIgdG8gY29udGludWUgZWF0aW5nCiAgICAgICAgICAgICAgV2VyZS1jaGFuZ2UgLS0geWVzIHZzIHkgdG8gY29uZmlybSBjaGFuZ2luZyBmb3JtIGR1ZSB0bwogICAgICAgICAgICAgICAgICAgICAgbHljYW50aHJvcHkgd2hlbiBoZXJvIGhhcyBwb2x5bW9ycGggY29udHJvbDsKICAgICAgICAgICAgICBwcmF5ICAgIC0tIHkgdG8gY29uZmlybSBhbiBhdHRlbXB0IHRvIHByYXk7IG9uIGJ5IGRlZmF1bHQKICAgICAgICAgICAgICBSZW1vdmUgIC0tIGFsd2F5cyBwaWNrIGZyb20gaW52ZW50b3J5IGZvciAnUicgYW5kICdUJyBldmVuIHdoZW4KICAgICAgICAgICAgICAgICAgICAgIHdlYXJpbmcganVzdCBvbmUgYXBwbGljYWJsZSBpdGVtIHRvIHJlbW92ZSBvciB0YWtlIG9mZgpwaWNrdXBfYnVyZGVuIHdoZW4geW91IHBpY2sgdXAgYW4gaXRlbSB0aGF0IGV4Y2VlZHMgdGhpcyBlbmN1bWJyYW5jZSAgICBbU10KICAgICAgICAgICAgICBsZXZlbCAoVW5lbmN1bWJlcmVkLCBCdXJkZW5lZCwgc3RyZVNzZWQsIHN0cmFpTmVkLCBvdmVyVGF4ZWQsCiAgICAgICAgICAgICAgb3Igb3ZlckxvYWRlZCksIHlvdSB3aWxsIGJlIGFza2VkIGlmIHlvdSB3YW50IHRvIGNvbnRpbnVlLgpwaWNrdXBfdHlwZXMgIGEgbGlzdCBvZiBkZWZhdWx0IHN5bWJvbHMgZm9yIGtpbmRzIG9mIG9iamVjdHMgdG8gICAgICAgICAgW10KICAgICAgICAgICAgICBhdXRvcGlja3VwIHdoZW4gdGhhdCBvcHRpb24gaXMgb247IGVtcHR5IGxpc3QgbWVhbnMgImFsbCIKcGlsZV9saW1pdCAgICBmb3IgZmVlZGJhY2sgd2hlbiB3YWxraW5nIGFjcm9zcyBmbG9vciBvYmplY3RzLCAgICAgICAgICAgWzVdCiAgICAgICAgICAgICAgdGhyZXNob2xkIGF0IHdoaWNoICJ0aGVyZSBhcmUgb2JqZWN0cyBoZXJlIiBpcyBkaXNwbGF5ZWQKICAgICAgICAgICAgICBpbnN0ZWFkIG9mIGxpc3RpbmcgdGhlbS4gICgwIG1lYW5zICJhbHdheXMgbGlzdCBvYmplY3RzLiIpCnJ1bm1vZGUgICAgICAgY29udHJvbHMgaG93IG9mdGVuIHRoZSBtYXAgd2luZG93IGlzIHVwZGF0ZWQgZm9yICAgICAgICBbcnVuXQogICAgICAgICAgICAgIG11bHRpLXN0ZXAgbW92ZW1lbnQgKHZhcmlvdXMgcnVubmluZyBtb2RlcyBvciB0cmF2ZWwgY29tbWFuZCk6CiAgICAgICAgICAgICAgdGVsZXBvcnQgLS0gZG9uJ3QgdXBkYXRlIG1hcCB1bnRpbCBtb3ZlbWVudCBzdG9wczsKICAgICAgICAgICAgICBydW4gICAgICAtLSBwZXJpb2RpY2FsbHkgdXBkYXRlIG1hcCAoaW50ZXJ2YWwgaXMgc2V2ZW4gc3RlcHMpOwogICAgICAgICAgICAgIHdhbGsgICAgIC0tIHVwZGF0ZSBtYXAgYWZ0ZXIgZXZlcnkgc3RlcDsKICAgICAgICAgICAgICBjcmF3bCAgICAtLSBsaWtlIHdhbGssIGJ1dCBkZWxheSBhZnRlciBtYWtpbmcgZWFjaCBzdGVwLgogICAgICAgICAgICAgIChUaGlzIG9ubHkgYWZmZWN0cyBzY3JlZW4gZGlzcGxheSwgbm90IGFjdHVhbCBtb3ZlbWVudC4pCnNjb3JlcyAgICAgICAgdGhlIHBhcnRzIG9mIHRoZSBzY29yZSBsaXN0IHlvdSB3aXNoICAgIFshb3duLzMgdG9wLzIgYXJvdW5kXQogICAgICAgICAgICAgIHRvIHNlZSB3aGVuIHRoZSBnYW1lIGVuZHMuICBZb3UgY2hvb3NlIGEgY29tYmluYXRpb24gb2YKICAgICAgICAgICAgICB0b3Agc2NvcmVzLCBzY29yZXMgYXJvdW5kIHRoZSB0b3Agc2NvcmVzLCBhbmQgYWxsIG9mIHlvdXIKICAgICAgICAgICAgICBvd24gc2NvcmVzLgpzdXBwcmVzc19hbGVydCBkaXNhYmxlIHZhcmlvdXMgdmVyc2lvbi1zcGVjaWZpYyB3YXJuaW5ncyBhYm91dCBjaGFuZ2VzICAgW10KICAgICAgICAgICAgICBpbiBnYW1lIHBsYXkgb3IgdGhlIHVzZXIgaW50ZXJmYWNlLCBzdWNoIGFzIG5vdGlmaWNhdGlvbiBnaXZlbgogICAgICAgICAgICAgIGZvciB0aGUgJ1EnIGNvbW1hbmQgdGhhdCBxdWl0dGluZyBpcyBub3cgZG9uZSB2aWEgI3F1aXQKICAgICAgICAgICAgICAoZS5nLiwgdXNlIHN1cHByZXNzX2FsZXJ0OjMuMy4xIHRvIHN0b3AgdGhhdCBhbmQgYW55IG90aGVyCiAgICAgICAgICAgICAgbm90aWZpY2F0aW9ucyBhZGRlZCBpbiB0aGF0IHZlcnNpb24gb3IgZWFybGllcikKd2hhdGlzX2Nvb3JkICBjb250cm9scyB3aGV0aGVyIHRvIGluY2x1ZGUgbWFwIGNvb3JkaW5hdGVzIHdoZW4gICAgICAgICAgW25dCiAgICAgICAgICAgICAgYXV0b2Rlc2NyaWJlIGlzIGFjdGl2ZSBmb3IgdGhlICcvJyBhbmQgJzsnIGNvbW1hbmRzLgogICAgICAgICAgICAgIFZhbHVlIGlzIHRoZSBmaXJzdCBsZXR0ZXIgb2Ygb25lIG9mCiAgICAgICAgICAgICAgY29tcGFzcyAgICAgIC0tIChyZWxhdGl2ZSB0byB5b3U7ICdlYXN0JyBvciAnM3MnIG9yICcybiw0dycpCiAgICAgICAgICAgICAgZnVsbCBjb21wYXNzIC0tICgnZWFzdCcgb3IgJzNzb3V0aCcgb3IgJzJub3J0aCw0d2VzdCcpCiAgICAgICAgICAgICAgbWFwICAgICAgICAgIC0tIDx4LHk+ICAgICAgICAobWFwIGNvbHVtbiB4PTAgaXMgbm90IHVzZWQpCiAgICAgICAgICAgICAgc2NyZWVuICAgICAgIC0tIFtyb3csY29sdW1uXSAocm93IGlzIG9mZnNldCB0byBtYXRjaCB0dHkgdXNhZ2UpCiAgICAgICAgICAgICAgbm9uZSAgICAgICAgIC0tIG5vIGNvb3JkaW5hdGVzIHNob3duLgp3aGF0aXNfZmlsdGVyIGNvbnRyb2xzIGhvdyB0byBmaWx0ZXIgZWxpZ2libGUgbWFwIGNvb3JkaW5hdGVzIHdoZW4gICAgICBbbl0KICAgICAgICAgICAgICBnZXR0aW5nIGEgbWFwIGxvY2F0aW9uIGZvciBlZy4gdGhlIHRyYXZlbCBjb21tYW5kLgogICAgICAgICAgICAgIFZhbHVlIGlzIHRoZSBvbmUgb2YKICAgICAgICAgICAgICBuIC0gbm8gZmlsdGVyaW5nCiAgICAgICAgICAgICAgdiAtIGxvY2F0aW9ucyBpbiB2aWV3IG9ubHkKICAgICAgICAgICAgICBhIC0gbG9jYXRpb25zIGluIHNhbWUgYXJlYSAocm9vbSwgY29ycmlkb3IsIGV0YykKCkNvbXBvdW5kIG9wdGlvbnMgd2hpY2ggbWF5IGJlIHNldCBvbmx5IG9uIHN0YXJ0dXAgYXJlOgoKYWxpZ24gICAgICBZb3VyIHN0YXJ0aW5nIGFsaWdubWVudCAobGF3ZnVsLCBuZXV0cmFsLCBjaGFvdGljLCAgICAgIFtyYW5kb21dCiAgICAgICAgICAgb3IgcmFuZG9tKS4gIE1hbnkgcm9sZXMgcmVzdHJpY3QgdGhlIGNob2ljZSB0byBhIHN1YnNldC4KICAgICAgICAgICBZb3UgbWF5IHNwZWNpZnkganVzdCB0aGUgZmlyc3QgbGV0dGVyLgpjYXRuYW1lICAgIHRoZSBuYW1lIG9mIHlvdXIgZmlyc3QgY2F0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbbm9uZV0KZG9nbmFtZSAgICB0aGUgbmFtZSBvZiB5b3VyIGZpcnN0IGRvZyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW25vbmVdCiAgICAgICAgICAgU2V2ZXJhbCByb2xlcyB3aG8gc3RhcnQgd2l0aCBhIGRvZyBoYXZlIG9uZSB3aG9zZSBuYW1lIGlzCiAgICAgICAgICAgcHJlLXNldCAoZm9yIGV4YW1wbGUsICJIYWNoaSIgZm9yIFNhbXVyYWkpLCBidXQgdGhhdCBuYW1lCiAgICAgICAgICAgd2lsbCBiZSBvdmVycmlkZGVuIGlmIHlvdSBzcGVjaWZ5IGRvZ25hbWUuCmdlbmRlciAgICAgWW91ciBzdGFydGluZyBnZW5kZXIgKG1hbGUsIGZlbWFsZSwgb3IgcmFuZG9tKS4gICAgICAgICBbcmFuZG9tXQogICAgICAgICAgIFlvdSBtYXkgc3BlY2lmeSBqdXN0IHRoZSBmaXJzdCBsZXR0ZXIuICBBbHRob3VnaCB5b3UgY2FuCiAgICAgICAgICAgc3RpbGwgZGVub3RlIHlvdXIgZ2VuZGVyIHVzaW5nIHRoZSBvbGQgIm1hbGUiIGFuZCAiZmVtYWxlIgogICAgICAgICAgIGJvb2xlYW4gb3B0aW9ucywgdGhlICJnZW5kZXIiIG9wdGlvbiB3aWxsIHRha2UgcHJlY2VkZW5jZS4KaG9yc2VuYW1lICB0aGUgbmFtZSBvZiB5b3VyIGZpcnN0IGhvcnNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW25vbmVdCm1lbnVfKiAgICAgc3BlY2lmeSBzaW5nbGUgY2hhcmFjdGVyIGFjY2VsZXJhdG9ycyBmb3IgbWVudSBjb21tYW5kcy4KICAgICAgICAgICBIZXJlIGlzIGEgbGlzdCBvZiBhbGwgY29tbWFuZHMgd2l0aCB0aGVpciBkZWZhdWx0IGtleXN0cm9rZQogICAgICAgICAgIGZvbGxvd2VkIGJ5IGEgbGlzdCBvZiB3aW5kb3ctcG9ydHMgdGhhdCBpbXBsZW1lbnQgdGhlbToKICAgICAgICAgICAneCcgaXMgWDExLCAndCcgaXMgdHR5LCAnZycgaXMgR2VtLCAnYScgaXMgQW1pZ2EuCiAgICAgICAgICAgbWVudV9kZXNlbGVjdF9hbGwgIGRlc2VsZWN0IGFsbCBpdGVtcyBpbiBhIG1lbnUgICAgICAgICBbLV0oeHRnYSkKICAgICAgICAgICBtZW51X2Rlc2VsZWN0X3BhZ2UgZGVzZWxlY3QgYWxsIGl0ZW1zIG9uIHRoaXMgbWVudSBwYWdlIFtcXSh0Z2EpCiAgICAgICAgICAgbWVudV9maXJzdF9wYWdlICAgIGp1bXAgdG8gdGhlIGZpcnN0IHBhZ2UgaW4gYSBtZW51ICAgICBbXl0odGdhKQogICAgICAgICAgIG1lbnVfaW52ZXJ0X2FsbCAgICBpbnZlcnQgYWxsIGl0ZW1zIGluIGEgbWVudSAgICAgICAgICAgW0BdKHh0Z2EpCiAgICAgICAgICAgbWVudV9pbnZlcnRfcGFnZSAgIGludmVydCBhbGwgaXRlbXMgb24gdGhpcyBtZW51IHBhZ2UgICBbfl0odGdhKQogICAgICAgICAgIG1lbnVfbGFzdF9wYWdlICAgICBqdW1wIHRvIHRoZSBsYXN0IHBhZ2UgaW4gYSBtZW51ICAgICAgW3xdKHRnYSkKICAgICAgICAgICBtZW51X25leHRfcGFnZSAgICAgZ290byB0aGUgbmV4dCBtZW51IHBhZ2UgICAgICAgICAgICAgIFs+XSh0Z2EpCiAgICAgICAgICAgbWVudV9wcmV2aW91c19wYWdlIGdvdG8gdGhlIHByZXZpb3VzIG1lbnUgcGFnZSAgICAgICAgICBbPF0odGdhKQogICAgICAgICAgIG1lbnVfc2VhcmNoICAgICAgICBzZWFyY2ggZm9yIGEgbWVudSBpdGVtICAgICAgICAgICAgICAgWzpdKHh0Z2EpCiAgICAgICAgICAgbWVudV9zZWxlY3RfYWxsICAgIHNlbGVjdCBhbGwgaXRlbXMgaW4gYSBtZW51ICAgICAgICAgICBbLl0oeHRnYSkKICAgICAgICAgICBtZW51X3NlbGVjdF9wYWdlICAgc2VsZWN0IGFsbCBpdGVtcyBvbiB0aGlzIG1lbnUgcGFnZSAgIFssXSh0Z2EpCm1zZ2hpc3RvcnkgbnVtYmVyIG9mIHRvcCBsaW5lIG1lc3NhZ2VzIHRvIHNhdmUgICAgICAgICAgICAgICAgICAgICAgICAgWzIwXQpuYW1lICAgICAgIHRoZSBuYW1lIG9mIHlvdXIgY2hhcmFjdGVyICAgICAgW2RlZmF1bHRzIHRvIHVzZXJuYW1lIG9uIG11bHRpLQogICAgICAgICAgIHVzZXIgc3lzdGVtcywgYXNrcyAid2hvIGFyZSB5b3U/IiBvbiBzaW5nbGUtdXNlciBzeXN0ZW1zIG9yIGlmCiAgICAgICAgICAgdGhlIHVzZXJuYW1lIGlzIGNsYXNzaWZpZWQgYXMgZ2VuZXJpYyBsaWtlICJnYW1lcyJdCiAgICAgICAgICAgTVMgV2luZG93cyBpcyB0cmVhdGVkIGFzIHNpbmdsZS11c2VyIGV2ZW4gdGhvdWdoIGl0IHN1cHBvcnRzCiAgICAgICAgICAgdXNlcm5hbWVzLiAgSWYgY2hhcmFjdGVyIG5hbWUgaXMgc3BlY2lmaWVkIG9uIHRoZSBjb21tYW5kCiAgICAgICAgICAgbGluZSAodHlwaWNhbGx5IHZpYSAnbmV0aGFjayAtdSBteW5hbWUnIGRlcGVuZGluZyB1cG9uIHR5cGUKICAgICAgICAgICBvZiBzeXN0ZW0gYW5kIG1ldGhvZCBvZiBhY2Nlc3MgdG8gaXQpLCB0aGF0IG5hbWUgb3ZlcnJpZGVzCiAgICAgICAgICAgJ25hbWUnIGZyb20geW91ciBvcHRpb25zLgpwZXR0eXBlICAgIHlvdXIgcHJlZmVycmVkIHR5cGUgb2YgcGV0IChjYXQsIGRvZywgaG9yc2UsIHJhbmRvbSwgICAgW3JhbmRvbV0KICAgICAgICAgICBvciBub25lKSwgaWYgeW91ciByb2xlIGFsbG93cyBtb3JlIHRoYW4gb25lIHR5cGUgKG9yIGlmIHlvdQogICAgICAgICAgIHdhbnQgdG8gYXZvaWQgYSBzdGFydGluZyBwZXQpLiAgTW9zdCByb2xlcyBhbGxvdyBkb2cgb3IgY2F0CiAgICAgICAgICAgYnV0IG5vdCBob3JzZS4gIEZvciByb2xlcyB3aGljaCBmb3JjZSBhIHBhcnRpY3VsYXIgdHlwZSwKICAgICAgICAgICBwZXR0eXBlIGlzIGlnbm9yZWQgdW5sZXNzIGl0IHNwZWNpZmllcyAnbm9uZScuCnBsYXltb2RlICAgbm9ybWFsIHBsYXkgb3Igbm9uLXNjb3JpbmcgZXhwbG9yZSBtb2RlIG9yIGRlYnVnIG1vZGUgICBbbm9ybWFsXQpyYWNlICAgICAgIFlvdXIgc3RhcnRpbmcgcmFjZSAoZS5nLiwgcmFjZTpIdW1hbiwgcmFjZTpFbGYpLiAgICAgICAgW3JhbmRvbV0KICAgICAgICAgICBNb3N0IHJvbGVzIHJlc3RyaWN0IHJhY2UgY2hvaWNlIHRvIGEgc3Vic2V0Lgpyb2xlICAgICAgIFlvdXIgc3RhcnRpbmcgcm9sZSAoZS5nLiwgcm9sZTpCYXJiYXJpYW4sIHJvbGU6VmFsaykuICAgW3JhbmRvbV0KICAgICAgICAgICBBbHRob3VnaCB5b3UgY2FuIHNwZWNpZnkganVzdCB0aGUgZmlyc3QgbGV0dGVyKHMpLCBpdCB3aWxsCiAgICAgICAgICAgY2hvb3NlIG9ubHkgdGhlIGZpcnN0IHJvbGUgaXQgZmluZHMgdGhhdCBtYXRjaGVzOyB0aHVzLCBpdAogICAgICAgICAgIGlzIHJlY29tbWVuZGVkIHRoYXQgeW91IHNwZWxsIG91dCBhcyBtdWNoIG9mIHRoZSByb2xlIG5hbWUKICAgICAgICAgICBhcyBwb3NzaWJsZS4gIFlvdSBjYW4gYWxzbyBzdGlsbCBkZW5vdGUgeW91ciByb2xlIGJ5CiAgICAgICAgICAgYXBwZW5kaW5nIGl0IHRvIHRoZSAibmFtZSIgb3B0aW9uIChlLmcuLCBuYW1lOlZpYy1WKSwgYnV0CiAgICAgICAgICAgdGhlICJyb2xlIiBvcHRpb24gd2lsbCB0YWtlIHByZWNlZGVuY2UuCndpbmRvd3R5cGUgd2luZG93aW5nIHN5c3RlbSB0byBiZSB1c2VkICAgIFtkZXBlbmRzIG9uIG9wZXJhdGluZyBzeXN0ZW0gYW5kCiAgICAgICAgICAgY29tcGlsZS10aW1lIHNldHVwXSAgICBpZiBtb3JlIHRoYW4gb25lIGNob2ljZSBpcyBhdmFpbGFibGUuCiAgICAgICAgICAgTW9zdCBpbnN0YW5jZXMgb2YgdGhlIHByb2dyYW0gc3VwcG9ydCBvbmx5IG9uZSB3aW5kb3ctdHlwZTsKICAgICAgICAgICB3aGVuIHRoYXQgaXMgdGhlIGNhc2UsIHlvdSBkb24ndCBuZWVkIHRvIHNwZWNpZnkgYW55dGhpbmcuCiAgICAgICAgICAgVGhlIGxpc3Qgb2Ygc3VwcG9ydGVkIHdpbmRvdy10eXBlcyBpbiB5b3VyIHByb2dyYW0gY2FuIGJlCiAgICAgICAgICAgc2VlbiB3aGlsZSB0aGUgcHJvZ3JhbSBpcyBydW5uaW5nIGJ5IHVzaW5nIHRoZSAjdmVyc2lvbgogICAgICAgICAgIGNvbW1hbmQgb3IgZnJvbSBvdXRzaWRlIHRoZSBwcm9ncmFtIGJ5IGV4YW1pbmluZyB0aGUgdGV4dCBmaWxlCiAgICAgICAgICAgbmFtZWQgJ29wdGlvbnMnIHdoaWNoIGlzIGdlbmVyYXRlZCB3aGVuIGJ1aWxkaW5nIGl0LgoKQ29tcG91bmQgb3B0aW9uIGlmIFRUWV9HUkFQSElDUyB3YXMgc2V0IGF0IGNvbXBpbGUgdGltZToKbXNnX3dpbmRvdyB0aGUgdHlwZSBvZiBtZXNzYWdlIHdpbmRvdyB0byB1c2U6ICAgICAgICAgICAgICAgICAgICAgIFtzaW5nbGVdCiAgICAgICAgICAgc2luZ2xlICAgICAgLS0gT25lIG1lc3NhZ2UgYXQgYSB0aW1lCiAgICAgICAgICAgZnVsbCAgICAgICAgLS0gRnVsbCB3aW5kb3cgd2l0aCBhbGwgc2F2ZWQgdG9wIGxpbmUgbWVzc2FnZXMKICAgICAgICAgICByZXZlcnNlICAgICAtLSBTYW1lIGFzIGZ1bGwsIGJ1dCBtZXNzYWdlcyBwcmludGVkIG1vc3QtcmVjZW50LWZpcnN0CiAgICAgICAgICAgY29tYmluYXRpb24gLS0gVHdvIHNpbmdsZSBtZXNzYWdlcywgdGhlbiBhcyBmdWxsCgoKU29tZSBzYW1wbGUgb3B0aW9ucyBsaXN0cyBhcmU6CiFhdXRvcGlja3VwLCF0b21ic3RvbmUsbmFtZTpHYW5kYWxmLHNjb3Jlczpvd24vMyB0b3AvMiBhcm91bmQKZmVtYWxlLG5vbmV3cyxkb2duYW1lOlJvdmVyLHJlc3Rfb25fc3BhY2UsIXZlcmJvc2UsbWVudXN0eWxlOnRyYWRpdGlvbmFsCkRlYnVnLU1vZGUgUXVpY2sgUmVmZXJlbmNlOgoKXkUgID09ICBkZXRlY3Qgc2VjcmV0IGRvb3JzIGFuZCB0cmFwcwpeRiAgPT0gIG1hcCBsZXZlbDsgcmV2ZWFscyB0cmFwcyBhbmQgc2VjcmV0IGNvcnJpZG9ycyBidXQgbm90IHNlY3JldCBkb29ycwpeRyAgPT0gIGNyZWF0ZSBtb25zdGVyIGJ5IG5hbWUgb3IgY2xhc3MKXkkgID09ICBpZGVudGlmeSBpdGVtcyBpbiBwYWNrCl5UICA9PSAgZG8gaW50cmEtbGV2ZWwgdGVsZXBvcnQKXlYgID09ICBkbyB0cmFucy1sZXZlbCB0ZWxlcG9ydDsgJz8nIHlpZWxkcyBtZW51IG9mIHNwZWNpYWwgZGVzdGluYXRpb25zCl5XICA9PSAgbWFrZSBhIHdpc2ggZm9yIGFuIGl0ZW0gb3IgYSB0cmFwIG9yIGEgbGltaXRlZCBzdWJzZXQgb2YgdGVycmFpbgpeWCAgPT0gIHNob3cgc3RhdHVzLCBhdHRyaWJ1dGVzLCBhbmQgY2hhcmFjdGVyaXN0aWNzIChleHRlbmRlZCBlbmxpZ2h0ZW5tZW50KQoKI2xldmVsY2hhbmdlICAgID09IHNldCBoZXJvJ3MgZXhwZXJpZW5jZSBsZXZlbAojbGlnaHRzb3VyY2VzICAgPT0gc2hvdyBtb2JpbGUgbGlnaHQgc291cmNlcwojcGFuaWMgICAgICAgICAgPT0gcGFuaWMgdGVzdCAod2FybmluZzogY3VycmVudCBnYW1lIHdpbGwgYmUgdGVybWluYXRlZCkKI3BvbHlzZWxmICAgICAgID09IHBvbHltb3JwaCBzZWxmCiNzZWVudiAgICAgICAgICA9PSBzaG93IHNlZW4gdmVjdG9ycwojc3RhdHMgICAgICAgICAgPT0gc2hvdyBtZW1vcnkgc3RhdGlzdGljcwojdGVycmFpbiAgICAgICAgPT0gc2hvdyBjdXJyZW50IGxldmVsIChtb3JlIG9wdGlvbnMgdGhhbiBpbiBub3JtYWwgcGxheSkKI3RpbWVvdXQgICAgICAgID09IGxvb2sgYXQgdGltZW91dCBxdWV1ZSBhbmQgaGVybydzIHRpbWVkIGludHJpbnNpY3MKI3ZhbnF1aXNoZWQgICAgID09IGRpc2Nsb3NlIGNvdW50cyBvZiBkZWFkIG1vbnN0ZXJzIHNvcnRlZCBpbiB2YXJpb3VzIHdheXMKI3Zpc2lvbiAgICAgICAgID09IHNob3cgdmlzaW9uIGFycmF5CiN3aXpib3JuICAgICAgICA9PSBzaG93IG1vbnN0ZXIgYmlydGgvZGVhdGgvZ2Vuby9leHRpbmN0IHN0YXRzCiN3aXppbnRyaW5zaWMgICA9PSBzZXQgc2VsZWN0ZWQgaW50cmluc2ljIHRpbWVvdXRzCiN3aXptYWtlbWFwICAgICA9PSByZWNyZWF0ZSB0aGUgY3VycmVudCBkdW5nZW9uIGxldmVsCiN3aXpydW1vcmNoZWNrICA9PSB2YWxpZGF0ZSBydW1vciBpbmRleGluZyBhbmQgc2hvdyBmaXJzdCwgc2Vjb25kLCBhbmQgbGFzdAogICAgICAgICAgICAgICAgICAgcmFuZG9tIGVuZ3JhdmluZ3MsIGVwaXRhcGhzLCBhbmQgaGFsbHVjaW5hdG9yeSBtb25zdGVycwojd2l6c21lbGwgICAgICAgPT0gc21lbGwgYSBtb25zdGVyCiN3aXp3aGVyZSAgICAgICA9PSBzaG93IGR1bmdlb24gcGxhY2VtZW50IG9mIGFsbCBzcGVjaWFsIGxldmVscwojd21vZGUgICAgICAgICAgPT0gc2hvdyB3YWxsIG1vZGVzCgpPcHRpb25zOgptb25wb2x5Y29udHJvbCAgPT0gcHJvbXB0IGZvciBuZXcgZm9ybSB3aGVuZXZlciBhbnkgbW9uc3RlciBjaGFuZ2VzIHNoYXBlCnNhbml0eV9jaGVjayAgICA9PSBldmFsdWF0ZSBtb25zdGVycywgb2JqZWN0cywgYW5kIG1hcCBwcmlvciB0byBlYWNoIHR1cm4Kd2l6d2VpZ2h0ICAgICAgID09IGF1Z21lbnQgb2JqZWN0IGRlc2NyaXB0aW9ucyB3aXRoIHRoZWlyIG9iamVjdHMnIHdlaWdodAoKZHVuZ2VvbiA9IHsKICAgewogICAgICBuYW1lID0gIlRoZSBEdW5nZW9ucyBvZiBEb29tIiwKICAgICAgYm9uZXRhZyA9ICJEIiwKICAgICAgYmFzZSA9IDI1LAogICAgICByYW5nZSA9IDUsCiAgICAgIGFsaWdubWVudCA9ICJ1bmFsaWduZWQiLAogICAgICB0aGVtZXJvb21zID0gInRoZW1lcm1zLmx1YSIsCiAgICAgIGJyYW5jaGVzID0gewogICAgICAgICB7CiAgICAgICAgICAgIG5hbWUgPSAiVGhlIEdub21pc2ggTWluZXMiLAogICAgICAgICAgICBiYXNlID0gMiwKICAgICAgICAgICAgcmFuZ2UgPSAzCiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgbmFtZSA9ICJTb2tvYmFuIiwKICAgICAgICAgICAgY2hhaW5sZXZlbCA9ICJvcmFjbGUiLAogICAgICAgICAgICBiYXNlID0gMSwKICAgICAgICAgICAgZGlyZWN0aW9uID0gInVwIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgIG5hbWUgPSAiVGhlIFF1ZXN0IiwKICAgICAgICAgICAgY2hhaW5sZXZlbCA9ICJvcmFjbGUiLAogICAgICAgICAgICBiYXNlID0gNiwKICAgICAgICAgICAgcmFuZ2UgPSAyLAogICAgICAgICAgICBicmFuY2h0eXBlID0gInBvcnRhbCIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICBuYW1lID0gIkZvcnQgTHVkaW9zIiwKICAgICAgICAgICAgYmFzZSA9IDE4LAogICAgICAgICAgICByYW5nZSA9IDQsCiAgICAgICAgICAgIGJyYW5jaHR5cGUgPSAicG9ydGFsIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgIG5hbWUgPSAiR2VoZW5ub20iLAogICAgICAgICAgICBjaGFpbmxldmVsID0gImNhc3RsZSIsCiAgICAgICAgICAgIGJhc2UgPSAwLAogICAgICAgICAgICBicmFuY2h0eXBlID0gIm5vX2Rvd24iCiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgbmFtZSA9ICJUaGUgRWxlbWVudGFsIFBsYW5lcyIsCiAgICAgICAgICAgIGJhc2UgPSAxLAogICAgICAgICAgICBicmFuY2h0eXBlID0gIm5vX2Rvd24iLAogICAgICAgICAgICBkaXJlY3Rpb24gPSAidXAiCiAgICAgICAgIH0KICAgICAgfSwKICAgICAgbGV2ZWxzID0gewogICAgICAgICB7CiAgICAgICAgICAgIG5hbWUgPSAicm9ndWUiLAogICAgICAgICAgICBib25ldGFnID0gIlIiLAogICAgICAgICAgICBiYXNlID0gMTUsCiAgICAgICAgICAgIHJhbmdlID0gNCwKICAgICAgICAgICAgZmxhZ3MgPSAicm9ndWVsaWtlIiwKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICBuYW1lID0gIm9yYWNsZSIsCiAgICAgICAgICAgIGJvbmV0YWcgPSAiTyIsCiAgICAgICAgICAgIGJhc2UgPSA1LAogICAgICAgICAgICByYW5nZSA9IDUsCiAgICAgICAgICAgIGFsaWdubWVudCA9ICJuZXV0cmFsIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgIG5hbWUgPSAiYmlncm0iLAogICAgICAgICAgICBib25ldGFnID0gIkIiLAogICAgICAgICAgICBiYXNlID0gMTAsCiAgICAgICAgICAgIHJhbmdlID0gMywKICAgICAgICAgICAgY2hhbmNlID0gNDAsCiAgICAgICAgICAgIG5sZXZlbHMgPSAxMAogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgIG5hbWUgPSAibWVkdXNhIiwKICAgICAgICAgICAgYmFzZSA9IC01LAogICAgICAgICAgICByYW5nZSA9IDQsCiAgICAgICAgICAgIG5sZXZlbHMgPSA0LAogICAgICAgICAgICBhbGlnbm1lbnQgPSAiY2hhb3RpYyIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICBuYW1lID0gImNhc3RsZSIsCiAgICAgICAgICAgIGJhc2UgPSAtMQogICAgICAgICB9CiAgICAgIH0KICAgfSwKICAgewogICAgICBuYW1lID0gIkdlaGVubm9tIiwKICAgICAgYm9uZXRhZyA9ICJHIiwKICAgICAgYmFzZSA9IDIwLAogICAgICByYW5nZSA9IDUsCiAgICAgIGZsYWdzID0geyAibWF6ZWxpa2UiLCAiaGVsbGlzaCIgfSwKICAgICAgYWxpZ25tZW50ID0gIm5vYWxpZ24iLAogICAgICBicmFuY2hlcyA9IHsKICAgICAgICAgewogICAgICAgICAgICBuYW1lID0gIlZsYWQncyBUb3dlciIsCiAgICAgICAgICAgIGJhc2UgPSA5LAogICAgICAgICAgICByYW5nZSA9IDUsCiAgICAgICAgICAgIGRpcmVjdGlvbiA9ICJ1cCIKICAgICAgICAgfQogICAgICB9LAogICAgICBsZXZlbHMgPSB7CiAgICAgICAgIHsKICAgICAgICAgICAgbmFtZSA9ICJ2YWxsZXkiLAogICAgICAgICAgICBib25ldGFnID0gIlYiLAogICAgICAgICAgICBiYXNlID0gMQogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgIG5hbWUgPSAic2FuY3R1bSIsCiAgICAgICAgICAgIGJhc2UgPSAtMQogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgIG5hbWUgPSAianVpYmxleCIsCiAgICAgICAgICAgIGJvbmV0YWcgPSAiSiIsCiAgICAgICAgICAgIGJhc2UgPSA0LAogICAgICAgICAgICByYW5nZSA9IDQKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICBuYW1lID0gImJhYWx6IiwKICAgICAgICAgICAgYm9uZXRhZyA9ICJCIiwKICAgICAgICAgICAgYmFzZSA9IDYsCiAgICAgICAgICAgIHJhbmdlID0gNAogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgIG5hbWUgPSAiYXNtb2RldXMiLAogICAgICAgICAgICBib25ldGFnID0gIkEiLAogICAgICAgICAgICBiYXNlID0gMiwKICAgICAgICAgICAgcmFuZ2UgPSA2CiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgbmFtZSA9ICJ3aXphcmQxIiwKICAgICAgICAgICAgYmFzZSA9IDExLAogICAgICAgICAgICByYW5nZSA9IDYKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICBuYW1lID0gIndpemFyZDIiLAogICAgICAgICAgICBib25ldGFnID0gIlgiLAogICAgICAgICAgICBjaGFpbmxldmVsID0gIndpemFyZDEiLAogICAgICAgICAgICBiYXNlID0gMQogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgIG5hbWUgPSAid2l6YXJkMyIsCiAgICAgICAgICAgIGJvbmV0YWcgPSAiWSIsCiAgICAgICAgICAgIGNoYWlubGV2ZWwgPSAid2l6YXJkMSIsCiAgICAgICAgICAgIGJhc2UgPSAyCiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgbmFtZSA9ICJvcmN1cyIsCiAgICAgICAgICAgIGJvbmV0YWcgPSAiTyIsCiAgICAgICAgICAgIGJhc2UgPSAxMCwKICAgICAgICAgICAgcmFuZ2UgPSA2CiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgbmFtZSA9ICJmYWtld2l6MSIsCiAgICAgICAgICAgIGJvbmV0YWcgPSAiRiIsCiAgICAgICAgICAgIGJhc2UgPSAtNiwKICAgICAgICAgICAgcmFuZ2UgPSA0CiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgbmFtZSA9ICJmYWtld2l6MiIsCiAgICAgICAgICAgIGJvbmV0YWcgPSAiRyIsCiAgICAgICAgICAgIGJhc2UgPSAtNiwKICAgICAgICAgICAgcmFuZ2UgPSA0CiAgICAgICAgIH0sCiAgICAgIH0KICAgfSwKICAgewogICAgICBuYW1lID0gIlRoZSBHbm9taXNoIE1pbmVzIiwKICAgICAgYm9uZXRhZyA9ICJNIiwKICAgICAgYmFzZSA9IDgsCiAgICAgIHJhbmdlID0gMiwKICAgICAgYWxpZ25tZW50ID0gImxhd2Z1bCIsCiAgICAgIGZsYWdzID0geyAibWF6ZWxpa2UiIH0sCiAgICAgIGx2bGZpbGwgPSAibWluZWZpbGwiLAogICAgICBsZXZlbHMgPSB7CiAgICAgICAgIHsKICAgICAgICAgICAgbmFtZSA9ICJtaW5ldG4iLAogICAgICAgICAgICBib25ldGFnID0gIlQiLAogICAgICAgICAgICBiYXNlID0gMywKICAgICAgICAgICAgcmFuZ2UgPSAyLAogICAgICAgICAgICBubGV2ZWxzID0gNywKICAgICAgICAgICAgZmxhZ3MgPSAidG93biIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICBuYW1lID0gIm1pbmVuZCIsCi0tICAgICAgICAgIDMuNy4wOiBtaW5lbmQgY2hhbmdlZCB0byBuby1ib25lcyB0byBzaW1wbGlmeSBhY2hpZXZlbWVudCB0cmFja2luZwotLSAgICAgICAgICBib25ldGFnID0gIkUiCiAgICAgICAgICAgIGJhc2UgPSAtMSwKICAgICAgICAgICAgbmxldmVscyA9IDMKICAgICAgICAgfSwKICAgICAgfQogICB9LAogICB7CiAgICAgIG5hbWUgPSAiVGhlIFF1ZXN0IiwKICAgICAgYm9uZXRhZyA9ICJRIiwKICAgICAgYmFzZSA9IDUsCiAgICAgIHJhbmdlID0gMiwKICAgICAgbGV2ZWxzID0gewogICAgICAgICB7CiAgICAgICAgICAgIG5hbWUgPSAieC1zdHJ0IiwKICAgICAgICAgICAgYmFzZSA9IDEsCiAgICAgICAgICAgIHJhbmdlID0gMQogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgIG5hbWUgPSAieC1sb2NhIiwKICAgICAgICAgICAgYm9uZXRhZyA9ICJMIiwKICAgICAgICAgICAgYmFzZSA9IDMsCiAgICAgICAgICAgIHJhbmdlID0gMQogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgIG5hbWUgPSAieC1nb2FsIiwKICAgICAgICAgICAgYmFzZSA9IC0xCiAgICAgICAgIH0sCiAgICAgIH0KICAgfSwKICAgewogICAgICBuYW1lID0gIlNva29iYW4iLAogICAgICBiYXNlID0gNCwKICAgICAgYWxpZ25tZW50ID0gIm5ldXRyYWwiLAogICAgICBmbGFncyA9IHsgIm1hemVsaWtlIiB9LAogICAgICBlbnRyeSA9IC0xLAogICAgICBsZXZlbHMgPSB7CiAgICAgICAgIHsKICAgICAgICAgICAgbmFtZSA9ICJzb2tvMSIsCiAgICAgICAgICAgIGJhc2UgPSAxLAogICAgICAgICAgICBubGV2ZWxzID0gMgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgIG5hbWUgPSAic29rbzIiLAogICAgICAgICAgICBiYXNlID0gMiwKICAgICAgICAgICAgbmxldmVscyA9IDIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICBuYW1lID0gInNva28zIiwKICAgICAgICAgICAgYmFzZSA9IDMsCiAgICAgICAgICAgIG5sZXZlbHMgPSAyCiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgbmFtZSA9ICJzb2tvNCIsCiAgICAgICAgICAgIGJhc2UgPSA0LAogICAgICAgICAgICBubGV2ZWxzID0gMgogICAgICAgICB9LAogICAgICB9CiAgIH0sCiAgIHsKICAgICAgbmFtZSA9ICJGb3J0IEx1ZGlvcyIsCiAgICAgIGJhc2UgPSAxLAogICAgICBib25ldGFnID0gIksiLAogICAgICBmbGFncyA9IHsgIm1hemVsaWtlIiB9LAogICAgICBhbGlnbm1lbnQgPSAidW5hbGlnbmVkIiwKICAgICAgbGV2ZWxzID0gewogICAgICAgICB7CiAgICAgICAgICAgIG5hbWUgPSAia25veCIsCiAgICAgICAgICAgIGJvbmV0YWcgPSAiSyIsCiAgICAgICAgICAgIGJhc2UgPSAtMQogICAgICAgICB9CiAgICAgIH0KICAgfSwKICAgewogICAgICBuYW1lID0gIlZsYWQncyBUb3dlciIsCiAgICAgIGJhc2UgPSAzLAogICAgICBib25ldGFnID0gIlQiLAogICAgICBwcm90b2ZpbGUgPSAidG93ZXIiLAogICAgICBhbGlnbm1lbnQgPSAiY2hhb3RpYyIsCiAgICAgIGZsYWdzID0geyAibWF6ZWxpa2UiIH0sCiAgICAgIGVudHJ5ID0gLTEsCiAgICAgIGxldmVscyA9IHsKICAgICAgICAgewogICAgICAgICAgICBuYW1lID0gInRvd2VyMSIsCiAgICAgICAgICAgIGJhc2UgPSAxCiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgbmFtZSA9ICJ0b3dlcjIiLAogICAgICAgICAgICBiYXNlID0gMgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgIG5hbWUgPSAidG93ZXIzIiwKICAgICAgICAgICAgYmFzZSA9IDMKICAgICAgICAgfSwKICAgICAgfQogICB9LAogICB7CiAgICAgIG5hbWUgPSAiVGhlIEVsZW1lbnRhbCBQbGFuZXMiLAogICAgICBib25ldGFnID0gIkUiLAogICAgICBiYXNlID0gNiwKICAgICAgYWxpZ25tZW50ID0gInVuYWxpZ25lZCIsCiAgICAgIGZsYWdzID0geyAibWF6ZWxpa2UiIH0sCiAgICAgIGVudHJ5ID0gLTIsCiAgICAgIGxldmVscyA9IHsKICAgICAgICAgewogICAgICAgICAgICBuYW1lID0gImFzdHJhbCIsCiAgICAgICAgICAgIGJhc2UgPSAxCiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgbmFtZSA9ICJ3YXRlciIsCiAgICAgICAgICAgIGJhc2UgPSAyCiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgbmFtZSA9ICJmaXJlIiwKICAgICAgICAgICAgYmFzZSA9IDMKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICBuYW1lID0gImFpciIsCiAgICAgICAgICAgIGJhc2UgPSA0CiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgbmFtZSA9ICJlYXJ0aCIsCiAgICAgICAgICAgIGJhc2UgPSA1CiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgbmFtZSA9ICJkdW1teSIsCiAgICAgICAgICAgIGJhc2UgPSA2CiAgICAgICAgIH0sCiAgICAgIH0KICAgfSwKfQojIE5ldEhhY2sgMy43ICB0cmlidXRlICAgICAgICROSERULURhdGU6IDE1OTY0OTgyNTUgMjAyMC8wOC8wMyAyMzo0NDoxNSAkICAkTkhEVC1CcmFuY2g6IE5ldEhhY2stMy43ICQ6JE5IRFQtUmV2aXNpb246IDEuODkgJAojIENvcHlyaWdodCAoYykgMjAxNyBieSBSb2JlcnQgUGF0cmljayBSYW5raW4KIyBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgojIEEgdHJpYnV0ZSBpbnRyb2R1Y2VkIGluIE5ldEhhY2sgMy42LjAgdG86CiMKIyAgICAgICAgIFNpciBUZXJlbmNlIERhdmlkIEpvaG4gIlRlcnJ5IiBQcmF0Y2hldHQKIyAgICAgICAgICAgICAgQXByaWwgMjgsIDE5NDggLSBNYXJjaCAxMiwgMjAxNQojICgib3IgdW50aWwgdGhlIHJpcHBsZXMgaGUgY2F1c2VkIGluIHRoZSB3b3JsZCBkaWUgYXdheS4uLiIpCiMKIwolc2VjdGlvbiBib29rcwojCiMKIwoldGl0bGUgVGhlIENvbG91ciBvZiBNYWdpYyAgKDE0KQojIHAuIDY3IChTaWduZXQgZWRpdGlvbjsgJ01vcnBvcmsnOiAgaW5pdGlhbGx5IEFua2ggYW5kIE1vcnBvcmsgd2VyZSB0d2luCiMgICAgICAgIGNpdGllcyB3aXRoIGRpc3RpbmN0IGNoYXJhY3RlcmlzdGljcyBvbiBvcHBvc2l0ZSBzaWRlcyBvZiB0aGUgQW5raAojICAgICAgICByaXZlci0tdGhleSB3ZXJlIGV2ZW50dWFsbHkgY29uc29saWRhdGVkIGludG8gQW5raC1Nb3Jwb3JrIHdpdGhvdXQKIyAgICAgICAgcmVnYXJkIHRvIHdoaWNoIGFyZWEgd2FzIHdoZXJlKQolcGFzc2FnZSAxCkl0IGhhcyBiZWVuIHJlbWFya2VkIGJlZm9yZSB0aGF0IHRob3NlIHdobyBhcmUgc2Vuc2l0aXZlIHRvIHJhZGlhdGlvbnMgaW4KdGhlIGZhciBvY3RhcmluZS0tdGhlIGVpZ2h0aCBjb2xvdXIsIHRoZSBwaWdtZW50IG9mIHRoZSBJbWFnaW5hdGlvbi0tY2FuCnNlZSB0aGluZ3MgdGhhdCBvdGhlcnMgY2Fubm90LgoKVGh1cyBpdCB3YXMgdGhhdCBSaW5jZXdpbmQsIGh1cnJ5aW5nIHRocm91Z2ggdGhlIGNyb3dkZWQsIGZsYXJlLWxpdCwKZXZlbmluZyBiYXphYXJzIG9mIE1vcnBvcmsgd2l0aCB0aGUgTHVnZ2FnZSB0cnVuZGxpbmcgYmVoaW5kIGhpbSwgam9zdGxlZAphIHRhbGwgZGFyayBmaWd1cmUsIHR1cm5lZCB0byBkZWxpdmVyIGEgZmV3IHN1aXRhYmxlIGN1cnNlcywgYW5kIGJlaGVsZApEZWF0aC4KCkl0IGhhZCB0byBiZSBEZWF0aC4gIE5vLW9uZSBlbHNlIHdlbnQgYXJvdW5kIHdpdGggZW1wdHkgZXllIHNvY2tldHMgYW5kLApvZiBjb3Vyc2UsIHRoZSBzY3l0aGUgb3ZlciBvbmUgc2hvdWxkZXIgd2FzIGFub3RoZXIgY2x1ZS4gIFsuLi5dCgogIFtUaGUgQ29sb3VyIG9mIE1hZ2ljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UgMQojIHAuIDExNgolcGFzc2FnZSAyCkFzIGhlIHdhcyBkcmF3biB0b3dhcmRzIHRoZSBFeWUgdGhlIHRlcnJvci1zdHJ1Y2sgUmluY2V3aW5kIHJhaXNlZCB0aGUgYm94CnByb3RlY3RpdmVseSwgYW5kIGF0IHRoZSBzYW1lIHRpbWUgaGVhcmQgdGhlIHBpY3R1cmUgaW1wIHNheSwgIlRoZXkncmUKYWJvdXQgcmlwZSBub3csIGNhbid0IGhvbGQgdGhlbSBhbnkgbG9uZ2VyLiAgRXZlcnlvbmUgc21pbGUsIHBsZWFzZS4iCgpUaGVyZSB3YXMgYS0tCi0tZmxhc2ggb2YgbGlnaHQgc28gd2hpdGUgYW5kIHNvIGJyaWdodC0tCi0taXQgZGlkbid0IHNlZW0gbGlrZSBsaWdodCBhdCBhbGwuCgpCZWwtU2hhbWhhcm90aCBzY3JlYW1lZCwgYSBzb3VuZCB0aGF0IHN0YXJ0ZWQgaW4gdGhlIGZhciB1bHRyYXNvbmljIGFuZApmaW5pc2hlZCBzb21ld2hlcmUgaW4gUmluY2V3aW5kJ3MgYm93ZWxzLiAgVGhlIHRlbnRhY2xlcyB3ZW50IG1vbWVudGFyaWx5CmFzIHN0aWZmIGFzIHJvZHMsIGh1cmxpbmcgdGhlaXIgdmFyaW91cyBjYXJnb2VzIGFyb3VuZCB0aGUgcm9vbSwgYmVmb3JlCmJ1bmNoaW5nIHVwIHByb3RlY3RpdmVseSBpbiBmcm9udCBvZiB0aGUgYWJ1c2VkIEV5ZS4gIFRoZSB3aG9sZSBtYXNzCmRyb3BwZWQgaW50byB0aGUgcGl0IGFuZCBhIG1vbWVudCBsYXRlciB0aGUgYmlnIHNsYWIgd2FzIHNuYXRjaGVkIHVwIGJ5CnNldmVyYWwgZG96ZW4gdGVudGFjbGVzIGFuZCBzbGFtbWVkIGludG8gcGxhY2UsIGxlYXZpbmcgYSBudW1iZXIgb2YKdGhyYXNoaW5nIGxpbWJzIHRyYXBwZWQgYXJvdW5kIHRoZSBlZGdlLgoKICBbVGhlIENvbG91ciBvZiBNYWdpYywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlIDIKIyBwLiA4IChwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoKQolcGFzc2FnZSAzClsuLi5dICBJbiB0aGUgbWVhbnRpbWUsIHRoZXkgY291bGQgb25seSBzcGVjdWxhdGUgYWJvdXQgdGhlIHJldmVhbGVkCmNvc21vcy4KClRoZXJlIHdhcywgZm9yIGV4YW1wbGUsIHRoZSB0aGVvcnkgdGhhdCBBJ1R1aW4gaGFkIGNvbWUgZnJvbSBub3doZXJlIGFuZAp3b3VsZCBjb250aW51ZSBhdCBhIHVuaWZvcm0gY3Jhd2wsIG9yIHN0ZWFkeSBnYWl0LCBpbnRvIG5vd2hlcmUsIGZvciBhbGwKdGltZS4gIFRoaXMgdGhlb3J5IHdhcyBwb3B1bGFyIGFtb25nIGFjYWRlbWljcy4KCkFuIGFsdGVybmF0aXZlLCBmYXZvdXJlZCBieSB0aG9zZSBvZiBhIHJlbGlnaW91cyBwZXJzdWFzaW9uLCB3YXMgdGhhdApBJ1R1aW4gd2FzIGNyYXdsaW5nIGZyb20gdGhlIEJpcnRocGxhY2UgdG8gdGhlIFRpbWUgb2YgTWF0aW5nLCBhcyB3ZXJlCmFsbCB0aGUgc3RhcnMgaW4gdGhlIHNreSB3aGljaCB3ZXJlLCBvYnZpb3VzbHksIGFsc28gY2FycmllZCBieSBnaWFudAp0dXJ0bGVzLiAgV2hlbiB0aGV5IGFycml2ZWQgdGhleSB3b3VsZCBicmllZmx5IGFuZCBwYXNzaW9uYXRlbHkgbWF0ZSwgZm9yCnRoZSBmaXJzdCBhbmQgb25seSB0aW1lLCBhbmQgZnJvbSB0aGF0IGZpZXJ5IHVuaW9uIG5ldyB0dXJ0bGVzIHdvdWxkIGJlCmJvcm4gdG8gY2FycnkgYSBuZXcgcGF0dGVybiBvZiB3b3JsZHMuICBUaGlzIHdhcyBrbm93biBhcyB0aGUgQmlnIEJhbmcKaHlwb3RoZXNpcy4KCiAgW1RoZSBDb2xvdXIgb2YgTWFnaWMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDEzIChlbmQgb2YgYSBsb25nIGZvb3Rub3RlOyB0aGUgaW5pdGlhbCBvYnNlc3Npb24gd2l0aCAnZWlnaHQnIGVuZGVkCiMgICAgICAgIGZhaXJseSBxdWlja2x5IHdpdGhpbiB0aGUgRGlzY3dvcmxkIHNlcmllcykKJXBhc3NhZ2UgNApbLi4uXQoKVGhlcmUgYXJlLCBvZiBjb3Vyc2UsIGVpZ2h0IGRheXMgaW4gYSBkaXNjIHdlZWsgYW5kIGVpZ2h0IGNvbG91cnMgaW4gaXRzCmxpZ2h0IHNwZWN0cnVtLiAgRWlnaHQgaXMgYSBudW1iZXIgb2Ygc29tZSBjb25zaWRlcmFibGUgb2NjdWx0CnNpZ25pZmljYW5jZSBvbiB0aGUgZGlzYyBhbmQgbXVzdCBuZXZlciwgZXZlciwgYmUgc3Bva2VuIGJ5IGEgd2l6YXJkLgoKUHJlY2lzZWx5IHdoeSBhbGwgdGhlIGFib3ZlIHNob3VsZCBiZSBzbyBpcyBub3QgY2xlYXIsIGJ1dCBnb2VzIHNvbWUgd2F5CnRvIGV4cGxhaW4gd2h5LCBvbiB0aGUgZGlzYywgdGhlIEdvZHMgYXJlIG5vdCBzbyBtdWNoIHdvcnNoaXBwZWQgYXMgYmxhbWVkLgoKICBbVGhlIENvbG91ciBvZiBNYWdpYywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMzggKGZpcnN0IHNwZWFrZXIgaXMgUmluY2V3aW5kLCBzZWNvbmQgaXMgYSBwcmUtVmV0aW5hcmkgUGF0cmljaWFuKQolcGFzc2FnZSA1CiJJIGFzc3VyZSB5b3UgdGhlIHRob3VnaHQgbmV2ZXIgZXZlbiBjcm9zc2VkIG15IG1pbmQsIGxvcmQuIgoKIkluZGVlZD8gIFRoZW4gaWYgSSB3ZXJlIHlvdSBJJ2Qgc3VlIG15IGZhY2UgZm9yIHNsYW5kZXIuIgoKICBbVGhlIENvbG91ciBvZiBNYWdpYywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gNDEgKHRpdGxlIG9mIDV0aCBib29rIGlzICJTb3VyY2VyeSIgYnV0IGl0J3Mgc3BlbGxlZCAic29yY2VyeSIgaGVyZTsKIyAgICAgICAgJ29yZ2FuaXNpbmcnOiBCcml0aXNoIHNwZWxsaW5nKQolcGFzc2FnZSA2CkFsbCB0aGUgaGVyb2VzIG9mIHRoZSBDaXJjbGUgU2VhIHBhc3NlZCB0aHJvdWdoIHRoZSBnYXRlcyBvZiBBbmtoLU1vcnBvcmsKc29vbmVyIG9yIGxhdGVyLiAgTW9zdCBvZiB0aGVtIHdlcmUgZnJvbSB0aGUgYmFyYmFyaWMgdHJpYmVzIG5lYXJlciB0aGUKZnJvemVuIEh1Yiwgd2hpY2ggaGFkIGEgc29ydCBvZiBleHBvcnQgdHJhZGUgaW4gaGVyb2VzLiAgQWxtb3N0IGFsbCBvZgp0aGVtIGhhZCBjcnVkZSBtYWdpYyBzd29yZHMsIHdob3NlIHVuc3VwcHJlc3NlZCBoYXJtb25pY3Mgb24gdGhlIGFzdHJhbApwbGFuZSBwbGF5ZWQgaGVsbCB3aXRoIGFueSBkZWxpY2F0ZSBleHBlcmltZW50cyBpbiBhcHBsaWVkIHNvcmNlcnkgZm9yCm1pbGVzIGFyb3VuZCwgYnV0IFJpbmNld2luZCBkaWRuJ3Qgb2JqZWN0IHRvIHRoZW0gb24gdGhhdCBzY29yZS4gIEhlIGtuZXcKaGltc2VsZiB0byBiZSBhIG1hZ2ljYWwgZHJvcG91dCwgc28gaXQgZGlkbid0IGJvdGhlciBoaW0gdGhhdCB0aGUgbWVyZQphcHBlYXJhbmNlIG9mIGEgaGVybyBhdCB0aGUgY2l0eSBnYXRlcyB3YXMgZW5vdWdoIHRvIGNhdXNlIHJldG9ydHMgdG8KZXhwbG9kZSBhbmQgZGVtb25zIHRvIG1hdGVyaWFsaXplIGFsbCB0aHJvdWdoIHRoZSBNYWdpY2FsIFF1YXJ0ZXIuICBObywKd2hhdCBoZSBkaWRuJ3QgbGlrZSBhYm91dCBoZXJvZXMgd2FzIHRoYXQgdGhleSB3ZXJlIHVzdWFsbHkgc3VpY2lkYWxseQpnbG9vbXkgd2hlbiBzb2JlciBhbmQgaG9taWNpZGFsbHkgaW5zYW5lIHdoZW4gZHJ1bmsuICBUaGVyZSB3ZXJlIHRvbyBtYW55Cm9mIHRoZW0sIHRvby4gIFNvbWUgb2YgdGhlIG1vc3Qgbm90YWJsZSBxdWVzdGluZyBncm91bmRzIHdlcmUgYSB2ZXJpdGFibGUKaHViYnViIGluIHRoZSBzZWFzb24uICBUaGVyZSB3YXMgdGFsayBvZiBvcmdhbmlzaW5nIGEgcm90YS4KCiAgW1RoZSBDb2xvdXIgb2YgTWFnaWMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiA4Mi04MyAocGFzc2FnZSBzdGFydHMgbWlkLXBhcmFncmFwaDsKIyAgICAgICAgICAgIHByb25vdW5zIGZvciBkZWl0aWVzIGFyZSBub3QgY2FwaXRhbGl6ZWQ7CiMgICAgICAgICAgICBCcmF2ZCBhbmQgdGhlIFdlYXNlbCwgb2J2aW91c2x5IGEgcGFyb2R5IG9mIEZyaXR6IExlaWJlcidzCiMgICAgICAgICAgICBGYWZocmQgYW5kIHRoZSBHcmF5IE1vdXNlciwgYXBwZWFyIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIDFzdAojICAgICAgICAgICAgb2YgNCBzdG9yaWVzIGFuZCB0aGVuIGFyZSBsZWZ0IGJlaGluZCwgbmV2ZXIgdG8gYmUgc2VlbiBhZ2FpbjsKIyAgICAgICAgICAgICJ3ZW5lZ3JhZGUgd2lmZmFyZCIgaXMgUmluY2V3aW5kIGFuZCAiZm9tZSBmb3J0IG9mIGNsZXJrIiBpcwojICAgICAgICAgICAgVHdvZmxvd2VyIHRoZSB0b3VyaXN0OyB0aGUgc2VlbWluZ2x5IGFicnVwdCBlbmQgb2YgdGhlIHBhc3NhZ2UKIyAgICAgICAgICAgIGlzIHRoZSBlbmQgb2YgdGhlIDJuZCBvZiB0aGUgNCBzdG9yaWVzIHRoYXQgbWFrZSB1cCB0aGUgYm9vazsKIyAgICAgICAgICAgICdjZW50cmUnOiBCcml0aXNoIHNwZWxsaW5nOyAnYmlsbGlvbic6IEJyaXRpc2ggdXNhZ2UgZ2l2ZXMgaXQgYQojICAgICAgICAgICAgdmFsdWUgb2YgJ21pbGxpb24gbWlsbGlvbnMnLCBlcXVpdmFsZW50IHRvIEFtZXJpY2FuICd0cmlsbGlvbic7CiMgICAgICAgICAgICB0aGUgc2Vjb25kIHBhcmFncmFwaCBvZiB0aGlzIHBhc3NhZ2UgaXMgdGhlIGRhdGEuYmFzZSBxdW90ZQojICAgICAgICAgICAgZm9yICJibGluZCBpbyIgYW5kIHRoZSBzZWNvbmQgaGFsZiBvZiB0aGUgcGFzc2FnZSBpcyB0aGUKIyAgICAgICAgICAgIGRhdGEuYmFzZSBxdW90ZSBmb3IgIipsYWR5IiBhbmQgIm9mZmxlciIpCiVwYXNzYWdlIDcKWy4uLl0gIFRoZSBkaXNjIGdvZHMgdGhlbXNlbHZlcywgZGVzcGl0ZSB0aGUgc3BsZW5kb3Igb2YgdGhlIHdvcmxkIGJlbG93CnRoZW0sIGFyZSBzZWxkb20gc2F0aXNmaWVkLiAgSXQgaXMgZW1iYXJyYXNzaW5nIHRvIGtub3cgdGhhdCBvbmUgaXMgYSBnb2QKb2YgYSB3b3JsZCB0aGF0IG9ubHkgZXhpc3RzIGJlY2F1c2UgZXZlcnkgaW1wcm9iYWJpbGl0eSBjdXJ2ZSBtdXN0IGhhdmUKaXRzIGZhciBlbmQ7IGVzcGVjaWFsbHkgd2hlbiBvbmUgY2FuIHBlZXIgaW50byBvdGhlciBkaW1lbnNpb25zIGF0IHdvcmxkcwp3aG9zZSBDcmVhdG9ycyBoYWQgbW9yZSBtZWNoYW5pY2FsIGFwdGl0dWRlIHRoYW4gaW1hZ2luYXRpb24uICBObyB3b25kZXIsCnRoZW4sIHRoYXQgdGhlIGRpc2MgZ29kcyBzcGVuZCBtb3JlIHRpbWUgYmlja2VyaW5nIHRoYW4gaW4gb21uaWNvZ25pemFuY2UuCgpPbiB0aGlzIHBhcnRpY3VsYXIgZGF5IEJsaW5kIElvLCBieSBkaW50IG9mIGNvbnN0YW50IHZpZ2lsYW5jZSB0aGUgY2hpZWYKb2YgdGhlIGdvZHMsIHNhdCB3aXRoIGhpcyBjaGluIG9uIGhpcyBoYW5kIGFuZCBsb29rZWQgYXQgdGhlIGdhbWluZyBib2FyZApvbiB0aGUgcmVkIG1hcmJsZSB0YWJsZSBpbiBmcm9udCBvZiBoaW0uICBCbGluZCBJbyBoYWQgZ290IGhpcyBuYW1lCmJlY2F1c2UsIHdoZXJlIGhpcyBleWUgc29ja2V0cyBzaG91bGQgaGF2ZSBiZWVuLCB0aGVyZSB3ZXJlIG5vdGhpbmcgYnV0CnR3byBhcmVhcyBvZiBibGFuayBza2luLiAgSGlzIGV5ZXMsIG9mIHdoaWNoIGhlIGhhZCBhbiBpbXByZXNzaXZlbHkgbGFyZ2UKbnVtYmVyLCBsZWQgYSBzZW1pLWluZGVwZW5kZW50IGxpZmUgb2YgdGhlaXIgb3duLiAgU2V2ZXJhbCB3ZXJlIGN1cnJlbnRseQpob3ZlcmluZyBhYm92ZSB0aGUgdGFibGUuCgpUaGUgZ2FtaW5nIGJvYXJkIHdhcyBhIGNhcmVmdWxseS1jYXJ2ZWQgbWFwIG9mIHRoZSBkaXNjIHdvcmxkLCBvdmVycHJpbnRlZAp3aXRoIHNxdWFyZXMuICBBIG51bWJlciBvZiBiZWF1dGlmdWxseSBtb2RlbGxlZCBwbGF5aW5nIHBpZWNlcyB3ZXJlIG5vdwpvY2N1cHlpbmcgc29tZSBvZiB0aGUgc3F1YXJlcy4gIEEgaHVtYW4gb25sb29rZXIgd291bGQsIGZvciBleGFtcGxlLCBoYXZlCnJlY29nbml6ZWQgaW4gdHdvIG9mIHRoZW0gdGhlIGxpa2VuZXNzZXMgb2YgQnJhdmQgYW5kIHRoZSBXZWFzZWwuICBPdGhlcnMKcmVwcmVzZW50ZWQgeWV0IG1vcmUgaGVyb2VzIGFuZCBjaGFtcGlvbnMsIG9mIHdoaWNoIHRoZSBkaXNjIGhhZCBhIG1vcmUKdGhhbiBhZGVxdWF0ZSBzdXBwbHkuCgpTdGlsbCBpbiB0aGUgZ2FtZSB3ZXJlIElvLCBPZmZsZXIgdGhlIENyb2NvZGlsZSBHb2QsIFplcGh5cnVzIHRoZSBnb2Qgb2YKc2xpZ2h0IGJyZWV6ZXMsIEZhdGUsIGFuZCB0aGUgTGFkeS4gIFRoZXJlIHdhcyBhbiBhaXIgb2YgY29uY2VudHJhdGlvbgphcm91bmQgdGhlIGJvYXJkIG5vdyB0aGF0IHRoZSBsZXNzZXIgcGxheWVycyBoYWQgYmVlbiByZW1vdmVkIGZyb20gdGhlCkdhbWUuICBDaGFuY2UgaGFkIGJlZW4gYW4gZWFybHkgY2FzdWFsdHksIHJ1bm5pbmcgaGVyIGhlcm8gaW50byBhIGZ1bGwKaG91c2Ugb2YgYXJtZWQgZ25vbGxzICh0aGUgcmVzdWx0IG9mIGEgbHVja3kgdGhyb3cgYnkgT2ZmbGVyKSBhbmQgc2hvcnRseQphZnRlcndhcmRzIE5pZ2h0IGhhZCBjYXNoZWQgaGlzIGNoaXBzLCBwbGVhZGluZyBhbiBhcHBvaW50bWVudCB3aXRoCkRlc3RpbnkuICBTZXZlcmFsIG1pbm9yIGRlaXRpZXMgaGFkIGRyaWZ0ZWQgdXAgYW5kIHdlcmUga2liaXR6aW5nIG92ZXIKdGhlIHNob3VsZGVycyBvZiB0aGUgcGxheWVycy4KClNpZGUgYmV0cyB3ZXJlIG1hZGUgdGhhdCB0aGUgTGFkeSB3b3VsZCBiZSB0aGUgbmV4dCB0byBsZWF2ZSB0aGUgYm9hcmQuCkhlciBsYXN0IGNoYW1waW9uIG9mIGFueSBzdGFuZGluZyB3YXMgbm93IGEgcGluY2ggb2YgcG90YXNoIGluIHRoZSBydWlucwpvZiBzdGlsbC1zbW9raW5nIEFua2gtTW9ycG9yaywgYW5kIHRoZXJlIHdlcmUgaGFyZGx5IGFueSBwaWVjZXMgdGhhdCBzaGUKY291bGQgcHJvbW90ZSB0byBmaXJzdCByYW5rLgoKQmxpbmQgSW8gdG9vayB1cCB0aGUgZGljZS1ib3gsIHdoaWNoIHdhcyBhIHNrdWxsIHdob3NlIHZhcmlvdXMgb3JpZmljZXMKaGFkIGJlZW4gc3RvcHBlcmVkIHdpdGggcnViaWVzLCBhbmQgd2l0aCBzZXZlcmFsIG9mIGhpcyBleWVzIG9uIHRoZSBMYWR5CmhlIHJvbGxlZCB0aHJlZSBmaXZlcy4KClNoZSBzbWlsZWQuICBUaGlzIHdhcyB0aGUgbmF0dXJlIG9mIHRoZSBMYWR5J3MgZXllczogIHRoZXkgd2VyZSBicmlnaHQKZ3JlZW4sIGxhY2tpbmcgaXJpcyBvciBwdXBpbCwgYW5kIHRoZXkgZ2xvd2VkIGZyb20gd2l0aGluLgoKVGhlIHJvb20gd2FzIHNpbGVudCBhcyBzaGUgc2NyYWJibGVkIGluIGhlciBib3ggb2YgcGllY2VzIGFuZCwgZnJvbSB0aGUKdmVyeSBib3R0b20sIHByb2R1Y2VkIGEgY291cGxlIHRoYXQgc2hlIHNldCBkb3duIG9uIHRoZSBib2FyZCB3aXRoIHR3bwpkZWNpc2l2ZSBjbGlja3MuICBUaGUgcmVzdCBvZiB0aGUgcGxheWVycywgYXMgb25lIEdvZCwgY3JhbmVkIGZvcndhcmQgdG8KcGVlciBhdCB0aGVtLgoKIkEgd2VuZWdyYWRlIHdpZmZhcmQgYW5kIGZvbWUgZm9ydCBvZiBjbGVyaywiIHNhaWQgT2ZmbGVyIHRoZSBDcm9jb2RpbGUKR29kLCBoaW5kZXJlZCBhcyB1c3VhbCBieSBoaXMgdHVza3MuICAiV2VsbCwgd2VhbGx5ISIgIFdpdGggb25lIGNsYXcgaGUKcHVzaGVkIGEgcGlsZSBvZiBib25lLXdoaXRlIHRva2VucyBpbnRvIHRoZSBjZW50cmUgb2YgdGhlIHRhYmxlLgoKVGhlIExhZHkgbm9kZGVkIHNsaWdodGx5LiAgU2hlIHBpY2tlZCB1cCB0aGUgZGljZS1jdXAgYW5kIGhlbGQgaXQgYXMgc3RlYWR5CmFzIGEgcm9jaywgeWV0IGFsbCB0aGUgZ29kcyBjb3VsZCBoZWFyIHRoZSB0aHJlZSBjdWJlcyByYXR0bGluZyBhYm91dAppbnNpZGUuICBBbmQgdGhlbiBzaGUgc2VudCB0aGVtIGJvdW5jaW5nIGFjcm9zcyB0aGUgdGFibGUuCgpBIHNpeC4gIEEgdGhyZWUuICBBIGZpdmUuCgpTb21ldGhpbmcgd2FzIGhhcHBlbmluZyB0byB0aGUgZml2ZSwgaG93ZXZlci4gIEJhdHRlcmVkIGJ5IHRoZSBjaGFuY2UKY29sbGlzaW9uIG9mIHNldmVyYWwgYmlsbGlvbiBtb2xlY3VsZXMsIHRoZSBkaWUgZmxpcHBlZCBvbnRvIGEgcG9pbnQsIHNwdW4KZ2VudGx5IGFuZCBjYW1lIGRvd24gYSBzZXZlbi4KCkJsaW5kIElvIHBpY2tlZCB1cCB0aGUgY3ViZSBhbmQgY291bnRlZCB0aGUgc2lkZXMuCgoiQ29tZSAvb24vLCIgaGUgc2FpZCB3ZWFyaWx5LiAgIlBsYXkgZmFpci4iCgogIFtUaGUgQ29sb3VyIG9mIE1hZ2ljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiA4NCAoQW5raC1Nb3Jwb3JrIHdhcyBidXJuZWQgc29vbiBhZnRlciBUd29mbG93ZXIgaW50cm9kdWNlZCB0aGUgY29uY2VwdAojICAgICAgICBvZiBmaXJlIGluc3VyYW5jZTsgYSBsb25nZXIgdmVyc2lvbiBvZiB0aGlzIHBhc3NhZ2UgaXMgdGhlIGRhdGEuYmFzZQojICAgICAgICBxdW90ZSBmb3IgInRvdXJpc3QiKQolcGFzc2FnZSA4ClBpY3R1cmVzcXVlLiAgVGhhdCB3YXMgYSBuZXcgd29yZCB0byBSaW5jZXdpbmQgdGhlIHdpemFyZCAoQi4gTWdjLiwKVW5zZWVuIFVuaXZlcnNpdHkgW2ZhaWxlZF0pLiAgSXQgd2FzIG9uZSBvZiBhIG51bWJlciBoZSBoYWQgcGlja2VkIHVwCnNpbmNlIGxlYXZpbmcgdGhlIGNoYXJyZWQgcnVpbnMgb2YgQW5raC1Nb3Jwb3JrLiAgUXVhaW50IHdhcyBhbm90aGVyIG9uZS4KUGljdHVyZXNxdWUgbWVhbnQtLWhlIGRlY2lkZWQgYWZ0ZXIgY2FyZWZ1bCBvYnNlcnZhdGlvbiBvZiB0aGUgc2NlbmVyeQp0aGF0IGluc3BpcmVkIFR3b2Zsb3dlciB0byB1c2UgdGhlIHdvcmQtLXRoYXQgdGhlIGxhbmRzY2FwZSB3YXMgaG9ycmlibHkKcHJlY2lwaXRvdXMuICBRdWFpbnQsIHdoZW4gdXNlZCB0byBkZXNjcmliZSB0aGUgb2NjYXNpb25hbCB2aWxsYWdlIHRocm91Z2gKd2hpY2ggdGhleSBwYXNzZWQsIG1lYW50IGZldmVyLXJpZGRlbiBhbmQgdHVtYmxlZG93bi4KClR3b2Zsb3dlciB3YXMgYSB0b3VyaXN0LCB0aGUgZmlyc3QgZXZlciBzZWVuIG9uIHRoZSBkaXNjd29ybGQuICBUb3VyaXN0LApSaW5jZXdpbmQgZGVjaWRlZCwgbWVhbnQgImlkaW90LiIKCiAgW1RoZSBDb2xvdXIgb2YgTWFnaWMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDg1ICgnbWVtb3Jpc2luZyc6IEJyaXRpc2ggc3BlbGxpbmcpCiVwYXNzYWdlIDkKQ3VycmVudGx5IFR3b2Zsb3dlciB3YXMgc2hvd2luZyBhIGdyZWF0IGludGVyZXN0IGluIHRoZSB0aGVvcnkgYW5kIHByYWN0aWNlCm9mIG1hZ2ljLgoKIkl0IGFsbCBzZWVtcywgd2VsbCwgcmF0aGVyIHVzZWxlc3MgdG8gbWUsIiBoZSBzYWlkLiAgIkkgYWx3YXlzIHRob3VnaHQKdGhhdCwgeW91IGtub3csIGEgd2l6YXJkIGp1c3Qgc2FpZCB0aGUgd29yZHMgYW5kIHRoYXQgd2FzIHRoYXQuICBOb3QgYWxsCnRoaXMgdGVkaW91cyBtZW1vcmlzaW5nLiIKClJpbmNld2luZCBhZ3JlZWQgbW9vZGlseS4gIEhlIHRyaWVkIHRvIGV4cGxhaW4gdGhhdCBtYWdpYyBoYWQgaW5kZWVkIG9uY2UKYmVlbiB3aWxkIGFuZCBsYXdsZXNzLCBidXQgaGFkIGJlZW4gdGFtZWQgYmFjayBpbiB0aGUgbWlzdHMgb2YgdGltZSBieSB0aGUKT2xkZW4gT25lcywgd2hvIGhhZCBib3VuZCBpdCB0byBvYmV5IGFtb25nIG90aGVyIHRoaW5ncyB0aGUgTGF3IG9mCkNvbnNlcnZhdGlvbiBvZiBSZWFsaXR5OyB0aGlzIGRlbWFuZGVkIHRoYXQgdGhlIGVmZm9ydCBuZWVkZWQgdG8gYWNoaWV2ZQphIGdvYWwgc2hvdWxkIGJlIHRoZSBzYW1lIHJlZ2FyZGxlc3Mgb2YgdGhlIG1lYW5zIHVzZWQuICBJbiBwcmFjdGljYWwKdGVybXMsIHRoaXMgbWVhbnQgdGhhdCwgc2F5LCBjcmVhdGluZyB0aGUgaWxsdXNpb24gb2YgYSBnbGFzcyBvZiB3aW5lIHdhcwpyZWxhdGl2ZWx5IGVhc3ksIHNpbmNlIGl0IGludm9sdmVkIG1lcmVseSB0aGUgc3VidGxlIHNoaWZ0aW5nIG9mIGxpZ2h0CnBhdHRlcm5zLiAgT24gdGhlIG90aGVyIGhhbmQsIGxpZnRpbmcgYSBnZW51aW5lIHdpbmVnbGFzcyBhIGZldyBmZWV0IGluCnRoZSBhaXIgYnkgc2hlZXIgbWVudGFsIGVuZXJneSByZXF1aXJlZCBzZXZlcmFsIGhvdXJzIG9mIHN5c3RlbWF0aWMKcHJlcGFyYXRpb24gaWYgdGhlIHdpemFyZCB3aXNoZWQgdG8gcHJldmVudCB0aGUgc2ltcGxlIHByaW5jaXBsZSBvZgpsZXZlcmFnZSBmbGlja2luZyBoaXMgYnJhaW4gb3V0IHRocm91Z2ggaGlzIGVhcnMuCgpIZSB3ZW50IG9uIHRvIGFkZCB0aGF0IHNvbWUgb2YgdGhlIGFuY2llbnQgbWFnaWMgY291bGQgc3RpbGwgYmUgZm91bmQgaW4KaXRzIHJhdyBzdGF0ZSwgcmVjb2duaXphYmxlLS10byB0aGUgaW5pdGlhdGVkLS1ieSB0aGUgZWlnaHRmb2xkIHNoYXBlIGl0Cm1hZGUgaW4gdGhlIGNyeXN0YWxsaW5lIHN0cnVjdHVyZSBvZiBzcGFjZS10aW1lLiAgVGhlcmUgd2FzIHRoZSBtZXRhbApvY3Rpcm9uLCBmb3IgZXhhbXBsZSwgYW5kIHRoZSBnYXMgb2N0b2dlbi4gIEJvdGggcmFkaWF0ZWQgZGFuZ2Vyb3VzCmFtb3VudHMgb2YgcmF3IGVuY2hhbnRtZW50LgoKICBbVGhlIENvbG91ciBvZiBNYWdpYywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTY2ICgnTGlvIXJ0JyB3aXRoIGVtYmVkZGVkIGV4Y2xhbWF0aW9uIHBvaW50IGlzIGNvcnJlY3Q7IGJvb2sncyB0ZXh0CiMgICAgICAgICBpcyBtaXNzaW5nIHRoZSBvcGVuaW5nIHF1b3RlIGJlZm9yZSBbIl1Zb3UgYXJyb2dhbnQgYmFyYmFyaWFuLS0iKQolcGFzc2FnZSAxMAoiSSBjaGFsbGVuZ2UgeW91LCIgc2FpZCBIcnVuLCBnbGFyaW5nIGF0IHRoZSBicm90aGVycywgImJvdGggYXQgb25jZS4iCgpMaW8hcnQgYW5kIExpYXJ0ZXMgZXhjaGFuZ2VkIGxvb2tzLgoKIllvdSdsbCBmaWdodCB1cyBib3RoIHRvZ2V0aGVyPyIgc2FpZCBMaWFydGVzLCBhIHRhbGwsIHdpcnkgbWFuIHdpdGggbG9uZwpibGFjayBoYWlyLgoKIllhaC4iCgoiVGhhdCdzIHByZXR0eSB1bmV2ZW4gb2RkcywgaXNuJ3QgaXQ/IgoKIllhaC4gIEkgb3V0bnVtYmVyIHlvdSBvbmUgdG8gdHdvLiIKCkxpbyFydCBzY293bGVkLiAgIllvdSBhcnJvZ2FudCBiYXJiYXJpYW4tLSIKCiJUaGF0IGp1c3QgYWJvdXQgZG9lcyBpdCEiIGdyb3dsZWQgSHJ1bi4gICJJJ2xsLS0iCgpUaGUgTG9yZW1hc3RlciBwdXQgb3V0IGEgYmx1ZS12ZWluZWQgaGFuZCB0byByZXN0cmFpbiBoaW0uCgoiSXQgaXMgZm9yYmlkZGVuIHRvIGZpZ2h0IG9uIHRoZSBLaWxsaW5nIEdyb3VuZCwiIGhlIHNhaWQsIGFuZCBwYXVzZWQKd2hpbGUgaGUgY29uc2lkZXJlZCB0aGUgc2Vuc2Ugb2YgdGhpcy4gICJZb3Uga25vdyB3aGF0IEkgbWVhbiwgYW55d2F5LCIgaGUKaGF6YXJkZWQsIGdpdmluZyB1cCwgYW5kIGFkZGVkLCAiQXMgdGhlIGNoYWxsZW5nZWQgcGFydGllcyBteSBsb3JkcyBMaW8hcnQKYW5kIExpYXJ0ZXMgaGF2ZSBjaG9pY2Ugb2Ygd2VhcG9ucy4iCgoiRHJhZ29ucywiIHRoZXkgc2FpZCB0b2dldGhlci4gIExpZXNzYSBzbm9ydGVkLgoKIkRyYWdvbnMgY2FuIGJlIHVzZWQgb2ZmZW5zaXZlbHksIHRoZXJlZm9yZSB0aGV5IGFyZSB3ZWFwb25zLCIgc2FpZCBMaW8hcnQKZmlybWx5LiAgIklmIHlvdSBkaXNhZ3JlZSB3ZSBjYW4gZmlnaHQgb3ZlciBpdC4iCgoiWWFoLCIgc2FpZCBoaXMgYnJvdGhlciwgbm9kZGluZyBhdCBIcnVuLgoKICBbVGhlIENvbG91ciBvZiBNYWdpYywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTk2CiVwYXNzYWdlIDExClNvbWUgcGlyYXRlcyBhY2hpZXZlZCBpbW1vcnRhbGl0eSBieSBncmVhdCBkZWVkcyBvZiBjcnVlbHR5IG9yIGRlcnJpbmctZG8uClNvbWUgYWNoaWV2ZWQgaW1tb3J0YWxpdHkgYnkgYW1hc3NpbmcgZ3JlYXQgd2VhbHRoLiAgQnV0IHRoZSBjYXB0YWluIGhhZApsb25nIGFnbyBkZWNpZGVkIHRoYXQgaGUgd291bGQsIG9uIHRoZSB3aG9sZSwgcHJlZmVyIHRvIGFjaGlldmUgaW1tb3J0YWxpdHkKYnkgbm90IGR5aW5nLgoKICBbVGhlIENvbG91ciBvZiBNYWdpYywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjAxIChlbnRpcmUgcGFyYWdyYXBoIGlzIGVuY2xvc2VkIHdpdGhpbiBwYXJlbnRoZXNlcykKJXBhc3NhZ2UgMTIKUGxhbnRzIG9uIHRoZSBkaXNjLCB3aGlsZSBpbmNsdWRpbmcgdGhlIGNhdGVnb3JpZXMga25vd24gY29tbW9ubHkgYXMKL2FubnVhbHMvLCB3aGljaCB3ZXJlIHNvd24gdGhpcyB5ZWFyIHRvIGNvbWUgdXAgbGF0ZXIgdGhpcyB5ZWFyLAovYmllbm5pYWxzLywgc293biB0aGlzIHllYXIgdG8gZ3JvdyBuZXh0IHllYXIsIGFuZCAvcGVyZW5uaWFscy8sIHNvd24gdGhpcwp5ZWFyIHRvIGdyb3cgdW50aWwgZnVydGhlciBub3RpY2UsIGFsc28gaW5jbHVkZWQgYSBmZXcgcmFyZSAvcmUtYW5udWFscy8Kd2hpY2gsIGJlY2F1c2Ugb2YgYW4gdW51c3VhbCBmb3VyLWRpbWVuc2lvbmFsIHR3aXN0IGluIHRoZWlyIGdlbmVzLCBjb3VsZApiZSBwbGFudGVkIHRoaXMgeWVhciB0byBjb21lIHVwIC9sYXN0IHllYXIvLiAgVGhlIC92dWwvIG51dCB2aW5lIHdhcwpwYXJ0aWN1bGFybHkgZXhjZXB0aW9uYWwgaW4gdGhhdCBpdCBjb3VsZCBmbG91cmlzaCBhcyBtYW55IGFzIGVpZ2h0IHllYXJzCnByaW9yIHRvIGl0cyBzZWVkIGFjdHVhbGx5IGJlaW5nIHNvd24uICAvVnVsLyBudXQgd2luZSB3YXMgcmVwdXRlZCB0byBnaXZlCmNlcnRhaW4gZHJpbmtlcnMgYW4gaW5zaWdodCBpbnRvIHRoZSBmdXR1cmUgd2hpY2ggd2FzLCBmcm9tIHRoZSBudXQncwpwb2ludCBvZiB2aWV3LCB0aGUgcGFzdC4gIFN0cmFuZ2UgYnV0IHRydWUuCgogIFtUaGUgQ29sb3VyIG9mIE1hZ2ljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyMTcgKFJpbmNld2luZCBhbmQgVHdvZmxvd2VyIGFyZSBzbGF0ZWQgdG8gYmVjb21lIHJpdHVhbCBzYWNyaWZpY2VzKQolcGFzc2FnZSAxMwoiSSBob3BlIHlvdSdyZSBub3QgcHJvcG9zaW5nIHRvIGVuc2xhdmUgdXMsIiBzYWlkIFR3b2Zsb3dlci4KCk1hcmNoZXNhIGxvb2tlZCBnZW51aW5lbHkgc2hvY2tlZC4gICJDZXJ0YWlubHkgbm90ISAgV2hhdGV2ZXIgY291bGQKaGF2ZSBnaXZlbiB5b3UgdGhhdCBpZGVhPyAgWW91ciBsaXZlcyBpbiBLcnVsbCB3aWxsIGJlIHJpY2gsIGZ1bGwgYW5kCmNvbWZvcnRhYmxlLS0iCgoiT2gsIGdvb2QsIiBzYWlkIFJpbmNld2luZC4KCiItLWp1c3Qgbm90IHZlcnkgbG9uZy4iCgogIFtUaGUgQ29sb3VyIG9mIE1hZ2ljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMjI4LTIyOSAocGFzc2FnZSBzdGFydHMgbWlkLXBhcmFncmFwaCkKJXBhc3NhZ2UgMTQKWy4uLl0gIFNoZSB3YXMgdGhlIEdvZGRlc3MgV2hvIE11c3QgTm90IEJlIE5hbWVkOyB0aG9zZSB3aG8gc291Z2h0IGhlcgpuZXZlciBmb3VuZCBoZXIsIHlldCBzaGUgd2FzIGtub3duIHRvIGNvbWUgdG8gdGhlIGFpZCBvZiB0aG9zZSBpbiBncmVhdGVzdApuZWVkLiAgQW5kLCB0aGVuIGFnYWluLCBzb21ldGltZXMgc2hlIGRpZG4ndC4gIFNoZSB3YXMgbGlrZSB0aGF0LiAgU2hlCmRpZG4ndCBsaWtlIHRoZSBjbGlja2luZyBvZiByb3NhcmllcywgYnV0IHdhcyBhdHRyYWN0ZWQgdG8gdGhlIHNvdW5kIG9mCmRpY2UuICBObyBtYW4ga25ldyB3aGF0IFNoZSBsb29rZWQgbGlrZSwgYWx0aG91Z2ggdGhlcmUgd2VyZSBtYW55IHRpbWVzCndoZW4gYSBtYW4gd2hvIHdhcyBnYW1ibGluZyBoaXMgbGlmZSBvbiB0aGUgdHVybiBvZiB0aGUgY2FyZHMgd291bGQgcGljawp1cCB0aGUgaGFuZCBoZSBoYWQgYmVlbiBkZWFsdCBhbmQgc3RhcmUgSGVyIGZ1bGwgaW4gdGhlIGZhY2UuICBPZiBjb3Vyc2UsCnNvbWV0aW1lcyBoZSBkaWRuJ3QuICBBbW9uZyBhbGwgdGhlIGdvZHMgc2hlIHdhcyBhdCBvbmUgYW5kIHRoZSBzYW1lIHRpbWUKdGhlIG1vc3QgY291cnRlZCBhbmQgdGhlIG1vc3QgY3Vyc2VkLgoKICBbVGhlIENvbG91ciBvZiBNYWdpYywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiVlIHRpdGxlCiMKIwojCiV0aXRsZSBUaGUgTGlnaHQgRmFudGFzdGljICgxMikKIyBwLiA5MiAoU2lnbmV0IGVkaXRpb24pCiVwYXNzYWdlIDEKJ0NvaGVuIGlzaCBteSBuYW1lLCBib3kuJyAgQmV0aGFuJ3MgaGFuZHMgc3RvcHBlZCBtb3ZpbmcuCgonQ29oZW4/JyBzaGUgc2FpZC4gICdDb2hlbiB0aGUgQmFyYmFyaWFuPycKCidUaGUgdmVyeSBzaGFtZS4nCgonSGFuZyBvbiwgaGFuZyBvbiwnIHNhaWQgUmluY2V3aW5kLiAgJ0NvaGVuJ3MgYSBncmVhdCBiaWcgY2hhcCwgbmVjayBsaWtlIGEKYnVsbCwgZ290IGNoZXN0IG11c2NsZXMgbGlrZSBhIHNhY2sgb2YgZm9vdGJhbGxzLiAgSSBtZWFuLCBoZSdzIHRoZSBEaXNjJ3MKZ3JlYXRlc3Qgd2FycmlvciwgYSBsZWdlbmQgaW4gaGlzIG93biBsaWZldGltZS4gIEkgcmVtZW1iZXIgbXkgZ3JhbmRhZAp0ZWxsaW5nIG1lIGhlIHNhdyBoaW0uLi4gbXkgZ3JhbmRhZCB0ZWxsaW5nIG1lIGhlLi4uIG15IGdyYW5kYWQuLi4nCgpIZSBmYWx0ZXJlZCB1bmRlciB0aGUgZ2ltbGV0IGdhemUuCgonT2gsJyBoZSBzYWlkLiAgJ09oLiAgT2YgY291cnNlLiAgU29ycnkuJwoKJ1llc2gsJyBzYWlkIENvaGVuLCBhbmQgc2lnaGVkLiAgJ1RoYXQncyByaWdodCBib3kuICBJJ20gYSBsaWZldGltZSBpbiBteQpvd24gbGVnZW5kLicKCiAgW1RoZSBMaWdodCBGYW50YXN0aWMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZSAxCiMgcC4gMTEzIChUd29mbG93ZXIgaXMgdGVhY2hpbmcgdGhlIFJpZGVycyBob3cgdG8gcGxheSBicmlkZ2U7CiMgICAgICAgICBpbiAvVGhlIExpZ2h0IEZhbnRhc3RpYy8sIERlYXRoJ3MgZGlhbG9nIHVzZXMgcXVvdGF0aW9uIG1hcmtzCiMgICAgICAgICBhbmQgZnVsbCB1cHBlcmNhc2UgcmF0aGVyIHRoYW4gdGhlIHNtYWxsIGNhcGl0YWwgbGV0dGVycyB1c2VkIGluCiMgICAgICAgICB0aGUgb3RoZXIgYm9va3MpCiVwYXNzYWdlIDIKRGVhdGggc2F0IGF0IG9uZSBzaWRlIG9mIGEgYmxhY2sgYmFpemUgdGFibGUgaW4gdGhlIGNlbnRyZSBvZiB0aGUgcm9vbSwKYXJndWluZyB3aXRoIEZhbWluZSwgV2FyIGFuZCBQZXN0aWxlbmNlLiAgVHdvZmxvd2VyIHdhcyB0aGUgb25seSBvbmUgdG8KbG9vayB1cCBhbmQgbm90aWNlIFJpbmNld2luZC4KCidIZXksIGhvdyBkaWQgeW91IGdldCBoZXJlPycgaGUgc2FpZC4KCidXZWxsLCBzb21lIHNheSB0aGF0IHRoZSBjcmVhdG9yIHRvb2sgYSBoYW5kZnVsLS1vaCwgSSBzZWUsIHdlbGwsIGl0J3MKaGFyZCB0byBleHBsYWluIGJ1dCBJLS0nCgonSGF2ZSB5b3UgZ290IHRoZSBMdWdnYWdlPycKClRoZSB3b29kZW4gYm94IHB1c2hlZCBwYXN0IFJpbmNld2luZCBhbmQgc2V0dGxlZCBkb3duIGluIGZyb250IG9mIGl0cwpvd25lciwgd2hvIG9wZW5lZCBpdHMgbGlkIGFuZCBydW1tYWdlZCBhcm91bmQgaW5zaWRlIHVudGlsIGhlIGNhbWUgdXAgd2l0aAphIHNtYWxsLCBsZWF0aGVyYm91bmQgYm9vayB3aGljaCBoZSBoYW5kZWQgdG8gV2FyLCB3aG8gd2FzIGhhbW1lcmluZyB0aGUKdGFibGUgd2l0aCBhIG1haWxlZCBmaXN0LgoKJ0l0J3MgIk5vc2VoaW5nZXIgb24gdGhlIExhd3Mgb2YgQ29udHJhY3QiLCcgaGUgc2FpZC4gICdJdCdzIHF1aXRlIGdvb2QsCnRoZXJlJ3MgYSBsb3QgaW4gaXQgYWJvdXQgZG91YmxlIGZpbmVzc2luZyBhbmQgaG93IHRvLS0nCgpEZWF0aCBzbmF0Y2hlZCB0aGUgYm9vayB3aXRoIGEgYm9ueSBoYW5kIGFuZCBmbGlwcGVkIHRocm91Z2ggdGhlIHBhZ2VzLApxdWl0ZSBvYmxpdmlvdXMgdG8gdGhlIHByZXNlbmNlIG9mIHRoZSB0d28gbWVuLgoKJ1JJR0hULCcgaGUgc2FpZCwgJ1BFU1RJTEVOQ0UsIE9QRU4gQU5PVEhFUiBQQUNLIE9GIENBUkRTLiAgSSdNIEdPSU5HIFRPCkdFVCBUTyBUSEUgQk9UVE9NIE9GIFRISVMgSUYgSVQgS0lMTFMgTUUuICBGSUdVUkFUSVZFTFkgU1BFQUtJTkcgT0YgQ09VUlNFLicKCiAgW1RoZSBMaWdodCBGYW50YXN0aWMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZSAyCiMgcC4gNyAocGFzc2FnZSBzdGFydHMgbWlkLXNlbnRlbmNlOyB0aGUgdG9vLWxvbmctdG8tYW5zd2VyIHF1ZXN0aW9uIGlzCiMgICAgICAgIldoeSBoYXZlIFJpbmNld2luZCBhbmQgVHdvZmxvd2VyIGZhbGxlbiBvZmYgdGhlIERpc2MncyByaW0/IiwKIyAgICAgICBhbGx1ZGluZyB0byB0aGUgY29uY2x1c2lvbiBvZiAvVGhlIENvbG91ciBvZiBNYWdpYy87CiMgICAgICAgaW4gL1NvdXJjZXJ5LyBhbmQgL0ludGVyZXN0aW5nIFRpbWVzLyBhbmQgcHJvYmFibHkgb3RoZXJzLCB0aGUKIyAgICAgICBmYW1vdXMgcGhpbG9zb3BoZXIncyBuYW1lIGlzIHNwZWxsZWQgIkx5IFRpbiBXaGVlZGxlIikKJXBhc3NhZ2UgMwpbLi4uXSBzdWNoIHF1ZXN0aW9ucyB0YWtlIHRpbWUgYW5kIGNvdWxkIGJlIG1vcmUgdHJvdWJsZSB0aGFuIHRoZXkgYXJlCndvcnRoLiAgRm9yIGV4YW1wbGUsIGl0IGlzIHNhaWQgdGhhdCBzb21lb25lIGF0IGEgcGFydHkgb25jZSBhc2tlZCB0aGUKZmFtb3VzIHBoaWxvc29waGVyIEx5IFRpbiBXZWVkbGUgIldoeSBhcmUgeW91IGhlcmU/IiBhbmQgdGhlIHJlcGx5IHRvb2sKdGhyZWUgeWVhcnMuCgogIFtUaGUgTGlnaHQgRmFudGFzdGljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiA4ICgnbGlicmFyaWVzJzogcGx1cmFsIGlzIGFjY3VyYXRlKQolcGFzc2FnZSA0ClRoZSBvbmx5IGZ1cm5pc2hpbmcgaW4gdGhlIHJvb20gd2FzIGEgbGVjdGVybiBvZiBkYXJrIHdvb2QsIGNhcnZlZCBpbnRvIHRoZQpzaGFwZSBvZiBhIGJpcmQtLXdlbGwsIHRvIGJlIGZyYW5rLCBpbnRvIHRoZSBzaGFwZSBvZiBhIHdpbmdlZCB0aGluZyBpdCBpcwpwcm9iYWJseSBiZXN0IG5vdCB0byBleGFtaW5lIHRvbyBjbG9zZWx5LS1hbmQgb24gdGhlIGxlY3Rlcm4sIGZhc3RlbmVkIHRvCml0IGJ5IGEgaGVhdnkgY2hhaW4gY292ZXJlZCBpbiBwYWRsb2Nrcywgd2FzIGEgYm9vay4KCkEgbGFyZ2UsIGJ1dCBub3QgcGFydGljdWxhcmx5IGltcHJlc3NpdmUsIGJvb2suICBPdGhlciBib29rcyBpbiB0aGUKVW5pdmVyc2l0eSdzIGxpYnJhcmllcyBoYWQgY292ZXJzIGlubGFpZCB3aXRoIHJhcmUgamV3ZWxzIGFuZCBmYXNjaW5hdGluZwp3b29kLCBvciBib3VuZCB3aXRoIGRyYWdvbiBza2luLiAgVGhpcyBvbmUgd2FzIGp1c3QgYSByYXRoZXIgdGF0dHkgbGVhdGhlci4KSXQgbG9va2VkIHRoZSBzb3J0IG9mIGJvb2sgZGVzY3JpYmVkIGluIGxpYnJhcnkgY2F0YWxvZ3VlcyBhcyAic2xpZ2h0bHkKZm94ZWQsIiBhbHRob3VnaCBpdCB3b3VsZCBiZSBtb3JlIGhvbmVzdCB0byBhZG1pdCB0aGF0IGl0IGxvb2tlZCBhcyB0aG91Z2gKaXQgaGFkIGJlZW4gYmFkZ2VyZWQsIHdvbHZlZCBhbmQgcG9zc2libHkgYmVhcmVkIGFzIHdlbGwuCgogIFtUaGUgTGlnaHQgRmFudGFzdGljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gNDEtNDIKJXBhc3NhZ2UgNQpUaGUgYmFyYmFyaWFuIGNoaWVmdGFpbiBzYWlkOiAgIldoYXQgdGhlbiBhcmUgdGhlIGdyZWF0ZXN0IHRoaW5ncyB0aGF0IGEKbWFuIG1heSBmaW5kIGluIGxpZmU/IiAgVGhpcyBpcyB0aGUgc29ydCBvZiB0aGluZyB5b3UncmUgc3VwcG9zZWQgdG8gc2F5IHRvCm1haW50YWluIHN0ZXBwZWNyZWQgaW4gYmFyYmFyaWFuIGNpcmNsZXMuCgpUaGUgbWFuIG9uIGhpcyByaWdodCB0aG91Z2h0ZnVsbHkgZHJhbmsgaGlzIGNvY2t0YWlsIG9mIG1hcmUncyBtaWxrIGFuZApzbm93Y2F0IGJsb29kLCBhbmQgc3Bva2UgdGh1czogICJUaGUgY3Jpc3AgaG9yaXpvbiBvZiB0aGUgc3RlcHBlLCB0aGUgd2luZAppbiB5b3VyIGhhaXIsIGEgZnJlc2ggaG9yc2UgdW5kZXIgeW91LiIKClRoZSBtYW4gb24gaGlzIGxlZnQgc2FpZDogICJUaGUgY3J5IG9mIHRoZSB3aGl0ZSBlYWdsZSBpbiB0aGUgaGVpZ2h0cywgdGhlCmZhbGwgb2Ygc25vdyBpbiB0aGUgZm9yZXN0LCBhIHRydWUgYXJyb3cgaW4geW91ciBib3cuIgoKVGhlIGNoaWVmdGFpbiBub2RkZWQgYW5kIHNhaWQ6ICAiU3VyZWx5IGl0IGlzIHRoZSBzaWdodCBvZiB5b3VyIGVuZW15CnNsYWluLCB0aGUgaHVtaWxpYXRpb24gb2YgaGlzIHRyaWJlIGFuZCB0aGUgbGFtZW50YXRpb24gb2YgaGlzIHdvbWVuLiIKClRoZXJlIHdhcyBhIGdlbmVyYWwgbXVybXVyIG9mIHdoaXNrZXJ5IGFwcHJvdmFsIGF0IHRoaXMgb3V0cmFnZW91cyBkaXNwbGF5LgoKVGhlbiB0aGUgY2hpZWZ0YWluIHR1cm5lZCByZXNwZWN0ZnVsbHkgdG8gaGlzIGd1ZXN0LCBhIHNtYWxsIGZpZ3VyZQpjYXJlZnVsbHkgd2FybWluZyBoaXMgY2hpbGJsYWlucyBieSB0aGUgZmlyZSwgYW5kIHNhaWQ6ICAiQnV0IG91ciBndWVzdCwKd2hvc2UgbmFtZSBpcyBsZWdlbmQsIG11c3QgdGVsbCB1cyB0cnVseTogIHdoYXQgaXMgaXQgdGhhdCBhIG1hbiBtYXkgY2FsbAp0aGUgZ3JlYXRlc3QgdGhpbmdzIGluIGxpZmU/IgoKVGhlIGd1ZXN0IHBhdXNlZCBpbiB0aGUgbWlkZGxlIG9mIGFub3RoZXIgdW5zdWNjZXNzZnVsIGF0dGVtcHQgdG8gbGlnaHQgdXAuCgoiV2hhdCBzaGF5PyIgaGUgc2FpZCwgdG9vdGhsZXNzbHkuCgoiSSBzYWlkOiAgd2hhdCBpcyBpdCB0aGF0IGEgbWFuIG1heSBjYWxsIHRoZSBncmVhdGVzdCB0aGluZ3MgaW4gbGlmZT8iCgpUaGUgd2FycmlvcnMgbGVhbmVkIGNsb3Nlci4gIFRoaXMgc2hvdWxkIGJlIHdvcnRoIGhlYXJpbmcuCgpUaGUgZ3Vlc3QgdGhvdWdodCBsb25nIGFuZCBoYXJkIGFuZCB0aGVuIHNhaWQsIHdpdGggZGVsaWJlcmF0aW9uOiAgIkhvdAp3YXRlciwgZ29vZCBkZW50aXNodHJ5IGFuZCBzaG9mdCBsYXZhdG9yeSBwYXBlci4iCgogIFtUaGUgTGlnaHQgRmFudGFzdGljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiA0OCAoSGFuemVsIGFuZCBHcmV0ZWwsIG9idmlvdXNseS4uLikKJXBhc3NhZ2UgNgoiSGF2ZSBhIGJpdCBtb3JlIHRhYmxlLCIgc2FpZCBSaW5jZXdpbmQuCgoiTm8gdGhhbmtzLCBJIGRvbid0IGxpa2UgbWFyemlwYW4sIiBzYWlkIFR3b2Zsb3dlci4gICJBbnl3YXksIEknbSBzdXJlIGl0J3MKbm90IHJpZ2h0IHRvIGVhdCBvdGhlciBwZW9wbGUncyBmdXJuaXR1cmUuIgoKIkRvbid0IHdvcnJ5LCIgc2FpZCBTd2lyZXMuICAiVGhlIG9sZCB3aXRjaCBoYXNuJ3QgYmVlbiBzZWVuIGZvciB5ZWFycy4KVGhleSBzYXkgc2hlIHdhcyBkb25lIHVwIGdvb2QgYW5kIHByb3BlciBieSBhIGNvdXBsZSBvZiB5b3VuZyB0ZWFyYXdheXMuIgoKIktpZHMgb2YgdG9kYXksIiBzYWlkIFJpbmNld2luZC4KCiJJIGJsYW1lIHRoZSBwYXJlbnRzLCIgc2FpZCBUd29mbG93ZXIuCgogIFtUaGUgTGlnaHQgRmFudGFzdGljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxMDMKJXBhc3NhZ2UgNwpJdCBpcyBhIHdlbGwga25vd24gZmFjdCB0aGF0IHdhcnJpb3JzIGFuZCB3aXphcmRzIGRvIG5vdCBnZXQgYWxvbmcsIGJlY2F1c2UKb25lIHNpZGUgY29uc2lkZXJzIHRoZSBvdGhlciBzaWRlIHRvIGJlIGEgY29sbGVjdGlvbiBvZiBibG9vZHRoaXJzdHkgaWRpb3RzCndobyBjYW4ndCB3YWxrIGFuZCB0aGluayBhdCB0aGUgc2FtZSB0aW1lLCB3aGlsZSB0aGUgb3RoZXIgc2lkZSBpcyBuYXR1cmFsbHkKc3VzcGljaW91cyBvZiBhIGJvZHkgb2YgbWVuIHdobyBtdW1ibGUgYSBsb3QgYW5kIHdlYXIgbG9uZyBkcmVzc2VzLiAgT2gsIHNheQp0aGUgd2l6YXJkcywgaWYgd2UncmUgZ29pbmcgdG8gYmUgbGlrZSB0aGF0LCB0aGVuLCB3aGF0IGFib3V0IGFsbCB0aG9zZQpzdHVkZGVkIGNvbGxhcnMgYW5kIG9pbGVkIG11c2NsZXMgZG93biBhdCB0aGUgWW91bmcgTWVuJ3MgUGFnYW4gQXNzb2NpYXRpb24/ClRvIHdoaWNoIHRoZSBoZXJvZXMgcmVwbHksIHRoYXQncyBhIHByZXR0eSBnb29kIGFsbGVnYXRpb24gY29taW5nIGZyb20gYQpidW5jaCBvZiB3aW1wc29lcyB3aG8gd29uJ3QgZ28gbmVhciBhIHdvbWFuIG9uIGFjY291bnQsIGNhbiB5b3UgYmVsaWV2ZSBpdCwKb2YgdGhlaXIgbXlzdGljYWwgcG93ZXIgYmVpbmcgc29ydCBvZiBkcmFpbmVkIG91dC4gIFJpZ2h0LCBzYXkgdGhlIHdpemFyZHMsCnRoYXQganVzdCBhYm91dCBkb2VzIGl0LCB5b3UgYW5kIHlvdXIgbGVhdGhlciBwb3NpbmcgcG91Y2hlcy4gIE9oIHllYWgsIHNheQp0aGUgaGVyb2VzLCB3aHkgZG9uJ3QgeW91Li4uCgpBbmQgc28gb24uICBUaGlzIHNvcnQgb2YgdGhpbmcgaGFzIGJlZW4gZ29pbmcgb24gZm9yIGNlbnR1cmllcywgYW5kIGNhdXNlZAphIG51bWJlciBvZiBtYWpvciBiYXR0bGVzIHdoaWNoIGhhdmUgbGVmdCBsYXJnZSB0cmFjdHMgb2YgbGFuZCB1bmluaGFiaXRhYmxlCmJlY2F1c2Ugb2YgbWFnaWNhbCBoYXJtb25pY3MuCgogIFtUaGUgTGlnaHQgRmFudGFzdGljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxMjgKJXBhc3NhZ2UgOAoiSGUnc2ggbWFkPyIKCiJTb3J0IG9mIG1hZC4gIEJ1dCBtYWQgd2l0aCBsb3RzIG9mIG1vbmV5LiIKCiJBaCwgdGhlbiBoZSBjYW4ndCBiZSBtYWQuICBJJ3ZlIGJlZW4gYXJvdW5kOyBpZiBhIG1hbiBoYXNoIGxvdHNoIG9mIG1vbmV5CmhlJ3NoIGp1c3QgZWNzaGVudHJpYy4iCgogIFtUaGUgTGlnaHQgRmFudGFzdGljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxODIgKENvaGVuIGlzIG5vdyB3ZWFyaW5nIGRlbnR1cmVzIHdpdGggdGVldGggbWFkZSBmcm9tIGRpYW1vbmRzKQolcGFzc2FnZSA5CkNvaGVuIHRhcHBlZCBoaW0gb24gdGhlIHNob3VsZGVyLiAgVGhlIG1hbiBsb29rZWQgYXJvdW5kIGlycml0YWJseS4KCiJXaGF0IGRvIHlvdSB3YW50LCBncmFuZGFkPyIgaGUgc25hcmxlZC4KCkNvaGVuIHBhdXNlZCB1bnRpbCBoZSBoYWQgdGhlIG1hbidzIGZ1bGwgYXR0ZW50aW9uLCBhbmQgdGhlbiBoZSBzbWlsZWQuICBJdAp3YXMgYSBzbG93LCBsYXp5IHNtaWxlLCB1bnZlaWxpbmcgYWJvdXQgMzAwIGNhcmF0cyBvZiBtb3V0aCBqZXdlbHJ5IHRoYXQKc2VlbWVkIHRvIGxpZ2h0IHVwIHRoZSByb29tLgoKIkkgd2lsbCBjb3VudCB0byB0aHJlZSwiIGhlIHNhaWQsIGluIGEgZnJpZW5kbHkgdG9uZSBvZiB2b2ljZS4gICJPbmUsIFR3by4iCkhpcyBib255IGtuZWUgY2FtZSB1cCBpbiB0aGUgbWFuJ3MgZ3JvaW4gd2l0aCBhIHNhdGlzZnlpbmdseSBtZWF0eSBub2lzZSwKYW5kIGhlIGhhbGYtdHVybmVkIHRvIGJyaW5nIHRoZSBmdWxsIGZvcmNlIG9mIGFuIGVsYm93IGludG8gdGhlIGtpZG5leXMgYXMKdGhlIGxlYWRlciBjb2xsYXBzZWQgYXJvdW5kIGhpcyBwcml2YXRlIHVuaXZlcnNlIG9mIHBhaW4uCgoiVGhyZWUsIiB0byB0b2xkIHRoZSBiYWxsIG9mIGFnb255IG9uIHRoZSBmbG9vci4gIENvaGVuIGhhZCBoZWFyZCBvZgpmaWdodGluZyBmYWlyLCBhbmQgaGFkIGxvbmcgYWdvIGRlY2lkZWQgaGUgd2FudGVkIG5vIHBhcnQgb2YgaXQuCgogIFtUaGUgTGlnaHQgRmFudGFzdGljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMTkzLTE5NCAodGhpcyBwYXNzYWdlIGlzIHRoZSBkYXRhLmJhc2UgcXVvdGUgZm9yIHNob3BrZWVwZXIpCiVwYXNzYWdlIDEwClRoZXJlIGhhdmUgYmVlbiB0aHJlZSBnZW5lcmFsIHRoZW9yaWVzIHB1dCBmb3J3YXJkIHRvIGV4cGxhaW4gdGhlCnBoZW5vbWVub24gb2YgdGhlIHdhbmRlcmluZyBzaG9wcywgb3IgYXMgdGhleSBhcmUgZ2VuZXJpY2FsbHkga25vd24sCi90YWJlcm5hZSB2YWdhbnRlcy8uCgpUaGUgZmlyc3QgcG9zdHVsYXRlcyB0aGF0IG1hbnkgdGhvdXNhbmRzIG9mIHllYXJzIGFnbyB0aGVyZSBldm9sdmVkCnNvbWV3aGVyZSBpbiB0aGUgbXVsdGl2ZXJzZSBhIHJhY2Ugd2hvc2Ugc2luZ2xlIHRhbGVudCB3YXMgdG8gYnV5IGNoZWFwCmFuZCBzZWxsIGRlYXIuICBTb29uIHRoZXkgY29udHJvbGxlZCBhIHZhc3QgZ2FsYWN0aWMgZW1waXJlIG9yLCBhcyB0aGV5IHB1dAppdCwgRW1wb3JpdW0sIGFuZCB0aGUgbW9yZSBhZHZhbmNlZCBtZW1iZXJzIG9mIHRoZSBzcGVjaWVzIGZvdW5kIGEgd2F5IHRvCmVxdWlwIHRoZWlyIHZlcnkgc2hvcHMgd2l0aCB1bmlxdWUgcHJvcHVsc2lvbiB1bml0cyB0aGF0IGNvdWxkIGJyZWFrIHRoZQpkYXJrIHdhbGxzIG9mIHNwYWNlIGl0c2VsZiBhbmQgb3BlbiB1cCB2YXN0IG5ldyBtYXJrZXRzLiAgQW5kIGxvbmcgYWZ0ZXIKdGhlIHdvcmxkcyBvZiB0aGUgRW1wb3JpdW0gcGVyaXNoZWQgaW4gdGhlIGhlYXQgZGVhdGggb2YgdGhlaXIgcGFydGljdWxhcgp1bml2ZXJzZSwgYWZ0ZXIgb25lIGxhc3QgZGVmaWFudCBmaXJlIHNhbGUsIHRoZSB3YW5kZXJpbmcgc3RhcnNob3BzIHN0aWxsCnBseSB0aGVpciB0cmFkZSwgZWF0aW5nIHRoZWlyIHdheSB0aHJvdWdoIHRoZSBwYWdlcyBvZiBzcGFjZS10aW1lIGxpa2UgYQp3b3JtIHRocm91Z2ggYSB0aHJlZS12b2x1bWUgbm92ZWwuCgpUaGUgc2Vjb25kIGlzIHRoYXQgdGhleSBhcmUgdGhlIGNyZWF0aW9uIG9mIGEgc3ltcGF0aGV0aWMgRmF0ZSwgY2hhcmdlZAp3aXRoIHRoZSByb2xlIG9mIHN1cHBseWluZyBleGFjdGx5IHRoZSByaWdodCB0aGluZyBhdCB0aGUgcmlnaHQgdGltZS4KClRoZSB0aGlyZCBpcyB0aGF0IHRoZXkgYXJlIHNpbXBseSBhIHZlcnkgY2xldmVyIHdheSBvZiBnZXR0aW5nIGFyb3VuZCB0aGUKdmFyaW91cyBTdW5kYXkgQ2xvc2luZyBhY3RzLgoKQWxsIHRoZXNlIHRoZW9yaWVzLCBkaXZlcnNlIGFzIHRoZXkgYXJlLCBoYXZlIHR3byB0aGluZ3MgaW4gY29tbW9uLiAgVGhleQpleHBsYWluIHRoZSBvYnNlcnZlZCBmYWN0cywgYW5kIHRoZXkgYXJlIGNvbXBsZXRlbHkgYW5kIHV0dGVybHkgd3JvbmcuCgogIFtUaGUgTGlnaHQgRmFudGFzdGljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyMDUKJXBhc3NhZ2UgMTEKIldoZXJlIGRvIHRoZXkgYWxsIGNvbWUgZnJvbT8iIHNhaWQgVHdvZmxvd2VyLCBhcyB0aGV5IGZsZWQgeWV0IGFub3RoZXIgbW9iLgoKIkluc2lkZSBldmVyeSBzYW5lIHBlcnNvbiB0aGVyZSdzIGEgbWFkbWFuIHN0cnVnZ2xpbmcgdG8gZ2V0IG91dCwiIHNhaWQgdGhlCnNob3BrZWVwZXIsICAiVGhhdCdzIHdoYXQgSSd2ZSBhbHdheXMgdGhvdWdodC4gIE5vIG9uZSBnb2VzIG1hZCBxdWlja2VyIHRoYW4KYSB0b3RhbGx5IHNhbmUgcGVyc29uLiIKCiAgW1RoZSBMaWdodCBGYW50YXN0aWMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAyMjktMjMwICgnZ3JleSc6IEJyaXRpc2ggc3BlbGxpbmcgaXMgYWNjdXJhdGUpCiVwYXNzYWdlIDEyClRyeW1vbiB3YXMgbG9va2luZyBhdCBoaW0uICAvU29tZXRoaW5nLyB3YXMgbG9va2luZyBhdCBoaW0uICBBbmQgc3RpbGwgdGhlCm90aGVycyBoYWRuJ3Qgbm90aWNlZC4gIENvdWxkIGhlIGV2ZW4gZXhwbGFpbiBpdD8gIFRyeW1vbiBsb29rZWQgdGhlIHNhbWUKYXMgaGUgaGFkIGFsd2F5cyBkb25lLCBleGNlcHQgZm9yIHRoZSBleWVzLCBhbmQgYSBzbGlnaHQgc2hlZW4gdG8gaGlzIHNraW4uCgpSaW5jZXdpbmQgc3RhcmVkLCBhbmQga25ldyB0aGF0IHRoZXJlIHdlcmUgZmFyIHdvcnNlIHRoaW5ncyB0aGFuIEV2aWwuICBBbGwKdGhlIGRlbW9ucyBpbiBIZWxsIHdvdWxkIHRvcnR1cmUgeW91ciB2ZXJ5IHNvdWwsIGJ1dCB0aGF0IHdhcyBwcmVjaXNlbHkKYmVjYXVzZSB0aGV5IHZhbHVlIHNvdWxzIHZlcnkgaGlnaGx5OyBldmlsIHdvdWxkIGFsd2F5cyB0cnkgdG8gc3RlYWwgdGhlCnVuaXZlcnNlLCBidXQgYXQgbGVhc3QgaXQgY29uc2lkZXJlZCB0aGUgdW5pdmVyc2Ugd29ydGggc3RlYWxpbmcuICBCdXQgdGhlCmdyZXkgd29ybGQgYmVoaW5kIHRob3NlIGVtcHR5IGV5ZXMgd291bGQgdHJhbXBsZSBhbmQgZGVzdHJveSB3aXRob3V0IGV2ZW4KYWNjb3JkaW5nIGl0cyB2aWN0aW1zIHRoZSBkaWduaXR5IG9mIGhhdHJlZC4gIEl0IHdvdWxkbid0IGV2ZW4gbm90aWNlIHRoZW0uCgogIFtUaGUgTGlnaHQgRmFudGFzdGljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKJWUgdGl0bGUKIwojCiMKJXRpdGxlIEVxdWFsIFJpdGVzICgxMCkKIyBwLiAxMTggKFNpZ25ldCBlZGl0aW9uOyBwYXNzYWdlIHN0YXJ0cyBtaWQtc2VudGVuY2UgYW5kIGVuZHMgbWlkLXBhcmFncmFwaCkKJXBhc3NhZ2UgMQpbLi4uXSBpdCBpcyB3ZWxsIGtub3duIHRoYXQgYSB2aXRhbCBpbmdyZWRpZW50IG9mIHN1Y2Nlc3MgaXMgbm90IGtub3dpbmcKdGhhdCB3aGF0IHlvdSdyZSBhdHRlbXB0aW5nIGNhbid0IGJlIGRvbmUuICBbLi4uXQoKICBbRXF1YWwgUml0ZXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDIxOCAoc3BlYWtlciBpcyBHcmFubnkgV2VhdGhlcndheCkKJXBhc3NhZ2UgMgoiTWlsbGlvbi10by1vbmUgY2hhbmNlcywiIHNoZSBzYWlkLCAiY3JvcCB1cCBuaW5lIHRpbWVzIG91dCBvZiB0ZW4uIgoKICBbRXF1YWwgUml0ZXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiA5Ni05NyAoJ1Rhbm5veSc6IHB1YmxpYyBhZGRyZXNzIHNwZWFrZXIpCiVwYXNzYWdlIDMKQW5pbWFsIG1pbmRzIGFyZSBzaW1wbGUsIGFuZCB0aGVyZWZvcmUgc2hhcnAuICBBbmltYWxzIG5ldmVyIHNwZW5kIHRpbWUKZGl2aWRpbmcgZXhwZXJpZW5jZSBpbnRvIGxpdHRsZSBiaXRzIGFuZCBzcGVjdWxhdGluZyBhYm91dCBhbGwgdGhlIGJpdHMKdGhleSd2ZSBtaXNzZWQuICBUaGUgd2hvbGUgcGFub3BseSBvZiB0aGUgdW5pdmVyc2UgaGFzIGJlZW4gbmVhdGx5CmV4cHJlc3NlZCB0byB0aGVtIGFzIHRoaW5ncyB0byAoYSkgbWF0ZSB3aXRoLCAoYikgZWF0LCAoYykgcnVuIGF3YXkgZnJvbSwKYW5kIChkKSByb2Nrcy4gIFRoaXMgZnJlZXMgdGhlIG1pbmQgZnJvbSB1bm5lY2Vzc2FyeSB0aG91Z2h0cyBhbmQgZ2l2ZXMKaXQgYSBjdXR0aW5nIGVkZ2Ugd2hlcmUgaXQgbWF0dGVycy4gIFlvdXIgbm9ybWFsIGFuaW1hbCwgaW4gZmFjdCwgbmV2ZXIKdHJpZXMgdG8gd2FsayBhbmQgY2hldyBndW0gYXQgdGhlIHNhbWUgdGltZS4KClRoZSBhdmVyYWdlIGh1bWFuLCBvbiB0aGUgb3RoZXIgaGFuZCwgdGhpbmtzIGFib3V0IGFsbCBzb3J0cyBvZiB0aGluZ3MKYXJvdW5kIHRoZSBjbG9jaywgb24gYWxsIHNvcnRzIG9mIGxldmVscywgd2l0aCBpbnRlcnJ1cHRpb25zIGZyb20gZG96ZW5zCm9mIGJpb2xvZ2ljYWwgY2FsZW5kYXJzIGFuZCB0aW1lcGllY2VzLiAgVGhlcmUncyB0aG91Z2h0cyBhYm91dCB0byBiZSBzYWlkLAphbmQgcHJpdmF0ZSB0aG91Z2h0cywgYW5kIHJlYWwgdGhvdWdodHMsIGFuZCB0aG91Z2h0cyBhYm91dCB0aG91Z2h0cywgYW5kCmEgd2hvbGUgZ2FtdXQgb2Ygc3ViY29uc2Npb3VzIHRob3VnaHRzLiAgVG8gYSB0ZWxlcGF0aCB0aGUgaHVtYW4gaGVhZCBpcwphIGRpbi4gIEl0IGlzIGEgcmFpbHdheSB0ZXJtaW51cyB3aXRoIGFsbCB0aGUgVGFubm95cyB0YWxraW5nIGF0IG9uY2UuCkl0IGlzIGEgY29tcGxldGUgRk0gd2F2ZWJhbmQtLWFuZCBzb21lIG9mIHRob3NlIHN0YXRpb25zIGFyZW4ndCByZXB1dGFibGUsCnRoZXkncmUgb3V0bGF3ZWQgcGlyYXRlcyBvbiBmb3JiaWRkZW4gc2VhcyB3aG8gcGxheSBsYXRlLW5pZ2h0IHJlY29yZHMgd2l0aApsaW1iaWMgbHlyaWNzLgoKICBbRXF1YWwgUml0ZXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAxOC0xOQolcGFzc2FnZSA0ClNtaXRoIHRvb2sgYSBzcGFkZSBmcm9tIGJlc2lkZSB0aGUgYmFjayBkb29yIGFuZCBoZXNpdGF0ZWQuCgoiR3Jhbm55LiIKCiJXaGF0PyIKCiJEbyB5b3Uga25vdyBob3cgd2l6YXJkcyBsaWtlIHRvIGJlIGJ1cmllZD8iCgoiWWVzISIKCiJXZWxsLCBob3c/IgoKR3Jhbm55IHBhdXNlZCBhdCB0aGUgYm90dG9tIG9mIHRoZSBzdGFpcnMuCgoiUmVsdWN0YW50bHkuIgoKICBbRXF1YWwgUml0ZXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDcwCiVwYXNzYWdlIDUKR3Jhbm55IHNpZ2hlZC4gICJZb3UgaGF2ZSBsZWFybmVkIHNvbWV0aGluZywiIHNoZSBzYWlkLCBhbmQgdGhvdWdodCBpdAp3YXMgc2FmZSB0byBpbnNlcnQgYSB0b3VjaCBvZiBzdGVybm5lc3MgaW50byBoZXIgdm9pY2UuICAiVGhleSBzYXkgdGhhdCBhCmxpdHRsZSBrbm93bGVkZ2UgaXMgYSBkYW5nZXJvdXMgdGhpbmcsIGJ1dCBpdCBpcyBub3Qgb25lIGhhbGYgc28gYmFkIGFzIGEKbG90IG9mIGlnbm9yYW5jZS4iCgogIFtFcXVhbCBSaXRlcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDExMy0xMTQgKEVzayBpcyBhIHlvdW5nIGdpcmwpCiVwYXNzYWdlIDYKVGhlIGJhcmdlcyBzdG9wcGVkIGF0IHNvbWUgb2YgdGhlIHRvd25zLiAgQnkgdHJhZGl0aW9uIG9ubHkgdGhlIG1lbiB3ZW50CmFzaG9yZSwgYW5kIG9ubHkgQW1zY2hhdCwgd2VhcmluZyBoaXMgY2VyZW1vbmlhbCBMeWluZyBoYXQsIHNwb2tlIHRvCm5vbi1ab29ucy4gIEVzayB1c3VhbGx5IHdlbnQgd2l0aCBoaW0uICBIZSB0cmllZCBoaW50aW5nIHRoYXQgc2hlIHNob3VsZApvYmV5IHRoZSB1bndyaXR0ZW4gcnVsZXMgb2YgWm9vbiBsaWZlIGFuZCBzdGF5IGFmbG9hdCwgYnV0IGEgaGludCB3YXMgdG8KRXNrIHdoYXQgYSBtb3NxdWl0byBiaXRlIHdhcyB0byB0aGUgYXZlcmFnZSByaGlubyBiZWNhdXNlIHNoZSB3YXMgYWxyZWFkeQpsZWFybmluZyB0aGF0IGlmIHlvdSBpZ25vcmUgdGhlIHJ1bGVzIHBlb3BsZSB3aWxsLCBoYWxmIHRoZSB0aW1lLCBxdWlldGx5CnJld3JpdGUgdGhlbSBzbyB0aGF0IHRoZXkgZG9uJ3QgYXBwbHkgdG8geW91LgoKICBbRXF1YWwgUml0ZXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAxMTktMTIwIChuZXh0IHBhc3NhZ2UgaXMgYSBkaXJlY3QgY29udGludWF0aW9uIG9mIHRoaXMgb25lKQolcGFzc2FnZSA3ClRoZSB0b3duIHdhcyBzbWFsbGVyIHRoYW4gT2h1bGFuLCBhbmQgdmVyeSBkaWZmZXJlbnQgYmVjYXVzZSBpdCBsYXkgb24gdGhlCmp1bmN0aW9uIG9mIHRocmVlIHRyYWRlIHJvdXRlcyBxdWl0ZSBhcGFydCBmcm9tIHRoZSByaXZlciBpdHNlbGYuICBJdCB3YXMKYnVpbHQgYXJvdW5kIG9uZSBlbm9ybW91cyBzcXVhcmUgd2hpY2ggd2FzIGEgY3Jvc3MgYmV0d2VlbiBhIHBlcm1hbmVudApleG90aWMgdHJhZmZpYyBqYW0gYW5kIGEgdGVudCB2aWxsYWdlLiAgQ2FtZWxzIGtpY2tlZCBtdWxlcywgbXVsZXMga2lja2VkCmhvcnNlcywgaG9yc2VzIGtpY2tlZCBjYW1lbHMgYW5kIHRoZXkgYWxsIGtpY2tlZCBodW1hbnM7IHRoZXJlIHdhcyBhIHJpb3QKb2YgY29sb3VycywgYSBkaW4gb2Ygbm9pc2UsIGEgbmFzYWwgb3JjaGVzdHJhdGlvbiBvZiBzbWVsbHMgYW5kIHRoZSBzdGVhZHksCmhlYWR5IHNvdW5kIG9mIGh1bmRyZWRzIG9mIHBlb3BsZSB3b3JraW5nIGhhcmQgYXQgbWFraW5nIG1vbmV5LgoKT25lIHJlYXNvbiBmb3IgdGhlIGJ1c3RsZSB3YXMgdGhhdCBvdmVyIGxhcmdlIHBhcnRzIG9mIHRoZSBjb250aW5lbnQgb3RoZXIKcGVvcGxlIHByZWZlcnJlZCB0byBtYWtlIG1vbmV5IHdpdGhvdXQgd29ya2luZyBhdCBhbGwsIGFuZCBzaW5jZSB0aGUgRGlzYwpoYWQgeWV0IHRvIGRldmVsb3AgYSBtdXNpYyByZWNvcmRpbmcgaW5kdXN0cnkgdGhleSB3ZXJlIGZvcmNlZCB0byBmYWxsIGJhY2sKb24gb2xkZXIsIG1vcmUgdHJhZGl0aW9uYWwgZm9ybXMgb2YgYmFuZGl0cnkuCgpTdHJhbmdlbHkgZW5vdWdoIHRoZXNlIG9mdGVuIGludm9sdmVkIGNvbnNpZGVyYWJsZSBlZmZvcnQuICBSb2xsaW5nIGhlYXZ5CnJvY2tzIHRvIHRoZSB0b3Agb2YgY2xpZmZzIGZvciBhIGRlY2VudCBhbWJ1c2gsIGN1dHRpbmcgZG93biB0cmVlcyB0bwpibG9jayB0aGUgcm9hZCwgYW5kIGRpZ2dpbmcgYSBwaXQgbGluZWQgd2l0aCBzcGlrZXMgd2hpbGUgc3RpbGwga2VlcGluZyBhCndpY2tlZCBlZGdlIG9uIGEgZGFnZ2VyIHByb2JhYmx5IGludm9sdmVkIGEgbXVjaCBncmVhdGVyIGV4cGVuZGl0dXJlIG9mCnRob3VnaHQgYW5kIG11c2NsZSB0aGFuIG1vcmUgc29jaWFsbHktYWNjZXB0YWJsZSBwcm9mZXNzaW9ucyBidXQsCm5ldmVydGhlbGVzcywgdGhlcmUgd2VyZSBzdGlsbCBwZW9wbGUgbWlzZ3VpZGVkIGVub3VnaCB0byBlbmR1cmUgYWxsIHRoaXMsCnBsdXMgbG9uZyBuaWdodHMgaW4gdW5jb21mb3J0YWJsZSBzdXJyb3VuZGluZ3MsIG1lcmVseSB0byBnZXQgdGhlaXIgaGFuZHMKb24gcGVyZmVjdGx5IG9yZGluYXJ5IGxhcmdlIGJveGVzIG9mIGpld2Vscy4KCiAgW0VxdWFsIFJpdGVzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMTIwLTEyMSAodGhpcyBwYXNzYWdlIGlzIGEgZGlyZWN0IGNvbnRpbnVhdGlvbiBvZiBwcmVjZWRpbmcgb25lOwojICAgICAgICAgICAgICAiSSBzYWlkLCB3aGF0IGlzIGhhcHBlbmluZyBoZXJlPyIgYWN0dWFsbHkgb21pdHMgImlzIgojICAgICAgICAgICAgICBidXQgbXVzdCBiZSBhIHR5cG8tLWZpeGVkIGhlcmUgdG8gYXZvaWQgYnVnIHJlcG9ydHM7CiMgICAgICAgICAgICAgICdicm9vbXN0aWNrJyBpcyBFc2sncyBkaXNndWlzZWQgd2l6YXJkJ3Mgc3RhZmYpCiVwYXNzYWdlIDgKU28gYSB0b3duIGxpa2UgWmVtcGhpcyB3YXMgdGhlIHBsYWNlIHdoZXJlIGNhcmF2YW5zIHNwbGl0LCBtaW5nbGVkIGFuZApjYW1lIHRvZ2V0aGVyIGFnYWluLCBhcyBkb3plbnMgb2YgbWVyY2hhbnRzIGFuZCB0cmF2ZWxsZXJzIGJhbmRlZCB0b2dldGhlcgpmb3IgcHJvdGVjdGlvbiBhZ2FpbnN0IHRoZSBzb2NpYWxseSBkaXNhZHZhbnRhZ2VkIG9uIHRoZSB0cmFpbHMgYWhlYWQuCkVzaywgd2FuZGVyaW5nIHVucmVnYXJkZWQgYW1pZHN0IHRoZSBidXN0bGUsIGxlYXJuZWQgYWxsIHRoaXMgYnkgdGhlIHNpbXBsZQptZXRob2Qgb2YgZmluZGluZyBzb21lb25lIHdobyBsb29rZWQgaW1wb3J0YW50IGFuZCB0dWdnaW5nIG9uIHRoZSBoZW0gb2YKaGlzIGNvYXQuCgpUaGlzIHBhcnRpY3VsYXIgbWFuIHdhcyBjb3VudGluZyBiYWxlcyBvZiB0b2JhY2NvIGFuZCB3b3VsZCBoYXZlIHN1Y2NlZWRlZApidXQgZm9yIHRoZSBpbnRlcnJ1cHRpb24uCgoiV2hhdD8iCgoiSSBzYWlkLCB3aGF0IGlzIGhhcHBlbmluZyBoZXJlPyIKClRoZSBtYW4gbWVhbnQgdG8gc2F5OiAgIlB1c2ggb2ZmIGFuZCBib3RoZXIgc29tZW9uZSBlbHNlLiIgIEhlIG1lYW50IHRvCmdpdmUgaGVyIGEgbGlnaHQgY3VmZiBhYm91dCB0aGUgaGVhZC4gIFNvIGhlIHdhcyBhc3RvbmlzaGVkIHRvIGZpbmQgaGltc2VsZgpiZW5kaW5nIGRvd24gYW5kIHRhbGtpbmcgc2VyaW91c2x5IHRvIGEgc21hbGwsIGdydWJieS1mYWNlZCBjaGlsZCBob2xkaW5nCmEgbGFyZ2UgYnJvb21zdGljayAod2hpY2ggYWxzbywgaXQgc2VlbWVkIHRvIGhpbSBsYXRlciwgd2FzIGluIHNvbWUKaW5kZWZpbmFibGUgd2F5IC9wYXlpbmcgYXR0ZW50aW9uLykuCgpIZSBleHBsYWluZWQgYWJvdXQgdGhlIGNhcmF2YW5zLiAgVGhlIGNoaWxkIG5vZGRlZC4KCiJQZW9wbGUgYWxsIGdldCB0b2dldGhlciB0byB0cmF2ZWw/IgoKIlByZWNpc2VseS4iCgoiV2hlcmUgdG8/IgoKIkFsbCBzb3J0cyBvZiBwbGFjZXMuICBTdG8gTGF0LCBQc2V1ZG9wb2xpcy4uLiBBbmtoLU1vcnBvcmssIG9mIGNvdXJzZS4uLi4iCgoiQnV0IHRoZSByaXZlciBnb2VzIHRoZXJlLCIgc2FpZCBFc2ssIHJlYXNvbmFibHkuICAiQmFyZ2VzLiAgVGhlIFpvb25zLiIKCiJBaCwgeWVzLCIgc2FpZCB0aGUgbWVyY2hhbnQsICJidXQgdGhleSBjaGFyZ2UgaGlnaCBwcmljZXMgYW5kIHRoZXkgY2FuJ3QKY2FycnkgZXZlcnl0aGluZyBhbmQsIGFueXdheSwgbm8gb25lIHRydXN0cyB0aGVtIG11Y2guIgoKIkJ1dCB0aGV5J3JlIHZlcnkgaG9uZXN0ISIKCiJIdWgsIHllcywiIGhlIHNhaWQuICAiQnV0IHlvdSBrbm93IHdoYXQgdGhleSBzYXk6ICBuZXZlciB0cnVzdCBhbiBob25lc3QKbWFuLiIgIEhlIHNtaWxlZCBrbm93aW5nbHkuCgoiV2hvIHNheXMgdGhhdD8iCgoiVGhleSBkby4gIFlvdSBrbm93LiAgUGVvcGxlLCIgaGUgc2FpZCwgYSBjZXJ0YWluIHVuZWFzaW5lc3MgZW50ZXJpbmcgaGlzCnZvaWNlLgoKIk9oLCIgc2FpZCBFc2suICBTaGUgdGhvdWdodCBhYm91dCBpdC4gICJUaGV5IG11c3QgYmUgdmVyeSBzaWxseSwiIHNoZSBzYWlkCnByaW1seS4gICJUaGFuayB5b3UsIGFueXdheS4iCgogIFtFcXVhbCBSaXRlcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDEyNy0xMjggKHRoaXMgdGltZSBicm9vbXN0aWNrIGlzIEdyYW5ueSdzIGRlZmVjdGl2ZSB3aXRjaCdzIGJyb29tc3RpY2spCiVwYXNzYWdlIDkKVGhlIGJyb29tc3RpY2sgbGF5IGJldHdlZW4gdHdvIHRyZXN0bGVzLiAgR3Jhbm55IFdlYXRoZXJ3YXggc2F0IG9uIGEgcm9jawpvdXRjcm9wIHdoaWxlIGEgZHdhcmYgaGFsZiBoZXIgaGVpZ2h0LCB3ZWFyaW5nIGFuIGFwcm9uIHRoYXQgd2FzIGEgbWFzcyBvZgpwb2NrZXRzLCB3YWxrZWQgYXJvdW5kIHRoZSBicm9vbSBhbmQgb2NjYXNpb25hbGx5IHBva2VkIGl0LgoKRXZlbnR1YWxseSBoZSBraWNrZWQgdGhlIGJyaXN0bGVzIGFuZCBnYXZlIGEgbG9uZyBpbnRha2Ugb2YgYnJlYXRoLCBhIHNvcnQKb2YgcmV2ZXJzZSB3aGlzdGxlLCB3aGljaCBpcyB0aGUgc2VjcmV0IHNpZ24gb2YgY3JhZnRzbWFuIGFjcm9zcyB0aGUKdW5pdmVyc2UgYW5kIG1lYW5zIHRoYXQgc29tZXRoaW5nIGV4cGVuc2l2ZSBpcyBhYm91dCB0byBoYXBwZW4uCgoiV2VlbGxsbCwiIGhlIHNhaWQuICAiSSBjb3VsZCBnZXQgdGhlIGFwcHJlbnRpY2VzIGluIHRvIGxvb2sgYXQgdGhpcywgSQpjb3VsZC4gIEl0J3MgYW4gZWR1Y2F0aW9uIGluIGl0c2VsZi4gIEFuZCB5b3Ugc2F5IGl0IGFjdHVhbGx5IG1hbmFnZWQgdG8KZ2V0IGFpcmJvcm5lPyIKCiJJdCBmbGV3IGxpa2UgYSBiaXJkLCIgc2FpZCBHcmFubnkuCgpUaGUgZHdhcmYgbGl0IGEgcGlwZS4gICJJIHNob3VsZCB2ZXJ5IG11Y2ggbGlrZSB0byBzZWUgdGhhdCBiaXJkLCIgaGUgc2FpZApyZWZsZWN0aXZlbHkuICAiSSBzaG91bGQgaW1hZ2luZSBpdCdzIHF1aXRlIHNvbWV0aGluZyB0byB3YXRjaCwgYSBiaXJkIGxpa2UKdGhhdC4iCgoiWWVzLCBidXQgY2FuIHlvdSByZXBhaXIgaXQ/IiBzYWlkIEdyYW5ueS4gICJJJ20gaW4gYSBodXJyeS4iCgpUaGUgZHdhcmYgc2F0IGRvd24sIHNsb3dseSBhbmQgZGVsaWJlcmF0ZWx5LgoKIkFzIGZvciAvcmVwYWlyLywiIGhlIHNhaWQsICJ3ZWxsLCBJIGRvbid0IGtub3cgYWJvdXQgL3JlcGFpci8uICBSZWJ1aWxkLAptYXliZS4gIE9mIGNvdXJzZSwgaXQncyBoYXJkIHRvIGdldCB0aGUgYnJpc3RsZXMgdGhlc2UgZGF5cyBldmVuIGlmIHlvdSBjYW4KZmluZCBwZW9wbGUgdG8gZG8gdGhlIHByb3BlciBiaW5kaW5nLCBhbmQgdGhlIHNwZWxscyBuZWVkLS0iCgoiSSBkb24ndCB3YW50IGl0IHJlYnVpbHQsIEkganVzdCB3YW50IGl0IHRvIHdvcmsgcHJvcGVybHksIiBzYWlkIEdyYW5ueS4KCiJJdCdzIGFuIGVhcmx5IG1vZGVsLCB5b3Ugc2VlLCIgdGhlIGR3YXJmIHBsdWdnZWQgb24uICAiVmVyeSB0cmlja3ksIHRob3NlCmVhcmx5IG1vZGVscy4gIFlvdSBjYW4ndCBnZXQgdGhlIHdvb2QtLSIKCkhlIHdhcyBwaWNrZWQgdXAgYm9kaWx5IHVudGlsIGhpcyBleWVzIHdlcmUgbGV2ZWwgd2l0aCBHcmFubnkncy4gIER3YXJ2ZXMsCmJlaW5nIG1hZ2ljYWwgaW4gdGhlbXNlbHZlcyBhcyBpdCB3ZXJlLCBhcmUgcXVpdGUgcmVzaXN0YW50IHRvIG1hZ2ljIGJ1dApoZXIgZXhwcmVzc2lvbiBsb29rZWQgYXMgdGhvdWdoIHNoZSB3YXMgdHJ5aW5nIHRvIHdlbGQgaGlzIGV5ZWJhbGxzIHRvIHRoZQpiYWNrIG9mIGhpcyBza3VsbC4KCiJKdXN0IHJlcGFpciBpdCwiIHNoZSBoaXNzZWQuICAiUGxlYXNlPyIKCiJXaGF0LCBtYWtlIGEgYm9kZ2Ugam9iPyIgc2FpZCB0aGUgZHdhcmYsIGhpcyBwaXBlIGNsYXR0ZXJpbmcgdG8gdGhlIGZsb29yLgoKIlllcy4iCgoiUGF0Y2ggaXQgdXAsIHlvdSBtZWFuPyAgQmV0cmF5IG15IHRyYWluaW5nIGJ5IGRvaW5nIGhhbGYgYSBqb2I/IgoKIlllcywiIHNhaWQgR3Jhbm55LiAgSGVyIHB1cGlscyB3ZXJlIHR3byBsaXR0bGUgYmxhY2sgaG9sZXMuCgoiT2gsIiBzYWlkIHRoZSBkd2FyZi4gICJSaWdodCwgdGhlbi4iCgogIFtFcXVhbCBSaXRlcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTg1IChhY3R1YWxseSB1c2VzIGZvdXIgcGVyaW9kcyB0byBtYXJrIGEgc2VudGVuY2UgZW5kaW5nIGluIGFuIGVsbGlwc2lzKQolcGFzc2FnZSAxMApUaGVyZSBtYXkgYmUgdW5pdmVyc2VzIHdoZXJlIGxpYnJhcmlhbnNoaXAgaXMgY29uc2lkZXJlZCBhIHBlYWNlZnVsIHNvcnQgb2YKb2NjdXBhdGlvbiwgYW5kIHdoZXJlIHRoZSByaXNrcyBhcmUgbGltaXRlZCB0byBsYXJnZSB2b2x1bWVzIGZhbGxpbmcgb2ZmCnRoZSBzaGVsdmVzIG9uIHRvIG9uZSdzIGhlYWQsIGJ1dCB0aGUga2VlcGVyIG9mIGEgL21hZ2ljLyBsaWJyYXJ5IGlzIG5vIGpvYgpmb3IgdGhlIHVud2FyeS4gIFNwZWxscyBoYXZlIHBvd2VyLCBhbmQgbWVyZWx5IHdyaXRpbmcgdGhlbSBkb3duIGFuZApzaG92aW5nIHRoZW0gYmV0d2VlbiBjb3ZlcnMgZG9lc24ndCBkbyBhbnl0aGluZyB0byByZWR1Y2UgaXQuICBUaGUgc3R1ZmYKbGVha3MuICBCb29rcyB0ZW5kIHRvIHJlYWN0IHdpdGggb25lIGFub3RoZXIsIGNyZWF0aW5nIHJhbmRvbWl6ZWQgbWFnaWMKd2l0aCBhIG1pbmQgb2YgaXRzIG93bi4gIEJvb2tzIG9mIG1hZ2ljIGFyZSB1c3VhbGx5IGNoYWluZWQgdG8gdGhlaXIKc2hlbHZlcywgYnV0IG5vdCB0byBwcmV2ZW50IHRoZW0gYmVpbmcgc3RvbGVuLi4uLgoKICBbRXF1YWwgUml0ZXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQolZSB0aXRsZQojCiMKIwoldGl0bGUgTW9ydCAoMTEpCiMgcC4gMTM2IChTaWduZXQgZWRpdGlvbjsgcGFzc2FnZSBpcyBhIGZvb3Rub3RlOwojICAgICAgICAgVmV0aW5hcmkgZG9lc24ndCBzaG93IHVwIGFzIHJlY3VycmluZyBQYXRyaWNpYW4gdW50aWwgL1NvdXJjZXJ5LykKJXBhc3NhZ2UgMQpBbmtoLU1vcnBvcmsgaGFkIGRhbGxpZWQgd2l0aCBtYW55IGZvcm1zIG9mIGdvdmVybm1lbnQgYW5kIGhhZCBlbmRlZCB1cAp3aXRoIHRoYXQgZm9ybSBvZiBkZW1vY3JhY3kga25vd24gYXMgT25lIE1hbiwgT25lIFZvdGUuICBUaGUgUGF0cmljaWFuIHdhcwp0aGUgTWFuOyBoZSBoYWQgdGhlIFZvdGUuCgogIFtNb3J0LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxMQolcGFzc2FnZSAyCk1vcnQgd2FzIGdldHRpbmcgaW50ZXJlc3RlZCBpbiB0aGUgcm9jay4gIEl0IGhhZCBjdXJseSBzaGVsbHMgaW4gaXQsIHJlbGljcwpvZiB0aGUgZWFybHkgZGF5cyBvZiB0aGUgd29ybGQgd2hlbiB0aGUgQ3JlYXRvciBoYWQgbWFkZSBjcmVhdHVyZXMgb3V0IG9mCnN0b25lLCBuby1vbmUga25ldyB3aHkuCgpNb3J0IHdhcyBpbnRlcmVzdGVkIGluIGxvdHMgb2YgdGhpbmdzLiAgV2h5IHBlb3BsZSdzIHRlZXRoIGZpdHRlZCB0b2dldGhlcgpzbyBuZWF0bHksIGZvciBleGFtcGxlLiAgSGUnZCBnaXZlbiB0aGF0IG9uZSBhIGxvdCBvZiB0aG91Z2h0LiAgVGhlbiB0aGVyZQp3YXMgdGhlIHB1enpsZSBvZiB3aHkgdGhlIHN1biBjYW1lIG91dCBkdXJpbmcgdGhlIGRheSwgaW5zdGVhZCBvZiBhdCBuaWdodAp3aGVuIHRoZSBsaWdodCB3b3VsZCBjb21lIGluIHVzZWZ1bC4gIEhlIGtuZXcgdGhlIHN0YW5kYXJkIGV4cGxhbmF0aW9uLAp3aGljaCBzb21laG93IGRpZG4ndCBzZWVtIHNhdGlzZnlpbmcuCgpJbiBzaG9ydCwgTW9ydCBpcyBvbmUgb2YgdGhvc2UgcGVvcGxlIHdobyBhcmUgbW9yZSBkYW5nZXJvdXMgdGhhbiBhIGJhZwpmdWxsIG9mIHJhdHRsZXNuYWtlcy4gIEhlIHdhcyBkZXRlcm1pbmVkIHRvIGRpc2NvdmVyIHRoZSB1bmRlcmx5aW5nIGxvZ2ljCmJlaGluZCB0aGUgdW5pdmVyc2UuCgpXaGljaCB3YXMgZ29pbmcgdG8gYmUgaGFyZCwgYmVjYXVzZSB0aGVyZSB3YXNuJ3Qgb25lLiAgVGhlIENyZWF0b3IgaGFkIGEKbG90IG9mIHJlbWFya2FibHkgZ29vZCBpZGVhcyB3aGVuIGhlIHB1dCB0aGUgd29ybGQgdG9nZXRoZXIsIGJ1dCBtYWtpbmcgaXQKdW5kZXJzdGFuZGFibGUgaGFkbid0IGJlZW4gb25lIG9mIHRoZW0uCgogIFtNb3J0LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxOAolcGFzc2FnZSAzCiJCdXQgeW91J3JlIERlYXRoLCIgc2FpZCBNb3J0LiAgIllvdSBnbyBhcm91bmQga2lsbGluZyBwZW9wbGUhIgoKST8gIEtJTEw/IHNhaWQgRGVhdGgsIG9idmlvdXNseSBvZmZlbmRlZC4gIENFUlRBSU5MWSBOT1QuICBQRU9QTEUgL0dFVC8KS0lMTEVELCBCVVQgVEhBVCdTIFRIRUlSIEJVU0lORVNTLiAgSSBKVVNUIFRBS0UgT1ZFUiBGUk9NIFRIRU4gT04uICBBRlRFUgpBTEwsIElUJ0QgQkUgQSBCTE9PRFkgU1RVUElEIFdPUkxEIElGIFBFT1BMRSBHT1QgS0lMTEVEIFdJVEhPVVQgRFlJTkcsCldPVUxETidUIElUPwoKICBbTW9ydCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjUKJXBhc3NhZ2UgNAoiSXMgaXQgbWFnaWM/IiBzYWlkIE1vcnQuCgpXSEFUIERPIFlPVSBUSElOSz8gc2FpZCBEZWF0aC4gIEFNIEkgUkVBTExZIEhFUkUsIEJPWT8KCiJZZXMsIiBzYWlkIE1vcnQgc2xvd2x5LiAgIkkuLi4gSSd2ZSB3YXRjaGVkIHBlb3BsZS4gIFRoZXkgbG9vayBhdCB5b3UgYnV0CnRoZXkgZG9uJ3Qgc2VlIHlvdSwgSSB0aGluay4gIFlvdSBkbyBzb21ldGhpbmcgdG8gdGhlaXIgbWluZHMuIgoKRGVhdGggc2hvb2sgaGlzIGhlYWQuCgpUSEVZIERPIElUIEFMTCBUSEVNU0VMVkVTLCBoZSBzYWlkLiAgVEhFUkUnUyBOTyBNQUdJQy4gIFBFT1BMRSBDQU4nVCBTRUUgTUUsClRIRVkgU0lNUExZIFdPTidUIEFMTE9XIFRIRU1TRUxWRVMgVE8gRE8gSVQuICBVTlRJTCBJVCdTIFRJTUUsIE9GIENPVVJTRS4KV0laQVJEUyBDQU4gU0VFIE1FLCBBTkQgQ0FUUy4gIEJVVCBZT1VSIEFWRVJBR0UgSFVNQU4uLi4gTk8sIE5FVkVSLiAgSGUgYmxldwphIHNtb2tlIHJpbmcgYXQgdGhlIHNreSwgYW5kIGFkZGVkLCBTVFJBTkdFIEJVVCBUUlVFLgoKICBbTW9ydCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDQ4LTQ5IChCaW5reSBpcyBEZWF0aCdzIHdoaXRlIGhvcnNlLCB3aG8gd2FzIGxlZnQgJ3BhcmtlZCcgb24gYQojICAgICAgICAgICAgY2FzdGxlJ3Mgcm9vZjsgTW9ydCBpcyBEZWF0aCdzIG5vdmljZSBhcHByZW50aWNlKQolcGFzc2FnZSA1ClRoZXkgd2VyZSBvbiB0aGUgcm9vZiBiZWZvcmUgaGUgc3Bva2UgYWdhaW4uCgpZT1UgVFJJRUQgVE8gV0FSTiBISU0sIGhlIHNhaWQsIHJlbW92aW5nIEJpbmt5J3Mgbm9zZWJhZy4KCiJZZXMsIHNpci4gIFNvcnJ5LiIKCllPVSBDQU5OT1QgSU5URVJGRVJFIFdJVEggRkFURS4gIFdITyBBUkUgWU9VIFRPIEpVREdFIFdITyBTSE9VTEQgTElWRSBBTkQKV0hPIFNIT1VMRCBESUU/CgpEZWF0aCB3YXRjaGVkIE1vcnQncyBleHByZXNzaW9uIGNhcmVmdWxseS4KCk9OTFkgVEhFIEdPRFMgQVJFIEFMTE9XRUQgVE8gRE8gVEhBVCwgaGUgYWRkZWQuICBUTyBUSU5LRVIgV0lUSCBUSEUgRkFURSBPRgpFVkVOIE9ORSBJTkRJVklEVUFMIENPVUxEIERFU1RST1kgVEhFIFdIT0xFIFdPUkxELiAgRE8gWU9VIFVOREVSU1RBTkQ/CgpNb3J0IG5vZGRlZCBtaXNlcmFibHkuCgoiQXJlIHlvdSBnb2luZyB0byBzZW5kIG1lIGhvbWU/IiBoZSBzYWlkLgoKRGVhdGggcmVhY2hlZCBkb3duIGFuZCBzd3VuZyBoaW0gdXAgYmVoaW5kIHRoZSBzYWRkbGUuCgpCRUNBVVNFIFlPVSBTSE9XRUQgQ09NUEFTU0lPTj8gIE5PLiAgSSBNSUdIVCBIQVZFIERPTkUgSUYgWU9VIEhBRCBTSE9XTgpQTEVBU1VSRS4gIEJVVCBZT1UgTVVTVCBMRUFSTiBUSEUgQ09NUEFTU0lPTiBQUk9QRVIgVE8gWU9VUiBUUkFERS4KCiJXaGF0J3MgdGhhdD8iCgpBIC9TSEFSUC8gRURHRS4KCiAgW01vcnQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiA1OS02MSAoaW4gQW5raC1Nb3Jwb3JrLCBNb3J0IGhhcyBhY2NpZGVudGFsbHkgd2Fsa2VkIHRocm91Z2ggYSB3YWxsCiMgICAgICAgICAgICBpbnRvIGFuIGltbWlncmFudCBLbGF0Y2hpYW4gZmFtaWx5J3MgZGluaW5nIHJvb207ICd0aGUgY3JlYXR1cmUKIyAgICAgICAgICAgIHdobyB3YXMgbm90IHRoZXJlJyByZWZlcnMgdG8gRGVhdGggZHVyaW5nIGFuIGVhcmxpZXIgZXZlbnQpCiVwYXNzYWdlIDYKIkknbSBubyBkZW1vbiEgIEknbSBhIGh1bWFuISIgaGUgc2FpZCwgYW5kIHN0b3BwZWQgaW4gc2hvY2sgYXMgaGlzIHdvcmRzCmVtZXJnZWQgaW4gcGVyZmVjdCBLbGF0Y2guCgoiWW91J3JlIGEgdGhpZWY/IiBzYWlkIHRoZSBmYXRoZXIuICAiQSBtdXJkZXJlcj8gIFRvIGNyZWVwIGluIHRodXMsIGFyZSB5b3UKYSAvdGF4LWdhdGhlcmVyLz8iICBIaXMgaGFuZCBzbGlwcGVkIHVuZGVyIHRoZSB0YWJsZSBhbmQgY2FtZSB1cCBob2xkaW5nIGEKbWVhdCBjbGVhdmVyIGhvbmVkIHRvIHBhcGVyIHRoaW5uZXNzLiAgSGlzIHdpZmUgc2NyZWFtZWQgYW5kIGRyb3BwZWQgdGhlCnBsYXRlIGFuZCBjbHV0Y2hlZCB0aGUgeW91bmdlc3QgY2hpbGRyZW4gdG8gaGVyLgoKTW9ydCB3YXRjaGVkIHRoZSBibGFkZSB3ZWF2ZSB0aHJvdWdoIHRoZSBhaXIsIGFuZCBnYXZlIGluLgoKIkkgYnJpbmcgeW91IGdyZWV0aW5ncyBmcm9tIHRoZSB1dHRlcm1vc3QgY2lyY2xlcyBvZiBoZWxsLCIgaGUgaGF6YXJkZWQuCgpUaGUgY2hhbmdlIHdhcyByZW1hcmthYmxlLiAgVGhlIGNsZWF2ZXIgd2FzIGxvd2VyZWQgYW5kIHRoZSBmYW1pbHkgYnJva2UKaW50byBicm9hZCBzbWlsZXMuCgoiVGhlcmUgaXMgbXVjaCBsdWNrIHRvIHVzIGlmIGEgZGVtb24gdmlzaXRzLCIgYmVhbWVkIHRoZSBmYXRoZXIuICAiV2hhdCBpcwp5b3VyIHdpc2gsIE8gZm91bCBzcGF3biBvZiBPZmZsZXIncyBsb2lucz8iCgoiU29ycnk/IiBzYWlkIE1vcnQuCgoiQSBkZW1vbiBicmluZ3MgYmxlc3NpbmcgYW5kIGdvb2QgZm9ydHVuZSBvbiB0aGUgbWFuIHRoYXQgaGVscHMgaXQsIiBzYWlkCnRoZSBtYW4uICAiSG93IG1heSB3ZSBiZSBvZiBhc3Npc3RhbmNlLCBPIGV2aWwgZG9nc2JyZWF0aCBvZiB0aGUgbmV0aGVyCnBpdD8iCgoiV2VsbCwgSSdtIG5vdCB2ZXJ5IGh1bmdyeSwiIHNhaWQgTW9ydCwgImJ1dCBpZiB5b3Uga25vdyB3aGVyZSBJIGNhbiBnZXQgYQpmYXN0IGhvcnNlLCBJIGNvdWxkIGJlIGluIFN0byBMYXQgYmVmb3JlIHN1bnNldC4iCgpUaGUgbWFuIGJlYW1lZCBhbmQgYm93ZWQuICAiSSBrbm93IHRoZSB2ZXJ5IHBsYWNlLCBub3hpb3VzIGV4dHJ1c2lvbiBvZiB0aGUKYm93ZWxzLCBpZiB5b3Ugd291bGQgYmUgc28gZ29vZCBhcyB0byBmb2xsb3cgbWUuIgoKTW9ydCBodXJyaWVkIG91dCBhZnRlciBoaW0uICBUaGUgYW5jaWVudCBhbmNlc3RvciB3YXRjaGVkIHRoZW0gZ28gd2l0aCBhCmNyaXRpY2FsIGV4cHJlc3Npb24sIGl0cyBqb3dscyByaHl0aG1pY2FsbHkgY2hld2luZy4KCiJUaGF0IHdhcyB3aGF0IHRoZXkgY2FsbCBhIGRlbW9uIGFyb3VuZCBoZXJlPyIgaXQgc2FpZC4gICJPZmZsZXIgcm90IHRoaXMKY291bnRyeSBvZiBkYW1wbmVzcywgZXZlbiB0aGVpciBkZW1vbnMgYXJlIHRoaXJkLXJhdGUsIG5vdCBhIHBhdGNoIG9uIHRoZQpkZW1vbnMgd2UgaGFkIGluIHRoZSBPbGQgQ291bnRyeS4iCgpUaGUgd2lmZSBwbGFjZWQgYSBzbWFsbCBib3dsIG9mIHJpY2UgaW4gdGhlIGZvbGRlZCBtaWRkbGUgcGFpciBvZiBoYW5kcyBvZgp0aGUgT2ZmbGVyIHN0YXR1ZSAoaXQgd291bGQgYmUgZ29uZSBpbiB0aGUgbW9ybmluZykgYW5kIHN0b29kIGJhY2suCgoiSHVzYmFuZCBkaWQgc2F5IHRoYXQgbGFzdCBtb250aCBhdCB0aGUgL0N1cnJ5IEdhcmRlbnMvIGhlIHNlcnZlZCBhIGNyZWF0dXJlCndobyB3YXMgbm90IHRoZXJlLCIgc2hlIHNhaWQuICAiSGUgd2FzIGltcHJlc3NlZC4iCgpUZW4gbWludXRlcyBsYXRlciB0aGUgbWFuIHJldHVybmVkIGFuZCwgaW4gc29sZW1uIHNpbGVuY2UsIHBsYWNlZCBhIHNtYWxsCmhlYXAgb2YgZ29sZCBjb2lucyBvbiB0aGUgdGFibGUuICBUaGV5IHJlcHJlc2VudGVkIGVub3VnaCB3ZWFsdGggdG8KcHVyY2hhc2UgcXVpdGUgYSBsYXJnZSBwYXJ0IG9mIHRoZSBjaXR5LgoKIkhlIGhhZCBhIGJhZyBvZiB0aGVtLCIgaGUgc2FpZC4KClRoZSBmYW1pbHkgc3RhcmVkIGF0IHRoZSBtb25leSBmb3Igc29tZSB0aW1lLiAgVGhlIHdpZmUgc2lnaGVkLgoKIlJpY2hlcyBicmluZyBtYW55IHByb2JsZW1zLCIgc2hlIHNhaWQuICAiV2hhdCBhcmUgd2UgdG8gZG8/IgoKIldlIHJldHVybiB0byBLbGF0Y2gsIiBzYWlkIHRoZSBodXNiYW5kIGZpcm1seSwgIndoZXJlIG91ciBjaGlsZHJlbiBjYW4gZ3Jvdwp1cCBpbiBhIHByb3BlciBjb3VudHJ5LCB0cnVlIHRvIHRoZSBnbG9yaW91cyB0cmFkaXRpb25zIG9mIG91ciBhbmNpZW50IHJhY2UKYW5kIG1lbiBkbyBub3QgbmVlZCB0byB3b3JrIGFzIHdhaXRlcnMgZm9yIHdpY2tlZCBtYXN0ZXJzIGJ1dCBjYW4gc3RhbmQgdGFsbAphbmQgcHJvdWQuICBBbmQgd2UgbXVzdCBsZWF2ZSByaWdodCBub3csIGZyYWdyYW50IGJsb3Nzb20gb2YgdGhlIGRhdGUgcGFsbS4iCgoiV2h5IHNvIHNvb24sIE8gaGFyZC13b3JraW5nIHNvbiBvZiB0aGUgZGVzZXJ0PyIKCiJCZWNhdXNlLCIgc2FpZCB0aGUgbWFuLCAiSSBoYXZlIGp1c3Qgc29sZCB0aGUgUGF0cmljaWFuJ3MgY2hhbXBpb24KcmFjZWhvcnNlLiIKCiAgW01vcnQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAxMzktMTQwIChwYXNzYWdlIGVuZHMgbWlkLXNlbnRlbmNlKQolcGFzc2FnZSA3CiJZb3UgZG9uJ3Qga25vdyBtdWNoIGFib3V0IG1vbmFyY2h5LCBkbyB5b3U/IiBzYWlkIEtlbGkuCgoiVW0sIG5vPyIKCiJTaGUgbWVhbnMgYmV0dGVyIHRvIGJlIGEgZGVhZCBxdWVlbiBpbiB5b3VyIG93biBjYXN0bGUgdGhhbiBhIGxpdmUKY29tbW9uZXIgc29tZXdoZXJlIGVsc2UsIiBzYWlkIEN1dHdlbGwsIFsuLi5dCgogIFtNb3J0LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxNTgKJXBhc3NhZ2UgOAoiWW91IG1lYW4geW91IHdvbid0IGhlbHA/IiBzYWlkIE1vcnQuICAiTm90IGV2ZW4gaWYgeW91IGNhbj8iCgoiR2l2ZSB0aGUgYm95IGEgcHJpemUsIiBncm93bGVkIEFsYmVydC4gICJBbmQgaXQncyBubyBnb29kIHRoaW5raW5nIHlvdSBjYW4KYXBwZWFsIHRvIG15IGJldHRlciBuYXR1cmUgdW5kZXIgdGhpcyBoZXJlIGNydXN0eSBleHRlcmlvciwiIGhlIGFkZGVkLAoiJ2NvcyBteSBpbnRlcmlvcidzIHByZXR0eSBkYW1uIGNydXN0eSB0b28uIgoKICBbTW9ydCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDE1OS0xNjAgKERlYXRoIGhhcyBjb21lIHRvIGFuIGVtcGxveW1lbnQgYWdlbmN5LS1hIG5ldyBjb25jZXB0IGluCiMgICAgICAgICAgICAgIEFua2gtTW9ycG9yay0tbG9va2luZyBmb3IgYSBqb2IpCiVwYXNzYWdlIDkKIkFuZCB3aGF0IHdhcyB5b3VyIHByZXZpb3VzIHBvc2l0aW9uPyIKCkkgQkVHIFlPVVIgUEFSRE9OPwoKIldoYXQgZGlkIHlvdSBkbyBmb3IgYSBsaXZpbmc/IiBzYWlkIHRoZSB0aGluIHlvdW5nIG1hbiBiZWhpbmQgdGhlIGRlc2suCgpJIFVTSEVSRUQgU09VTFMgSU5UTyBUSEUgTkVYVCBXT1JMRC4gIEkgV0FTIFRIRSBHUkFWRSBPRiBBTEwgSE9QRS4gIEkgV0FTClRIRSBVTFRJTUFURSBSRUFMSVRZLiAgSSBXQVMgVEhFIEFTU0FTU0lOIEFHQUlOU1QgV0hPTSBOTyBMT0NLIFdPVUxEIEhPTEQuCgoiWWVzLCBwb2ludCB0YWtlbiwgYnV0IGRvIHlvdSBoYXZlIGFueSBwYXJ0aWN1bGFyIHNraWxscz8iCgpJIFNVUFBPU0UgQSBDRVJUQUlOIEFNT1VOVCBPRiBFWFBFUlRJU0UgV0lUSCBBR1JJQ1VMVFVSQUwgSU1QTEVNRU5UUz8gaGUKdmVudHVyZWQgYWZ0ZXIgYSB3aGlsZS4KClRoZSB5b3VuZyBtYW4gc2hvb2sgaGlzIGhlYWQgZmlybWx5LgoKTk8/CgogIFtNb3J0LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyMDUKJXBhc3NhZ2UgMTAKRGVhdGggcmFpc2VkIGhpcyBza3VsbCBhbmQgc25pZmZlZCB0aGUgYWlyLgoKVGhlIHNvdW5kIGN1dCB0aHJvdWdoIGFsbCB0aGUgb3RoZXIgbm9pc2VzIGluIHRoZSBoYWxsIGFuZCBmb3JjZWQgdGhlbQppbnRvIHNpbGVuY2UuCgpJdCBpcyB0aGUga2luZCBvZiBub2lzZSB0aGF0IGlzIGhlYXJkIG9uIHRoZSB0d2lsaWdodCBlZGdlcyBvZiBkcmVhbXMsCnRoZSBzb3J0IHRoYXQgeW91IHdha2UgZnJvbSBpbiB0aGUgY29sZCBzd2VhdCBvZiBtb3J0YWwgaG9ycm9yLiAgSXQgd2FzCnRoZSBzbnVmZmxpbmcgdW5kZXIgdGhlIGRvb3Igb2YgZHJlYWQuICBJdCB3YXMgbGlrZSB0aGUgc251ZmZsaW5nIG9mIGEKaGVkZ2Vob2csIGJ1dCBpZiBzbyB0aGVuIGl0IHdhcyB0aGUga2luZCBvZiBoZWRnZWhvZyB0aGF0IGNyYXNoZXMgb3V0IG9mCnRoZSB2ZXJnZXMgYW5kIGZsYXR0ZW5zIGxvcnJpZXMuICBJdCB3YXMgdGhlIGtpbmQgb2Ygbm9pc2UgeW91IHdvdWxkbid0CndhbnQgdG8gaGVhciB0d2ljZTsgeW91IHdvdWxkbid0IHdhbnQgdG8gaGVhciBpdCAvb25jZS8uCgogIFtNb3J0LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyMDcKJXBhc3NhZ2UgMTEKIldlbGwsIHRoYXQgd2FzIGEgbGVzc29uIHRvIGFsbCBvZiB1cywiIHRoZSBidXJzYXIgY29udGludWVkLCBicnVzaGluZyBkdXN0CmFuZCBjYW5kbGUgd2F4IG9mZiBoaXMgcm9iZS4gIEhlIGxvb2tlZCB1cCwgZXhwZWN0aW5nIHRvIHNlZSB0aGUgc3RhdHVlIG9mCkFsYmVydG8gTWFsaWNoIGJhY2sgb24gaXRzIHBlZGVzdGFsLgoKIkNsZWFybHkgZXZlbiBzdGF0dWVzIGhhdmUgZmVlbGluZ3MsIiBoZSBzYWlkLiAgIkkgbXlzZWxmIHJlY2FsbCwgd2hlbiBJCndhcyBidXQgYSBmaXJzdC15ZWFyIHN0dWRlbnQsIHdyaXRpbmcgbXkgbmFtZSBvbiBoaXMuLi4gd2VsbCwgbmV2ZXIgbWluZC4KVGhlIHBvaW50IGlzLCBJIHByb3Bvc2UgaGVyZSBhbmQgbm93IHdlIHJlcGxhY2UgdGhlIHN0YXR1ZS4iCgpEZWFkIHNpbGVuY2UgZ3JlZXRlZCB0aGlzIHN1Z2dlc3Rpb24uCgoiV2l0aCwgc2F5LCBhbiBleGFjdCBsaWtlbmVzcyBjYXN0IGluIGdvbGQuICBTdWl0YWJseSBlbWJlbGxpc2hlZCB3aXRoCmpld2VscywgYXMgYmVmaXRzIG91ciBncmVhdCBmb3VuZGVyLCIgaGUgd2VudCBvbiBicmlnaHRseS4KCiJBbmQgdG8gbWFrZSBzdXJlIG5vIHN0dWRlbnRzIGRlZmFjZSBpdCBpbiBhbnkgd2F5IEkgc3VnZ2VzdCB3ZSB0aGVuIGVyZWN0Cml0IGluIHRoZSBkZWVwZXN0IGNlbGxhciwiIGhlIGNvbnRpbnVlZC4KCiJBbmQgdGhlbiBsb2NrIHRoZSBkb29yLCIgaGUgYWRkZWQuICBTZXZlcmFsIHdpemFyZHMgYmVnYW4gdG8gY2hlZXIgdXAuCgoiQW5kIHRocm93IGF3YXkgdGhlIGtleT8iIHNhaWQgUmluY2V3aW5kLgoKIkFuZCAvd2VsZC8gdGhlIGRvb3IsIiB0aGUgYnVyc2FyIHNhaWQuICBIZSBoYWQganVzdCByZW1lbWJlcmVkIGFib3V0IFRoZQpNZW5kZWQgRHJ1bS4gIEhlIHRob3VnaHQgZm9yIGEgd2hpbGUgYW5kIHJlbWVtYmVyZWQgYWJvdXQgdGhlIHBoeXNpY2FsCmZpdG5lc3MgcmVnaW1lIGFzIHdlbGwuCgoiQW5kIHRoZW4gYnJpY2sgdXAgdGhlIGRvb3J3YXksIiBoZSBzYWlkLiAgVGhlcmUgd2FzIGEgcm91bmQgb2YgYXBwbGF1c2UuCgoiQW5kIHRocm93IGF3YXkgdGhlIGJyaWNrIGxheWVyISIgY2hvcnRsZWQgUmluY2V3aW5kLCB3aG8gZmVsdCBoZSB3YXMKZ2V0dGluZyB0aGUgaGFuZyBvZiB0aGlzLgoKVGhlIGJ1cnNhciBzY293bGVkIGF0IGhpbS4gICJObyBuZWVkIHRvIGdldCBjYXJyaWVkIGF3YXksIiBoZSBzYWlkLgoKICBbTW9ydCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiVlIHRpdGxlCiMKIwojCiV0aXRsZSBTb3VyY2VyeSAoMTApCiMgcC4gOSAoU2lnbmV0IGVkaXRpb247IHBhc3NhZ2Ugc3RhcnRzIG1pZC1wYXJhZ3JhcGggYW5kIGVuZHMgbWlkLXBhcmFncmFwaCkKJXBhc3NhZ2UgMQoiWy4uLl0gIEFuZCB3aGF0IHdvdWxkIGh1bWFucyBiZSB3aXRob3V0IGxvdmU/IgoKUkFSRSwgc2FpZCBEZWF0aC4gIFsuLi5dCgogIFtTb3VyY2VyeSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiVwYXNzYWdlIDIKVGhleSBzdWZmZXJlZCBmcm9tIHRoZSB0ZXJyaWJsZSBkZWx1c2lvbiB0aGF0IHNvbWV0aGluZyBjb3VsZCBiZSBkb25lLgpUaGV5IHNlZW1lZCBwcmVwYXJlZCB0byBtYWtlIHRoZSB3b3JsZCB0aGUgd2F5IHRoZXkgd2FudGVkIGl0IG9yIGRpZSBpbiB0aGUKYXR0ZW1wdCwgYW5kIHRoZSB0cm91YmxlIHdpdGggZHlpbmcgaW4gdGhlIGF0dGVtcHQgd2FzIHRoYXQgeW91IGRpZWQgaW4KdGhlIGF0dGVtcHQuCgogIFtTb3VyY2VyeSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTEgKCd3b3J0aCB3aGlsZSc6IHR3byB3b3JkcyBpcyBhY2N1cmF0ZSwgYWx0aG91Z2ggc3RyYW5nZSkKJXBhc3NhZ2UgMwoiSSBtZWFudCwiIHNhaWQgSXBzbG9yZSwgYml0dGVybHksICJ3aGF0IGlzIHRoZXJlIGluIHRoaXMgd29ybGQgdGhhdCBtYWtlcwpsaXZpbmcgd29ydGggd2hpbGU/IgoKQ0FUUywgaGUgc2FpZCBldmVudHVhbGx5LCBDQVRTIEFSRSBOSUNFLgoKIkN1cnNlIHlvdSEiCgpNQU5ZIEhBVkUsIHNhaWQgRGVhdGggZXZlbmx5LgoKICBbU291cmNlcnksIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiA0MC00MSAodGV4dCBoYXMgJ3RoZSBtb21lbnQgYW5kIHRoZSB3b3Jkcycgd2hpY2ggaXMgb2J2aW91c2x5IGEgdHlwbzsKIyAgICAgICAgICAgIGl0IG1pZ2h0IGhhdmUgaW50ZW5kZWQgJ3RoYXQnIGZvciAnYW5kJzsgd2UganVzdCBkcm9wICdhbmQnKQolcGFzc2FnZSA0ClRoZSB0aGllZiwgYXMgd2lsbCBiZWNvbWUgYXBwYXJlbnQsIHdhcyBhIHNwZWNpYWwgdHlwZSBvZiB0aGllZi4gIFRoaXMKdGhpZWYgd2FzIGFuIGFydGlzdCBvZiB0aGVmdC4gIE90aGVyIHRoaWV2ZXMgbWVyZWx5IHN0b2xlIGV2ZXJ5dGhpbmcgdGhhdAp3YXMgbm90IG5haWxlZCBkb3duLCBidXQgdGhpcyB0aGllZiBzdG9sZSB0aGUgbmFpbHMgYXMgd2VsbC4gIFRoaXMgdGhpZWYKaGFkIHNjYW5kYWxpc2VkIEFua2ggYnkgdGFraW5nIGEgcGFydGljdWxhciBpbnRlcmVzdCBpbiBzdGVhbGluZywgd2l0aAphc3RvbmlzaGluZyBzdWNjZXNzLCB0aGluZ3MgdGhhdCB3ZXJlIGluIGZhY3Qgbm90IG9ubHkgbmFpbGVkIGRvd24gYnV0CmFsc28gZ3VhcmRlZCBieSBrZWVuLWV5ZWQgZ3VhcmRzIGluIGluYWNjZXNzaWJsZSBzdHJvbmdyb29tcy4gIFRoZXJlIGFyZQphcnRpc3RzIHRoYXQgd2lsbCBwYWludCBhbiBlbnRpcmUgY2hhcGVsIGNlaWxpbmc7IHRoaXMgd2FzIHRoZSBraW5kIG9mCnRoaWVmIHRoYXQgY291bGQgc3RlYWwgaXQuCgpUaGlzIHBhcnRpY3VsYXIgdGhpZWYgd2FzIGNyZWRpdGVkIHdpdGggc3RlYWxpbmcgdGhlIGpld2VsZWQgZGlzZW1ib3dlbGluZwprbmlmZSBmcm9tIHRoZSB0ZW1wbGUgb2YgT2ZmbGVyIHRoZSBDcm9jb2RpbGUgR29kIGR1cmluZyB0aGUgbWlkZGxlIG9mCkV2ZW5zb25nLCBhbmQgdGhlIHNpbHZlciBzaG9lcyBmcm9tIHRoZSBQYXRyaWNpYW4ncyBmaW5lc3QgcmFjZWhvcnNlCndoaWxlIGl0IHdhcyBpbiB0aGUgcHJvY2VzcyBvZiB3aW5uaW5nIGEgcmFjZS4gIFdoZW4gR3JpdG9sbGVyIE1pbXBzZXksCnZpY2UtcHJlc2lkZW50IG9mIHRoZSBUaGlldmVzJyBHdWlsZCwgd2FzIGpvc3RsZWQgaW4gdGhlIG1hcmtldHBsYWNlIGFuZAp0aGVuIGZvdW5kIG9uIHJldHVybmluZyBob21lIHRoYXQgYSBmcmVzaGx5LXN0b2xlbiBoYW5kZnVsIG9mIGRpYW1vbmRzCmhhZCB2YW5pc2hlZCBmcm9tIHRoZWlyIHBsYWNlIG9mIGNvbmNlYWxtZW50LCBoZSBrbmV3IHdobyB0byBibGFtZS4oMSkKVGhpcyB3YXMgdGhlIHR5cGUgb2YgdGhpZWYgdGhhdCBjb3VsZCBzdGVhbCB0aGUgaW5pdGlhdGl2ZSwgdGhlIG1vbWVudCB0aGUKd29yZHMgd2VyZSBvdXQgb2YgeW91ciBtb3V0aC4KCigxKSBUaGlzIHdhcyBiZWNhdXNlIEdyaXRvbGxlciBoYWQgc3dhbGxvd2VkIHRoZSBqZXdlbHMgZm9yIHNhZmUga2VlcGluZy4KCiAgW1NvdXJjZXJ5LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gNjMtNjQgKCdDb21wbGVldCcsICdNYWppaycsICdlbnRlcnInLCAncGh5c3ljYWwnLCAnaHlzJywgJ2JvZGllJywKIyAgICAgICAgICAgICdEZXN0aW5pZScsICdEZWF0aGUnLCAnd2VycmUnLCAnbm93ZScsICdtZW5uZScsICdFbmRlJywKIyAgICAgICAgICAgICdXb3JsZGUnLCAnaGFkZCcsICdiZWUnLCAnZ29kZGVzJywgJ291bGQnLCAnQXBvY3JhbHlwc2UnLAojICAgICAgICAgICAgJ2xlZ2VuZGUnLCAndGhlZSc6IGFsbCBhY2N1cmF0ZTsgJ291bGQnIG1heSBiZSBhIHR5cG8uLi4pCiVwYXNzYWdlIDUKSXQgd2FzIGRlYXRobHkgcXVpZXQgaW4gdGhlIExpYnJhcnkuICBUaGUgYm9va3Mgd2VyZSBubyBsb25nZXIgZnJhbnRpYy4KVGhleSdkIHBhc3NlZCB0aHJvdWdoIHRoZWlyIGZlYXIgYW5kIG91dCBpbnRvIHRoZSBjYWxtIHdhdGVycyBvZiBhYmplY3QKdGVycm9yLCBhbmQgdGhleSBjcm91Y2hlZCBvbiB0aGVpciBzaGVsdmVzIGxpa2Ugc28gbWFueSBtZXNtZXJpc2VkIHJhYmJpdHMuCgpBIGxvbmcgaGFpcnkgYXJtIHJlYWNoZWQgdXAgYW5kIGdyYWJiZWQgL0Nhc3Bsb2NrJ3MgQ29tcGxlZXQgTGV4aWNvbiBvZgpNYWppayBhbmQgUHJlY2VwdHMgZm9yIHRoZSBXaXNlLyBiZWZvcmUgaXQgY291bGQgYmFjayBhd2F5LCBzb290aGVkIGl0cwp0ZXJyb3Igd2l0aCBhIGxvbmctZmluZ2VyZWQgaGFuZCwgYW5kIG9wZW5lZCBpdCB1bmRlciAnUycuICBUaGUgTGlicmFyaWFuCnNtb290aGVkIHRoZSB0cmVtYmxpbmcgcGFnZSBnZW50bHkgYW5kIHJhbiBhIGhvcm55IG5haWwgZG93biB0aGUgZW50cmllcwp1bnRpbCBoZSBjYW1lIHRvOgoKICAgICpTb3VyY2Vyb3IqLCAvbi4gKG15dGhpY2FsKS4gIEEgcHJvdG8td2l6YXJkLCBhIGRvb3J3YXkgdGhyb3VnaC8KICAgIC93aGljaCBuZXcgbWFqaWsgbWF5IGVudGVyciB0aGUgd29ybGQsIGEgd2l6YXJkIG5vdCBsaW1pdGVkIGJ5LwogICAgL3RoZSBwaHlzeWNhbCBjYXBhYmlsaXRpZXMgb2YgaHlzIG93biBib2RpZSwgbm90IGJ5IERlc3RpbmllLC8KICAgIC9ub3IgYnkgRGVhdGhlLiAgSXQgaXMgd3JpdHRlbiB0aGF0IHRoZXJlIG9uY2Ugd2VycmUgc291cmNlcm9ycy8KICAgIC9pbiB0aGUgeW91dGggb2YgdGhlIHdvcmxkIGJ1dCBub3QgbWF5IHRoZXJlIGJ5IG5vd2UgYW5kIGJsZXNzZWQvCiAgICAvYmUsIGZvciBzb3VyY2VyeSBpcyBub3QgZm9yIG1lbm5lIGFuZCB0aGUgcmV0dXJuIG9mIHNvdXJjZXJ5LwogICAgL3dvdWxkIG1lYW4gdGhlIEVuZGUgb2YgdGhlIFdvcmxkZS4uLiAgSWYgdGhlIENyZWF0b3IgaGFkZCBtZWFudC8KICAgIC9tZW5uZSB0byBiZWUgYXMgZ29kZGVzLCBoZSBvdWxkIGhhdmUgZ2l2ZW4gdGhlbSB3aW5ncy4vCiAgICAvU0VFIEFMU086ICB0aGVlIEFwb2NyYWx5cHNlLCB0aGUgbGVnZW5kZSBvZiB0aGVlIEljZSBHaWFudHMsLwogICAgL2FuZCB0aGVlIFRlYXRpbWUgb2YgdGhlIEdvZGRlcy4vCgpUaGUgTGlicmFyaWFuIHJlYWQgdGhlIGNyb3NzLXJlZmVyZW5jZXMsIHR1cm5lZCBiYWNrIHRvIHRoZSBmaXJzdCBlbnRyeSwKYW5kIHN0YXJlZCBhdCBpdCB0aHJvdWdoIGRlZXAgZGFyayBleWVzIGZvciBhIGxvbmcgdGltZS4gIFRoZW4gaGUgcHV0IHRoZQpib29rIGJhY2sgY2FyZWZ1bGx5LCBjcmVwdCB1bmRlciBoaXMgZGVzaywgYW5kIHB1bGxlZCB0aGUgYmxhbmtldCBvdmVyCmhpcyBoZWFkLgoKICBbU291cmNlcnksIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiA3MS03MgolcGFzc2FnZSA2ClRoZSBjdXJyZW50IFBhdHJpY2lhbiwgaGVhZCBvZiB0aGUgZXh0cmVtZWx5IHJpY2ggYW5kIHBvd2VyZnVsIFZldGluYXJpCmZhbWlseSwgd2FzIHRoaW4sIHRhbGwgYW5kIGFwcGFyZW50bHkgYXMgY29sZC1ibG9vZGVkIGFzIGEgZGVhZCBwZW5ndWluLgpKdXN0IGJ5IGxvb2tpbmcgYXQgaGltIHlvdSBjb3VsZCB0ZWxsIGhlIHdhcyB0aGUgc29ydCBvZiBtYW4geW91J2QgZXhwZWN0CnRvIGtlZXAgYSB3aGl0ZSBjYXQsIGFuZCBjYXJlc3MgaXQgaWRseSB3aGlsZSBzZW50ZW5jaW5nIHBlb3BsZSB0byBkZWF0aAppbiBhIHBpcmFuaGEgdGFuazsgYW5kIHlvdSdkIGhhemFyZCBmb3IgZ29vZCBtZWFzdXJlIHRoYXQgaGUgcHJvYmFibHkKY29sbGVjdGVkIHJhcmUsIHRoaW4gcG9yY2VsYWluLCB0dXJuaW5nIGl0IG92ZXIgYW5kIG92ZXIgaW4gaGlzIGJsdWUtd2hpdGUKZmluZ2VycyB3aGlsZSBkaXN0YW50IHNjcmVhbXMgZWNob2VkIGZyb20gdGhlIGRlcHRocyBvZiB0aGUgZHVuZ2VvbnMuICBZb3UKd291bGRuJ3QgcHV0IGl0IHBhc3QgaGltIHRvIHVzZSB0aGUgd29yZCAiZXhxdWlzaXRlIiBhbmQgaGF2ZSB0aGluIGxpcHMuCkhlIGxvb2tlZCB0aGUga2luZCBvZiBwZXJzb24gd2hvLCB3aGVuIHRoZXkgYmxpbmtlZCwgeW91IG1hcmsgaXQgb2ZmIG9uCnRoZSBjYWxlbmRhci4KClByYWN0aWNhbGx5IG5vbmUgb2YgdGhpcyB3YXMgaW4gZmFjdCB0aGUgY2FzZSwgYWx0aG91Z2ggaGUgZGlkIGhhdmUgYSBzbWFsbAphbmQgZXhjZWVkaW5nbHkgZWxkZXJseSB3aXJlLWhhaXJlZCB0ZXJyaWVyIGNhbGxlZCBXdWZmbGVzIHRoYXQgc21lbGxlZApiYWRseSBhbmQgd2hlZXplZCBhdCBwZW9wbGUuICBJdCB3YXMgc2FpZCB0byBiZSB0aGUgb25seSB0aGluZyBpbiB0aGUKZW50aXJlIHdvcmxkIGhlIHRydWx5IGNhcmVkIGFib3V0LiAgSGUgZGlkIG9mIGNvdXJzZSBzb21ldGltZXMgaGF2ZSBwZW9wbGUKaG9ycmlibHkgdG9ydHVyZWQgdG8gZGVhdGgsIGJ1dCB0aGlzIHdhcyBjb25zaWRlcmVkIHRvIGJlIHBlcmZlY3RseQphY2NlcHRhYmxlIGJlaGF2aW91ciBmb3IgYSBjaXZpYyBydWxlciBhbmQgZ2VuZXJhbGx5IGFwcHJvdmVkIG9mIGJ5IHRoZQpvdmVyd2hlbG1pbmcgbWFqb3JpdHkgb2YgY2l0aXplbnMuKDEpICBUaGUgcGVvcGxlIG9mIEFua2ggYXJlIG9mIGEKcHJhY3RpY2FsIHBlcnN1YXNpb24sIGFuZCBmZWx0IHRoYXQgdGhlIFBhdHJpY2lhbidzIGVkaWN0IGZvcmJpZGRpbmcgYWxsCnN0cmVldCB0aGVhdHJlIGFuZCBtaW1lIGFydGlzdHMgbWFkZSB1cCBmb3IgYSBsb3Qgb2YgdGhpbmdzLiAgSGUgZGlkbid0CmFkbWluaXN0ZXIgYSByZWlnbiBvZiB0ZXJyb3IsIGp1c3QgdGhlIG9jY2FzaW9uYWwgbGlnaHQgc2hvd2VyLgoKKDEpIFRoZSBvdmVyd2hlbG1pbmcgbWFqb3JpdHkgb2YgY2l0aXplbnMgYmVpbmcgZGVmaW5lZCBpbiB0aGlzIGNhc2UgYXMKZXZlcnlvbmUgbm90IGN1cnJlbnRseSBoYW5naW5nIHVwc2lkZSBkb3duIG92ZXIgYSBzY29ycGlvbiBwaXQuCgogIFtTb3VyY2VyeSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gNzUKJXBhc3NhZ2UgNwoiV2hhdCBleGFjdGx5IC9pcy8gdGhlIEFwcm9jcmFseXBzZT8iCgpSaW5jZXdpbmQgaGVzaXRhdGVkLiAgIldlbGwsIiBoZSBzYWlkLCAiaXQncyB0aGUgZW5kIG9mIHRoZSB3b3JsZC4gIFNvcnQKb2YuIgoKIlNvcnQgb2Y/ICAvU29ydCBvZi8gdGhlIGVuZCBvZiB0aGUgd29ybGQ/ICBZb3UgbWVhbiB3ZSB3b24ndCBiZSBjZXJ0YWluPwpXZSdsbCBhbGwgbG9vayBhcm91bmQgYW5kIHNheSAnUGFyZG9uIG1lLCBkaWQgeW91IGhlYXIgc29tZXRoaW5nPyc/IgoKIkl0J3MganVzdCB0aGF0IG5vIHR3byBzZWVycyBoYXZlIGV2ZXIgYWdyZWVkIGFib3V0IGl0LiAgVGhlcmUgaGF2ZSBiZWVuCmFsbCBraW5kcyBvZiB2YWd1ZSBwcmVkaWN0aW9ucy4gIFF1aXRlIG1hZCwgc29tZSBvZiB0aGVtLiAgU28gaXQgd2FzCmNhbGxlZCB0aGUgQXBvY3JhbHlwc2UuIiAgSGUgbG9va2VkIGVtYmFycmFzc2VkLiAgIkl0J3MgYSBzb3J0IG9mCmFwb2NyeXBoYWwgQXBvY2FseXBzZS4gIEEga2luIG9mIHB1biwgeW91IHNlZS4iCgogIFtTb3VyY2VyeSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTEwCiVwYXNzYWdlIDgKIllvdSdyZSB2ZXJ5IHF1aWV0LCBTcGVsdGVyLiAgRG8geW91IG5vdCBhZ3JlZT8iCgpOby4gIFRoZSB3b3JsZCBoYWQgc291cmNlcnkgb25jZSwgYW5kIGdhdmUgaXQgdXAgZm9yIHdpemFyZHJ5LiAgV2l6YXJkcnkgaXMKbWFnaWMgZm9yIG1lbiwgbm90IGdvZHMuICBJdCdzIG5vdCBmb3IgdXMuICBUaGVyZSB3YXMgc29tZXRoaW5nIHdyb25nIHdpdGgKaXQsIGFuZCB3ZSBoYXZlIGZvcmdvdHRlbiB3aGF0IGl0IHdhcy4gIEkgbGlrZWQgd2l6YXJkcnkuICBJdCBkaWRuJ3QgdXBzZXQKdGhlIHdvcmxkLiAgSXQgZml0dGVkLiAgSXQgd2FzIHJpZ2h0LiAgQSB3aXphcmQgd2FzIGFsbCBJIHdhbnRlZCB0byBiZS4KCkhlIGxvb2tlZCBkb3duIGF0IGhpcyBmZWV0LgoKIlllcywiIGhlIHdoaXNwZXJlZC4KCiAgW1NvdXJjZXJ5LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMTQxLTE0MiAoUmluY2V3aW5kIGFuZCBOaWplbCBoYXZlIGp1c3QgZW50ZXJlZCBhIGhhcmVtKQolcGFzc2FnZSA5ClJpbmNld2luZCBoYWQgZXllcyBmb3Igbm9uZSBvZiB0aGlzLiAgWy4uLl0gdGhleSB3ZXJlIHN3YW1wZWQgYnkgdGhlCmNvbnNpZGVyYWJseSBiaWdnZXIgZmxvb2Qgb2YgcGFuaWMgYXQgdGhlIHNpZ2h0IG9mIGZvdXIgZ3VhcmRzIHR1cm5pbmcKdG93YXJkcyBoaW0gd2l0aCBzY2ltaXRhcnMgaW4gdGhlaXIgaGFuZHMgYW5kIHRoZSBsaWdodCBvZiBtdXJkZXIgaW4gdGhlaXIKZXllcy4KCldpdGhvdXQgaGVzaXRhdGlvbiwgUmluY2V3aW5kIHRvb2sgYSBzdGVwIGJhY2t3YXJkcy4KCiJPdmVyIHRvIHlvdSwgZnJpZW5kLCIgaGUgc2FpZC4KCiJSaWdodCEiCgpOaWplbCBkcmV3IGhpcyBzd29yZCBhbmQgaGVsZCBpdCBvdXQgaW4gZnJvbnQgb2YgaGltLCBoaXMgYXJtcyB0cmVtYmxpbmcgYXQKdGhlIGVmZm9ydC4KClRoZXJlIHdlcmUgYSBmZXcgc2Vjb25kcyBvZiB0b3RhbCBzaWxlbmNlIGFzIGV2ZXJ5b25lIHdhaXRlZCB0byBzZWUgd2hhdAp3b3VsZCBoYXBwZW4gbmV4dC4gIEFuZCB0aGVuIE5pamVsIHV0dGVyZWQgdGhlIGJhdHRsZSBjcnkgdGhhdCBSaW5jZXdpbmQKd291bGQgbmV2ZXIgcXVpdGUgZm9yZ2V0IHRvIHRoZSBlbmQgb2YgdGhpcyBsaWZlLgoKIkVybSwiIGhlIHNhaWQsICJleGN1c2UgbWUuLi4uIgoKICBbU291cmNlcnksIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAxOTgtMTk5CiVwYXNzYWdlIDEwClRoZSBhc3Ryby1waGlsb3NvcGhlcnMgb2YgS3J1bGwgb25jZSBzdWNjZWVkZWQgaW4gcHJvdmluZyBjb25jbHVzaXZlbHkKdGhhdCBhbGwgcGxhY2VzIGFyZSBvbmUgcGxhY2UgYW5kIHRoYXQgdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlbSBpcyBhbgppbGx1c2lvbiwgYW5kIHRoaXMgbmV3cyB3YXMgYW4gZW1iYXJyYXNzbWVudCB0byBhbGwgdGhpbmtpbmcgcGhpbG9zb3BoZXJzCmJlY2F1c2UgaXQgZGlkIG5vdCBleHBsYWluLCBhbW9uZyBvdGhlciB0aGluZ3MsIHNpZ25wb3N0cy4gIEFmdGVyIHllYXJzIG9mCndyYW5nbGluZyB0aGUgd2hvbGUgdGhpbmcgd2FzIHRoZW4gdHVybmVkIG92ZXIgdG8gTHkgVGluIFdoZWVkbGUsIGFyZ3VhYmx5CnRoZSBEaXNjJ3MgZ3JlYXRlc3QgcGhpbG9zb3BoZXIsKDEpIHdobyBhZnRlciBzb21lIHRob3VnaHQgcHJvY2xhaW1lZCB0aGF0CmFsdGhvdWdoIGl0IHdhcyBpbmRlZWQgdHJ1ZSB0aGF0IGFsbCBwbGFjZXMgd2VyZSBvbmUgcGxhY2UsIHRoYXQgcGxhY2Ugd2FzCi92ZXJ5IGxhcmdlLy4KCkFuZCBzbyBwc3ljaGljIG9yZGVyIHdhcyByZXN0b3JlZC4gIERpc3RhbmNlIGlzLCBob3dldmVyLCBhbiBlbnRpcmVseQpzdWJqZWN0aXZlIHBoZW5vbWVub24gYW5kIGNyZWF0dXJlcyBvZiBtYWdpYyBjYW4gYWRqdXN0IGl0IHRvIHN1aXQKdGhlbXNlbHZlcy4KClRoZXkgYXJlIG5vdCBuZWNlc3NhcmlseSB2ZXJ5IGdvb2QgYXQgaXQuCgooMSkgSGUgYWx3YXlzIGFyZ3VlZCB0aGF0IGhlIHdhcy4KCiAgW1NvdXJjZXJ5LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKJWUgdGl0bGUKIwojCiMKJXRpdGxlIFd5cmQgU2lzdGVycyAoMTUpCiMgcC4gMzE4IChST0MgZWRpdGlvbjsgcGFzc2FnZSBzdGFydHMgbWlkLXBhcmFncmFwaDsKIyAgICAgICAgIHNwZWFrZXIgaXMgR3Jhbm55IFdlYXRoZXJ3YXgpCiVwYXNzYWdlIDEKIlsuLi5dICBEZXN0aW55IC9pcy8gaW1wb3J0YW50LCBzZWUsIGJ1dCBwZW9wbGUgZ28gd3Jvbmcgd2hlbiB0aGV5IHRoaW5rIGl0CmNvbnRyb2xzIHRoZW0uICBJdCdzIHRoZSBvdGhlciB3YXkgYXJvdW5kLiIKCiAgW1d5cmQgU2lzdGVycywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDEwNS0xMDYKJXBhc3NhZ2UgMgpWZXJlbmNlIHRyaWVkIHRvIGF2b2lkIHdhbGtpbmcgdGhyb3VnaCB3YWxscy4gIEEgbWFuIGhhZCBoaXMgZGlnbml0eS4KCkhlIGJlY2FtZSBhd2FyZSB0aGF0IGhlIHdhcyBiZWluZyB3YXRjaGVkLgoKSGUgdHVybmVkIGhpcyBoZWFkLgoKVGhlcmUgd2FzIGEgY2F0IHNpdHRpbmcgaW4gdGhlIGRvb3J3YXksIHN1YmplY3RpbmcgaGltIHRvIGEgc2xvdyBibGluay4gIEl0CndhcyBhIG1vdHRsZWQgZ3JleSBhbmQgZXh0cmVtZWx5IGZhdC4uLgoKTm8uICBJdCB3YXMgZXh0cmVtZWx5IC9iaWcvLiAgSXQgd2FzIGNvdmVyZWQgd2l0aCBzbyBtdWNoIHNjYXIgdGlzc3VlIHRoYXQKaXQgbG9va2VkIGxpa2UgYSBmaXN0IHdpdGggZnVyIG9uIGl0LiAgSXRzIGVhcnMgd2VyZSBhIGNvdXBsZSBvZiBwZXJmb3JhdGVkCnN0dWJzLCBpdHMgZXllcyB0d28geWVsbG93IHNsaXRzIG9mIGVhc3ktZ29pbmcgbWFsZXZvbGVuY2UsIGl0cyB0YWlsIGEKdHdpdGNoaW5nIHNlcmllcyBvZiBxdWVzdGlvbiBtYXJrcyBhcyBpdCBzdGFyZWQgYXQgaGltLgoKR3JlZWJvIGhhZCBoZWFyZCB0aGF0IExhZHkgRmVsbWV0IGhhZCBhIHNtYWxsIHdoaXRlIGZlbWFsZSBjYXQgYW5kIGhhZApzdHJvbGxlZCB1cCB0byBwYXkgaGlzIHJlc3BlY3RzLgoKVmVyZW5jZSBoYWQgbmV2ZXIgc2VlbiBhbiBhbmltYWwgd2l0aCBzbyBtdWNoIGJ1aWx0LWluIHZpbGxhaW55LiAgSGUgZGlkbid0CnJlc2lzdCBhcyBpdCB3YWRkbGVkIGFjcm9zcyB0aGUgZmxvb3IgYW5kIGRyaWVkIHRvIHJ1YiBpdHNlbGYgYWdhaW5zdCBoaXMKbGVncywgcHVycmluZyBsaWtlIGEgd2F0ZXJmYWxsLgoKIldlbGwsIHdlbGwsIiBzYWlkIHRoZSBraW5nLCB2YWd1ZWx5LiAgSGUgcmVhY2hlZCBkb3duIGFuZCBtYWRlIGFuIGVmZm9ydAp0byBzY3JhdGNoIGl0IGJlaGluZCB0aGUgdHdvIHJhZ2dlZCBiaXRzIG9uIHRvcCBvZiBpdHMgaGVhZC4gICBJdCB3YXMgYQpyZWxpZWYgdG8gZmluZCBzb21lb25lIGVsc2UgYmVzaWRlcyBhbm90aGVyIGdob3N0IHdobyBjb3VsZCBzZWUgaGltLCBhbmQKR3JlZWJvLCBoZSBjb3VsZG4ndCBoZWxwIGZlZWxpbmcsIHdhcyBhIGRpc3RpbmN0bHkgdW51c3VhbCBjYXQuICBNb3N0IG9mCnRoZSBjYXN0bGUgY2F0cyB3ZXJlIGVpdGhlciBwYW1wZXJlZCBwZXRzIG9yIGZsYXQtZWFyZWQga2l0Y2hlbiBhbmQgc3RhYmxlCmhhYml0dWVzIHdobyBnZW5lcmFsbHkgcmVzZW1ibGVkIHRoZSB2ZXJ5IHJvZGVudHMgdGhleSBsaXZlZCBvbi4gIFRoaXMgY2F0LApvbiB0aGUgb3RoZXIgaGFuZCwgd2FzIGl0cyBvd24gYW5pbWFsLiAgQWxsIGNhdHMgZ2l2ZSB0aGF0IGltcHJlc3Npb24sIG9mCmNvdXJzZSwgYnV0IGluc3RlYWQgb2YgdGhlIG1pbmRsZXNzIGFuaW1hbCBzZWxmLWFic29ycHRpb24gdGhhdCBwYXNzZXMgZm9yCnNlY3JldCB3aXNkb20gaW4gdGhlIGNyZWF0dXJlcywgR3JlZWJvIHJhZGlhdGVkIGdlbnVpbmUgaW50ZWxsaWdlbmNlLiAgSGUKYWxzbyByYWRpYXRlZCBhIHNtZWxsIHRoYXQgd291bGQgaGF2ZSBrbm9ja2VkIG92ZXIgYSB3YWxsIGFuZCBjYXVzZWQgc2ludXMKdHJvdWJsZSBpbiBhIGRlYWQgZm94LgoKICBbV3lyZCBTaXN0ZXJzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMTQtMTUKJXBhc3NhZ2UgMwpIZSB3b25kZXJlZCBpZiBnaG9zdHMgaHVudGVkLiAgQWxtb3N0IGNlcnRhaW5seSBub3QsIGhlIGltYWdpbmVkLiAgT3IgYXRlLApvciBkcmFuayBlaXRoZXIgZm9yIHRoYXQgbWF0dGVyLCBhbmQgdGhhdCB3YXMgcmVhbGx5IGRlcHJlc3NpbmcuICBIZSBsaWtlZAphIGJpZyBub2lzeSBiYW5xdWV0IGFuZCBoYWQgcXVhZmZlZCgxKSBtYW55IGEgcGludCBvZiBnb29kIGFsZS4gIEFuZCBiYWQKYWxlLCBjb21lIHRvIHRoYXQuICBIZSdkIG5ldmVyIGJlZW4gYWJsZSB0byB0ZWxsIHRoZSBkaWZmZXJlbmNlIHRpbGwgdGhlCmZvbGxvd2luZyBtb3JuaW5nLCB1c3VhbGx5LgoKKDEpIFF1YWZmaW5nIGlzIGxpa2UgZHJpbmtpbmcsIGJ1dCB5b3Ugc3BpbGwgbW9yZS4KCiAgW1d5cmQgU2lzdGVycywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDYwLTYxIChkd2FyZmlzaCBtZWNoYW5pY3M6IHNlZSAvRXF1YWwgUml0ZXMvKQolcGFzc2FnZSA0CkdyYW5ueSBXZWF0aGVyd2F4IG1pbGtlZCBhbmQgZmVkIHRoZSBnb2F0cywgYmFua2VkIHRoZSBmaXJlLCBhbmQgcHV0IGEKY2xvdGggb3ZlciB0aGUgbWlycm9yIGFuZCBwdWxsZWQgaGVyIGJyb29tc3RpY2sgb3V0IGZyb20gYmVoaW5kIHRoZSBkb29yLgpTaGUgd2VudCBvdXQsIGxvY2tlZCB0aGUgZG9vciBiZWhpbmQgaGVyLCBhbmQgaHVuZyB0aGUga2V5IG9uIGl0cyBuYWlsIGluCnRoZSBwcml2eS4KClRoaXMgd2FzIHF1aXRlIHN1ZmZpY2llbnQuICBPbmx5IG9uY2UsIGluIHRoZSBlbnRpcmUgaGlzdG9yeSBvZiB3aXRjaGVyeQppbiB0aGUgUmFtdG9wcywgaGFkIGEgdGhpZWYgYnJva2VuIGludG8gYSB3aXRjaCdzIGNvdHRhZ2UuICBUaGUgd2l0Y2gKY29uY2VybmVkIHZpc2l0ZWQgdGhlIG1vc3QgdGVycmlibGUgcHVuaXNobWVudCBvbiBoaW0uKDEpCgpHcmFubnkgc2F0IG9uIHRoZSBicm9vbSBhbmQgbXV0dGVyZWQgYSBmZXcgd29yZHMsIGJ1dCB3aXRob3V0IG11Y2gKY29udmljdGlvbi4gIEFmdGVyIGEgZnVydGhlciBjb3VwbGUgb2YgdHJpZXMsIHNoZSBnb3Qgb2ZmLCBmaWRkbGVkIHdpdGgKdGhlIGJpbmRpbmcsIGFuZCBoYWQgYW5vdGhlciBnby4gIFRoZXJlIHdhcyBhIHN1c3BpY2lvbiBvZiBnbGl0dGVyIGZyb20Kb25lIGVuZCBvZiB0aGUgc3RpY2ssIHdoaWNoIHF1aWNrbHkgZGllZCBhd2F5LgoKIkRyYXQsIiBzaGUgc2FpZCwgdW5kZXIgaGVyIGJyZWF0aC4KClNoZSBsb29rZWQgYXJvdW5kIGNhcmVmdWxseSwgaW4gY2FzZSBhbnlvbmUgd2FzIHdhdGNoaW5nLiAgSW4gZmFjdCBpdCB3YXMKb25seSBhIGh1bnRpbmcgYmFkZ2VyIHdobywgaGVhcmluZyB0aGUgdGh1bXBpbmcgb2YgcnVubmluZyBmZWV0LCBwb2tlZCBpdHMKaGVhZCBvdXQgZnJvbSB0aGUgYnVzaGVzIGFuZCBzYXcgR3Jhbm55IGh1cnRsaW5nIGRvd24gdGhlIHBhdGggd2l0aCB0aGUKYnJvb21zdGljayBoZWxkIHN0aWZmLWFybWVkIGJlc2lkZSBoZXIuICBBdCBsYXN0IHRoZSBtYWdpYyBjYXVnaHQsIGFuZCBzaGUKbWFuYWdlZCB0byB2YXVsdCBjbHVtc2lseSBvbiB0byBpdCBiZWZvcmUgaXQgdHJ1bmRsZWQgaW50byB0aGUgbmlnaHQgc2t5CmFzIGdyYWNlZnVsbHkgYXMgYSBkdWNrIHdpdGggb25lIHdpbmcgbWlzc2luZy4KCkZyb20gYWJvdmUgdGhlIHRyZWVzIGNhbWUgYSBtdWZmbGVkIGN1cnNlIGFnYWluc3QgYWxsIGR3YXJmaXNoIG1lY2hhbmljcy4KCigxKSBTaGUgZGlkIG5vdGhpbmcsIGFsdGhvdWdoIHNvbWV0aW1lcyB3aGVuIHNoZSBzYXcgaGltIGluIHRoZSB2aWxsYWdlCnNoZSdkIHNtaWxlIGluIGEgZmFpbnQsIHB1enpsZWQgd2F5LiAgQWZ0ZXIgdGhyZWUgd2Vla3Mgb2YgdGhpcyB0aGUKc3VzcGVuc2Ugd2FzIHRvbyBtdWNoIGZvciBoaW0gYW5kIGhlIHRvb2sgaGlzIG93biBsaWZlOyBpbiBmYWN0IGhlIHRvb2sgaXQKYWxsIHRoZSB3YXkgYWNyb3NzIHRoZSBjb250aW5lbnQsIHdoZXJlIGhlIGJlY2FtZSBhIHJlZm9ybWVkIGNoYXJhY3RlciBhbmQKbmV2ZXIgd2VudCBob21lIGFnYWluLgoKICBbV3lyZCBTaXN0ZXJzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiA3NiAocGFzc2FnZSBzdGFydHMgbWlkLXBhcmFncmFwaCkKJXBhc3NhZ2UgNQpBbmQsIHdpdGggYWxhcm1pbmcgc3VkZGVubmVzcywgbm90aGluZyBoYXBwZW5lZC4KCiAgW1d5cmQgU2lzdGVycywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gODIgKCcvR29vZC8gZm9vbCc6IGxvd2VyY2FzZSAnZm9vbCcgaXMgYWNjdXJhdGUpCiVwYXNzYWdlIDYKIklzIHRoaXMgYSBkYWdnZXIgSSBzZWUgYmVmb3JlIG1lPyIgaGUgbXVtYmxlZC4KCiJVbS4gIE5vLCBteSBsb3JkLiAgSXQncyBteSBoYW5rZXJjaGllZiwgeW91IHNlZS4gIFlvdSBjYW4gc29ydCBvZiB0ZWxsIHRoZQpkaWZmZXJlbmNlIGlmIHlvdSBsb29rIGNsb3NlbHkuICBJdCBkb2Vzbid0IGhhdmUgYXMgbWFueSBzaGFycCBlZGdlcy4iCgoiL0dvb2QvIGZvb2wsIiBzYWlkIHRoZSBkdWtlLCB2YWd1ZWx5LgoKVG90YWxseSBtYWQsIHRoZSBGb29sIHRob3VnaHQuICBTZXZlcmFsIGJyaWNrcyBzaG9ydCBvZiBhIGJ1bmRsZS4gIFNvIGZhcgpyb3VuZCB0aGUgdHdpc3QgeW91IGNvdWxkIHVzZSBoaW0gdG8gb3BlbiB3aW5lIGJvdHRsZXMuCgoiS25lZWwgYmVzaWRlIG1lLCIgbXkgRm9vbC4KClRoZSBGb29sIGRpZCBzby4gIFRoZSBkdWtlIGxhaWQgYSBzb2lsZWQgYmFuZGFnZSBvbiBoaXMgc2hvdWxkZXIuCgoiQXJlIHlvdSBsb3lhbCwgRm9vbD8iIGhlIHNhaWQuICAiQXJlIHlvdSB0cnVzdHdvcnRoeT8iCgoiSSBzd29yZSB0byBmb2xsb3cgbXkgbG9yZCB1bnRpbCBkZWF0aCwiIHNhaWQgdGhlIEZvb2wgaG9hcnNlbHkuCgpUaGUgZHVrZSBwcmVzc2VkIGhpcyBtYWQgZmFjZSBjbG9zZSB0byB0aGUgRm9vbCwgd2hvIGxvb2tlZCB1cCBpbnRvIGEgcGFpcgpvZiBibG9vZHNob3QgZXllcy4KCiJJIGRpZG4ndCB3YW50IHRvLCIgaGUgaGlzc2VkIGNvbnNwaXJhdG9yaWFsbHkuICAiVGhleSBtYWRlIG1lIGRvIGl0LiAgSQpkaWRuJ3Qgd2FudC0tIgoKVGhlIGRvb3Igc3d1bmcgb3Blbi4gIFRoZSBkdWNoZXNzIGZpbGxlZCB0aGUgZG9vcndheS4gIEluIGZhY3QsIHNoZSB3YXMKbmVhcmx5IHRoZSBzYW1lIHNoYXBlLgoKIkxlb25hbCEiIHNoZSBiYXJrZWQuCgpUaGUgZm9vbCB3YXMgZmFzY2luYXRlZCBieSB3aGF0IGhhcHBlbmVkIHRvIHRoZSBkdWtlJ3MgZXllcy4gIFRoZSBtYWQgcmVkCmZsYW1lIHZhbmlzaGVkLCB3YXMgc3Vja2VkIGJhY2t3YXJkcywgYW5kIHJlcGxhY2VkIGJ5IHRoZSBoYXJkIGJsdWUgc3RhcmUKaGUgaGFkIGNvbWUgdG8gcmVjb2duaXplLiAgSXQgZGlkbid0IG1lYW4sIGhlIHJlYWxpemVkLCB0aGF0IHRoZSBkdWtlIHdhcwphbnkgbGVzcyBtYWQuICBFdmVuIHRoZSBjb2xkbmVzcyBvZiBoaXMgc2FuaXR5IHdhcyBtYWRuZXNzIGluIGEgd2F5LiAgVGhlCmR1a2UgaGFkIGEgbWluZCB0aGF0IHRpY2tlZCBsaWtlIGEgY2xvY2sgYW5kLCBsaWtlIGEgY2xvY2ssIGl0IHJlZ3VsYXJseQp3ZW50IGN1Y2tvby4KCiAgW1d5cmQgU2lzdGVycywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gODUKJXBhc3NhZ2UgNwpPbiB0aGUgY3Jlc3Qgb2YgdGhlIG1vb3IsIHdoZXJlIGluIHRoZSBzdW1tZXIgcGFydHJpZGdlcyBsdXJrZWQgYW1vbmcgdGhlCmJ1c2hlcyBsaWtlIHNtYWxsLCB3aGlycmluZyBpZGlvdHMsIHdhcyBhIHN0YW5kaW5nIHN0b25lLiAgSXQgc3Rvb2Qgcm91Z2hseQp3aGVyZSB0aGUgd2l0Y2hlcycgdGVycml0b3JpZXMgbWV0LCBhbHRob3VnaCB0aGUgYm91bmRhcmllcyB3ZXJlIG5ldmVyCmZvcm1hbGx5IG1hcmtlZCBvdXQuCgpUaGUgc3RvbmUgd2FzIGFib3V0IHRoZSBzYW1lIGhlaWdodCBhcyBhIHRhbGwgbWFuLCBhbmQgbWFkZSBvZiBhIGJsdWlzaAp0aW50ZWQgcm9jay4gIEl0IHdhcyBjb25zaWRlcmVkIGludGVuc2VseSBtYWdpY2FsIGJlY2F1c2UsIGFsdGhvdWdoIHRoZXJlCndhcyBvbmx5IG9uZSBvZiBpdCwgL25vLW9uZSBoYWQgZXZlciBiZWVuIGFibGUgdG8gY291bnQgaXQvOyBpZiBpdCBzYXcKYW55b25lIGxvb2tpbmcgYXQgaXQgc3BlY3VsYXRpdmVseSwgaXQgc2h1ZmZsZWQgYmVoaW5kIHRoZW0uICBJdCB3YXMgdGhlCm1vc3Qgc2VsZi1lZmZhY2luZyBtb25vbGl0aCBldmVyIGRpc2NvdmVyZWQuCgogIFtXeXJkIFNpc3RlcnMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDkyIChwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoKQolcGFzc2FnZSA4CkRlbW9ucyB3ZXJlIGxpa2UgZ2VuaWVzIG9yIHBoaWxvc29waHkgcHJvZmVzc29ycy0taWYgeW91IGRpZG4ndCB3b3JkIHRoaW5ncwovZXhhY3RseS8gcmlnaHQsIHRoZXkgZGVsaWdodGVkIGluIGdpdmluZyB5b3UgYWJzb2x1dGVseSBhY2N1cmF0ZSBhbmQKY29tcGxldGVseSBtaXNsZWFkaW5nIGFuc3dlcnMuCgogIFtXeXJkIFNpc3RlcnMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDEyMQolcGFzc2FnZSA5Ck5hbm55IE9nZyB3YXMgYWxzbyBvdXQgZWFybHkuICBTaGUgaGFkbid0IGJlZW4gYWJsZSB0byBnZXQgYW55IHNsZWVwCmFueXdheSwgYW5kIGJlc2lkZXMsIHNoZSB3YXMgd29ycmllZCBhYm91dCBHcmVlYm8uICBHcmVlYm8gd2FzIG9uZSBvZiBoZXIKZmV3IGJsaW5kIHNwb3RzLiAgV2hpbGUgaW50ZWxsZWN0dWFsbHkgc2hlIHdvdWxkIGNvbmNlZGUgdGhhdCBoZSB3YXMKaW5kZWVkIGEgZmF0LCBjdW5uaW5nLCBldmlsLXNtZWxsaW5nIG11bHRpcGxlIHJhcGlzdCwgc2hlIG5ldmVydGhlbGVzcwppbnN0aW5jdGl2ZWx5IHBpY3R1cmVkIGhpbSBhcyB0aGUgc21hbGwgZmx1ZmZ5IGtpdHRlbiBoZSBoYWQgYmVlbiBkZWNhZGVzCmJlZm9yZS4gIFRoZSBmYWN0IHRoYXQgaGUgaGFkIG9uY2UgY2hhc2VkIGEgZmVtYWxlIHdvbGYgdXAgYSB0cmVlIGFuZApzZXJpb3VzbHkgc3VycHJpc2VkIGEgc2hlLWJlYXIgd2hvIGhhZCBiZWVuIGlubm9jZW50bHkgZGlnZ2luZyBmb3Igcm9vdHMKZGlkbid0IHN0b3AgaGVyIHdvcnJ5aW5nIHRoYXQgc29tZXRoaW5nIGJhZCBtaWdodCBoYXBwZW4gdG8gaGltLiAgSXQgd2FzCmdlbmVyYWxseSBjb25zaWRlcmVkIGJ5IGV2ZXJ5b25lIGVsc2UgaW4gdGhlIGtpbmdkb20gdGhhdCB0aGUgb25seSB0aGluZwp0aGF0IG1pZ2h0IHNsb3cgR3JlZWJvIGRvd24gd2FzIGEgZGlyZWN0IG1ldGVvcml0ZSBzdHJpa2UuCgogIFtXeXJkIFNpc3RlcnMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDEzMyAodGhlIGR1a2UgaGFzIGxvY2tlZCBOYW5ueSBPZ2cgaW4gdGhlIGNhc3RsZSBkdW5nZW9uKQolcGFzc2FnZSAxMAoiSSByZWFsbHkgYWR2aXNlIHlvdSBhbGwgdG8gcmV0dXJuIGhvbWUsIiBzYWlkIEdyYW5ueSBXZWF0aGVyd2F4LiAgIlRoZXJlCmhhcyBwcm9iYWJseSBiZWVuIGEgbWlzdW5kZXJzdGFuZGluZy4gIEV2ZXJ5b25lIGtub3dzIGEgd2l0Y2ggY2Fubm90IGJlCmhlbGQgYWdhaW5zdCBoZXIgd2lsbC4iCgoiSXQncyBnb25lIHRvbyBmYXIgdGhpcyB0aW1lLCIgc2FpZCBhIHBlYXNhbnQuICAiQWxsIHRoaXMgYnVybmluZyBhbmQKdGF4aW5nIGFuZCBub3cgdGhpcy4gIEkgYmxhbWUgeW91IHdpdGNoZXMuICBJdCdzIGdvdCB0byBzdG9wLiAgSSBrbm93IG15CnJpZ2h0cy4iCgoiV2hhdCByaWdodHMgYXJlIHRoZXk/IiBzYWlkIEdyYW5ueS4KCiJEdW5uYWdlLCBjb3doYWdlLWluLW9yZGluYXJ5LCBiYWRpbmFnZSwgbGVmdG92ZXJzLCBzY3JvbW1pZGdlLCBjbGFyeSBhbmQKc3B1bnQuIiBzYWlkIHRoZSBwZWFzYW50IHByb21wdGx5LiAgIkFuZCBhY29ybmFnZSwgZXZlcnkgb3RoZXIgeWVhciwgYW5kCnRoZSByaWdodCB0byBrZWVwIHR3by10aGlyZHMgb2YgYSBnb2F0IG9uIHRoZSBjb21tb24uICBVbnRpbCBoZSBzZXQgZmlyZSB0bwppdC4gIEl0IHdhcyBhIGJsb29keSBnb29kIGdvYXQsIHRvby4iCgoiQSBtYW4gY291bGQgZ28gZmFyLCBrbm93aW5nIGhpcyByaWdodHMgbGlrZSB5b3UgZG8sIiBzYWlkIEdyYW5ueS4gICJCdXQKcmlnaHQgbm93IGhlIHNob3VsZCBnbyBob21lLiIKCiAgW1d5cmQgU2lzdGVycywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTY0CiVwYXNzYWdlIDExCiJXaGF0ZXZlciBoYXBwZW5lZCB0byB0aGUgcnVsZSBhYm91dCBub3QgbWVkZGxpbmcgaW4gcG9saXRpY3M/IiBzYWlkIE1hZ3JhdCwKd2F0Y2hpbmcgaGVyIHJldHJlYXRpbmcgYmFjay4KCk5hbm55IE9nZyBtYXNzYWdlZCBzb21lIGxpa2UgYmFjayBpbnRvIGhlciBmaW5nZXJzLgoKIkJ5IEhva2ksIHRoYXQgd29tYW4ncyBnb3QgYSBqYXcgbGlrZSBhbiBhbnZpbCwiIHNoZSBzYWlkLiAgIldoYXQgd2FzIHRoYXQ/IgoKIkkgc2FpZCwgd2hhdCBhYm91dCB0aGlzIHJ1bGUgYWJvdXQgbm90IG1lZGRsaW5nPyIgc2FpZCBNYWdyYXQuCgoiQWgsIiBzYWlkIE5hbm55LiAgU2hlIHRvb2sgdGhlIGdpcmwncyBhcm0uICAiVGhlIHRoaW5nIGlzLCIgc2hlIGV4cGxhaW5lZCwKImFzIHlvdSBhZHZhbmNlIGluIHRoZSBDcmFmdCwgeW91J2xsIGxlYXJuIHRoZXJlIGlzIGFub3RoZXIgcnVsZS4gIEVzbWUncwpvYmV5ZWQgaXQgYWxsIGhlciBsaWZlLiIKCiJBbmQgd2hhdCdzIHRoYXQ/IgoKIldoZW4geW91IGJyZWFrIHJ1bGVzLCBicmVhayAnZW0gZ29vZCBhbmQgaGFyZCwiIHNhaWQgTmFubnksIGFuZCBncmlubmVkIGEKc2V0IG9mIGd1bXMgdGhhdCB3ZXJlIG1vcmUgbWVuYWNpbmcgdGhhbiB0ZWV0aC4KCiAgW1d5cmQgU2lzdGVycywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjM4CiVwYXNzYWdlIDEyCiJJIG1lYW4gaXQuICBMb29rIGF0IG1lLiAgSSB3YXNuJ3Qgc3VwcG9zZWQgdG8gYmUgd3JpdGluZyBwbGF5cy4gIER3YXJmcwphcmVuJ3QgZXZlbiBzdXBwb3NlZCB0byBiZSBhYmxlIHRvIC9yZWFkLy4gIEkgc2hvdWxkbid0IHdvcnJ5IHRvbyBtdWNoCmFib3V0IGRlc3RpbnksIGlmIEkgd2FzIHlvdS4gIEkgd2FzIGRlc3RpbmVkIHRvIGJlIGEgbWluZXIuICBEZXN0aW55IGdldHMKaXQgd3JvbmcgaGFsZiB0aGUgdGltZS4iCgoiQnV0IHlvdSBzYWlkIGhlIGxvb2tzIGxpa2UgdGhlIEZvb2wgcGVyc29uLiAgSSBjYW4ndCBzZWUgaXQgbXlzZWxmLCBtYXJrCnlvdS4iCgoiVGhlIGxpZ2h0J3MgZ290IHRvIGJlIHJpZ2h0LiIKCiJDb3VsZCBiZSBzb21lIGRlc3RpbnkgYXQgd29yayB0aGVyZS4iCgpId2VsIHNocnVnZ2VkLiAgRGVzdGlueSB3YXMgZnVubnkgc3R1ZmYsIGhlIGtuZXcuICBZb3UgY291bGRuJ3QgdHJ1c3QgaXQuCk9mdGVuIHlvdSBjb3VsZG4ndCBldmVuIHNlZSBpdC4gIEp1c3Qgd2hlbiB5b3Uga25ldyB5b3UgaGFkIGl0IGNvcm5lcmVkLCBpdAp0dXJuZWQgb3V0IHRvIGJlIHNvbWV0aGluZyBlbHNlLS1jb2luY2lkZW5jZSwgbWF5YmUsIG9yIHByb3ZpZGVuY2UuICBZb3UKYmFycmVkIHRoZSBkb29yIGFnYWluc3QgaXQsIGFuZCBpdCB3YXMgc3RhbmRpbmcgYmVoaW5kIHlvdS4gIFRoZW4ganVzdCB3aGVuCnlvdSB0aG91Z2h0IHlvdSBoYWQgaXQgbmFpbGVkIGRvd24gaXQgd2Fsa2VkIGF3YXkgd2l0aCB0aGUgaGFtbWVyLgoKSGUgdXNlZCBkZXN0aW55IGEgbG90LiAgQXMgYSB0b29sIGZvciBoaXMgcGxheXMgaXQgd2FzIGV2ZW4gYmV0dGVyIHRoYW4gYQpnaG9zdC4gIFRoZXJlIHdhcyBub3RoaW5nIGxpa2UgYSBiaXQgb2YgZGVzdGlueSB0byBnZXQgdGhlIG9sZCBwbG90IHJvbGxpbmcuCkJ1dCBpdCB3YXMgYSBtaXN0YWtlIHRvIHRoaW5rIHlvdSBjb3VsZCBzcG90IHRoZSBzaGFwZSBvZiBpdC4gIEFuZCBhcyBmb3IKdGhpbmtpbmcgaXQgY291bGQgYmUgY29udHJvbGxlZC4uLgoKICBbV3lyZCBTaXN0ZXJzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyNDIgKHBhc3NhZ2Ugc3RhcnRzIG1pZC1wYXJhZ3JhcGg7IExhbmNyZSBoYXMgcmVjZW50bHkgY29tZSBvdXQgb2YgYQojICAgICAgICAgbWFnaWMtaW5kdWNlZCAxNS15ZWFyIHN0YXNpczsgJ3RoaW5ncyAuLi4gaXMnOiAndGhpbmdzJyBwbHVyYWwgaXMKIyAgICAgICAgIGFjY3VyYXRlLCB0aG91Z2ggcHJvYmFibHkgYSB0eXBvKQolcGFzc2FnZSAxMwpPbiB0b3Agb2YgdGhlIGdlbmVyYWwgc3VzcGljaW9uIG9mIHdpdGNoZXMsIGl0IHdhcyBkYXduaW5nIG9uIHRoZSBmZXcgcGVvcGxlCmluIExhbmNyZSB3aG8gaGFkIGFueSBkZWFsaW5ncyB3aXRoIHRoZSBvdXRzaWRlIHdvcmxkIHRoYXQgYSkgZWl0aGVyIG1vcmUKdGhpbmdzIGhhZCBiZWVuIGhhcHBlbmluZyB0aGFuIHRoZXkgaGFkIGhlYXJkIGFib3V0IGJlZm9yZSBvciBiKSB0aW1lIHdhcwpvdXQgb2Ygam9pbnQuICBJdCB3YXNuJ3QgZWFzeSB0byBwcm92ZSgxKSBidXQgdGhlIGZldyB0cmFkZXJzIHdobyBjYW1lIGFsb25nCnRoZSBtb3VudGFpbiB0cmFja3MgYWZ0ZXIgdGhlIHdpbnRlciBzZWVtZWQgdG8gYmUgcmF0aGVyIG9sZGVyIHRoYW4gdGhleQpzaG91bGQgaGF2ZSBiZWVuLiAgVW5leHBsYWluZWQgaGFwcGVuaW5ncyB3ZXJlIGFsd2F5cyBtb3JlIG9yIGxlc3MgZXhwZWN0ZWQKaW4gdGhlIFJhbXRvcHMgYmVjYXVzZSBvZiB0aGUgaGlnaCBtYWdpY2FsIHBvdGVudGlhbCwgYnV0IHNldmVyYWwgeWVhcnMKZGlzYXBwZWFyaW5nIG92ZXJuaWdodCB3YXMgYSBiaXQgb2YgYSBmaXJzdC4KCigxKSBCZWNhdXNlIG9mIHRoZSB3YXkgdGltZSB3YXMgcmVjb3JkZWQgYW1vbmcgdGhlIHZhcmlvdXMgc3RhdGVzLCBraW5nZG9tcwphbmQgY2l0aWVzLiAgQWZ0ZXIgYWxsLCB3aGVuIG92ZXIgYW4gYXJlYSBvZiBhIGh1bmRyZWQgc3F1YXJlIG1pbGVzIHRoZSBzYW1lCnllYXIgaXMgdmFyaW91c2x5IHRoZSBZZWFyIG9mIHRoZSBTbWFsbCBCYXQsIHRoZSBBbnRpY2lwYXRlZCBNb25rZXksIHRoZQpIdW50aW5nIENsb3VkLCBGYXQgQ293cywgVGhyZWUgQnJpZ2h0IFN0YWxsaW9ucyBhbmQgYXQgbGVhc3QgbmluZSBudW1iZXJzCnJlY29yZGluZyB0aGUgdGltZSBzaW5jZSgyKSBhc3NvcnRlZCBraW5ncywgcHJvcGhldHMsIGFuZCBzdHJhbmdlIGV2ZW50cyB3ZXJlCmVpdGhlciBjcm93bmVkLCBib3JuIG9yIGhhcHBlbmVkLCBhbmQgZWFjaCB5ZWFyIHdhcyBhIGRpZmZlcmVudCBudW1iZXIgb2YKbW9udGhzLCBhbmQgc29tZSBvZiB0aGVtIGRvbid0IGhhdmUgd2Vla3MsIGFuZCBvbmUgb2YgdGhlbSByZWZ1c2VzIHRvIGFjY2VwdAp0aGUgZGF5IGFzIGEgbWVhc3VyZSBvZiB0aW1lLCB0aGUgb25seSB0aGluZ3MgaXQgaXMgcG9zc2libGUgdG8gYmUgc3VyZSBvZgppcyB0aGF0IGdvb2Qgc2V4IGRvZXNuJ3QgbGFzdCBsb25nIGVub3VnaC4oMykKCigyKSBUaGUgY2FsZW5kYXIgb2YgdGhlIFRoZW9jcmFjeSBvZiBNdW50YWIgY291bnRzIC9kb3duLywgbm90IHVwLiAgTm8tb25lCmtub3dzIHdoeSwgYnV0IGl0IG1pZ2h0IG5vdCBiZSBhIGdvb2QgaWRlYSB0byBoYW5nIGFyb3VuZCBhbmQgZmluZCBvdXQuCgooMykgRXhjZXB0IGZvciB0aGUgWmFwaW5nbyB0cmliZSBvZiB0aGUgR3JlYXQgTmVmLCBvZiBjb3Vyc2UuCgogIFtXeXJkIFNpc3RlcnMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDI1MCAocGFzc2FnZSBzdGFydHMgbWlkLXBhcmFncmFwaCkKJXBhc3NhZ2UgMTQKSXQgd2FzIGEgbGFuZCBvZiBkZXNjcmliYWJsZSBiZWF1dHkuCgogIFtXeXJkIFNpc3RlcnMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDI2NSAocGFzc2FnZSBzdGFydHMgbWlkLXBhcmFncmFwaCkKJXBhc3NhZ2UgMTUKVGhlIHBhc3QgdXNlZCB0byBiZSBhIGxvdCBiZXR0ZXIgdGhhbiBpdCBpcyBub3cuCgogIFtXeXJkIFNpc3RlcnMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQolZSB0aXRsZQojCiMKIwoldGl0bGUgUHlyYW1pZHMgKDExKQojIHAuIDIxOCAoUk9DIGVkaXRpb24pCiVwYXNzYWdlIDEgKHBhc3NhZ2UgZW5kcyBtaWQtcGFyYWdyYXBoKQpXaGF0IGEgY2hhcCBuZWVkZWQgYXQgYSB0aW1lIGxpa2UgdGhpcyB3YXMgYSBzaWduLCBzb21lIHNvcnQgb2YgYm9vayBvZgppbnN0cnVjdGlvbnMuICBUaGUgdHJvdWJsZSB3aXRoIGxpZmUgd2FzIHRoYXQgeW91IGRpZG4ndCBnZXQgYSBjaGFuY2UgdG8KcHJhY3RpY2UgYmVmb3JlIGRvaW5nIGl0IGZvciByZWFsLgoKICBbUHlyYW1pZHMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDEyOCAocGFzc2FnZSBzdGFydHMgbWlkLXBhcmFncmFwaCBhbmQgZW5kcyBtaWQtcGFyYWdyYXBoKQolcGFzc2FnZSAyCk1lcmUgYW5pbWFscyBjb3VsZG4ndCBwb3NzaWJseSBtYW5hZ2UgdG8gYWN0IGxpa2UgdGhpcy4gIFlvdSBuZWVkIHRvIGJlIGEKaHVtYW4gYmVpbmcgdG8gYmUgcmVhbGx5IHN0dXBpZC4KCiAgW1B5cmFtaWRzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gOS0xMCAoJ3RsaW5nYXMnIGlzIGFjY3VyYXRlKQolcGFzc2FnZSAzCkl0IHdhcyBhIGZ1bGwtbGVuZ3RoIG1pcnJvci4gIEFsbCBhc3Nhc3NpbnMgaGFkIGEgZnVsbC1sZW5ndGggbWlycm9yIGluCnRoZWlyIHJvb21zLCBiZWNhdXNlIGl0IHdvdWxkIGJlIGEgdGVycmlibGUgaW5zdWx0IHRvIGFueW9uZSB0byBraWxsIHRoZW0Kd2hlbiB5b3Ugd2VyZSBiYWRseSBkcmVzc2VkLgoKVGVwcGljIGV4YW1pbmVkIGhpbXNlbGYgY3JpdGljYWxseS4gIFRoZSBvdXRmaXQgaGFkIGNvc3QgaGltIGhpcyBsYXN0CnBlbm55LCBhbmQgd2FzIGhlYXZ5IG9uIHRoZSBibGFjayBzaWxrLiAgSXQgd2hpc3BlcmVkIGFzIGhlIG1vdmVkLiAgSXQgd2FzCnByZXR0eSBnb29kLgoKQXQgbGVhc3QgdGhlIGhlYWRhY2hlIHdhcyBnb2luZy4gIEl0IGhhZCBuZWFybHkgY3JpcHBsZWQgaGltIGFsbCBkYXk7IGhlJ2QKYmVlbiBpbiBkcmVhZCBvZiBoYXZpbmcgdG8gc3RhcnQgdGhlIHJ1biB3aXRoIHB1cnBsZSBzcG90cyBpbiBmcm9udCBvZiBoaXMKZXllcy4KCkhlIHNpZ2hlZCBhbmQgb3BlbmVkIHRoZSBibGFjayBib3ggYW5kIHRvb2sgb3V0IGhpcyByaW5ncyBhbmQgc2xpcHBlZCB0aGVtCm9uLiAgQW5vdGhlciBib3ggaGVsZCBhIHNldCBvZiBrbml2ZXMgb2YgS2xhdGNoaWFuIHN0ZWVsLCB0aGVpciBibGFkZXMKZGFya2VuZWQgd2l0aCBsYW1wIGJsYWNrLiAgVmFyaW91cyBjdW5uaW5nIGFuZCBpbnRyaWNhdGUgZGV2aWNlcyB3ZXJlIHRha2VuCmZyb20gdmVsdmV0IGJhZ3MgYW5kIGRyb3BwZWQgaW50byBwb2NrZXRzLiAgQSBjb3VwbGUgb2YgbG9uZy1ibGFkZWQKdGhyb3dpbmcgL3RsaW5nYXMvIHdlcmUgc2xpcHBlZCBpbnRvIHRoZWlyIHNoZWF0aHMgaW5zaWRlIGhpcyBib290cy4gIEEKdGhpbiBzaWxrIGxpbmUgYW5kIGZvbGRpbmcgZ3JhcG5lbCB3ZXJlIHdvdW5kIGFyb3VuZCBoaXMgd2Fpc3QsIG92ZXIgdGhlCmNoYWluLW1haWwgc2hpcnQuICBBIGJsb3dwaXBlIHdhcyBhdHRhY2hlZCB0byBpdHMgbGVhdGhlciB0aG9uZyBhbmQgZHJvcHBlZApkb3duIGhpcyBiYWNrIHVuZGVyIGhpcyBjbG9hazsgVGVwcGljIHBvY2tldGVkIGEgc2xpbSB0aW4gY29udGFpbmVyIHdpdGggYW4KYXNzb3J0bWVudCBvZiBkYXJ0cywgdGhlaXIgdGlwcyBjb3JrZWQgYW5kIHRoZWlyIHN0ZW1zIGJyYWlsbGUtY29kZWQgZm9yCmVhc2Ugb2Ygc2VsZWN0aW9uIGluIHRoZSBkYXJrLgoKSGUgd2luY2VkLCBjaGVja2VkIHRoZSBibGFkZSBvZiBoaXMgcmFwaWVyIGFuZCBzbHVuZyB0aGUgYmFsZHJpYyBvdmVyIGhpcwpyaWdodCBzaG91bGRlciwgdG8gYmFsYW5jZSB0aGUgYmFnIG9mIGxlYWQgc2xpbmdzaG90IGFtbXVuaXRpb24uICBBcyBhbgphZnRlcnRob3VnaHQgaGUgb3BlbmVkIGhpcyBzb2NrIGRyYXdlciBhbmQgdG9vayBhIHBpc3RvbCBjcm9zc2JvdywgYSBmbGFzawpvZiBvaWwsIGEgcm9sbCBvZiBsb2NrcGlja3MgYW5kLCBhZnRlciBzb21lIGNvbnNpZGVyYXRpb24sIGEgcHVuY2ggZGFnZ2VyLAphIGJhZyBvZiBhc3NvcnRlZCBjYWx0cmFwcyBhbmQgYSBzZXQgb2YgYnJhc3Mga251Y2tsZXMuCgpUZXBwaWMgcGlja2VkIHVwIGhpcyBoYXQgYW5kIGNoZWNrZWQgaXRzIGxpbmluZyBmb3IgdGhlIGNvaWwgb2YgY2hlZXNld2lyZS4KSGUgcGxhY2VkIGl0IG9uIGhpcyBoZWFkIGF0IGEgamF1bnR5IGFuZ2xlLCB0b29rIGEgbGFzdCBzYXRpc2ZpZWQgbG9vayBhdApoaW1zZWxmIGluIHRoZSBtaXJyb3IsIHR1cm5lZCBvbiBoaXMgaGVlbCBhbmQsIHZlcnkgc2xvd2x5LCBmZWxsIG92ZXIuCgogIFtQeXJhbWlkcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMzAKJXBhc3NhZ2UgNApIZSdkIGFsd2F5cyByZW1lbWJlciB0aGUgZmlyc3QgbmlnaHQgaW4gdGhlIGRvcm1pdG9yeS4gIEl0IHdhcyBsb25nIGVub3VnaAp0byBhY2NvbW1vZGF0ZSBhbGwgZWlnaHRlZW4gYm95cyBpbiBWaXBlciBIb3VzZSwgYW5kIGRyYXVnaHR5IGVub3VnaCB0bwphY2NvbW1vZGF0ZSB0aGUgZ3JlYXQgb3V0ZG9vcnMuICBJdHMgZGVzaWduZXIgbWF5IGhhdmUgaGFkIGNvbWZvcnQgaW4gbWluZCwKYnV0IG9ubHkgc28gdGhhdCBoZSBjb3VsZCBhdm9pZCBpdCB3aGVuZXZlciBwb3NzaWJsZTogIGhlIGhhZCBjb250cml2ZWQgYQpyb29tIHRoYXQgY291bGQgYWN0dWFsbHkgYmUgY29sZGVyIHRoYW4gdGhlIHdlYXRoZXIgb3V0c2lkZS4KCiAgW1B5cmFtaWRzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiA5MgolcGFzc2FnZSA1CkEgZmV3IHN0YXJzIGhhZCBiZWVuIGxldCBvdXQgZWFybHkuICBUZXBwaWMgbG9va2VkIHVwIGF0IHRoZW0uICBQZXJoYXBzLCBoZQp0aG91Z2h0LCB0aGVyZSBpcyBsaWZlIHNvbWV3aGVyZSBlbHNlLiAgT24gdGhlIHN0YXJzLCBtYXliZS4gIElmIGl0J3MgdHJ1ZQp0aGF0IHRoZXJlIGFyZSBiaWxsaW9ucyBvZiB1bml2ZXJzZXMgc3RhY2tlZCBhbG9uZyBzaWRlIG9uZSBhbm90aGVyLCB0aGUKdGhpY2tuZXNzIG9mIGEgdGhvdWdodCBhcGFydCwgdGhlbiB0aGVyZSBtdXN0IGJlIHBlb3BsZSBlbHNld2hlcmUuCgpCdXQgd2hlcmV2ZXIgdGhleSBhcmUsIG5vIG1hdHRlciBob3cgbWlnaHRpbHkgdGhleSB0cnksIG5vIG1hdHRlciBob3cKbWFnbmlmaWNlbnQgdGhlIGVmZm9ydCwgdGhleSBzdXJlbHkgY2FuJ3QgbWFuYWdlIHRvIGJlIGFzIGdvZGF3ZnVsbHkgc3R1cGlkCmFzIHVzLiAgSSBtZWFuLCB3ZSB3b3JrIGF0IGl0LiAgV2Ugd2VyZSBnaXZlbiBhIHNwYXJrIG9mIGl0IHRvIHN0YXJ0IHdpdGgsCmJ1dCBvdmVyIGh1bmRyZWRzIG9mIHRob3VzYW5kcyBvZiB5ZWFycyB3ZSd2ZSByZWFsbHkgaW1wcm92ZWQgb24gaXQuCgogIFtQeXJhbWlkcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gOTYgKFB0YWNsdXNwIHRoZSBweXJhbWlkIGJ1aWxkZXIsIHNvbnMgUHRhY2x1c3AgSUlhIGFuZCBQdGFjbHVzcCBJSWIpCiVwYXNzYWdlIDYKRGVzY2VuZGFudHMhICBUaGUgZ29kcyBoYWQgc2VlbiBmaXQgdG8gZ2l2ZSBoaW0gb25lIHNvbiB3aG8gY2hhcmdlZCB5b3UgZm9yCnRoZSBhbW91bnQgb2YgYnJlYXRoIGV4cGVuZGVkIGluIHNheWluZyAiR29vZCBtb3JuaW5nIiwgYW5kIGFub3RoZXIgb25lIHdobwp3b3JzaGlwcGVkIGdlb21ldHJ5IGFuZCBzdGF5ZWQgdXAgYWxsIG5pZ2h0IGRlc2lnbmluZyBhcXVlZHVjdHMuICBZb3UKc2NyaW1wZWQgYW5kIHNhdmVkIHRvIHNlbmQgdGhlbSB0byB0aGUgYmVzdCBzY2hvb2xzLCBhbmQgdGhlbiB0aGV5IHdlbnQgYW5kCnBhaWQgeW91IGJhY2sgYnkgZ2V0dGluZyBlZHVjYXRlZC4KCiAgW1B5cmFtaWRzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxMzYKJXBhc3NhZ2UgNwpJdCdzIGEgZmFjdCBhcyBpbW11dGFibGUgYXMgdGhlIFRoaXJkIExhdyBvZiBTb2QgdGhhdCB0aGVyZSBpcyBubyBzdWNoCnRoaW5nIGFzIGEgZ29vZCBHcmFuZCBWaXppZXIuICBBIHByZWRpbGVjdGlvbiB0byBjYWNrbGUgYW5kIHBsb3QgaXMKYXBwYXJlbnRseSBwYXJ0IG9mIHRoZSBqb2Igc3BlYy4KCkhpZ2ggcHJpZXN0cyB0ZW5kIHRvIGdldCBwdXQgaW4gdGhlIHNhbWUgY2F0ZWdvcnkuICBUaGV5IGhhdmUgdG8gZmFjZSB0aGUKaW1wbGllZCBhc3N1bXB0aW9uIHRoYXQgbm8gc29vbmVyIGRvIHRoZXkgZ2V0IHRoZSBmdW5ueSBoYXQgdGhhbiB0aGV5J3JlCmlzc3Vpbmcgc3RyYW5nZSBvcmRlcnMsIGUuZy4sIHByaW5jZXNzZXMgdGllZCB0byByb2NrcyBmb3IgaXRpbmVyYW50IHNlYQptb25zdGVycyBhbmQgdGhyb3dpbmcgbGl0dGxlIGJhYmllcyBpbiB0aGUgc2VhLgoKVGhpcyBpcyBhIGdyb3NzIHNsYW5kZXIuICBUaHJvdWdob3V0IHRoZSBoaXN0b3J5IG9mIHRoZSBEaXNjIG1vc3QgaGlnaApwcmllc3RzIGhhdmUgYmVlbiBzZXJpb3VzLCBwaW91cyBhbmQgY29uc2NpZW50aW91cyBtZW4gd2hvIGhhdmUgZG9uZSB0aGVpcgpiZXN0IHRvIGludGVycHJldCB0aGUgd2lzaGVzIG9mIHRoZSBnb2RzLCBzb21ldGltZXMgZGlzZW1ib3dlbGxpbmcgb3IKZmxheWluZyBhbGl2ZSBodW5kcmVkcyBvZiBwZW9wbGUgaW4gYSBkYXkgaW4gb3JkZXIgdG8gbWFrZSBzdXJlIHRoZXkncmUKZ2V0dGluZyBpdCBhYnNvbHV0ZWx5IHJpZ2h0LgoKICBbUHlyYW1pZHMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAyMDYtMjA4ICh0ZXh0IGhhcyAndGhhdCdzIG5vdyBpdCBoYXBwZW5lZCc7ICdub3cnIGNoYW5nZWQgdG8gJ2hvdycgaGVyZSkKJXBhc3NhZ2UgOApDb3BvbHltZXIsIHRoZSBncmVhdGVzdCBzdG9yeXRlbGxlciBpbiB0aGUgaGlzdG9yeSBvZiB0aGUgd29ybGQsIHNhdCBiYWNrCmFuZCBiZWFtZWQgYXQgdGhlIGdyZWF0ZXN0IG1pbmRzIGluIHRoZSB3b3JsZCwgYXNzZW1ibGVkIGF0IHRoZSBkaW5pbmcKdGFibGUuCgpUZXBwaWMgaGFkIGFkZGVkIGFub3RoZXIgaW90YSB0byBoaXMgc3RvcmUgb2YgbmV3IGtub3dsZWRnZS4gICdTeW1wb3NpdW0nCm1lYW50IGEga25pZmUtYW5kLWZvcmsgdGVhLgoKIldlbGwsIiBzYWlkIENvcG9seW1lciwgYW5kIGxhdW5jaGVkIGludG8gdGhlIHN0b3J5IG9mIHRoZSBUc29ydGVhbiBXYXJzLgoKIllvdSBzZWUsIHdoYXQgaGFwcGVuZWQgd2FzLCAvaGUnZC8gdGFrZW4gL2hlci8gYmFjayBob21lLCBhbmQgaGVyCmZhdGhlci0tdGhpcyB3YXNuJ3QgdGhlIG9sZCBraW5nLCB0aGlzIHdhcyB0aGUgb25lIGJlZm9yZSwgdGhlIG9uZSB3aXRoIHRoZQp3b3NzbmFtZSwgaGUgbWFycmllZCBzb21lIGdpcmwgZnJvbSBvdmVyIEVsaGFyaWIgd2F5LCBzaGUgaGFkIGEgc3F1aW50LAp3aGF0IHdhcyBoZXIgbmFtZSBub3csIGJlZ2FuIHdpdGggYSBQLiAgT3IgYW4gTC4gIE9uZSBvZiB0aGVtIGxldHRlcnMsCmFueXdheS4gIEhlciBmYXRoZXIgb3duZWQgYW4gaXNsYW5kIG91dCBvbiB0aGUgYmF5IHRoZXJlLCBQYXB5bG9zIEkgdGhpbmsKaXQgd2FzLiAgTm8sIEkgdGVsbCBhIGxpZSwgaXQgd2FzIENyaW5peC4gIC9Bbnl3YXkvIHRoZSBraW5nLCB0aGUgb3RoZXIKa2luZywgaGUgcmFpc2VkIGFuIGFybXkgYW5kIHRoZXkuLi4uICBFbGVub3IsIHRoYXQgd2FzIGhlciBuYW1lLiAgU2hlIGhhZAphIHNxdWludCwgeW91IGtub3cuICBCdXQgcXVpdGUgYXR0cmFjdGl2ZSwgdGhleSBzYXkuICBXaGVuIEkgc2F5IG1hcnJpZWQsCkkgdHJ1c3QgSSBkbyBub3QgaGF2ZSB0byBzcGVsbCBpdCBvdXQgZm9yIHlvdS4gIEkgbWVhbiwgaXQgd2FzIGEgYml0CnVub2ZmaWNpYWwuICBFci4gIEFueXdheSwgdGhlcmUgd2FzIHRoaXMgd29vZGVuIGhvcnNlIGFuZCBhZnRlciB0aGV5J2QgZ290CmluLi4uICBEaWQgSSB0ZWxsIHlvdSBhYm91dCB0aGlzIGhvcnNlPyAgSXQgd2FzIGEgaG9yc2UuICBJJ20gcHJldHR5IHN1cmUKaXQgd2FzIGEgaG9yc2UuICBPciBtYXliZSBpdCB3YXMgYSBjaGlja2VuLiAgRm9yZ2V0IG15IG93biBuYW1lIG5leHQhICBJdAp3YXMgd29zc25hbWUncyBpZGVhLCB0aGUgb25lIHdpdGggdGhlIGxpbXAuICBZZXMuICBUaGUgbGltcCBpbiBoaXMgbGVnLCBJCm1lYW4uICBEaWQgSSBtZW50aW9uIGhpbT8gIFRoZXJlJ2QgYmVlbiB0aGlzIGZpZ2h0LiAgTm8sIHRoYXQgd2FzIHRoZSBvdGhlcgpvbmUsIEkgdGhpbmsuICBZZXMuICBBbnl3YXksIHRoaXMgd29vZGVuIHBpZywgZGFtbiBjbGV2ZXIgaWRlYSwgdGhleSBtYWRlCml0IG91dCBvZiB0aGluZy4gIFRpcCBvZiBteSB0b25ndWUuICBXb29kLiAgQnV0IHRoYXQgd2FzIGxhdGVyLCB5b3Uga25vdy4KVGhlIGZpZ2h0ISAgTmVhcmx5IGZvcmdvdCB0aGUgZmlnaHQuICBZZXMuICBEYW1uIGdvb2QgZmlnaHQuICBFdmVyeW9uZQpiYW5naW5nIG9uIHRoZWlyIHNoaWVsZHMgYW5kIHllbGxpbmcuICBXb3NzbmFtZSdzIGFybW91ciBzaG9uZSBsaWtlIHNoaW5pbmcKYXJtb3VyLiAgRmlnaHQgYW5kIGEgaGFsZiwgdGhhdCBmaWdodC4gIEJldHdlZW4gdGhpbmd5LCBub3QgdGhlIG9uZSB3aXRoCnRoZSBsaW1wLCB0aGUgb3RoZXIgb25lLCB3b3NzbmFtZSwgaGFkIHJlZCBoYWlyLiAgL1lvdS8ga25vdy4gIFRhbGwgZmVsbG93LAp0YWxrZWQgd2l0aCBhIGxpc3AuICBIb2xkIG9uLCBqdXN0IHJlbWVtYmVyZWQsIGhlIHdhcyBmcm9tIHNvbWUgb3RoZXIKaXNsYW5kLiAgTm90IGhpbS4gIFRoZSBvdGhlciBvbmUsIHdpdGggdGhlIGxpbXAuICBEaWRuJ3Qgd2FudCB0byBnbywgaGUKc2FpZCBoZSB3YXMgbWFkLiAgT2YgY291cnNlLCBoZSAvd2FzLyBibG9vZHkgbWFkLCBkZWZpbml0ZWx5LiAgSSBtZWFuLCBhCndvb2RlbiBjb3chICBMaWtlIHdvc3NuYW1lIHNhaWQsIHRoZSBraW5nLCBubyBub3QgdGhhdCBraW5nLCB0aGUgb3RoZXIgb25lLApoZSBzYXcgdGhlIGdvYXQsIGhlIHNhaWQgJ0kgZmVhciB0aGUgRXBoaWJlYW5zLCBlc3BlY2lhbGx5IHdoZW4gdGhleSdyZSBtYWQKZW5vdWdoIHRvIGxlYXZlIGJsb29keSBncmVhdCB3b29kZW4gbGl2ZXN0b2NrIG9uIHRoZSBkb29yc3RlcCwgdGFsayBhYm91dApuZXJ2ZSwgdGhleSBtdXN0IHRoaW5rIHdlIHdhcyBib3JuIHllc3RlcmRheSwgc2V0IGZpcmUgdG8gaXQsJyBhbmQsIG9mCmNvdXJzZSwgd29zc25hbWUgaGFkIG5pcHBlZCBpbiByb3VuZCB0aGUgYmFjayBhbmQgcHV0IGV2ZXJ5b25lIHRvIHRoZQpzd29yZCwgdGFsayBhYm91dCBsYXVnaC4gIERpZCBJIHNheSBzaGUgaGFkIGEgc3F1aW50PyAgVGhleSBzYWlkIHNoZSB3YXMKcHJldHR5LCBidXQgaXQgdGFrZXMgYWxsIHNvcnRzLiAgWWVzLiAgQW55d2F5LCB0aGF0J3MgaG93IGl0IGhhcHBlbmVkLgovTm93Lywgb2YgY291cnNlLCB3b3NzbmFtZS0tSSB0aGluayBoZSB3YXMgY2FsbGVkIE1lbHljYW51cywgaGFkIGEgbGltcC0taGUKd2FudGVkIHRvIGdvIGhvbWUsIHdlbGwsIHlvdSB3b3VsZCwgdGhleSdkIGJlZW4gdGhlcmUgZm9yIC95ZWFycy8sIGhlCndhc24ndCBnZXR0aW5nIGFueSB5b3VuZ2VyLiAgVGhhdCdzIHdoeSBoZSBkcmVhbXQgdXAgdGhlIHRoaW5nIGFib3V0IHRoZQp3b29kZW4gd29zc25hbWUuICBZZXMuICBJIHRlbGwgYSBsaWUsIExhdmFlbG91cyB3YXMgdGhlIG9uZSB3aXRoIHRoZSBrbmVlLgpQcmV0dHkgZ29vZCBmaWdodCwgdGhhdCBmaWdodCwgdGFrZSBpdCBmcm9tIG1lLiIKCkhlIGxhcHNlZCBpbnRvIHNlbGYtc2F0aXNmaWVkIHNpbGVuY2UuCgoiUHJldHR5IGdvb2QgZmlnaHQsIiBoZSBtdW1ibGVkIGFuZCwgc21pbGluZyBmYWludGx5LCBkcm9wcGVkIG9mZiB0byBzbGVlcC4KClRlcHBpYyB3YXMgYXdhcmUgdGhhdCBoaXMgb3duIG1vdXRoIHdhcyBoYW5naW5nIG9wZW4uICBIZSBzaHV0IGl0LiAgQWxvbmcKdGhlIHRhYmxlIHNldmVyYWwgb2YgdGhlIGRpbmVycyB3ZXJlIHdpcGluZyB0aGVpciBleWVzLgoKIk1hZ2ljLCIgc2FpZCBYZW5vLiAgIlNoZWVyIG1hZ2ljLiAgRXZlcnkgd29yZCBhIHRhc3NsZSBvbiB0aGUgY2Fub3B5IG9mClRpbWUuIgoKIkl0J3MgdGhlIHdheSBoZSByZW1lbWJlcnMgZXZlcnkgdGlueSBkZXRhaWwuICBQaW4gc2hhcnAsIiBtdXJtdXJlZCBJYmlkLgoKICBbUHlyYW1pZHMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDIxMQolcGFzc2FnZSA5CiJJJ2QgbG92ZSB0byBzdGF5IGFuZCBsaXN0ZW4gdG8geW91IGxpc3RlbmluZyB0byBtZSBhbGwgZGF5LCIgaGUgc2FpZC4KIkJ1dCB0aGVyZSdzIGEgbWFuIG92ZXIgdGhlcmUgSSdkIGxpa2UgdG8gc2VlLiIKCiJUaGF0J3MgYW1hemluZywiIHNhaWQgRW5kb3MsIG1ha2luZyBhIHNob3J0IG5vdGUgYW5kIHR1cm5pbmcgaGlzIGF0dGVudGlvbgp0byBhIGNvbnZlcnNhdGlvbiBmdXJ0aGVyIGFsb25nIHRoZSB0YWJsZS4gIEEgcGhpbG9zb3BoZXIgaGFkIGF2ZXJyZWQgdGhhdAphbHRob3VnaCB0cnV0aCB3YXMgYmVhdXR5LCBiZWF1dHkgd2FzIG5vdCBuZWNlc3NhcmlseSB0cnV0aCwgYW5kIGEgZmlnaHQgd2FzCmJyZWFraW5nIG91dC4gIEVuZG9zIGxpc3RlbmVkIGNhcmVmdWxseS4oMSkKCigxKSBUaGUgcm9sZSBvZiBsaXN0ZW5lcnMgaGFzIG5ldmVyIGJlZW4gZnVsbHkgYXBwcmVjaWF0ZWQuICBIb3dldmVyLCBpdCBpcwp3ZWxsIGtub3duIHRoYXQgbW9zdCBwZW9wbGUgZG9uJ3QgbGlzdGVuLiAgVGhleSB1c2UgdGhlIHRpbWUgd2hlbiBzb21lb25lCmVsc2UgaXMgc3BlYWtpbmcgdG8gdGhpbmsgb2Ygd2hhdCB0aGV5J3JlIGdvaW5nIHRvIHNheSBuZXh0LiAgVHJ1ZSBMaXN0ZW5lcnMKaGF2ZSBhbHdheXMgYmVlbiByZXZlcmVkIGFtb25nIG9yYWwgY3VsdHVyZXMsIGFuZCBwcml6ZWQgZm9yIHRoZWlyIHJhcml0eQp2YWx1ZTsgYmFyZHMgYW5kIHBvZXRzIGFyZSB0ZW4gYSBjb3csIGJ1dCBhIGdvb2QgTGlzdGVuZXIgaXMgaGFyZCB0byBmaW5kLApvciBhdCBsZWFzdCBoYXJkIHRvIGZpbmQgdHdpY2UuCgogIFtQeXJhbWlkcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjc4IChwZXJoYXBzIG91Z2h0IHRvIGVuZCB0aGlzIG9uZSB3aXRoIHRoZSBmaXJzdCBwYXJhZ3JhcGguLi4pCiVwYXNzYWdlIDEwCkluIHRoZSBtaWRkbGUgb2YgdGhlIGZpcmVzdG9ybSB0aGUgR3JlYXQgUHlyYW1pZCBhcHBlYXJlZCB0byBsaWZ0IHVwIGEgZmV3CmluY2hlcywgb24gYSBiZWFtIG9mIGluY2FuZGVzY2VuY2UsIGFuZCB0dXJuIHRocm91Z2ggbmluZXR5IGRlZ3JlZXMuICBUaGlzCndhcyBhbG1vc3QgY2VydGFpbmx5IHRoZSBzcGVjaWFsIHR5cGUgb2Ygb3B0aWNhbCBpbGx1c2lvbiB3aGljaCBjYW4gdGFrZQpwbGFjZSAvZXZlbiB0aG91Z2ggbm8tb25lIGlzIGFjdHVhbGx5IGxvb2tpbmcgYXQgaXQvLgoKQW5kIHRoZW4sIHdpdGggZGVjZXB0aXZlIHNsb3duZXNzIGFuZCBjb25zaWRlcmFibGUgZGlnbml0eSwgaXQgZXhwbG9kZWQuCgpJdCB3YXMgYWxtb3N0IHRvbyBjcmFzcyBhIHdvcmQuICBXaGF0IGl0IGRpZCB3YXMgdGhpczogIGl0IGNhbWUgYXBhcnQKcG9uZGVyb3VzbHkgaW50byBidWlsZGluZy1zaXplZCBjaHVua3Mgd2hpY2ggZHJpZnRlZCBnZW50bHkgYXdheSBmcm9tIG9uZQphbm90aGVyLCBmbHlpbmcgc2VyZW5lbHkgb3V0IGFuZCBvdmVyIHRoZSBuZWNyb3BvbGlzLiAgU2V2ZXJhbCBvZiB0aGVtCnN0cnVjayBvdGhlciBweXJhbWlkcywgYmFkbHkgZGFtYWdpbmcgdGhlbSBpbiBhIGxhenksIHVuc2VsZmNvbnNjaW91cyB3YXksCmFuZCB0aGVuIGJvdW5kZWQgb24gaW4gc2lsZW5jZSB1bnRpbCB0aGV5IHBsb3VnaGVkIHRvIGEgaGFsdCBiZWhpbmQgYSBzbWFsbAptb3VudGFpbiBvZiBydWJibGUuCgpPbmx5IHRoZW4gZGlkIHRoZSBib29tIGNvbWUuICBJdCB3ZW50IG9uIGZvciBxdWl0ZSBhIGxvbmcgdGltZS4KCiAgW1B5cmFtaWRzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyODAgKHBhc3NhZ2Ugc3RhcnRzIG1pZC1wYXJhZ3JhcGggYW5kIGVuZHMgbWlkLXBhcmFncmFwaCkKJXBhc3NhZ2UgMTEKTWFuIHdhcyBuZXZlciBpbnRlbmRlZCB0byB1bmRlcnN0YW5kIHRoaW5ncyBoZSBtZWRkbGVkIHdpdGguCgogIFtQeXJhbWlkcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiVlIHRpdGxlCiMKIwojCiV0aXRsZSBHdWFyZHMhIEd1YXJkcyEgKDE0KQojIHAuIDI4MyAoUk9DIGVkaXRpb24pCiVwYXNzYWdlIDEKIkkgc2VlIHlvdSdyZSB2ZXJ5IGNvbWZvcnRhYmxlIGhlcmUsIiBzYWlkIFZpbWVzIHdlYWtseS4KCiJOZXZlciBidWlsZCBhIGR1bmdlb24geW91IHdvdWxkbid0IGJlIGhhcHB5IHRvIHNwZW5kIHRoZSBuaWdodCBpbgp5b3Vyc2VsZiwiIHNhaWQgdGhlIFBhdHJpY2lhbiwgbGF5aW5nIG91dCB0aGUgZm9vZCBvbiB0aGUgY2xvdGguICAiVGhlCndvcmxkIHdvdWxkIGJlIGEgaGFwcGllciBwbGFjZSBpZiBtb3JlIHBlb3BsZSByZW1lbWJlcmVkIHRoYXQuIgoKICBbR3VhcmRzISBHdWFyZHMhLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxMzMKJXBhc3NhZ2UgMgpUaGVzZSB3ZXJlbid0IGVuY291cmFnZWQgaW4gdGhlIGNpdHksIHNpbmNlIHRoZSBoZWZ0IGFuZCB0aHJvdyBvZiBhCmxvbmdib3cncyBhcnJvdyBjb3VsZCBzZW5kIGl0IHRocm91Z2ggYW4gaW5ub2NlbnQgYnlzdGFuZGVyIGEgaHVuZHJlZAp5YXJkcyBhd2F5IHJhdGhlciB0aGFuIHRoZSBpbm5vY2VudCBieXN0YW5kZXIgYXQgd2hvbSBpdCB3YXMgYWltZWQuCgogIFtHdWFyZHMhIEd1YXJkcyEsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDI2IChmaXJzdCBhbmQgc2Vjb25kIHBhcmFncmFwaHMgYXJlIGFjdHVhbGx5IGVuZCBvZiBvbmUgc2VjdGlvbiwKIyAgICAgICAgc3RhcnQgb2YgbmV4dCBvbmU7IGZpcnN0ICdUaHVuZGVyIHJvbGxlZC4uLicgaGFkIHRocmVlIGRvdAojICAgICAgICBlbGxpcHNpcywgc2Vjb25kIGhhcyBmb3VyLCBlbGlwc2lzIHBsdXMgZmluYWwgcGVyaW9kLS0KIyAgICAgICAgZmlyc3QgY2hhbmdlZCB0byBmb3VyIGhlcmUgc28gdGhhdCB0aGV5IG1hdGNoKQolcGFzc2FnZSAzClRodW5kZXIgcm9sbGVkLi4uLgoKSXQgaXMgc2FpZCB0aGF0IHRoZSBnb2RzIHBsYXkgZ2FtZXMgd2l0aCB0aGUgbGl2ZXMgb2YgbWVuLiAgQnV0IHdoYXQgZ2FtZXMsCmFuZCB3aHksIGFuZCB0aGUgaWRlbnRpdGllcyBvZiB0aGUgYWN0dWFsIHBhd25zLCBhbmQgd2hhdCB0aGUgZ2FtZSBpcywgYW5kCndoYXQgdGhlIHJ1bGVzIGFyZS0td2hvIGtub3dzPwoKQmVzdCBub3QgdG8gc3BlY3VsYXRlLgoKVGh1bmRlciByb2xsZWQuLi4uCgpJdCByb2xsZWQgYSBzaXguCgogIFtHdWFyZHMhIEd1YXJkcyEsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDQ4IChwYXNzYWdlIGlzIGEgZm9vdG5vdGUpCiVwYXNzYWdlIDQKT25lIG9mIHRoZSByZW1hcmthYmxlIGlubm92YXRpb25zIGludHJvZHVjZWQgYnkgdGhlIFBhdHJpY2lhbiB3YXMgdG8gbWFrZQp0aGUgVGhpZXZlcycgR3VpbGRlIC9yZXNwb25zaWJsZS8gZm9yIHRoZWZ0LCB3aXRoIGFubnVhbCBidWRnZXRzLCBmb3J3YXJkCnBsYW5uaW5nIGFuZCwgYWJvdmUgYWxsLCByaWdpZCBqb2IgcHJvdGVjdGlvbi4gIFRodXMsIGluIHJldHVybiBmb3IgYW4KYWdyZWVkIGF2ZXJhZ2UgbGV2ZWwgb2YgY3JpbWUgcGVyIGFubnVtLCB0aGUgdGhpZXZlcyB0aGVtc2VsdmVzIHNhdyB0byBpdAp0aGF0IHVuYXV0aG9yaXplZCBjcmltZSB3YXMgbWV0IHdpdGggdGhlIGZ1bGwgZm9yY2Ugb2YgSW5qdXN0aWNlLCB3aGljaCB3YXMKZ2VuZXJhbGx5IGEgc3RpY2sgd2l0aCBuYWlscyBpbiBpdC4KCiAgW0d1YXJkcyEgR3VhcmRzISwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gODcgKHBhc3NhZ2UgZW5kcyBtaWQtcGFyYWdyYXBoKQolcGFzc2FnZSA1CiJXZWxsLCBzaXIsIiBoZSBzYWlkLCAiSSBrbm93IHRoYXQgZHJhZ29ucyBoYXZlIGJlZW4gZXh0aW5jdCBmb3IgdGhvdXNhbmRzCm9mIHllYXJzLCBzaXItLSIKCiJZZXM/IiAgVGhlIFBhdHJpY2lhbidzIGV5ZXMgbmFycm93ZWQuCgpWaW1lcyBwbHVuZ2VkIG9uLiAgIkJ1dCBzaXIsIHRoZSB0aGluZyBpcywgZG8gL3RoZXkvIGtub3c/IiAgWy4uLl0KCiAgW0d1YXJkcyEgR3VhcmRzISwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTE0IChwYXNzYWdlIGlzIGEgZm9vdG5vdGUpCiVwYXNzYWdlIDYKVGhlIEd1aWxkIG9mIEZpcmUgRmlnaHRlcnMgaGFkIGJlZW4gb3V0bGF3ZWQgYnkgdGhlIFBhdHJpY2lhbiB0aGUgcHJldmlvdXMKeWVhciBhZnRlciBtYW55IGNvbXBsYWludHMuICBUaGUgcG9pbnQgd2FzIHRoYXQsIGlmIHlvdSBib3VnaHQgYSBjb250cmFjdApmcm9tIHRoZSBHdWlsZCwgeW91ciBob3VzZSB3b3VsZCBiZSBwcm90ZWN0ZWQgYWdhaW5zdCBmaXJlLiAgVW5mb3J0dW5hdGVseSwKdGhlIGdlbmVyYWwgQW5raC1Nb3Jwb3JrIGV0aG9zIHF1aWNrbHkgY2FtZSB0byB0aGUgZm9yZSBhbmQgZmlyZSBmaWdodGVycwp3b3VsZCB0ZW5kIHRvIGdvIHRvIHByb3NwZWN0aXZlIGNsaWVudHMnIGhvdXNlcyBpbiBncm91cHMsIG1ha2luZyBsb3VkCmNvbW1lbnRzIGxpa2UgIlZlcnkgaW5mbGFtbWFibGUgbG9va2luZyBwbGFjZSwgdGhpcyIgYW5kICJQcm9iYWJseSBnbyB1cApsaWtlIGEgZmlyZXdvcmsgd2l0aCBqdXN0IG9uZSBjYXJlbGVzc2x5IGRyb3BwZWQgbWF0Y2gsIGtub3cgd2hhdCBJIG1lYW4/IgoKICBbR3VhcmRzISBHdWFyZHMhLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxMzEgKFNoZXJsb2NrIEhvbG1lcykKJXBhc3NhZ2UgNwpPbmNlIHlvdSd2ZSBydWxlZCBvdXQgdGhlIGltcG9zc2libGUgdGhlbiB3aGF0ZXZlciBpcyBsZWZ0LCBob3dldmVyCmltcHJvYmFibGUsIG11c3QgYmUgdGhlIHRydXRoLiAgVGhlIHByb2JsZW0gbGF5IGluIHdvcmtpbmcgb3V0IHdoYXQgd2FzCmltcG9zc2libGUsIG9mIGNvdXJzZS4gIFRoYXQgd2FzIHRoZSB0cmljaywgYWxsIHJpZ2h0LgoKVGhlcmUgd2FzIGFsc28gdGhlIGN1cmlvdXMgaW5jaWRlbnQgb2YgdGhlIG9yYW5ndXRhbiBpbiB0aGUgbmlnaHQtdGltZS4uLi4KCiAgW0d1YXJkcyEgR3VhcmRzISwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTUwIChEaXJ0eSBIYXJyeSB3aXRoIGEgc21hbGwgc3dhbXAgZHJhZ29uIHJhdGhlciB0aGFuIGEgLjQ1IE1hZ251bS4uLikKJXBhc3NhZ2UgOApBIHN0cmVhayBvZiBncmVlbiBmaXJlIGJsYXN0ZWQgb3V0IG9mIHRoZSBiYWNrIG9mIHRoZSBzaGVkLCBwYXNzZWQgYSBmb290Cm92ZXIgdGhlIGhlYWRzIG9mIHRoZSBtb2IsIGFuZCBidXJuZWQgYSBjaGFycmVkIHJvc2V0dGUgaW4gdGhlIHdvb2R3b3JrCm92ZXIgdGhlIGRvb3IuCgpUaGVuIGNhbWUgYSB2b2ljZSB0aGF0IHdhcyBhIGhvbmV5ZWQgcHVyciBvZiBzaGVhciBkZWFkbHkgbWVuYWNlLgoKIi9UaGlzIGlzIExvcmQgTW91bnRqb3kgUXVpY2tmYW5nIFdpbnRlcmZvcnRoIElWLCB0aGUgaG90dGVzdCBkcmFnb24gaW4gdGhlCmNpdHkuICBJdCBjb3VsZCBidXJuIHlvdXIgaGVhZCBjbGVhbiBvZmYuLyIKCkNhcHRhaW4gVmltZXMgbGltcGVkIGZvcndhcmQgZnJvbSB0aGUgc2hhZG93cy4KCkEgc21hbGwgYW5kIGV4dHJlbWVseSBmcmlnaHRlbmVkIGdvbGRlbiBkcmFnb24gd2FzIGNsYW1wZWQgZmlybWx5IHVuZGVyIG9uZQphcm0uICBIaXMgb3RoZXIgaGFuZCBoZWxkIGl0IGJ5IHRoZSB0YWlsLgoKVGhlIHJpb3RlcnMgd2F0Y2hlZCBpdCwgaHlwbm90aXNlZC4KCiJOb3cgSSBrbm93IHdoYXQgeW91J3JlIHRoaW5raW5nLCIgVmltZXMgd2VudCBvbiwgc29mdGx5LiAgIllvdSdyZQp3b25kZXJpbmcsIGFmdGVyIGFsbCB0aGlzIGV4Y2l0ZW1lbnQsIGhhcyBpdCBnb3QgZW5vdWdoIGZsYW1lIGxlZnQ/ICBBbmQsCnkna25vdywgSSBhaW4ndCBzbyBzdXJlIG15c2VsZi4uLiIKCkhlIGxlYW5lZCBmb3J3YXJkLCBzaWdodGluZyBiZXR3ZWVuIHRoZSBkcmFnb24ncyBlYXJzLCBhbmQgaGlzIHZvaWNlCmJ1enplZCBsaWtlIGEga25pZmUgYmxhZGU6CgoiV2hhdCB5b3UndmUgZ290IHRvIGFzayB5b3Vyc2VsZiBpczogIEFtIEkgZmVlbGluZyBsdWNreT8iCgpUaGV5IHN3YXllZCBiYWNrd2FyZHMgYXMgaGUgYWR2YW5jZWQuCgoiV2VsbD8iIGhlIHNhaWQuICAiL0FyZS8geW91IGZlZWxpbmcgbHVja3k/IgoKICBbR3VhcmRzISBHdWFyZHMhLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxNTQgKHBhc3NhZ2UgaXMgYSBmb290bm90ZTsgdGVuIHBhZ2VzIGxhdGVyLCBTZXJnZWFudCBDb2xvbiB1c2VzIHRoZQojICAgICAgICAgb2xkIHZlcnNpb24gb2YgdGhlIHByb3ZlcmIpCiVwYXNzYWdlIDkKVGhlIHBocmFzZSAiU2V0IGEgdGhpZWYgdG8gY2F0Y2ggYSB0aGllZiIgaGFkIGJ5IHRoaXMgdGltZSAoYWZ0ZXIgc3Ryb25nCnJlcHJlc2VudGF0aW9ucyBmcm9tIHRoZSBUaGlldmVzJyBHdWlsZGUpIHJlcGxhY2VkIGEgbXVjaCBvbGRlciBhbmQKcXVpbnRlc3NlbnRpYWxseSBBbmtoLU1vcnBvcmsgcHJvdmVyYiwgd2hpY2ggd2FzICJTZXQgYSBkZWVwIGhvbGUgd2l0aApzcHJpbmctbG9hZGVkIHNpZGVzLCB0cmlwd2lyZXMsIHdoaXJsaW5nIGtuaWZlIGJsYWRlcyBkcml2ZW4gYnkgd2F0ZXIgcG93ZXIsCmJyb2tlbiBnbGFzcyBhbmQgc2NvcnBpb25zLCB0byBjYXRjaCBhIHRoaWVmLiIKCiAgW0d1YXJkcyEgR3VhcmRzISwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTc0IChwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoKQolcGFzc2FnZSAxMApbLi4uXSAgVGhlcmUgd2FzIG5vIGRpZmZlcmVuY2UgYXQgYWxsIGJldHdlZW4gdGhlIHJpY2hlc3QgbWFuIGFuZCB0aGUKcG9vcmVzdCBiZWdnYXIsIGFwYXJ0IGZyb20gdGhlIGZhY3QgdGhhdCB0aGUgZm9ybWVyIGhhZCBsb3RzIG9mIG1vbmV5LApmb29kLCBwb3dlciwgZmluZSBjbG90aGVzLCBhbmQgZ29vZCBoZWFsdGguICBCdXQgYXQgbGVhc3QgaGUgd2Fzbid0CmFueSAvYmV0dGVyLy4gIEp1c3QgcmljaGVyLCBmYXR0ZXIsIG1vcmUgcG93ZXJmdWwsIGJldHRlciBkcmVzc2VkIGFuZApoZWFsdGhpZXIuICBJdCBoYWQgYmVlbiBsaWtlIHRoYXQgZm9yIGh1bmRyZWRzIG9mIHllYXJzLgoKICBbR3VhcmRzISBHdWFyZHMhLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyMDUKJXBhc3NhZ2UgMTEKIk1pZ2h0IGhhdmUgYmVlbiBqdXN0IGFuIGlubm9jZW50IGJ5c3RhbmRlciwgc2lyLCIgc2FpZCBDYXJyb3QuCgoiV2hhdCwgaW4gQW5raC1Nb3Jwb3JrPyIKCiJZZXMsIHNpci4iCgoiV2Ugc2hvdWxkIGhhdmUgZ3JhYmJlZCBoaW0sIHRoZW4sIGp1c3QgZm9yIHRoZSByYXJpdHkgdmFsdWUsIiBzYWlkIFZpbWVzLgoKICBbR3VhcmRzISBHdWFyZHMhLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMjYyLTI2MyAocGFzc2FnZSBpcyBhIGZvb3Rub3RlOyAncHJhY3Rpc2UnLCAncHJhY3Rpc2VkJyBhcmUgYWNjdXJhdGUpCiVwYXNzYWdlIDEyCkEgbnVtYmVyIG9mIHJlbGlnaW9ucyBpbiBBbmtoLU1vcnBvcmsgc3RpbGwgcHJhY3Rpc2VkIGh1bWFuIHNhY3JpZmljZSwKZXhjZXB0IHRoYXQgdGhleSByZWFsbHkgZGlkbid0IG5lZWQgdG8gcHJhY3Rpc2UgYW55IG1vcmUgYmVjYXVzZSB0aGV5IGhhZApnb3Qgc28gZ29vZCBhdCBpdC4gIENpdHkgbGF3IHNhaWQgdGhhdCBvbmx5IGNvbmRlbW5lZCBjcmltaW5hbHMgc2hvdWxkIGJlCnVzZWQsIGJ1dCB0aGF0IHdhcyBhbGwgcmlnaHQgYmVjYXVzZSBpbiBtb3N0IG9mIHRoZSByZWxpZ2lvbnMgcmVmdXNpbmcgdG8Kdm9sdW50ZWVyIGZvciBzYWNyaWZpY2Ugd2FzIGFuIG9mZmVuc2UgcHVuaXNoYWJsZSBieSBkZWF0aC4KCiAgW0d1YXJkcyEgR3VhcmRzISwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjkyCiVwYXNzYWdlIDEzClRoZXJlIHdlcmUgdGltZXMgd2hlbiBhbiBhcGUgaGFkIHRvIGRvIHdoYXQgYSBtYW4gaGFkIHRvIGRvLi4uCgpUaGUgb3Jhbmd1dGFuIHRocmV3IGEgY29tcGxleCBzYWx1dGUgYW5kIHN3dW5nIGF3YXkgaW50byB0aGUgZGFya25lc3MuCgogIFtHdWFyZHMhIEd1YXJkcyEsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAyOTktMzAwICsgMzI1IChmaW5hbCBwYXJ0IGNvbWVzIHF1aXRlIGEgYml0IGxhdGVyOyBDYXJyb3QgaXMgdHJ5aW5nIHRvCiMgICAgICAgICAgICAgICAgICAgIGFsZXJ0IG9ibGl2aW91cyBTZXJnZWFudCBDb2xvbiB0aGF0IHRoZSBkcmFnb24gaXMgY29taW5nKQolcGFzc2FnZSAxNAoiVGhpcyBpcyB3aGF0IGl0IGNvbWVzIHRvISIgbXV0dGVyZWQgQ29sb24uICAiRGVjZW50IHdvbWVuIGNhbid0IHdhbGsgZG93bgp0aGUgc3RyZWV0IHdpdGhvdXQgYmVpbmcgZWF0ZW4hICBSaWdodCwgeW91IGJhc3RhcmRzLCB5b3UncmUuLi4geW91J3JlCi9nZW9ncmFwaHkvLS0iCgoiU2VyZ2VhbnQhIiBDYXJyb3QgcmVwZWF0ZWQgdXJnZW50bHkuCgoiSXQncyBoaXN0b3J5LCBub3QgZ2VvZ3JhcGh5LCIgc2FpZCBOb2JieS4gICJUaGF0J3Mgd2hhdCB5b3UncmUgc3VwcG9zZWQgdG8Kc2F5LiAgSGlzdG9yeS4gICdZb3UncmUgaGlzdG9yeSEnIHlvdSBzYXkuIgoKIldlbGwsIHdoYXRldmVyLCIgc25hcHBlZCBDb2xvbi4gICJMZXQncyBzZWUgbm93LS0iCgpbLi4uKHF1aXRlIGEgd2hpbGUgbGF0ZXIpLi4uXQoKIllvdSBoZWFyZCB0aGUgTWFuLCIgaGUgcmFzcGVkLiAgIk9uZSBmYWxzZSBtb3ZlIGFuZCB5b3UncmUuLi4geW91J3JlLS0iIGhlCnRvb2sgYSBkZXNwZXJhdGUgc3RhYiBhdCBpdC0tInlvdSdyZSBIb21lIEVjb25vbWljcyEiCgogIFtHdWFyZHMhIEd1YXJkcyEsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQolZSB0aXRsZQojCiMKIyBUaGUgb3JpZ2luYWwgcHVibGljYXRpb24gb2YgL0VyaWMvIGZlYXR1cmVkIGV4dGVuc2l2ZSBpbGx1c3RyYXRpb25zIGJ5CiMgSm9zaCBLaXJieSBidXQgdGhlIG1hc3MtbWFya2V0IHBhcGVyYmFjayBlZGl0aW9uIGNvbnRhaW5zIG5vbmUgb2YgdGhlbQojIGFuZCBvbWl0cyBoaXMgbmFtZS4gIEluIHRoZSBIYXJwZXIgVG9yY2ggZWRpdGlvbiwgdGhlIGxpc3Qgb2Ygb3RoZXIKIyBib29rcyBieSB0aGUgc2FtZSBhdXRob3IgaGFzICJFcmljICh3aXRoIEpvc2ggS2lyYnkpIiBldmVuIHRob3VnaCB0aGUKIyBjb3B5cmlnaHQgYW5kIHRpdGxlIHBhZ2VzIG9mIHRoYXQgdmVyeSBib29rIGRvIG5vdCBtZW50aW9uIGhpbS4KIwoldGl0bGUgRXJpYyAoOSkKIyBwcC4gMy00IChIYXJwZXIgVG9yY2ggZWRpdGlvbikKJXBhc3NhZ2UgMQpObyBlbmVtaWVzIGhhZCBldmVyIHRha2VuIEFua2gtTW9ycG9yay4gIFdlbGwsIC90ZWNobmljYWxseS8gdGhleSBoYWQsCnF1aXRlIG9mdGVuOyB0aGUgY2l0eSB3ZWxjb21lZCBmcmVlLXNwZW5kaW5nIGJhcmJhcmlhbiBpbnZhZGVycywgYnV0CnNvbWVob3cgdGhlIHB1enpsZWQgcmFpZGVycyBhbHdheXMgZm91bmQsIGFmdGVyIGEgZmV3IGRheXMsIHRoYXQgdGhleQpkaWRuJ3Qgb3duIHRoZWlyIG93biBob3JzZXMgYW55bW9yZSwgYW5kIHdpdGhpbiBhIGNvdXBsZSBvZiBtb250aHMgdGhleQp3ZXJlIGp1c3QgYW5vdGhlciBtaW5vcml0eSBncm91cCB3aXRoIGl0cyBvd24gZ3JhZmZpdGkgYW5kIGZvb2Qgc2hvcHMuCgogIFtFcmljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxOTUKJXBhc3NhZ2UgMgoiSSBjYW4gc2VlIGJsdWUgc2t5ISIgc2FpZCBFcmljLiAgIldoZXJlIGRvIHlvdSB0aGluayB3ZSdsbCBjb21lIG91dD8iIGhlCmFkZGVkLiAgIkFuZCB3aGVuPyIKCiJBbnl3aGVyZSwiIHNhaWQgUmluY2V3aW5kLiAgIkFueXRpbWUuIgoKSGUgbG9va2VkIGRvd24gYXQgdGhlIGJyb2FkIHN0ZXBzIHRoZXkgd2VyZSBjbGltYmluZy4gIFRoZXkgd2VyZSBzb21ldGhpbmcKb2YgYSBub3ZlbHR5OyBlYWNoIG9uZSB3YXMgYnVpbHQgb3V0IG9mIGxhcmdlIHN0b25lIGxldHRlcnMuICBUaGUgb25lIGhlCndhcyBqdXN0IHN0ZXBwaW5nIG9uIHRvLCBmb3IgZXhhbXBsZSwgcmVhZDogSSBNZWFudCBJdCBGb3IgVGhlIEJlc3QuCgpUaGUgbmV4dCBvbmUgd2FzOiBJIFRob3VnaHQgWW91J2QgTGlrZSBJdC4KCkVyaWMgd2FzIHN0YW5kaW5nIG9uOiBGb3IgVGhlIFNha2UgT2YgVGhlIENoaWxkcmVuLgoKJ1dlaXJkLCBpc24ndCBpdD8nIGhlIHNhaWQuICAnV2h5IGRvIGl0IGxpa2UgdGhpcz8nCgonSSB0aGluayB0aGV5J3JlIG1lYW50IHRvIGJlIGdvb2QgaW50ZW50aW9ucywnIHNhaWQgUmluY2V3aW5kLiAgVGhpcyB3YXMgYQpyb2FkIHRvIEhlbGwsIGFuZCBkZW1vbnMgd2VyZSwgYWZ0ZXIgYWxsLCB0cmFkaXRpb25hbGlzdHMuCgogIFtFcmljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gOS0xMCAocGFzc2FnZSBoYXMgYW4gaW50ZXJlc3Rpbmcgc3RhcnQgYnV0IG5vdCBtdWNoIG9mIGEgZmluaXNoLi4uKQolcGFzc2FnZSAzCiJJdCdzIGEgaGF1bnRpbmcsIiBoZSB2ZW50dXJlZC4gICJTb21lIHNvcnQgb2YgZ2hvc3QsIG1heWJlLiAgQSBiZWxsLCBib29rCmFuZCBjYW5kbGUgam9iLiIKClRoZSBCdXJzYXIgc2lnaGVkLiAgIldlIHRyaWVkIHRoYXQsIEFyY2hjaGFuY2VsbG9yLiIKClRoZSBBcmNoY2hhbmNlbGxvciBsZWFuZWQgdG93YXJkIGhpbS4KCiJFaD8iIGhlIHNhaWQuCgoiSSAvc2FpZC8sIHdlIHRyaWVkIHRoYXQsIEFyY2hjaGFuY2VsbG9yLCIgc2FpZCB0aGUgQnVyc2FyIGxvdWRseSwKZGlyZWN0aW5nIGhpcyB2b2ljZSBhdCB0aGUgb2xkIG1hbidzIGVhci4gICJBZnRlciBkaW5uZXIsIHlvdSByZW1lbWJlcj8KV2UgdXNlZCBIdW1wdGVtcGVyJ3MgL05hbWVzIG9mIHRoZSBBbnRzLyBhbmQgcmFuZyBPbGQgVG9tLiIoMSkKCiJEaWQgd2UsIGluZGVlZC4gIFdvcmtlZCwgZGlkIGl0PyIKCiIvTm8vLCBBcmNoY2hhbmNlbGxvci4iCgoiRWg/IgoKKDEpIE9sZCBUb20gd2FzIHRoZSBzaW5nbGUgY3JhY2tlZCBicm9uemUgYmVsbCBpbiB0aGUgVW5pdmVyc2l0eSBiZWxsCnRvd2VyLiAgVGhlIGNsYXBwZXIgZHJvcHBlZCBvdXQgc2hvcnRseSBhZnRlciBpdCB3YXMgY2FzdCwgYnV0IHRoZSBiZWxsCnN0aWxsIHRvbGxlZCBvdXQgc29tZSB0cmVtZW5kb3VzbHkgc29ub3JvdXMgc2lsZW5jZXMgZXZlcnkgaG91ci4KCiAgW0VyaWMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAxNC0xNSAodGhlIHRvcCB3aXphcmRzIGhhdmUgcGVyZm9ybWVkIHRoZSBSaXRlIG9mIEFzaGtFbnRlKQolcGFzc2FnZSA0CkRlYXRoIHBvaW50ZWRseSBwaWNrZWQgaW52aXNpYmxlIHBhcnRpY2xlcyBvZmYgdGhlIGVkZ2Ugb2YgaGlzIHNjeXRoZS4KClRoZSBBcmNoY2hhbmNlbGxvciBjdXBwZWQgYSBnbmFybGVkIGhhbmQgb3ZlciBoaXMgZWFyLgoKIldoYXQnZCBoZSBzYXk/ICBXaG8ncyB0aGUgZmVsbGEgd2l0aCB0aGUgc3RpY2s/IgoKIkl0J3MgRGVhdGgsIEFyY2hjaGFuY2VsbG9yLCIgc2FpZCB0aGUgQnVyc2FyIHBhdGllbnRseS4KCiJFaD8iCgoiSXQncyBEZWF0aCwgc2lyLiAgL1lvdS8ga25vdy4iCgoiVGVsbCBoaW0gd2UgZG9uJ3Qgd2FudCBhbnksIiBzYWlkIHRoZSBvbGQgd2l6YXJkLCB3YXZpbmcgaGlzIHN0aWNrLgoKVGhlIEJ1cnNhciBzaWdoZWQuICAiV2Ugc3VtbW9uZWQgaGltLCBBcmNoY2hhbmNlbGxvci4iCgoiSXMgaXQ/ICBXaGF0J2Qgd2UgZ28gYW5kIGRvIHRoYXQgZm9yPyAgQmxvb2R5IHNpbGx5IHRoaW5nIHRvIGRvLiIKClRoZSBCdXJzYXIgZ2F2ZSBEZWF0aCBhbiBlbWJhcnJhc3NlZCBncmluLiAgSGUgd2FzIG9uIHRoZSBwb2ludCBvZiBhc2tpbmcKaGltIHRvIGV4Y3VzZSB0aGUgQXJjaGNoYW5jZWxsb3Igb24gYWNjb3VudCBvZiBhZ2UsIGJ1dCByZWFsaXplZCB0aGF0IHRoaXMKd291bGQgaW4gdGhlIGNpcmN1bXN0YW5jZXMgYmUgYSBjb21wbGV0ZSB3YXN0ZSBvZiBicmVhdGguCgoiQXJlIHdlIHRhbGtpbmcgYWJvdXQgdGhlIHdpemFyZCBSaW5jZXdpbmQ/ICBUaGUgb25lIHdpdGggdGhlLS0iIHRoZSBCdXJzYXIKZ2F2ZSBhIHNodWRkZXItLSAiaG9ycmlibGUgTHVnZ2FnZSBvbiBsZWdzPyAgQnV0IGhlIGdvdCBibG93biB1cCB3aGVuIHRoZXJlCndhcyBhbGwgdGhhdCBidXNpbmVzcyB3aXRoIHRoZSBzb3VyY2VyZXIsIGRpZG4ndCBoZT8iKDEpCgpJTlRPIFRIRSBEVU5HRU9OIERJTUVOU0lPTlMuICBBTkQgTk9XIEhFIElTIFRSWUlORyBUTyBHRVQgQkFDSyBIT01FLgoKKDEpIFRoZSBCdXJzYXIgd2FzIHJlZmVycmluZyBvYmxpcXVlbHkgdG8gdGhlIGRpZmZpY3VsdCBvY2Nhc2lvbiB3aGVuIHRoZQpVbml2ZXJzaXR5IHZlcnkgbmVhcmx5IGNhdXNlZCB0aGUgZW5kIG9mIHRoZSB3b3JsZCwgYW5kIHdvdWxkIGluIGZhY3QgaGF2ZQpkb25lIHNvIGhhZCBpdCBub3QgYmVlbiBmb3IgYSBjaGFpbiBvZiBldmVudHMgaW52b2x2aW5nIFJpbmNld2luZCwgYSBtYWdpYwpjYXJwZXQgYW5kIGEgaGFsZi1icmljayBpbiBhIHNvY2suICAoU2VlIC9Tb3VyY2VyeS8uKSAgVGhlIHdob2xlIGFmZmFpcgp3YXMgdmVyeSBlbWJhcnJhc3NpbmcgdG8gd2l6YXJkcywgYXMgaXQgYWx3YXlzIGlzIHRvIHBlb3BsZSB3aG8gZmluZCBvdXQKYWZ0ZXJ3YXJkIHRoYXQgdGhleSB3ZXJlIG9uIHRoZSB3cm9uZyBzaWRlIGFsbCBhbG9uZywoMikgYW5kIGl0IGlzCnJlbWFya2FibGUgaG93IG1hbnkgb2YgdGhlIFVuaXZlcnNpdHkncyBzZW5pb3Igc3RhZmYgd2VyZSBub3cgYWRhbWFudCB0aGF0CmF0IHRoZSB0aW1lIHRoZXkgaGFkIGJlZW4gb2ZmIHNpY2ssIHZpc2l0aW5nIHRoZWlyIGF1bnQsIG9yIGRvaW5nIHJlc2VhcmNoCndpdGggdGhlIGRvb3IgbG9ja2VkIHdoaWxlIGh1bW1pbmcgbG91ZGx5IGFuZCBoYWQgaGFkIG5vIGlkZWEgb2Ygd2hhdCB3YXMKZ29pbmcgb24gb3V0c2lkZS4gIFRoZXJlIGhhZCBiZWVuIHNvbWUgZGVzdWx0b3J5IHRhbGsgYWJvdXQgcHV0dGluZyB1cCBhCnN0YXR1ZSB0byBSaW5jZXdpbmQgYnV0LCBieSB0aGUgY3VyaW91cyBhbGNoZW15IHRoYXQgdGVuZHMgdG8gYXBwbHkgaW4KdGhlc2Ugc2Vuc2l0aXZlIGlzc3VlcywgdGhpcyBxdWlja2x5IGJlY2FtZSBhIHBsYXF1ZSwgdGhlbiBhIG5vdGUgb24gdGhlClJvbGUgb2YgSG9ub3IsIGFuZCBmaW5hbGx5IGEgbW90aW9uIG9mIGNlbnN1cmUgZm9yIGJlaW5nIGltcHJvcGVybHkgZHJlc3NlZC4KCigyKSBpZSwgdGhlIG9uZSB0aGF0IGxvc3QuCgogIFtFcmljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAzNAolcGFzc2FnZSA1CiJOb3QgdGhhdCBoZSB3YXMgcGFydGljdWxhcmx5IHN1Y2Nlc3NmdWwuICBJdCB3YXMgYWxsIGEgYml0IHRyaWFsIGFuZAp3b3NzbmFtZS4iCgoiSSB0aG91Z2h0IHlvdSBzYWlkIGdyZWF0IGJpZyBzY2FseS0tIgoKIk9oLCAveWVzLy4gIEJ1dCB0aGF0IHdhc24ndCB3aGF0IGhlIHdhcyBhZnRlci4gIEhlIHdhcyB0cnlpbmcgdG8gY29uanVyZQp1cCBhIHN1Y2N1YnVzLiIgIEl0IHNob3VsZCBiZSBpbXBvc3NpYmxlIHRvIGxlZXIgd2hlbiBhbGwgeW91J3ZlIGdvdCBpcyBhCmJlYWssIGJ1dCB0aGUgcGFycm90IG1hbmFnZWQgaXQuICAiVGhhdCdzIGEgZmVtYWxlIGRlbW9uIHdoYXQgY29tZXMgaW4gdGhlCm5pZ2h0IGFuZCBtYWtlcyBtYWQgcGFzc2lvbmF0ZSB3b3Nzbi0tIgoKIkkndmUgaGVhcmQgb2YgdGhlbSwiIHNhaWQgUmluY2V3aW5kLiAgIkJsb29keSBkYW5nZXJvdXMgdGhpbmdzLiIKClRoZSBwYXJyb3QgcHV0IGl0cyBoZWFkIG9uIG9uZSBzaWRlLiAgIkl0IG5ldmVyIHdvcmtlZC4gIEFsbCBoZSBldmVyIGdvdAp3YXMgYSBuZXVyYWxnZXIuIgoKIldoYXQncyB0aGF0PyIKCiJJdCdzIGEgZGVtb24gdGhhdCBjb21lcyBhbmQgaGFzIGEgaGVhZGFjaGUgYXQgeW91LiIKCiAgW0VyaWMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDM1IChwYXNzYWdlIGlzIGEgZm9vdG5vdGUpCiVwYXNzYWdlIDYKRGVtb25zIGFuZCB0aGVpciBIZWxsIGFyZSBxdWl0ZSBkaWZmZXJlbnQgZnJvbSB0aGUgRHVuZ2VvbiBEaW1lbnNpb25zLAp0aG9zZSBlbmRsZXNzIHBhcmFsbGVsIHdhc3RlbGFuZHMgb3V0c2lkZSBzcGFjZSBhbmQgdGltZS4gIFRoZSBzYWQsIG1hZApUaGluZ3MgaW4gdGhlIER1bmdlb24gRGltZW5zaW9ucyBoYXZlIG5vIHVuZGVyc3RhbmRpbmcgb2YgdGhlIHdvcmxkIGJ1dApzaW1wbHkgY3JhdmUgbGlnaHQgYW5kIHNoYXBlIGFuZCB0cnkgdG8gd2FybSB0aGVtc2VsdmVzIGJ5IHRoZSBmaXJlcyBvZgpyZWFsaXR5LCBjbHVzdGVyaW5nIGFyb3VuZCBpdCB3aXRoIGFib3V0IHRoZSBzYW1lIGVmZmVjdC0taWYgdGhleSBldmVyCmJyb2tlIHRocm91Z2gtLWFzIGFuIG9jZWFuIHRyeWluZyB0byB3YXJtIGl0c2VsZiBhcm91bmQgYSBjYW5kbGUuICBXaGVyZWFzCmRlbW9ucyBiZWxvbmcgdG8gdGhlIHNhbWUgc3BhY2UtdGltZSB3b3NzbmFtZSwgbW9yZSBvciBsZXNzLCBhcyBodW1hbnMsCmFuZCBoYXZlIGEgZGVlcCBhbmQgYWJpZGluZyBpbnRlcmVzdCBpbiBodW1hbml0eSdzIGRheS10by1kYXkgYWZmYWlycy4KSW50ZXJlc3RpbmdseSBlbm91Z2gsIHRoZSBnb2RzIG9mIHRoZSBEaXNjIGhhdmUgbmV2ZXIgYm90aGVyZWQgbXVjaCBhYm91dApqdWRnaW5nIHRoZSBzb3VscyBvZiB0aGUgZGVhZCwgc28gcGVvcGxlIGNhbiBvbmx5IGdvIHRvIGhlbGwgaWYgdGhhdCdzCndoZXJlIHRoZXkgYmVsaWV2ZSwgaW4gdGhlaXIgZGVlcGVzdCBoZWFydCwgdGhhdCB0aGV5IGRlc2VydmUgdG8gZ28uCldoaWNoIHRoZXkgd29uJ3QgZG8gaWYgdGhleSBkb24ndCBrbm93IGFib3V0IGl0LiAgVGhpcyBleHBsYWlucyB3aHkgaXQgaXMKaW1wb3J0YW50IHRvIHNob290IG1pc3Npb25hcmllcyBvbiBzaWdodC4KCiAgW0VyaWMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDE1MwolcGFzc2FnZSA3CiJNdWx0aXBsZSBleGNsYW1hdGlvbiBtYXJrcywiIGhlIHdlbnQgb24sIHNoYWtpbmcgaGlzIGhlYWQsICJhcmUgYSBzdXJlCnNpZ24gb2YgYSBkaXNlYXNlZCBtaW5kLiIKCiAgW0VyaWMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAxNzgtMTc5IChQb25jZSBkYSBRdWlybSwgZW5jb3VudGVyZWQgaW4gaGVsbCkKJXBhc3NhZ2UgOAoiU28geW91IGRpZG4ndCBmaW5kIHRoZSBGb3VudGFpbiBvZiBZb3V0aCwgdGhlbiwiIGhlIHNhaWQsIGZlZWxpbmcgdGhhdCBoZQpzaG91bGQgbWFrZSBzb21lIGNvbnZlcnNhdGlvbi4KCiJPaCwgYnV0IEkgZGlkLCIgc2FpZCBkYSBRdWlybSBlYXJuZXN0bHkuICAiQSBjbGVhciBzcHJpbmcsIGRlZXAgaW4gdGhlCmp1bmdsZS4gIEl0IHdhcyB2ZXJ5IGltcHJlc3NpdmUuICBJIGhhZCBhIGdvb2QgbG9uZyBkcmluaywgdG9vLiAgT3IgZHJhZnQsCndoaWNoIEkgdGhpbmsgaXMgdGhlIG1vcmUgYXBwcm9wcmlhdGUgd29yZC4KCiJBbmQtLT8iIHNhaWQgUmluY2V3aW5kLgoKIkl0IGRlZmluaXRlbHkgd29ya2VkLiAgWWVzLiAgRm9yIGEgd2hpbGUgdGhlcmUgSSBjb3VsZCBkZWZpbml0ZWx5IGZlZWwKbXlzZWxmIGdldHRpbmcgeW91bmdlci4KCiJCdXQtLSIgUmluY2V3aW5kIHdhdmVkIGEgdmFndWUgaGFuZCB0byB0YWtlIGluIGRhIFF1aXJtLCB0aGUgdHJlYWRtaWxsLAp0aGUgdG93ZXJpbmcgY2lyY2xlcyBvZiB0aGUgUGl0LgoKIkFoLCIgc2FpZCB0aGUgb2xkIG1hbi4gICJPZiBjb3Vyc2UsIHRoYXQncyB0aGUgcmVhbGx5IGFubm95aW5nIGJpdC4gIEknZApyZWFkIHNvIG11Y2ggYWJvdXQgdGhlIEZvdW50YWluLCBhbmQgeW91J2QgaGF2ZSB0aG91Z2h0IHNvbWVvbmUgaW4gYWxsCnRob3NlIGJvb2tzIHdvdWxkIGhhdmUgbWVudGlvbmVkIHRoZSByZWFsbHkgdml0YWwgdGhpbmcgYWJvdXQgdGhlIHdhdGVyLAp3b3VsZG4ndCB5b3U/IgoKIldoaWNoIHdhcy0tPyIKCiIvQm9pbCBpdCBmaXJzdC4vICBTYXlzIGl0IGFsbCwgZG9lc24ndCBpdD8gIFRlcnJpYmxlIHNoYW1lLCByZWFsbHkuIgoKICBbRXJpYywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTc5CiVwYXNzYWdlIDkKVGhlIEx1Z2dhZ2UgdHJvdHRlZCBkb3duIHRoZSBncmVhdCBzcGlyYWwgcm9hZCB0aGF0IGxpbmtlZCB0aGUgY2lyY2xlcyBvZgp0aGUgUGl0LiAgRXZlbiBpZiBjb25kaXRpb25zIGhhZCBiZWVuIG5vcm1hbCBpdCBwcm9iYWJseSB3b3VsZCBub3QgaGF2ZQphdHRyYWN0ZWQgbXVjaCBhdHRlbnRpb24uICBJZiBhbnl0aGluZywgaXQgd2FzIHJhdGhlciBsZXNzIGFzdG9uaXNoaW5nCnRoYW4gbW9zdCBvZiB0aGUgZGVuaXplbnMuCgogIFtFcmljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKJWUgdGl0bGUKIwojCiMKJXRpdGxlIE1vdmluZyBQaWN0dXJlcyAoMTYpCiMgcC4gNyAoUk9DIEVkaXRpb24pCiVwYXNzYWdlIDEKVGhpcyBpcyBzcGFjZS4gIEl0J3Mgc29tZXRpbWVzIGNhbGxlZCB0aGUgZmluYWwgZnJvbnRpZXIuCgooRXhjZXB0IHRoYXQgb2YgY291cnNlIHlvdSBjYW4ndCBoYXZlIGEgL2ZpbmFsLyBmcm9udGllciwgYmVjYXVzZSB0aGVyZSdkCmJlIG5vdGhpbmcgZm9yIGl0IHRvIGJlIGEgZnJvbnRpZXIgL3RvLywgYnV0IGFzIGZyb250aWVycyBnbywgaXQncyBwcmV0dHkKcGVudWx0aW1hdGUuLi4pCgogIFtNb3ZpbmcgUGljdHVyZXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAyMi0yMyAodmVyeSBzaG9ydCBidXQgaGFwcGVucyB0byBzcGFuIGEgcGFnZSBib3VuZGFyeS4uLikKJXBhc3NhZ2UgMgpCeSBhbmQgbGFyZ2UsIHRoZSBvbmx5IHNraWxsIHRoZSBhbGNoZW1pc3RzIG9mIEFua2gtTW9ycG9yayBoYWQgZGlzY292ZXJlZApzbyBmYXIgd2FzIHRoZSBhYmlsaXR5IHRvIHR1cm4gZ29sZCBpbnRvIGxlc3MgZ29sZC4KCiAgW01vdmluZyBQaWN0dXJlcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDQ0LCA0NSwgNDYgKG11bHRpcGxlIHBhcmFncmFwaHMgc2tpcHBlZCBpbiB0aGUgZmlyc3QgdHdvIGdhcHMpCiVwYXNzYWdlIDMKSGUgbG9va2VkIGRvd24uICBUaGVyZSB3YXMgYSBkb2cgc2l0dGluZyBieSBoaXMgZmVldC4KCkl0IHdhcyBzbWFsbCwgYm93LWxlZ2dlZCBhbmQgd2lyeSwgYW5kIGJhc2ljYWxseSBncmV5IGJ1dCB3aXRoIHBhdGNoZXMgb2YKYnJvd24sIHdoaXRlLCBhbmQgYmxhY2sgaW4gb3V0bHlpbmcgYXJlYXMsIGFuZCBpdCB3YXMgc3RhcmluZy4KCkl0IHdhcyBjZXJ0YWlubHkgdGhlIG1vc3QgcGVuZXRyYXRpbmcgc3RhcmUgVmljdG9yIGhhZCBldmVyIHNlZW4uICBJdAp3YXNuJ3QgbWVuYWNpbmcsIG9yIGZhd25pbmcuICBJdCB3YXMganVzdCB2ZXJ5IHNsb3cgYW5kIHZlcnkgdGhvcm91Z2gsIGFzCnRob3VnaCB0aGUgZG9nIHdhcyBtZW1vcmlzaW5nIGRldGFpbHMgc28gdGhhdCBpdCBjb3VsZCBnaXZlIGEgZnVsbApkZXNjcmlwdGlvbiB0byB0aGUgYXV0aG9yaXRpZXMgbGF0ZXIuCgpbLi4uXQoKVmljdG9yIGxldCBoaXMgZ2F6ZSBzbGlkZSBkb3dud2FyZHMuICBUaGVyZSB3YXMgbm90aGluZyB0aGVyZSBidXQgdGhlIGxpdHRsZQpkb2csIGluZHVzdHJpb3VzbHkgc2NyYXRjaGluZyBpdHNlbGYuICBJdCBsb29rZWQgdXAgc2xvd2x5LCBhbmQgc2FpZCAiV29vZj8iCgpbLi4uXQoKVmljdG9yIHBva2VkIGFuIGV4cGxvcmF0b3J5IGZpbmdlciBpbiBoaXMgZWFyLiAgSXQgbXVzdCBoYXZlICBiZWVuIGEgdHJpY2sKb2YgYW4gZWNobywgb3Igc29tZXRoaW5nLiAgSXQgd2Fzbid0IHRoYXQgdGhlIGRvZyBoYWQgZ29uZSAid29vZiEiLCBhbHRob3VnaAp0aGF0IHdhcyBwcmFjdGljYWxseSB1bmlxdWUgaW4gaXRzZWxmOyBtb3N0IGRvZ3MgaW4gdGhlIHVuaXZlcnNlIC9uZXZlci8Kd2VudCAid29vZiEiLCB0aGV5IGhhZCBjb21wbGljYXRlZCBiYXJrcyBsaWtlICJ3aHV1dWdoISIgYW5kICJod2hvb3VmISIuCk5vLCBpdCB3YXMgdGhhdCBpdCBoYWRuJ3QgaW4gZmFjdCAvYmFya2VkLyBhdCBhbGwuICBJdCBoYWQgL3NhaWQvICJ3b29mIi4KClsuLi5dCgpPbmUgb2YgdGhlIGxhc3QgdGhpbmdzIFZpY3RvciByZW1lbWJlcmVkIHdhcyBhIHZvaWNlIGJlc2lkZSBoaXMga25lZSBzYXlpbmcsCiJDb3VsZCBoYXZlIGJpbiB3b3JzZSwgbWlzdGVyLiAgSSBjb3VsZCBoYXZlIHNhaWQgJ21pYW93Jy4iCgogIFtNb3ZpbmcgUGljdHVyZXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDMyMgolcGFzc2FnZSA0CiInVHdhcyBiZWF1dHkga2lsbGVkIHRoZSBiZWFzdCwiIHNhaWQgdGhlIERlYW4sIHdobyBsaWtlZCB0byBzYXkgdGhpbmdzCmxpa2UgdGhhdC4KCiJObyBpdCB3YXNuJ3QsIiBzYWlkIHRoZSBDaGFpci4gICJJdCB3YXMgaXQgc3BsYXR0aW5nIGludG8gdGhlIGdyb3VuZCBsaWtlCnRoYXQuIgoKICBbTW92aW5nIFBpY3R1cmVzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxMgolcGFzc2FnZSA1ClRoZXJlJ3MgYSBzYXlpbmcgdGhhdCBhbGwgcm9hZHMgbGVhZCB0byBBbmtoLU1vcnBvcmssIGdyZWF0ZXN0IG9mIERpc2N3b3JsZApjaXRpZXMuCgpBdCBsZWFzdCwgdGhlcmUncyBhIC9zYXlpbmcvIHRoYXQgdGhlcmUncyBhIHNheWluZyB0aGF0IGFsbCByb2FkcyBsZWFkIHRvCkFua2gtTW9ycG9yay4KCkFuZCBpdCdzIHdyb25nLiAgQWxsIHJvYWRzIGxlYWQgL2F3YXkvIGZyb20gQW5raC1Nb3Jwb3JrLCBidXQgc29tZXRpbWVzCnBlb3BsZSBqdXN0IHdhbGsgYWxvbmcgdGhlbSB0aGUgd3Jvbmcgd2F5LgoKICBbTW92aW5nIFBpY3R1cmVzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAzNCAoVmljdG9yIFR1Z2VsYmVuZCBhbmQgUG9uZGVyIFN0aWJib25zIGFyZSBzdHVkZW50cyBhdCBVbnNlZW4gVW5pLikKJXBhc3NhZ2UgNgoiUmFpbidzIHN0b3BwZWQuICBMZXQncyBnbyBvdmVyIHRoZSB3YWxsLCIgaGUgc2FpZC4gICJXZSBkZXNlcnZlIGEgZHJpbmsuIgoKVmljdG9yIHdhZ2dsZWQgYSBmaW5nZXIuICAiSnVzdCBvbmUgZHJpbmssIHRoZW4uICBHb3QgdG8ga2VlcCBzb2JlciwiIGhlCnNhaWQuICAiSXQncyBGaW5hbHMgdG9tb3Jyb3cuICBHb3QgdG8ga2VlcCBhIGNsZWFyIGhlYWQhIgoKIkh1aCEiLCBzYWlkIFBvbmRlci4KCk9mIGNvdXJzZSwgaXQncyB2ZXJ5IGltcG9ydGFudCB0byBiZSBzb2JlciB3aGVuIHlvdSB0YWtlIGFuIGV4YW0uICBNYW55CndvcnRod2hpbGUgY2FyZWVycyBpbiB0aGUgc3RyZWV0LWNsZWFuc2luZywgZnJ1aXQtcGlja2luZyBhbmQgc3Vid2F5LWd1aXRhci0KcGxheWluZyBpbmR1c3RyaWVzIGhhdmUgYmVlbiBmb3VuZGVkIG9uIGEgbGFjayBvZiB1bmRlcnN0YW5kaW5nIG9mIHRoaXMKc2ltcGxlIGZhY3QuCgogIFtNb3ZpbmcgUGljdHVyZXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDM3CiVwYXNzYWdlIDcKSW4gYSBzZW5zZSB3aGljaCBoaXMgdHV0b3JzIGNvdWxkbid0IHF1aXRlIGRlZmluZSwgbXVjaCB0byB0aGVpciBhbm5veWFuY2UsClZpY3RvciBUdWdlbGJlbmQgd2FzIGFsc28gdGhlIGxhemllc3QgcGVyc29uIGluIHRoZSBoaXN0b3J5IG9mIHRoZSB3b3JsZC4KCk5vdCBzaW1wbHksIG9yZGluYXJpbHkgbGF6eS4gIE9yZGluYXJ5IGxhemluZXNzIHdhcyBtZXJlbHkgdGhlIGFic2VuY2Ugb2YKZWZmb3J0LiAgVmljdG9yIGhhZCBwYXNzZWQgdGhyb3VnaCB0aGVyZSBhIGxvbmcgdGltZSBhZ28sIGhhZCBnb25lIHN0cmFpZ2h0CnRocm91Z2ggY29tbW9ucGxhY2UgaWRsZW5lc3MgYW5kIG91dCBvbiB0aGUgZmFyIHNpZGUuICBIZSBwdXQgbW9yZSBlZmZvcnQKaW50byBhdm9pZGluZyB3b3JrIHRoYW4gbW9zdCBwZW9wbGUgcHV0IGludG8gaGFyZCBsYWJvdXIuCgogIFtNb3ZpbmcgUGljdHVyZXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDYwCiVwYXNzYWdlIDgKQ3V0LW1lLW93bi1UaHJvYXQgRGliYmxlciB3YXMgb25lIG9mIHRob3NlIHJhcmUgcGVvcGxlIHdpdGggdGhlIGFiaWxpdHkgdG8KdGhpbmsgaW4gc3RyYWlnaHQgbGluZXMuCgpNb3N0IHBlb3BsZSB0aGluayBpbiBjdXJ2ZXMgYW5kIHppZy16YWdzLiAgRm9yIGV4YW1wbGUsIHRoZXkgc3RhcnQgd2l0aCBhCnRob3VnaHQgbGlrZTogIEkgd29uZGVyIGhvdyBJIGNhbiBiZWNvbWUgdmVyeSByaWNoLCBhbmQgdGhlbiBwcm9jZWVkIGFsb25nCmFuIHVuY2VydGFpbiBjb3Vyc2Ugd2hpY2ggaW5jbHVkZXMgdGhvdWdodHMgbGlrZTogIEkgd29uZGVyIHdoYXQncyBmb3IKc3VwcGVyLCBhbmQ6ICBJIHdvbmRlciB3aG8gSSBrbm93IHRoYXQgY2FuIGxlbmQgbWUgZml2ZSBkb2xsYXJzPwoKV2hlcmVhcyBUaHJvYXQgd2FzIG9uZSBvZiB0aG9zZSBwZW9wbGUgd2hvIGNvdWxkIGlkZW50aWZ5IHRoZSB0aG91Z2h0IGF0IHRoZQpvdGhlciBlbmQgb2YgdGhlIHByb2Nlc3MsIGluIHRoaXMgY2FzZSAvSSBhbSBub3cgdmVyeSByaWNoLywgZHJhdyBhIGxpbmUKYmV0d2VlbiB0aGUgdHdvLCBhbmQgdGhlbiB0aGluayBoaXMgd2F5IGFsb25nIGl0LCBzbG93bHkgYW5kIHBhdGllbnRseSwKdW50aWwgaGUgZ290IHRvIHRoZSBvdGhlciBlbmQuCgpOb3QgdGhhdCBpdCB3b3JrZWQuICBUaGVyZSB3YXMgYWx3YXlzLCBoZSBmb3VuZCwgc29tZSBzbWFsbCBidXQgdml0YWwgZmxhdwppbiB0aGUgcHJvY2Vzcy4gIEl0IGdlbmVyYWxseSBpbnZvbHZlZCBhIHN0cmFuZ2UgcmVsdWN0YW5jZSBvbiB0aGUgcGFydCBvZgpwZW9wbGUgdG8gYnV5IHdoYXQgaGUgaGFkIHRvIHNlbGwuCgogIFtNb3ZpbmcgUGljdHVyZXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiA3MS03MgolcGFzc2FnZSA5CiJUZWxsIG1lLCBNciBEaWJibGVyLiIgc2FpZCBTaWx2ZXJmaXNoLCAid2hhdCBleGFjdGx5IGlzIHlvdXIgcHJvZmVzc2lvbj8iCgoiSSBzZWxsIG1lcmNoYW5kaXNlLCIgc2FpZCBEaWJibGVyLgoKIk1vc3RseSBzYXVzYWdlcywiIFZpY3RvciB2b2x1bnRlZXJlZC4KCiIvQW5kLyBtZXJjaGFuZGlzZSwiIHNhaWQgRGliYmxlciwgc2hhcnBseS4gICJJIG9ubHkgc2VsbCBzYXVzYWdlcyB3aGVuIHRoZQptZXJjaGFuZGlzaW5nIHRyYWRlIGlzIGEgYml0IHNsb3cuIgoKIkFuZCB0aGUgc2FsZSBvZiBzYXVzYWdlcyBsZWFkcyB5b3UgdG8gYmVsaWV2ZSB5b3UgY2FuIG1ha2UgYmV0dGVyIG1vdmluZwpwaWN0dXJlcz8iIHNhaWQgU2lsdmVyZmlzaC4gICJBbnlvbmUgY2FuIHNlbGwgc2F1c2FnZXMhICBJc24ndCB0aGF0IHNvLApWaWN0b3I/IgoKIldlbGwuLi4iIHNhaWQgVmljdG9yLCByZWx1Y3RhbnRseS4gIE5vLW9uZSBleGNlcHQgRGliYmxlciBjb3VsZCBwb3NzaWJseQpzZWxsIERpYmJsZXIncyBzYXVzYWdlcy4KCiJUaGVyZSB5b3UgYXJlIHRoZW4sIiBzYWlkIFNpbHZlcmZpc2guCgoiVGhlIHRoaW5nIGlzLCIgc2FpZCBWaWN0b3IsICJ0aGF0IE1yIERpYmJsZXIgY2FuIGV2ZW4gc2VsbCBzYXVzYWdlcyB0bwpwZW9wbGUgd2hvIGhhdmUgYm91Z2h0IHRoZW0gb2ZmIGhpbSAvYmVmb3JlLy4iCgoiVGhhdCdzIHJpZ2h0ISIgc2FpZCBEaWJibGVyLiAgSGUgYmVhbWVkIGF0IFZpY3Rvci4KCiJBbmQgYSBtYW4gd2hvIGNvdWxkIHNlbGwgTXIgRGliYmxlcidzIHNhdXNhZ2VzIHR3aWNlIGNvdWxkIHNlbGwgYW55dGhpbmcsIgpzYWlkIFZpY3Rvci4KCiAgW01vdmluZyBQaWN0dXJlcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDExMS0xMTIgKCdkaXMnLCAnb3J0JywgJ3lvcmUnLCAnZmlua2luZycsICdtYXlvbm5haXNleScsICdzcGVjaWFsaXRheScsCiMgICAgICAgICAgICAgICdkZSBsYXIgbWF5c29uJyBhbGwgYWNjdXJhdGUpCiVwYXNzYWdlIDEwCkJvcmdsZSdzIGNvbW1pc3NhcnkgaGFkIGRlY2lkZWQgdG8gZXhwZXJpbWVudCB3aXRoIHNhbGFkcyB0b25pZ2h0LiAgVGhlCm5lYXJlc3Qgc2FsYWQgZ3Jvd2luZyBkaXN0cmljdCB3YXMgdGhpcnR5IHNsb3cgbWlsZXMgYXdheS4KCiJXaGF0IGRpcz8iIGRlbWFuZGVkIGEgdHJvbGwsIGhvbGRpbmcgdXAgc29tZXRoaW5nIGxpbXAgYW5kIGJyb3duLgoKRnJ1bnRraW4gdGhlIHNob3J0LW9yZGVyIGNoZWYgaGF6YXJkZWQgYSBndWVzcy4KCidDZWxlcnk/IiBoZSBzYWlkLiAgSGUgcGVlcmVkIGNsb3Nlci4gICJZZWFoLCBjZWxlcnkuIgoKIkl0IC9icm93bi8uIgoKIidTJ3JpZ2h0LiAgJ1MncmlnaHQhICBSaXBlIGNlbGVyeSBvcnQgdG8gYmUgYnJvd24sIiBzYWlkIEZydW50a2luLCBxdWlja2x5LgoiU2hvd3MgaXQncyByaXBlLCIgaGUgYWRkZWQuCgoiSXQgc2hvdWxkIGJlIC9ncmVlbi8uIgoKIk5haC4gIFlvcmUgZmlua2luZyBhYm91dCB0aGUgdG9tYXRvZXMsIiBzYWlkIEZydW50a2luLgoKIlllYWgsIGFuZCB3aGF0J3MgdGhpcyBydW5ueSBzdHVmZj8iIHNhaWQgYSBtYW4gaW4gdGhlIHF1ZXVlLgoKRnJ1bnRraW4gZHJldyBoaW1zZWxmIHVwIHRvIGhpcyBmdWxsIGhlaWdodC4KCiJUaGF0LCIgaGUgc2FpZCwgImlzIHRoZSBtYXlvbm5haXNleS4gIE1hZGUgaXQgbXlzZWxmLiAgT3V0IG9mIGEgL2Jvb2svLCBoZQphZGRlZCBwcm91ZGx5LgoKIlllYWQsIEkgZXhwZWN0IHlvdSBkaWQsIiBzYWlkIHRoZSBtYW4sIHByb2RkaW5nIGl0LiAgIkNsZWFybHkgb2lsLCBlZ2dzCmFuZCB2aW5lZ2FyIHdlcmUgbm90IGludm9sdmVkLCByaWdodD8iCgoiU3BlY2lhbGl0YXkgZGUgbGFyIG1heXNvbiwiIHNhaWQgRnJ1bnRraW4uCgoiUmlnaHQsIHJpZ2h0LCIgc2FpZCB0aGUgbWFuLiAgIk9ubHkgaXQncyBhdHRhY2tpbmcgbXkgbGV0dHVjZS4iCgpGcnVudGtpbiBncmFzcGVkIGhpcyBsYWRsZSBhbmdyaWx5LgoKIkxvb2stLSIgaGUgYmVnYW4uCgoiTm8sIGl0J3MgYWxsIHJpZ2h0LCIgc2FpZCB0aGUgcHJvc3BlY3RpdmUgZGluZXIuICAiVGhlIHNsdWdzIGhhdmUgZm9ybWVkIGEKZGVmZW5zaXZlIHJpbmcuIgoKICBbTW92aW5nIFBpY3R1cmVzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxMzcgKENNT1QgRGliYmxlciBoYXMgYmVjb21lIGEgZGlyZWN0b3IsIFJvY2sgaXMgYSB0cm9sbCBhY3RvcikKJXBhc3NhZ2UgMTEKIkVyLCBJIHdhcyBqdXN0IHdvbmRlcmluZywgTXIgRGliYmxlci4uLiB3aGF0IGlzIG15IG1vdGl2YXRpb24gZm9yIHRoaXMKc2NlbmU/IgoKIk1vdGl2YXRpb24/IgoKIlllcy4gIEVyLiAgSSBnb3QgdG8ga25vdywgc2VlLCIgc2FpZCBSb2NrLgoKIkhvdyBhYm91dDogIEknbGwgZmlyZSB5b3UgaWYgeW91IGRvbid0IGRvIGl0IHByb3Blcmx5PyIKClJvY2sgZ3Jpbm5lZC4gICJSaWdodCB5b3UgYXJlLCBNciBEaWJibGVyLCIgaGUgc2FpZC4KCiAgW01vdmluZyBQaWN0dXJlcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTg5CiVwYXNzYWdlIDEyCk1hZ2ljIHdhc24ndCBkaWZmaWN1bHQuICBUaGF0IHdhcyB0aGUgYmlnIHNlY3JldCB0aGF0IHRoZSB3aG9sZSBiYXJvcXVlCmVkaWZpY2Ugb2Ygd2l6YXJkcnkgaGFkIGJlZW4gc2V0IHVwIHRvIGNvbmNlYWwuICBBbnlvbmUgd2l0aCBhIGJpdCBvZgppbnRlbGxpZ2VuY2UgYW5kIGVub3VnaCBwZXJzZXZlcmFuY2UgY291bGQgZG8gbWFnaWMsIHdoaWNoIHdhcyB3aHkgdGhlCndpemFyZHMgY2xvYWtlZCBpdCB3aXRoIHJpdHVhbHMgYW5kIHRoZSB3aG9sZSBwb2ludHktaGF0IGJ1c2luZXNzLgoKVGhlIHRyaWNrIHdhcyB0byBkbyBtYWdpYyBhbmQgL2dldCBhd2F5IHdpdGggaXQvLgoKQmVjYXVzZSBpdCB3YXMgYXMgaWYgdGhlIGh1bWFuIHJhY2Ugd2FzIGEgZmllbGQgb2YgY29ybiBhbmQgbWFnaWMgaGVscGVkCnRoZSB1c2VycyBncm93IGp1c3QgdGhhdCBiaXQgdGFsbGVyLCBzbyB0aGF0IHRoZXkgc3Rvb2Qgb3V0LiAgVGhhdAphdHRyYWN0ZWQgdGhlIGF0dGVudGlvbiBvZiBnb2RzIGFuZC0tVmljdG9yIGhlc2l0YXRlZC0tb3RoZXIgVGhpbmdzIG91dHNpZGUKdGhpcyB3b3JsZC4gIFBlb3BsZSB3aG8gdXNlZCBtYWdpYyB3aXRob3V0IGtub3dpbmcgd2hhdCB0aGV5IHdlcmUgZG9pbmcKdXN1YWxseSBjYW1lIHRvIGEgc3RpY2t5IGVuZC4KCkFsbCBvdmVyIHRoZSBlbnRpcmUgcm9vbSwgc29tZXRpbWVzLgoKICBbTW92aW5nIFBpY3R1cmVzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyMDQgKHBhc3NhZ2UgZW5kcyBtaWQtcGFyYWdyYXBoOyBtdXNpbmdzIGFyZSBieSBHYXNwb2RlIHRoZSBkb2cpCiVwYXNzYWdlIDEzClN1bm5pbmsgZHJlYWRmdWwgaW4gdGhlcmUsIGhlIHRob3VnaHQuICBQcm9iJ2x5IHRlbnRhY2xlZCBmaW5ncyB0aGF0IHJpcHMKeW91ciBmYWNlIG9mZi4gIEkgbWVhbiwgd2hlbiB5b3UgZmluZHMgbXlzdGVyaW91cyBkb29ycyBpbiBvbGQgaGlsbHMsIGl0CnN0YW5kcyB0byByZWFzb24gd290IGNvbWVzIG91dCBhaW4ndCBnb2luZyB0byBiZSBwbGVhc2VkIHRvIHNlZSB5b3UuICBFdmlsCmNyZWF0dXJlcyB3b3QgTWFuIHNob3VsZG4ndCB3b3Qgb2YsIGFuZCBoZXJlJ3Mgb25lIGRvZyB3b3QgZG9uJ3Qgd2FudCB0bwp3b3Qgb2YgdGhlbSBlaXRoZXIuCgogIFtNb3ZpbmcgUGljdHVyZXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAyMDYtMjA3IChwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoOyBEaWJibGVyIG5vdyBjb250cm9scyBTaWx2ZXJmaXNoJ3MKIyAgICAgICAgICAgICAgbW92aW5nIHBpY3R1cmVzIHN0dWRpbzsgIERldHJpdHVzIGlzbid0IHBhcnQgb2YgdGhlIFdhdGNoIHlldCkKJXBhc3NhZ2UgMTQKIlsuLi5dICBEZXRyaXR1cywgdGhyb3cgdGhpcyBidW0gb3V0ISIKCiJSaWdodCB5b3UgYXJlLCBNciBEaWJibGVyLCIgcnVtYmxlZCB0aGUgdHJvbGwsIGdyaXBwaW5nIFNpbHZlcmZpc2gncwpjb2xsYXIuCgoiWW91IGhhdmVuJ3QgaGVhcmQgdGhlIGxhc3Qgb2YgdGhpcywgeW91LS15b3Ugc2NoZW1pbmcsIGRldmlvdXMKbWVnYWxvbWFuaWFjISIKCkRpYmJsZXIgcmVtb3ZlZCBoaXMgY2lnYXIuCgoiVGhhdCdzIC9NaXN0ZXIvIE1lZ2Fsb21hbmljIHRvIHlvdSwiIGhlIHNhaWQuCgogIFtNb3ZpbmcgUGljdHVyZXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDI3NCAocGFzc2FnZSBzdGFydHMgbWlkLXNlbnRlbmNlOyBzZW5pb3Igd2l6YXJkcyBvZiB0aGUgVW5pdmVyc2l0eSBhcmUKIyAgICAgICAgIGF0dGVuZGluZyBhICdjbGljaycgYW5kIGhhdmUgZGVjaWRlZCB0byB0YWtlIHRoZWlyIGhhdHMgb2ZmLi4uKQolcGFzc2FnZSAxNQpbLi4uXSBpbnNpZGUgZXZlcnkgb2xkIHBlcnNvbiBpcyBhIHlvdW5nIHBlcnNvbiB3b25kZXJpbmcgd2hhdCBoYXBwZW5lZC4KCiAgW01vdmluZyBQaWN0dXJlcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjk1IChwYXNzYWdlIHN0YXJ0cyBtaWQtc2VudGVuY2U7IHRoZSBtb3ZpZSB0aGVhdGVyIG93bmVyJ3MgZGF1Z2h0ZXIKIyAgICAgICAgIGlzIHBsYXlpbmcgYSBwaXBlIG9yZ2FuIHRvIGFjY29tcGFueSB0aGUgc2lsZW50IG1vdmllKQolcGFzc2FnZSAxNgpbLi4uXSB3aGF0ZXZlciBwaWVjZSBvZiBtdXNpYyBzaGUgd2FzIHBsYXlpbmcsIGl0IHdhcyBkZWZpbml0ZWx5IGxvc2luZy4KCiAgW01vdmluZyBQaWN0dXJlcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiVlIHRpdGxlCiMKIwojCiV0aXRsZSBSZWFwZXIgTWFuICgxNSkKIyBwcC4gMzAxLTMwMiAoUk9DIGVkaXRpb24pCiVwYXNzYWdlIDEKSXQgd2FzIGxhdGVyIHRoYXQgdGhlIHN0b3J5IG9mIFdpbmRsZSBQb29ucyByZWFsbHkgY2FtZSB0byBhbiBlbmQsIGlmCiJzdG9yeSIgbWVhbnMgYWxsIHRoYXQgaGUgZGlkIGFuZCBjYXVzZWQgYW5kIHNldCBpbiBtb3Rpb24uICBJbiB0aGUgUmFtdG9wCnZpbGxhZ2VzIHdoZXJlIHRoZXkgZGFuY2UgdGhlIHJlYWwgTW9ycmlzIGRhbmNlLCBmb3IgZXhhbXBsZSwgdGhleSBiZWxpZXZlCnRoYXQgbm8gb25lIGlzIGZpbmFsbHkgZGVhZCB1bnRpbCB0aGUgcmlwcGxlcyB0aGV5IGNhdXNlIGluIHRoZSB3b3JsZCBkaWUKYXdheS0tdW50aWwgdGhlIGNsb2NrIGhlIHdvdW5kIHVwIHdpbmRzIGRvd24sIHVudGlsIHRoZSB3aW5lIHNoZSBtYWRlIGhhcwpmaW5pc2hlZCBpdHMgZmVybWVudCwgdW50aWwgdGhlIGNyb3AgdGhleSBwbGFudGVkIGlzIGhhcnZlc3RlZC4gIFRoZSBzcGFuCm9mIHNvbWVvbmUncyBsaWZlLCB0aGV5IHNheSwgaXMgb25seSB0aGUgY29yZSBvZiB0aGVpciBhY3R1YWwgZXhpc3RlbmNlLgoKICBbUmVhcGVyIE1hbiwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjUxIChwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoKQolcGFzc2FnZSAyCkZpdmUgZXhjbGFtYXRpb24gbWFya3MsIHRoZSBzdXJlIHNpZ24gb2YgYW4gaW5zYW5lIG1pbmQuCgogIFtSZWFwZXIgTWFuLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAzMDUgKHBhc3NhZ2Ugc3RhcnRzIG1pZC1wYXJhZ3JhcGgpCiVwYXNzYWdlIDMKTGlnaHQgdGhpbmtzIGl0IHRyYXZlbHMgZmFzdGVyIHRoYW4gYW55dGhpbmcgYnV0IGl0IGlzIHdyb25nLiAgTm8gbWF0dGVyCmhvdyBmYXN0IGxpZ2h0IHRyYXZlbHMgaXQgZmluZHMgdGhlIGRhcmtuZXNzIGhhcyBhbHdheXMgZ290IHRoZXJlIGZpcnN0LAphbmQgaXMgd2FpdGluZyBmb3IgaXQuCgogIFtSZWFwZXIgTWFuLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyNDUKJXBhc3NhZ2UgNAoiVGhhdCdzIG5vdCBmYWlyLCB5b3Uga25vdy4gIElmIHdlIGtuZXcgd2hlbiB3ZSB3ZXJlIGdvaW5nIHRvIGRpZSwgcGVvcGxlCndvdWxkIGxlYWQgYmV0dGVyIGxpdmVzLiIKCklGIFBFT1BMRSBLTkVXIFdIRU4gVEhFWSBXRVJFIEdPSU5HIFRPIERJRSwgSSBUSElOSyBUSEVZIFBST0JBQkxZIFdPVUxETidUCkxJVkUgQVQgQUxMLgoKICBbUmVhcGVyIE1hbiwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTkKJXBhc3NhZ2UgNQpZT1UgRkVBUiBUTyBESUU/CgoiSXQncyBub3QgdGhhdCBJIGRvbid0IHdhbnQuLi4gSSBtZWFuLCBJJ3ZlIGFsd2F5cy4uLiBpdCdzIGp1c3QgdGhhdCBsaWZlCmlzIGEgaGFiaXQgdGhhdCdzIGhhcmQgdG8gYnJlYWsuLi4iCgogIFtSZWFwZXIgTWFuLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMzAtMzEKJXBhc3NhZ2UgNgpXaXphcmRzIGRvbid0IGJlbGlldmUgaW4gZ29kcyBpbiB0aGUgc2FtZSB3YXkgdGhhdCBtb3N0IHBlb3BsZSBkb24ndCBmaW5kIGl0Cm5lY2Vzc2FyeSB0byBiZWxpZXZlIGluLCBzYXksIHRhYmxlcy4gIFRoZXkga25vdyB0aGV5J3JlIHRoZXJlLCB0aGV5IGtub3cKdGhleSdyZSB0aGVyZSBmb3IgYSBwdXJwb3NlLCB0aGV5J2QgcHJvYmFibHkgYWdyZWUgdGhhdCB0aGV5IGhhdmUgYSBwbGFjZSBpbgphIHdlbGwtb3JnYW5pemVkIHVuaXZlcnNlLCBidXQgdGhleSB3b3VsZG4ndCBzZWUgdGhlIHBvaW50IG9mIC9iZWxpZXZpbmcvLApvZiBnb2luZyBhcm91bmQgc2F5aW5nLCAiTyBncmVhdCB0YWJsZSwgd2l0aG91dCB3aG9tIHdlIGFyZSBhcyBuYXVnaHQiLgpBbnl3YXksIGVpdGhlciB0aGUgZ29kcyBhcmUgdGhlcmUgd2hldGhlciB5b3UgYmVsaWV2ZSBvciBub3QsIG9yIGV4aXN0IG9ubHkKYXMgYSBmdW5jdGlvbiBvZiB0aGUgYmVsaWVmLCBzbyBlaXRoZXIgd2F5IHlvdSBtaWdodCBhcyB3ZWxsIGlnbm9yZSB0aGUKd2hvbGUgYnVzaW5lc3MgYW5kLCBhcyBpdCB3ZXJlLCBlYXQgb2ZmIHlvdXIga25lZXMuCgpOZXZlcnRoZWxlc3MsIHRoZXJlIGlzIGEgc21hbGwgY2hhcGVsIG9mZiB0aGUgVW5pdmVyc2l0eSdzIEdyZWF0IEhhbGwsCmJlY2F1c2Ugd2hpbGUgdGhlIHdpemFyZHMgc3RhbmQgcmlnaHQgYmVoaW5kIHRoZSBwaGlsb3NvcGh5IGFzIG91dGxpbmVkCmFib3ZlLCB5b3UgZG9uJ3QgYmVjb21lIGEgc3VjY2Vzc2Z1bCB3aXphcmQgYnkgZ2V0dGluZyB1cCBnb2RzJyBub3NlcyBldmVuCmlmIHRob3NlIG5vc2VzIG9ubHkgZXhpc3QgaW4gYW4gZXRoZXJlYWwgb3IgbWV0YXBob3JpY2FsIHNlbnNlLiAgQmVjYXVzZQp3aGlsZSB3aXphcmRzIGRvbid0IGJlbGlldmUgaW4gZ29kcyB0aGV5IGtub3cgZm9yIGEgZmFjdCB0aGF0IC9nb2RzLyBiZWxpZXZlCmluIGdvZHMuCgogIFtSZWFwZXIgTWFuLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiA1MCAoRGliYmxlciBpcyBzbyBsb3cgYmVjYXVzZSBoZSdzIG9uIHN0ZXBzIGxlYWRpbmcgZG93biB0byBhIGNlbGxhcjsKIyAgICAgICAgJ2Zhdm91cicgYW5kICdwZWRsYXInIGFyZSB0aGUgc3BlbGxpbmcgdXNlZCkKJXBhc3NhZ2UgNwoiU2VyZ2VhbnQhIgoKQ29sb24gZnJvemUuICBUaGVuIGhlIGxvb2tlZCBkb3duLiAgQSBmYWNlIHdhcyBzdGFyaW5nIHVwIGF0IGhpbSBmcm9tIGdyb3VuZApsZXZlbC4gIFdoZW4gaGUnZCBnb3QgYSBncmlwIG9uIGhpbXNlbGYsIGhlIG1hZGUgb3V0IHRoZSBzaGFycCBmZWF0dXJlcyBvZgpoaXMgb2xkIGZyaWVuZCBDdXQtTWUtT3duLVRocm9hdCBEaWJibGVyLCB0aGUgRGlzY3dvcmxkJ3Mgd2Fsa2luZywgdGFsa2luZwphcmd1bWVudCBpbiBmYXZvdXIgb2YgdGhlIHRoZW9yeSB0aGF0IG1hbmtpbmQgaGFkIGRlc2NlbmRlZCBmcm9tIGEgc3BlY2llcwpvZiByb2RlbnQuICBDLiBNLiBPLiBULiBEaWJibGVyIGxpa2UgdG8gZGVzY3JpYmUgaGltc2VsZiBhcyBhIG1lcmNoYW50CmFkdmVudHVyZXI7IGV2ZXJ5b25lIGVsc2UgbGlrZWQgdG8gZGVzY3JpYmUgaGltIGFzIGl0aW5lcmFudCBwZWRsYXIgd2hvc2UKbW9uZXltYWtpbmcgc2NoZW1lcyB3ZXJlIGFsd2F5cyBsZXQgZG93biBieSBzb21lIHNtYWxsIGJ1dCB2aXRhbCBmbGF3LCBzdWNoCmFzIHRyeWluZyB0byBzZWxsIHRoaW5ncyBoZSBkaWRuJ3Qgb3duIG9yIHdoaWNoIGRpZG4ndCB3b3JrIG9yLCBzb21ldGltZXMsCmRpZG4ndCBldmVuIGV4aXN0LiAgRmFpcnkgZ29sZCBpcyB3ZWxsIGtub3duIHRvIGV2YXBvcmF0ZSBieSBtb3JuaW5nLCBidXQKaXQgd2FzIGEgcmVpbmZvcmNlZCBjb25jcmV0ZSBzbGFiIGJ5IGNvbXBhcmlzb24gdG8gc29tZSBvZiBEaWJibGVyJ3MKbWVyY2hhbmRpc2UuCgogIFtSZWFwZXIgTWFuLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gNTgtNTkKJXBhc3NhZ2UgOApPdmVyIHRoZSBmaXJlcGxhY2Ugd2FzIGFuIG9ybmFtZW50YWwgY2FuZGxlc3RpY2ssIGZpeGVkIHRvIGEgYnJhY2tldCBvbiB0aGUKd2FsbC4gIEl0IHdhcyBzdWNoIGEgZmFtaWxpYXIgcGllY2Ugb2YgZnVybml0dXJlIHRoYXQgV2luZGxlIGhhZG4ndCByZWFsbHkKc2VlbiBpdCBmb3IgZmlmdHkgeWVhcnMuCgpJdCB3YXMgY29taW5nIHVuc2NyZXdlZC4gIEl0IHNwdW4gYXJvdW5kIHNsb3dseSwgc3F1ZWFraW5nIG9uY2UgYSB0dXJuLgpBZnRlciBoYWxmIGEgZG96ZW4gdHVybnMgaXQgZmVsbCBvZmYgYW5kIGNsYXR0ZXJlZCB0byB0aGUgZmxvb3IuCgpJbmV4cGxpY2FibGUgcGhlbm9tZW5hIHdlcmUgbm90IGluIHRoZW1zZWx2ZXMgdW51c3VhbCBvbiB0aGUgRGlzY3dvcmxkLigxKQpJdCB3YXMganVzdCB0aGF0IHRoZXkgbm9ybWFsbHkgaGFkIG1vcmUgcG9pbnQsIG9yIGF0IGxlYXN0IHdlcmUgYSBiaXQgbW9yZQppbnRlcmVzdGluZy4KCigxKSBSYWlucyBvZiBmaXNoLCBmb3IgZXhhbXBsZSwgd2VyZSBzbyBjb21tb24gaW4gdGhlIGxpdHRsZSBsYW5kLWxvY2tlZAp2aWxsYWdlIG9mIFBpbmUgRHJlc3NlcnMgdGhhdCBpdCBoYWQgYSBmbG91cmlzaGluZyBzbW9raW5nLCBjYW5uaW5nIGFuZApraXBwZXIgZmlsbGV0aW5nIGluZHVzdHJ5LiAgQW5kIGluIHRoZSBtb3VudGFpbiByZWdpb25zIG9mIFN5cnJpdCBtYW55CnNoZWVwLCBsZWZ0IG91dCBpbiB0aGUgZmllbGRzIGFsbCBuaWdodCwgd291bGQgYmUgZm91bmQgaW4gdGhlIG1vcm5pbmcgdG8KL2JlIGZhY2luZyB0aGUgb3RoZXIgd2F5Lywgd2l0aG91dCB0aGUgYXBwYXJlbnQgaW50ZXJ2ZW50aW9uIG9mIGFueSBodW1hbgphZ2VuY3kuCgogIFtSZWFwZXIgTWFuLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gNjgtNjkgKDEzMCB5ZWFyIG9sZCB3aXphcmQgV2luZGxlIFBvb24gaGFzIGJlY29tZSBhIHpvbWJpZSBhZnRlciBkeWluZykKJXBhc3NhZ2UgOQoiQW5kIG5vdyBsZXQncyBwdXQgdGhlIGxpZCBvbiBhbmQgZ28gYW5kIGhhdmUgc29tZSBsdW5jaCwiIHNhaWQgUmlkY3VsbHkuCiJEb24ndCB3b3JyeSwgV2luZGxlLiAgSXQncyBib3VuZCB0byB3b3JrLiAgVG9kYXkgaXMgdGhlIGxhc3QgZGF5IG9mIHRoZQpyZXN0IG9mIHlvdXIgbGlmZS4iCgpXaW5kbGUgbGF5IGluIHRoZSBkYXJrbmVzcywgbGlzdGVuaW5nIHRvIHRoZSBoYW1tZXJpbmcuICBUaGVyZSB3YXMgYSB0aHVtcAphbmQgYSBtdWZmbGVkIGltcHJlY2F0aW9uIGFnYWluc3QgdGhlIERlYW4gZm9yIG5vdCBob2xkaW5nIHRoZSBlbmQgcHJvcGVybHkuCkFuZCB0aGVuIHRoZSBwYXR0ZXIgb2Ygc29pbCBvbiB0aGUgbGlkLCBnZXR0aW5nIGZhaW50ZXIgYW5kIG1vcmUgZGlzdGFudC4KCkFmdGVyIGEgd2hpbGUgYSBkaXN0YW50IHJ1bWJsaW5nIHN1Z2dlc3RlZCB0aGF0IHRoZSBjb21tZXJjZSBvZiB0aGUgY2l0eQp3YXMgYmVpbmcgcmVzdW1lZC4gIEhlIGNvdWxkIGV2ZW4gaGVhciBtdWZmbGVkIHZvaWNlcy4KCkhlIGJhbmdlZCBvbiB0aGUgY29mZmluIGxpZC4KCiJDYW4geW91IGtlZXAgaXQgZG93bj8iIGhlIGRlbWFuZGVkLiAgIlRoZXJlJ3MgcGVvcGxlIGRvd24gaGVyZSB0cnlpbmcgdG8KYmUgZGVhZCEiCgpIZSBoZWFyZCB0aGUgdm9pY2VzIHN0b3AuICBUaGVyZSB3YXMgdGhlIHNvdW5kIG9mIGZlZXQgaHVycnlpbmcgYXdheS4KCiAgW1JlYXBlciBNYW4sIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiA4MS04MiAodGhpbmdzIGhhdmUgc3RvcHBlZCBkeWluZyBiZWNhdXNlIERlYXRoIGlzIG5vIGxvbmdlciBvbiB0aGUgam9iKQolcGFzc2FnZSAxMApFdmVyeXRoaW5nIHRoYXQgZXhpc3RzLCB5ZWFybnMgdG8gbGl2ZS4gIFRoYXQncyB3aGF0IHRoZSBjeWNsZSBvZiBsaWZlIGlzCmFsbCBhYm91dC4gIFRoYXQncyB0aGUgZW5naW5lIHRoYXQgZHJpdmVzIHRoZSBncmVhdCBiaW9sb2dpY2FsIHB1bXBzIG9mCmV2b2x1dGlvbi4gIEV2ZXJ5dGhpbmcgdHJpZXMgdG8gaW5jaCBpdHMgd2F5IHVwIHRoZSB0cmVlLCBjbGF3aW5nIG9yCnRlbnRhY2xpbmcgb3Igc2xpbWluZyBpdHMgd2F5IHVwIHRvIHRoZSBuZXh0IG5pY2hlIHVudGlsIGl0IGdldHMgdG8gdGhlCnZlcnkgdG9wLS13aGljaCwgb24gdGhlIHdob2xlLCBuZXZlciBzZWVtcyB0byBoYXZlIGJlZW4gd29ydGggYWxsIHRoZQplZmZvcnQuCgpFdmVyeXRoaW5nIHRoYXQgZXhpc3RzLCB5ZWFybnMgdG8gbGl2ZS4gIEV2ZW4gdGhpbmdzIHRoYXQgYXJlIG5vdCBhbGl2ZS4KVGhpbmdzIHRoYXQgaGF2ZSBhIGtpbmQgb2Ygc3ViLWxpZmUsIGEgbWV0YXBob3JpY2FsIGxpZmUsIGFuIC9hbG1vc3QvIGxpZmUuCkFuZCBub3csIGluIHRoZSBzYW1lIHdheSB0aGF0IGEgc3VkZGVuIGhvdCBzcGVsbCBicmluZ3MgZm9ydGggdW5uYXR1cmFsIGFuZApleG90aWMgYmxvb21zLi4uCgogIFtSZWFwZXIgTWFuLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxMDEKJXBhc3NhZ2UgMTEKRGVhZC4gIFRoYXQgd2FzIHRoZSBwb2ludC4gIEFsbCB0aGUgcmVsaWdpb25zIGhhZCB2ZXJ5IHN0cm9uZyB2aWV3cyBhYm91dAp0YWxraW5nIHRvIHRoZSBkZWFkLiAgQW5kIHNvIGRpZCBNcnMgQ2FrZS4gIFRoZXkgaGVsZCB0aGF0IGl0IHdhcyBzaW5mdWwuCk1ycyBDYWtlIGhlbGQgdGhhdCBpdCB3YXMgb25seSBjb21tb24gY291cnRlc3kuCgpUaGlzIHVzdWFsbHkgbGVkIHRvIGEgZmllcmNlIGVjY2xlc2lhc3RpY2FsIGRlYmF0ZSB3aGljaCByZXN1bHRlZCBpbiBNcnMKQ2FrZSBnaXZpbmcgdGhlIGNoaWVmIHByaWVzdCB3aGF0IHNoZSBjYWxsZWQgImEgcGllY2Ugb2YgaGVyIG1pbmQiLiAgVGhlcmUKd2VyZSBzbyBtYW55IHBpZWNlcyBvZiBNcnMgQ2FrZSdzIG1pbmQgbGVmdCBhcm91bmQgdGhlIGNpdHkgbm93IHRoYXQgaXQKd2FzIHF1aXRlIHN1cnByaXNpbmcgdGhhdCB0aGVyZSB3YXMgZW5vdWdoIGxlZnQgdG8gcG93ZXIgTXJzIENha2UgYnV0LApzdHJhbmdlbHkgZW5vdWdoLCB0aGUgbW9yZSBwaWVjZXMgb2YgaGVyIG1pbmQgc2hlIGdhdmUgYXdheSB0aGUgbW9yZSB0aGVyZQpzZWVtZWQgdG8gYmUgbGVmdC4KCiAgW1JlYXBlciBNYW4sIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDIyMgolcGFzc2FnZSAxMgoiTm8tLSIgUmlkY3VsbHkgYmVnYW4sIGFuZCByZWFsaXNlZCB0aGF0IGl0IHdhcyBob3BlbGVzcy4gIEFuZCBoZSB3YXMgbG9zaW5nCnRoZSBpbml0aWF0aXZlLiAgSGUgY2FyZWZ1bGx5IGZvcm11bGF0ZWQgdGhlIG1vc3QgZ2VudGVlbCBiYXR0bGUgY3J5IGluIHRoZQpoaXN0b3J5IG9mIGJvd2RsZXJpc20sCgoiRGFybiB0aGVtIHRvIEhlY2shIiBoZSB5ZWxsZWQsIGFuZCByYW4gYWZ0ZXIgdGhlIERlYW4uCgogIFtSZWFwZXIgTWFuLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyMjYKJXBhc3NhZ2UgMTMKTWlzcyBGbGl0d29ydGggZGlzYXBwZWFyZWQgaW50byB0aGUgc2N1bGxlcnkuICBUaGVyZSB3YXMgdGhlIGNyZWFraW5nIG9mIGEKcHVtcC4gIFNoZSByZXR1cm5lZCB3aXRoIGEgZGFtcCBmbGFubmVsIGFuZCBhIGdsYXNzIG9mIHdhdGVyLgoKVEhFUkUnUyBBIE5FV1QgSU4gSVQhCgoiU2hvd3MgaXQncyBmcmVzaCwiIHNhaWQgTWlzcyBGbGl0d29ydGgsKDEpIGZpc2hpbmcgdGhlIGFtcGhpYmlhbiBvdXQgYW5kCnJlbGVhc2luZyBpdCBvbiB0aGUgZmxhZ3N0b25lcywgd2hlcmUgaXQgc2N1dHRsZWQgYXdheSBpbnRvIGEgY3JhY2suCgooMSkgUGVvcGxlIGhhdmUgYmVsaWV2ZWQgZm9yIGh1bmRyZWRzIG9mIHllYXJzIHRoYXQgbmV3dHMgaW4gYSB3ZWxsIG1lYW4KdGhhdCB0aGUgd2F0ZXIncyBmcmVzaCBhbmQgZHJpbmthYmxlLCBhbmQgL2luIGFsbCB0aGF0IHRpbWUvIG5ldmVyIGFza2VkCnRoZW1zZWx2ZXMgd2hldGhlciB0aGUgbmV3dHMgZ290IG91dCB0byBnbyB0byB0aGUgbGF2YXRvcnkuCgogIFtSZWFwZXIgTWFuLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyNDcKJXBhc3NhZ2UgMTQKIkhhdmUgeW91IGdvdCBhbnkgbGFzdCB3b3Jkcz8iCgpZRVMuICBJIERPTidUIFdBTlQgVE8gR08uCgoiV2VsbC4gIFN1Y2NpbmN0LCBhbnl3YXkuIgoKICBbUmVhcGVyIE1hbiwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDI0OS0yNTAKJXBhc3NhZ2UgMTUKIldoZXJlJ3MgZXZlcnlvbmUgZ29uZSwgTGlicmFyaWFuPyIKCiJPb29rIG9vb2suIgoKIkp1c3QgbGlrZSB0aGVtLiAgSSdkIGhhdmUgZG9uZSB0aGF0LiAgUnVzaCBvZmYgd2l0aG91dCB0aGlua2luZy4gIE1heSB0aGUKZ29kcyBibGVzcyB0aGVtIGFuZCBoZWxwIHRoZW0sIGlmIHRoZXkgY2FuIGZpbmQgdGhlIHRpbWUgZnJvbSB0aGVpciBmYW1pbHkKc3F1YWJibGVzLiIKCkFuZCB0aGVuIGhlIHRob3VnaHQ6ICB3ZWxsLCB3aGF0IG5vdz8gIEkndmUgdGhvdWdodCwgYW5kIHdoYXQgYW0gSSBnb2luZyB0bwpkbz8KClJ1c2ggb2ZmLCBvciBjb3Vyc2UsICBCdXQgc2xvd2x5LgoKICBbUmVhcGVyIE1hbiwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiVlIHRpdGxlCiMKIwojCiV0aXRsZSBXaXRjaGVzIEFicm9hZCAoMTQpCiMgcC4gOTIgKFJPQyBlZGl0aW9uKQolcGFzc2FnZSAxClZhbXBpcmVzIGhhdmUgcmlzZW4gZnJvbSB0aGUgZGVhZCwgdGhlIGdyYXZlIGFuZCB0aGUgY3J5cHQsIGJ1dCBoYXZlIG5ldmVyCm1hbmFnZWQgaXQgZnJvbSB0aGUgY2F0LgoKICBbV2l0Y2hlcyBBYnJvYWQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAxMi0xMwolcGFzc2FnZSAyCkRlc2lkZXJhdGEgSG9sbG93IHdhcyBtYWtpbmcgaGVyIHdpbGwuCgpXaGVuIERlc2lkZXJhdGEgSG9sbG93IHdhcyBhIGdpcmwsIGhlciBncmFuZG1vdGhlciBoYWQgZ2l2ZW4gaGVyIGZvdXIKaW1wb3J0YW50IHBpZWNlcyBvZiBhZHZpY2UgdG8gZ3VpZGUgaGVyIHlvdW5nIGZvb3RzdGVwcyBvbiB0aGUgdW5leHBlY3RlZGx5CnR3aXN0aW5nIHBhdGh3YXkgb2YgbGlmZS4KClRoZXkgd2VyZToKCk5ldmVyIHRydXN0IGEgZG9nIHdpdGggb3JhbmdlIGV5ZWJyb3dzLAoKQWx3YXlzIGdldCB0aGUgeW91bmcgbWFuJ3MgbmFtZSBhbmQgYWRkcmVzcywKCk5ldmVyIGdldCBiZXR3ZWVuIHR3byBtaXJyb3JzLAoKQW5kIGFsd2F5cyB3ZWFyIGNvbXBsZXRlbHkgY2xlYW4gdW5kZXJ3ZWFyIGV2ZXJ5IGRheSBiZWNhdXNlIHlvdSBuZXZlciBrbmV3CndoZW4geW91IHdlcmUgZ29pbmcgdG8gYmUga25vY2tlZCBkb3duIGFuZCBraWxsZWQgYnkgYSBydW5hd2F5IGhvcnNlIGFuZCBpZgpwZW9wbGUgZm91bmQgeW91IGhhZCB1bnNhdGlzZmFjdG9yeSB1bmRlcndlYXIgb24sIHlvdSdkIGRpZSBvZiBzaGFtZS4KCkFuZCB0aGVuIERlc2lkZXJhdGEgZ3JldyB1cCB0byBiZWNvbWUgYSB3aXRjaC4gIEFuZCBvbmUgb2YgdGhlIG1pbm9yCmJlbmVmaXRzIG9mIGJlaW5nIGEgd2l0Y2ggaXMgdGhhdCB5b3Uga25vdyBleGFjdGx5IHdoZW4geW91J3JlIGdvaW5nIHRvIGRpZQphbmQgY2FuIHdlYXIgd2hhdCB1bmRlcndlYXIgeW91IGxpa2UuKDEpCgpUaGF0IGhhZCBiZWVuIGVpZ2h0eSB5ZWFycyBlYXJsaWVyLCB3aGVuIHRoZSBpZGVhIG9mIGtub3dpbmcgZXhhY3RseSB3aGVuCnlvdSB3ZXJlIGdvaW5nIHRvIGRpZSBoYWQgc2VlbWVkIHF1aXRlIGF0dHJhY3RpdmUgYmVjYXVzZSBzZWNyZXRseSwgb2YKY291cnNlLCB5b3Uga25ldyB5b3Ugd2VyZSBnb2luZyB0byBsaXZlIGZvcmV2ZXIuCgpUaGF0IHdhcyB0aGVuLgoKQW5kIHRoaXMgd2FzIG5vdy4KCkZvcmV2ZXIgZGlkbid0IHNlZW0gdG8gbGFzdCBhcyBsb25nIHRoZXNlIGRheXMgYXMgb25jZSBpdCBkaWQuCgooMSkgV2hpY2ggZXhwbGFpbnMgYSBsb3QgYWJvdXQgd2l0Y2hlcy4KCiAgW1dpdGNoZXMgQWJyb2FkLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiA2NCAocGFzc2FnZSBlbmRzIG1pZC1wYXJhZ3JhcGgpCiVwYXNzYWdlIDMKIllvdSBrbm93LCIgc2FpZCBOYW5ueSwgaW52ZXN0aWdhdGluZyB0aGUgcmVjZXNzZXMgb2YgdGhlIGJhc2tldCwgIndoZW5ldmVyCkkgZGVhbHMgd2l0aCBkd2FyZnMsIHRoZSBwaHJhc2UgJ0R1Y2sncyBhcnNlJyBzd2ltcyBhY3Jvc3MgbXkgbWluZC4iCgoiTWVhbiBsaXR0bGUgZGV2aWxzLiAgWW91IHNob3VsZCBzZWUgdGhlIHByaWNlcyB0aGV5IHRyaWVzIHRvIGNoYXJnZSBtZQp3aGVuIEkgdGFrZXMgbXkgYnJvb20gdG8gYmUgcmVwYWlyZWQsIiBzYWlkIEdyYW5ueS4KCiJZZXMsIGJ1dCB5b3UgbmV2ZXIgcGF5LCIgc2FpZCBNYWdyYXQuCgoiVGhhdCdzIG5vdCB0aGUgcG9pbnQsIiBzYWlkIEdyYW5ueSBXZWF0aGVyd2F4LiAgIlRoZXkgc2hvdWxkbid0IGJlIGFsbG93ZWQKdG8gY2hhcmdlIHRoYXQgc29ydCBvZiBtb25leS4gIFRoYXQncyB0aGlldmluJywgdGhhdCBpcy4iCgoiSSBkb24ndCBzZWUgaG93IGl0IGNhbiBiZSB0aGlldmluZyBpZiB5b3UgZG9uJ3QgcGF5IGFueXdheSwiIHNhaWQgTWFncmF0LgoKIkkgbmV2ZXIgcGF5IGZvciBhbnl0aGluZywiIHNhaWQgR3Jhbm55LiAgWy4uLl0KCiAgW1dpdGNoZXMgQWJyb2FkLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiA5MyAocGFzc2FnZSBpcyBhIGZvb3Rub3RlKQolcGFzc2FnZSA0Ck5hbm55IE9nZyBzZW50IGEgbnVtYmVyIG9mIGNhcmRzIGhvbWUgdG8gaGVyIGZhbWlseSwgbm90IGEgc2luZ2xlIG9uZSBvZgp3aGljaCBnb3QgYmFjayBiZWZvcmUgc2hlIGRpZC4gIFRoaXMgaXMgdHJhZGl0aW9uYWwsIGFuZCBoYXBwZW5zIGV2ZXJ5d2hlcmUKaW4gdGhlIHVuaXZlcnNlLgoKICBbV2l0Y2hlcyBBYnJvYWQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAxMTgtMTE5IChNYWdyYXQgaGFzIGJlZW4gdGVhY2hpbmcgaGVyc2VsZiBtYXJ0aWFsIGFydHMgdmlhIGJvb2tzKQolcGFzc2FnZSA1CiJMb2JzYW5nIERpYmJsZXIgc2F5cyBzb21ldGltZXMgeW91IGhhdmUgdG8gbG9zZSBpbiBvcmRlciB0byB3aW4sIiBzYWlkCk1hZ3JhdC4KCiJTb3VuZHMgZGFmdCB0byBtZSwiIHNhaWQgTmFubnkuICAiVGhhdCdzIFllbiBCdWRkaGlzbSwgaXMgaXQ/IgoKIk5vLiAgVGhleSdyZSB0aGUgb25lcyB3aG8gc2F5IHlvdSBoYXZlIHRvIGhhdmUgbG90cyBvZiBtb25leSB0byB3aW4sIiBzYWlkCk1hZ3JhdC4oMSkgICJJbiB0aGUgUGF0aCBvZiB0aGUgU2NvcnBpb24sIHRoZSB3YXkgdG8gd2luIGlzIHRvIGxvc2UgZXZlcnkKZmlnaHQgZXhjZXB0IHRoZSBsYXN0IG9uZS4gIFlvdSB1c2UgdGhlIGVuZW15J3Mgc3RyZW5ndGggYWdhaW5zdCBoaW1zZWxmLiIKCiJXaGF0LCB5b3UgZ2V0IGhpbSB0byBoaXQgaGltc2VsZiwgc29ydCBvZiB0aGluZz8iIHNhaWQgTmFubnkuICAiU291bmRzCmRhZnQuIgoKKDEpIFRoZSBZZW4gQnVkZGhpc3RzIGFyZSB0aGUgcmljaGVzdCByZWxpZ2lvdXMgc2VjdCBpbiB0aGUgdW5pdmVyc2UuICBUaGV5CmhvbGQgdGhhdCB0aGUgYWNjdW11bGF0aW9uIG9mIG1vbmV5IGlzIGEgZ3JlYXQgZXZpbCBhbmQgYnVyZGVuIHRvIHRoZSBzb3VsLgpUaGV5IHRoZXJlZm9yZSwgcmVnYXJkbGVzcyBvZiBwZXJzb25hbCBoYXphcmQsIHNlZSBpdCBhcyB0aGVpciB1bnBsZWFzYW50CmR1dHkgdG8gYWNxdWlyZSBhcyBtdWNoIGFzIHBvc3NpYmxlIHRvIHJlZHVjZSB0aGUgcmlzayB0byBpbm5vY2VudCBwZW9wbGUuCgogIFtXaXRjaGVzIEFicm9hZCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTMxCiVwYXNzYWdlIDYKVGhleSBoYWQgYnJlYWtmYXN0IGluIGEgZm9yZXN0IGNsZWFyaW5nLiAgSXQgd2FzIGdyaWxsZWQgcHVtcGtpbi4gIFRoZSBkd2FyZgpicmVhZCB3YXMgYnJvdWdodCBvdXQgZm9yIGluc3BlY3Rpb24uICBCdXQgaXQgd2FzIG1pcmFjdWxvdXMsIHRoZSBkd2FyZgpicmVhZC4gIE5vIG9uZSBldmVyIHdlbnQgaHVuZ3J5IHdoZW4gdGhleSBoYWQgc29tZSBkd2FyZiBicmVhZCB0byBhdm9pZC4KWW91IG9ubHkgaGFkIHRvIGxvb2sgYXQgaXQgZm9yIGEgbW9tZW50LCBhbmQgaW5zdGFudGx5IHlvdSBjb3VsZCB0aGluayBvZgpkb3plbnMgb2YgdGhpbmdzIHlvdSdkIHJhdGhlciBlYXQuICBZb3VyIGJvb3RzIGZvciBleGFtcGxlLiAgTW91bnRhaW5zLiAgUmF3CnNoZWVwLiAgWW91ciBvd24gZm9vdC4KCiAgW1dpdGNoZXMgQWJyb2FkLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMTk0LTE5NSAoImhlIGp1c3QiIGlzIGFjY3VyYXRlOyBjb2NrZXJlbCA9PSBhZG9sZXNjZW50IHJvb3N0ZXIpCiVwYXNzYWdlIDcKIlRoaXMgaXMgTGVnYmEsIGEgZGFyayBhbmQgZGFuZ2Vyb3VzIHNwaXJpdCwiIHNhaWQgTXJzLiBHb2dvbC4gIFNoZSBsZWFuZWQKY2xvc2VyIGFuZCBzcG9rZSBvdXQgb2YgdGhlIGNvcm5lciBvZiBoZXIgbW91dGguICAiQmV0d2VlbiB5b3UgYW5kIG1lLCBoZQpqdXN0IGEgYmlnIGJsYWNrIGNvY2tlcmVsLiAgQnV0IHlvdSBrbm93IGhvdyBpdCBpcy4iCgoiSXQgcGF5cyB0byBhZHZlcnRpc2UsIiBOYW5ueSBhZ3JlZWQuICAiVGhpcyBpcyBHcmVlYm8uICBCZXR3ZWVuIHlvdSBhbmQgbWUsCmhlJ3MgYSBmaWVuZCBmcm9tIGhlbGwuIgoKIldlbGwsIGhlJ3MgYSBjYXQsIiBzYWlkIE1ycy4gR29nb2wsIGdlbmVyb3VzbHkuICAiSXQncyBvbmx5IHRvIGJlIGV4cGVjdGVkLiIKCiAgW1dpdGNoZXMgQWJyb2FkLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyMTgKJXBhc3NhZ2UgOAoiL0FuZC8gc3RpbGwgYSBiaXQgb2YgdGhlIHdlZGRpbmcgY2FrZSwiIHNhaWQgdGhlIGZpcnN0IGNvYWNobWFuLiAgIkFpbid0CnlvdSBldCB0aGF0IHVwIHlldD8iCgoiV2UgaGF2ZSBpdCBldmVyeSBuaWdodCwiIHNhaWQgdGhlIHVuZGVyY29hY2htYW4uCgpUaGUgc2hlZCBzaG9vayB3aXRoIHRoZSBlbnN1aW5nIGxhdWdodGVyLiAgSXQgaXMgYSB1bml2ZXJzYWwgZmFjdCB0aGF0IGFueQppbm5vY2VudCBjb21tZW50IG1hZGUgYnkgYW55IHJlY2VudGx5IG1hcnJpZWQgeW91bmcgbWVtYmVyIG9mIGFueSB3b3JrZm9yY2UKaXMgYW4gaW5zdGFudCB0cmlnZ2VyIGZvciBjb2Fyc2UgbWVycmltZW50IGFtb25nIGhpcyBvciBoZXIgb2xkZXIgYW5kIG1vcmUKY3luaWNhbCBjb2xsZWFndWVzLiAgVGhpcyBoYXBwZW5zIGV2ZW4gaWYgZXZlcnlvbmUgY29uY2VybmVkIGhhcyBuaW5lIGxlZ3MKYW5kIGxpdmVzIGF0IHRoZSBib3R0b20gb2YgYW4gb2NlYW4gb2YgYW1tb25pYSBvbiBhIGh1Z2UgY29sZCBwbGFuZXQuICBJdCdzCmp1c3Qgb25lIG9mIHRob3NlIHRoaW5ncy4KCiAgW1dpdGNoZXMgQWJyb2FkLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyMjgKJXBhc3NhZ2UgOQoiWW91IG91Z2h0IHRvIGJlIG1vcmUgYWR2ZW50dXJvdXMsIEdyYW5ueSwiIHNhaWQgTWFncmF0LgoKIkkgYWluJ3QgYWdhaW5zdCBhZHZlbnR1cmUsIGluIG1vZGVyYXRpb24sIiBzYWlkIEdyYW5ueSwgImJ1dCBub3Qgd2hlbiBJJ20KZWF0aW4nLiIKCiAgW1dpdGNoZXMgQWJyb2FkLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMjYzLTI2NCAoTmFubnkgaXMgdHJ5aW5nIHRvIHN0b3AgYW4gZWxhYm9yYXRlIGNsb2NrOyBkZXNwaXRlIGRhbWFnZQojICAgICAgICAgICAgICBpbmZsaWN0ZWQgb24gaXQsIGl0IGdvZXMgb24gdG8gYW5ub3VuY2UgbWlkbmlnaHQgW2Vhcmx5XSkKJXBhc3NhZ2UgMTAKTGV0J3Mgc2VlIHRob3VnaHQgTmFubnkuICBUaGlzIGJpdCBpcyBjb25uZWN0ZWQgdG8gdGhhdCBiaXQsIHRoaXMgb25lIHR1cm5zLAp0aGF0IG9uZSB0dXJucyAvZmFzdGVyLywgdGhpcyBzcGlreSBiaXQgd29iYmxlcyBiYWNrd2FyZHMgYW5kIGZvcndhcmRzLi4uCgpPaCwgd2VsbC4gIEp1c3QgdHdpc3QgdGhlIGZpcnN0IHRoaW5nIHlvdSBjYW4gZ3JhYiwgYXMgdGhlIEhpZ2ggUHJpZXN0IHNhaWQKdG8gdGhlIHZlc3RhbCB2aXJnaW4uKDEpCgpOYW5ueSBPZ2cgc3BhdCBvbiBoZXIgaGFuZHMsIGdyaXBwZWQgdGhlIGxhcmdlc3QgY29nLXdoZWVsLCBhbmQgdHdpc3RlZC4KCkl0IGNhcnJpZWQgb24gdHVybmluZywgcHVsbGluZyBoZXIgd2l0aCBpdC4KCkJsaW1leS4gIE9oLCB3ZWxsLi4uCgpUaGVuIHNoZSBkaWQgd2hhdCBuZWl0aGVyIEdyYW5ueSBXZWF0aGVyd2F4IG5vciBNYWdyYXQgd291bGQgaGF2ZSBkcmVhbWVkCm9mIGRvaW5nIGluIHRoZSBjaXJjdW1zdGFuY2VzLiAgQnV0IE5hbm55IE9nZydzIHZveWFnZXMgb24gdGhlIHNlYSBvZgppbnRlcnNleHVhbCBkYWxsaWFuY2UgaGFkIGdvbmUgcmF0aGVyIGZ1cnRoZXIgdGhhbiB0d2ljZSBhcm91bmQgdGhlCmxpZ2h0aG91c2UsIGFuZCBzaGUgc2F3IG5vdGhpbmcgZGVtZWFuaW5nIGluIGdldHRpbmcgYSBtYW4gdG8gaGVscCBoZXIuCgpTaGUgc2ltcGVyZWQgYXQgQ2FzYW51bmRhLgoKIlRoaW5ncyB3b3VsZCBiZSBhIGxvdCBtb3JlIGNvbWZvcnRhYmxlIGluIG91ciBsaXR0bGUgL3BpZS1kZS10ZXJyZS8gaWYgeW91CmNvdWxkIGp1c3QgcHVzaCB0aGlzIGxpdHRsZSB3aGVlbCBhcm91bmQgYSBiaXQsIiBzaGUgc2FpZC4gICJJJ20gc3VyZSAveW91Lwpjb3VsZCBtYW5hZ2UgaXQsIiBzaGUgYWRkZWQuCgoiT2gsIG5vIHByb2JsZW0sIGdvb2QgbGFkeSwiIHNhaWQgQ2FzYW51bmRhLiAgSGUgcmVhY2hlZCB1cCB3aXRoIG9uZSBoYW5kLgpEd2FyZnMgYXJlIGltbWVuc2VseSBzdHJvbmcgZm9yIHRoZWlyIHNpemUuICBUaGUgd2hlZWwgc2VlbWVkIHRvIG9mZmVyIGhpbQpubyByZXNpc3RhbmNlIGF0IGFsbC4KClNvbWV3aGVyZSBpbiB0aGUgbWVjaGFuaXNtIHNvbWV0aGluZyByZXNpc3RlZCBmb3IgYSBtb21lbnQgYW5kIHRoZW4gd2VudAovY2xvbmsvLiAgQmlnIHdoZWVscyB0dXJuZWQgcmVsdWN0YW50bHkuICBMaXR0bGUgd2hlZWxzIHNjcmVhbWVkIG9uIHRoZWlyCmF4bGVzLiAgQSBzbWFsbCBpbXBvcnRhbnQgcGllY2UgZmxldyBvdXQgYW5kIHBpbmdlZCBvZmYgb2YgQ2FzYW51bmRhJ3MKc21hbGwgYnVsbGV0IGhlYWQuCgpBbmQsIG11Y2ggZmFzdGVyIHRoYW4gbmF0dXJlIGhhZCBldmVyIGludGVuZGVkLCB0aGUgaGFuZHMgc3BlZCBhcm91bmQgdGhlCmZhY2UuCgooMSkgVGhpcyBpcyB0aGUgbGFzdCBsaW5lIHRvIGEgRGlzY3dvcmxkIGpva2UgbG9zdCwgYWxhcywgdG8gcG9zdGVyaXR5LgoKICBbV2l0Y2hlcyBBYnJvYWQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDI2NSAoJ3BhdGUnIGhhcyBhIGNvdXBsZSBvZiBhY2NlbnQgbWFya3Mgd2hpY2ggY2FuJ3QgYmUgcmVuZGVyZWQgaW4gYXNjaWkpCiVwYXNzYWdlIDExClRoZXJlIGFyZSB2YXJpb3VzIGZvcm1zIG9mIHZvb2RvbyBpbiB0aGUgbXVsdGl2ZXJzZSwgYmVjYXVzZSBpdCdzIGEKcmVsaWdpb24gdGhhdCBjYW4gYmUgcHV0IHRvZ2V0aGVyIGZyb20gYW55IGluZ3JlZGllbnRzIHRoYXQgaGFwcGVuIHRvIGJlCmx5aW5nIGFyb3VuZC4gIEFuZCBhbGwgb2YgdGhlbSB0cnksIGluIHNvbWUgd2F5LCB0byBjYWxsIGEgZ29kIGludG8gdGhlIGJvZHkKb2YgYSBodW1hbiBiZWluZy4KClRoYXQgd2FzIHN0dXBpZCwgTXJzLiBHb2dvbCB0aG91Z2h0LiAgVGhhdCB3YXMgZGFuZ2Vyb3VzLgoKTXJzLiBHb2dvbCdzIHZvb2RvbyB3b3JrZWQgdGhlIG90aGVyIHdheSBhYm91dC4gIFdoYXQgd2FzIGEgZ29kPyAgQSBmb2N1cyBvZgpiZWxpZWYuICBJZiBwZW9wbGUgYmVsaWV2ZWQsIGEgZ29kIGJlZ2FuIHRvIGdyb3cuICBGZWVibHkgYXQgZmlyc3QsIGJ1dCBpZgp0aGUgc3dhbXAgdGF1Z2h0IGFueXRoaW5nLCBpdCB0YXVnaHQgcGF0aWVuY2UuICBBbnl0aGluZyBjb3VsZCBiZSB0aGUgZm9jdXMKb2YgYSBnb2QuICBBIGhhbmRmdWwgb2YgZmVhdGhlcnMgd2l0aCBhIHJlZCByaWJib24gYXJvdW5kIHRoZW0sIGEgaGF0IGFuZApjb2F0IG9uIGEgY291cGxlIG9mIHN0aWNrcy4uLiBhbnl0aGluZy4gIEJlY2F1c2Ugd2hlbiBhbGwgcGVvcGxlIGhhZCB3YXMKcHJhY3RpY2FsbHkgbm90aGluZywgdGhlbiBhbnl0aGluZyBjb3VsZCBiZSBhbG1vc3QgZXZlcnl0aGluZy4gIEFuZCB0aGVuIHlvdQpmZWQgaXQsIGFuZCBsdWxsZWQgaXQsIGxpa2UgYSBnb29zZSBoZWFkaW5nIGZvciBwYXRlLCBhbmQgbGV0IHRoZSBwb3dlciBncm93CnZlcnkgc2xvd2x5LCBhbmQgd2hlbiB0aGUgdGltZSB3YXMgcmlwZSB5b3Ugb3BlbmVkIHRoZSBwYXRoLi4uIGJhY2t3YXJkcy4KQSBodW1hbiBjb3VsZCByaWRlIHRoZSBnb2QsIHJhdGhlciB0aGFuIHRoZSBvdGhlciB3YXkgYXJvdW5kLiAgVGhlcmUgd291bGQKYmUgYSBwcmljZSB0byBwYXkgbGF0ZXIsIGJ1dCB0aGVyZSBhbHdheXMgd2FzLiAgSW4gTXJzLiBHb2dvbCdzIGV4cGVyaWVuY2UsCmV2ZXJ5b25lIGVuZGVkIHVwIGR5aW5nLgoKICBbV2l0Y2hlcyBBYnJvYWQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDI3MCAoR3JlZWJvIGhhcyBiZWVuIHRlbXBvcmFyaWx5IHRyYW5zZm9ybWVkLS1wb2x5bW9ycGhlZD8tLWludG8gYSBodW1hbikKJXBhc3NhZ2UgMTIKR3JlZWJvIHdhc24ndCBhIGhhcHB5IGNhdC4gIFsuLi5dCgpUaGVuIGhlJ2Qgc21lbGxlZCB0aGUga2l0Y2hlbi4gIENhdHMgZ3Jhdml0YXRlIHRvIGtpdGNoZW5zIGxpa2Ugcm9ja3MKZ3Jhdml0YXRlIHRvIGdyYXZpdHkuCgogIFtXaXRjaGVzIEFicm9hZCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjgyIChDYXNhbnVuZGEgdGhlIGR3YXJmIGlzIERpc2N3b3JsZCdzIENhc2Fub3ZhOyBoZSBhcHBlYXJzIGFnYWluIGluCiMgICAgICAgICAvTG9yZHMgYW5kIExhZGllcy8pCiVwYXNzYWdlIDEzCiJIb3cgY29tZSB5b3UncmUgaW4gdGhlIHBhbGFjZSBndWFyZCwgQ2FzYW51bmRhPyIKCiJTb2xkaWVyIG9mIGZvcnR1bmUgdGFrZXMgd2hhdGV2ZXIgam9icyBhcmUgZ29pbmcsIE1ycy4gT2dnLCIgc2FpZCBDYXNhbnVuZGEKZWFybmVzdGx5LgoKIkJ1dCBhbGwgdGhlIHJlc3Qgb2YgJ2VtIGFyZSBzaXggZm9vdCB0YWxsIGFuZCB5b3UncmUtLW9mIHRoZSBzaG9ydGVyCnBlcnN1YXNpb24uIgoKIkkgbGllZCBhYm91dCBteSBoZWlnaHQsIE1ycy4gT2dnLiAgSSdtIGEgd29ybGQtZmFtb3VzIGxpYXIuIgoKIklzIHRoYXQgdHJ1ZT8iCgoiTm8uIgoKIldoYXQgYWJvdXQgeW91IGJlaW5nIHRoZSB3b3JsZCdzIGdyZWF0ZXN0IGxvdmVyPyIKClRoZXJlIHdhcyBzaWxlbmNlIGZvciBhIHdoaWxlLgoKIldlbGwsIG1heWJlIEknbSBvbmx5IE5vLiAyLCIgc2FpZCBDYXNhbnVuZGEuICAiQnV0IEkgdHJ5IGhhcmRlci4iCgogIFtXaXRjaGVzIEFicm9hZCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDI4NS0yODYgKEdyZWVibyBpcyBzdGlsbCBpbiBodW1hbiBmb3JtOyAncmF0aW9uYWxpc2UnIGlzIGFjY3VyYXRlKQolcGFzc2FnZSAxNApHcmVlYm8gbGVhcHQuCgpDYXRzIGFyZSBsaWtlIHdpdGNoZXMuICBUaGV5IGRvbid0IGZpZ2h0IHRvIGtpbGwsIGJ1dCB0byB3aW4uICBUaGVyZSBpcyBhCmRpZmZlcmVuY2UuICBUaGVyZSdzIG5vIHBvaW50IGluIGtpbGxpbmcgYW4gb3Bwb25lbnQuICBUaGF0IHdheSwgdGhleSB3b24ndAprbm93IHRoZXkndmUgbG9zdCwgYW5kIHRvIGJlIGEgcmVhbCB3aW5uZXIgeW91IGhhdmUgdG8gaGF2ZSBhbiBvcHBvbmVudCB3aG8KaXMgYmVhdGVuIGFuZCBrbm93cyBpdC4gIFRoZXJlJ3Mgbm8gdHJpdW1waCBvdmVyIGEgY29ycHNlLCBidXQgYSBiZWF0ZW4Kb3Bwb25lbnQsIHdobyB3aWxsIHJlbWFpbiBiZWF0ZW4gZXZlcnkgZGF5IGZvciB0aGUgcmVtYWluZGVyIG9mIHRoZWlyIHNhZAphbmQgd3JldGNoZWQgbGlmZSwgaXMgc29tZXRoaW5nIHRvIHRyZWFzdXJlLgoKQ2F0cyBkbyBub3QsIG9mIGNvdXJzZSwgcmF0aW9uYWxpc2UgdGhpcyBmYXIuICBUaGV5IGp1c3QgbGlrZSB0byBzZW5kCnNvbWVvbmUgbGltcGluZyBvZmYgbWludXMgYSB0YWlsIGFuZCBhIGZldyBzcXVhcmUgaW5jaGVzIG9mIGZ1ci4KCkdyZWVibydzIHRlY2huaXF1ZSB3YXMgdW5zY2llbnRpZmljIGFuZCB3b3VsZG4ndCBoYXZlIHN0b29kIGEgY2hhbmNlIGFnYWluc3QKYW55IGRlY2VudCBzd29yZHNtYW5zaGlwLCBidXQgb24gaGlzIHNpZGUgd2FzIHRoZSBmYWN0IHRoYXQgaXQgaXMgYWxtb3N0CmltcG9zc2libGUgdG8gZGV2ZWxvcCBkZWNlbnQgc3dvcmRzbWFuc2hpcCB3aGVuIHlvdSBzZWVtIHRvIGhhdmUgcnVuIGludG8gYQpmb29kIG1peGVyIHRoYXQgaXMgYml0aW5nIHlvdXIgZWFyIG9mZi4KClRoZSB3aXRjaGVzIHdhdGNoZWQgd2l0aCBpbnRlcmVzdC4KCiJJIHRoaW5rIHdlIGNhbiBsZWF2ZSBoaW0gbm93LCIgc2FpZCBOYW5ueS4gICJJIHRoaW5rIGhlJ3MgaGF2aW5nIGZ1bi4iCgogIFtXaXRjaGVzIEFicm9hZCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiVlIHRpdGxlCiMKIwojCiV0aXRsZSBTbWFsbCBHb2RzICgxMikKJXBhc3NhZ2UgMQpIZSBzYXlzIGdvZHMgbGlrZSB0byBzZWUgYW4gYXRoZWlzdCBhcm91bmQuICBHaXZlcyB0aGVtIHNvbWV0aGluZyB0byBhaW0gYXQuCgogIFtTbWFsbCBHb2RzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKJXBhc3NhZ2UgMgpQZXRzIGFyZSBhbHdheXMgYSBncmVhdCBoZWxwIGluIHRpbWVzIG9mIHN0cmVzcy4gIEFuZCBpbiB0aW1lcyBvZiBzdGFydmF0aW9uCnRvbywgbydjb3Vyc2UuCgogIFtTbWFsbCBHb2RzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAzIChIYXJwZXIgVG9yY2ggZWRpdGlvbikKJXBhc3NhZ2UgMwpTbyBoaXN0b3J5IGhhcyBpdHMgY2FyZXRha2Vycy4KClRoZXkgbGl2ZSAuLi4gd2VsbCwgaW4gdGhlIG5hdHVyZSBvZiB0aGluZ3MgdGhleSBsaXZlIHdoZXJldmVyIHRoZXkgYXJlCnNlbnQsIGJ1dCB0aGVpciAvc3Bpcml0dWFsLyBob21lIGlzIGluIGEgaGlkZGVuIHZhbGxleSBpbiB0aGUgaGlnaCBSYW10b3BzCm9mIHRoZSBEaXNjd29ybGQsIHdoZXJlIHRoZSBib29rcyBvZiBoaXN0b3J5IGFyZSBrZXB0LgoKVGhlc2UgYXJlbid0IGJvb2tzIGluIHdoaWNoIHRoZSBldmVudHMgb2YgdGhlIHBhc3QgYXJlIHBpbm5lZCBsaWtlIHNvIG1hbnkKYnV0dGVyZmxpZXMgdG8gYSBjb3JrLiAgVGhlc2UgYXJlIHRoZSBib29rcyBmcm9tIHdoaWNoIGhpc3RvcnkgaXMgZGVyaXZlZC4KVGhlcmUgYXJlIG1vcmUgdGhhbiB0d2VudHkgdGhvdXNhbmQgb2YgdGhlbSwgZWFjaCBvbmUgaXMgdGVuIGZlZXQgaGlnaCwKYm91bmQgaW4gbGVhZCwgYW5kIHRoZSBsZXR0ZXJzIGFyZSBzbyBzbWFsbCB0aGF0IHRoZXkgaGF2ZSB0byBiZSByZWFkIHdpdGgKYSBtYWduaWZ5aW5nIGdsYXNzLgoKV2hlbiBwZW9wbGUgc2F5ICJJdCBpcyB3cml0dGVuIC4uLiIgaXQgaXMgd3JpdHRlbiAvaGVyZS8uCgpUaGVyZSBhcmUgZmV3ZXIgbWV0YXBob3JzIHRoYW4gcGVvcGxlIHRoaW5rLgoKRXZlcnkgbW9udGggdGhlIGFiYm90IGFuZCB0d28gc2VuaW9yIG1vbmtzIGdvIGludG8gdGhlIGNhdmUgd2hlcmUgdGhlCmJvb2tzIGFyZSBrZXB0LiAgSXQgdXNlZCB0byBiZSB0aGUgZHV0eSBvZiB0aGUgYWJib3QgYWxvbmUsIGJ1dCB0d28gb3RoZXIKcmVsaWFibGUgbW9ua3Mgd2VyZSBpbmNsdWRlZCBhZnRlciB0aGUgdW5mb3J0dW5hdGUgY2FzZSBvZiB0aGUgNTl0aCBBYmJvdCwKd2hvIG1hZGUgYSBtaWxsaW9uIGRvbGxhcnMgaW4gc21hbGwgYmV0cyBiZWZvcmUgaGlzIGZlbGxvdyBtb25rcyBjYXVnaHQgdXAKd2l0aCBoaW0uCgpCZXNpZGVzLCBpdCdzIGRhbmdlcm91cyB0byBnbyBpbiBhbG9uZS4gIFRoZSBzaGVlciBjb25jZW50cmF0ZWRuZXNzIG9mCkhpc3RvcnksIHNsZWV0aW5nIHBhc3Qgc291bmRsZXNzbHkgb3V0IGludG8gdGhlIHdvcmxkLCBjYW4gYmUgb3ZlcndoZWxtaW5nLgpUaW1lIGlzIGEgZHJ1Zy4gIFRvbyBtdWNoIG9mIGl0IGtpbGxzIHlvdS4KCiAgW1NtYWxsIEdvZHMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiA0LTUKJXBhc3NhZ2UgNApJdCB3YXMgdGhlIFllYXIgb2YgdGhlIE5vdGlvbmFsIFNlcnBlbnQsIG9yIHR3byBodW5kcmVkIHllYXJzIGFmdGVyIHRoZQpEZWNsYXJhdGlvbiBvZiB0aGUgUHJvcGhldCBBYmJ5cy4KCldoaWNoIG1lYW50IHRoYXQgdGhlIHRpbWUgb2YgdGhlIDh0aCBQcm9waGV0IHdhcyBpbW1pbmVudC4KClRoYXQgd2FzIHRoZSByZWxpYWJsZSB0aGluZyBhYm91dCB0aGUgQ2h1cmNoIG9mIHRoZSBHcmVhdCBHb2QgT20uICBJdCBoYWQKdmVyeSBwdW5jdHVhbCBwcm9waGV0cy4gIFlvdSBjb3VsZCBzZXQgeW91ciBjYWxlbmRhciBieSB0aGVtLCBpZiB5b3UgaGFkCm9uZSBiaWcgZW5vdWdoLgoKQW5kLCBhcyBpcyBnZW5lcmFsbHkgdGhlIGNhc2UgYXJvdW5kIHRoZSB0aW1lIGEgcHJvcGhldCBpcyBleHBlY3RlZCwgdGhlCkNodXJjaCByZWRvdWJsZWQgaXRzIGVmZm9ydHMgdG8gYmUgaG9seS4gIFRoaXMgd2FzIHZlcnkgbXVjaCBsaWtlIHRoZQpidXN0bGUgeW91IGdldCBpbiBhbnkgbGFyZ2UgY29uY2VybiB3aGVuIHRoZSBhdWRpdG9ycyBhcmUgZXhwZWN0ZWQsIGJ1dAp0ZW5kZWQgdG93YXJkcyB0YWtpbmcgcGVvcGxlIHN1c3BlY3RlZCBvZiBiZWluZyBsZXNzIGhvbHkgYW5kIHB1dHRpbmcgdGhlbQp0byBkZWF0aCBpbiBhIGh1bmRyZWQgaW5nZW5pb3VzIHdheXMuICBUaGlzIGlzIGNvbnNpZGVyZWQgYSByZWxpYWJsZQpiYXJvbWV0ZXIgb2YgdGhlIHN0YXRlIG9mIG9uZSdzIHBpZXR5IGluIG1vc3Qgb2YgdGhlIHJlYWxseSBwb3B1bGFyCnJlbGlnaW9ucy4gIFRoZXJlJ3MgYSB0ZW5kZW5jeSB0byBkZWNsYXJlIHRoYXQgdGhlcmUgaXMgbW9yZSBiYWNrc2xpZGluZwphcm91bmQgdGhhbiBpbiB0aGUgbmF0aW9uYWwgdG9ib2dnYW4gY2hhbXBpb25zaGlwcywgdGhhdCBoZXJlc3kgbXVzdCBiZQp0b3JuIG91dCByb290IGFuZCBicmFuY2gsIGFuZCBldmVuIGFybSBhbmQgbGVnIGFuZCBleWUgYW5kIHRvbmd1ZSwgYW5kCnRoYXQgaXQncyB0aW1lIHRvIHdpcGUgdGhlIHNsYXRlIGNsZWFuLiAgQmxvb2QgaXMgZ2VuZXJhbGx5IGNvbnNpZGVyZWQKdmVyeSBlZmZpY2llbnQgZm9yIHRoaXMgcHVycG9zZS4KCiAgW1NtYWxsIEdvZHMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDYwICgiaGUiIGlzIGEgdG9ydG9pc2UsIHVubm90aWNlZCBhbW9uZyBhIGxhcmdlIGNyb3dkIG9mIHBlb3BsZSkKJXBhc3NhZ2UgNQpIZSB3YWxrZWQgb2ZmIHNsb3dseSwga2VlcGluZyBjbG9zZSB0byB0aGUgd2FsbCB0byBhdm9pZCB0aGUgZmVldC4gIEhlIGhhZApubyBhbHRlcm5hdGl2ZSB0byB3YWxraW5nIHNsb3dseSBpbiBhbnkgY2FzZSwgYnV0IG5vdyBoZSB3YXMgd2Fsa2luZyBzbG93bHkKYmVjYXVzZSBoZSB3YXMgdGhpbmtpbmcuICBNb3N0IGdvZHMgZmluZCBpdCBoYXJkIHRvIHdhbGsgYW5kIHRoaW5rIGF0IHRoZQpzYW1lIHRpbWUuCgogIFtTbWFsbCBHb2RzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiA2MCAoc2FtZSBwYWdlIGFzIHByZWNlZGluZyBwYXNzYWdlKQolcGFzc2FnZSA2ClRoZXJlIHdlcmUgYWxsIHNvcnRzIG9mIHdheXMgdG8gcGV0aXRpb24gdGhlIEdyZWF0IEdvZCwgYnV0IHRoZXkgZGVwZW5kZWQKbGFyZ2VseSBvbiBob3cgbXVjaCB5b3UgY291bGQgYWZmb3JkLCB3aGljaCB3YXMgcmlnaHQgYW5kIHByb3BlciBhbmQKZXhhY3RseSBob3cgdGhpbmdzIHNob3VsZCBiZS4gIEFmdGVyIGFsbCwgdGhvc2Ugd2hvIGhhZCBhY2hpZXZlZCBzdWNjZXNzCmluIHRoZSB3b3JsZCBjbGVhcmx5IGhhZCBkb25lIGl0IHdpdGggdGhlIGFwcHJvdmFsIG9mIHRoZSBHcmVhdCBHb2QsCmJlY2F1c2UgaXQgd2FzIGltcG9zc2libGUgdG8gYmVsaWV2ZSB0aGF0IHRoZXkgaGFkIG1hbmFnZWQgaXQgd2l0aCBIaXMKL2Rpc2FwcHJvdmFsLy4gIEluIHRoZSBzYW1lIHdheSwgdGhlIFF1aXNpdGlvbiBjb3VsZCBhY3Qgd2l0aG91dApwb3NzaWJpbGl0eSBvZiBmbGF3LiAgU3VzcGljaW9uIHdhcyBwcm9vZi4gIEhvdyBjb3VsZCBpdCBiZSBhbnl0aGluZyBlbHNlPwpUaGUgR3JlYXQgR29kIHdvdWxkIG5vdCBoYXZlIHNlZW4gZml0IHRvIHB1dCB0aGUgc3VzcGljaW9uIGluIHRoZSBtaW5kcwpvZiBIaXMgZXhxdWlzaXRvcnMgdW5sZXNzIGl0IHdhcyAvcmlnaHQvIHRoYXQgaXQgc2hvdWxkIGJlIHRoZXJlLiAgTGlmZQpjb3VsZCBiZSB2ZXJ5IHNpbXBsZSwgaWYgeW91IGJlbGlldmVkIGluIHRoZSBHcmVhdCBHb2QgT20uICBBbmQgc29tZXRpbWVzCnF1aXRlIHNob3J0LCB0b28uCgogIFtTbWFsbCBHb2RzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiA5MiAoW3NpY10gZmlyc3QgcGFyYWdyYXBoIG91Z2h0IHRvIGhhdmUgZm91cnRoICcuJyB0byBlbmQgc2VudGVuY2UpCiVwYXNzYWdlIDcKVGhlIG1lbW9yeSBzdG9sZSBvdmVyIGhpbTogIGEgZGVzZXJ0IGlzIHdoYXQgeW91IHRoaW5rIGl0IGlzLiAgQW5kIG5vdywKeW91IGNhbiB0aGluayBjbGVhcmx5IC4uLgoKVGhlcmUgd2VyZSBubyBsaWVzIGhlcmUuICBBbGwgZmFuY2llcyBmbGVkIGF3YXkuICBUaGF0J3Mgd2hhdCBoYXBwZW5lZCBpbgphbGwgZGVzZXJ0cy4gIEl0IHdhcyBqdXN0IHlvdSwgYW5kIHdoYXQgeW91IGJlbGlldmVkLgoKV2hhdCBoYXZlIEkgYWx3YXlzIGJlbGlldmVkPwoKVGhhdCBvbiB0aGUgd2hvbGUsIGFuZCBieSBhbmQgbGFyZ2UsIGlmIGEgbWFuIGxpdmVkIHByb3Blcmx5LCBub3QKYWNjb3JkaW5nIHRvIHdoYXQgYW55IHByaWVzdHMgc2FpZCwgYnV0IGFjY29yZGluZyB0byB3aGF0IHNlZW1lZCBkZWNlbnQKYW5kIGhvbmVzdCAvaW5zaWRlLywgdGhlbiBpdCB3b3VsZCwgaW4gdGhlIGVuZCwgbW9yZSBvciBsZXNzLCB0dXJuIG91dAphbGwgcmlnaHQuCgpZb3UgY291bGRuJ3QgZ2V0IHRoYXQgb24gYSBiYW5uZXIuICBCdXQgdGhlIGRlc2VydCBsb29rZWQgYmV0dGVyIGFscmVhZHkuCgogIFtTbWFsbCBHb2RzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxMTQKJXBhc3NhZ2UgOApWb3JiaXMgaGFkIGEgY2FiaW4gc29tZXdoZXJlIG5lYXIgdGhlIGJpbGdlcywgd2hlcmUgdGhlIGFpciB3YXMgYXMgdGhpY2sKYXMgdGhpbiBzb3VwLiAgQnJ1dGhhIGtub2NrZWQuCgoiRW50ZXIuIigxKQoKKDEpIFdvcmRzIGFyZSB0aGUgbGl0bXVzIHBhcGVyIG9mIHRoZSBtaW5kLiAgSWYgeW91IGZpbmQgeW91cnNlbGYgaW4gdGhlCnBvd2VyIG9mIHNvbWVvbmUgd2hvIHdpbGwgdXNlIHRoZSB3b3JkICJjb21tZW5jZSIgaW4gY29sZCBibG9vZCwgZ28Kc29tZXdoZXJlIGVsc2UgdmVyeSBxdWlja2x5LiAgQnV0IGlmIHRoZXkgc2F5ICJFbnRlciwiIGRvbid0IHN0b3AgdG8gcGFjay4KCiAgW1NtYWxsIEdvZHMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDE0MSAoYXQgdGhlIGVuZCwgWGVubyBpcyBhbG1vc3QgY2VydGFpbmx5IGFncmVlaW5nIHdpdGggSWJpZCwgYnV0CiMgICAgICAgICBoZSAvbWlnaHQvIGJlIGFuc3dlcmluZyBCcnV0aGEncyBsYXN0IHF1ZXN0aW9uKQolcGFzc2FnZSA5CiJBcmUgeW91IGFsbCBwaGlsb3NvcGhlcnM/IiBzYWlkIEJydXRoYS4KClRoZSBvbmUgY2FsbGVkIFhlbm8gc3RlcHBlZCBmb3J3YXJkLCBhZGp1c3RpbmcgdGhlIGhhbmcgb2YgaGlzIHRvZ2EuCgoiVGhhdCdzIHJpZ2h0LCIgaGUgc2FpZC4gICJXZSdyZSBwaGlsb3NvcGhlcnMuICBXZSB0aGluaywgdGhlcmVmb3JlIHdlIGFtLiIKCiJBcmUsIiBzYWlkIHRoZSBsdWNrbGVzcyBwYXJhZG94IG1hbnVmYWN0dXJlciBhdXRvbWF0aWNhbGx5LgoKWGVubyBzcHVuIGFyb3VuZC4gICJJJ3ZlIGp1c3QgYWJvdXQgaGFkIGl0IHVwIHRvIC9oZXJlLyB3aXRoIHlvdSwgSWJpZCEiIGhlCnJvYXJlZC4gIEhlIHR1cm5lZCBiYWNrIHRvIEJydXRoYS4gICJXZSAvYXJlLywgdGhlcmVmb3JlIHdlIGFtLCIgaGUgc2FpZApjb25maWRlbnRseS4gICJUaGF0J3MgaXQuIgoKU2V2ZXJhbCBvZiB0aGUgcGhpbG9zb3BoZXJzIGxvb2tlZCBhdCBvbmUgYW5vdGhlciB3aXRoIGludGVyZXN0LgoKIlRoYXQncyBhY3R1YWxseSBxdWl0ZSBpbnRlcmVzdGluZywiIG9uZSBzYWlkLiAgIlRoZSBldmlkZW5jZSBvZiBvdXIKZXhpc3RlbmNlIGlzIHRoZSAvZmFjdC8gb2Ygb3VyIGV4aXN0ZW5jZSwgaXMgdGhhdCB3aGF0IHlvdSdyZSBzYXlpbmc/IgoKIlNodXQgdXAsIiBzYWlkIFhlbm8sIHdpdGhvdXQgbG9va2luZyBhcm91bmQuCgoiSGF2ZSB5b3UgYmVlbiBmaWdodGluZz8iIHNhaWQgQnJ1dGhhLgoKVGhlIGFzc2VtYmxlZCBwaGlsb3NvcGhlcnMgYXNzdW1lZCB2YXJpb3VzIGV4cHJlc3Npb25zIG9mIHNob2NrIGFuZCBob3Jyb3IuCgoiRmlnaHRpbmc/ICBVcz8gIFdlJ3JlIC9waGlsb3NvcGhlcnMvLCIgc2FpZCBJYmlkLCBzaG9ja2VkLgoKIk15IHdvcmQsIHllcywiIHNhaWQgWGVuby4KCiAgW1NtYWxsIEdvZHMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDE1MQolcGFzc2FnZSAxMApBbGwgb3ZlciB0aGUgd29ybGQgdGhlcmUgd2VyZSBydWxlcnMgd2l0aCB0aXRsZXMgbGlrZSB0aGUgRXhhbHRlZCwgdGhlClN1cHJlbWUsIGFuZCBMb3JkIEhpZ2ggU29tZXRoaW5nIG9yIE90aGVyLiAgT25seSBpbiBvbmUgc21hbGwgY291bnRyeSB3YXMKdGhlIHJ1bGVyIGVsZWN0ZWQgYnkgdGhlIHBlb3BsZSwgd2hvIGNvdWxkIHJlbW92ZSBoaW0gd2hlbmV2ZXIgdGhleQp3YW50ZWQtLWFuZCB0aGV5IGNhbGxlZCBoaW0gdGhlIFR5cmFudC4KClRoZSBFcGhlYmlhbnMgYmVsaWV2ZWQgdGhhdCBldmVyeSBtYW4gc2hvdWxkIGhhdmUgdGhlIHZvdGUuKDEpICBFdmVyeSBmaXZlCnllYXJzIHNvbWVvbmUgd2FzIGVsZWN0ZWQgdG8gYmUgVHlyYW50LCBwcm92aWRlZCBoZSBjb3VsZCBwcm92ZSB0aGF0IGhlCndhcyBob25lc3QsIGludGVsbGlnZW50LCBzZW5zaWJsZSwgYW5kIHRydXN0d29ydGh5LiAgSW1tZWRpYXRlbHkgYWZ0ZXIgaGUKd2FzIGVsZWN0ZWQsIG9mIGNvdXJzZSwgaXQgd2FzIG9idmlvdXMgdG8gZXZlcnlvbmUgdGhhdCBoZSB3YXMgYSBjcmltaW5hbAptYWRtYW4gYW5kIHRvdGFsbHkgb3V0IG9mIHRvdWNoIHdpdGggdGhlIHZpZXcgb2YgdGhlIG9yZGluYXJ5IHBoaWxvc29waGVyCmluIHRoZSBzdHJlZXQgbG9va2luZyBmb3IgYSB0b3dlbC4gIEFuZCB0aGVuIGZpdmUgeWVhcnMgbGF0ZXIgdGhleSBlbGVjdGVkCmFub3RoZXIgb25lIGp1c3QgbGlrZSBoaW0sIGFuZCByZWFsbHkgaXQgd2FzIGFtYXppbmcgaG93IGludGVsbGlnZW50CnBlb3BsZSBrZXB0IG9uIG1ha2luZyB0aGUgc2FtZSBtaXN0YWtlcy4KCigxKSBQcm92aWRlZCB0aGF0IGhlIHdhc24ndCBwb29yLCBmb3JlaWduLCBub3IgZGlzcXVhbGlmaWVkIGJ5IHJlYXNvbiBvZgpiZWluZyBtYWQsIGZyaXZvbG91cywgb3IgYSB3b21hbi4KCiAgW1NtYWxsIEdvZHMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDIzOQolcGFzc2FnZSAxMQoiSSBzdGlsbCBkb24ndCBzZWUgaG93IG9uZSBnb2QgY2FuIGJlIGEgaHVuZHJlZCBkaWZmZXJlbnQgdGh1bmRlciBnb2RzLgpUaGV5IGFsbCBsb29rIGRpZmZlcmVudCAuLi4iCgoiRmFsc2Ugbm9zZXMuIgoKIldoYXQ/IgoKIkFuZCBkaWZmZXJlbnQgdm9pY2VzLiAgSSBoYXBwZW4gdG8ga25vdyBJbydzIGdvdCBzZXZlbnR5IGRpZmZlcmVudCBoYW1tZXJzLgpOb3QgY29tbW9uIGtub3dsZWRnZSwgdGhhdC4gIEFuZCBpdCdzIGp1c3QgdGhlIHNhbWUgd2l0aCBtb3RoZXIgZ29kZGVzc2VzLgpUaGVyZSdzIG9ubHkgb25lIG9mICdlbS4gIFNoZSBqdXN0IGdvdCBhIGxvdCBvZiB3aWdzIGFuZCBvZiBjb3Vyc2UgaXQncwphbWF6aW5nIHdoYXQgeW91IGNhbiBkbyB3aXRoIGEgcGFkZGVkIGJyYS4iCgogIFtTbWFsbCBHb2RzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyNjUKJXBhc3NhZ2UgMTIKQW4gaG91ciBsYXRlciB0aGUgbGlvbiwgd2hvIHdhcyBsaW1waW5nIGFmdGVyIEJydXRoYSwgYWxzbyBhcnJpdmVkIGF0IHRoZQpncmF2ZS4gIEl0IGhhZCBsaXZlZCBpbiB0aGUgZGVzZXJ0IGZvciBzaXh0ZWVuIHllYXJzLCBhbmQgdGhlIHJlYXNvbiBpdCBoYWQKbGl2ZWQgc28gbG9uZyB3YXMgdGhhdCBpdCBoYWQgbm90IGRpZWQsIGFuZCBpdCBoYWQgbm90IGRpZWQgYmVjYXVzZSBpdApuZXZlciB3YXN0ZWQgaGFuZHkgcHJvdGVpbi4gIEl0IGR1Zy4KCkh1bWFucyBoYXZlIGFsd2F5cyB3YXN0ZWQgaGFuZHkgcHJvdGVpbiBldmVyIHNpbmNlIHRoZXkgc3RhcnRlZCB3b25kZXJpbmcKd2hvIGhhZCBsaXZlZCBpbiBpdC4KCkJ1dCwgb24gdGhlIHdob2xlLCB0aGVyZSBhcmUgd29yc2UgcGxhY2VzIHRvIGJlIGJ1cmllZCB0aGFuIGluc2lkZSBhIGxpb24uCgogIFtTbWFsbCBHb2RzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKJWUgdGl0bGUKIwojCiMKJXRpdGxlIExvcmRzIGFuZCBMYWRpZXMgKDEyKQojIHAuIDEyMiAoSGFycGVyIFRvcmNoIGVkaXRpb24pCiVwYXNzYWdlIDEKRWx2ZXMgYXJlIHdvbmRlcmZ1bC4gIFRoZXkgcHJvdm9rZSB3b25kZXIuCkVsdmVzIGFyZSBtYXJ2ZWxsb3VzLiAgVGhleSBjYXVzZSBtYXJ2ZWxzLgpFbHZlcyBhcmUgZmFudGFzdGljLiAgVGhleSBjcmVhdGUgZmFudGFzaWVzLgpFbHZlcyBhcmUgZ2xhbW9yb3VzLiAgVGhleSBwcm9qZWN0IGdsYW1vdXIuCkVsdmVzIGFyZSBlbmNoYW50aW5nLiAgVGhleSB3ZWF2ZSBlbmNoYW50bWVudC4KRWx2ZXMgYXJlIHRlcnJpZmljLiAgVGhleSBiZWdldCB0ZXJyb3IuCgpUaGUgdGhpbmcgYWJvdXQgd29yZHMgaXMgdGhhdCBtZWFuaW5ncyBjYW4gdHdpc3QganVzdCBsaWtlIGEgc25ha2UsCmFuZCBpZiB5b3Ugd2FudCB0byBmaW5kIHNuYWtlcyBsb29rIGZvciB0aGVtIGJlaGluZCB3b3JkcyB0aGF0IGhhdmUKY2hhbmdlZCB0aGVpciBtZWFuaW5nLgoKTm8gb25lIGV2ZXIgc2FpZCBlbHZlcyBhcmUgbmljZS4KCkVsdmVzIGFyZSBiYWQuCgogIFtMb3JkcyBhbmQgTGFkaWVzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAzMgolcGFzc2FnZSAyCiJIb3BlIHNoZSBkb2VzIGFsbCByaWdodCBhcyBxdWVlbiwiIHNhaWQgTmFubnkuCgoiV2UgdGF1Z2h0IGhlciBldmVyeXRoaW5nIHNoZSBrbm93cywiIHNhaWQgR3Jhbm55IFdlYXRoZXJ3YXguCgoiWWVhaCwiIHNhaWQgTmFubnkgT2dnLCBhcyB0aGV5IGRpc2FwcGVhcmVkIGludG8gdGhlIGJyYWNrZW4uICAiRCd5b3UKdGhpbmsuLi4gbWF5YmUuLi4gPyIKCiJXaGF0PyIKCiJEJ3lvdSB0aGluayBtYXliZSB3ZSBvdWdodCB0byBoYXZlIHRhdWdodCBoZXIgZXZlcnl0aGluZyAvd2UvIGtub3c/IgoKICBbTG9yZHMgYW5kIExhZGllcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMzYKJXBhc3NhZ2UgMwpJdCB3YXMgdmVyeSBoYXJkLCBiZWluZyBhIHJlYWRlciBpbiBJbnZpc2libGUgV3JpdGluZ3MuKDEpCgooMSkgVGhlIHN0dWR5IG9mIGludmlzaWJsZSB3cml0aW5ncyB3YXMgYSBuZXcgZGlzY2lwbGluZSBtYWRlIGF2YWlsYWJsZSBieQp0aGUgZGlzY292ZXJ5IG9mIHRoZSBiaS1kaXJlY3Rpb25hbCBuYXR1cmUgb2YgTGlicmFyeS1TcGFjZS4gIFRoZSB0aGF1bWljCm1hdGhlbWF0aWNzIGFyZSBjb21wbGV4LCBidXQgYm9pbCBkb3duIHRvIHRoZSBmYWN0IHRoYXQgYWxsIGJvb2tzLApldmVyeXdoZXJlLCBhZmZlY3QgYWxsIG90aGVyIGJvb2tzLiAgVGhpcyBpcyBvYnZpb3VzOiAgYm9va3MgaW5zcGlyZQpvdGhlciBib29rcyB3cml0dGVuIGluIHRoZSBmdXR1cmUsIGFuZCBjaXRlIGJvb2tzIHdyaXR0ZW4gaW4gdGhlIHBhc3QuCkJ1dCB0aGUgR2VuZXJhbCBUaGVvcnkoMikgb2YgTC1TcGFjZSBzdWdnZXN0cyB0aGF0LCBpbiB0aGF0IGNhc2UsIHRoZQpjb250ZW50cyBvZiBib29rcyAvYXMgeWV0IHVud3JpdHRlbi8gY2FuIGJlIGRlZHVjZWQgZnJvbSBib29rcyBub3cgaW4KZXhpc3RlbmNlLgoKKDIpIFRoZXJlJ3MgYSBTcGVjaWFsIFRoZW9yeSBhcyB3ZWxsLCBidXQgbm8gb25lIGJvdGhlcnMgd2l0aCBpdCBtdWNoCmJlY2F1c2UgaXQncyBzZWxmLWV2aWRlbnRseSBhIGxvYWQgb2YgbWFyc2ggZ2FzLgoKICBbTG9yZHMgYW5kIExhZGllcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gNTEKJXBhc3NhZ2UgNAoiRG9uJ3QgaG9sZCB3aXRoIHNjaG9vbHMsIiBzYWlkIEdyYW5ueSBXZWF0aGVyd2F4LiAgIlRoZXkgZ2V0IGluIHRoZSB3YXkKb2YgZWR1Y2F0aW9uLiAgQWxsIHRoZW0gYm9va3MuICBCb29rcz8gIFdoYXQgZ29vZCBhcmUgdGhleT8gIFRoZXJlJ3MgdG9vCm11Y2ggcmVhZGluZyB0aGVzZSBkYXlzLiAgV2UgbmV2ZXIgaGFkIHRpbWUgdG8gcmVhZCB3aGVuIHdlIHdhcyB5b3VuZywgSQprbm93IHRoYXQuIgoKICBbTG9yZHMgYW5kIExhZGllcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDc5LTgwCiVwYXNzYWdlIDUKVGhlIGhpZ2h3YXltYW4gc3RlcHBlZCBvdmVyIHRoZSBncm9hbmluZyBib2R5IG9mIHRoZSBkcml2ZXIgYW5kIG1hcmNoZWQKdG93YXJkIHRoZSBkb29yIG9mIHRoZSBjb2FjaCwgZHJhZ2dpbmcgaGlzIHN0ZXBsYWRkZXIgYmVoaW5kIGhpbS4KCkhlIG9wZW5lZCB0aGUgZG9vci4KCiJZb3VyIG1vbmV5IG9yLCBJJ20gc29ycnkgdG8gc2F5LCB5b3VyLS0iCgpBIGJsYXN0IG9mIG9jdGFyaW5lIGZpcmUgYmxldyBoaXMgaGF0IG9mZi4KClRoZSBkd2FyZidzIGV4cHJlc3Npb24gZGlkIG5vdCBjaGFuZ2UuCgoiSSB3b25kZXIgaWYgSSBtaWdodCBiZSBhbGxvd2VkIHRvIHJlcGhyYXNlIG15IGRlbWFuZHM/IgoKUmlkY3VsbHkgbG9va2VkIHRoZSBlbGVnYW50bHkgZHJlc3NlZCBzdHJhbmdlciB1cCBhbmQgZG93biwgb3IgcmF0aGVyCmRvd24gYW5kIGZ1cnRoZXIgZG93bi4KCiJZb3UgZG9uJ3QgbG9vayBsaWtlIGEgZHdhcmYsIiBoZSBzYWlkLCAiYXBhcnQgZnJvbSB0aGUgaGVpZ2h0LCB0aGF0IGlzLiIKCiJEb24ndCBsb29rIGxpa2UgYSBkd2FyZiBhcGFydCBmcm9tIHRoZSBoZWlnaHQ/IgoKSSBtZWFuLCB0aGUgaGVsbWV0IGFuZCBpcm9uIGJvb3RzIGRlcGFydG1lbnQgaXMgYW1vbmcgdGhvc2UgeW91IGFyZSBsYWNraW5nCmluLCIgc2FpZCBSaWRjdWxseS4KCiAgW0xvcmRzIGFuZCBMYWRpZXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDk1CiVwYXNzYWdlIDYKV2hhdCBpcyBtYWdpYz8KClRoZXJlIGlzIHRoZSB3aXphcmRzJyBleHBsYW5hdGlvbiwgd2hpY2ggY29tZXMgaW4gdHdvIGZvcm1zLCBkZXBlbmRpbmcgb24KdGhlIGFnZSBvZiB0aGUgd2l6YXJkLiAgT2xkZXIgd2l6YXJkcyB0YWxrIGFib3V0IGNhbmRsZXMsIGNpcmNsZXMsIHBsYW5ldHMsCnN0YXJzLCBiYW5hbmFzLCBjaGFudHMsIHJ1bmVzLCBhbmQgdGhlIGltcG9ydGFuY2Ugb2YgaGF2aW5nIGF0IGxlYXN0IGZvdXIKZ29vZCBtZWFscyBldmVyeSBkYXkuICBZb3VuZ2VyIHdpemFyZHMsIHBhcnRpY3VsYXJseSB0aGUgcGFsZSBvbmVzIHdobwpzcGVuZCBtb3N0IG9mIHRoZWlyIHRpbWUgaW4gdGhlIEhpZ2ggRW5lcmd5IE1hZ2ljIGJ1aWxkaW5nLCgxKSBjaGF0dGVyIGF0Cmxlbmd0aCBhYm91dCBmbHV4ZXMgaW4gdGhlIG1vcnBoaWMgbmF0dXJlIG9mIHRoZSB1bml2ZXJzZSwgdGhlIGVzc2VudGlhbGx5CmltcGVybWFuZW50IHF1YWxpdHkgb2YgZXZlbiB0aGUgbW9zdCBhcHBhcmVudGx5IHJpZ2lkIHRpbWUtc3BhY2UgZnJhbWV3b3JrLAp0aGUgaW1wb3NzaWJpbGl0eSBvZiByZWFsaXR5LCBhbmQgc28gb246ICB3aGF0IHRoaXMgbWVhbnMgaXMgdGhhdCB0aGV5IGhhdmUKZ290IGhvbGQgb2Ygc29tZXRoaW5nIGhvdCBhbmQgYXJlIGdhYmJsaW5nIHRoZSBwaHlzaWNzIGFzIHRoZXkgZ28gYWxvbmcuCgooMSkgSXQgd2FzIGhlcmUgdGhhdCB0aGUgdGhhdW0sIGhpdGhlcnRvIGJlbGlldmVkIHRvIGJlIHRoZSBzbWFsbGVzdApwb3NzaWJsZSBwYXJ0aWNsZSBvZiBtYWdpYywgd2FzIHN1Y2Nlc3NmdWxseSBkZW1vbnN0cmF0ZWQgdG8gbWFkZSB1cCBvZgovcmVzb25zLygyKSBvciByZWFsaXR5IGZyYWdtZW50cy4gIEN1cnJlbnRseSByZXNlYXJjaCBpbmRpY2F0ZXMgdGhhdCBlYWNoCnJlc29uIGlzIGl0c2VsZiBtYWRlIHVwIG9mIGEgY29tYmluYXRpb24gb2YgYXQgbGVhc3QgZml2ZSAiZmxhdm9ycywiCmtub3duIGFzICJ1cCwiICJkb3duLCIgInNpZGV3YXlzLCIgInNleCBhcHBlYWwsIiBhbmQgInBlcHBlcm1pbnQuIgoKKDIpIExpdDogIlRoaW5nLWllcy4iCgogIFtMb3JkcyBhbmQgTGFkaWVzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxMDcKJXBhc3NhZ2UgNwpXaGF0IGlzIG1hZ2ljPwoKVGhlbiB0aGVyZSBpcyB0aGUgd2l0Y2hlcycgZXhwbGFuYXRpb24sIHdoaWNoIGNvbWVzIGluIHR3byBmb3JtcywgZGVwZW5kaW5nCm9uIHRoZSBhZ2Ugb2YgdGhlIHdpdGNoLiAgT2xkZXIgd2l0Y2hlcyBoYXJkbHkgcHV0IHdvcmRzIHRvIGl0IGF0IGFsbCwgYnV0Cm1heSBzdXNwZWN0IGluIHRoZWlyIGhlYXJ0cyB0aGF0IHRoZSB1bml2ZXJzZSByZWFsbHkgZG9lc24ndCBrbm93IHdoYXQgdGhlCmhlbGwgaXMgZ29pbmcgb24gYW5kIGNvbnNpc3RzIG9mIGEgemlsbGlvbiB0cmlsbGlvbiBiaWxsaW9uIHBvc3NpYmlsaXRpZXMsCmFuZCBjb3VsZCBiZWNvbWUgYW55IG9mIHRoZW0gaWYgYSB0cmFpbmVkIG1pbmQgcmlnaWQgd2l0aCBxdWFudHVtIGNlcnRhaW50eQp3YXMgaW5zZXJ0ZWQgaW4gdGhlIGNyYWNrIGFuZCAvdHdpc3RlZC87IHRoYXQsIGlmIHlvdSByZWFsbHkgaGFkIHRvIG1ha2UKc29tZW9uZSdzIGhhdCBleHBsb2RlLCBhbGwgeW91IG5lZWRlZCB0byBkbyB3YXMgL3R3aXN0LyBpbnRvIHRoZSB1bml2ZXJzZQp3aGVyZSBhIGxhcmdlIG51bWJlciBvZiBoYXQgbW9sZWN1bGVzIGFsbCBkZWNpZGUgYXQgdGhlIHNhbWUgdGltZSB0byBib3VuY2UKb2ZmIGluIGRpZmZlcmVudCBkaXJlY3Rpb25zLgoKWW91bmdlciB3aXRjaGVzLCBvbiB0aGUgb3RoZXIgaGFuZCwgdGFsayBhYm91dCBpdCBhbGwgdGhlIHRpbWUgYW5kIGJlbGlldmUKaXQgaW52b2x2ZXMgY3J5c3RhbHMsIG15c3RpYyBmb3JjZXMsIGFuZCBkYW5jaW5nIGFib3V0IHdpdGhvdXQgeWVyIGRyYXdlcnMKb24uCgpFdmVyeW9uZSBtYXkgdG8gcmlnaHQsIGFsbCBhdCB0aGUgc2FtZSB0aW1lLiAgVGhhdCdzIHRoZSB0aGluZyBhYm91dApxdWFudHVtLgoKICBbTG9yZHMgYW5kIExhZGllcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTE0OyAnY29sb3JmdWwnICYgJ2h1bW9yJyBhcmUgc3BlbGxlZCB0aGUgQW1lcmljYW4gd2F5LCAnb3InIG5vdCAnb3VyJwolcGFzc2FnZSA4CkhlIGtub2NrZWQgb24gdGhlIGNvYWNoIGRvb3IuICBUaGUgd2luZG93IHNsaWQgZG93bi4KCiJJIHdvdWxkbid0IGxpa2UgeW91IHRvIHRoaW5rIG9mIHRoaXMgYXMgYSByb2JiZXJ5LCIgaGUgc2FpZC4gICJJJ2QgbGlrZQp5b3UgdG8gdGhpbmsgb2YgaXQgbW9yZSBhcyBhIGNvbG9yZnVsIGFuZWNkb3RlIHlvdSBtaWdodCBlbmpveSB0ZWxsaW5nIHlvdXIKZ3JhbmRjaGlsZHJlbiBhYm91dC4iCgpBIHZvaWNlIGZyb20gd2l0aGluIHNhaWQsICJUaGF0J3MgaGltISAgSGUgc3RvbGUgbXkgaG9yc2UhIgoKQSB3aXphcmQncyBzdGFmZiBwb2tlZCBvdXQuICBUaGUgY2hpZWZ0YWluIHNhdyB0aGUga25vYiBvbiB0aGUgZW5kLgoKIk5vdyB0aGVuLCIgaGUgc2FpZCBwbGVhc2FudGx5LiAgIkkga25vdyB0aGUgcnVsZXMuICBXaXphcmRzIGFyZW4ndCBhbGxvd2VkCnRvIHVzZSBtYWdpYyBhZ2FpbnN0IGNpdmlsaWFucyBleGNlcHQgaW4gZ2VudWluZSBsaWZlLXRocmVhdGVuaW5nIHNpdHVhLS0iCgpUaGVyZSB3YXMgYSBidXJzdCBvZiBvY3RhcmluZSBsaWdodC4KCiJBY3R1YWxseSwgaXQncyBub3QgYSBydWxlLCIgc2FpZCBSaWRjdWxseS4gICJJdCdzIG1vcmUgYSBndWlkZWxpbmUuIiAgSGUKdHVybmVkIHRvIFBvbmRlciBTdGliYm9ucy4gICJJbnRlcmVzdGluJyB1c2Ugb2YgU3RhY2tsYWR5J3MgTW9ycGhpYwpSZXNvbmF0b3IgaGVyZSwgSSBob3BlZCB5b3Ugbm90aWNlZC4iCgpQb25kZXIgbG9va2VkIGRvd24uCgpUaGUgY2hpZWZ0YWluIGhhZCBiZWVuIHR1cm5lZCBpbnRvIGEgcHVtcGtpbiwgYWx0aG91Z2gsIGluIGFjY29yZGFuY2Ugd2l0aAp0aGUgcnVsZXMgb2YgdW5pdmVyc2FsIGh1bW9yLCBoZSBzdGlsbCBoYWQgaGlzIGhhdCBvbi4KCiAgW0xvcmRzIGFuZCBMYWRpZXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDE0OSAoc2Vjb25kIGhhbGYgb2YgYSBwYXJhZ3JhcGgpCiVwYXNzYWdlIDkKVGhpbmdzIGhhZCB0byBiYWxhbmNlLiAgWW91IGNvdWxkbid0IHNldCBvdXQgdG8gYmUgYSBnb29kIHdpdGNoIG9yIGEgYmFkCndpdGNoLiAgSXQgbmV2ZXIgd29ya2VkIGZvciBsb25nLiAgQWxsIHlvdSBjb3VsZCB0cnkgdG8gYmUgd2FzIGEgL3dpdGNoLywKYXMgaGFyZCBhcyB5b3UgY291bGQuCgogIFtMb3JkcyBhbmQgTGFkaWVzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxNjIgKG1pZC1wYXJhZ3JhcGgpCiVwYXNzYWdlIDEwCiJJJ20gdGhlIGhlYWQgd2l6YXJkIG5vdy4gIEkndmUgb25seSBnb3QgdG8gZ2l2ZSBhbiBvcmRlciBhbmQgYSB0aG91c2FuZAp3aXphcmRzIHdpbGwuLi4gdWguLi4gZGlzb2JleSwgY29tZSB0byB0aGluayBvZiBpdCwgb3Igc2F5ICdXaGF0PycsIG9yCnN0YXJ0IHRvIGFyZ3VlLiAgQnV0IHRoZXkgaGF2ZSB0byB0YWtlIG5vdGljZS4KCiJJJ3ZlIGJlZW4gdG8gdGhhdCBVbml2ZXJzaXR5IGEgZmV3IHRpbWVzLCIgc2FpZCBHcmFubnkuICAiQSBidW5jaCBvZiBmYXQKb2xkIG1lbiBpbiBiZWFyZHMuIgoKIlRoYXQncyByaWdodCEgIFRoYXQncyAvdGhlbS8hIgoKICBbTG9yZHMgYW5kIExhZGllcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTkwCiVwYXNzYWdlIDExClRoZSB3aW5kb3cgd2FzIG5vIGVzY2FwZSB0aGlzIHRpbWUuICBUaGVyZSB3YXMgdGhlIGJlZCB0byBoaWRlIHVuZGVyLCBhbmQKdGhhdCdkIHdvcmsgZm9yIGFsbCBvZiB0d28gc2Vjb25kcywgd291bGRuJ3QgaXQ/CgpIZXIgZXllIHdhcyBkcmF3biBieSBzb21lIGtpbmQgb2YgaG9ycmlibGUgbWFnaWMgYmFjayB0byB0aGUgcm9vbSdzCmdhcmRlcm9iZSwgbHVya2luZyBiZWhpbmQgaXRzIGN1cnRhaW4uCgpNYWdyYXQgbGlmdGVkIHRoZSBsaWQuICBUaGUgc2hhZnQgd2FzIGRlZmluaXRlbHkgd2lkZSBlbm91Z2ggdG8gYWRtaXQgYQpib2R5LiAgR2FyZGVyb2JlcyB3ZXJlIG5vdG9yaW91cyBpbiB0aGF0IHJlc3BlY3QuICBTZXZlcmFsIHVucG9wdWxhciBraW5ncwptZXQgdGhlaXIgZW5kLCBhcyBpdCB3ZXJlLCBpbiB0aGUgZ2FyZGVyb2JlLCBhdCB0aGUgaGFuZHMgb2YgYW4gYXNzYXNzaW4Kd2l0aCBnb29kIGNsaW1iaW5nIGFiaWxpdHksIGEgc3BlYXIsIGFuZCBhIGZ1bmRhbWVudGFsIGFwcHJvYWNoIHRvIHBvbGl0aWNzLgoKICBbTG9yZHMgYW5kIExhZGllcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTkxICgnYScgaGlzdG9yaWFuLCBub3QgJ2FuJzsgJ1luY2knIGlzIGNvcnJlY3QpCiVwYXNzYWdlIDEyClNvbWUgc2hhcGUsIHNvbWUgdHJpY2sgb2YgbW9vbmxpZ2h0LCBzb21lIGV4cHJlc3Npb24gb24gYSBwYWludGVkIGZhY2UKc29tZWhvdyBjdXQgdGhyb3VnaCBoZXIgdGVycm9yIGFuZCBjYXVnaHQgaGVyIGV5ZS4KClRoYXQgd2FzIGEgcG9ydHJhaXQgc2hlJ2QgbmV2ZXIgc2VlbiBiZWZvcmUuICBTaGUnZCBuZXZlciB3YWxrZWQgZG93biB0aGlzCmZhci4gIFRoZSBpZGlvdCB2YXBpZGl0eSBvZiB0aGUgYXNzZW1ibGVkIHF1ZWVucyBoYWQgZGVwcmVzc2VkIGhlci4gIEJ1dAp0aGlzIG9uZS4uLgoKVGhpcyBvbmUsIHNvbWVob3csIHJlYWNoZWQgb3V0IHRvIGhlci4KClNoZSBzdG9wcGVkLgoKSXQgY291bGRuJ3QgaGF2ZSBiZWVuIGRvbmUgZnJvbSBsaWZlLiAgSW4gdGhlIGRheXMgb2YgL3RoaXMvIHF1ZWVuLCB0aGUKb25seSBwYWludCBrbm93biBsb2NhbGx5IHdhcyBhIHNvcnQgb2YgYmx1ZSwgYW5kIGdlbmVyYWxseSB1c2VkIG9uIHRoZSBib2R5LgpCdXQgYSBmZXcgZ2VuZXJhdGlvbnMgYWdvIEtpbmcgTHVsbHkgSSBoYWQgYmVlbiBhIGJpdCBvZiBhIGhpc3RvcmlhbiBhbmQgYQpyb21hbnRpYy4gIEhlJ2QgcmVzZWFyY2hlZCB3aGF0IHdhcyBrbm93biBvZiB0aGUgZWFybHkgZGF5cyBvZiBMYW5jcmUsIGFuZAp3aGVyZSBhY3R1YWwgZXZpZGVuY2UgaGFkIGJlZW4gYSBiaXQgc3BhcnNlIGhlIGhhZCwgaW4gdGhlIGJlc3QgdHJhZGl0aW9ucwpvZiB0aGUga2VlbiBldGhuaWMgaGlzdG9yaWFuLCBpbmZlcnJlZCBmcm9tIHJldmVhbGVkIHNlbGYtZXZpZGVudCB3aXNkb20oMSkKYW5kIGV4dHJhcG9sYXRlZCBmcm9tIGFzc29jaWF0ZWQgc291cmNlcygyKS4gIEhlJ2QgY29tbWlzc2lvbmVkIHRoZQpwb3J0cmFpdCBvZiBRdWVlbiBZbmNpIHRoZSBTaG9ydC1UZW1wZXJlZCwgb25lIG9mIHRoZSBmb3VuZGVycyBvZiB0aGUKa2luZ2RvbS4KCigxKSBNYWRlIGl0IHVwLgoKKDIpIEhhZCByZWFkIGEgbG90IG9mIHN0dWZmIHRoYXQgb3RoZXIgcGVvcGxlIGhhZCBtYWRlIHVwLCB0b28uCgogIFtMb3JkcyBhbmQgTGFkaWVzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKJWUgdGl0bGUKIwojCiMKJXRpdGxlIE1lbiBhdCBBcm1zICgxNCkKJXBhc3NhZ2UgMQpUaGUgbWF6ZSB3YXMgc28gc21hbGwgdGhhdCBwZW9wbGUgZ290IGxvc3QgbG9va2luZyBmb3IgaXQuCgogIFtNZW4gYXQgQXJtcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDYtNyAoSGFycGVyIFRvcmNoIGVkaXRpb24pCiVwYXNzYWdlIDIKQW5raC1Nb3Jwb3JrIGhhZCBhIGtpbmcgYWdhaW4uCgpBbmQgdGhpcyB3YXMgL3JpZ2h0Ly4gIEFuZCBpdCB3YXMgL2ZhdGUvIHRoYXQgbGV0IEVkd2FyZCByZWNvZ25pemUgdGhpcwovanVzdC8gd2hlbiBoZSdkIGdvdCBoaXMgUGxhbi4gIEFuZCBpdCB3YXMgL3JpZ2h0LyB0aGF0IGl0IHdhcyAvRmF0ZS8sCmFuZCB0aGUgY2l0eSB3b3VsZCBiZSAvU2F2ZWQvIGZyb20gaXRzIGlnbm9ibGUgcHJlc2VudCBieSBpdHMgL2dsb3JpdXMvCnBhc3QuICBIZSBoYWQgdGhlIC9NZWFucy8sIGFuZCBoZSBoYWQgdGhlIC9lbmQvLiAgQW5kIHNvIG9uIC4uLgpFZHdhcmQncyB0aG91Z2h0cyBvZnRlbiByYW4gbGlrZSB0aGlzLgoKSGUgY291bGQgdGhpbmsgaW4gL2l0YWxpY3MvLiAgU3VjaCBwZW9wbGUgbmVlZCB3YXRjaGluZy4KClByZWZlcmFibHkgZnJvbSBhIHNhZmUgZGlzdGFuY2UuCgogIFtNZW4gYXQgQXJtcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDc2LTc3CiVwYXNzYWdlIDMKVGhlcmUgd2VyZSBzdWNoIHRoaW5ncyBhcyBkd2FyZiBnb2RzLiAgRHdhcmZzIHdlcmUgbm90IGEgbmF0dXJhbGx5CnJlbGlnaW91cyBzcGVjaWVzLCBidXQgaW4gYSB3b3JsZCB3aGVyZSBwaXQgcHJvcHMgY291bGQgY3JhY2sgd2l0aG91dAp3YXJuaW5nIGFuZCBwb2NrZXRzIG9mIGZpcmUgZGFtcCBjb3VsZCBzdWRkZW5seSBleHBsb2RlIHRoZXknZCBzZWVuIHRoZQpuZWVkIGZvciBnb2RzIGFzIHRoZSBzb3J0IG9mIHN1cGVybmF0dXJhbCBlcXVpdmFsZW50IG9mIGEgaGFyZCBoYXQuCkJlc2lkZXMsIHdoZW4geW91IGhpdCB5b3VyIHRodW1iIHdpdGggYW4gZWlnaHQtcG91bmQgaGFtbWVyIGl0J3MgbmljZQp0byBiZSBhYmxlIHRvIGJsYXNwaGVtZS4gIEl0IHRha2VzIGEgdmVyeSBzcGVjaWFsIGFuZCBzdHJvbmctbWluZGVkCmtpbmQgb2YgYXRoZWlzdCB0byBqdW1wIHVwIGFuZCBkb3duIHdpdGggdGhlaXIgaGFuZCBjbGFzcGVkIHVuZGVyIHRoZWlyCm90aGVyIGFybXBpdCBhbmQgc2hvdXQsICJPaCwgcmFuZG9tIGZsdWN0dWF0aW9ucy1pbi10aGUtc3BhY2UtdGltZS0KY29udGludXVtISIgb3IgIkFhYXJnaCwgcHJpbWl0aXZlLWFuZC1vdXRtb2RlZC1jb25jZXB0IG9uIGEgY3J1dGNoISIKCiAgW01lbiBhdCBBcm1zLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxMTkgKHBlcmhhcHMgYSBiaXQgc3VidGxlOyBpdCB3b3VsZCBiZSBjbGVhcmVyIGlmICd0aGV5JyB3YXMgaXRhbGljaXplZCkKJXBhc3NhZ2UgNAoiSXQncyBhbiBhbmNpZW50IHRyYWRpdGlvbiwiIHNhaWQgQ2Fycm90LgoKIkkgdGhvdWdodCBkd2FyZnMgZGlkbid0IGJlbGlldmUgaW4gZGV2aWxzIGFuZCBkZW1vbnMgYW5kIHN0dWZmIGxpa2UKdGhhdC4iCgoiVGhhdCdzIHRydWUsIGJ1dCAuLi4gd2UncmUgbm90IHN1cmUgaWYgdGhleSBrbm93LiIKCiJPaC4iCgogIFtNZW4gYXQgQXJtcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDE2OC0xNjkgKHRyZWFjbGUgPT0gbW9sYXNzZXMpCiVwYXNzYWdlIDUKIkknZCBsaWtlIGEgY291cGxlIG9mIGVnZ3MsIiBzYWlkIFZpbWVzLCAid2l0aCB0aGUgeW9sa3MgcmVhbCBoYXJkIGJ1dAp0aGUgd2hpdGVzIHNvIHJ1bm55IHRoYXQgdGhleSBkcmlwIGxpa2UgdHJlYWNsZS4gIEFuZCBJIHdhbnQgYmFjb24sIHRoYXQKc3BlY2lhbCBiYWNvbiBhbGwgY292ZXJlZCB3aXRoIGJvbnkgbm9kdWxlcyBhbmQgZGFuZ2xpbmcgYml0cyBvZiBmYXQuCkFuZCBhIHNsaWNlIG9mIGZyaWVkIGJyZWFkLiAgVGhlIGtpbmQgdGhhdCBtYWtlcyB5b3VyIGFydGVyaWVzIGdvIGNsYW5nCmp1c3QgYnkgbG9va2luZyBhdCBpdC4iCgoiVG91Z2ggb3JkZXIsIiBzYWlkIEhhcmdhLgoKIllvdSBtYW5hZ2VkIGl0IHllc3RlcmRheS4gIEFuZCBnaXZlIG1lIHNvbWUgbW9yZSBjb2ZmZWUuICBCbGFjayBhcwptaWRuaWdodCBvbiBhIG1vb25sZXNzIG5pZ2h0LiIKCkhhcmdhIGxvb2tlZCBzdXJwcmlzZWQuICBUaGF0IHdhc24ndCBsaWtlIFZpbWVzLgoKIkhvdyBibGFjaydzIHRoYXQsIHRoZW4/IiBoZSBzYWlkLgoKIk9oIHByZXR0eSBkYW1uIGJsYWNrLCBJIHNob3VsZCB0aGluay4iCgoiTm90IG5lY2Vzc2FyaWx5LiIKCiJXaGF0PyIKCiJZb3UgZ2V0IG1vcmUgc3RhcnMgb24gYSBtb29ubGVzcyBuaWdodC4gIFN0YW5kcyB0byByZWFzb24uICBUaGV5IHNob3cgdXAKbW9yZS4gIEl0IGNhbiBiZSBxdWl0ZSBicmlnaHQgb24gYSBtb29ubGVzcyBuaWdodC4iCgpWaW1lcyBzaWdoZWQuCgoiQW4gL292ZXJjYXN0LyBtb29ubGVzcyBuaWdodD8iIGhlIHNhaWQuCgpIYXJnYSBsb29rZWQgY2FyZWZ1bGx5IGF0IGhpcyBjb2ZmZWUgcG90LgoKIkN1bXVsb3VzIG9yIGNpcnJvLW5pbWJ1cz8iCgoiSSdtIHNvcnJ5LiAgV2hhdCBkaWQgeW91IHNheT8iCgoiWW91IGdldHMgY2l0eSBsaWdodHMgcmVmbGVjdGVkIG9mZiBjdW11bG91cywgYmVjYXVzZSBpdCdzIGxvdyBseWluZywgc2VlLgpNaW5kIHlvdSwgeW91IGNhbiBnZXQgaGlnaC1hbHRpdHVkZSBzY2F0dGVyIG9mZiB0aGUgaWNlIGNyeXN0YWxzIGluLS0iCgoiQSBtb29ubGVzcyBuaWdodCwiIHNhaWQgVmltZXMsIGluIGEgaG9sbG93IHZvaWNlLCAidGhhdCBpcyBhcyBibGFjayBhcwp0aGF0IGNvZmZlZS4iCgoiUmlnaHQhIgoKIkFuZCBhIGRvdWdobnV0LiIgIFZpbWVzIGdyYWJiZWQgSGFyZ2EncyBzdGFpbmVkIHZlc3QgYW5kIHB1bGxlZCBoaW0KdW50aWwgdGhleSB3ZXJlIG5vc2UgdG8gbm9zZS4gICJBIGRvdWdobnV0IGFzIGRvdWdobnV0dHkgYXMgYSBkb3VnaG51dAptYWRlIG9mIGZsb3VyLCB3YXRlciwgb25lIGxhcmdlIGVnZywgc3VnYXIsIGEgcGluY2ggb2YgeWVhc3QsIGNpbm5hbW9uCnRvIHRhc3RlIGFuZCBhIGphbSwgamVsbHksIG9yIHJhdCBmaWxsaW5nIGRlcGVuZGluZyBvbiBuYXRpb25hbCBvcgpzcGVjaWVzIHByZWZlcmVuY2UsIE9LPyAgTm90IGFzIGRvdWdobnV0dHkgYXMgc29tZXRoaW5nIGluIGFueSB3YXkKbWV0YXBob3JpY2FsLiAgSnVzdCBhIGRvdWdobnV0LiAgT25lIGRvdWdobnV0LiIKCiJBIGRvdWdobnV0LiIKCiJZZXMuIgoKIllvdSBvbmx5IGhhZCB0byBzYXkuIgoKSGFyZ2EgYnJ1c2hlZCBvZmYgaGlzIHZlc3QsIGdhdmUgVmltZXMgYSBodXJ0IGxvb2ssIGFuZCB3ZW50IGJhY2sgaW50bwp0aGUga2l0Y2hlbi4KCiAgW01lbiBhdCBBcm1zLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxNzQgKGNsdW1zeSB3b3JkaW5nOyAndGhleScgaW4gMm5kIHNlbnRlbmNlICE9ICd0aGV5JyBpbiAxc3Qgc2VudGVuY2UpCiVwYXNzYWdlIDYKV2h5IGhhZCB0aGV5IGNoYXNlZCBzb21lb25lIGhhbGZ3YXkgYWNyb3NzIHRoZSBjaXR5PyAgQmVjYXVzZSB0aGV5J2QKcnVuIGF3YXkuICAvTm8gb25lLyByYW4gYXdheSBmcm9tIHRoZSBXYXRjaC4gIFRoaWV2ZXMganVzdCBmbGFzaGVkIHRoZWlyCmxpY2Vuc2VzLiAgVW5saWNlbnNlZCB0aGlldmVzIGhhZCBub3RoaW5nIHRvIGZlYXIgZnJvbSB0aGUgV2F0Y2gsIHNpbmNlCnRoZXknZCBzYXZlZCB1cCBhbGwgdGhlaXIgZmVhciBmb3IgdGhlIFRoaWV2ZXMnIEd1aWxkLiAgQXNzYXNzaW5zIGFsd2F5cwpvYmV5ZWQgdGhlIGxldHRlciBvZiB0aGUgbGF3LiAgQW5kIGhvbmVzdCBtZW4gZGlkbid0IHJ1biBhd2F5IGZyb20gdGhlCldhdGNoLigxKSAgUnVubmluZyBhd2F5IGZyb20gdGhlIFdhdGNoIHdhcyBkb3ducmlnaHQgc3VzcGljaW91cy4KCigxKSBUaGUgYXhpb20gIkhvbmVzdCBtZW4gaGF2ZSBub3RoaW5nIHRvIGZlYXIgZnJvbSB0aGUgcG9saWNlIiBpcwpjdXJyZW50bHkgdW5kZXIgcmV2aWV3IGJ5IHRoZSBBeGlvbXMgQXBwZWFsIEJvYXJkLgoKICBbTWVuIGF0IEFybXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAxNzYtMTc3ICgidGhpcyBbc2ljOyBubyAnaXMnXSB0aGUgcG9yayBmdXR1cmVzIHdhcmVob3VzZSIpCiVwYXNzYWdlIDcKIk9oLCBteSwiIHNhaWQgRGV0cml0dXMuICAiSSB0aGluayB0aGlzIHRoZSBwb3JrIGZ1dHVyZXMgd2FyZWhvdXNlIGluCk1vcnBvcmsgUm9hZC4iCgoiV2hhdD8iCgoiVXNlZCB0byB3b3JrIGhlcmUsIiBzYWlkIHRoZSB0cm9sbC4gICJVc2VkIHRvIHdvcmsgZXZlcnl3aGVyZS4gIEdvIGF3YXksCnlvdSBzdHVwaWQgdHJvbGwsIHlvdSB0b28gdGhpY2ssIiBoZSBhZGRlZCwgZ2xvb21pbHkuCgoiSXMgdGhlcmUgYW55IHdheSBvdXQ/IgoKIlRoZSBtYWluIGRvb3IgaXMgaW4gTW9ycG9yayBTdHJlZXQuICBCdXQgbm8gb25lIGNvbWVzIGluIGhlcmUgZm9yIG1vbnRocy4KVGlsbCBwb3JrIGV4aXN0cy4iKDEpCgpDdWRkeSBzaGl2ZXJlZC4KCigxKSBQcm9iYWJseSBubyBvdGhlciB3b3JsZCBpbiB0aGUgbXVsdGl2ZXJzZSBoYXMgd2FyZWhvdXNlcyBmb3IgdGhpbmdzCndoaWNoIG9ubHkgZXhpc3QgL2luIHBvdGVudGlhLywgYnV0IHRoZSBwb3JrIGZ1dHVyZXMgd2FyZWhvdXNlIGluIEFua2gtCk1vcnBvcmsgaXMgYSBwcm9kdWN0IG9mIHRoZSBQYXRyaWNpYW4ncyBydWxlcyBhYm91dCBiYXNlbGVzcyBtZXRhcGhvcnMsCnRoZSBsaXRlcmFsLW1pbmRlZG5lc3Mgb2YgY2l0aXplbnMgd2hvIGFzc3VtZSB0aGF0IGV2ZXJ5dGhpbmcgbXVzdApleGlzdCBzb21ld2hlcmUsIGFuZCB0aGUgZ2VuZXJhbCB0aGlubmVzcyBvZiB0aGUgZmFicmljIG9mIHJlYWxpdHkKYXJvdW5kIEFua2gsIHdoaWNoIGlzIHNvIHRoaW4gdGhhdCBpdCdzIGFzIHRoaW4gYXMgYSB2ZXJ5IHRoaW4gdGhpbmcuClRoZSBuZXQgcmVzdWx0IGlzIHRoYXQgdHJhZGluZyBpbiBwb3JrIGZ1dHVyZXMtLWluIHBvcmsgL3RoYXQgZG9lc24ndApleGlzdCB5ZXQvLS1sZWQgdG8gdGhlIGJ1aWxkaW5nIG9mIHRoZSB3YXJlaG91c2UgdG8gc3RvcmUgaXQgdW50aWwgaXQKZG9lcy4gIFRoZSBleHRyZW1lbHkgbG93IHRlbXBlcmF0dXJlcyBhcmUgY2F1c2VkIGJ5IHRoZSBpbWJhbGFuY2UgaW4KdGhlIHRlbXBvcmFsIGVuZXJneSBmbG93LiAgQXQgbGVhc3QsIHRoYXQncyB3aGF0IHRoZSB3aXphcmRzIGluIHRoZQpIaWdoIEVuZXJneSBNYWdpYyBidWlsZGluZyBzYXkuICBBbmQgdGhleSd2ZSBnb3QgcHJvcGVyIHBvaW50eSBoYXRzIGFuZApsZXR0ZXJzIGFmdGVyIHRoZWlyIG5hbWUsIHNvIHRoZXkga25vdyB3aGF0IHRoZXkncmUgdGFsa2luZyBhYm91dC4KCiAgW01lbiBhdCBBcm1zLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyMTIKJXBhc3NhZ2UgOApCbGFjayBtdWQsIG1vcmUgb3IgbGVzcyBkcnksIG1hZGUgYSBwYXRoIGF0IHRoZSBib3R0b20gb2YgdGhlIHR1bm5lbC4KVGhlcmUgd2FzIHNsaW1lIG9uIHRoZSB3YWxscywgdG9vLCBpbmRpY2F0aW5nIHRoYXQgYXQgc29tZSBwb2ludCBpbiB0aGUKcmVjZW50IHBhc3QgdGhlIHR1bm5lbCBoYWQgYmVlbiBmdWxsIG9mIHdhdGVyLiAgSGVyZSBhbmQgdGhlcmUgaHVnZQpwYXRjaGVzIG9mIGZ1bmdpLCBsdW1pbm91cyB3aXRoIGRlY2F5LCBjYXN0IGEgZmFpbnQgZ2xvdyBvdmVyIHRoZQphbmNpZW50IHN0b25ld29yay4oMSkKCigxKSBJdCBkaWRuJ3QgbmVlZCB0by4gIEN1ZGR5LCBiZWxvbmdpbmcgdG8gYSByYWNlIHRoYXQgd29ya2VkIHVuZGVyZ3JvdW5kCmZvciBwcmVmZXJlbmNlLCBhbmQgRGV0cml0dXMsIGEgbWVtYmVyIG9mIGEgcmFjZSBub3RvcmlvdXNseSBub2N0dXJuYWwsCmhhZCBleGNlbGxlbnQgdmlzaW9uIGluIHRoZSBkYXJrLiAgQnV0IG15c3RlcmlvdXMgY2F2ZXMgYW5kIHR1bm5lbHMKYWx3YXlzIGhhdmUgbHVtaW5vdXMgZnVuZ2ksIHN0cmFuZ2VseSBicmlnaHQgY3J5c3RhbHMgb3IgYXQgYSBwaW5jaAptZXJlbHkgYW4gZWxkcml0Y2ggZ2xvdyBpbiB0aGUgYWlyLCBqdXN0IGluIGNhc2UgYSBodW1hbiBoZXJvIGNvbWVzIGluCmFuZCBuZWVkcyB0byBzZWUgaW4gdGhlIGRhcmsuICBTdHJhbmdlIGJ1dCB0cnVlLgoKICBbTWVuIGF0IEFybXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDIxOAolcGFzc2FnZSA5CiJIZSdzIGJvdW5kIHRvIGhhdmUgZG9uZSAvc29tZXRoaW5nLywiIE5vZGR5IHJlcGVhdGVkLgoKSW4gdGhpcyBoZSB3YXMgZWNob2luZyB0aGUgUGF0cmljaWFuJ3MgdmlldyBvZiBjcmltZSBhbmQgcHVuaXNobWVudC4gIElmCnRoZXJlIHdhcyBhIGNyaW1lLCB0aGVyZSBzaG91bGQgYmUgcHVuaXNobWVudC4gIElmIHRoZSBzcGVjaWZpYyBjcmltaW5hbApzaG91bGQgYmUgaW52b2x2ZWQgaW4gdGhlIHB1bmlzaG1lbnQgcHJvY2VzcyB0aGVuIHRoaXMgd2FzIGEgaGFwcHkKYWNjaWRlbnQsIGJ1dCBpZiBub3QgdGhlbiBhbnkgY3JpbWluYWwgd291bGQgZG8sIGFuZCBzaW5jZSBldmVyeW9uZSB3YXMKdW5kb3VidGVkbHkgZ3VpbHR5IG9mIHNvbWV0aGluZywgdGhlIG5ldCByZXN1bHQgd2FzIHRoYXQsIC9pbiBnZW5lcmFsCnRlcm1zLywganVzdGljZSB3YXMgZG9uZS4KCiAgW01lbiBhdCBBcm1zLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyMjYKJXBhc3NhZ2UgMTAKVGhlIGxpYnJhcmlhbiBjb25zaWRlcmVkIG1hdHRlcnMgZm9yIGEgd2hpbGUuICBTbyAuLi4gYSBkd2FyZiBhbmQgYSB0cm9sbC4KSGUgcHJlZmVycmVkIGJvdGggc3BlY2llcyB0byBodW1hbnMuICBGb3Igb25lIHRoaW5nLCBuZWl0aGVyIG9mIHRoZW0gd2VyZQpncmVhdCByZWFkZXJzLiAgVGhlIExpYnJhcmlhbiB3YXMsIG9mIGNvdXJzZSwgdmVyeSBtdWNoIGluIGZhdm9yIG9mCnJlYWRpbmcgaW4gZ2VuZXJhbCwgYnV0IHJlYWRlcnMgaW4gcGFydGljdWxhciBnb3Qgb24gaGlzIG5lcnZlcy4gIFRoZXJlCndhcyBzb21ldGhpbmcsIHdlbGwsIC9zYWNyaWxlZ2lvdXMvIGFib3V0IHRoZSB3YXkgdGhleSBrZXB0IHRha2luZyBib29rcwpvZmYgdGhlIHNoZWx2ZXMgYW5kIHdlYXJpbmcgb3V0IHRoZSB3b3JkcyBieSByZWFkaW5nIHRoZW0uICBIZSBsaWtlZApwZW9wbGUgd2hvIGxvdmVkIGFuZCByZXNwZWN0ZWQgYm9va3MsIGFuZCB0aGUgYmVzdCB3YXkgdG8gZG8gdGhhdCwgaW4KdGhlIExpYnJhcmlhbidzIG9waW5pb24sIHdhcyB0byBsZWF2ZSB0aGVtIG9uIHRoZSBzaGVsdmVzIHdoZXJlIE5hdHVyZQppbnRlbmRlZCB0aGVtIHRvIGJlLgoKICBbTWVuIGF0IEFybXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDI1MwolcGFzc2FnZSAxMQpTb21ldGltZXMgaXQncyBiZXR0ZXIgdG8gbGlnaHQgYSBmbGFtZXRocm93ZXIgdGhhbiBjdXJzZSB0aGUgZGFya25lc3MuCgogIFtNZW4gYXQgQXJtcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjY1IChmeWksIHRoZXkncmUgZGVjb3JhdGVkIGNoaWNrZW4gZWdncykKJXBhc3NhZ2UgMTIKIkFsbCB0aG9zZSBsaXR0bGUgaGVhZHMgLi4uICIKClRoZXkgc3RyZXRjaGVkIGF3YXkgaW4gdGhlIGNhbmRsZWxpZ2h0LCBzaGVsZiBvbiBzaGVsZiBvZiB0aGVtLCB0aW55CmxpdHRsZSBjbG93biBmYWNlcy0tYXMgaWYgYSB0cmliZSBvZiBoZWFkaHVudGVycyBoYWQgc3VkZGVubHkgZGV2ZWxvcGVkCmEgc29waGlzdGljYXRlZCBzZW5zZSBvZiBodW1vciBhbmQgYSBkZXNpcmUgdG8gbWFrZSB0aGUgd29ybGQgYSBiZXR0ZXIKcGxhY2UuCgogIFtNZW4gYXQgQXJtcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDMwMC0zMDEKJXBhc3NhZ2UgMTMKIllvdSBrbm93IHdoYXQgSSBtZWFuISIKCiJDYW4ndCBzYXkgSSBkby4gIENhbid0IHNheSBJIGRvLiAgQ2xvdGhpbmcgaGFzIG5ldmVyIGJlZW4gd2hhdCB5b3UgbWlnaHQKY2FsbCBhIHRoaW5neSBvZiBkb2cgd29zc25hbWUuIiAgR2FzcG9kZSBzY3JhdGNoZWQgaGlzIGVhci4gICJUd28gbWV0YS0Kc3ludGFjdGljIHZhcmlhYmxlcyB0aGVyZS4gIFNvcnJ5LiIKCiAgW01lbiBhdCBBcm1zLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAzMjAKJXBhc3NhZ2UgMTQKIkhhaGFoYSwgYSBuaWNlIGRheSBmb3IgaXQhIiBsZWVyZWQgdGhlIEJ1cnNhci4KCiJPaCBkZWFyLCIgc2FpZCBSaWRjdWxseSwgImhlJ3Mgb2ZmIGFnYWluLiAgQ2FuJ3QgdW5kZXJzdGFuZCB0aGUgbWFuLgpBbnlvbmUgZ290IHRoZSBkcmllZCBmcm9nIHBpbGxzPyIKCkl0IHdhcyBhIGNvbXBsZXRlIG15c3RlcnkgdG8gTXVzdHJ1bSBSaWRjdWxseSwgYSBtYW4gZGVzaWduZWQgYnkgbmF0dXJlIHRvCmxpdmUgb3V0ZG9vcnMgYW5kIGhhcHBpbHkgc2xhdWdodGVyIGFueXRoaW5nIHRoYXQgY291Z2hlZCBpbiB0aGUgYnVzaGVzLAp3aHkgdGhlIEJ1cnNhciAoYSBtYW4gZGVzaWduZWQgYnkgTmF0dXJlIHRvIHNpdCBpbiBhIHNtYWxsIHJvb20gc29tZXdoZXJlLAphZGRpbmcgdXAgZmlndXJlcykgd2FzIHNvIG5lcnZvdXMuICBIZSdkIHRyaWVkIGFsbCBzb3J0cyBvZiB0aGluZ3MgdG8sIGFzCmhlIHB1dCBpdCwgYnVjayBoaW0gdXAuICBUaGVzZSBpbmNsdWRlZCBwcmFjdGljYWwgam9rZXMsIHN1cnByaXNlIGVhcmx5Cm1vcm5pbmcgcnVucywgYW5kIGxlYXBpbmcgb3V0IGF0IGhpbSBmcm9tIGJlaGluZCBkb29ycyB3aGlsZSB3ZWFyaW5nCldpbGxpZSB0aGUgVmFtcGlyZSBtYXNrcyBpbiBvcmRlciwgaGUgc2FpZCwgdG8gdGFrZSBoaW0gb3V0IG9mIGhpbXNlbGYuCgogIFtNZW4gYXQgQXJtcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiVlIHRpdGxlCiMKIwojCiV0aXRsZSBTb3VsIE11c2ljICgxMSkKJXBhc3NhZ2UgMQpCdXQgdGhpcyBkaWRuJ3QgZmVlbCBsaWtlIG1hZ2ljLiAgSXQgZmVsdCBhIGxvdCBvbGRlciB0aGFuIHRoYXQuICBJdCBmZWx0Cmxpa2UgbXVzaWMuCgogIFtTb3VsIE11c2ljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKJXBhc3NhZ2UgMgoiWWVzLCIgc2FpZCB0aGUgc2t1bGwuICAiUXVpdCB3aGlsZSB5b3UncmUgYSBoZWFkLCB0aGF0J3Mgd2hhdCBJIHNheS4iCgogIFtTb3VsIE11c2ljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLjIgKEhhcnBlciBUb3JjaCBlZGl0aW9uKQolcGFzc2FnZSAzCkJ1dCBpZiBpdCBpcyB0cnVlIHRoYXQgdGhlIGFjdCBvZiBvYnNlcnZpbmcgY2hhbmdlcyB0aGUgdGhpbmcgd2hpY2ggaXMKb2JzZXJ2ZWQsKDEpIGl0J3MgZXZlbiBtb3JlIHRydWUgdGhhdCBpdCBjaGFuZ2VzIHRoZSBvYnNlcnZlci4KCigxKSBCZWNhdXNlIG9mIFF1YW50dW0uCgogIFtTb3VsIE11c2ljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLjgKJXBhc3NhZ2UgNApJdCBpcyBzYWlkIHRoYXQgd2hvbXNvZXZlciB0aGUgZ29kcyB3aXNoIHRvIGRlc3Ryb3ksIHRoZXkgZmlyc3QgbWFrZSBtYWQuCkluIGZhY3QsIHdob21zb2V2ZXIgdGhlIGdvZHMgd2lzaCB0byBkZXN0cm95LCB0aGV5IGZpcnN0IGhhbmQgdGhlCmVxdWl2YWxlbnQgb2YgYSBzdGljayB3aXRoIGEgZml6emluZyBmdXNlIGFuZCBBY21lIER5bmFtaXRlIENvbXBhbnkKd3JpdHRlbiBvbiB0aGUgc2lkZS4gIEl0J3MgbW9yZSBpbnRlcmVzdGluZywgYW5kIGRvZXNuJ3QgdGFrZSBzbyBsb25nLgoKICBbU291bCBNdXNpYywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDYzLTY0CiVwYXNzYWdlIDUKVGhlbiB0aGUgc2t1bGwgc2FpZDogICJLaWRzIHRvZGF5LCBlaD8iCgoiSSBibGFtZSBlZHVjYXRpb24sIiBzYWlkIHRoZSByYXZlbi4KCiJBIGxvdCBvZiBrbm93bGVkZ2UgaXMgYSBkYW5nZXJvdXMgdGhpbmcsIiBzYWlkIHRoZSBza3VsbC4gICJBIGxvdCBtb3JlCmRhbmdlcm91cyB0aGFuIGp1c3QgYSBsaXR0bGUuICBJIGFsd2F5cyB1c2VkIHRvIHNheSB0aGF0LCB3aGVuIEkgd2FzCmFsaXZlLiIKCiJXaGVuIHdhcyB0aGF0LCBleGFjdGx5PyIKCiJDYW4ndCByZW1lbWJlci4gIEkgdGhpbmsgSSB3YXMgcHJldHR5IGtub3dsZWRnZWFibGUuICBQcm9iYWJseSBhIHRlYWNoZXIKb3IgcGhpbG9zb3BoZXIsIHNvbWV0aGluZyBvZiB0aGF0IGtpZG5leS4gIEFuZCBub3cgSSdtIG9uIGEgYmVuY2ggd2l0aCBhCmJpcmQgY3JhcHBpbmcgb24gbXkgaGVhZC4iCgoiVmVyeSBhbGxlZ29yaWNhbCwiIHNhaWQgdGhlIHJhdmVuLgoKICBbU291bCBNdXNpYywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gODcgKFN0YWJiaW5nOiAiaW4gdGhlIiBib3RoIGNhcGl0YWxpemVkOyAiYW5kIiBub3Qgc28pCiVwYXNzYWdlIDYKVGhlIE1lbmRlZCBEcnVtIGhhZCB0cmFkaXRpb25hbGx5IGdvbmUgaW4gZm9yLCB3ZWxsLCB0cmFkaXRpb25hbCBwdWIgZ2FtZXMsCnN1Y2ggYXMgZG9taW5vZXMsIGRhcnRzLCBhbmQgU3RhYmJpbmcgUGVvcGxlIEluIFRoZSBCYWNrIGFuZCBUYWtpbmcgQWxsClRoZWlyIE1vbmV5LiAgVGhlIG5ldyBvd25lciBoYWQgZGVjaWRlZCB0byBnbyB1cC1tYXJrZXQuICBUaGlzIHdhcyB0aGUKb25seSBhdmFpbGFibGUgZGlyZWN0aW9uLgoKICBbU291bCBNdXNpYywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDEyNS0xMjYgKCJoaW0iPT1MaWJyYXJpYW47CiMgICAgICAgICAgICAgIExlb25hcmQgb2YgUXVpcm09PURpc2N3b3JsZCBhbmFsb2cgb2YgTGVvbmFyZG8gZGEgVmluY2kpCiVwYXNzYWdlIDcKVGhlIExpYnJhcnkgZGlkbid0IG9ubHkgY29udGFpbiBtYWdpY2FsIGJvb2tzLCB0aGUgb25lcyB3aGljaCBhcmUgY2hhaW5lZAp0byB0aGVpciBzaGVsdmVzIGFuZCBhcmUgdmVyeSBkYW5nZXJvdXMuICBJdCBhbHNvIGNvbnRhaW5lZCBwZXJmZWN0bHkKb3JkaW5hcnkgYm9va3MsIHByaW50ZWQgb24gY29tbW9ucGxhY2UgcGFwZXIgaW4gbXVuZGFuZSBpbmsuICBJdCB3b3VsZCBiZQphIG1pc3Rha2UgdG8gdGhpbmsgdGhhdCB0aGV5IHdlcmVuJ3QgYWxzbyBkYW5nZXJvdXMsIGp1c3QgYmVjYXVzZSByZWFkaW5nCnRoZW0gZGlkbid0IG1ha2UgZmlyZXdvcmtzIGdvIG9mZiBpbiB0aGUgc2t5LiAgUmVhZGluZyB0aGVtIHNvbWV0aW1lcyBkaWQKdGhlIG1vcmUgZGFuZ2Vyb3VzIHRyaWNrIG9mIG1ha2luZyBmaXJld29ya3MgZ28gb2ZmIGluIHRoZSBwcml2YWN5IG9mIHRoZQpyZWFkZXIncyBicmFpbi4KCkZvciBleGFtcGxlLCB0aGUgYmlnIHZvbHVtZSBvcGVuIGluIGZyb250IG9mIGhpbSBjb250YWluZWQgc29tZSBvZiB0aGUKY29sbGVjdGVkIGRyYXdpbmdzIG9mIExlb25hcmQgb2YgUXVpcm0sIHNraWxsZWQgYXJ0aXN0IGFuZCBjZXJ0aWZpZWQKZ2VuaXVzLCB3aXRoIGEgbWluZCB0aGF0IHdhbmRlcmVkIHNvIG11Y2ggaXQgY2FtZSBiYWNrIHdpdGggc291dmVuaXJzLgoKTGVvbmFyZCdzIGJvb2tzIHdlcmUgZnVsbCBvZiBza2V0Y2hlcy0tb2Yga2l0dGVucywgb2YgdGhlIHdheSB3YXRlciBmbG93cywKb2YgdGhlIHdpdmVzIG9mIGluZmx1ZW50aWFsIEFua2gtTW9ycG9ya2lhbiBtZXJjaGFudHMgd2hvc2UgcG9ydHJhaXRzIGhhZApwcm92aWRlZCBoaXMgbWVhbnMgb2YgbWFraW5nIGEgbGl2aW5nLiAgQnV0IExlb25hcmQgaGFkIGJlZW4gYSBnZW5pdXMgYW5kCndhcyBkZWVwbHkgc2Vuc2l0aXZlIHRvIHRoZSB3b25kZXJzIG9mIHRoZSB3b3JsZCwgc28gdGhlIG1hcmdpbnMgd2VyZSBmdWxsCm9mIGRldGFpbGVkIGRvb2RsZXMgb2Ygd2hhdGV2ZXIgd2FzIG9uIHRoaXMgbWluZCBhdCB0aGUgbW9tZW50LS12YXN0CndhdGVyLXBvd2VyZWQgZW5naW5lcyBmb3IgYnJpbmdpbmcgZG93biBjaXR5IHdhbGxzIG9uIHRoZSBoZWFkcyBvZiB0aGUKZW5lbXksIG5ldyB0eXBlcyBvZiBzaWVnZSBndW5zIGZvciBwdW1waW5nIGZsYW1pbmcgb2lsIG92ZXIgdGhlIGVuZW15LApndW5wb3dkZXIgcm9ja2V0cyB0aGF0IHNob3dlcmVkIHRoZSBlbmVteSB3aXRoIGJ1cm5pbmcgcGhvc3Bob3JvdXMsIGFuZApvdGhlciBtYW51ZmFjdHVyZXMgb2YgdGhlIEFnZSBvZiBSZWFzb24uCgpBbmQgdGhlcmUgaGFkIGJlZW4gc29tZXRoaW5nIGVsc2UuICBUaGUgTGlicmFyaWFuIGhhZCBub3RpY2VkIGl0IGluCnBhc3Npbmcgb25jZSBiZWZvcmUsIGFuZCBoYWQgYmVlbiBzbGlnaHRseSBwdXp6bGVkIGJ5IGl0LiAgSXQgc2VlbWVkIG91dApvZiBwbGFjZS4oMSkKCigxKSBBbmQgZGlkbid0IGFwcGVhciB0byBkbyBhbnl0aGluZyB0byB0aGUgZW5lbXkgL2F0IGFsbC8uCgogIFtTb3VsIE11c2ljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxNTIgKG11Y2ggb2YgdGhlIHN0b3J5IGNvbmNlcm5zICJNdXNpYyBXaXRoIFJvY2tzIEluIikKJXBhc3NhZ2UgOApTb21lIHJlbGlnaW9ucyBzYXkgdGhhdCB0aGUgdW5pdmVyc2Ugd2FzIHN0YXJ0ZWQgd2l0aCBhIHdvcmQsIGEgc29uZywKYSBkYW5jZSwgYSBwaWVjZSBvZiBtdXNpYy4gIFRoZSBMaXN0ZW5pbmcgTW9ua3Mgb2YgdGhlIFJhbXRvcHMgaGF2ZQp0cmFpbmVkIHRoZWlyIGhlYXJpbmcgdW50aWwgdGhleSBjYW4gdGVsbCB0aGUgdmFsdWUgb2YgYSBwbGF5aW5nIGNhcmQgYnkKbGlzdGVuaW5nIHRvIGl0LCBhbmQgaGF2ZSBtYWRlIGl0IHRoZWlyIHRhc2sgdG8gbGlzdGVuIGludGVudGx5IHRvIHRoZQpzdWJ0bGUgc291bmRzIG9mIHRoZSB1bml2ZXJzZSB0byBwaWVjZSB0b2dldGhlciwgZnJvbSB0aGUgZm9zc2lsZSBlY2hvZXMsCnRoZSB2ZXJ5IGZpcnN0IG5vaXNlcy4KClRoZXJlIHdhcyBjZXJ0YWlubHksIHRoZXkgc2F5LCBhIHZlcnkgc3RyYW5nZSBub2lzZSBhdCB0aGUgYmVnaW5uaW5nIG9mCmV2ZXJ5dGhpbmcuCgpCdXQgdGhlIGtlZW5lc3QgZWFycyAodGhlIG9uZXMgd2hvIHdpbiBtb3N0IGF0IHBva2VyKSwgd2hvIGxpc3RlbiB0byB0aGUKZnJvemVuIGVjaG9lcyBpbiB0aGUgYW1tb25pdGVzIGFuZCBhbWJlciwgc3dlYXIgdGhleSBjYW4gZGV0ZWN0IHNvbWUgdGlueQpzb3VuZHMgYmVmb3JlIHRoYXQuCgpJdCBzb3VuZGVkLCB0aGV5IHNheSwgbGlrZSBzb21lb25lIGNvdW50aW5nOiAgT25lLCBUd28sIFRocmVlLCBGb3VyLgoKVGhlIHZlcnkgYmVzdCBvbmUsIHdobyBsaXN0ZW5lZCB0byBiYXNhbHQsIHNhaWQgaGUgdGhvdWdodCBoZSBjb3VsZCBtYWtlCm91dCwgdmVyeSBmYWludGx5LCBzb21lIG51bWJlcnMgdGhhdCBjYW1lIGV2ZW4gZWFybGllci4KCldoZW4gdGhleSBhc2tlZCBoaW0gd2hhdCBpdCB3YXMsIGhlIHNhaWQ6ICAiSXQgc291bmRzIGxpa2UgT25lLCBUd28uIgoKICBbU291bCBNdXNpYywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjI3CiVwYXNzYWdlIDkKVGhlIERlYXRoIG9mIFJhdHMgcHV0IGhpcyBub3NlIGluIGhpcyBwYXdzLiAgSXQgd2FzIGEgbG90IGVhc2llciB3aXRoCnJhdHMuKDEpCgooMSkgUmF0cyBoYWQgZmVhdHVyZWQgbGFyZ2VseSBpbiB0aGUgaGlzdG9yeSBvZiBBbmtoLU1vcnBvcmsuICBTaG9ydGx5CmJlZm9yZSB0aGUgUGF0cmljaWFuIGNhbWUgdG8gcG93ZXIgdGhlcmUgd2FzIGEgdGVycmlibGUgcGxhZ3VlIG9mIHJhdHMuClRoZSBjaXR5IGNvdW5jaWwgY291bnRlcmVkIGl0IGJ5IG9mZmVyaW5nIHR3ZW50eSBwZW5jZSBmb3IgZXZlcnkgcmF0CnRhaWwuICBUaGlzIGRpZCwgZm9yIGEgd2VlayBvciB0d28sIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHJhdHMtLWFuZCB0aGVuCnBlb3BsZSB3ZXJlIHN1ZGRlbmx5IHF1ZXVlaW5nIHVwIHdpdGggdGFpbHMsIHRoZSBjaXR5IHRyZWFzdXJ5IHdhcyBiZWluZwpkcmFpbmVkLCBhbmQgbm8gb25lIHNlZW1lZCB0byBiZSBkb2luZyBtdWNoIHdvcmsuICBBbmQgdGhlcmUgL3N0aWxsLwpzZWVtZWQgdG8gYmUgYSBsb3Qgb2YgcmF0cyBhcm91bmQuICBMb3JkIFZldGluYXJpIGhhZCBsaXN0ZW5lZCBjYXJlZnVsbHkKd2hpbGUgdGhlIHByb2JsZW0gd2FzIGV4cGxhaW5lZCwgYW5kIGhhZCBzb2x2ZWQgdGhlIHRoaW5nIHdpdGggb25lCm1lbW9yYWJsZSBwaHJhc2Ugd2hpY2ggc2FpZCBhIGxvdCBhYm91dCBoaW0sIGFib3V0IHRoZSBmb2xseSBvZiBib3VudHkKb2ZmZXJzLCBhbmQgYWJvdXQgdGhlIG5hdHVyYWwgaW5zdGluY3Qgb2YgQW5raC1Nb3Jwb3JraWFucyBpbiBhbnkKc2l0dWF0aW9uIGludm9sdmluZyBtb25leTogICJUYXggdGhlIHJhdCBmYXJtcy4iCgogIFtTb3VsIE11c2ljLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMzEzLTMxNCAoRHJvbmdvIGFuZCBCaWcgTWFkIEFkcmlhbiBhcmUgc3R1ZGVudHMpCiVwYXNzYWdlIDEwClRoZSBBcmNoY2hhbmNlbGxvciBwb2xpc2hlZCB0aGlzIHN0YWZmIGFzIGhlIHdhbGtlZCBhbG9uZy4gIEl0IHdhcyBhCnBhcnRpY3VsYXJseSBnb29kIG9uZSwgc2l4IGZlZXQgbG9uZyBhbmQgcXVpdGUgbWFnaWNhbC4gIE5vdCB0aGF0IGhlIHVzZWQKbWFnaWMgdmVyeSBtdWNoLiAgSW4gaGlzIGV4cGVyaWVuY2UsIGFueXRoaW5nIHRoYXQgY291bGRuJ3QgYmUgZGlzcG9zZWQgb2YKd2l0aCBhIGNvdXBsZSBvZiB3aGFja3MgZnJvbSBzaXggZmVldCBvZiBvYWsgd2FzIHByb2JhYmx5IGltbXVuZSB0byBtYWdpYwphcyB3ZWxsLgoKIkRvbid0IHlvdSB0aGluayB3ZSBzaG91bGQgaGF2ZSBicm91Z2h0IHRoZSBzZW5pb3Igd2l6YXJkcywgc2lyPyIgc2FpZApQb25kZXIsIHN0cnVnZ2xpbmcgdG8ga2VlcCB1cC4KCiJJJ20gYWZyYWlkIHRoYXQgdGFraW5nIHRoZW0gYWxvbmcgaW4gdGhlaXIgcHJlc2VudCBzdGF0ZSBvZiBtaW5kIHdvdWxkCm9ubHkgbWFrZSB3aGF0IGhhcHBlbnMiLS1SaWRjdWxseSBzb3VnaHQgZm9yIGEgdXNlZnVsIHBocmFzZSwgYW5kIHNldHRsZWQKZm9yLS0iaGFwcGVuIHdvcnNlLiAgSSd2ZSBpbnNpc3RlZCB0aGV5IHN0YXkgaW4gY29sbGVnZS4iCgoiSG93IGFib3V0IERyb25nbyBhbmQgdGhlIG90aGVycz8iIHNhaWQgUG9uZGVyIGhvcGVmdWxseS4KCiJXb3VsZCB0aGV5IGJlIGFueSBnb29kIGluIHRoZSBldmVudCBvZiBhIHRoYXVtYXR1cmdpY2FsIGRpbWVuc2lvbiByaXAgb2YKZW5vcm1vdXMgcHJvcG9ydGlvbnM/IiBzYWlkIFJpZGN1bGx5LiAgIkkgcmVtZW1iZXIgcG9vciBNci4gSG9uZy4gIE9uZQptaW51dGUgaGUgd2FzIGRpc2hpbmcgdXAgYW4gb3JkZXIgb2YgZG91YmxlIGNvZCBhbmQgbXVzaHkgcGVhcywgdGhlCm5leHQgLi4uIgoKIkthYm9vbT8iIHNhaWQgUG9uZGVyLgoKIkthYm9vbT8iIHNhaWQgUmlkY3VsbHksIGZvcmNpbmcgaGlzIHdheSB1cCB0aGUgY3Jvd2RlZCBzdHJlZXQuICAiTm90CnRoYXQgSSBoZWFyZCB0ZWxsLiAgTW9yZSBsaWtlICdBYWFhZXJycnItc2NyZWFtLWdyaXN0bGUtIGdyaXN0bGUtZ3Jpc3RsZS0KY3JhY2snIGFuZCBhIHNob3dlciBvZiBmcmllZCBmb29kLiAgQmlnIE1hZCBBZHJpYW4gYW5kIGhpcyBmcmllbmRzIGFueQpnb29kIHdoZW4gdGhlIGNoaXBzIGFyZSBkb3duPyIKCiJVbS4gIFByb2JhYmx5IG5vdCwgQXJjaGNoYW5jZWxsb3IuIgoKIkNvcnJlY3QuICBQZW9wbGUgc2hvdXQgYW5kIHJ1biBhYm91dC4gIFRoYXQgbmV2ZXIgZGlkIGFueSBnb29kLiAgQSBwb2NrZXQKZnVsbCBvZiBkZWNlbnQgc3BlbGxzIGFuZCBhIHdlbGwtY2hhcmdlZCBzdGFmZiB3aWxsIGdldCB5b3Ugb3V0IG9mIHRyb3VibGUKbmluZSB0aW1lcyBvdXQgb2YgdGVuLiIKCiJOaW5lIHRpbWVzIG91dCBvZiB0ZW4/IgoKIkNvcnJlY3QuIgoKIkhvdyBtYW55IHRpbWVzIGhhdmUgeW91IGhhZCB0byByZWx5IG9uIHRoZW0sIHNpcj8iCgoiV2VsbCAuLi4gdGhlcmUgd2FzIE1yLiBIb25nIC4uLiB0aGF0IGJ1c2luZXNzIHdpdGggdGhlIHRoaW5nIGluIHRoZQpCdXJzYXIncyB3YXJkcm9iZSAuLi4gdGhhdCBkcmFnb24sIHlvdSByZW1lbWJlciAuLi4iICBSaWRjdWxseSdzIGxpcHMKbW92ZWQgc2lsZW50bHkgYXMgaGUgY291bnRlZCBvbiBoaXMgZmluZ2Vycy4gICJOaW5lIHRpbWVzLCBzbyBmYXIuIgoKIkl0IHdvcmtlZCBldmVyeSB0aW1lLCBzaXI/IgoKIkFic29sdXRlbHkhICBTbyB0aGVyZSdzIG5vIG5lZWQgdG8gd29ycnkuICBHYW5nd2F5ISAgV2l6YXJkIGNvbWluJwp0aHJvdWdoLiIKCiAgW1NvdWwgTXVzaWMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDMzOQolcGFzc2FnZSAxMQpUaGUgd2l6YXJkcyB3ZW50IHJpZ2lkIGFzIHRoZSBob3dsIHJhbmcgdGhyb3VnaCB0aGUgYnVpbGRpbmcuICBJdCB3YXMKc2xpZ2h0bHkgYW5pbWFsIGJ1dCBhbHNvIG1pbmVyYWwsIG1ldGFsbGljLCBlZGdlZCBsaWtlIGEgc2F3LgoKRXZlbnR1YWxseSB0aGUgTGVjdHVyZXIgaW4gUmVjZW50IFJ1bmVzIHNhaWQsICJPZiBjb3Vyc2UsIGp1c3QgYmVjYXVzZQp3ZSd2ZSBoZWFyZCBhIHNwaW5lLWNoaWxsaW5nIGJsb29kLWN1cmRsaW5nIHNjcmVhbSBvZiB0aGUgc29ydCB0byBtYWtlCnlvdXIgdmVyeSBtYXJyb3cgZnJlZXplIGluIHlvdXIgYm9uZXMgZG9lc24ndCBhdXRvbWF0aWNhbGx5IG1lYW4gdGhlcmUncwphbnl0aGluZyB3cm9uZy4iCgpUaGUgd2l6YXJkcyBsb29rZWQgb3V0IGludG8gdGhlIGNvcnJpZG9yLgoKIkl0IGNhbWUgZnJvbSBkb3duc3RhaXJzIHNvbWV3aGVyZSwiIHNhaWQgdGhlIENoYWlyIG9mIEluZGVmaW5pdGUgU3R1ZGllcywKaGVhZGluZyBmb3IgdGhlIHN0YWlyY2FzZS4KCiJTbyB3aHkgYXJlIHlvdSBnb2luZyAvdXBzdGFpcnMvPyIKCiJCZWNhdXNlIEknbSBub3QgZGFmdCEiCgoiQnV0IGl0IG1pZ2h0IGJlIHNvbWUgdGVycmlibGUgZW1hbmF0aW9uISIKCiJZb3UgZG9uJ3Qgc2F5PyIgc2FpZCB0aGUgQ2hhaXIsIHN0aWxsIGFjY2VsZXJhdGluZy4KCiJBbGwgcmlnaHQsIHBsZWFzZSB5b3Vyc2VsZi4gIFRoYXQncyB0aGUgc3R1ZGVudHMgZmxvb3IgdXAgdGhlcmUuIgoKIkFoLCBFci0tIgoKVGhlIENoYWlyIGNhbWUgZG93biBzbG93bHksIG9jY2FzaW9uYWxseSBnbGFuY2luZyBmZWFyZnVsbHkgdXAgdGhlIHN0YWlycy4KCiAgW1NvdWwgTXVzaWMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQolZSB0aXRsZQojCiMKIwoldGl0bGUgSW50ZXJlc3RpbmcgVGltZXMgKDEwKQojIHAuMSAoZm9vdG5vdGUpCiVwYXNzYWdlIDEKV2hhdGV2ZXIgaGFwcGVucywgdGhleSBzYXkgYWZ0ZXJ3YXJkcywgaXQgbXVzdCBoYXZlIGJlZW4gZmF0ZS4gIFBlb3BsZSBhcmUKYWx3YXlzIGEgbGl0dGxlIGNvbmZ1c2VkIGFib3V0IHRoaXMsIGFzIHRoZXkgYXJlIGluIHRoZSBjYXNlIG9mIG1pcmFjbGVzLgpXaGVuIHNvbWVvbmUgaXMgc2F2ZWQgZnJvbSBjZXJ0YWluIGRlYXRoIGJ5IGEgc3RyYW5nZSBjb25jYXRlbmF0aW9uIG9mCmNpcmN1bXN0YW5jZXMsIHRoZXkgc2F5IHRoYXQncyBhIG1pcmFjbGUuICBCdXQgb2YgY291cnNlIGlmIHNvbWVvbmUgaXMKa2lsbGVkIGJ5IGEgZnJlYWsgY2hhaW4gb2YgZXZlbnRzLS10aGUgb2lsIHNwaWxsZWQganVzdCB0aGVyZSwgdGhlIHNhZmV0eQpmZW5jZSBicm9rZW4ganVzdCB0aGVyZS0tdGhhdCBtdXN0IGFsc28gYmUgYSBtaXJhY2xlLiAgSnVzdCBiZWNhdXNlIGl0J3MKbm90IG5pY2UgZG9lc24ndCBtZWFuIGl0J3Mgbm90IG1pcmFjdWxvdXMuCgogIFtJbnRlcmVzdGluZyBUaW1lcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTgKJXBhc3NhZ2UgMgoiT2gsIG5vLCIgc2FpZCB0aGUgTGVjdHVyZXIgaW4gUmVjZW50IFJ1bmVzLCBwdXNoaW5nIGhpcyBjaGFpciBiYWNrLiAgIk5vdAp0aGF0LiAgVGhhdCdzIG1lZGRsaW5nIHdpdGggdGhpbmdzIHlvdSBkb24ndCB1bmRlcnN0YW5kLiIKCiJXZWxsLCB3ZSAvYXJlLyB3aXphcmRzLCIgc2FpZCBSaWRjdWxseS4gICJXZSdyZSBzdXBwb3NlZCB0byBtZWRkbGUgd2l0aAp0aGluZ3Mgd2UgZG9uJ3QgdW5kZXJzdGFuZC4gIElmIHdlIGh1bmcgYXJvdW5kIHdhaXRpbicgdGlsbCB3ZSB1bmRlcnN0b29kCnRoaW5ncyB3ZSdkIG5ldmVyIGdldCBhbnl0aGluZyBkb25lLiIKCiAgW0ludGVyZXN0aW5nIFRpbWVzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiA0CiVwYXNzYWdlIDMKQWNjb3JkaW5nIHRvIHRoZSBwaGlsb3NvcGhlciBMeSBUaW4gV2hlZWRsZSwgY2hhb3MgaXMgZm91bmQgaW4gZ3JlYXRlc3QKYWJ1bmRhbmNlIHdoZXJldmVyIG9yZGVyIGlzIGJlaW5nIHNvdWdodC4gIEl0IGFsd2F5cyBkZWZlYXRzIG9yZGVyLCBiZWNhdXNlCml0IGlzIGJldHRlciBvcmdhbml6ZWQuCgogIFtJbnRlcmVzdGluZyBUaW1lcywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTQKJXBhc3NhZ2UgNApNYW55IHRoaW5ncyB3ZW50IG9uIGF0IFVuc2VlbiBVbml2ZXJzaXR5IGFuZCwgcmVncmV0dGFibHksIHRlYWNoaW5nIGhhZCB0bwpiZSBvbmUgb2YgdGhlbS4gIFRoZSBmYWN1bHR5IGhhZCBsb25nIGFnbyBjb25mcm9udGVkIHRoaXMgZmFjdCBhbmQgaGFkCnBlcmZlY3RlZCB2YXJpb3VzIGRldmljZXMgZm9yIGF2b2lkaW5nIGl0LiAgQnV0IHRoaXMgd2FzIHBlcmZlY3RseSBhbGwKcmlnaHQgYmVjYXVzZSwgdG8gYmUgZmFpciwgc28gaGFkIHRoZSBzdHVkZW50cy4KClRoZSBzeXN0ZW0gd29ya2VkIHF1aXRlIHdlbGwgYW5kLCBhcyBoYXBwZW5zIGluIHN1Y2ggY2FzZXMsIGhhZCB0YWtlbiBvbgp0aGUgc3RhdHVzIG9mIGEgdHJhZGl0aW9uLiAgTGVjdHVyZXMgY2xlYXJseSB0b29rIHBsYWNlLCBiZWNhdXNlIHRoZXkKd2VyZSBkb3duIHRoZXJlIG9uIHRoZSB0aW1ldGFibGUgaW4gYmxhY2sgYW5kIHdoaXRlLiAgVGhlIGZhY3QgdGhhdCBubyBvbmUKYXR0ZW5kZWQgd2FzIGFuIGlycmVsZXZhbnQgZGV0YWlsLiAgSXQgd2FzIG9jY2FzaW9uYWxseSBtYWludGFpbmVkIHRoYXQKdGhpcyBtZWFudCB0aGF0IHRoZSBsZWN0dXJlcyBkaWQgbm90IGluIGZhY3QgaGFwcGVuIGF0IGFsbCwgYnV0IG5vIG9uZSBldmVyCmF0dGVuZGVkIHRoZW0gdG8gZmluZCBvdXQgaWYgdGhpcyB3YXMgdHJ1ZS4gIEFueXdheSwgaXQgd2FzIGFyZ3VlZCAoYnkgdGhlClJlYWRlciBpbiBXb29sbHkgVGhpbmtpbmcoMSkpIHRoYXQgbGVjdHVyZXMgaGFkIHRha2VuIHBsYWNlIC9pbiBlc3NlbmNlLywKc28gdGhhdCB3YXMgYWxsIHJpZ2h0LCB0b28uCgpBbmQgdGhlcmVmb3JlIGVkdWNhdGlvbiBhdCB0aGUgVW5pdmVyc2l0eSBtb3N0bHkgd29ya2VkIGJ5IHRoZSBhZ2Utb2xkCm1ldGhvZCBvZiBwdXR0aW5nIGEgbG90IG9mIHlvdW5nIHBlb3BsZSBpbiB0aGUgdmljaW5pdHkgb2YgYSBsb3Qgb2YgYm9va3MKYW5kIGhvcGluZyB0aGF0IHNvbWV0aGluZyB3b3VsZCBwYXNzIGZyb20gb25lIHRvIHRoZSBvdGhlciwgd2hpbGUgdGhlCmFjdHVhbCB5b3VuZyBwZW9wbGUgcHV0IHRoZW1zZWx2ZXMgaW4gdGhlIHZpY2luaXR5IG9mIGlubnMgYW5kIHRhdmVybnMKZm9yIGV4YWN0bHkgdGhlIHNhbWUgcmVhc29uLgoKKDEpIFdoaWNoIGlzIGxpa2UgRnV6enkgTG9naWMsIG9ubHkgbGVzcyBzby4KCiAgW0ludGVyZXN0aW5nIFRpbWVzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyMCAoc3BlYWtlciBpcyBBcmNoY2hhbmNlbGxvciBSaWRjdWxseTsgc2FkLCBob3BlbGVzcyBwZXJzb24gaXMgUmluY2V3aW5kKQolcGFzc2FnZSA1CiJXaXp6YXJkPyIgaGUgc2FpZC4gICJXaGF0IGtpbmQgb2Ygc2FkLCBob3BlbGVzcyBwZXJzb24gbmVlZHMgdG8gd3JpdGUKV0laWkFSRCBvbiB0aGVpciBoYXQ/IgoKICBbSW50ZXJlc3RpbmcgVGltZXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDExMwolcGFzc2FnZSA2ClNlbGYtZG91YnQgd2FzIHNvbWV0aGluZyBub3QgcmVndWxhcmx5IGVudGVydGFpbmVkIHdpdGhpbiB0aGUgQ29oZW4gY3Jhbml1bS4KV2hlbiB5b3UncmUgdHJ5aW5nIHRvIGNhcnJ5IGEgc3RydWdnbGluZyB0ZW1wbGUgbWFpZGVuIGFuZCBhIHNhY2sgb2YgbG9vdGVkCnRlbXBsZSBnb29kcyBpbiBvbmUgaGFuZCBhbmQgZmlnaHQgb2ZmIGhhbGYgYSBkb3plbiBhbmdyeSBwcmllc3RzIHdpdGggdGhlCm90aGVyIHRoZXJlIGlzIGxpdHRsZSB0aW1lIGZvciByZWZsZWN0aW9uLiAgTmF0dXJhbCBzZWxlY3Rpb24gc2F3IHRvIGl0CnRoYXQgcHJvZmVzc2lvbmFsIGhlcm9lcyB3aG8gYXQgYSBjcnVjaWFsIG1vbWVudCB0ZW5kZWQgdG8gYXNrIHRoZW1zZWx2ZXMKcXVlc3Rpb25zIGxpa2UgIldoYXQgaXMgdGhlIHB1cnBvc2Ugb2YgbGlmZT8iIHZlcnkgcXVpY2tseSBsYWNrZWQgYm90aC4KCiAgW0ludGVyZXN0aW5nIFRpbWVzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxMTMgKHNhbWUgcGFnZSBhcyBwcmV2aW91cyBwYXNzYWdlLi4uKQolcGFzc2FnZSA3CkNvaGVuJ3MgZmF0aGVyIGhhZCB0YWtlbiBoaW0gdG8gYSBtb3VudGFpbiB0b3AsIHdoZW4gaGUgd2FzIG5vIG1vcmUgdGhhbiBhCmxhZCwgYW5kIGV4cGxhaW5lZCB0byBoaW0gdGhlIGhlcm8ncyBjcmVlZCBhbmQgdG9sZCBoaW0gdGhhdCB0aGVyZSB3YXMgbm8KZ3JlYXRlciBqb3kgdGhhbiB0byBkaWUgaW4gYmF0dGxlLgoKQ29oZW4gaGFkIHNlZW4gdGhlIGZsYXcgaW4gdGhpcyBzdHJhaWdodCBhd2F5LCBhbmQgYSBsaWZldGltZSdzIGV4cGVyaWVuY2UKaGFkIHJlaW5mb3JjZWQgaGlzIGJlbGllZiB0aGF0IGluIGZhY3QgYSBncmVhdGVyIGpveSB3YXMgdG8ga2lsbCB0aGUgL290aGVyLwpidWdnZXIgaW4gYmF0dGxlIGFuZCBlbmQgdXAgc2l0dGluZyBvbiBhIGhlYXAgb2YgZ29sZCBoaWdoZXIgdGhhbiB5b3VyCmhvcnNlLiAgSXQgd2FzIGFuIG9ic2VydmF0aW9uIHRoYXQgaGFkIHNlcnZlZCBoaW0gd2VsbC4KCiAgW0ludGVyZXN0aW5nIFRpbWVzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxNDQKJXBhc3NhZ2UgOAoiJ0RhbmcnPyIgaGUgc2FpZC4gICJXYXNzYXQgbWVhbj8gIEFuZCB3aGF0J3MgdGhpcyAnZGFybicgYW5kICdoZWNrJz8iCgoiVGhleSBhcmUgLi4uIC9jaXZpbGlzZWQvIHN3ZWFyd29yZHMuIiBzYWlkIE1yLiBTYXZlbG95LgoKIldlbGwsIHlvdSBjYW4gdGFrZSAnZW0gYW5kLS0iCgoiQWg/IiBzYWlkIE1yLiBTYXZlbG95LCByYWlzaW5nIGEgY2F1dGlvbmFyeSBmaW5nZXIuCgoiWW91IGNhbiBzaG92ZSB0aGVtIHVwLS0iCgoiQWg/IgoKIllvdSBjYW4tLSIKCiJBaD8iCgpUcnVja2xlIHNodXQgaGlzIGV5ZXMgYW5kIGNsZW5jaGVkIGhpcyBmaXN0cy4KCiJEYXJuIGl0IGFsbCB0byBoZWNrISIgaGUgc2hvdXRlZC4KCiJHb29kLCIgc2FpZCBNci4gU2F2ZWxveS4gICJUaGF0J3MgbXVjaCBiZXR0ZXIuIgoKICBbSW50ZXJlc3RpbmcgVGltZXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDIxOSAoc2ljOiAiRGVkZCIpCiVwYXNzYWdlIDkKVGhlIHRheG1hbiB3YXMgd2FybWluZyB0byBoaXMgbmV3IGpvYi4gIEhlJ2Qgd29ya2VkIG91dCB0aGF0IGFsdGhvdWdoIHRoZQpIb3JkZSwgYXMgaW5kaXZpZHVhbHMsIGhhZCBhY3F1aXJlZCBtb3VudGFpbnMgb2YgY2FzaCBpbiB0aGVpciBjYXJlZXJzIGFzCmJhcmJhcmlhbiBoZXJvZXMgdGhleSdkIGxvc3QgYWxtb3N0IGFsbCBvZiBpdCBlbmdhZ2luZyBpbiB0aGUgb3RoZXIKYWN0aXZpdGllcyAoaGUgbWVudGFsbHkgY2F0YWxvZ3VlZCB0aGVzZSBhcyBQdWJsaWMgUmVsYXRpb25zKSBuZWNlc3NhcnkgdG8KdGhlIHByb2Zlc3Npb24sIGFuZCB0aGVyZWZvcmUgd2VyZSBlbnRpdGxlZCB0byBxdWl0ZSBhIGNvbnNpZGVyYWJsZSByZWJhdGUuCgpUaGUgZmFjdCB0aGF0IHRoZXkgd2VyZSByZWdpc3RlcmVkIHdpdGggbm8gcmV2ZW51ZSBjb2xsZWN0aW5nIGF1dGhvcml0eQovYW55d2hlcmUvKDEpIHdhcyBlbnRpcmVseSBhIHNlY29uZGFyeSBwb2ludC4gIEl0IHdhcyB0aGUgcHJpbmNpcGxlIHRoYXQKY291bnRlZC4gIEFuZCB0aGUgaW50ZXJlc3QsIHRvbywgb2YgY291cnNlLgoKKDEpIEV4Y2VwdCBvbiBwb3N0ZXJzIHdpdGggbGVnZW5kcyBsaWtlICJXYW50ZWQtLURlZGQiLgoKICBbSW50ZXJlc3RpbmcgVGltZXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDI5NwolcGFzc2FnZSAxMAoiV2hhdCBkbyB3ZSBkbyBub3c/IiBzYWlkIE1yLiBTYXZlbG95LiAgIkRvIHdlIGRvIGEgYmF0dGxlIGNoYW50IG9yCnNvbWV0aGluZz8iCgoiV2UganVzdCB3YWl0LCIgc2FpZCBDb2hlbi4KCiJUaGVyZSdzIGEgbG90IG9mIHdhaXRpbmcgaW4gd2FyZmFyZSwiIHNhaWQgQm95IFdpbGxpZS4KCiJBaCwgeWVzLCIgc2FpZCBNci4gU2F2ZWxveS4gICJJJ3ZlIGhlYXJkIHBlb3BsZSBzYXkgdGhhdC4gIFRoZXkgc2F5CnRoZXJlJ3MgbG9uZyBwZXJpb2RzIG9mIGJvcmVkb20gZm9sbG93ZWQgYnkgc2hvcnQgcGVyaW9kcyBvZiBleGNpdGVtZW50LiIKCiJOb3QgcmVhbGx5LCIgc2FpZCBDb2hlbi4gICJJdCdzIG1vcmUgbGlrZSBzaG9ydCBwZXJpb2RzIG9mIHdhaXRpbmcKZm9sbG93ZWQgYnkgbG9uZyBwZXJpb2RzIG9mIGJlaW5nIGRlYWQuIgoKICBbSW50ZXJlc3RpbmcgVGltZXMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQolZSB0aXRsZQojCiMKIwoldGl0bGUgTWFza2VyYWRlICg5KQojIHBwLiA4MS04MiwgY29udGludWVkIG9uIHBwLiA4Ny04OSAoSGFycGVyIFRvcmNoIGVkaXRpb247IGFwcGFyZW50bHkKIyAgICAgICB0cmFuc2NyaWJlZCBmcm9tIHNvbWUgb3RoZXIgZWRpdGlvbiBiYXNlZCBvbiBxdW90ZSBtYXJrcyB1c2VkOwojICAgICAgIGEgZ3JlYXQgbnVtYmVyIG9mIHZlcnkgc2hvcnQgcGFyYWdyYXBocy0taXQgc3RyZXRjaGVzIGEgbG9uZyB3YXkKIyAgICAgICB3aGVuIHVzaW5nIGEgYmxhbmsgbGluZSB0byBzZXBhcmF0ZSBvbmUgcGFyYWdyYXBoIGZyb20gYW5vdGhlcjsKIyAgICAgICBvbmUgb21pdHRlZCBiaXQgaXMgdGhhdCBhZnRlciBHcmFubnkgc2h1ZmZsZXMgdGhlIGRlY2sgb2YgY2FyZHMKIyAgICAgICBhbmQgZGVhbHMgdHdvIHBva2VyIGhhbmRzLCBEZWF0aCBzd2FwcyB0aGVtLCBzdWdnZXN0aW5nIHRoYXQKIyAgICAgICBoZSBzdXNwZWN0ZWQgaGVyIG9mIGNoZWF0aW5nOyBpbml0aWFsIHRyYW5zY3JpcHRpb24gbGVmdCBvZmYKIyAgICAgICB0aGUgbW9zdCBpbnRlcmVzdGluZyBiaXQsIERlYXRoJ3Mgd2luayBhdCB0aGUgZW5kKQolcGFzc2FnZSAxCidNYXliZSB5b3UgY291bGQgLi4uIGhlbHAgdXM/JwoKJ1doYXQncyB3cm9uZz8nCgonSXQncyBteSBib3kgLi4uJwoKR3Jhbm55IG9wZW5lZCB0aGUgZG9vciBmYXJ0aGVyIGFuZCBzYXcgdGhlIHdvbWFuIHN0YW5kaW5nIGJlaGluZCBNci4gU2xvdC4KT25lIGxvb2sgYXQgaGVyIGZhY2Ugd2FzIGVub3VnaC4gIFRoZXJlIHdhcyBhIGJ1bmRsZSBpbiBoZXIgYXJtcy4KCkdyYW5ueSBzdGVwcGVkIGJhY2suICAnQnJpbmcgaGltIGluIGFuZCBsZXQgbWUgaGF2ZSBhIGxvb2sgYXQgaGltLicKClNoZSB0b29rIHRoZSBiYWJ5IGZyb20gdGhlIHdvbWFuLCBzYXQgZG93biBvbiB0aGUgcm9vbSdzIG9uZSBjaGFpciwgYW5kCnB1bGxlZCBiYWNrIHRoZSBibGFua2V0LiAgTmFubnkgT2dnIHBlZXJlZCBvdmVyIGhlciBzaG91bGRlci4KCidIbW0sJyBzYWlkIEdyYW5ueSwgYWZ0ZXIgYSB3aGlsZS4gIFNoZSBnbGFuY2VkIGF0IE5hbm55LCB3aG8gZ2F2ZSBhbgphbG1vc3QgaW1wZXJjZXB0aWJsZSBzaGFrZSBvZiBoZXIgaGVhZC4KCidUaGVyZSdzIGEgY3Vyc2Ugb24gdGhpcyBob3VzZSwgdGhhdCdzIHdoYXQgaXQgaXMsJyBzYWlkIFNsb3QuICAnTXkgYmVzdApjb3cncyBiZWVuIHRha2VuIG1vcnRhbGx5IHNpY2ssIHRvby4nCgonT2g/ICBZb3UgaGF2ZSBhIGNvd3NoZWQ/JyBzYWlkIEdyYW5ueS4gICdWZXJ5IGdvb2QgcGxhY2UgZm9yIGEgc2lja3Jvb20sCmEgY293c2hlZC4gIEl0J3MgdGhlIHdhcm10aC4gIFlvdSBiZXR0ZXIgc2hvdyBtZSB3aGVyZSBpdCBpcy4nCgonWW91IHdhbnQgdG8gdGFrZSB0aGUgYm95IGRvd24gdGhlcmU/JwoKJ1JpZ2h0IG5vdy4nCgogIFsuLi5dCgonSG93IG1hbnkgaGF2ZSB5b3UgY29tZSBmb3I/JwoKT05FLgoKJ1RoZSBjb3c/JwoKRGVhdGggc2hvb2sgaGlzIGhlYWQuCgonSXQgY291bGQgL2JlLyB0aGUgY293LicKCk5PLiAgVEhBVCBXT1VMRCBCRSBDSEFOR0lORyBISVNUT1JZLgoKJ0hpc3RvcnkgaXMgYWJvdXQgdGhpbmdzIGNoYW5naW5nLicKCk5PLgoKR3Jhbm55IHNhdCBiYWNrLgoKJ1RoZW4gSSBjaGFsbGVuZ2UgeW91IHRvIGEgZ2FtZS4gIFRoYXQncyB0cmFkaXRpb25hbC4gIFRoYXQncyAvYWxsb3dlZC8uJwoKRGVhdGggd2FzIHNpbGVudCBmb3IgYSBtb21lbnQuCgpUSElTIElTIFRSVUUuCgonR29vZC4nCgpDSEFMTEVOR0lORyBNRSBCWSBNRUFOUyBPRiBBIEdBTUUgSVMgQUxMT1dBQkxFLgoKIlllcy4iCgpIT1dFVkVSIC4uLiBZT1UgVU5ERVJTVEFORCBUSEFUIFRPIFdJTiBBTEwgWU9VIE1VU1QgR0FNQkxFIEFMTD8KCidEb3VibGUgb3IgcXVpdHM/ICBZZXMsIEkga25vdy4nCgpCVVQgTk9UIENIRVNTLgoKJ0Nhbid0IGFiaWRlIGNoZXNzLicKCk9SIENSSVBQTEUgTVIuIE9OSU9OLiAgSSdWRSBORVZFUiBCRUVOIEFCTEUgVE8gVU5ERVJTVEFORCBUSEUgUlVMRVMuCgonVmVyeSB3ZWxsLiAgSG93IGFib3V0IG9uZSBoYW5kIG9mIHBva2VyPyAgRml2ZSBjYXJkcyBlYWNoLCBubyBkcmF3cz8KU3VkZGVuIGRlYXRoLCBhcyB0aGV5IHNheS4nCgpEZWF0aCB0aG91Z2h0IGFib3V0IHRoaXMsIHRvby4KCllPVSBLTk9XIFRISVMgRkFNSUxZPwoKJ05vLicKClRIRU4gV0hZPwoKJ0FyZSB3ZSB0YWxraW5nIG9yIGFyZSB3ZSBwbGF5aW5nPycKCk9ILCBWRVJZIFdFTEwuCgogIFsuLi5dCgpHcmFubnkgbG9va2VkIGF0IGhlciBjYXJkcywgYW5kIHRocmV3IHRoZW0gZG93bi4KCkZPVVIgUVVFRU5TLiAgSE1NLiAgVEhBVCAvSVMvIFZFUlkgSElHSC4KCkRlYXRoIGxvb2tlZCBkb3duIGF0IGhpcyBjYXJkcywgYW5kIHRoZW4gdXAgaW50byBHcmFubnkncyBzdGVhZHksIGJsdWUtZXllZApnYXplLgoKTmVpdGhlciBtb3ZlZCBmb3Igc29tZSB0aW1lLgoKVGhlbiBEZWF0aCBsYWlkIHRoZSBoYW5kIG9uIHRoZSB0YWJsZS4KCkkgTE9TRSwgaGUgc2FpZC4gIEFMTCBJIEhBVkUgSVMgRk9VUiBPTkVTLgoKSGUgbG9va2VkIGJhY2sgaW50byBHcmFubnkncyBleWVzIGZvciBhIG1vbWVudC4gIFRoZXJlIHdhcyBhIGJsdWUgZ2xvdyBpbgp0aGUgZGVwdGggb2YgaGlzIGV5ZS1zb2NrZXRzLiAgTWF5YmUsIGZvciB0aGUgbWVyZXN0IGZyYWN0aW9uIG9mIGEgc2Vjb25kLApiYXJlbHkgbm90aWNlYWJsZSBldmVuIHRvIHRoZSBjbG9zZXN0IG9ic2VydmF0aW9uLCBvbmUgd2lua2VkIG9mZi4KCiAgW01hc2tlcmFkZSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gNjcgKEhhcnBlciBUb3JjaCBlZGl0aW9uOyBhcyBhYm92ZSwgdHJhbnNjcmliZWQgZnJvbSBzb21lIG90aGVyIGVkaXRpb24pCiVwYXNzYWdlIDIKVGhlIGxldHRlciBpbnNpZGUgd2FzIG9uIGEgc2hlZXQgb2YgdGhlIE9wZXJhIEhvdXNlJ3Mgb3duIG5vdGUgcGFwZXIuCkluIG5lYXQsIGNvcHBlcnBsYXRlIHdyaXRpbmcsIGl0IHNhaWQ6CgogIEFoYWhhaGFoYWhhISAgQWhhaGFoYWhhISAgQWFoYWhhaGEhCiAgICAgICAgICAgIEJFV0FSRSEhISEhCgogICAgICAgICAgWXJzIHNpbmNlcmVseQogICAgICAgICAgICAgIFRoZSBPcGVyYSBHaG9zdAoKJ1doYXQgc29ydCBvZiBwZXJzb24sJyBzYWlkIFNhbHplbGxhIHBhdGllbnRseSwgJ3NpdHMgZG93biBhbmQgL3dyaXRlcy8gYQptYW5pYWNhbCBsYXVnaD8gIEFuZCBhbGwgdGhvc2UgZXhjbGFtYXRpb24gbWFya3MsIHlvdSBub3RpY2U/ICBGaXZlPyAgQQpzdXJlIHNpZ24gb2Ygc29tZW9uZSB3aG8gd2VhcnMgaGlzIHVuZGVycGFudHMgb24gaGlzIGhlYWQuICBPcGVyYSBjYW4gZG8KdGhhdCB0byBhIG1hbi4nCgogICAgIFtNYXNrZXJhZGUsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAzMC0zMSAoSGFycGVyIFRvcmNoIGVkaXRpb24pCiVwYXNzYWdlIDMKQWduZXMgaGFkIHdva2VuIHVwIG9uZSBtb3JuaW5nIHdpdGggdGhlIGhvcnJpYmxlIHJlYWxpemF0aW9uIHRoYXQgc2hlJ2QKYmVlbiBzYWRkbGVkIHdpdGggYSBsb3ZlbHkgcGVyc29uYWxpdHkuICBJdCB3YXMgYXMgc2ltcGxlIGFzIHRoYXQuICBPaCwKYW5kIHZlcnkgZ29vZCBoYWlyLgoKSXQgd2Fzbid0IHNvIG11Y2ggdGhlIHBlcnNvbmFsaXR5LCBpdCB3YXMgdGhlICJidXQiIHBlb3BsZSBhbHdheXMgYWRkZWQKd2hlbiB0aGV5IHRhbGtlZCBhYm91dCBpdC4gIC9CdXQgc2hlJ3MgZ290IGEgbG92ZWx5IHBlcnNvbmFsaXR5LywgdGhleQpzYWlkLiAgSXQgd2FzIHRoZSBsYWNrIG9mIGNob2ljZSB0aGF0IHJhbmtsZWQuICBObyBvbmUgaGFkIGFza2VkIGhlciwKYmVmb3JlIHNoZSB3YXMgYm9ybiwgd2hldGhlciBzaGUgd2FudGVkIGEgbG92ZWx5IHBlcnNvbmFsaXR5IG9yIHdoZXRoZXIKc2hlJ2QgcHJlZmVyLCBzYXksIGEgbWlzZXJhYmxlIHBlcnNvbmFsaXR5IGJ1dCBhIGJvZHkgdGhhdCBjb3VsZCB0YWtlCnNpemUgbmluZSBpbiBkcmVzc2VzLiAgSW5zdGVhZCwgcGVvcGxlIHdvdWxkIHRha2UgcGFpbnMgdG8gdGVsbCBoZXIgdGhhdApiZWF1dHkgd2FzIG9ubHkgc2tpbi1kZWVwLCBhcyBpZiBhIG1hbiBldmVyIGZlbGwgZm9yIGFuIGF0dHJhY3RpdmUgcGFpcgpvZiBraWRuZXlzLgoKICBbTWFza2VyYWRlLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyNTgKJXBhc3NhZ2UgNAonQW5kIHdoYXQgY2FuIEkgZ2V0IHlvdSwgb2ZmaWNlcnM/JyBzaGUgc2FpZC4KCidPZmZpY2Vycz8gIFVzPycgc2FpZCB0aGUgQ291bnQgZGUgTm9iYmVzLiAgJ1doYXQgbWFrZXMgeW91IHRoaW5rIHdlJ3JlCndhdGNobWVuPycKCidIZSdzIGdvdCBhIGhlbG1ldCBvbiwnIE5hbm55IHBvaW50ZWQgb3V0LiAgJ0Fsc28sIGhlJ3MgZ290IGhpcyBiYWRnZQpwaW5uZWQgdG8gaGlzIGNvYXQuJwoKJ0kgL3RvbGQvIHlvdSB0byBwdXQgaXQgYXdheSEnIE5vYmJ5IGhpc3NlZC4gIEhlIGxvb2tlZCBhdCBOYW5ueSBhbmQKc21pbGVkIHVuZWFzaWx5LiAgJ01pbGl0J3J5IGNoaWMsJyBoZSBzYWlkLiAgJ0l0J3MganVzdCBhIGZhc2hpb24KYWNjZXNzb3J5LiAgQWN0dWFsbHksIHdlIGFyZSBnZW50bGVtZW4gb2YgbWVhbnMgYW5kIGhhdmUgbm90aGluZyB0byBkbwp3aXRoIHRoZSBjaXR5IFdhdGNoIHdoYXRzb2V2ZXIuJwoKJ1dlbGwsIC9nZW50bGVtZW4vLCB3b3VsZCB5b3UgbGlrZSBzb21lIHdpbmU/JwoKJ05vdCB3aGlsZSB3ZSBvbiBkdXR5LCB0J2Fua3MsJyBzYWlkIHRoZSB0cm9sbC4KCiAgW01hc2tlcmFkZSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjcgKEhhcnBlciBUb3JjaCBlZGl0aW9uKQolcGFzc2FnZSA1CkxhbmNyZSBoYWQgYWx3YXlzIGJyZWQgc3Ryb25nLCBjYXBhYmxlIHdvbWVuLiAgQSBMYW5jcmUgZmFybWVyIG5lZWRlZCBhCndpZmUgd2hvJ2QgdGhpbmsgbm90aGluZyBvZiBiZWF0aW5nIGEgd29sZiB0byBkZWF0aCB3aXRoIGhlciBhcHJvbiB3aGVuCnNoZSB3ZW50IG91dCB0byBnZXQgc29tZSBmaXJld29vZC4gIEFuZCwgd2hpbGUga2lzc2luZyBpbml0aWFsbHkgc2VlbWVkIHRvCmhhdmUgbW9yZSBjaGFybXMgdGhhbiBjb29rZXJ5LCBhIHN0b2xpZCBMYW5jcmUgbGFkIGxvb2tpbmcgZm9yIGEgYnJpZGUKd291bGQgYmVhciBpbiBtaW5kIGhpcyBmYXRoZXIncyBhZHZpY2UgdGhhdCBraXNzZXMgZXZlbnR1YWxseSBsb3N0IHRoZWlyCmZpcmUgYnV0IGNvb2tlcnkgdGVuZGVkIHRvIGdldCBldmVuIGJldHRlciBvdmVyIHRoZSB5ZWFycywgYW5kIGRpcmVjdCBoaXMKY291cnRpbmcgdG8gdGhvc2UgZmFtaWxpZXMgdGhhdCBjbGVhcmx5IHNob3dlZCBhIHRyYWRpdGlvbiBvZiBlbmpveWluZwp0aGVpciBmb29kLgoKICBbTWFza2VyYWRlLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyOAolcGFzc2FnZSA2Ck11c2ljIGFuZCBtYWdpYyBoYWQgYSBsb3QgaW4gY29tbW9uLiAgVGhleSB3ZXJlIG9ubHkgdHdvIGxldHRlcnMgYXBhcnQsCmZvciBvbmUgdGhpbmcuICBBbmQgeW91IGNvdWxkbid0IGRvIGJvdGguCgogIFtNYXNrZXJhZGUsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDMxCiVwYXNzYWdlIDcKU2hlJ2QgY2F1Z2h0IGhlcnNlbGYgc2F5aW5nICJwb290ISIgYW5kICJkYW5nISIgd2hlbiBzaGUgd2FudGVkIHRvIHN3ZWFyLAphbmQgdXNpbmcgcGluayB3cml0aW5nIHBhcGVyLgoKU2hlJ2QgZ290IGEgcmVwdXRhdGlvbiBmb3IgYmVpbmcgY2FsbSBhbmQgY2FwYWJsZSBpbiBhIGNyaXNpcy4KCk5leHQgdGhpbmcgc2hlIGtuZXcgc2hlJ2QgYmUgbWFraW5nIHNob3J0YnJlYWQgYW5kIGFwcGxlIHBpZXMgYXMgZ29vZCBhcwpoZXIgbW90aGVyJ3MsIGFuZCB0aGVuIHRoZXJlJ2QgYmUgbm8gaG9wZSBmb3IgaGVyLgoKU28gc2hlJ2QgaW50cm9kdWNlZCBQZXJkaXRhLiAgU2hlJ2QgaGVhcmQgc29tZXdoZXJlIHRoYXQgaW5zaWRlIGV2ZXJ5IGZhdAp3b21hbiB3YXMgYSB0aGluIHdvbWFuIHRyeWluZyB0byBnZXQgb3V0LCgxKSBzbyBzaGUnZCBuYW1lZCBoZXIgUGVyZGl0YS4KU2hlIHdhcyBhIGdvb2QgcmVwb3NpdG9yeSBmb3IgYWxsIHRob3NlIHRob3VnaHRzIHRoYXQgQWduZXMgY291bGRuJ3QgdGhpbmsKb24gYWNjb3VudCBvZiBoZXIgd29uZGVyZnVsIHBlcnNvbmFsaXR5LiAgUGVyZGl0YSB3b3VsZCB1c2UgYmxhY2sgd3JpdGluZwpwYXBlciBpZiBzaGUgY291bGQgZ2V0IGF3YXkgd2l0aCBpdCwgYW5kIHdvdWxkIGJlIGJlYXV0aWZ1bGx5IHBhbGUgaW5zdGVhZApvZiBlbWJhcnJhc3NpbmdseSBmbHVzaGVkLiAgUGVyZGl0YSB3YW50ZWQgdG8gYmUgYW4gaW50ZXJlc3RpbmdseSBsb3N0IHNvdWwKaW4gcGx1bS1jb2xvcmVkIGxpcHN0aWNrLiAgSnVzdCBvY2Nhc2lvbmFsbHksIHRob3VnaCwgQWduZXMgdGhvdWdodApQZXJkaXRhIHdhcyBhcyBkdW1iIGFzIHNoZSB3YXMuCgooMSkgT3IsIGF0IGxlYXN0LCBkeWluZyBmb3IgY2hvY29sYXRlLgoKICBbTWFza2VyYWRlLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxOTcgKGRyZXNzIHNob3AgcHJvcHJpZXRvciBoYXMganVzdCBzb2xkIGFuIGV4cGVuc2l2ZSBkcmVzcyB0byBHcmFubnkpCiVwYXNzYWdlIDgKU2hlIGxvb2tlZCBkb3duIGF0IHRoZSBtb25leSBpbiBoZXIgaGFuZC4KClNoZSBrbmV3IGFib3V0IG9sZCBtb25leSwgd2hpY2ggd2FzIHNvbWVob3cgaGFsbG93ZWQgYnkgdGhlIGZhY3QgdGhhdApwZW9wbGUgaGFkIGh1bmcgb24gdG8gaXQgZm9yIHllYXJzLCBhbmQgc2hlIGtuZXcgYWJvdXQgbmV3IG1vbmV5LCB3aGljaApzZWVtZWQgdG8gYmUgYmVpbmcgbWFkZSBieSBhbGwgdGhlc2UgdXBzdGFydHMgdGhhdCB3ZXJlIGZsb29kaW5nIGludG8gdGhlCmNpdHkgdGhlc2UgZGF5cy4gIEJ1dCB1bmRlciBoZXIgcG93ZGVyZWQgYm9zb20gc2hlIHdhcyBhbiBBbmtoLU1vcnBvcmsKc2hvcGtlZXBlciwgYW5kIGtuZXcgdGhhdCB0aGUgYmVzdCBraW5kIG9mIG1vbmV5IHdhcyB0aGUgc29ydCB0aGF0IHdhcyBpbgpoZXIgaGFuZCByYXRoZXIgdGhhbiBzb21lb25lIGVsc2Uncy4gIFRoZSBiZXN0IGtpbmQgb2YgbW9uZXkgd2FzIG1pbmUsCm5vdCB5b3Vycy4KCkJlc2lkZXMsIHNoZSB3YXMgYWxzbyBlbm91Z2ggb2YgYSBzbm9iIHRvIGNvbmZ1c2UgcnVkZW5lc3Mgd2l0aCBnb29kCmJyZWVkaW5nLiAgSW4gdGhlIHNhbWUgd2F5IHRoYXQgdGhlIHJlYWxseSByaWNoIGNhbiBuZXZlciBiZSBtYWQgKHRoZXkncmUKZWNjZW50cmljKSwgc28gdGhleSBjYW4gYWxzbyBuZXZlciBiZSBydWRlICh0aGV5J3JlIG91dHNwb2tlbiBhbmQKZm9ydGhyaWdodCkuCgogIFtNYXNrZXJhZGUsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAyODgtMjg5CiVwYXNzYWdlIDkKRGV0cml0dXMgcmVhY2hlZCBkb3duIGFuZCBwaWNrZWQgdXAgYW4gZXllIHBhdGNoLgoKIldoYXQgZCd5b3UgdGhpbmssIHRoZW4/IiBzYWlkIE5vYmJ5IHNjb3JuZnVsbHkuICAiWW91IHRoaW5rIGhlIHR1cm5lZCBpbnRvCmEgYmF0IGFuZCBmbGV3IGF3YXk/IgoKIkhhISAgSSBkbyBub3QgdCdpbmsgdGhhdCAnY29zIGl0IGlzIGluIC4uLiBjb25zaXN0IC4uLiBlbnQgd2l0aCBtb2Rlcm4KcG9saWNpbmcsIiBzYWlkIERldHJpdHVzLgoKIldlbGwsIC9JLyB0aGluaywiIHNhaWQgTm9iYnksICJ0aGF0IHdoZW4geW91IGhhdmUgcnVsZWQgb3V0IHRoZSBpbXBvc3NpYmxlLAp3aGF0IGlzIGxlZnQsIGhvd2V2ZXIgaW1wcm9iYWJsZSwgYWluJ3Qgd29ydGggaGFuZ2luZyBhcm91bmQgb24gYSBjb2xkIG5pZ2h0CndvbmRlcmluJyBhYm91dCB3aGVuIHlvdSBjb3VsZCBiZSBnZXR0aW5nIG9uIHRoZSBvdXRzaWRlIG9mIGEgYmlnIGRyaW5rLgpDb21lIG9uLiAgSSB3YW50IHRvIHRyeSBhIGxlZyBvZiB0aGUgZWxlcGhhbnQgdGhhdCBiaXQgbWUuIgoKIldhcyBkYXQgaXJvbnk/IgoKIlRoYXQgd2FzIG1ldGFwaG9yLiIKCiAgW01hc2tlcmFkZSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiVlIHRpdGxlCiMKIwojCiV0aXRsZSBGZWV0IG9mIENsYXkgKDE0KQolcGFzc2FnZSAxClJ1bW91ciBpcyBpbmZvcm1hdGlvbiBkaXN0aWxsZWQgc28gZmluZWx5IHRoYXQgaXQgY2FuIGZpbHRlciB0aHJvdWdoCmFueXRoaW5nLiAgSXQgZG9lcyBub3QgbmVlZCBkb29ycyBhbmQgd2luZG93cyAtLSBzb21ldGltZXMgaXQgZG9lcyBub3QgbmVlZApwZW9wbGUuICBJdCBjYW4gZXhpc3QgZnJlZSBhbmQgd2lsZCwgcnVubmluZyBmcm9tIGVhciB0byBlYXIgd2l0aG91dCBldmVyCnRvdWNoaW5nIGxpcHMuCgogIFtGZWV0IG9mIENsYXksIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDMzNyAoSGFycGVyIFRvcmNoIGVkaXRpb24pCiVwYXNzYWdlIDIKSXQgd2FzIGhhcmQgZW5vdWdoIHRvIGtpbGwgYSB2YW1waXJlLiAgWW91IGNvdWxkIHN0YWtlIHRoZW0gZG93biBhbmQgdHVybgp0aGVtIGludG8gZHVzdCBhbmQgdGVuIHllYXJzIGxhdGVyIHNvbWVvbmUgZHJvcHMgYSBkcm9wIG9mIGJsb29kIGluIHRoZQp3cm9uZyBwbGFjZSBhbmQgL2d1ZXNzIHdobydzIGJhY2svPyAgVGhleSByZXR1cm5lZCBtb3JlIHRpbWVzIHRoYW4gcmF3CmJyb2Njb2xpLgoKICBbRmVldCBvZiBDbGF5LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiA0CiVwYXNzYWdlIDMKUGVvcGxlIGxvb2sgZG93biBvbiBzdHVmZiBsaWtlIGdlb2dyYXBoeSBhbmQgbWV0ZW9yb2xvZ3ksIGFuZCBub3Qgb25seQpiZWNhdXNlIHRoZXkncmUgc3RhbmRpbmcgb24gb25lIGFuZCBiZWluZyBzb2FrZWQgYnkgdGhlIG90aGVyLiAgVGhleSBkb24ndApsb29rIHF1aXRlIGxpa2UgcmVhbCBzY2llbmNlLigxKSAgQnV0IGdlb2dyYXBoeSBpcyBvbmx5IHBoeXNpY3Mgc2xvd2VkCmRvd24gYW5kIHdpdGggYSBmZXcgdHJlZXMgc3R1Y2sgb24gaXQsIGFuZCBtZXRlb3JvbG9neSBpcyBmdWxsIG9mCmV4Y2l0aW5nbHkgZmFzaGlvbmFibGUgY2hhb3MgYW5kIGNvbXBsZXhpdHkuICBBbmQgc3VtbWVyIGlzbid0IGEgdGltZS4KSXQncyBhIHBsYWNlIGFzIHdlbGwuICBTdW1tZXIgaXMgYSBtb3ZpbmcgY3JlYXR1cmUgYW5kIGxpa2VzIHRvIGdvIHNvdXRoCmZvciB0aGUgd2ludGVyLgoKKDEpIFRoYXQgaXMgdG8gc2F5LCB0aGUgc29ydCB5b3UgY2FuIHVzZSB0byBnaXZlIHNvbWV0aGluZyB0aHJlZSBleHRyYQpsZWdzIGFuZCB0aGVuIGJsb3cgaXQgdXAuCgogIFtGZWV0IG9mIENsYXksIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDE5CiVwYXNzYWdlIDQKVXBzdGFpcnMsIFZpbWVzIHB1c2hlZCBvcGVuIGhpcyBvZmZpY2UgZG9vciBjYXJlZnVsbHkuICBUaGUgQXNzYXNzaW5zJwpHdWlsZCBwbGF5ZWQgdG8gcnVsZXMuICBZb3UgY291bGQgc2F5IHRoYXQgYWJvdXQgdGhlIGJhc3RhcmRzLiAgSXQgd2FzCnRlcnJpYmx5IGJhZCBmb3JtIHRvIGtpbGwgYSBieXN0YW5kZXIuICBBcGFydCBmcm9tIGFueXRoaW5nIGVsc2UsIHlvdQp3b3VsZG4ndCBnZXQgcGFpZC4gIFNvIHRyYXBzIGluIGhpcyBvZmZpY2Ugd2VyZSBvdXQgb2YgdGhlIHF1ZXN0aW9uLApiZWNhdXNlIHRvbyBtYW55IHBlb3BsZSB3ZXJlIGluIGFuZCBvdXQgb2YgaXQgZXZlcnkgZGF5LiAgRXZlbiBzbywgaXQKcGFpZCB0byBiZSBjYXJlZnVsLiAgVmltZXMgL3dhcy8gZ29vZCBhdCBtYWtpbmcgdGhlIGtpbmQgb2YgcmljaCBlbmVtaWVzCndobyBjb3VsZCBhZmZvcmQgdG8gZW1wbG95IGFzc2Fzc2lucy4gIFRoZSBhc3Nhc3NpbnMgaGFkIHRvIGJlIGx1Y2t5Cm9ubHkgb25jZSwgYnV0IFZpbWVzIGhhZCB0byBiZSBsdWNreSBhbGwgdGhlIHRpbWUuCgogIFtGZWV0IG9mIENsYXksIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDg2IChwYXNzYWdlIGNvbnRpbnVlcywgYWN0dWFsbHkgZmluZGluZyBhbiBpbWFnZSBpbiBkZWFkIG1hbidzIGV5ZXMpCiVwYXNzYWdlIDUKIkVyIC4uLiBoYXZlIHlvdSBldmVyIGhlYXJkIHRoZSBzdG9yeSBhYm91dCBkZWFkIG1lbidzIGV5ZXMsIHNpcj8iCgoiQXNzdW1lIEkgaGF2ZW4ndCBoYWQgYSBsaXRlcmFyeSBlZHVjYXRpb24sIExpdHRsZWJvdHRvbS4iCgoiV2VsbCAuLi4gdGhleSBzYXkgLi4uIgoKIi9XaG8vIHNheT8iCgoiL1RoZXkvLCBzaXIuICBZb3Uga25vdywgL3RoZXkvLiIKCiJUaGUgc2FtZSBwZW9wbGUgd2hvJ3JlIHRoZSAnZXZlcnlvbmUnIGluICdldmVyeW9uZSBrbm93cyc/ICBUaGUgcGVvcGxlCndobyBsaXZlIGluICd0aGUgY29tbXVuaXR5Jz8iCgoiWWVzLCBzaXIuICBJIHN1cHBvc2Ugc28sIHNpci4iCgpWaW1lcyB3YXZlZCBhIGhhbmQuICAiT2gsIC90aGVtLy4gIFdlbGwsIGdvIG9uLiIKCiJUaGV5IHNheSB0aGF0IHRoZSBsYXN0IHRoaW5nIGEgbWFuIHNlZXMgc3RheXMgaW1wcmludGVkIGluIGhpcyBleWVzLCBzaXIuIgoKIk9oLCAvdGhhdC8uICBUaGF0J3MganVzdCBhbiBvbGQgc3RvcnkuIgoKICBbRmVldCBvZiBDbGF5LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMTI3LTEyOAolcGFzc2FnZSA2CkV2ZXJ5b25lIGluIHRoZSBjaXR5IGxvb2tlZCBhZnRlciB0aGVtc2VsdmVzLiAgVGhhdCdzIHdoYXQgdGhlIGd1aWxkcyB3ZXJlCmZvci4gIFBlb3BsZSBiYW5kZWQgdG9nZXRoZXIgYWdhaW5zdCBvdGhlciBwZW9wbGUuICBUaGUgZ3VpbGQgbG9va2VkIGFmdGVyCnlvdSBmcm9tIHRoZSBjcmFkbGUgdG8gdGhlIGdyYXZlIG9yLCBpbiB0aGUgY2FzZSBvZiB0aGUgQXNzYXNzaW5zLCB0bwpvdGhlciBwZW9wbGUncyBncmF2ZXMuICBUaGV5IGV2ZW4gbWFpbnRhaW5lZCB0aGUgbGF3LCBvciBhdCBsZWFzdCB0aGV5IGhhZApkb25lLCBhZnRlciBhIGZhc2hpb24uICBUaGlldmluZyB3aXRob3V0IGEgbGljZW5zZSB3YXMgcHVuaXNoYWJsZSBieSBkZWF0aApmb3IgdGhlIGZpcnN0IG9mZmVuc2UuKDEpICBUaGUgVGhpZXZlcycgR3VpbGQgc2F3IHRvIHRoYXQuICBUaGUgYXJyYW5nZW1lbnQKc291bmRlZCB1bnJlYWwsIGJ1dCBpdCB3b3JrZWQuCgpJdCB3b3JrZWQgbGlrZSBhIG1hY2hpbmUuICBUaGF0IHdhcyBmaW5lIGV4Y2VwdCBmb3IgdGhlIG9jY2FzaW9uYWwgcGVvcGxlCndobyBnb3QgY2F1Z2h0IGluIHRoZSB3aGVlbHMuCgooMSkgVGhlIEFua2gtTW9ycG9yayB2aWV3IG9mIGNyaW1lIGFuZCBwdW5pc2htZW50IHdhcyB0aGF0IHRoZSBwZW5hbHR5IGZvcgp0aGUgZmlyc3Qgb2ZmZW5jZSBzaG91bGQgcHJldmVudCB0aGUgcG9zc2liaWxpdHkgb2YgYSBzZWNvbmQgb2ZmZW5zZS4KCiAgW0ZlZXQgb2YgQ2xheSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTI5LCBjb250aW51ZWQgcHAuIDEzMi0xMzMKJXBhc3NhZ2UgNwpWaW1lcyBzdHJ1Z2dsZWQgdG8gaGlzIGZlZXQsIHNob29rIGhpcyBoZWFkLCBhbmQgc2V0IG9mZiBhZnRlciBpdC4gIE5vCnRob3VnaHQgd2FzIGludm9sdmVkLiAgSXQgaXMgdGhlIGFuY2llbnQgaW5zdGluY3Qgb2YgdGVycmllcnMgYW5kCnBvbGljZW1lbiB0byBjaGFzZSBhbnl0aGluZyB0aGF0IHJ1bnMgYXdheS4KCiAgWy4uLl0KClZpbWVzIHBvdW5kZWQgdGhyb3VnaCB0aGUgZm9nIGFmdGVyIHRoZSBmbGVlaW5nIGZpZ3VyZS4gIEl0IHdhc24ndCBxdWl0ZQpzbyBmYXN0IGFzIGhpbSwgZGVzcGl0ZSB0aGUgdHdpbmdlcyBpbiBoaXMgbGVncyBhbmQgb25lIG9yIHR3byB3YXJuaW5nCnN0YWJzIGZyb20gaGlzIGxlZnQga25lZSwgYnV0IHdoZW5ldmVyIGhlIGNhbWUgY2xvc2UgdG8gaXQgc29tZSBtdWZmbGVkCnBlZGVzdHJpYW4gZ290IGluIHRoZSB3YXksIG9yIGEgY2FydCBwdWxsZWQgb3V0IGZyb20gYSBjcm9zcyBzdHJlZXQuKDEpCgooMSkgVGhpcyBhbHdheXMgaGFwcGVucyBpbiBhbnkgcG9saWNlIGNoYXNlIC9hbnl3aGVyZS8uICBBIGhlYXZpbHkgbGFkZW4KbG9ycnkgd2lsbCAvYWx3YXlzLyBwdWxsIG91dCBvZiBhIHNpZGUgYWxsZXkgaW4gZnJvbnQgb2YgdGhlIHB1cnN1aXQuICBJZgp2ZWhpY2xlcyBhcmVuJ3QgaW52b2x2ZWQsIHRoZW4gaXQnbGwgYmUgYSBtYW4gd2l0aCBhIHJhY2sgb2YgZ2FybWVudHMuCk9yIHR3byBtZW4gd2l0aCBhIGxhcmdlIHNoZWV0IG9mIGdsYXNzLiAgVGhlcmUncyBwcm9iYWJseSBzb21lIGtpbmQgb2YKc2VjcmV0IHNvY2lldHkgYmVoaW5kIGFsbCB0aGlzLgoKICBbRmVldCBvZiBDbGF5LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxNjUKJXBhc3NhZ2UgOApSb24gaGFkIGEgc21hbGwgZ3JheWlzaC1icm93biwgdG9ybi1lYXJlZCB0ZXJyaWVyIG9uIHRoZSBlbmQgb2YgYSBzdHJpbmcsCmFsdGhvdWdoIGluIHRydXRoIGl0IHdvdWxkIGJlIGhhcmQgZm9yIGFuIG9ic2VydmVyIHRvIGtub3cgZXhhY3RseSB3aG8Kd2FzIGxlYWRpbmcgd2hvbSBhbmQgd2hvLCB3aGVuIHB1c2ggY2FtZSB0byBzaG92ZSwgd291bGQgYmUgdGhlIG9uZSB0bwpmb2xkIGF0IHRoZSBrbmVlcyBpZiB0aGUgb3RoZXIgc2hvdXRlZCAiU2l0ISIgIEJlY2F1c2UsIGFsdGhvdWdoIHRyYWluZWQKY2FuaW5lcyBhcyBhaWRzIGZvciB0aG9zZSBiZXJlZnQgb2Ygc2lnaHQsIGFuZCBldmVuIG9mIGhlYXJpbmcsIGhhdmUKZnJlcXVlbnRseSBiZWVuIHVzZWQgdGhyb3VnaG91dCB0aGUgdW5pdmVyc2UsIEZvdWwgT2xlIFJvbiB3YXMgdGhlIGZpcnN0CnBlcnNvbiBldmVyIHRvIG93biBhIFRoaW5raW5nLUJyYWluIERvZy4KCiAgW0ZlZXQgb2YgQ2xheSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDE3My0xNzQKJXBhc3NhZ2UgOQpTYW11ZWwgVmltZXMgZHJlYW1lZCBhYm91dCBDbHVlcy4KCkhlIGhhZCBhIGphdW5kaWNlZCB2aWV3IG9mIENsdWVzLiAgSGUgaW5zdGluY3RpdmVseSBkaXN0cnVzdGVkIHRoZW0uICBUaGV5CmdvdCBpbiB0aGUgd2F5LgoKQW5kIGhlIGRpc3RydXN0ZWQgdGhlIGtpbmQgb2YgcGVyc29uIHdobydkIHRha2Ugb25lIGxvb2sgYXQgYW5vdGhlciBtYW4KYW5kIHNheSBpbiBhIGxvcmRseSB2b2ljZSB0byBoaXMgY29tcGFuaW9uLCAiQWgsIG15IGRlYXIgc2lyLiAgSSBjYW4gdGVsbAp5b3Ugbm90aGluZyBleGNlcHQgdGhhdCBoZSBpcyBhIGxlZnQtaGFuZGVkIHN0b25lbWFzb24gd2hvIGhhcyBzcGVudCBzb21lCnllYXJzIGluIHRoZSBtZXJjaGFudCBuYXZ5IGFuZCBoYXMgcmVjZW50bHkgZmFsbGVuIG9uIGhhcmQgdGltZXMsIiBhbmQKdGhlbiB1bnJvbGwgYSBsb3Qgb2Ygc3VwZXJjaWxpb3VzIGNvbW1lbnRhcnkgYWJvdXQgY2FsbHVzZXMgYW5kIHN0YW5jZQphbmQgdGhlIHN0YXRlIG9mIGEgbWFuJ3MgYm9vdHMsIHdoZW4gL2V4YWN0bHkgdGhlIHNhbWUvIGNvbW1lbnRzIGNvdWxkCmFwcGx5IHRvIGEgbWFuIHdobyB3YXMgd2VhcmluZyBoaXMgb2xkIGNsb3RoZXMgYmVjYXVzZSBoZSdkIGJlZW4gZG9pbmcgYQpzcG90IG9mIGhvbWUgYnJpY2tsYXlpbmcgZm9yIGEgbmV3IGJhcmJlY3VlIHBpdCwgYW5kIGhhZCBiZWVuIHRhdHRvb2VkCm9uY2Ugd2hlbiBoZSB3YXMgZHJ1bmsgYW5kIHNldmVudGVlbigxKSBhbmQgaW4gZmFjdCBnb3Qgc2Vhc2ljayBvbiBhIHdldApwYXZlbWVudC4gIFdoYXQgYXJyb2dhbmNlISAgV2hhdCBhbiBpbnN1bHQgdG8gdGhlIHJpY2ggYW5kIGNoYW90aWMgdmFyaWV0eQpvZiB0aGUgaHVtYW4gZXhwZXJpZW5jZS4KCkl0IHdhcyB0aGUgc2FtZSB3aXRoIG1vcmUgc3RhdGljIGV2aWRlbmNlLiAgVGhlIGZvb3RwcmludHMgaW4gdGhlCmZsb3dlcmJlZCB3ZXJlIHByb2JhYmx5IC9pbiB0aGUgcmVhbCB3b3JsZC8gbGVmdCBieSB0aGUgd2luZG93LWNsZWFuZXIuClRoZSBzY3JlYW0gaW4gdGhlIG5pZ2h0IHdhcyBxdWl0ZSBsaWtlbHkgYSBtYW4gZ2V0dGluZyBvdXQgb2YgYmVkIGFuZApzdGVwcGluZyBzaGFycGx5IG9uIGFuIHVwdHVybmVkIGhhaXJicnVzaC4KClRoZSByZWFsIHdvcmxkIHdhcyBmYXIgdG9vIC9yZWFsLyB0byBsZWF2ZSBuZWF0IGxpdHRsZSBoaW50cy4gIEl0IHdhcyBmdWxsCm9mIHRvbyBtYW55IHRoaW5ncy4gIEl0IHdhc24ndCBieSBlbGltaW5hdGluZyB0aGUgaW1wb3NzaWJsZSB0aGF0IHlvdSBnb3QKYXQgdGhlIHRydXRoLCBob3dldmVyIGltcHJvYmFibGU7IGl0IHdhcyBieSB0aGUgbXVjaCBoYXJkZXIgcHJvY2VzcyBvZgplbGltaW5hdGluZyB0aGUgcG9zc2liaWxpdGllcy4gIFlvdSB3b3JrZWQgYXdheSwgcGF0aWVudGx5IGFza2luZyBxdWVzdGlvbnMKYW5kIGxvb2tpbmcgaGFyZCBhdCB0aGluZ3MuICBZb3Ugd2Fsa2VkIGFuZCB0YWxrZWQsIGFuZCBpbiB5b3VyIGhlYXJ0IHlvdQpqdXN0IGhvcGVkIGxpa2UgaGVsbCB0aGF0IHNvbWUgYnVnZ2VyJ3MgbmVydmUnZCBjcmFjayBhbmQgaGUnZCBnaXZlIGhpbXNlbGYKdXAuCgooMSkgVGhlc2UgdGVybXMgYXJlIG9mdGVuIHN5bm9ueW1vdXMuCgogIFtGZWV0IG9mIENsYXksIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDE4OAolcGFzc2FnZSAxMAoiTGlmZSBoYXMgY2VydGFpbmx5IGJlZW4gbW9yZSByZWxpYWJsZSB1bmRlciBWZXRpbmFyaSwiIHNhaWQgTXIuIFBvdHRzIG9mCnRoZSBCYWtlcnMnIEd1aWxkLgoKIkhlIGRvZXMgaGF2ZSBhbGwgdGhlIHN0cmVldC10aGVhdGVyIHBsYXllcnMgYW5kIG1pbWUgYXJ0aXN0cyB0aHJvd24gaW50bwp0aGUgc2NvcnBpb24gcGl0LCIgc2FpZCBNci4gQm9nZ2lzIG9mIHRoZSBUaGlldmVzJyBHdWlsZC4KCiJUcnVlLiAgQnV0IGxldCdzIG5vdCBmb3JnZXQgdGhhdCBoZSBoYXMgaGlzIGJhZCBwb2ludHMgdG9vLiAgWy4uLl0iCgogIFtGZWV0IG9mIENsYXksIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDE5OAolcGFzc2FnZSAxMQpXaGF0IGEgbWVzcyB0aGUgd29ybGQgd2FzIGluLCBWaW1lcyByZWZsZWN0ZWQuICBDb25zdGFibGUgVmlzaXQgaGFkIHRvbGQKaGltIHRoZSBtZWVrIHdvdWxkIGluaGVyaXQgaXQsIGFuZCB3aGF0IGhhZCB0aGUgcG9vciBkZXZpbHMgZG9uZSB0byBkZXNlcnZlCi90aGF0Lz8KCiAgW0ZlZXQgb2YgQ2xheSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjk1CiVwYXNzYWdlIDEyClJvZ2VycyB0aGUgYnVsbHMgd2VyZSBhbmdyeSBhbmQgYmV3aWxkZXJlZCwgd2hpY2ggY291bnRzIGFzIHRoZSBiYXNpYyBzdGF0ZQpvZiBtaW5kIGZvciBmdWxsIGdyb3duIGJ1bGxzLigxKQoKKDEpIEJlY2F1c2Ugb2YgdGhlIGh1Z2Ugb2J0cnVzaXZlIG1hc3Mgb2YgaGlzIGZvcmVoZWFkLCBSb2dlcnMgdGhlIGJ1bGxzJwp2aWV3IG9mIHRoZSB1bml2ZXJzZSB3YXMgZnJvbSB0d28gZXllcyBlYWNoIHdpdGggdGhlaXIgb3duIG5vbi1vdmVybGFwcGluZwpoZW1pc3BoZXJpY2FsIHZpZXcgb2YgdGhlIHdvcmxkLiAgU2luY2UgdGhlcmUgd2VyZSB0d28gc2VwYXJhdGUgdmlzaW9ucywKUm9nZXJzIGhhZCByZWFzb25lZCwgdGhhdCBtZWFudCB0aGVyZSBtdXN0IGJlIHR3byBidWxscyAoYnVsbHMgbm90IGhhdmluZwpiZWVuIGJyZWQgZm9yIG11Y2ggZGVkdWN0aXZlIHJlYXNvbmluZykuICBNb3N0IGJ1bGxzIGJlbGlldmUgdGhpcywgd2hpY2ggaXMKd2h5IHRoZXkgYWx3YXlzIGtlZXAgdHVybmluZyB0aGVpciBoZWFkIHRoaXMgd2F5IGFuZCB0aGF0IHdoZW4gdGhleSBsb29rIGF0CnlvdS4gIFRoZXkgZG8gdGhpcyBiZWNhdXNlIGJvdGggb2YgdGhlbSB3YW50IHRvIHNlZS4KCiAgW0ZlZXQgb2YgQ2xheSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMzEyICgnbWVhbmluZycgbGluZSBjYXBpdGFsaXplcyBldmVyeSB3b3JkLCBpbmNsdWRpbmcgJ0EnLCdGb3InLCdUbycpCiVwYXNzYWdlIDEzCiJJdCdzIHRoZSBtb3N0IG1lbmFjaW5nIGR3YXJmIGJhdHRsZS1jcnkgdGhlcmUgaXMhICBPbmNlIGl0J3MgYmVlbiBzaG91dGVkCi9zb21lb25lLyBoYXMgdG8gYmUga2lsbGVkISIKCiJXaGF0J3MgaXQgbWVhbj8iCgoiVG9kYXkgSXMgQSBHb29kIERheSBGb3IgU29tZW9uZSBFbHNlIFRvIERpZSEiCgogIFtGZWV0IG9mIENsYXksIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDM0NyAoQ29sb24gaXMgYWRkcmVzc2luZyBEb3JmbCwgYSBnb2xlbSB3aG8gaXMgam9pbmluZyB0aGUgV2F0Y2gpCiVwYXNzYWdlIDE0CiJZJ2tub3csIiBzYWlkIENvbG9uLCAiaWYgaXQgZG9lc24ndCB3b3JrIG91dCwgeW91IGNvdWxkIGFsd2F5cyBnZXQgYSBqb2IKbWFraW5nIGZvcnR1bmUgY29va2llcy4iCgoiRnVubnkgdGhpbmcsIHRoYXQsIiBzYWlkIE5vYmJ5LiAgIllvdSBuZXZlciBnZXQgYmFkIGZvcnR1bmVzIGluIGNvb2tpZXMsCmV2ZXIgbm90aWNlZCB0aGF0PyAgVGhleSBuZXZlciBzYXkgc3R1ZmYgbGlrZTogJ09oIGRlYXIsIHRoaW5ncyBhcmUgZ29pbmcKdG8gYmUgL3JlYWxseS8gYmFkLicgIEkgbWVhbiwgdGhleSdyZSBuZXZlciAvbWlzZm9ydHVuZS8gY29va2llcy4iCgpWaW1lcyBsaXQgYSBjaWdhciBhbmQgc2hvb2sgdGhlIG1hdGNoIHRvIHB1dCBpdCBvdXQuICAiVGhhdCwgQ29ycG9yYWwsIGlzCmJlY2F1c2Ugb2Ygb25lIG9mIHRoZSBmdW5kYW1lbnRhbCBkcml2aW5nIGZvcmNlcyBvZiB0aGUgdW5pdmVyc2UuIgoKIldoYXQ/ICBMaWtlLCBwZW9wbGUgd2hvIHJlYWQgZm9ydHVuZSBjb29raWVzIGFyZSB0aGUgbHVja3kgb25lcz8iIHNhaWQKTm9iYnkuCgoiTm8uICBCZWNhdXNlIHBlb3BsZSB3aG8gL3NlbGwvIGZvcnR1bmUgY29va2llcyB3YW50IHRvIGdvIG9uIHNlbGxpbmcKdGhlbS4gIFsuLi5dIgoKICBbRmVldCBvZiBDbGF5LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKJWUgdGl0bGUKIwojCiMKJXRpdGxlIEhvZ2ZhdGhlciAoMTApCiMgcC4gMSAoSGFycGVyIFRvcmNoIGVkaXRpb24pCiVwYXNzYWdlIDEKRXZlcnl0aGluZyBzdGFydHMgc29tZXdoZXJlLCB0aG91Z2ggbWFueSBwaHlzaWNpc3RzIGRpc2FncmVlLgoKQnV0IHBlb3BsZSBoYXZlIGFsd2F5cyBiZWVuIGRpbWx5IGF3YXJlIG9mIHRoZSBwcm9ibGVtIHdpdGggdGhlIHN0YXJ0IG9mCnRoaW5ncy4gIFRoZXkgd29uZGVyIGhvdyB0aGUgc25vd3Bsb3cgZHJpdmVyIGdldHMgdG8gd29yaywgb3IgaG93IHRoZQptYWtlcnMgb2YgZGljdGlvbmFyaWVzIGxvb2sgdXAgdGhlIHNwZWxsaW5nIG9mIHdvcmRzLiAgWWV0IHRoZXJlIGlzIHRoZQpjb25zdGFudCBkZXNpcmUgdG8gZmluZCBzb21lIHBvaW50IGluIHRoZSB0d2lzdGluZywga25vdHRpbmcsIHJhdmVsaW5nCm5ldHMgb2Ygc3BhY2UtdGltZSBvbiB3aGljaCBhIG1ldGFwaG9yaWNhbCBmaW5nZXIgY2FuIGJlIHB1dCB0byBpbmRpY2F0ZQp0aGF0IGhlcmUsIC9oZXJlLywgaXMgdGhlIHBvaW50IHdoZXJlIGl0IGFsbCBiZWdhbiAuLi4KCi9Tb21ldGhpbmcvIGJlZ2FuIHdoZW4gdGhlIEd1aWxkIG9mIEFzc2Fzc2lucyBlbnJvbGxlZCBNaXN0ZXIgVGVhdGltZSwKd2hvIHNhdyB0aGluZ3MgZGlmZmVyZW50bHkgZnJvbSBvdGhlciBwZW9wbGUsIGFuZCBvbmUgb2YgdGhlIHdheXMgdGhhdApoZSBzYXcgdGhpbmdzIGRpZmZlcmVudGx5IGZyb20gb3RoZXIgcGVvcGxlIHdhcyBpbiBzZWVpbmcgb3RoZXIgcGVvcGxlCmFzIHRoaW5ncyAobGF0ZXIsIExvcmQgRG93bmV5IG9mIHRoZSBHdWlsZCBzYWlkLCAiV2UgdG9vayBwaXR5IG9uIGhpbQpiZWNhdXNlIGhlJ2QgbG9zdCBib3RoIHBhcmVudHMgYXQgYW4gZWFybHkgYWdlLiAgSSB0aGluayB0aGF0LCBvbgpyZWZsZWN0aW9uLCB3ZSBzaG91bGQgaGF2ZSB3b25kZXJlZCBhIGJpdCBtb3JlIGFib3V0IHRoYXQuIikKCiAgW0hvZ2ZhdGhlciwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDI4LTI5CiVwYXNzYWdlIDIKSWYgYXNrZWQgdG8gZGVzY3JpYmUgd2hhdCB0aGV5IGRpZCBmb3IgYSBsaXZpbmcsIHRoZSBmaXZlIG1lbiBhcm91bmQgdGhlCnRhYmxlIHdvdWxkIGhhdmUgc2FpZCBzb21ldGhpbmcgbGlrZSAiVGhpcyBhbmQgdGhhdCIgb3IgIlRoZSBiZXN0IEkgY2FuLCIKYWx0aG91Z2ggaW4gQmFuam8ncyBjYXNlIGhlJ2QgcHJvYmFibHkgaGF2ZSBzYWlkICJEdXI/IiAgVGhleSB3ZXJlLCBieSB0aGUKc3RhbmRhcmRzIG9mIGFuIHVuY2FyaW5nIHNvY2lldHksIGNyaW1pbmFscywgYWx0aG91Z2ggdGhleSB3b3VsZG4ndCBoYXZlCnRob3VnaHQgb2YgdGhlbXNlbHZlcyBhcyBzdWNoIGFuZCBjb3VsZG4ndCBldmVuIC9zcGVsbC8gd29yZHMgbGlrZQoibmVmYXJpb3VzLiIgIFdoYXQgdGhleSBnZW5lcmFsbHkgZGlkIHdhcyBtb3ZlIHRoaW5ncyBhcm91bmQuICBTb21ldGltZXMKdGhlIHRoaW5ncyB3ZXJlIG9uIHRoZSB3cm9uZyBzaWRlIG9mIGEgc3RlZWwgZG9vciwgb3IgaW4gdGhlIHdyb25nIGhvdXNlLgpTb21ldGltZXMgdGhlIHRoaW5ncyB3ZXJlIGluIGZhY3QgcGVvcGxlIHdobyB3ZXJlIGZhciB0b28gdW5pbXBvcnRhbnQgdG8KdHJvdWJsZSB0aGUgQXNzYXNzaW5zJyBHdWlsZCB3aXRoLCBidXQgd2hvIHdlcmUgbmV2ZXJ0aGVsZXNzIGluY29udmVuaWVudGx5CnBvc2l0aW9uZWQgd2hlcmUgdGhleSB3ZXJlIGFuZCB3b3VsZCBiZSBtdWNoIGJldHRlciBsb2NhdGVkIG9uLCBmb3IKZXhhbXBsZSwgYSBzZWEgYmVkIHNvbWV3aGVyZS4oMSkgIE5vbmUgb2YgdGhlIGZpdmUgYmVsb25nZWQgdG8gYW55IGZvcm1hbApndWlsZCBhbmQgdGhleSBnZW5lcmFsbHkgZm91bmQgdGhlaXIgY2xpZW50cyBhbW9uZyB0aG9zZSBwZW9wbGUgd2hvLCBmb3IKdGhlaXIgb3duIGRhcmsgcmVhc29ucywgZGlkbid0IHdhbnQgdG8gcHV0IHRoZSBndWlsZHMgdG8gYW55IHRyb3VibGUsCnNvbWV0aW1lcyBiZWNhdXNlIHRoZXkgd2VyZSBndWlsZCBtZW1iZXJzIHRoZW1zZWx2ZXMuICBUaGV5IGhhZCBwbGVudHkgb2YKd29yay4gIFRoZXJlIHdhcyBhbHdheXMgc29tZXRoaW5nIHRoYXQgbmVlZGVkIHRyYW5zZmVycmluZyBmcm9tIEEgdG8gQiBvciwKb2YgY291cnNlLCB0byB0aGUgYm90dG9tIG9mIHRoZSBDLgoKKDEpIENoaWNrZW53aXJlIGhhZCBnb3QgaGlzIG5hbWUgZnJvbSBoaXMgb3duIGluZGl2aWR1YWwgY29udHJpYnV0aW9uIHRvCnRoZSBzY2llbmNlIG9mIHRoaXMgdmVyeSBzcGVjaWFsaXplZCAiY29uY3JldGUgb3ZlcnNob2UiIGZvcm0gb2Ygd2FzdGUKZGlzcG9zYWwuICBBbiB1bmZvcnR1bmF0ZSBkcmF3YmFjayBvZiB0aGUgcHJvY2VzcyB3YXMgdGhlIHRlbmRlbmN5IGZvcgpiaXRzIG9mIHRoZSBjbGllbnQgdG8gZXZlbnR1YWxseSBkZXRhY2ggYW5kIGZsb2F0IHRvIHRoZSBzdXJmYWNlLCBjYXVzaW5nCm11Y2ggY29tbWVudCBhbW9uZyB0aGUgZ2VuZXJhbCBwb3B1bGF0aW9uLiAgRW5vdWdoIGNoaWNrZW4gd2lyZSwgaGUgcG9pbnRlZApvdXQsIHdvdWxkIHNvbHZlIHRoYXQsIHdoaWxlIGFsc28gYWxsb3dpbmcgdGhlIGluZ3Jlc3Mgb2YgY3JhYnMgYW5kIGZpc2gKZ29pbmcgYWJvdXQgdGhlaXIgdml0YWwgcmVjeWNsaW5nIGFjdGl2aXRpZXMuCgogIFtIb2dmYXRoZXIsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAxMDktMTEwCiVwYXNzYWdlIDMKQWx0aG91Z2ggaXQgd2FzIEhvZ3N3YXRjaCB0aGUgVW5pdmVyc2l0eSBidWlsZGluZ3Mgd2VyZSBidXN0bGluZy4gIFdpemFyZHMKZGlkbid0IGdvIHRvIGJlZCBlYXJseSBpbiBhbnkgY2FzZSwoMSkgYW5kIG9mIGNvdXJzZSB0aGVyZSB3YXMgdGhlCkhvZ3N3YXRjaG5pZ2h0IEZlYXN0IHRvIGxvb2sgZm9yd2FyZCB0byBhdCBtaWRuaWdodC4KCkl0IHdvdWxkIGdpdmUgc29tZSBpZGVhIG9mIHRoZSBzY2FsZSBvZiB0aGUgSG9nc3dhdGNobmlnaHQgRmVhc3QgdGhhdCBhCmxpZ2h0IHNuYWNrIGF0IFVVIGNvbnNpc3RlZCBvZiB0aHJlZSBvciBmb3VyIGNvdXJzZXMsIG5vdCBjb3VudGluZyB0aGUKY2hlZXNlIGFuZCBudXRzLgoKU29tZSBvZiB0aGUgd2l6YXJkcyBoYWQgYmVlbiBwcmFjdGljaW5nIGZvciB3ZWVrcy4gIFRoZSBEZWFuIGluIHBhcnRpY3VsYXIKY291bGQgbm93IGxpZnQgYSB0d2VudHktcG91bmQgdHVya2V5IG9uIG9uZSBmb3JrLiAgSGF2aW5nIHRvIHdhaXQgdW50aWwKbWlkbmlnaHQgbWVyZWx5IHB1dCBhIGhlYWx0aHkgZWRnZSBvbiBhcHBldGl0ZXMgYWxyZWFkeSBwcm9mZXNzaW9uYWxseQpob25lZC4KCigxKSBPZnRlbiB0aGV5IGxpdmVkIHRvIGEgdGltZSBzY2FsZSB0byBzdWl0IHRoZW1zZWx2ZXMuICBNYW55IG9mIHRoZQpzZW5pb3Igb25lcywgb2YgY291cnNlLCBsaXZlZCBlbnRpcmVseSBpbiB0aGUgcGFzdCwgYnV0IHNldmVyYWwgd2VyZSBsaWtlCnRoZSBQcm9mZXNzb3Igb2YgQW50aHJvcGljcywgd2hvIGhhZCBpbnZlbnRlZCBhbiBlbnRpcmUgdGVtcG9yYWwgc3lzdGVtCmJhc2VkIG9uIHRoZSBiZWxpZWYgdGhhdCBhbGwgdGhlIG90aGVyIG9uZXMgd2VyZSBhIG1lcmUgaWxsdXNpb24uCgpNYW55IHBlb3BsZSBhcmUgYXdhcmUgb2YgdGhlIFdlYWsgYW5kIFN0cm9uZyBBbnRocm9waWMgUHJpbmNpcGxlcy4gIFRoZQpXZWFrIE9uZSBzYXlzLCBiYXNpY2FsbHksIHRoYXQgaXQgd2FzIGpvbGx5IGFtYXppbmcgb2YgdGhlIHVuaXZlcnNlIHRvIGJlCmNvbnN0cnVjdGVkIGluIHN1Y2ggYSB3YXkgdGhhdCBodW1hbnMgY291bGQgZXZvbHZlIHRvIGEgcG9pbnQgd2hlcmUgdGhleQpjb3VsZCBtYWtlIGEgbGl2aW5nIGluLCBmb3IgZXhhbXBsZSwgdW5pdmVyc2l0aWVzLCB3aGlsZSB0aGUgU3Ryb25nIE9uZQpzYXlzIHRoYXQsIG9uIHRoZSBjb250cmFyeSwgdGhlIHdob2xlIHBvaW50IG9mIHRoZSB1bml2ZXJzZSB3YXMgdGhhdApodW1hbnMgc2hvdWxkIG5vdCBvbmx5IHdvcmsgaW4gdW5pdmVyc2l0aWVzLCBidXQgYWxzbyB3cml0ZSBmb3IgaHVnZSBzdW1zCmJvb2tzIHdpdGggd29yZHMgbGlrZSAiQ29zbWljIiBhbmQgIkNoYW9zIiBpbiB0aGUgdGl0bGVzLigyKQoKVGhlIFVVIFByb2Zlc3NvciBvZiBBbnRocm9waWNzIGhhZCBkZXZlbG9wZWQgdGhlIFNwZWNpYWwgYW5kIEluZXZpdGFibGUKQW50aHJvcGljIFByaW5jaXBsZSwgd2hpY2ggd2FzIHRoYXQgdGhlIGVudGlyZSByZWFzb24gZm9yIHRoZSBleGlzdGVuY2Ugb2YKdGhlIHVuaXZlcnNlIHdhcyB0aGUgZXZlbnR1YWwgZXZvbHV0aW9uIG9mIHRoZSBVVSBQcm9mZXNzb3Igb2YgQW50aHJvcGljcy4KQnV0IHRoaXMgd2FzIG9ubHkgYSBmb3JtYWwgc3RhdGVtZW50IG9mIHRoZSB0aGVvcnkgd2hpY2ggYWJzb2x1dGVseQpldmVyeW9uZSwgd2l0aCBvbmx5IHNvbWUgbWlub3IgZGV0YWlscyBvZiBhICJGaWxsIGluIG5hbWUgaGVyZSIgbmF0dXJlLApzZWNyZXRseSBiZWxpZXZlcyB0byBiZSB0cnVlLgoKKDIpIEFuZCB0aGV5IGFyZSBjb3JyZWN0LiAgVGhlIHVuaXZlcnNlIGNsZWFybHkgb3BlcmF0ZXMgZm9yIHRoZSBiZW5lZml0Cm9mIGh1bWFuaXR5LiAgVGhpcyBjYW4gYmUgcmVhZGlseSBzZWVuIGJ5IHRoZSBjb252ZW5pZW50IHdheSB0aGUgc3VuIGNvbWVzCnVwIGluIHRoZSBtb3JuaW5nLCB3aGVuIHBlb3BsZSBhcmUgcmVhZHkgdG8gc3RhcnQgdGhlIGRheS4KCiAgW0hvZ2ZhdGhlciwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDExMi0xMTMgKHdlIGVuZCB0aGlzIHBhc3NhZ2UgbWlkLXBhcmFncmFwaC4uLikKJXBhc3NhZ2UgNAoiV2F0Y2ggdGhpcywgc2lyLCIgc2FpZCBQb25kZXIuICAiQWxsIHJpZ2h0LCBBZHJpYW4sIGluaXRpYWxpemUgdGhlIEdCTC4iCgoiSG93IGRvIHlvdSBkbyB0aGF0LCB0aGVuPyIgc2FpZCBSaWRjdWxseSwgYmVoaW5kIGhpbS4KCiJJdCAuLi4gaXQgbWVhbnMgcHVsbCB0aGUgZ3JlYXQgYmlnIGxldmVyLCIgUG9uZGVyIHNhaWQsIHJlbHVjdGFudGx5LgoKIkFoLiAgVGFrZXMgbGVzcyB0aW1lIHRvIHNheS4iCgpQb25kZXIgc2lnaGVkLiAgIlllcywgdGhhdCdzIHJpZ2h0LCBBcmNoY2hhbmNlbGxvci4iCgpIZSBub2RkZWQgdG8gb25lIG9mIHRoZSBzdHVkZW50cywgd2hvIHB1bGxlZCBhIGxhcmdlIHJlZCBsZXZlciBtYXJrZWQgIkRvCk5vdCBQdWxsLiIgIEdlYXJzIHNwdW4sIHNvbWV3aGVyZSBpbnNpZGUgSGV4LiAgTGl0dGxlIHRyYXBkb29ycyBvcGVuZWQgaW4KdGhlIGFudCBmYXJtcyBhbmQgbWlsbGlvbnMgb2YgYW50cyBiZWdhbiB0byBzY3VycnkgYWxvbmcgdGhlIG5ldHdvcmtzIG9mCmdsYXNzIHR1YmluZy4gIFBvbmRlciB0YXBwZWQgYXQgdGhlIGh1Z2Ugd29vZGVuIGtleWJvYXJkLgoKIkJlYXRzIG1lIGhvdyB5b3UgZmVsbG93cyByZW1lbWJlciBob3cgdG8gZG8gYWxsIHRoaXMgc3R1ZmYsIiBzYWlkIFJpZGN1bGx5LApzdGlsbCB3YXRjaGluZyBoaW0gd2l0aCB3aGF0IFBvbmRlciBjb25zaWRlcmVkIHRvIGJlIGFtdXNlZCBpbnRlcmVzdC4KCiJPaCwgaXQncyBsYXJnZWx5IGludHVpdGl2ZSwgQXJjaGNoYW5jZWxsb3IsIiBzYWlkIFBvbmRlci4gICJPYnZpb3VzbHkgeW91CmhhdmUgdG8gc3BlbmQgYSBsb3Qgb2YgdGltZSBsZWFybmluZyBpdCBmaXJzdCwgdGhvdWdoLiAgWy4uLl0iCgogIFtIb2dmYXRoZXIsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAxMzktMTQwCiVwYXNzYWdlIDUKIlRlbGwgbWUsIFNlbmlvciBXcmFuZ2xlciwgd2UgbmV2ZXIgaW52aXRlZCBhbnkgL3dvbWVuLyB0byB0aGUKSG9nc3dhdGNobmlnaHQgRmVhc3QsIGRpZCB3ZT8iCgoiT2YgY291cnNlIG5vdCwgQXJjaGNoYW5jZWxsb3IsIiBzYWlkIHRoZSBTZW5pb3IgV3JhbmdsZXIuICBIZSBsb29rZWQgdXAKaW4gdGhlIGR1c3QtY292ZXJlZCByYWZ0ZXJzLCB3b25kZXJpbmcgd2hhdCBoYWQgY2F1Z2h0IHRoZSBBcmNoY2hhbmNlbGxvcidzCmV5ZS4gICJHb29kIGhlYXZlbnMsIG5vLiAgVGhleSdkIHNwb2lsIGV2ZXJ5dGhpbmcuICBJJ3ZlIGFsd2F5cyBzYWlkIHNvLiIKCiJBbmQgYWxsIHRoZSBtYWlkcyBoYXZlIGdvdCB0aGUgZXZlbmluZyBvZmYgdW50aWwgbWlkbmlnaHQ/LiIKCiJBIHZlcnkgZ2VuZXJvdXMgY3VzdG9tLCBJJ3ZlIGFsd2F5cyBzYWlkLCIgc2FpZCB0aGUgU2VuaW9yIFdyYW5nbGVyLApmZWVsaW5nIGhpcyBuZWNrIGNyaWNrLgoKIlNvIHdoeSwgZXZlcnkgeWVhciwgZG8gd2UgaGFuZyBhIGRhbW4gZ3JlYXQgYnVuY2ggb2YgbWlzdGxldG9lIHVwIHRoZXJlPyIKClRoZSBTZW5pb3IgV3JhbmdsZXIgdHVybmVkIGluIGEgY2lyY2xlLCBzdGlsbCBsb29raW5nIHVwd2FyZC4KCiJXZWxsLCBlciAuLi4gaXQncyB3ZWxsLCBpdCdzIC4uLiBpdCdzIHN5bWJvbGljLCBBcmNoY2hhbmNlbGxvci4iCgoiQWg/IgoKVGhlIFNlbmlvciBXcmFuZ2xlciBmZWx0IHRoYXQgc29tZXRoaW5nIG1vcmUgd2FzIGV4cGVjdGVkLiAgSGUgZ3JvcGVkCmFyb3VuZCBpbiB0aGUgZHVzdHkgYXR0aWNzIG9mIGhpcyBlZHVjYXRpb24uCgoiT2YgLi4uIHRoZSBsZWF2ZXMsIGQneSdzZWUgLi4uIHRoZXkncmUgc3ltYm9saWMgb2YgLi4uIG9mIGdyZWVuLCBkJ3knc2VlLAp3aGVyZWFzIHRoZSBiZXJyaWVzLCBpbiBmYWN0LCB5ZXMsIHRoZSBiZXJyaWVzIHN5bWJvbGl6ZSAuLi4gc3ltYm9saXplCndoaXRlLiAgWWVzLiAgV2hpdGUgYW5kIGdyZWVuLiAgVmVyeSAuLi4gc3ltYm9saWMuIgoKSGUgd2FpdGVkLiAgSGUgd2FzIG5vdCwgdW5mb3J0dW5hdGVseSwgZGlzYXBwb2ludGVkLgoKIldoYXQgb2Y/IgoKVGhlIFNlbmlvciBXcmFuZ2xlciBjb3VnaGVkLgoKIkknbSBub3Qgc3VyZSB0aGVyZSAvaGFzLyB0byBiZSBhbiAvb2YvLCIgaGUgc2FpZC4KCiJBaD8gIFNvLCIgc2FpZCB0aGUgQXJjaGNoYW5jZWxsb3IgdGhvdWdodGZ1bGx5LCAiaXQgY291bGQgYmUgc2FpZCB0aGF0CnRoZSB3aGl0ZSBhbmQgZ3JlZW4gc3ltYm9saXplIGEgc21hbGwgcGFyYXNpdGljIHBsYW50PyIKCiJZZXMsIGluZGVlZCwiIHNhaWQgdGhlIFNlbmlvciBXcmFuZ2xlci4KCiJTbyBtaXN0bGV0b2UsIGluIGZhY3QsIHN5bWJvbGl6ZXMgbWlzdGxldG9lPyIKCiJFeGFjdGx5LCBBcmNoY2hhbmNlbGxvciwiIHNhaWQgdGhlIFNlbmlvciBXcmFuZ2xlciwgd2hvIHdhcyBub3cganVzdApoYW5naW5nIG9uLgoKIkZ1bm55IHRoaW5nLCB0aGF0LCIgc2FpZCBSaWRjdWxseSwgaW4gdGhlIHNhbWUgdGhvdWdodGZ1bCB0b25lIG9mIHZvaWNlLgoiVGhhdCBzdGF0ZW1lbnQgaXMgZWl0aGVyIHNvIGRlZXAgaXQgd291bGQgdGFrZSBhIGxpZmV0aW1lIHRvIGZ1bGx5CmNvbXByZWhlbmQgZXZlcnkgcGFydGljbGUgb2YgaXRzIG1lYW5pbmcsIG9yIGl0IGlzIGEgbG9hZCBvZiBhYnNvbHV0ZQp0b3NoLiAgV2hpY2ggaXMgaXQsIEkgd29uZGVyPyIKCiJJdCBjb3VsZCBiZSBib3RoLCIgc2FpZCB0aGUgU2VuaW9yIFdyYW5nbGVyIGRlc3BlcmF0ZWx5LgoKIkFuZCAvdGhhdC8gY29tbWVudCwiIHNhaWQgUmlkY3VsbHksICJpcyBlaXRoZXIgdmVyeSBwZXJjZXB0aXZlIG9yIHZlcnkKdHJpdGUuIgoKIkl0IGNvdWxkIGJlIGJvLS0iCgoiRG9uJ3QgcHVzaCBpdCwgU2VuaW9yIFdyYW5nbGVyLiIKCiAgW0hvZ2ZhdGhlciwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTcwIChbc2ljXSwgc2VudGVuY2UgYXQgZW5kIG9mIHBhcmFncmFwaCBzaG91bGQgaGF2ZSBmb3VydGggcGVyaW9kKQolcGFzc2FnZSA2CldoYXQgUG9uZGVyIHdhcyB3b3JyaWVkIGFib3V0IHdhcyB0aGUgZmVhciB0aGF0IGhlIHdhcyBzaW1wbHkgZW5nYWdlZCBpbiBhCmNhcmdvIGN1bHQuICBIZSdkIHJlYWQgYWJvdXQgdGhlbS4gIElnbm9yYW50KDEpIGFuZCBjcmVkdWxvdXMoMikgcGVvcGxlLAp3aG9zZSBpc2xhbmQgbWlnaHQgb25jZSBoYXZlIGJlZW4gdmlzaXRlZCBieSBzb21lIGl0aW5lcmFudCBtZXJjaGFudAp2ZXNzZWwgdGhhdCB0cmFkZWQgcGVhcmxzIGFuZCBjb2NvbnV0cyBmb3Igc3VjaCBmcnVpdHMgb2YgY2l2aWxpemF0aW9uIGFzCmdsYXNzIGJlYWRzLCBtaXJyb3JzLCBheGVzLCBhbmQgc2V4dWFsIGRpc2Vhc2VzLCB3b3VsZCBsYXRlciBtYWtlIGJpZyBtb2RlbApzaGlwcyBvdXQgb2YgYmFtYm9vIGluIHRoZSBob3BlIG9mIG9uY2UgYWdhaW4gYXR0cmFjdGluZyB0aGlzIG1hZ2ljYWwKY2FyZ28uICBPZiBjb3Vyc2UsIHRoZXkgd2VyZSBmYXIgdG9vIGlnbm9yYW50IGFuZCBjcmVkdWxvdXMgdG8ga25vdyB0aGF0Cmp1c3QgYmVjYXVzZSB5b3UgYnVpbHQgdGhlIHNoYXBlIHlvdSBkaWRuJ3QgZ2V0IHRoZSBzdWJzdGFuY2UgLi4uCgooMSkgSWdub3JhbnQ6ICB0aGUgc3RhdGUgb2Ygbm90IGtub3dpbmcgd2hhdCBhIHByb25vdW4gaXMsIG9yIGhvdyB0byBmaW5kCnRoZSBzcXVhcmUgcm9vdCBvZiAyNy40LCBhbmQgbWVyZWx5IGtub3dpbmcgY2hpbGRpc2ggYW5kIHVzZWxlc3MgdGhpbmdzCmxpa2Ugd2hpY2ggb2YgdGhlIHNldmVudHkgYWxtb3N0IGlkZW50aWNhbC1sb29raW5nIHNwZWNpZXMgb2YgdGhlIHB1cnBsZQpzZWEgc25ha2UgYXJlIHRoZSBkZWFkbHkgb25lcywgaG93IHRvIHRyZWF0IHRoZSBwb2lzb25vdXMgcGl0aCBvZiB0aGUKU2Fnby1zYWdvIHRyZWUgdG8gbWFrZSBhIG5vdXJpc2hpbmcgZ3J1ZWwsIGhvdyB0byBmb3JldGVsbCB0aGUgd2VhdGhlciBieQp0aGUgbW92ZW1lbnRzIG9mIHRoZSB0cmVlLWNsaW1iaW5nIEJ1cmdsYXIgQ3JhYiwgaG93IHRvIG5hdmlnYXRlIGFjcm9zcwphIHRob3VzYW5kIG1pbGVzIG9mIGZlYXR1cmVsZXNzIG9jZWFuIGJ5IG1lYW5zIG9mIGEgcGllY2Ugb2Ygc3RyaW5nIGFuZCBhCnNtYWxsIGNsYXkgbW9kZWwgb2YgeW91ciBncmFuZGZhdGhlciwgaG93IHRvIGdldCBlc3NlbnRpYWwgdml0YW1pbnMgZnJvbQp0aGUgbGl2ZXIgb2YgdGhlIGZlcm9jaW91cyBJY2UgQmVhciwgYW5kIG90aGVyIHN1Y2ggdHJpdmlhbCBtYXR0ZXJzLiAgSXQncwphIHN0cmFuZ2UgdGhpbmcgdGhhdCB3aGVuIGV2ZXJ5b25lIGJlY29tZXMgZWR1Y2F0ZWQsIGV2ZXJ5b25lIGtub3dzIGFib3V0CnRoZSBwcm9ub3VuIGJ1dCBubyBvbmUga25vd3MgYWJvdXQgdGhlIFNhZ28tc2Fnby4KCigyKSBDcmVkdWxvdXM6ICBoYXZpbmcgdmlld3MgYWJvdXQgdGhlIHdvcmxkLCB0aGUgdW5pdmVyc2UgYW5kIGh1bWFuaXR5J3MKcGxhY2UgaW4gaXQgdGhhdCBhcmUgc2hhcmVkIG9ubHkgYnkgdmVyeSB1bnNvcGhpc3RpY2F0ZWQgcGVvcGxlIGFuZCB0aGUKbW9zdCBpbnRlbGxpZ2VudCBhbmQgYWR2YW5jZWQgbWF0aGVtYXRpY2lhbnMgYW5kIHBoeXNpY2lzdHMuCgogIFtIb2dmYXRoZXIsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDI0NCAobWFudGVscGllY2U6ICBpdCdzIGRhcmsgYW5kIFBvbmRlciBpcyBjaGVja2luZyB3aGV0aGVyIHRoZSBIb2dmYXRoZXIKIyAgICAgICAgIFtEaXNjd29ybGQgYW5hbG9nIG9mIFNhbnRhIENsYXVzL0ZhdGhlciBDaHJpc3RtYXNdIGhhcyBiZWVuIHRoZXJlCiMgICAgICAgICBhbmQgbGVmdCBwcmVzZW50cyBpbiB0aGUgc3RvY2tpbmcgdGhlIExpYnJhcmlhbiBoYXMgaHVuZykKJXBhc3NhZ2UgNwpUaGVyZSB3YXMgc2lsZW5jZSBhZ2FpbiwgYW5kIHRoZW4gYSBjbGFuZy4gIFRoZSBMaWJyYXJpYW4gZ3J1bnRlZCBpbiBoaXMKc2xlZXAuCgoiV2hhdCBhcmUgeW91IGRvaW5nPyIKCiJJIGp1c3Qga25vY2tlZCBvdmVyIHRoZSBjb2FsIHNob3ZlbC4iCgoiV2h5IGFyZSBmZWVsaW5nIGFyb3VuZCBvbiB0aGUgbWFudGVscGllY2U/IgoKT2gsIGp1c3QgLi4uIHlvdSBrbm93LCBqdXN0IC4uLiBqdXN0IGxvb2tpbmcuICBBIGxpdHRsZSAuLi4gZXhwZXJpbWVudC4KQWZ0ZXIgYWxsLCB5b3UgbmV2ZXIga25vdy4iCgoiWW91IG5ldmVyIGtub3cgd2hhdD8iCgoiSnVzdCAuLi4gbmV2ZXIga25vdywgeW91IGtub3cuIgoKIi9Tb21ldGltZXMvIHlvdSBrbm93LCIgc2FpZCBSaWRjdWxseS4gICJJIHRoaW5rIEkga25vdyBxdWl0ZSBhIGxvdCB0aGF0CkkgZGlkbid0IHVzZWQgdG8ga25vdy4gIEl0J3MgYW1hemluZyB3aGF0IHlvdSAvZG8vIGVuZCB1cCBrbm93aW5nLCBJCnNvbWV0aW1lcyB0aGluay4gIEkgb2Z0ZW4gd29uZGVyIHdoYXQgbmV3IHN0dWZmIEknbGwga25vdy4iCgoiV2VsbCwgeW91IG5ldmVyIGtub3cuIgoKIlRoYXQncyBhIGZhY3QuIgoKICBbSG9nZmF0aGVyLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAzMzAKJXBhc3NhZ2UgOApJVCBHRVRTIFVOREVSIFlPVVIgU0tJTiwgTElGRSwgc2FpZCBEZWF0aCwgc3RlcHBpbmcgZm9yd2FyZC4gIFNQRUFLSU5HCk1FVEFQSE9SSUNBTExZLCBPRiBDT1VSU0UuICBJVCdTIEEgSEFCSVQgVEhBVCdTIEhBUkQgVE8gR0lWRSBVUC4gIE9ORSBQVUZGCk9GIEJSRUFUSCBJUyBORVZFUiBFTk9VR0guICBZT1UnTEwgRklORCBZT1UgV0FOVCBUTyBUQUtFIEFOT1RIRVIuCgogIFtIb2dmYXRoZXIsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDMzNgolcGFzc2FnZSA5CkhVTUFOUyBORUVEIEZBTlRBU1kgVE8gQkUgSFVNQU4uICBUTyBCRSBUSEUgUExBQ0UgV0hFUkUgVEhFIEZBTExJTkcgQU5HRUwKTUVFVFMgVEhFIFJJU0lORyBBUEUuCgoiVG9vdGggRmFpcmllcz8gIEhvZ2ZhdGhlcnM/ICBMaXR0bGUtLSIKCllFUy4gIEFTIFBSQUNUSUNFLiAgWU9VIEhBVkUgVE8gU1RBUlQgT1VUIExFQVJOSU5HIFRPIEJFTElFVkUgVEhFIC9MSVRUTEUvCkxJRVMuCgoiU28gd2UgY2FuIGJlbGlldmUgdGhlIGJpZyBvbmVzPyIKCllFUy4gIEpVU1RJQ0UuICBNRVJDWS4gIERVVFkuICBUSEFUIFNPUlQgT0YgVEhJTkcuCgogIFtIb2dmYXRoZXIsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDM0MyAoTXIuIFRlYXRpbWUgW3Byb25vdW5jZWQgVGVoLWFoLXRpbS1laF0gaGFzIGp1c3QgYmVlbiB0aHdhcnRlZCBpbgojICAgICAgICAgaGlzIGVsYWJvcmF0ZSBwbG90IHRvIGx1cmUgYW5kIHRoZW4ga2lsbCBEZWF0aCkKJXBhc3NhZ2UgMTAKIldoYXQgZGlkIGhlIGRvIGl0IGFsbCBmb3I/IiBzYWlkIFN1c2FuLiAgIkkgbWVhbiwgd2h5PyAgTW9uZXk/ICBQb3dlcj8iCgpTT01FIFBFT1BMRSBXSUxMIERPIEFOWVRISU5HIEZPUiBUSEUgU0hFRVIgRkFTQ0lOQVRJT04gT0YgRE9JTkcgSVQsIHNhaWQKRGVhdGguICBPUiBUSEUgRkFNRS4gIE9SIEJFQ0FVU0UgVEhFWSBTSE9VTEROJ1QuCgogIFtIb2dmYXRoZXIsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQolZSB0aXRsZQojCiMKIwoldGl0bGUgSmluZ28gKDEyKQolcGFzc2FnZSAxCiMgcC4gMjA2IChIYXJwZXIgVG9yY2ggRWRpdGlvbjsgcGFzc2FnZSBzdGFydHMgbWlkLXBhcmFncmFwaCkKSXQgd2FzIHNvIG11Y2ggZWFzaWVyIHRvIGJsYW1lIGl0IG9uIFRoZW0uICBJdCB3YXMgYmxlYWtseSBkZXByZXNzaW5nIHRvCnRoaW5rIHRoYXQgVGhleSB3ZXJlIFVzLiAgSWYgaXQgd2FzIFRoZW0sIHRoZW4gbm90aGluZyB3YXMgYW55b25lJ3MgZmF1bHQuCklmIGl0IHdhcyBVcywgd2hhdCBkaWQgdGhhdCBtYWtlIE1lPyAgQWZ0ZXIgYWxsLCBJJ20gb25lIG9mIFVzLiAgSSBtdXN0IGJlLgpJJ3ZlIGNlcnRhaW5seSBuZXZlciB0aG91Z2h0IG9mIG15c2VsZiBhcyBvbmUgb2YgVGhlbS4gIC9ObyBvbmUvIGV2ZXIgdGhpbmtzCm9mIHRoZW1zZWx2ZXMgYXMgb25lIG9mIFRoZW0uICBXZSdyZSBhbHdheXMgb25lIG9mIFVzLiAgSXQncyBUaGVtIHRoYXQgZG8KdGhlIGJhZCB0aGluZ3MuCgogIFtKaW5nbywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDIzLTI1IChIYXJwZXIgVG9yY2ggZWRpdGlvbikgW3RyYW5zY3JpYmVkIGZyb20gc29tZSBvdGhlciBlZGl0aW9uXQolcGFzc2FnZSAyClRoZXJlIHdhcyBhIGdlbmVyYWwgc2hpZnRpbmcgb2YgcG9zaXRpb24gYW5kIGEgZ3JvdXAgY2xlYXJpbmcgb2YgdGhyb2F0cy4KCidXaGF0IGFib3V0IG1lcmNlbmFyaWVzPycgc2FpZCBCb2dnaXMuCgonVGhlIHByb2JsZW0gd2l0aCBtZXJjZW5hcmllcycsIHNhaWQgdGhlIFBhdHJpY2lhbiwgJ2lzIHRoYXQgdGhleSBuZWVkIHRvCmJlIHBhaWQgdG8gc3RhcnQgZmlnaHRpbmcuICBBbmQsIHVubGVzcyB5b3UgYXJlIHZlcnkgbHVja3ksIHlvdSBlbmQgdXAKcGF5aW5nIHRoZW0gZXZlbiBtb3JlIHRvIHN0b3AtLScKClNlbGFjaGlpIHRodW1wZWQgdGhlIHRhYmxlLgoKJ1Zlcnkgd2VsbCwgdGhlbiwgYnkgamluZ28hJyBoZSBzbmFybGVkLiAgJ0Fsb25lIScKCidXZSBjb3VsZCBjZXJ0YWlubHkgZG8gd2l0aCBvbmUsJyBzYWlkIExvcmQgVmV0aW5hcmkuICAnV2UgbmVlZCB0aGUgbW9uZXkuCkkgd2FzIGFib3V0IHRvIHNheSB0aGF0IHdlIGNhbm5vdCAvYWZmb3JkLyBtZXJjZW5hcmllcy4nCgonSG93IGNhbiB0aGlzIGJlPycgc2FpZCBMb3JkIERvd25leS4gICdEb24ndCB3ZSBwYXkgb3VyIHRheGVzPycKCidBaCwgSSB0aG91Z2h0IHdlIG1pZ2h0IGNvbWUgdG8gdGhhdCwnIHNhaWQgTG9yZCBWZXRpbmFyaS4gIEhlIHJhaXNlZApoaXMgaGFuZCBhbmQsIG9uIGN1ZSBhZ2FpbiwgaGlzIGNsZXJrIHBsYWNlZCBhIHBpZWNlIG9mIHBhcGVyIGluIGl0LgoKJ0xldCBtZSBzZWUgbm93IC4uLiBhaCB5ZXMuICBHdWlsZCBvZiBBc3Nhc3NpbnMgLi4uICBHcm9zcyBlYXJuaW5ncyBpbgp0aGUgbGFzdCB5ZWFyOiBBTSQxMywyMDcsMDQ4LiAgVGF4ZXMgcGFpZCBpbiB0aGUgbGFzdCB5ZWFyOiBmb3J0eS1zZXZlbgpkb2xsYXJzLCB0d2VudHktdHdvIHBlbmNlIGFuZCB3aGF0IG9uIGV4YW1pbmF0aW9uIHR1cm5lZCBvdXQgdG8gYmUgYQpIZXJzaGViaWFuIGhhbGYtL2RvbmcvLCB3b3J0aCBvbmUgZWlnaHRoIG9mIGEgcGVubnkuJwoKJ1RoYXQncyBhbGwgcGVyZmVjdGx5IGxlZ2FsISAgVGhlIEd1aWxkIG9mIEFjY291bnRhbnRzLS0nCgonQWggeWVzLiAgR3VpbGQgb2YgQWNjb3VudGFudHM6IGdyb3NzIGVhcm5pbmdzIEFNJDcsOTk5LDAxMS4gIFRheGVzIHBhaWQ6Cm5pbC4gIEJ1dCwgYWggeWVzLCBJIHNlZSB0aGV5IGFwcGxpZWQgZm9yIGEgcmViYXRlIG9mIEFNJDIwMCwwMDAuJwoKJ0FuZCB3aGF0IHdlIHJlY2VpdmVkLCBJIG1heSBzYXksIGluY2x1ZGVkIGEgSGVyc2hlYmlhbiBoYWxmLS9kb25nLywnCnNhaWQgTXIgRnJvc3RyaXAgb2YgdGhlIEd1aWxkIG9mIEFjY291bnRhbnRzLgoKJ1doYXQgZ29lcyBhcm91bmQgY29tZXMgYXJvdW5kLCcgc2FpZCBWZXRpbmFyaSBjYWxtbHkuCgpIZSB0b3NzZWQgdGhlIHBhcGVyIGFzaWRlLiAgJ1RheGF0aW9uLCBnZW50bGVtZW4sIGlzIHZlcnkgbXVjaCBsaWtlIGRhaXJ5CmZhcm1pbmcuICBUaGUgdGFzayBpcyB0byBleHRyYWN0IHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtaWxrIHdpdGggdGhlCm1pbmltdW0gb2YgbW9vLiAgQW5kIEkgYW0gYWZyYWlkIHRvIHNheSB0aGF0IHRoZXNlIGRheXMgYWxsIEkgZ2V0IGlzIG1vby4nCgonQXJlIHlvdSB0ZWxsaW5nIHVzIHRoYXQgQW5raC1Nb3Jwb3JrIGlzIC9iYW5rcnVwdC8/JyBzYWlkIERvd25leS4KCidPZiBjb3Vyc2UuICBXaGlsZSwgYXQgdGhlIHNhbWUgdGltZSwgZnVsbCBvZiByaWNoIHBlb3BsZS4gIEkgdHJ1c3QgdGhleQpoYXZlIGJlZW4gc3BlbmRpbmcgdGhlaXIgZ29vZCBmb3J0dW5lIG9uIHN3b3Jkcy4nCgonQW5kIHlvdSBoYXZlIC9hbGxvd2VkLyB0aGlzIHdob2xlc2FsZSB0YXggYXZvaWRhbmNlPycgc2FpZCBMb3JkIFNlbGFjaGlpLgoKJ09oLCB0aGUgdGF4ZXMgaGF2ZW4ndCBiZWVuIGF2b2lkZWQsJyBzYWlkIExvcmQgVmV0aW5hcmkuICAnT3IgZXZlbiBldmFkZWQuClRoZXkganVzdCBoYXZlbid0IGJlZW4gcGFpZC4nCgonVGhhdCBpcyBhIGRpc2d1c3Rpbmcgc3RhdGUgb2YgYWZmYWlycyEnCgpUaGUgUGF0cmljaWFuIHJhaXNlZCBoaXMgZXllYnJvd3MuICAnQ29tbWFuZGVyIFZpbWVzPycKCidZZXMsIHNpcj8nCgonV291bGQgeW91IGJlIHNvIGdvb2QgYXMgdG8gYXNzZW1ibGUgYSBzcXVhZCBvZiB5b3VyIG1vc3QgZXhwZXJpZW5jZWQgbWVuLApsaWFpc2Ugd2l0aCB0aGUgdGF4IGdhdGhlcmVycyBhbmQgb2J0YWluIHRoZSBhY2N1bXVsYXRlZCBiYWNrIHRheGVzLApwbGVhc2U/ICBNeSBjbGVyayBoZXJlIHdpbGwgZ2l2ZSB5b3UgYSBsaXN0IG9mIHRoZSBwcmltZSBkZWZhdWx0ZXJzLicKCidSaWdodCwgc2lyLiAgQW5kIGlmIHRoZXkgcmVzaXN0LCBzaXI/JyBzYWlkIFZpbWVzLCBzbWlsaW5nIG5hc3RpbHkuCgonT2gsIGhvdyBjYW4gdGhleSByZXNpc3QsIGNvbW1hbmRlcj8gIFRoaXMgaXMgdGhlIHdpbGwgb2Ygb3VyIGNpdmljCmxlYWRlcnMuJyAgSGUgdG9vayB0aGUgcGFwZXIgaGlzIGNsZXJrIHByb2ZmZXJlZC4gICdMZXQgbWUgc2VlLCBub3cuICBUb3AKb2YgdGhlIGxpc3QtLScKCkxvcmQgU2VsYWNoaWkgY291Z2hlZCBodXJyaWVkbHkuICAnRmFyIHRvbyBsYXRlIGZvciB0aGF0IHNvcnQgb2Ygbm9uc2Vuc2UKbm93LCcgaGUgc2FpZC4KCidXYXRlciB1bmRlciB0aGUgYnJpZGdlLCcgc2FpZCBMb3JkIERvd25leS4KCidEZWFkIGFuZCBidXJpZWQsJyBzYWlkIE1yIFNsYW50LgoKJ0kgcGFpZCBtaW5lLCcgc2FpZCBWaW1lcy4KCiAgW0ppbmdvLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiA3IChIYXJwZXIgVG9yY2ggZWRpdGlvbikKJXBhc3NhZ2UgMwpBcyBldmVyeSBzdHVkZW50IG9mIGV4cGxvcmF0aW9uIGtub3dzLCB0aGUgcHJpemUgZ29lcyBub3QgdG8gdGhlIGV4cGxvcmVyCndobyBmaXJzdCBzZXRzIGZvb3QgdXBvbiB0aGUgdmlyZ2luIHNvaWwgYnV0IHRvIHRoZSBvbmUgd2hvIGdldHMgdGhhdCBmb290CmhvbWUgZmlyc3QuICBJZiBpdCBpcyBzdGlsbCBhdHRhY2hlZCB0byBoaXMgbGVnLCB0aGlzIGlzIGEgYm9udXMuCgogIFtKaW5nbywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMzQKJXBhc3NhZ2UgNApTZXJnZWFudCBDb2xvbiBoYWQgaGFkIGEgYnJvYWQgZWR1Y2F0aW9uLiAgSGUnZCBiZWVuIHRvIHRoZSBTY2hvb2wgb2YgTXkKRGFkIEFsd2F5cyBTYWlkLCB0aGUgQ29sbGVnZSBvZiBJdCBTdGFuZHMgdG8gUmVhc29uLCBhbmQgd2FzIG5vdyBhIHBvc3QtCmdyYWR1YXRlIHN0dWRlbnQgYXQgdGhlIFVuaXZlcnNpdHkgb2YgV2hhdCBTb21lIEJsb2tlIEluIHRoZSBQdWIgVG9sZCBNZS4KCiAgW0ppbmdvLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gNDMtNDQKJXBhc3NhZ2UgNQoiSGV5LCB0aGF0J3MgUmVnIFNob2UhICBIZSdzIGEgem9tYmllLiAgSGUgZmFsbHMgdG8gYml0cyBhbGwgdGhlIHRpbWUhIgoKIlZlcnkgYmlnIG1hbiBpbiB0aGUgdW5kZWFkIGNvbW11bml0eSwgc2lyLCIgc2FpZCBDYXJyb3QuCgoiSG93IGNvbWUgL2hlLyBqb2luZWQ/IgoKIkhlIGNhbWUgcm91bmQgbGFzdCB3ZWVrIHRvIGNvbXBsYWluIGFib3V0IHRoZSBXYXRjaCBoYXJhc3Npbmcgc29tZQpib2dleW1lbiwgc2lyLiAgSGUgd2FzIHZlcnksIGVyLCB2ZWhlbWVudCwgc2lyLiAgU28gSSBwZXJzdWFkZWQgaGltIHRoYXQKd2hhdCB0aGUgV2F0Y2ggbmVlZGVkIHdhcyBzb21lIGV4cGVydGlzZSwgc28gaGUgam9pbmVkIHVwLCBzaXIuIgoKIk5vIG1vcmUgY29tcGxhaW50cz8iCgoiVHdpY2UgYXMgbWFueSwgc2lyLiAgQWxsIGZyb20gdW5kZWFkLCBzaXIsIGFuZCBhbGwgYWdhaW5zdCBNci4gU2hvZS4KRnVubnkgVGhhdC4iCgogIFtKaW5nbywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDc4LTc5CiVwYXNzYWdlIDYKUGVyaGFwcyBpdCB3YXMgYmVjYXVzZSBoZSB3YXMgdGlyZWQsIG9yIGp1c3QgYmVjYXVzZSBoZSB3YXMgdHJ5aW5nIHRvIHNodXQKb3V0IHRoZSB3b3JsZCwgYnV0IFZpbWVzIGZvdW5kIGhpbXNlbGYgc2xvd2luZyBkb3duIGludG8gdGhlIHRyYWRpdGlvbmFsCldhdGNobWFuJ3Mgd2FsayBhbmQgdGhlIHRyYWRpdGlvbmFsIGlkbGluZyB0aG91Z2h0IHByb2Nlc3MuCgpJdCB3YXMgYW4gYWxtb3N0IFBhdmxvdmlhbiByZXNwb25zZS4oMSkgIFRoZSBsZWdzIHN3dW5nLCB0aGUgZmVldCBtb3ZlZCwKdGhlIG1pbmQgYmVnYW4gdG8gd29yayBpbiBhIGNlcnRhaW4gd2F5LiAgSXQgd2Fzbid0IGEgZHJlYW0gc3RhdGUsIGV4YWN0bHkuCkl0IHdhcyBqdXN0IHRoYXQgdGhlIGVhcnMsIG5vc2UgYW5kIGV5ZWJhbGxzIHdpcmVkIHRoZW1zZWx2ZXMgc3RyYWlnaHQgaW50bwp0aGUgYW5jaWVudCAic3VzcGljaW91cyBiYXN0YXJkIiBub2RlIG9mIGhpcyBicmFpbiwgbGVhdmluZyBoaXMgaGlnaGVyCmJyYWluIGNlbnRlciBmcmVlIHRvIGZyZWV3aGVlbC4KCigxKSBBIHRlcm0gaW52ZW50ZWQgYnkgdGhlIHdpemFyZCBEZW5lcGhldyBCb290LCgyKSB3aG8gaGFkIGZvdW5kIHRoYXQgYnkKYSBzeXN0ZW0gb2YgcmV3YXJkcyBhbmQgcHVuaXNobWVudHMgaGUgY291bGQgdHJhaW4gYSBkb2csIGF0IHRoZSByaW5naW5nCm9mIGEgYmVsbCwgdG8gaW1tZWRpYXRlbHkgZWF0IGEgc3RyYXdiZXJyeSBtZXJpbmd1ZS4KCigyKSBIaXMgcGFyZW50cywgd2hvIHdlcmUgdW5jb21wbGljYXRlZCBjb3VudHJ5IHBlb3BsZSwgaGFkIHdhbnRlZCBhIGdpcmwuClRoZXkgd2VyZSBleHBlY3RpbmcgdG8gY2FsbCBoZXIgRGVuaXNlLgoKICBbSmluZ28sIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiA5Mi05MwolcGFzc2FnZSA3CiJXaGF0IHdhcyBpdCwgTGVvbmFyZD8iCgoiQW4gZXhwZXJpbWVudGFsIGRldmljZSBmb3IgdHVybmluZyBjaGVtaWNhbCBlbmVyZ3kgaW50byByb3RhcnkgbW90aW9uLCIKc2FpZCBMZW9uYXJkLiAgIlRoZSBwcm9ibGVtLCB5b3Ugc2VlLCBpcyBnZXR0aW5nIHRoZSBsaXR0bGUgcGVsbGV0cyBvZgpibGFjayBwb3dkZXIgaW50byB0aGUgY29tYnVzdGlvbiBjaGFtYmVyIGF0IGV4YWN0bHkgdGhlIHJpZ2h0IHNwZWVkIGFuZApvbmUgYXQgYSB0aW1lLiAgSWYgdHdvIGlnbml0ZSB0b2dldGhlciwgd2VsbCwgd2hhdCBoZSBoYXZlIGlzIHRoZQovZXh0ZXJuYWwvIGNvbWJ1c3Rpb24gZW5naW5lLiIKCiJBbmQsIGVyLCB3aGF0IHdvdWxkIGJlIHRoZSBwdXJwb3NlIG9mIGl0PyIgc2FpZCB0aGUgUGF0cmljaWFuLgoKIkkgYmVsaWV2ZSBpdCBjb3VsZCByZXBsYWNlIHRoZSBob3JzZSwiIExlb25hcmQgc2FpZCBwcm91ZGx5LgoKVGhleSBsb29rZWQgYXQgdGhlIHN0cmlja2VuIHRoaW5nLgoKIk9uZSBvZiB0aGUgYWR2YW50YWdlcyBvZiBob3JzZXMgdGhhdCBwZW9wbGUgb2Z0ZW4gcG9pbnQgb3V0LCIgc2FpZApWZXRpbmFyaSwgYWZ0ZXIgc29tZSB0aG91Z2h0LCAiaXMgdGhhdCB0aGV5IHZlcnkgc2VsZG9tIGV4cGxvZGUuICBBbG1vc3QKbmV2ZXIsIGluIG15IGV4cGVyaWVuY2UsIGFwYXJ0IGZyb20gdGhhdCB1bmZvcnR1bmF0ZSBvY2N1cnJlbmNlIGluIHRoZSBob3QKc3VtbWVyIGEgZmV3IHllYXJzIGFnby4iICBXaXRoIGZhc3RpZGlvdXMgZmluZ2VycyBoZSBwdWxsZWQgc29tZXRoaW5nIG91dApvZiB0aGUgbWVzcy4gIEl0IHdhcyBhIHBhaXIgb2YgY3ViZXMsIG1hZGUgb3V0IG9mIHNvbWUgc29mdCB3aGl0ZSBmdXIgYW5kCmxpbmtlZCB0b2dldGhlciBieSBhIHBpZWNlIG9mIHN0cmluZy4gIFRoZXJlIHdlcmUgZG90cyBvbiB0aGVtLgoKIkRpY2U/IiBoZSBzYWlkLgoKTGVvbmFyZCBzbWlsZWQgaW4gYW4gZW1iYXJyYXNzZWQgZmFzaGlvbi4gICJZZXMuICBJIGNhbid0IHRoaW5rIHdoeSBJCnRob3VnaHQgdGhleSdkIGhlbHAgaXQgZ28gYmV0dGVyLiAgSXQgd2FzIGp1c3QsIHdlbGwsIGFuIGlkZWEuICBZb3Uga25vdwpob3cgaXQgaXMuIgoKICBbSmluZ28sIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDk4ICgxc3QgIkhlIjogTGVvbmFyZDsgMm5kICJIZSI6IFZldGluYXJpOyBsYXN0ICJIZSI6IExlb25hcmQgYWdhaW4pCiVwYXNzYWdlIDgKSGUgd2FzIGFzIGVhc2lseSBkaXN0cmFjdGVkIGFzIGEga2l0dGVuLiAgQWxsIHRoYXQgYnVzaW5lc3Mgd2l0aCB0aGUKZmx5aW5nIG1hY2hpbmUsIGZvciBleGFtcGxlLiAgR2lhbnQgYmF0IHdpbmdzIGh1bmcgZnJvbSB0aGUgY2VpbGluZyBldmVuCm5vdy4gIFRoZSBQYXRyaWNpYW4gaGFkIGJlZW4gbW9yZSB0aGFuIGhhcHB5IHRvIGxldCBoaW0gd2FzdGUgaGlzIHRpbWUgb24KdGhhdCBpZGVhLCBiZWNhdXNlIGl0IHdhcyBvYnZpb3VzIHRvIGFueW9uZSB0aGF0IG5vIGh1bWFuIGJlaW5nIHdvdWxkIGV2ZXIKYmUgYWJsZSB0byBmbGFwIHRoZSB3aW5ncyBoYXJkIGVub3VnaC4KCkhlIG5lZWRuJ3QgaGF2ZSB3b3JyaWVkLiAgTGVvbmFyZCB3YXMgaGlzIG93biBkaXN0cmFjdGlvbi4gIEhlIGhhZCBlbmRlZAp1cCBzcGVuZGluZyBhZ2VzIGRlc2lnbmluZyBhIHNwZWNpYWwgdHJheSBzbyB0aGF0IHBlb3BsZSBjb3VsZCBlYXQgdGhlaXIKbWVhbHMgaW4gdGhlIGFpci4KCiAgW0ppbmdvLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxNTUKJXBhc3NhZ2UgOQpTaGUgaGVsZCB0aGUgbGFtcCBoaWdoZXIuCgpSYW1raW5zIGxvb2tlZCBkb3duIHRoZWlyIG5vc2VzIGF0IGhlciBmcm9tIHRoZWlyIGZyYW1lcywgdGhyb3VnaCB0aGUgYnJvd24KdmFybmlzaCBvZiB0aGUgY2VudHVyaWVzLiAgUG9ydHJhaXRzIHdlcmUgYW5vdGhlciB0aGluZyB0aGF0IGhhZCBiZWVuCmNvbGxlY3RlZCBvdXQgb2YgdW5yZWdhcmRlZCBoYWJpdC4KCk1vc3Qgb2YgdGhlbSB3ZXJlIG1lbi4gIFRoZXkgd2VyZSBpbnZhcmlhYmx5IGluIGFybW9yIGFuZCBhbHdheXMgb24KaG9yc2ViYWNrLiAgQW5kIGV2ZXJ5IHNpbmdsZSBvbmUgb2YgdGhlbSBoYWQgZm91Z2h0IHRoZSBzd29ybiBlbmVtaWVzIG9mCkFua2gtTW9ycG9yay4KCkluIHJlY2VudCB0aW1lcyB0aGlzIGhhZCBiZWVuIHF1aXRlIGRpZmZpY3VsdCBhbmQgaGVyIGdyYW5kZmF0aGVyLCBmb3IKZXhhbXBsZSwgaGFkIHRvIGxlYWQgYW4gZXhwZWRpdGlvbiBhbGwgdGhlIHdheSB0byBIb3dvbmRhbGFuZCBpbiBvcmRlciB0bwpmaW5kIHNvbWUgc3dvcm4gZW5lbWllcywgYWx0aG91Z2ggdGhlcmUgd2FzIGFuIGFkZXF1YXRlIHN1cHBseSBhbmQgYSBsb3QKb2Ygc3dlYXJpbmcgYnkgdGhlIHRpbWUgaGUgbGVmdC4gIEVhcmxpZXIsIG9mIGNvdXJzZSwgaXQgaGFkIGJlZW4gYSBsb3QKZWFzaWVyLiAgUmFta2luIHJlZ2ltZW50cyBoYWQgZm91Z2h0IHRoZSBjaXR5J3MgZW5lbWllcyBhbGwgb3ZlciB0aGUgU3RvClBsYWlucyBhbmQgaGFkIGluZmxpY3RlZCBoZXJvaWMgY2FzdWFsdGllcywgcXVpdGUgb2Z0ZW4gb24gcGVvcGxlIGluIHRoZQpvcHBvc2luZyBhcm1pZXMuKDEpCgooMSkgSXQgaXMgYSBsb25nLWNoZXJpc2hlZCB0cmFkaXRpb24gYW1vbmcgYSBjZXJ0YWluIHR5cGUgb2YgbWlsaXRhcnkKdGhpbmtlciB0aGF0IGh1Z2UgY2FzdWFsdGllcyBhcmUgdGhlIG1haW4gdGhpbmcuICBJZiB0aGV5IGFyZSBvbiB0aGUgb3RoZXIKc2lkZSB0aGVuIHRoaXMgaXMgYSB2YWx1YWJsZSBib251cy4KCiAgW0ppbmdvLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMTgwLTE4MSAodGhlIHNhbWUgZ2FnIHdhcyB1c2VkIGluIHRoZSAxOTY4IG1vdmllICJTdXBwb3J0IFlvdXIgTG9jYWwKIyAgICAgICAgICAgICAgU2hlcmlmZiIsIHdpdGggYSBkZW50ZWQgYmFkZ2UgcmF0aGVyIHRoYW4gYSBib29rKQolcGFzc2FnZSAxMApIZSBydW1tYWdlZCBpbiBhIHBvY2tldCBhbmQgcHJvZHVjZWQgYSB2ZXJ5IHNtYWxsIGJvb2ssIHdoaWNoIGhlIGhlbGQgdXAKZm9yIGluc3BlY3Rpb24uCgoiVGhpcyBiZWxvbmdlZCB0byBteSBncmVhdC1ncmFuZGFkLCIgaGUgc2FpZC4gICJIZSB3YXMgaW4gdGhlIHNjcmFwIHdlIGhhZAphZ2FpbnN0IFBzZXVkb3BvbGlzIGFuZCBteSBncmVhdC1ncmFuIGdhdmUgaGltIHRoaXMgYm9vayBvZiBwcmF5ZXJzIGZvcgpzb2xkaWVycywgJ2NvcyB5b3UgbmVlZCBhbGwgdGhlIHByYXllcnMgeW91IGNhbiBnZXQsIGJlbGlldmUgeW91IG1lLCBhbmQKaGUgc3R1Y2sgaXQgaW4gdGhlIHRvcCBwb2NrZXQgb2YgaGlzIGplcmtpbiwgJ2NhdXNlIGhlIGNvdWxkbid0IGFmZm9yZAphcm1vciwgYW5kIG5leHQgZGF5IGluIGJhdHRsZS0td2hvb3NoLCB0aGlzIGFycm93IGNhbWUgb3V0IG9mIG5vd2hlcmUsIHdoYW0sCnN0cmFpZ2h0IGludG8gdGhpcyBib29rIGFuZCBpdCB3ZW50IGFsbCB0aGUgd2F5IHRocm91Z2ggdG8gdGhlIGxhc3QgcGFnZQpiZWZvcmUgc3RvcHBpbmcsIGxvb2suICBZb3UgY2FuIHNlZSB0aGUgaG9sZS4iCgoiUHJldHR5IG1pcmFjdWxvdXMsIiBDYXJyb3QgYWdyZWVkLgoKIlllYWgsIGl0IHdhcywgSSBzJ3Bvc2UsIiBzYWlkIHRoZSBzZXJnZWFudC4gIEhlIGxvb2tlZCBydWVmdWxseSBhdCB0aGUKYmF0dGVyZWQgdm9sdW1lLiAgIlNoYW1lIGFib3V0IHRoZSBvdGhlciBzZXZlbnRlZW4gYXJyb3dzLCByZWFsbHkuIgoKICBbSmluZ28sIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDIxOAolcGFzc2FnZSAxMQoiRXIgLi4uIHdoYXQgaXMgdGhpcyB0aGluZyBjYWxsZWQ/IiBzYWlkIENvbG9uLCBhcyBoZSBmb2xsb3dlZCB0aGUKUGF0cmljaWFuIHVwIHRoZSBsYWRkZXIuCgoiV2VsbCwgYmVjYXVzZSBpdCBpcyAvc3VibWVyc2VkLyBpbiBhIC9tYXJpbmUvIGVudmlyb25tZW50LCBJJ3ZlIGFsd2F5cwpjYWxsZWQgaXQgdGhlIEdvaW5nLVVuZGVyLXRoZS1XYXRlci1TYWZlbHkgRGV2aWNlLCIgc2FpZCBMZW9uYXJkLCBiZWhpbmQKaGltLigxKSAgIkJ1dCB1c3VhbGx5IEkganVzdCB0aGluayBvZiBpdCBhcyB0aGUgYm9hdC4iCgooMSkgVGhpbmtpbmcgdXAgZ29vZCBuYW1lcyB3YXMsIG9kZGx5IGVub3VnaCwgd2FzIG9uZSBhcmVhIHdoZXJlIExlb25hcmQKb2YgUXVpcm0ncyBnZW5pb3VzIHRlbmRlZCB0byBnaXZlIHVwLgoKICBbSmluZ28sIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDI3NCAocGFzc2FnZSBzdGFydHMgbWlkLXBhcmFncmFwaCkKJXBhc3NhZ2UgMTIKIlsuLi5dICBJIG1lYW4sIHdoYXQncmUgb3VyIGxvbmctdGVybSBvYmplY3RpdmVzPyIKCiJDb29raW5nIG1lYWxzIGFuZCBrZWVwaW5nIHdhcm0/IiBzYWlkIExlcyBob3BlZnVsbHkuCgoiV2VsbCwgL2luaXRpYWxseS8sIiBzYWlkIEphY2tzb24uICAiVGhhdCdzIG9idmlvdXMuICBCdXQgeW91IGtub3cgd2hhdAp0aGV5IHNheSwgbGFkLiAgJ0dpdmUgYSBtYW4gYSBmaXJlIGFuZCBoZSdzIHdhcm0gZm9yIGEgZGF5LCBidXQgc2V0IGZpcmUgdG8KaGltIGFuZCBoZSdzIHdhcm0gZm9yIHRoZSByZXN0IG9mIGhpcyBsaWZlLicgIFNlZSBteSBwb2ludD8iCgoiSSBkb24ndCB0aGluayB0aGF0J3MgYWN0dWFsbHkgd2hhdCB0aGUgc2F5aW5nIGlzLS0iCgogIFtKaW5nbywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiVlIHRpdGxlCiMKIwojCiV0aXRsZSBUaGUgTGFzdCBDb250aW5lbnQgKDEwKQojIHAuIDI2MCAoSGFycGVyIFRvcmNoIGVkaXRpb24pCiVwYXNzYWdlIDEKIklzIGl0IHRydWUgdGhhdCB5b3VyIGxpZmUgcGFzc2VzIGJlZm9yZSB5b3VyIGV5ZXMgYmVmb3JlIHlvdSBkaWU/IgoKWUVTLgoKIkdoYXN0bHkgdGhvdWdodCwgcmVhbGx5LiIgIFJpbmNld2luZCBzaHVkZGVyZWQuICAiT2gsIC9nb2RzLywgSSd2ZSBqdXN0CmhhZCBhbm90aGVyIG9uZS4gIFN1cHBvc2UgSSAvYW0vIGp1c3QgYWJvdXQgdG8gZGllIGFuZCAvdGhpcy8gaXMgbXkgd2hvbGUKbGlmZSBwYXNzaW5nIGluIGZyb250IG9mIG15IGV5ZXM/IgoKSSBUSElOSyBQRVJIQVBTIFlPVSBETyBOT1QgVU5ERVJTVEFORC4gIFBFT1BMRSdTIFdIT0xFIExJVkVTIC9ETy8gUEFTUyBJTgpGUk9OVCBPRiBUSEVJUiBFWUVTIEJFRk9SRSBUSEVZIERJRS4gIFRIRSBQUk9DRVNTIElTIENBTExFRCAiTElWSU5HIi4gIFsuLi5dCgogIFtUaGUgTGFzdCBDb250aW5lbnQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQolcGFzc2FnZSAyCiJXaGVuIFlvdSdyZSBVcCB0byBZb3VyIEFzcyBpbiBBbGxpZ2F0b3JzLCBUb2RheSBJcyB0aGUgRmlyc3QgRGF5IG9mIHRoZQpSZXN0IG9mIFlvdXIgTGlmZS4iCgogIFtUaGUgTGFzdCBDb250aW5lbnQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuMyAoSGFycGVyIFRvcmNoIGVkaXRpb24pCiVwYXNzYWdlIDMKQWxsIHRyaWJhbCBteXRocyBhcmUgdHJ1ZSwgZm9yIGEgZ2l2ZW4gdmFsdWUgb2YgInRydWUuIgoKICBbVGhlIExhc3QgQ29udGluZW50LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMTMtMTQKJXBhc3NhZ2UgNApQb25kZXIgL2tuZXcvIGhlIHNob3VsZCBuZXZlciBoYXZlIGxldCBSaWRjdWxseSBsb29rIGF0IHRoZSBpbnZpc2libGUKd3JpdGluZ3MuICBXYXNuJ3QgaXQgYSBiYXNpYyBwcmluY2lwbGUgbmV2ZXIgdG8gbGV0IHlvdXIgZW1wbG95ZXIga25vdyB3aGF0Cml0IGlzIHRoYXQgeW91IGFjdHVhbGx5IC9kby8gYWxsIGRheT8KCkJ1dCBubyBtYXR0ZXIgd2hhdCBwcmVjYXV0aW9ucyB5b3UgdG9vaywgc29vbmVyIG9yIGxhdGVyIHRoZSBib3NzIHdhcyBib3VuZAp0byBjb21lIGluIGFuZCBwb2tlIGFyb3VuZCBhbmQgc2F5IHRoaW5ncyBsaWtlLCAiSXMgdGhpcyB3aGVyZSB5b3Ugd29yaywKdGhlbj8iIGFuZCAiSSB0aG91Z2h0IEkgc2VudCBhIG1lbW8gb3V0IGFib3V0IHBlb3BsZSBicmluZ2luZyBpbiBwb3R0ZWQKcGxhbnRzLCIgYW5kICJXaGF0IGQneW91IGNhbGwgdGhhdCB0aGluZyB3aXRoIHRoZSBrZXlib2FyZD8iCgogIFtUaGUgTGFzdCBDb250aW5lbnQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDIxIChwYXNzYWdlIGJlZ2lucyBtaWQtcGFyYWdyYXBoKQolcGFzc2FnZSA1ClsuLi5dICBBbnkgdHJ1ZSB3aXphcmQsIGZhY2VkIHdpdGggYSBzaWduIGxpa2UgIkRvIG5vdCBvcGVuIHRoaXMgZG9vci4KUmVhbGx5LiAgV2UgbWVhbiBpdC4gIFdlJ3JlIG5vdCBraWRkaW5nLiAgT3BlbmluZyB0aGlzIGRvb3Igd2lsbCBtZWFuIHRoZQplbmQgb2YgdGhlIHVuaXZlcnNlLCIgd291bGQgL2F1dG9tYXRpY2FsbHkvIG9wZW4gdGhlIGRvb3IgaW4gb3JkZXIgdG8gc2VlCndoYXQgYWxsIHRoZSBmdXNzIHdhcyBhYm91dC4gIFRoaXMgbWFkZSBzaWducyBhIHdhc3RlIG9mIHRpbWUsIGJ1dCBhdCBsZWFzdAppdCBtZWFudCB0aGF0IHdoZW4geW91IGhhbmRlZCB3aGF0IHdhcyBsZWZ0IG9mIHRoZSB3aXphcmQgdG8gaGlzIGdyaWV2aW5nCnJlbGF0aXZlcyB5b3UgY291bGQgc2F5LCBhcyB0aGV5IGdyYXNwZWQgdGhlIGphciwgIldlIC90b2xkLyBoaW0gbm90IHRvLiIKCiAgW1RoZSBMYXN0IENvbnRpbmVudCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjIgKHRoZSBib29rcyBhcmUgYWN0aW5nIHVwIHdoaWxlIHRoZSBMaWJyYXJpYW4gaXMgaW5jYXBhY2l0YXRlZCBhbmQKIyAgICAgICAgbm93IGl0J3MgdW5zYWZlIHRvIGdvIGludG8gdGhlIGxpYnJhcnkpCiVwYXNzYWdlIDYKIkJ1dCB3ZSdyZSBhIHVuaXZlcnNpdHkhICBXZSAvaGF2ZS8gdG8gaGF2ZSBhIGxpYnJhcnkhIiBzYWlkIFJpZGN1bGx5LiAgIkl0CmFkZHMgL3RvbmUvLiAgV2hhdCBzb3J0IG9mIHBlb3BsZSB3b3VsZCB3ZSBiZSBpZiB3ZSBkaWRuJ3QgZ28gaW50byB0aGUKTGlicmFyeT8iCgoiU3R1ZGVudHMsIiBzYWlkIHRoZSBTZW5pb3IgV3JhbmdsZXIgbW9yb3NlbHkuCgoiSGFoLCBJIHJlbWVtYmVyIHdoZW4gSSB3YXMgYSBzdHVkZW50LCIgc2FpZCB0aGUgTGVjdHVyZXIgaW4gUmVjZW50IFJ1bmVzLgoiT2xkICdCb2dleWJveScgU3dhbGxldHQgdG9vayB1cyBvbiBhbiBleHBlZGl0aW9uIHRvIGZpbmQgdGhlIExvc3QgUmVhZGluZwpSb29tLiAgVGhyZWUgd2Vla3Mgd2Ugd2VyZSB3YW5kZXJpbmcgYXJvdW5kLiAgV2UgaGFkIHRvIGVhdCBvdXIgb3duIGJvb3RzLiIKCiJEaWQgeW91IGZpbmQgaXQ/IiBzYWlkIHRoZSBEZWFuLgoKIk5vLCBidXQgd2UgZm91bmQgdGhlIHJlbWFpbnMgb2YgdGhlIHByZXZpb3VzIHllYXIncyBleHBlZGl0aW9uLiIKCiJXaGF0IGRpZCB5b3UgZG8/IgoKIldlIGF0ZSB0aGVpciBib290cywgdG9vLiIKCiAgW1RoZSBMYXN0IENvbnRpbmVudCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDQ1LTQ2CiVwYXNzYWdlIDcKRGVhdGggaGFkIHRha2VuIHRvIGtlZXBpbmcgUmluY2V3aW5kJ3MgbGlmZXRpbWVyIG9uIGEgc3BlY2lhbCBzaGVsZiBpbiBoaXMKc3R1ZHksIGluIG11Y2ggdGhlIHdheSB0aGF0IGEgem9vbG9naXN0IHdvdWxkIHdhbnQgdG8ga2VlcCBhbiBleWUgb24gYQpwYXJ0aWN1bGFybHkgaW50cmlndWluZyBzcGVjaW1lbi4KClRoZSBsaWZldGltZXJzIG9mIG1vc3QgcGVvcGxlIHdlcmUgdGhlIGNsYXNzaWMgc2hhcGUgdGhhdCBEZWF0aCB0aG91Z2h0CndhcyByaWdodCBhbmQgcHJvcGVyIGZvciB0aGUgdGFzay4gIFRoZXkgYXBwZWFyZWQgdG8gYmUgbGFyZ2UgZWdndGltZXJzLAphbHRob3VnaCwgc2luY2UgdGhlIHNhbmRzIHRoZXkgbWVhc3VyZWQgd2VyZSB0aGUgbGl2aW5nIHNlY29uZHMgb2YKc29tZW9uZSdzIGxpZmUsIGFsbCB0aGUgZWdncyB3ZXJlIGluIG9uZSBiYXNrZXQuCgpSaW5jZXdpbmQncyBob3VyZ2xhc3MgbG9va2VkIGxpa2Ugc29tZXRoaW5nIGNyZWF0ZWQgYnkgYSBnbGFzc2Jsb3dlciB3aG8nZApoYWQgaGljY3VwcyBpbiBhIHRpbWUgbWFjaGluZS4gIEFjY29yZGluZyB0byB0aGUgYW1vdW50IG9mIGFjdHVhbCBzYW5kIGl0CmNvbnRhaW5lZC0tYW5kIERlYXRoIHdhcyBwcmV0dHkgZ29vZCBhdCBtYWtpbmcgdGhpcyBraW5kIG9mIGVzdGltYXRlLS1oZQpzaG91bGQgaGF2ZSBkaWVkIGxvbmcgYWdvLiAgQnV0IHN0cmFuZ2UgY3VydmVzIGFuZCBiZW5kcyBhbmQgZXh0cnVzaW9ucyBvZgpnbGFzcyBoYWQgZGV2ZWxvcGVkIG92ZXIgdGhlIHllYXJzLCBhbmQgcXVpdGUgb2Z0ZW4gdGhlIHNhbmQgd2FzIGZsb3dpbmcKYmFja3dhcmRzLCBvciBkaWFnb25hbGx5LiAgQ2xlYXJseSwgUmluY2V3aW5kIGhhZCBiZWVuIGhpdCBieSBzbyBtdWNoCm1hZ2ljLCBoYWQgYmVlbiB0aHJ1c3QgcmVsdWN0YW50bHkgdGhyb3VnaCB0aW1lIGFuZCBzcGFjZSBzbyBvZnRlbiB0aGF0CmhlJ2QgbmVhcmx5IGJ1bXBlZCBpbnRvIGhpbXNlbGYgY29taW5nIHRoZSBvdGhlciB3YXksIHRoYXQgdGhlIHByZWNpc2UgZW5kCm9mIGhpcyBsaWZlIHdhcyBub3cgYXMgaGFyZCB0byBmaW5kIGFzIHRoZSBzdGFydGluZyBwb2ludCBvbiBhIHJvbGwgb2YKcmVhbGx5IHN0aWNreSB0cmFuc3BhcmVudCB0YXBlLgoKRGVhdGggd2FzIGZhbWlsaWFyIHdpdGggdGhlIGNvbmNlcHQgb2YgdGhlIGV0ZXJuYWwsIGV2ZXItcmVuZXdlZCBoZXJvLCB0aGUKY2hhbXBpb24gd2l0aCBhIHRob3VzYW5kIGZhY2VzLiAgSGUnZCByZWZyYWluZWQgZnJvbSBjb21tZW50aW5nLiAgSGUgbWV0Cmhlcm9lcyBmcmVxdWVudGx5LCBnZW5lcmFsbHkgc3Vycm91bmRlZCBieSwgYW5kIHRoaXMgd2FzIGltcG9ydGFudCwgdGhlCmRlYWQgYm9kaWVzIG9mIC92ZXJ5IG5lYXJseS8gYWxsIG9mIHRoZWlyIGVuZW1pZXMgYW5kIHNheWluZywgIlZvdCB0aGUgaGVsbApzaHVzdCBoYXBwZW5lZD8iICBXaGV0aGVyIHRoZXJlIHdhcyBzb21lIGFycmFuZ2VtZW50IHRoYXQgYWxsb3dlZCB0aGVtIHRvCmNvbWUgYmFjayBhZ2FpbiBhZnRlcndhcmRzIHdhcyBub3Qgc29tZXRoaW5nIGhlIHdvdWxkIGJlIGRyYXduIG9uLgoKQnV0IGhlIHBvbmRlcmVkIHdoZXRoZXIsIGlmIHRoaXMgY3JlYXR1cmUgL2RpZC8gZXhpc3QsIGl0IHdhcyBzb21laG93CmJhbGFuY2VkIGJ5IHRoZSBldGVybmFsIGNvd2FyZC4gIFRoZSBoZXJvIHdpdGggYSB0aG91c2FuZCByZXRyZWF0aW5nIGJhY2tzLApwZXJoYXBzLiAgTWFueSBjdWx0dXJlcyBoYWQgYSBsZWdlbmQgb2YgYW4gdW5keWluZyBoZXJvIHdobyB3b3VsZCBvbmUgZGF5CnJpc2UgYWdhaW4sIHNvIHBlcmhhcHMgdGhlIGJhbGFuY2Ugb2YgbmF0dXJlIGNhbGxlZCBmb3Igb25lIHdobyB3b3VsZG4ndC4KCldoYXRldmVyIHRoZSB1bHRpbWF0ZSB0cnV0aCBvZiB0aGUgbWF0dGVyLCB0aGUgZmFjdCBub3cgd2FzIHRoYXQgRGVhdGggZGlkCm5vdCBoYXZlIHRoZSBzbGlnaHRlc3QgaWRlYSBvZiB3aGVuIFJpbmNld2luZCB3YXMgZ29pbmcgdG8gZGllLiAgVGhpcyB3YXMKdmVyeSB2ZXhpbmcgdG8gYSBjcmVhdHVyZSB3aG8gcHJpZGVkIGhpbXNlbGYgb24gaGlzIHB1bmN0dWFsaXR5LgoKICBbVGhlIExhc3QgQ29udGluZW50LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiA2MQolcGFzc2FnZSA4CkEgYmxhY2sgYW5kIHdoaXRlIGJpcmQgYXBwZWFyZWQsIGFuZCBwZXJjaGVkIG9uIGhpcyBoZWFkLgoKIllvdSBrbm93IHdoYXQgdG8gZG8sIiBzYWlkIHRoZSBvbGQgbWFuLgoKIkhpbT8gIFdoYXQgYSB3b25nYSwiIHNhaWQgdGhlIGJpcmQuICAiSSd2ZSBiZWVuIGxvb2tpbicgYXQgaGltLiAgSGUncyBub3QKZXZlbiBoZXJvaWMuICBIZSdzIGp1c3QgaW4gdGhlIHJpZ2h0IHBsYWNlIGF0IHRoZSByaWdodCB0aW1lLiIKClRoZSBvbGQgbWFuIGluZGljYXRlZCB0aGF0IHRoaXMgd2FzIG1heWJlIHRoZSBkZWZpbml0aW9uIG9mIGEgaGVyby4KCiJBbGwgcmlnaHQsIGJ1dCB3aHkgbm90IGdvIGFuZCBnZXQgdGhlIHRoaW5nIHllcnNlbGY/IiBzYWlkIHRoZSBiaXJkLgoKIllvdSd2ZSBnb3R0YSBoYXZlIGhlcm9lcywiIHNhaWQgdGhlIG9sZCBtYW4uCgoiQW5kIEkgc3VwcG9zZSBJJ2xsIGhhdmUgdG8gaGVscCwiIHNhaWQgdGhlIGJpcmQuICBJdCBzbmlmZmVkLCB3aGljaCBpcwpxdWl0ZSBoYXJkIHRvIGRvIHRocm91Z2ggYSBiZWFrLgoKIlllcC4gIE9mZiB5b3UgZ28uIgoKVGhlIGJpcmQgc2hydWdnZWQsIHdoaWNoIC9pcy8gZWFzeSB0byBkbyBpZiB5b3UgaGF2ZSB3aW5ncywgYW5kIGZsZXcgZG93bgpvZmYgdGhlIG9sZCBtYW4ncyBoZWFkLiAgSXQgZGlkbid0IGxhbmQgb24gdGhlIHJvY2sgYnV0IGZsZXcgaW50byBpdDsgZm9yCmEgbW9tZW50IHRoZXJlIHdhcyBhIGRyYXdpbmcgb2YgYSBiaXJkLCBhbmQgdGhlbiBpZiBmYWRlZC4KCkNyZWF0b3JzIGFyZW4ndCBnb2RzLiAgVGhleSBtYWtlIHBsYWNlcywgd2hpY2ggaXMgcXVpdGUgaGFyZC4gIEl0J3MgbWVuCnRoYXQgbWFrZSBnb2RzLiAgVGhpcyBleHBsYWlucyBhIGxvdC4KClRoZSBvbGQgbWFuIHNhdCBkb3duIGFuZCB3YWl0ZWQuCgogIFtUaGUgTGFzdCBDb250aW5lbnQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDE4NgolcGFzc2FnZSA5ClNoZSBoYWQgYSB2ZXJ5IHN0cmFpZ2h0Zm9yd2FyZCB2aWV3IG9mIGZvcmVpZ24gcGFydHMsIG9yIGF0IGxlYXN0IHRob3NlCm1vcmUgZGlzdGFudCB0aGFuIGhlciBzaXN0ZXIncyBob3VzZSBpbiBRdWlybSB3aGVyZSBzaGUgc3BlbnQgYSB3ZWVrJ3MKaG9saWRheSBldmVyeSB5ZWFyLiAgVGhleSB3ZXJlIGluaGFiaXRlZCBieSBwZW9wbGUgd2hvIHdlcmUgbW9yZSB0byBiZQpwaXRpZWQgdGhhbiBibGFtZWQgYmVjYXVzZSwgcmVhbGx5LCB0aGV5IHdlcmUgbGlrZSBjaGlsZHJlbi4oMSkgIEFuZCB0aGV5CmFjdGVkIGxpa2Ugc2F2YWdlcy4oMikKCigxKSBUaGF0IGlzIHRvIHNheSwgc2hlIHNlY3JldGx5IGNvbnNpZGVyZWQgdGhlbSB0byBiZSB2aWNpb3VzLCBzZWxmaXNoCmFuZCB1bnRydXN0d29ydGh5LgoKKDIpIEFnYWluLCB3aGVuIHBlb3BsZSBsaWtlIE1ycy4gV2hpdGxvdyB1c2UgdGhpcyB0ZXJtIHRoZXkgYXJlIG5vdCwgZm9yCnNvbWUgaW5leHBsaWNhYmxlIHJlYXNvbiwgdHJ5aW5nIHRvIHN1Z2dlc3QgdGhhdCB0aGUgc3ViamVjdHMgaGF2ZSBhIHJpY2gKb3JhbCB0cmFkaXRpb24sIGEgY29tcGxleCBzeXN0ZW0gb2YgdHJpYmFsIHJpZ2h0cyBhbmQgYSBkZWVwIHJlc3BlY3QgZm9yCnRoZSBzcGlyaXRzIG9mIHRoZWlyIGFuY2VzdG9ycy4gIFRoZXkgYXJlIGltcGx5aW5nIHRoZSBraW5kIG9mIGJlaGF2aW9yCm1vcmUgZ2VuZXJhbGx5IGFzc29jaWF0ZWQsIG9kZGx5IGVub3VnaCwgd2l0aCBwZW9wbGUgd2VhcmluZyBhIGZ1bGwgc3VpdApvZiBjbG90aGVzLCBvZnRlbiB3aXRoIHRoZSBzYW1lIHNvcnQgb2YgaW5zaWduaWEuCgogIFtUaGUgTGFzdCBDb250aW5lbnQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDE4NyAobGFzdCBwYXJhZ3JhcGggdHJ1bmNhdGVkKQolcGFzc2FnZSAxMAoiSSBzdXBwb3NlIGhlIHdvdWxkbid0IGhhdmUgZG9uZSBhbnl0aGluZyBzdHVwaWQsIHdvdWxkIGhlPyIgaGUgc2FpZC4KCiJBcmNoY2hhbmNlbGxvciwgUG9uZGVyIFN0aWJib25zIGlzIGEgZnVsbHkgdHJhaW5lZCB3aXphcmQhIiBzYWlkIHRoZSBEZWFuLgoKIlRoYW5rIHlvdSBmb3IgdGhhdCB2ZXJ5IGNvbmNpc2UgYW5kIGRlZmluaXRlIGFuc3dlciwgRGVhbiwiIHNhaWQgUmlkY3VsbHkuCgogIFtUaGUgTGFzdCBDb250aW5lbnQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQolZSB0aXRsZQojCiMKIwoldGl0bGUgQ2FycGUgSnVndWx1bSAoOCkKIyBwLiAxMCAoSGFycGVyIFRvcmNoIGVkaXRpb24pCiVwYXNzYWdlIDEKQWduZXMgdGVuZGVkIHRvIG9iZXkgcnVsZXMuICBQZXJkaXRhIGRpZG4ndC4gIFBlcmRpdGEgdGhvdWdodCB0aGF0IG5vdApvYmV5aW5nIHJ1bGVzIHdhcyBzb21laG93IGNvb2wuICBBZ25lcyB0aG91Z2h0IHRoYXQgcnVsZXMgbGlrZSAiRG9uJ3QgZmFsbAppbnRvIHRoaXMgaHVnZSBwaXQgb2Ygc3Bpa2VzIiB3ZXJlIHRoZXJlIGZvciBhIHB1cnBvc2UuICBbLi4uXQoKICBbQ2FycGUgSnVndWx1bSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMiAoZXhhbXBsZSBvZiB0aGUgc2lsbGluZXNzIGFuZCBpbmNvbXByZWhlbnNhYmlsaXR5IG9mIHRoZQojICAgICAgIE5hYyBtYWMgRmVlZ2xlIFtha2EgcGljdHNpZXMsIHBpY3QgKyBwaXhpZV07IGZvcnR1bmF0ZWx5IHRoZWlyCiMgICAgICAgc3BlZWNoIGRvZXNuJ3QgY29uc3RpdHV0ZSBtdWNoIG9mIHRoZSBib29rJ3MgZGlhbG9ndWUpCiVwYXNzYWdlIDIKIk5hYyBtYWMgRmVlZ2xlISIKCiJBY2gsIHN0aWNraXQgeWVyIHRyYWtrYW5zISIKCiJHaWUgeW91IHNpY2ggYSBraWNraW4nISIKCiJCaWdqb2JzISIKCiJEZXJlIGMnbiBvbmxpZSBiZSB3aGluIHQnb3VzYW5kISIKCiJOYWMgbWFjIEZlZWdsZSB3aGEgaGFlISIKCiJXaGEgaGFlIHllcnNlbCwgeWEgYm9nZ2luISIKCiAgW0NhcnBlIEp1Z3VsdW0sIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDI4IChmcm9tIGEgZGlzY3Vzc2lvbiBhYm91dCB3aGV0aGVyIE9tbmlhbiBwcmllc3RzIHN0aWxsIGJ1cm4gd2l0Y2hlcykKJXBhc3NhZ2UgMwoiSGFoISAgVGhlIGxlb3BhcmQgZG9lcyBub3QgY2hhbmdlIGhpcyBzaG9ydHMsIG15IGdpcmwhIgoKICBbQ2FycGUgSnVndWx1bSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTMzCiVwYXNzYWdlIDQKVGhpbmdzIHdlcmUgbm90IHdoYXQgdGhleSBzZWVtZWQuICBCdXQgdGhlbiwgYXMgR3Jhbm55IGFsd2F5cyBzYWlkLCB0aGV5Cm5ldmVyIHdlcmUuCgogIFtDYXJwZSBKdWd1bHVtLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMjU0LTI1NSAoInZlcnJhIGNvbXAtbGljLWF0ZWQiIGlzIGFjY3VyYXRlKQolcGFzc2FnZSA1CiJIb3cgY2FuIEkgZXZlciByZXBheSB5b3U/IiBoZSBzYWlkLgoKVGhlIHBpeGllJ3MgZXllcyBnbGVhbWVkIGhhcHBpbHkuCgoiT2gsIHRoZXJlJ3MgYSB3ZWUgYml0dHkgdGhpbmcgdGhlIENhcmxpbicgT2dnIHNhaWQgeW91IGNvdWxkIGJlIGdpdmluJyB1cywKaGFyZGx5IGltcG9ydGFudCBhdCBhbGwsIiBoZSBzYWlkLgoKIkFueXRoaW5nLCIgc2FpZCBWZXJlbmNlLgoKQSBjb3VwbGUgb2YgcGl4aWVzIGNhbWUgdXAgc3RhZ2dlcmluZyB1bmRlciBhIHJvbGxlZC11cCBwYXJjaG1lbnQsIHdoaWNoCndhcyB1bmZvbGRlZCBpbiBmcm9udCBvZiBWZXJlbmNlLiAgVGhlIG9sZCBwaXhpZSB3YXMgc3VkZGVubHkgaG9sZGluZyBhCnF1aWxsIHBlbi4KCiJJdCdzIGNhbGxlZCBhIHNpZ25hdHVyZSwiIGhlIHNhaWQsIGFzIFZlcmVuY2Ugc3RhcmVkIGF0IHRoZSB0aW55CmhhbmR3cml0aW5nLiAgIkFuJyBtYWtlIHN1cmUgeWUgaW5pdGlhbCBhbGwgdGhlIHN1Yi1jbGF1c2VzIGFuZCBjb2RpY2lscy4KV2Ugb2YgdGhlIE5hYyBtYWMgRmVlZ2xlIGFyZSBhIHNpbXBsZSBmb2xrLCIgaGUgYWRkZWQsICJidXQgd2Ugd3JpdGUgdmVycmEKY29tcC1saWMtYXRlZCBkb2N1bWVudHMuIgoKICBbQ2FycGUgSnVndWx1bSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMzI2IChJZ29yJ3MgbGlzcCBvZiAidGgiIGZvciAicyIgbWFrZXMgdGhpcyAvbG9vay8gaW50ZW50aW9uYWxseSBhcmNoYWljCiMgICAgICAgICBhbHRob3VnaCBpdCB3b3VsZG4ndCBiZSBwcm9ub3VuY2VkIHRoYXQgd2F5KQolcGFzc2FnZSA2CiJXaGF0IGdvZXRoIGFyb3VuZCwgY29tZXRoIGFyb3VuZCwiIHNhaWQgSWdvci4KCiAgW0NhcnBlIEp1Z3VsdW0sIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAzMzYtMzM3ICh0aGUgcGxvdCBpcyBkcml2ZW4gYnkgdGhlIGFjdGlvbnMgb2YgYSBmYW1pbHkgb2YgdmFtcHlyZXMKIyAgICAgICAgICAgICAgd2hvIGRvIG1vc3RseSBjb29wZXJhdGUgd2l0aCBlYWNoIG90aGVyKQolcGFzc2FnZSA3ClZhbXBpcmVzIGFyZSBub3QgbmF0dXJhbGx5IGNvb3BlcmF0aXZlIGNyZWF0dXJlcy4gIEl0J3Mgbm90IGluIHRoZWlyIG5hdHVyZS4KRXZlcnkgb3RoZXIgdmFtcGlyZSBpcyBhIHJpdmFsIGZvciB0aGUgbmV4dCBtZWFsLiAgSW4gZmFjdCwgdGhlIGlkZWFsCnNpdHVhdGlvbiBmb3IgYSB2YW1waXJlIGlzIGEgd29ybGQgaW4gd2hpY2ggZXZlcnkgb3RoZXIgdmFtcGlyZSBoYXMgYmVlbgpraWxsZWQgb2ZmIGFuZCBubyBvbmUgc2VyaW91c2x5IGJlbGlldmVzIGluIHZhbXBpcmVzIGFueW1vcmUuICBUaGV5IGFyZSBieQpuYXR1cmUgYXMgY29vcGVyYXRpdmUgYXMgc2hhcmtzLgoKVmFtcHlyZXMgYXJlIGp1c3QgdGhlIHNhbWUsIHRoZSBvbmx5IHJlYWwgZGlmZmVyZW5jZSBiZWluZyB0aGF0IHRoZXkgY2FuJ3QKc3BlbGwgcHJvcGVybHkuCgogIFtDYXJwZSBKdWd1bHVtLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAzMzgKJXBhc3NhZ2UgOAoiQmUgcmVzb2x1dGUsIG15IGRlYXIsIiBzYWlkIHRoZSBDb3VudC4gICJSZW1lbWJlci0tdGhhdCB3aGljaCBkb2VzIG5vdApraWxsIHVzIGNhbiBvbmx5IG1ha2UgdXMgc3Ryb25nZXIuIgoKIkFuZCB0aGF0IHdoaWNoIC9kb2VzLyBraWxsIHVzIGxlYXZlcyB1cyAvZGVhZC8hIiBzbmFybGVkIExhY3JpbW9zYS4gICJZb3UKc2F3IHdoYXQgaGFwcGVuZWQgdG8gdGhlIG90aGVycyEgIC9Zb3UvIGdvdCB5b3VyIGZpbmdlcnMgYnVybmVkIS4iCgogIFtDYXJwZSBKdWd1bHVtLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKJWUgdGl0bGUKIwojCiMKJXRpdGxlIFRoZSBGaWZ0aCBFbGVwaGFudCAoOSkKJXBhc3NhZ2UgMQpZb3UgZGlkIHNvbWV0aGluZyBiZWNhdXNlIGl0IGhhZCBhbHdheXMgYmVlbiBkb25lLAphbmQgdGhlIGV4cGxhbmF0aW9uIHdhcyAiYnV0IHdlJ3ZlIGFsd2F5cyBkb25lIGl0IHRoaXMgd2F5LiIKQSBtaWxsaW9uIGRlYWQgcGVvcGxlIGNhbid0IGhhdmUgYmVlbiB3cm9uZywgY2FuIHRoZXk/CgogIFtUaGUgRmlmdGggRWxlcGhhbnQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDIzMyAoSGFycGVyIFRvcmNoIGVkaXRpb24pIFt0aGlzIGlzIGEgZm9vdG5vdGVdCiVwYXNzYWdlIDIKSGUnZCBub3RpY2VkIHRoYXQgc2V4IGJvcmUgc29tZSByZXNlbWJsYW5jZSB0byBjb29rZXJ5OiAgSXQgZmFzY2luYXRlZApwZW9wbGUsIHRoZXkgc29tZXRpbWVzIGJvdWdodCBib29rcyBmdWxsIG9mIGNvbXBsaWNhdGVkIHJlY2lwZXMgYW5kCmludGVyZXN0aW5nIHBpY3R1cmVzLCBhbmQgc29tZXRpbWVzIHdoZW4gdGhleSB3ZXJlIHJlYWxseSBodW5ncnkgdGhleQpjcmVhdGVkIHZhc3QgYmFucXVldHMgaW4gdGhlaXIgaW1hZ2luYXRpb24tLWJ1dCBhdCB0aGUgZW5kIG9mIHRoZSBkYXkKdGhleSdkIHNldHRsZSBxdWl0ZSBoYXBwaWx5IGZvciBlZ2cgYW5kIGNoaXBzLCBpZiBpdCB3YXMgd2VsbCBkb25lIGFuZAptYXliZSBoYWQgYSBzbGljZSBvZiB0b21hdG8uCgogIFtUaGUgRmlmdGggRWxlcGhhbnQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiA4MC04MSAoSGFycGVyIFRvcmNoIGVkaXRpb24pIFt0aGUgcGlnZW9uIGlzIHRyYWluZWQgdG8gY2FycnkgbWVzc2FnZXNdCiVwYXNzYWdlIDMKQ29uc3RhYmxlIFNob2Ugc2FsdXRlZCwgYnV0IGEgbGl0dGxlIHRlc3RpbHkuICBIZSdkIGJlZW4gd2FpdGluZyByYXRoZXIgYQpsb25nIHRpbWUuCgoiQWZ0ZXJub29uLCBTZXJnZWFudC0tIgoKIlRoYXQncyBDYXB0YWluLCIgc2FpZCBDYXB0YWluIENvbG9uLiAgIlNlZSB0aGUgcGlwIG9uIG15IHNob3VsZGVyLCBSZWc/IgoKUmVnIGxvb2tlZCBjbG9zZWx5LiAgIkkgdGhvdWdodCBpdCB3YXMgYmlyZCBkb2luZ3MsIFNhcmdlLiIKCiJUaGF0J3MgQ2FwdGFpbiwiIHNhaWQgQ29sb24gQXV0b21hdGljYWxseS4gICJJdCdzIG9ubHkgY2hhbGsgbm93IGJlY2F1c2UKSSBhaW4ndCBnb3QgdGltZSB0byBnZXQgaXQgZG9uZSBwcm9wZXJseSwiIGhlIHNhaWQsICJzbyBkb24ndCBiZSBjaGVla3kuIgoKWy4uLl0KCkEgcGlnZW9uIGNob3NlIHRoYXQgZGlwbG9tYXRpYyBtb21lbnQgdG8gZmx1dHRlciBpbnRvIHRoZSBmYWN0b3J5IGFuZCBsYW5kCm9uIENvbG9uJ3Mgc2hvdWxkZXIsIHdoZXJlIGl0IHByb21vdGVkIGhpbS4gIFsuLi5dCgogIFtUaGUgRmlmdGggRWxlcGhhbnQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDE4NwolcGFzc2FnZSA0ClRoZSB3aGVlbHMgY2xhdHRlcmVkIG92ZXIgdGhlIHdvb2Qgb2YgYSBkcmF3YnJpZGdlLgoKQXMgY2FzdGxlcyB3ZW50LCB0aGlzIGxvb2tlZCBhcyB0aG91Z2ggaXQgY291bGQgYmUgdGFrZW4gYnkgYSBzbWFsbCBzcXVhZApvZiBub3QgdmVyeSBlZmZpY2llbnQgc29sZGllcnMuICBJdHMgYnVpbGRlciBoYWQgbm90IGJlZW4gdGhpbmtpbmcgYWJvdXQKZm9ydGlmaWNhdGlvbnMuICBIZSdkIGJlZW4gaW5mbHVlbmNlZCBieSBmYWlyeSB0YWxlcyBhbmQgcG9zc2libHkgYnkgc29tZQpvZiB0aGUgbW9yZSBvcm5hbWVudGFsIHNvcnRzIG9mIGNha2UuICBJdCB3YXMgYSBjYXN0bGUgZm9yIGxvb2tpbmcgYXQuCkZvciBkZWZlbnNlLCBwdXR0aW5nIGEgYmxhbmtldCBvdmVyIHlvdXIgaGVhZCBtaWdodCBiZSBtYXJnaW5hbGx5IHNhZmVyLgoKVGhlIGNvYWNoIHN0b3BwZWQgaW4gdGhlIGNvdXJ0eWFyZC4gIFsuLi5dCgogIFtUaGUgRmlmdGggRWxlcGhhbnQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDIyOQolcGFzc2FnZSA1CiJXaGF0IGEgbWVzcywiIGhlIHNhaWQuICAiTG9ja2VkLXJvb20gbXlzdGVyaWVzIGFyZSBldmVuIHdvcnNlIHdoZW4gdGhleQpsZWF2ZSB0aGUgcm9vbSB1bmxvY2tlZC4iCgogIFtUaGUgRmlmdGggRWxlcGhhbnQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDI0NiAoW3NpY10gJ3J1bGVzIGZvciB3aGljaCBoZSB0ZXJtZWQgInRoZSBhcnQuLi4iJyBzZWVtcyBsaWtlIGl0CiMgICAgICAgICBvdWdodCB0byBoYXZlIGJlZW4gJ3J1bGVzIGZvciBfd2hhdF8gaGUgdGVybWVkICJ0aGUgYXJ0Li4uIicpCiVwYXNzYWdlIDYKSGUgcHVuY2hlZCB0aGUgZHdhcmYgaW4gdGhlIHN0b21hY2guICBUaGlzIHdhcyBubyB0aW1lIHRvIHBsYXkgYnkgdGhlCk1hcnF1aXMgb2YgRmFudGFpbGxlciBydWxlcy4oMSkKCigxKSBUaGUgTWFycXVpcyBvZiBGYW50YWlsbGVyIGdvdCBpbnRvIG1hbnkgZmlnaHRzIGluIGhpcyB5b3V0aCwgbW9zdCBvZgp0aGVtIGFzIGEgcmVzdWx0IG9mIGJlaW5nIGtub3duIGFzIHRoZSBNYXJxdWlzIG9mIEZhbnRhaWxsZXIsIGFuZCB3cm90ZQphIHNldCBvZiBydWxlcyBmb3Igd2hpY2ggaGUgdGVybWVkICJ0aGUgbm9ibGUgYXJ0IG9mIGZpc3RpY3VmZnMiIHdoaWNoCm1vc3RseSBjb25zaXN0ZWQgb2YgYSBsaXN0IG9mIHBsYWNlcyB3aGVyZSBwZW9wbGUgd2VyZW4ndCBhbGxvd2VkIHRvIGhpdApoaW0uICBNYW55IHBlb3BsZSB3ZXJlIGltcHJlc3NlZCB3aXRoIGhpcyB3b3JrIGFuZCBsYXRlciBzdG9vZCB3aXRoIG5vYmxlCmNoZXN0IG91dHRocnVzdCBhbmQgZmlzdHMgYmFsbGVkIGluIGEgc3Bpcml0IG9mIG1hbmx5IGFnZ3Jlc3Npb24gYWdhaW5zdApwZW9wbGUgd2hvIGhhZG4ndCByZWFkIHRoZSBNYXJxdWlzJ3MgYm9vayBidXQgL2RpZC8ga25vdyBob3cgdG8ga25vY2sKcGVvcGxlIHNlbnNlbGVzcyB3aXRoIGEgY2hhaXIuICBUaGUgbGFzdCB3b3JkcyBvZiBhIHN1cnByaXNpbmdseSBsYXJnZQpudW1iZXIgb2YgcGVvcGxlIHdlcmUgIlN0dWZmIHRoZSBibG9vZHkgTWFycXVpcyBvZiBGYW50YWlsbGVyLS0iCgogIFtUaGUgRmlmdGggRWxlcGhhbnQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDI1MQolcGFzc2FnZSA3ClZpbWVzIHNoaXZlcmVkLiAgSGUgaGFkbid0IHJlYWxpemVkIGhvdyB3YXJtIGl0IGhhZCBiZWVuIHVuZGVyZ3JvdW5kLiAgT3IKd2hhdCB0aW1lIGl0IHdhcy4gIFRoZXJlIHdhcyBhIGRpbSwgYSB2ZXJ5IGRpbSBsaWdodC4gIFdhcyB0aGlzIGp1c3QgYWZ0ZXIKc3Vuc2V0PyAgV2hhdCBpdCBhbG1vc3QgZGF3bj8KClRoZSBmbGFrZXMgd2VyZSBwaWxpbmcgdXAgb24gaGlzIGRhbXAgY2xvdGhlcywgZHJpdmVuIGJ5IHRoZSB3aW5kLgoKRnJlZWRvbSBjb3VsZCBnZXQgeW91IGtpbGxlZC4KClNoZWx0ZXIgLi4uIHRoYXQgd2FzIC9lc3NlbnRpYWwvLiAgVGhlIHRpbWUgb2YgZGF5IGFuZCBhIHByZWNpc2UgbG9jYXRpb24Kd2VyZSBvZiBubyB1c2UgdG8gdGhlIGRlYWQuICBUaGV5IGFsd2F5cyBrbmV3IHdoYXQgdGltZSBpdCB3YXMgYW5kIHdoZXJlCnRoZXkgd2VyZS4KCiAgW1RoZSBGaWZ0aCBFbGVwaGFudCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjY3CiVwYXNzYWdlIDgKR09PRCBNT1JOSU5HLgoKVmltZXMgYmxpbmtlZC4gIEEgdGFsbCBkYXJrLXJvYmVkIGZpZ3VyZSB3YXMgbm93IHNpdHRpbmcgaW4gdGhlIGJvYXQuCgoiQXJlIHlvdSBEZWF0aD8iCgpJVCdTIFRIRSBTQ1lUSEUsIElTTidUIElULiAgUEVPUExFIEFMV0FZUyBOT1RJQ0UgVEhFIFNDWVRIRS4KCiJJJ20gZ29pbmcgdG8gZGllPyIKClBPU1NJQkxZLgoKIi9Qb3NzaWJseS8/ICBZb3UgdHVybiB1cCB3aGVuIHBlb3BsZSBhcmUgL3Bvc3NpYmx5LyBnb2luZyB0byBkaWU/IgoKT0ggWUVTLiAgSVQnUyBRVUlURSBUSEUgTkVXIFRISU5HLiAgSVQnUyBCRUNBVVNFIE9GIFRIRSBVTkNFUlRBSU5UWQpQUklOQ0lQTEUuCgoiV2hhdCdzIHRoYXQ/IgoKSSdNIE5PVCBTVVJFLgoKICBbVGhlIEZpZnRoIEVsZXBoYW50LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyODggW3NpYzogbWlzc2luZyA0dGggJy4nIGF0IGVuZF0KJXBhc3NhZ2UgOQoiQXJlIHlvdSBpbiBjaGFyZ2Ugb2YgdGhlIFdhdGNoIGhlcmU/IgoKIk5vLiAgVGhhdCdzIHRoZSBqb2Igb2YgdGhlIEJ1cmdlcm1hc3Rlci4iCgoiQW5kIHdobyBnaXZlcyBoaW0gL2hpcy8gb3JkZXJzPyIKCiJFdmVyeW9uZSwiIHNhaWQgVGFudG9ueSBiaXR0ZXJseS4gIFZpbWVzIG5vZGRlZC4gIEJlZW4gdGhlcmUsIGhlIHRob3VnaHQuCkJlZW4gdGhlcmUsIGRvbmUgdGhhdCwgYm91Z2h0IHRoZSBkdWJsZXQuLi4KCiAgW1RoZSBGaWZ0aCBFbGVwaGFudCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiVlIHRpdGxlCiMKIwojCiV0aXRsZSBUaGUgVHJ1dGggKDgpCiVwYXNzYWdlIDEKVGhlcmUgYXJlLCBpdCBoYXMgYmVlbiBzYWlkLCB0d28gdHlwZXMgb2YgcGVvcGxlIGluIHRoZSB3b3JsZC4gIFRoZXJlIGFyZQp0aG9zZSB3aG8sIHdoZW4gcHJlc2VudGVkIHdpdGggYSBnbGFzcyB0aGF0IGlzIGV4YWN0bHkgaGFsZiBmdWxsLCBzYXk6IHRoaXMKZ2xhc3MgaXMgaGFsZiBmdWxsLiAgQW5kIHRoZW4gdGhlcmUgYXJlIHRob3NlIHdobyBzYXk6IHRoaXMgZ2xhc3MgaXMgaGFsZgplbXB0eS4KClRoZSB3b3JsZCBiZWxvbmdzLCBob3dldmVyLCB0byB0aG9zZSB3aG8gY2FuIGxvb2sgYXQgdGhlIGdsYXNzIGFuZCBzYXk6CldoYXQncyB1cCB3aXRoIHRoaXMgZ2xhc3M/ICBFeGN1c2UgbWU/ICBFeGN1c2UgbWU/ICBUaGlzIGlzIG15IGdsYXNzPyAgSQpkb24ndCB0aGluayBzby4gIE15IGdsYXNzIHdhcyBmdWxsISAgQW5kIGl0IHdhcyBhIGJpZ2dlciBnbGFzcyEgIFdobydzIGJlZW4KcGluY2hpbmcgbXkgYmVlcj8KCiAgW1RoZSBUcnV0aCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlIDEKJXBhc3NhZ2UgMgpUaGUgd29ybGQgaXMgbWFkZSB1cCBvZiBmb3VyIGVsZW1lbnRzOiBFYXJ0aCwgQWlyLCBGaXJlIGFuZCBXYXRlci4KVGhpcyBpcyBhIGZhY3Qgd2VsbCBrbm93biBldmVuIHRvIENvcnBvcmFsIE5vYmJzLiAgSXQncyBhbHNvIHdyb25nLgpUaGVyZSdzIGEgZmlmdGggZWxlbWVudCwgYW5kIGdlbmVyYWxseSBpdCdzIGNhbGxlZCBTdXJwcmlzZS4KCiAgW1RoZSBUcnV0aCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlIDIKIyBwcC4gMS0yIChIYXJwZXIgVG9yY2ggZWRpdGlvbikKJXBhc3NhZ2UgMwpUaGUgcnVtb3Igc3ByZWFkIHRocm91Z2ggdGhlIGNpdHkgbGlrZSB3aWxkZmlyZSAod2hpY2ggaGFkIHF1aXRlIG9mdGVuCnNwcmVhZCB0aHJvdWdoIEFua2gtTW9ycG9yayBzaW5jZSBpdHMgY2l0aXplbnMgaGFkIGxlYXJuZWQgdGhlIHdvcmRzICJmaXJlCmluc3VyYW5jZSIpLgoKL1RoZSBkd2FyZnMgY2FuIHR1cm4gbGVhZCBpbnRvIGdvbGQuLi4vCgpbLi4uXQoKSXQgcmVhY2hlZCB0aGUgcG9pbnR5IGVhcnMgb2YgdGhlIGR3YXJmcy4KCiJDYW4gd2U/IgoKIkRhbW5lZCBpZiBJIGtub3cuICAvSS8gY2FuJ3QuIgoKIlllYWgsIGJ1dCBpZiB5b3UgY291bGQsIHlvdSB3b3VsZG4ndCBzYXkuICAvSS8gd291bGRuJ3Qgc2F5LCBpZiAvSS8gY291bGQuCgoiQ2FuIHlvdT8iCgoiTm8uIgoKIi9BaC1oYSEvIgoKICBbVGhlIFRydXRoLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxMCAoJ211Y2t5JyBpcyBhY2N1cmF0ZSkKJXBhc3NhZ2UgNApJdCB3b3VsZCBzZWVtIHF1aXRlIGltcG9zc2libGUsIG9uIHN1Y2ggYSBtdWNreSBuaWdodCwgdGhhdCB0aGVyZSBjb3VsZApoYXZlIGJlZW4gYW55b25lIHRvIHdpdG5lc3MgdGhpcyBzY2VuZS4KCkJ1dCB0aGVyZSB3YXMuICBUaGUgdW5pdmVyc2UgcmVxdWlyZXMgZXZlcnl0aGluZyB0byBiZSBvYnNlcnZlZCwgbGVzdCBpdApjZWFzZSB0byBleGlzdC4KCiAgW1RoZSBUcnV0aCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTkKJXBhc3NhZ2UgNQpWZXJ5IG9jY2FzaW9uYWxseSwgYSBmcm9nIHdhcyByZW1vdmVkIGZyb20gdGhlIHZpdmFyaXVtIGFuZCBwdXQgaW50byBhCnJhdGhlciBzbWFsbGVyIGphciB3aGVyZSBpdCBicmllZmx5IGJlY2FtZSBhIHZlcnkgaGFwcHkgZnJvZyBpbmRlZWQsIGFuZAp0aGVuIHdlbnQgdG8gc2xlZXAgYW5kIHdva2UgdXAgaW4gdGhhdCBncmVhdCBiaWcganVuZ2xlIGluIHRoZSBza3kuCgpBbmQgdGh1cyB0aGUgdW5pdmVyc2l0eSBnb3QgdGhlIGFjdGl2ZSBpbmdyZWRpZW50IHRoYXQgaXQgbWFkZSB1cCBpbnRvCnBpbGxzIGFuZCBmZWQgdG8gdGhlIEJ1cnNhciwgdG8ga2VlcCBoaW0gc2FuZS4gIEF0IGxlYXN0LCAvYXBwYXJlbnRseS8Kc2FuZSwgYmVjYXVzZSBub3RoaW5nIHdhcyB0aGF0IHNpbXBsZSBhdCBnb29kIG9sZCBVVS4gIEluIGZhY3QgaGUgd2FzCmluY3VyYWJseSBpbnNhbmUgYW5kIGhhbGx1Y2luYXRlZCBtb3JlIG9yIGxlc3MgY29udGludWFsbHksIGJ1dCBieSBhCnJlbWFya2FibGUgc3Ryb2tlIG9mIGxhdGVyYWwgdGhpbmtpbmcgaGlzIGZlbGxvdyB3aXphcmRzIGhhZCByZWFzb25lZCwgaW4KdGhhdCBjYXNlLCB0aGF0IHRoZSB3aG9sZSBidXNpbmVzcyBjb3VsZCBiZSBzb3J0ZWQgb3V0IGlmIG9ubHkgdGhleSBjb3VsZApmaW5kIGEgZm9ybXVsYSB0aGF0IGNhdXNlZCBoaW0gdG8gL2hhbGx1Y2luYXRlIHRoYXQgaGUgd2FzIGNvbXBsZXRlbHkKc2FuZS8uKDEpCgpUaGlzIGhhZCB3b3JrZWQgd2VsbC4gIFsuLi5dCgooMSkgVGhpcyBpcyBhIHZlcnkgY29tbW9uIGhhbGx1Y2luYXRpb24sIHNoYXJlZCBieSBtb3N0IHBlb3BsZS4KCiAgW1RoZSBUcnV0aCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDEwNy0xMDggKCd6aXMnLCAnemF0JywgJ3ZoaWNoJywgJ0xhdGF0aW9uJyBhcmUgYWxsIGFjY3VyYXRlKQolcGFzc2FnZSA2CiJFciAuLi4gd2h5IGRvIHlvdSBuZWVkIHRvIHdvcmsgaW4gYSBkYXJrcm9vbSwgdGhvdWdoPyIgaGUgc2FpZC4gICJUaGUgaW1wcwpkb24ndCBuZWVkIGl0LCBkbyB0aGV5PyIKCiJBaCwgemlzIGlzIGZvciBteSBleHBlcmltZW50LCIgc2FpZCBPdHRvIHByb3VkbHkuICAiWW91IGtub3cgemF0IGFub3RoZXIKdGVybSBmb3IgYW4gaWNvbm9ncmFwaGVyIHdvdWxkIGJlICdwaG90b2dyYXBoZXInPyAgRnJvbSB0aGUgb2xkIHdvcmQKJ3Bob3R1cycgaW4gTGF0YXRpb24sIHZoaWNoIG1lYW5zLS0iCgoiVG8gcHJhbmNlIGFyb3VuZCBsaWtlIGFuIGlkaW90IG9yZGVyaW5nIGV2ZXJ5b25lIGFib3V0IGFzIGlmIHlvdSBvd25lZCB0aGUKcGxhY2UsIiBzYWlkIFdpbGxpYW0uCgoiQWgsIHlvdSBrbm93IGl0ISIKCiAgW1RoZSBUcnV0aCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTAwCiVwYXNzYWdlIDcKIlZ5IGFyZSB2ZSBzdG9wcGluaz8iIHNhaWQgT3R0by4KCiJUaGF0J3MgU2VyZ2VhbnQgRGV0cml0dXMgb24gdGhlIGdhdGUsIiBzYWlkIFdpbGxpYW0uCgoiQWguICBBIHRyb2xsLiAgVmVyeSBzdHVwaWQsIiBvcGluZWQgT3R0by4KCiJCdXQgaGFyZCB0byBmb29sLiAgSSdtIGFmcmFpZCB3ZSBzaGFsbCBoYXZlIHRvIHRyeSB0aGUgdHJ1dGguIgoKIlZ5IHZpbGwgdGhhdCB2b3JrPyIKCiJIZSdzIGEgcG9saWNlbWFuLiAgVGhlIHRydXRoIHVzdWFsbHkgY29uZnVzZXMgdGhlbS4gIFRoZXkgZG9uJ3Qgb2Z0ZW4KaGVhciBpdC4iCgogIFtUaGUgVHJ1dGgsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDI5MAolcGFzc2FnZSA4Ck1yLiBUdWxpcCByYWlzZWQgYSB0cmVtYmxpbmcgaGFuZC4KCiJJcyB0aGlzIHRoZSBiaXQgd2hlcmUgbXkgd2hvbGUgbGlmZSBwYXNzZXMgaW4gZnJvbnQgb2YgbXkgZXllcz8iIGhlIHNhaWQuCgpOTywgVEhBVCBXQVMgVEhFIEJJVCBKVVNUIE5PVy4KCiJXaGljaCBiaXQ/IgoKVEhFIEJJVCwgc2FpZCBEZWF0aCwgQkVUV0VFTiBZT1UgQkVJTkcgQk9STiBBTkQgWU9VIERZSU5HLiAgTk8sIFRISVMuLi4KTVIuIFRVTElQLCBUSElTIElTIFlPVVIgV0hPTEUgTElGRSBBUyBJVCBQQVNTRUQgQkVGT1JFIC9PVEhFUiBQRU9QTEUnUy8KRVlFUy4uLgoKICBbVGhlIFRydXRoLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKJWUgdGl0bGUKIwojCiMKJXRpdGxlIFRoaWVmIG9mIFRpbWUgKDgpCiVwYXNzYWdlIDEKIk5vIHJ1bm5pbmcgd2l0aCBzY3l0aGVzISIKCiAgW1RoaWVmIG9mIFRpbWUsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDI0IChIYXJwZXIgVG9yY2ggZWRpdGlvbikKJXBhc3NhZ2UgMgpTaWx2ZXIgc3RhcnMgd2VyZW4ndCBhd2FyZGVkIGZyZXF1ZW50bHksIGFuZCBnb2xkIHN0YXJ0cyBoYXBwZW5lZCBsZXNzCnRoYW4gb25jZSBhIGZvcnRuaWdodCwgYW5kIHdlcmUgdmllZCBmb3IgYWNjb3JkaW5nbHkuICBSaWdodCBub3csIE1pc3MKU3VzYW4gc2VsZWN0ZWQgYSBzaWx2ZXIgc3Rhci4gIFByZXR0eSBzb29uIFZpbmNlbnQgdGhlIEtlZW4gd291bGQgaGF2ZSBhCmdhbGF4eSBvZiBoaXMgdmVyeSBvd24uICBUbyBnaXZlIGhpbSBoaXMgZHVlLCBoZSB3YXMgcXVpdGUgZGlzaW50ZXJlc3RlZAppbiB3aGljaCBraW5kIG9mIHN0YXIgaGUgZ290LiAgUXVhbnRpdHksIHRoYXQgd2FzIHdoYXQgaGUgbGlrZWQuICBNaXNzClN1c2FuIGhhZCBwcml2YXRlbHkgbWFya2VkIGhpbSBkb3duIGFzIEJveSBNb3N0IExpa2VseSBUbyBCZSBLaWxsZWQgT25lCkRheSBCeSBIaXMgV2lmZS4KCiAgW1RoaWVmIG9mIFRpbWUsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDUzICgnLi4uIHdpdGggdGhlIGNob3J1czonLCAnIkRvIG5vdCBhY3QuLi4nIGFyZSBzZXBhcmF0ZSBwYXJhZ3JhcGhzOwojICAgICAgICAnY2hhbGxlbmdlcicgaGFzIGJlZW4gY293ZWQgYWZ0ZXIgZmluZGluZyBvdXQgdGhhdCB0aGUgbGl0dGxlIG9sZAojICAgICAgICBtYW4gaGUgY2hhbGxlbmdlZC0tZm9yIGVudGVyaW5nIHRoZSBkb2pvLS1pcyBhY3R1YWxseSBMdS1UemUpCiVwYXNzYWdlIDMKQXMgTG9ic2FuZyBmb2xsb3dlZCB0aGUgYW1ibGluZyBMdS1UemUsIGhlIGhlYXJkIHRoZSBkb2pvIG1hc3Rlciwgd2hvIGxpa2UKYWxsIHRlYWNoZXJzIG5ldmVyIG1pc3NlZCBhbiBvcHBvcnR1bml0eSB0byBkcml2ZSBob21lIGEgbGVzc29uLCBzYXk6CiJEb2pvISAgV2hhdCBpcyBSdWxlIE9uZT8iCgpFdmVuIHRoZSBjb3dlcmluZyBjaGFsbGVuZ2VyIG11bWJsZWQgYWxvbmcgd2l0aCB0aGUgY2hvcnVzOgoKIkRvIG5vdCBhY3QgaW5jYXV0aW91c2x5IHdoZW4gY29uZnJvbnRpbmcgYSBsaXR0bGUgYmFsZCB3cmlua2x5IHNtaWxpbmcKbWFuISIKCiAgW1RoaWVmIG9mIFRpbWUsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiA3NC03NSAodGhlIG5vdmljZXMgZGlkbid0IGtub3cgdGhhdCB0aGUgbGl0dGxlIG9sZCBtYW4ga25vd24gYXMgU3dlZXBlcgojICAgICAgICAgICAgaXMgYWN0dWFsbHkgTHUtVHplOyBzZWUgcGFzc2FnZSAzIHJlZ2FyZGluZyBSdWxlIE9uZSkKJXBhc3NhZ2UgNApPbmUgZGF5IGEgZ3JvdXAgb2Ygc2VuaW9yIG5vdmljZXMsIGZvciBtaXNjaGllZiwga2lja2VkIG92ZXIgdGhlIGxpdHRsZQpzaHJpbmUgdGhhdCBMdS1UemUga2VwdCBiZXNpZGUgaGlzIHNsZWVwaW5nIG1hdC4KCk5leHQgbW9ybmluZywgbm8gc3dlZXBlcnMgdHVybmVkIHVwIGZvciB3b3JrLiAgVGhleSBzdGF5ZWQgaW4gdGhlaXIgaHV0cwp3aXRoIHRoZSBkb29ycyBiYXJyZWQuICBBZnRlciBtYWtpbmcgaW5xdWlyaWVzLCB0aGUgYWJib3QsIHdobyBhdCB0aGF0IHRpbWUKd2FzIGZpZnR5IHllYXJzIG9sZCBhZ2Fpbiwgc3VtbW9uZWQgdGhlIHRocmVlIG5vdmljZXMgdG8gaGlzIHJvb20uICBUaGVyZQp3ZXJlIHRocmVlIGJyb29tcyBsZWFuaW5nIGFnYWluc3QgdGhlIHdhbGwuICBIZSBzcG9rZSBhcyBmb2xsb3dzOgoKIllvdSBrbm93IHRoYXQgdGhlIGRyZWFkZnVsIEJhdHRsZSBvZiBGaXZlIENpdGllcyBkaWQgbm90IGhhcHBlbiBiZWNhdXNlCnRoZSBtZXNzZW5nZXIgZ290IHRoZXJlIGluIHRpbWU/IgoKVGhleSBkaWQuICBZb3UgbGVhcm5lZCB0aGlzIGVhcmx5IGluIHlvdXIgc3R1ZGllcy4gIEFuZCB0aGV5IGJvd2VkCm5lcnZvdXNseSwgYmVjYXVzZSB0aGlzIHdhcyB0aGUgYWJib3QsIGFmdGVyIGFsbC4KCiJBbmQgeW91IGtub3cgdGhlbiB0aGF0IHdoZW4gdGhlIG1lc3NlbmdlcidzIGhvcnNlIHRocmV3IGEgc2hvZSBoZSBlc3BpZWQKYSBtYW4gdHJ1ZGdpbmcgYmVzaWRlIHRoZSByb2FkIGNhcnJ5aW5nIGEgc21hbGwgcG9ydGFibGUgZm9yZ2UgYW5kIHB1c2hpbmcKYW4gYW52aWwgb24gYSBiYXJyb3c/IgoKVGhleSBrbmV3LgoKIkFuZCB5b3Uga25vdyB0aGF0IG1hbiB3YXMgTHUtdHplPyIKClRoZXkgZGlkLgoKIlN1cmVseSB5b3Uga25vdyB0aGF0IEphbmRhIFRyYXBwLCBHcmFuZCBNYXN0ZXIgb2YgL09raS1kb2tpLywgL1Rvcm8tZnUvLAphbmQgL0NoYW5nLWZ1LywgaGFzIG9ubHkgZXZlciB5aWVsZGVkIHRvIG9uZSBtYW4/IgoKVGhleSBrbmV3LgoKIkFuZCB5b3Uga25vdyB0aGF0IG1hbiBpcyBMdS1UemU/IgoKVGhleSBkaWQuCgoiWW91IGtub3cgdGhlIGxpdHRsZSBzaHJpbmUgeW91IGtpY2tlZCBvdmVyIGxhc3QgbmlnaHQ/IgoKVGhleSBrbmV3LgoKIllvdSBrbm93IGl0IGhhZCBhbiBvd25lcj8iCgpUaGVyZSB3YXMgc2lsZW5jZS4gIFRoZW4gdGhlIGJyaWdodGVzdCBvZiB0aGUgbm92aWNlcyBsb29rZWQgdXAgYXQgdGhlCmFiYm90IGluIGhvcnJvciwgc3dhbGxvd2VkLCBwaWNrZWQgdXAgb25lIG9mIHRoZSB0aHJlZSBicm9vbXMsIGFuZCB3YWxrZWQKb3V0IG9mIHRoZSByb29tLgoKVGhlIG90aGVyIHR3byB3ZXJlIHNsb3dlciBvZiBicmFpbiBhbmQgaGFkIHRvIGZvbGxvdyB0aGUgc3RvcnkgYWxsIHRoZSB3YXkKdGhyb3VnaCB0byB0aGUgZW5kLgoKVGhlbiBvbmUgb2YgdGhlbSBzYWlkLCAiQnV0IGl0IHdhcyBvbmx5IGEgc3dlZXBlcidzIHNocmluZSEiCgoiWW91IHdpbGwgdGFrZSB1cCB0aGUgYnJvb21zIGFuZCBzd2VlcCwiIHNhaWQgdGhlIGFiYm90LCAiYW5kIHlvdSB3aWxsCnN3ZWVwIGV2ZXJ5IGRheSwgYW5kIHlvdSB3aWxsIHN3ZWVwIHVudGlsIHRoZSBkYXkgeW91IGZpbmQgTHUtVHplIGFuZCBkYXJlCnRvIHNheSAnU3dlZXBlciwgaXQgd2FzIEkgd2hvIGtub2NrZWQgb3ZlciBhbmQgc2NhdHRlcmVkIHlvdXIgc2hyaW5lIGFuZApub3cgSSB3aWxsIGluIGh1bWlsaXR5IGFjY29tcGFueSB5b3UgdG8gdGhlIGRvam8gb24gdGhlIFRlbnRoIERqaW0sIGluCm9yZGVyIHRvIGxlYXJuIHRoZSBSaWdodCBXYXkuJyAgT25seSB0aGVuLCBpZiB5b3UgYXJlIHN0aWxsIGFibGUsIG1heSB5b3UKcmVzdW1lIHlvdXIgc3R1ZGllcyBoZXJlLiAgVW5kZXJzdG9vZD8iKDEpCgpPbGRlciBtb25rcyBzb21ldGltZXMgY29tcGxhaW5lZCwgYnV0IHNvbWVvbmUgd291bGQgYWx3YXlzIHNheTogICJSZW1lbWJlcgp0aGF0IEx1LVR6ZSdzIFdheSBpcyBub3Qgb3VyIFdheS4gIFJlbWVtYmVyIGhlIGxlYXJuZWQgZXZlcnl0aGluZyBieQpzd2VlcGluZyB1bmhlZWRlZCB3aGlsZSBzdHVkZW50cyB3ZXJlIGJlaW5nIGVkdWNhdGVkLiAgUmVtZW1iZXIsIGhlIGhhcwpiZWVuIGV2ZXJ5d2hlcmUgYW5kIGRvbmUgbWFueSB0aGluZ3MuICBQZXJoYXBzIGhlIGlzIGEgbGl0dGxlLi4uIHN0cmFuZ2UsCmJ1dCByZW1lbWJlciBoZSB3YWxrZWQgaW50byBhIGNpdGFkZWwgZnVsbCBvZiBhcm1lZCBtZW4gYW5kIHRyYXBzIGFuZApuZXZlcnRoZWxlc3Mgc2F3IHRvIGl0IHRoYXQgdGhlIFBhc2ggb2YgTXVudGFiIGNob2tlZCBpbm5vY2VudGx5IG9uIGEgZmlzaApib25lLiAgTm8gbW9uayBpcyBiZXR0ZXIgdGhhbiBMdS1UemUgYXQgZmluZGluZyB0aGUgVGltZSBhbmQgdGhlIFBsYWNlLiIKClNvbWUsIHdobyBkaWQgbm90IGtub3csIHdvdWxkIHNheTogICJXaGF0IGlzIHRoaXMgV2F5IHRoYXQgZ2l2ZXMgaGltIHNvCm11Y2ggcG93ZXI/IgoKQW5kIHRoZXkgd2VyZSB0b2xkOiAgIkl0IGlzIHRoZSBXYXkgb2YgTXJzLiBNYXJpZXR0YSBDb3Ntb3BvbGl0ZSwgMyBRdWlybQpTdHJlZXQsIEFua2gtTW9ycG9yaywgUm9vbXMgVG8gUmVudCBWZXJ5IFJlYXNvbmFibGUuICBObywgd2UgZG9uJ3QKdW5kZXJzdGFuZCBpdCwgZWl0aGVyLiAgU29tZSBzdWJzZW5kZW50aWFsIHJ1YmJpc2gsIGFwcGFyZW50bHkuIgoKKDEpIEFuZCB0aGUgc3RvcnkgY29udGludWVzOiAgVGhlIG5vdmljZSB3aG8gaGFkIHByb3Rlc3RlZCB0aGF0IGl0IHdhcyBvbmx5CnRoZSBzaHJpbmUgb2YgYSBzd2VlcGVyIHJhbiBhd2F5IGZyb20gdGhlIHRlbXBsZTsgdGhlIHN0dWRlbnQgd2hvIHNhaWQKbm90aGluZyByZW1haW5lZCBhIHN3ZWVwZXIgZm9yIHRoZSByZXN0IG9mIGhpcyBsaWZlOyBhbmQgdGhlIHN0dWRlbnQgd2hvCmhhcyBzZWVuIHRoZSBpbmV2aXRhYmxlIHNoYXBlIG9mIHRoZSBzdG9yeSB3ZW50LCBhZnRlciBtdWNoIGFnb25pemluZyBhbmQKc2V2ZXJhbCBtb250aHMgb2YgbWV0aWN1bG91cyBzd2VlcGluZywgdG8gTHUtVHplIGFuZCBrbmVsdCBhbmQgYXNrZWQgdG8gYmUKc2hvd24gdGhlIFJpZ2h0IFdheS4gIFdoZXJldXBvbiB0aGUgc3dlZXBlciB0b29rIGhpbSB0byB0aGUgZG9qbyBvZiB0aGUKVGVudGggRGppbSwgd2l0aCBpdHMgdGVycmlibGUgbXVsdGlibGFkZWQgZmlnaHRpbmcgbWFjaGluZXMgYW5kIGl0cwpmZWFyc29tZSBzZXJyYXRlZCB3ZWFwb25zIHN1Y2ggYXMgdGhlIC9jbG9uZy1jbG9uZy8gYW5kIHRoZSAvdXBwc2kvLiAgVGhlCnN0b3J5IHJ1bnMgdGhhdCB0aGUgc3dlZXBlciB0aGVuIG9wZW5lZCBhIGN1cGJvYXJkIGF0IHRoZSBiYWNrIG9mIHRoZSBkb2pvCmFuZCBwcm9kdWNlZCBhIGJyb29tIGFuZCBzcGFrZSB0aHVzbHk6ICAiT25lIGhhbmQgL2hlcmUvIGFuZCB0aGUgb3RoZXIKL2hlcmUvLCB1bmRlcnN0YW5kPyAgUGVvcGxlIG5ldmVyIGdldCBpdCByaWdodC4gIFVzZSBnb29kLCBldmVuIHN0cm9rZXMKYW5kIGxldCB0aGUgYnJvb20gZG8gbW9zdCBvZiB0aGUgd29yay4gIE5ldmVyIHRyeSB0byBzd2VlcCB1cCBhIGJpZyBwaWxlLAp5b3UnbGwgZW5kIHVwIHN3ZWVwaW5nIGV2ZXJ5IGJpdCBvZiBkdXN0IHR3aWNlLiAgVXNlIHlvdXIgZHVzdHBhbiB3aXNlbHksCmFuZCByZW1lbWJlcjogIGEgc21hbGwgYnJ1c2ggZm9yIHRoZSBjb3JuZXJzLiIKCiAgW1RoaWVmIG9mIFRpbWUsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDEwMiAoJ2NvbWluZyBoZXJlJzogIHRvIHRoZSByZW1vdGUgbW91bnRhaW5zIHdoZXJlIHRoZSBtb25rcyBsaXZlKQolcGFzc2FnZSA1CiJCdXQgZGlkIG5vdCBXZW4gc2F5IHRoYXQgaWYgdGhlIHRydXRoIGlzIGFueXdoZXJlLCBpdCBpcyBldmVyeXdoZXJlPyIgc2FpZApMb2JzYW5nLgoKIldlbGwgZG9uZS4gIEkgc2VlIHlvdSBsZWFybmVkIC9zb21ldGhpbmcvLCBhdCBsZWFzdC4gIEJ1dCBvbmUgZGF5IGl0CnNlZW1lZCB0byBtZSB0aGF0IGV2ZXJ5b25lIGVsc2UgaGFkIGRlY2lkZWQgdGhhdCB3aXNkb20gY2FuIG9ubHkgYmUgZm91bmQgYQpsb25nIHdheSBvZmYuICBTbyBJIHdlbnQgdG8gQW5raC1Nb3Jwb3JrLiAgVGhleSB3ZXJlIGFsbCBjb21pbmcgaGVyZSwgc28gaXQKc2VlbWVkIG9ubHkgZmFpci4KCiJTZWVraW5nIC9lbmxpZ2h0ZW5tZW50Lz8iCgoiTm8uICBUaGUgd2lzZSBtYW4gZG9lcyBub3Qgc2VlayBlbmxpZ2h0ZW5tZW50LCBoZSB3YWl0cyBmb3IgaXQuICBTbyB3aGlsZQpJIHdhcyB3YWl0aW5nLCBpdCBvY2N1cnJlZCB0byBtZSB0aGF0IHNlZWtpbmcgcGVycGxleGl0eSBtaWdodCBiZSBtb3JlCmZ1biwiIHNhaWQgTHUtVHplLiAgIkFmdGVyIGFsbCwgZW5saWdodGVubWVudCBiZWdpbnMgd2hlcmUgcGVycGxleGl0eSBlbmRzLgpBbmQgSSBmb3VuZCBwZXJwbGV4aXR5LiAgQW5kIGEga2luZCBvZiBlbmxpZ2h0ZW5tZW50LCB0b28uICBJIGhhZCBub3QgYmVlbgp0aGVyZSBmb3IgZml2ZSBtaW51dGVzLCBmb3IgZXhhbXBsZSwgd2hlbiBzb21lIG1lbiBpbiBhbiBhbGxleSB0cmllZCB0bwplbmxpZ2h0ZW4gbWUgb2Ygd2hhdCBsaXR0bGUgSSBwb3NzZXNzZWQsIGdpdmluZyBtZSBhIHZhbHVhYmxlIGxlc3NvbiBpbgp0aGUgcmlkaWN1bG91c25lc3Mgb2YgbWF0ZXJpYWwgdGhpbmdzLiIKCiAgW1RoaWVmIG9mIFRpbWUsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDI4NiAoZm9vZCBpbiBnZW5lcmFsLCBhbmQgY2hvY29sYXRlIGluIHBhcnRpY3VsYXIsIGhhcyBwcm92ZW4gdG8gYmUgYW4KIyAgICAgICAgIGVmZmVjdGl2ZSAnd2VhcG9uJyBhZ2FpbnN0IEF1ZGl0b3JzIHdobyd2ZSB0YWtlbiBvbiBodW1hbiBmb3JtKQolcGFzc2FnZSA2CiJMZXQncyBnZXQgdXAgaW50byBaZXBoeXIgU3RyZWV0LCIgc2FpZCBTdXNhbi4KCiJXaGF0IGlzIHRoZXJlIGZvciB1cz8iCgoiV2llbnJpY2ggYW5kIEJvZXR0Y2hlci4iCgoiV2hvIGFyZSB0aGV5PyIKCiJJIHRoaW5rIHRoZSBvcmlnaW5hbCBIZXJyIFdpZW5yaWNoIGFuZCBGcmF1IEJvZXR0Y2hlciBkaWVkIGEgbG9uZyB0aW1lIGFnby4KQnV0IHRoZSBzaG9wIHN0aWxsIGRvZXMgdmVyeSBnb29kIGJ1c2luZXNzLCIgc2FpZCBTdXNhbiwgZGFydGluZyBhY3Jvc3MgdGhlCnN0cmVldC4gICJXZSBuZWVkIGFtbXVuaXRpb24uIgoKTGFkeSBMZUplYW4gY2F1Z2h0IHVwLgoKIk9oLiAgVGhleSBtYWtlIGNob2NvbGF0ZT8iIHNoZSBzYWlkLgoKIkRvZXMgYSBiZWFyIHBvbyBpbiB0aGUgd29vZHM/IiBzYWlkIFN1c2FuIGFuZCByZWFsaXplZCBoZXIgbWlzdGFrZSByaWdodAphd2F5LigxKQoKVG9vIGxhdGUuICBMYWR5IExlSmVhbiBsb29rZWQgdGhvdWdodGZ1bCBmb3IgYSBtb21lbnQuCgoiWWVzLCIgc2hlIHNhaWQgYXQgbGFzdC4gICJZZXMsIEkgYmVsaWV2ZSB0aGF0IG1vc3QgdmFyaWV0aWVzIGRvLCBpbmRlZWQsCmV4Y3JldGUsIGFzIHlvdSBzdWdnZXN0LCBhdCBsZWFzdCBpbiB0aGUgdGVtcGVyYXRlIHpvbmVzLCBidXQgdGhlcmUgYXJlCnNldmVyYWwgdGhhdC0tIgoKIkkgbWVhbiB0byBzYXkgdGhhdCwgeWVzLCB0aGV5IG1ha2UgY2hvY29sYXRlLCIgc2FpZCBTdXNhbi4KCigxKSBUZWFjaGluZyBzbWFsbCBjaGlsZHJlbiBmb3IgYW55IGxlbmd0aCBvZiB0aW1lIGNhbiBkbyB0aGlzIHRvIGEKdm9jYWJ1bGFyeS4KCiAgW1RoaWVmIG9mIFRpbWUsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDMwOAolcGFzc2FnZSA3Ckthb3MgbGlzdGVuZWQgdG8gaGlzdG9yeS4KClRoZXJlIHdlcmUgbmV3IHdvcmRzLiAgV2l6YXJkcyBhbmQgcGhpbG9zb3BoZXJzIGhhZCBmb3VuZCBDaGFvcywgd2hpY2ggaXMKS2FvcyB3aXRoIGhpcyBoYWlyIGNvbWJlZCBhbmQgYSB0aWUgb24sIGFuZCBoYWQgZm91bmQgaW4gdGhlIGVwaXRvbWUgb2YKZGlzb3JkZXIgYSBuZXcgb3JkZXIgdW5kcmVhbWVkIG9mLiAgL1RoZXJlIGFyZSBkaWZmZXJlbnQga2luZHMgb2YgcnVsZXMuLwovRnJvbSB0aGUgc2ltcGxlIGNvbWVzIHRoZSBjb21wbGV4LCBhbmQgZnJvbSB0aGUgY29tcGxleCBjb21lcyBhIGRpZmZlcmVudC8KL2tpbmQgb2Ygc2ltcGxpY2l0eS4gIENoYW9zIGlzIG9yZGVyIGluIGEgbWFzay4uLi8KCkNoYW9zLiAgTm90IGRhcmssIGFuY2llbnQgS2FvcywgbGVmdCBiZWhpbmQgYnkgdGhlIGV2b2x2aW5nIHVuaXZlcnNlLCBidXQKbmV3LCBzaGlueSBDaGFvcywgZGFuY2luZyBpbiB0aGUgaGVhcnQgb2YgZXZlcnl0aGluZy4gIFRoZSBpZGVhIHdhcwpzdHJhbmdlbHkgYXR0cmFjdGl2ZS4gIEFuZCBpdCB3YXMgYSByZWFzb24gdG8gZ28gb24gbGl2aW5nLgoKICBbVGhpZWYgb2YgVGltZSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMzU1IChzdGFydHMgbWlkLXBhcmFncmFwaCwgd2l0aCBhIGNsYXVzZSBhYm91dCBlYXRpbmcgaW4gY2xhc3Mgb21pdHRlZCkKJXBhc3NhZ2UgOApbLi4uXSAgU3VzYW4gWy4uLl0gdG9vayB0aGUgdmlldyB0aGF0LCBpZiB0aGVyZSB3ZXJlIHJ1bGVzLCB0aGV5IGFwcGxpZWQgdG8KZXZlcnlvbmUsIGV2ZW4gaGVyLiAgT3RoZXJ3aXNlIHRoZXkgd2VyZSBtZXJlbHkgdHlyYW5ueS4gIEJ1dCBydWxlcyB3ZXJlCnRoZXJlIHRvIG1ha2UgeW91IHRoaW5rIGJlZm9yZSB5b3UgYnJva2UgdGhlbS4KCiAgW1RoaWVmIG9mIFRpbWUsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQolZSB0aXRsZQojCiMKIyBUaGUgTGFzdCBIZXJvIGhhcyBuZXZlciBiZWVuIHJlbGVhc2VkIGluIHRoZSBVLlMuIChvciBhbnl3aGVyZT8pIGFzIGEKIyBjb252ZW50aW9uYWwgbWFzcyBtYXJrZXQgcGFwZXJiYWNrLiAgVGhlIGxhcmdlIChyb3VnaGx5IDEwIiBieSAxMiIpCiMgdHJhZGUgcGFwZXJiYWNrIGNvbnRhaW5zIG1hbnkgZnVsbCBwYWdlIGNvbG9yIGlsbHVzdHJhdGlvbnMgYW5kIG1vc3QKIyB0ZXh0IHBhZ2VzIGluY2x1ZGUgZGVjb3JhdGlvbnMgb2YgdmFyeWluZyBkZWdyZWVzIG9mIGVsYWJvcmF0ZW5lc3MuCiMgVGhlIGFjdHVhbCB0ZXh0IGlzIHByb2JhYmx5IG9ubHkgbm92ZWxsYSBsZW5ndGguCiMKJXRpdGxlIFRoZSBMYXN0IEhlcm8gKDcpCiMgcC4gNDEgKEVPUyBlZGl0aW9uKQolcGFzc2FnZSAxClRvbyBtYW55IHBlb3BsZSwgd2hlbiBsaXN0aW5nIGFsbCB0aGUgcGVyaWxzIHRvIGJlIGZvdW5kIGluIHRoZSBzZWFyY2gKZm9yIGxvc3QgdHJlYXN1cmUgb3IgYW5jaWVudCB3aXNkb20sIGhhZCBmb3Jnb3R0ZW4gdG8gcHV0IGF0IHRoZSB0b3Agb2YKdGhlIGxpc3QgJ3RoZSBtYW4gd2hvIGFycml2ZWQganVzdCBiZWZvcmUgeW91Jy4KCiAgW1RoZSBMYXN0IEhlcm8sIHdyaXR0ZW4gYnkgVGVycnkgUHJhdGNoZXR0LCBpbGx1c3RyYXRlZCBieSBQYXVsIEtpZGJ5XQolZSBwYXNzYWdlCiMgcC4gNQojIHNlY29uZCBwYXJhZ3JhcGggaXMgYSBiaXQgIm9uIHRoZSBub3NlIiBidXQgaXMgdG9vIGdvb2QgdG8gbGVhdmUgb3V0CiVwYXNzYWdlIDIKVGhlIHJlYXNvbiBmb3IgdGhlIHN0b3J5IHdhcyBhIG1peCBvZiBtYW55IHRoaW5ncy4gIFRoZXJlIHdhcyBodW1hbml0eSdzCmRlc2lyZSB0byBkbyBmb3JiaWRkZW4gZGVlZHMgbWVyZWx5IGJlY2F1c2UgdGhleSB3ZXJlIGZvcmJpZGRlbi4KVGhlcmUgd2FzIGl0cyBkZXNpcmUgdG8gZmluZCBuZXcgaG9yaXpvbnMgYW5kIGtpbGwgdGhlIHBlb3BsZSB3aG8gbGl2ZQpiZXlvbmQgdGhlbS4gIFRoZXJlIHdlcmUgdGhlIG15c3RlcmlvdXMgc2Nyb2xscy4gIFRoZXJlIHdhcyB0aGUgY3VjdW1iZXIuCkJ1dCBtb3N0bHkgdGhlcmUgd2FzIHRoZSBrbm93bGVkZ2UgdGhhdCBvbmUgZGF5LCBpdCB3b3VsZCBhbGwgYmUgb3Zlci4KCidBaCwgd2VsbCwgbGlmZSBnb2VzIG9uLCcgcGVvcGxlIHNheSB3aGVuIHNvbWVvbmUgZGllcy4gIEJ1dCBmcm9tIHRoZQpwb2ludCBvZiB2aWV3IG9mIHRoZSBwZXJzb24gd2hvIGhhcyBqdXN0IGRpZWQsIGl0IGRvZXNuJ3QuICBJdCdzIHRoZQp1bml2ZXJzZSB0aGF0IGdvZXMgb24uICBKdXN0IGFzIHRoZSBkZWNlYXNlZCB3YXMgZ2V0dGluZyB0aGUgaGFuZyBvZgpldmVyeXRoaW5nIGl0J3MgYWxsIHdoaXNrZWQgYXdheSwgYnkgaWxsbmVzcyBvciBhY2NpZGVudCBvciwgaW4gb25lCmNhc2UsIGEgY3VjdW1iZXIuICBXaHkgdGhpcyBoYXMgdG8gYmUgaXMgb25lIG9mIHRoZSBpbXBvbmRlcmFibGVzIG9mCmxpZmUsIGluIHRoZSBmYWNlIG9mIHdoaWNoIHBlb3BsZSBlaXRoZXIgc3RhcnQgdG8gcHJheS4uLgpvciBiZWNvbWUgcmVhbGx5LCByZWFsbHkgYW5ncnkuCgogIFtUaGUgTGFzdCBIZXJvLCB3cml0dGVuIGJ5IFRlcnJ5IFByYXRjaGV0dCwgaWxsdXN0cmF0ZWQgYnkgUGF1bCBLaWRieV0KJWUgcGFzc2FnZQojIHAuIDE5CiVwYXNzYWdlIDMKJ0FuZCB0aGV5J3JlIC9oZXJvZXMvLCcgc2FpZCBNciBCZXR0ZXJpZGdlIG9mIHRoZSBHdWlsZCBvZiBIaXN0b3JpYW5zLgoKJ0FuZCB0aGF0IG1lYW5zLCBleGFjdGx5Pycgc2FpZCB0aGUgUGF0cmljaWFuLCBzaWdoaW5nLgoKJ1RoZXkncmUgZ29vZCBhdCBkb2luZyB3aGF0IHRoZXkgd2FudCB0byBkby4nCgonQnV0IHRoZXkgYXJlIGFsc28sIGFzIEkgdW5kZXJzdGFuZCBpdCwgdmVyeSBvbGQgbWVuLicKCidWZXJ5IG9sZCAvaGVyb2VzLywnIHRoZSBoaXN0b3JpYW4gY29ycmVjdGVkIGhpbS4gICdUaGF0IGp1c3QgbWVhbnMKdGhleSd2ZSBoYWQgYSBsb3Qgb2YgL2V4cGVyaWVuY2UvIGluIGRvaW5nIHdoYXQgdGhleSB3YW50IHRvIGRvLgoKTG9yZCBWZXRpbmFyaSBzaWdoZWQgYWdhaW4uICBIZSBkaWQgbm90IGxpa2UgdG8gbGl2ZSBpbiBhIHdvcmxkIG9mCmhlcm9lcy4gIFlvdSBoYWQgY2l2aWxpc2F0aW9uLCBzdWNoIGFzIGl0IHdhcywgYW5kIHlvdSBoYWQgaGVyb2VzLgoKICBbVGhlIExhc3QgSGVybywgd3JpdHRlbiBieSBUZXJyeSBQcmF0Y2hldHQsIGlsbHVzdHJhdGVkIGJ5IFBhdWwgS2lkYnldCiVlIHBhc3NhZ2UKIyBwLiAyNQolcGFzc2FnZSA0ClRoZXkgd2VyZSwgYWxsIG9mIHRoZW0sIG9sZCBtZW4uICBUaGVpciBiYWNrZ3JvdW5kIGNvbnZlcnNhdGlvbiB3YXMKYSBsaXRhbnkgb2YgY29tcGxhaW50cyBhYm91dCBmZWV0LCBzdG9tYWNocyBhbmQgYmFja3MuICBUaGV5IG1vdmVkCnNsb3dseS4gIEJ1dCB0aGV5IGhhZCBhIC9sb29rLyBhYm91dCB0aGVtLiAgSXQgd2FzIGluIHRoZWlyIGV5ZXMuCgpUaGVpciBleWVzIHNhaWQgdGhhdCB3aGVyZXZlciBpdCB3YXMsIHRoZXkgaGFkIGJlZW4gdGhlcmUuICBXaGF0ZXZlcgppdCB3YXMsIHRoZXkgaGFkIGRvbmUgaXQsIHNvbWV0aW1lcyBtb3JlIHRoYW4gb25jZS4gIEJ1dCB0aGV5IHdvdWxkCm5ldmVyLCBldmVyLCAvYnV5LyB0aGUgVC1zaGlydC4gIEFuZCB0aGV5IC9kaWQvIGtub3cgdGhlIG1lYW5pbmcgb2YKdGhlIHdvcmQgJ2ZlYXInLiAgSXQgd2FzIHNvbWV0aGluZyB0aGF0IGhhcHBlbmVkIHRvIG90aGVyIHBlb3BsZS4KCiAgW1RoZSBMYXN0IEhlcm8sIHdyaXR0ZW4gYnkgVGVycnkgUHJhdGNoZXR0LCBpbGx1c3RyYXRlZCBieSBQYXVsIEtpZGJ5XQolZSBwYXNzYWdlCiMgcC4gOTcKJXBhc3NhZ2UgNQpDYXB0YWluIENhcnJvdCBzYWx1dGVkLiAgJ0ZvcmNlIGlzIGFsd2F5cyB0aGUgbGFzdCByZXNvcnQsIHNpciwnIGhlIHNhaWQuCgonSSBiZWxpZXZlIGZvciBDb2hlbiBpdCdzIHRoZSBmaXJzdCBjaG9pY2UsJyBzYWlkIExvcmQgVmV0aW5hcmkuCgonSGUncyBub3QgdG9vIGJhZCBpZiB5b3UgZG9uJ3QgY29tZSB1cCBiZWhpbmQgaGltIHN1ZGRlbmx5LCcgc2FpZCBSaW5jZXdpbmQuCgonQWgsIHRoZXJlIGlzIHRoZSB2b2ljZSBvZiBvdXIgbWlzc2lvbiBzcGVjaWFsaXN0LCcgc2FpZCB0aGUgUGF0cmljaWFuLgonSSBqdXN0IGhvcGUtLSAgV2hhdCBpcyB0aGF0IG9uIHlvdXIgYmFkZ2UsIENhcHRhaW4gQ2Fycm90PycKCidNaXNzaW9uIG1vdHRvLCBzaXIsJyBzYWlkIENhcnJvdCBjaGVlcmZ1bGx5LiAgJy9Nb3JpdHVyaSBOb2x1bXVzIE1vcmkvLgpSaW5jZXdpbmQgc3VnZ2VzdGVkIGl0LicKCidJIGltYWdpbmUgaGUgZGlkLCcgc2FpZCBMb3JkIFZldGluYXJpLCBvYnNlcnZpbmcgdGhlIHdpemFyZCBjb2xkbHkuCidBbmQgd291bGQgeW91IGNhcmUgdG8gZ2l2ZSB1cyBhIGNvbGxvcXVpYWwgdHJhbnNsYXRpb24sIE1yIFJpbmNld2luZD8nCgonRXIuLi4nIFJpbmNld2luZCBoZXNpdGF0ZWQsIGJ1dCB0aGVyZSByZWFsbHkgd2FzIG5vIGVzY2FwZS4gICdFci4uLgpyb3VnaGx5IHNwZWFraW5nLCBpdCBtZWFucywgIldlIHdobyBhcmUgYWJvdXQgdG8gZGllIGRvbid0IHdhbnQgdG8iLCBzaXIuJwoKICBbVGhlIExhc3QgSGVybywgd3JpdHRlbiBieSBUZXJyeSBQcmF0Y2hldHQsIGlsbHVzdHJhdGVkIGJ5IFBhdWwgS2lkYnldCiVlIHBhc3NhZ2UKIyBwLiAxMjUgKG5lYXIgdG9wLCB0aGVuIGNvbnRpbnVlZCBoYWxmIHdheSBkb3duKQolcGFzc2FnZSA2CidBIGdvb2Qgd2l6YXJkLCBSaW5jZXdpbmQsJyBzYWlkIHRoZSBDaGFpciBvZiBJbmRlZmluaXRlIFN0dWRpZXMuICAnTm90CnBhcnRpY3VsYXJseSBicmlnaHQsIGJ1dCwgZnJhbmtseSwgSSd2ZSBuZXZlciBiZWVuIHF1aXRlIGhhcHB5IHdpdGgKaW50ZWxsaWdlbmNlLiAgQW4gb3ZlcnJhdGVkIHRhbGVudCwgaW4gbXkgaHVtYmxlIG9waW5pb24uJwoKUG9uZGVyJ3MgZWFycyB3ZW50IHJlZC4KClsuLi5dCgonTXIgU3RpYmJvbnMgd2FzIHJpZ2h0LCB3YXMgaGU/JyBzYWlkIFJpZGN1bGx5LCBzdGFyaW5nIGF0IFBvbmRlci4gICdIb3cKZGlkIHlvdSB3b3JrIHRoYXQgb3V0IHNvIC9leGFjdGx5LywgTXIgU3RpYmJvbnM/JwoKJ0ksIGVyLi4uJyBQb25kZXIgZmVsdCB0aGUgZXllcyBvZiB0aGUgd2l6YXJkcyBvbiBoaW0uICAnSS0tJyBIZSBzdG9wcGVkLgonSXQgd2FzIGEgbHVja3kgZ3Vlc3MsIHNpci4nCgpUaGUgd2l6YXJkcyByZWxheGVkLiAgVGhleSB3ZXJlIGV4dHJlbWVseSB1bmVhc3kgd2l0aCBjbGV2ZXJuZXNzLCBidXQKbHVja3kgZ3Vlc3Npbmcgd2FzIHdoYXQgYmVpbmcgYSB3aXphcmQgd2FzIGFsbCBhYm91dC4KCiAgW1RoZSBMYXN0IEhlcm8sIHdyaXR0ZW4gYnkgVGVycnkgUHJhdGNoZXR0LCBpbGx1c3RyYXRlZCBieSBQYXVsIEtpZGJ5XQolZSBwYXNzYWdlCiMgcC4gMTQ2CiVwYXNzYWdlIDcKRXZpbCBIYXJyeSBsb29rZWQgZG93biBhbmQgc2h1ZmZsZWQgaGlzIGZlZXQsIGhpcyBmYWNlIGEgYmF0dGxlIGJldHdlZW4KcHJpZGUgYW5kIHJlbGllZi4KCidHb29kIG9mIHlvdSB0byBzYXkgdGhhdCwgbGFkcywnIGhlIG11bWJsZWQuICAnSSBtZWFuLCB5b3Uga25vdywgaWYgaXQKd2FzIHVwIHRvIG1lIEkgd291bGRuJ3QgZG8gdGhpcyB0byB5ZXIsIGJ1dCBJIGdvdCBhIHJlcHV0YXRpb24gdG8tLScKCidJIHNhaWQgd2UgL3VuZGVyc3RhbmQvLCcgc2FpZCBDb2hlbi4gICdJdCdzIGp1c3QgbGlrZSB3aXRoIHVzLiAgWW91IHNlZQphIGJpZyBoYWlyeSB0aGluZyBnYWxsb3BpbmcgdG93YXJkcyB5b3UsIHlvdSBkb24ndCBzdG9wIHRvIHRoaW5rOiAgSXMKdGhpcyBhIHJhcmUgc3BlY2llcyBvbiB0aGUgcG9pbnQgb2YgZXh0aW5jdGlvbj8gIE5vLCB5b3UgaGFjayBpdHMgaGVhZApvZmYuICAnQ29zIHRoYXQncyBoZXJvaW5nLCBhbSBJIHJpZ2h0PyAgQW4nIC95b3UvIHNlZSBzb21lb25lLCB5b3UKYmV0cmF5ICdlbSwgcXVpY2sgYXMgYSB3aW5rLiAgJ0NvcyB0aGF0J3MgdmlsbGFpbmluZy4nCgogIFtUaGUgTGFzdCBIZXJvLCB3cml0dGVuIGJ5IFRlcnJ5IFByYXRjaGV0dCwgaWxsdXN0cmF0ZWQgYnkgUGF1bCBLaWRieV0KJWUgcGFzc2FnZQolZSB0aXRsZQojCiMKIyBfVGhlX0FtYXppbmdfTWF1cmljZV9hbmRfSGlzX0VkdWNhdGVkX1JvZGVudHNfIChzb21ldGltZXMgc3BlbGxlZCB3aXRoCiMgImhpcyIgdW5jYXBpdGFsaXplZC0tdGhlIGJvb2sgaXRzZWxmIHVzZXMgYWxsIHVwcGVyY2FzZSBvbiBib3RoIHRoZQojIGNvdmVyIGFuZCB0aGUgdGl0bGUgcGFnZSBzbyBkb2Vzbid0IGhlbHAgcmVzb2x2ZSB3aGljaCBpcyBjb3JyZWN0Li4uKQojIHdhcyB0aGUgZmlyc3Qgb2Ygc2l4IERpc2N3b3JsZCBib29rcyBtYXJrZXRlZCBmb3IgIllvdW5nIEFkdWx0cyIgKGF0CiMgbGVhc3QgaW4gdGhlIFVTKSwgYWdlcyAxMiB0byAxNiBnaXZlIG9yIHRha2UsIHNvIHRlbmRlZCB0byBiZSBzdG9ja2VkCiMgb24gZGlmZmVyZW50IHNoZWx2ZXMgZnJvbSB0aGUgcmVzdCBvZiBEaXNjd29ybGQgaW4gYm9vayBzdG9yZXMgYW5kCiMgbGlicmFyaWVzLiAgSW4gdGhlIFVLLCBfVGhlX0FtYXppbmdfTWF1cmljZS4uLl8gd29uIHRoZSBDYXJuZWdpZSBNZWRhbAojIHdoaWNoIGlzIGF3YXJkZWQgZm9yIGJlc3QgY2hpbGRyZW4ncyBib29rIG9mIHRoZSB5ZWFyLgojIChUaGUgb3RoZXIgWW91bmcgQWR1bHQgRGlzY3dvcmxkIGJvb2tzIGFyZSB0aGUgZml2ZSBUaWZmYW55IEFjaGluZyBvbmVzLikKIwojIF9UaGVfQW1hemluZ19NYXVyaWNlLi4uXyBtYXkgd2VsbCBiZSB0aGUgbW9zdCBzZXJpb3VzIERpc2N3b3JsZCBib29rLgojIChEb24ndCB3b3JyeSwgaXQgaGFzIGxvdHMgb2YgaHVtb3IvaHVtb3VyIGluIGl0Li4uLikKIwoldGl0bGUgVGhlIEFtYXppbmcgTWF1cmljZSBhbmQgSGlzIEVkdWNhdGVkIFJvZGVudHMgKDEwKQojIHAuIDY4IChIYXJwZXJ0ZWVuIGVkaXRpb247IF9Nci5fQnVubnN5X0hhc19hbl9BZHZlbnR1cmVfIGlzIGEgYm9vawojICAgICAgICB3aXRoaW4gdGhlIGJvb2ssIGFuZCBhIGJyaWVmIHF1b3RlIGlzIHNob3duIGF0IHRoZSBiZWdpbm5pbmcKIyAgICAgICAgb2YgZWFjaCBjaGFwdGVyLiAgVGhpcyBvbmUgaXMgZnJvbSB0aGUgc3RhcnQgb2YgY2hhcHRlciA0LikKJXBhc3NhZ2UgMQpUaGUgaW1wb3J0YW50IHRoaW5nIGFib3V0IGFkdmVudHVyZXMsIHRob3VnaHQgTXIuIEJ1bm5zeSwgd2FzIHRoYXQgdGhleQpzaG91bGRuJ3QgYmUgc28gbG9uZyBhcyB0byBtYWtlIHlvdSBtaXNzIG1lYWx0aW1lcy4KCiAgW1RoZSBBbWF6aW5nIE1hdXJpY2UgYW5kIEhpcyBFZHVjYXRlZCBSb2RlbnRzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiA5IChwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoKQolcGFzc2FnZSAyCiJTdGVhbGluZyBmcm9tIGEgdGhpZWYgaXNuJ3Qgc3RlYWxpbmcsICdjb3MgaXQgY2FuY2VscyBvdXQuIgoKICBbVGhlIEFtYXppbmcgTWF1cmljZSBhbmQgSGlzIEVkdWNhdGVkIFJvZGVudHMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAxMS0xMiAocmF0cyBiZWNhbWUgaW50ZWxsaWdlbnQgZnJvbSBlYXRpbmcgd2l6YXJkcycgdHJhc2gganVzdCBvdXRzaWRlCiMgICAgICAgICAgICBvbmUgb2YgdGhlIHdhbGxzIG9mIFVuc2VlbiBVbml2ZXJzaXR5OyBNYXVyaWNlIGluc2lzdHMgdGhhdCBoZQojICAgICAgICAgICAgbmV2ZXIgZGlkIHRoYXQsIGltcGx5aW5nIHRoYXQgaGUnZCBlYXRlbiBzb21lIG9mIHRoZSByYXRzIGluc3RlYWQKIyAgICAgICAgICAgIFtuZXZlciBleHBsaWNpdGx5IHN0YXRlZF0gYmVmb3JlIGhlIGJlY2FtZSBpbnRlbGxpZ2VudCBoaW1zZWxmKQolcGFzc2FnZSAzClRoZXkgc2FpZCBoZSB3YXMgYW1hemluZy4gIFRoZSBBbWF6aW5nIE1hdXJpY2UsIHRoZXkgc2FpZC4gIEhlJ2QgbmV2ZXIKbWVhbnQgdG8gYmUgYW1hemluZy4gIEl0IGp1c3QgaGFwcGVuZWQuCgpIZSdkIHJlYWxpemVkIHNvbWV0aGluZyB3YXMgb2RkIHRoYXQgZGF5LCBqdXN0IGFmdGVyIGx1bmNoLCB3aGVuIGhlJ2QKbG9va2VkIGludG8gYSByZWZsZWN0aW9uIGluIGEgcHVkZGxlIGFuZCB0aG91Z2h0LCAvdGhhdCdzIG1lLy4gIEhlJ2QgbmV2ZXIKYmVlbiAvYXdhcmUvIG9mIGhpbXNlbGYgYmVmb3JlLiAgT2YgY291cnNlIGl0IHdhcyBoYXJkIHRvIHJlbWVtYmVyIC9ob3cvCmhlJ2QgdGhvdWdodCBiZWZvcmUgYmVjb21pbmcgYW1hemluZy4gIEl0IHNlZW1lZCB0byBoaW0gdGhhdCBoaXMgbWluZCBoYWQKYmVlbiBqdXN0IGEga2luZCBvZiBzb3VwLgoKQW5kIHRoZW4gdGhlcmUgaGFkIGJlZW4gdGhlIHJhdHMsIHdobyBsaXZlZCB1bmRlciB0aGUgcnViYmlzaCBoZWFwIGluIG9uZQpjb3JuZXIgb2YgaGlzIHRlcnJpdG9yeS4gIEhlJ2QgcmVhbGl6ZWQgdGhlcmUgd2FzIHNvbWV0aGluZyBlZHVjYXRlZAphYm91dCB0aGUgcmF0cyB3aGVuIGhlJ2QganVtcGVkIG9uIG9uZSBhbmQgaXQnZCBzYWlkLCAiQ2FuIHdlIHRhbGsgYWJvdXQKdGhpcz8iIGFuZCBwYXJ0IG9mIGhpcyBhbWF6aW5nIG5ldyBicmFpbiBoYWQgdG9sZCBoaW0geW91IGNvdWxkbid0IGVhdApzb21lb25lIHdobyBjb3VsZCB0YWxrLiAgQXQgbGVhc3QsIG5vdCB1bnRpbCB5b3UnZCBoZWFyZCB3aGF0IGl0J2QgZ290CnRvIHNheS4KCiAgW1RoZSBBbWF6aW5nIE1hdXJpY2UgYW5kIEhpcyBFZHVjYXRlZCBSb2RlbnRzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAzMiAoTWF1cmljZSB0aGUgY2F0LCBLZWl0aCB0aGUgaHVtYW4gYm95LCBhbmQgdGhlIGludGVsbGlnZW50IHJhdCBjbGFuIGFyZQojICAgICAgICBpbiB0aGUgdG93biBvZiBCYWQgQmxpbnR6OyBwZW9wbGUgYXJlIHF1ZXVpbmcgdXAgZm9yIHJhdGlvbmVkIGZvb2QpCiVwYXNzYWdlIDQKIlNoYWxsIHdlIGxpbmUgdXAgdG9vPyIgYXNrZWQgdGhlIGtpZC4KCiJJIHNob3VsZG4ndCB0aGluayBzbywiIHNhaWQgTWF1cmljZSBjYXJlZnVsbHkuCgoiV2h5IG5vdD8iCgoiU2VlIHRob3NlIG1lbiBvbiB0aGUgZG9vcj8gIFRoZXkgbG9vayBsaWtlIHRoZSBXYXRjaC4gIFRoZXkndmUgZ290IGJpZwp0cnVuY2hlb25zLiAgQW5kIGV2ZXJ5b25lJ3Mgc2hvd2luZyB0aGVtIGEgYml0IG9mIHBhcGVyIGFzIHRoZXkgZ28gcGFzdC4KSSBkb24ndCBsaWtlIHRoZSBsb29rIG9mIHRoYXQsIiBzYWlkIE1hdXJpY2UuICAiVGhhdCBsb29rcyBsaWtlCi9nb3Zlcm5tZW50LyB0byBtZS4iCgoiV2UgaGF2ZW4ndCBkb25lIGFueXRoaW5nIHdyb25nLCIgc2FpZCB0aGUga2lkLiAgIk5vdCBoZXJlLCBhbnl3YXkuIgoKIllvdSBuZXZlciBrbm93LCB3aXRoIGdvdmVybm1lbnRzLCIgc2FpZCBNYXVyaWNlLiAgIkp1c3Qgc3RheSBoZXJlIGtpZC4KSSdsbCB0YWtlIGEgbG9vay4iCgogIFtUaGUgQW1hemluZyBNYXVyaWNlIGFuZCBIaXMgRWR1Y2F0ZWQgUm9kZW50cywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gNTIgKHNwZWFrZXIgaXMgRGFya3RhbiwgdGhlIHRyYXBzIGV4cGVydDsgIk51bWJlciBPbmUiIHBsYXRvb24gc2VlbXMKIyAgICAgICAgbGlrZSBhbiBvYnZpb3VzIGpva2UgaGVyZS0tbWlzc2VkIGRlbGliZXJhdGVseSBvciBhY2NpZGVudGFsbHk/KQolcGFzc2FnZSA1CiJBbGwgcmlnaHQsIE51bWJlciBUaHJlZSBwbGF0b29uLCB5b3UncmUgb24gd2lkZGxpbmcgZHV0eSwiIGhlIHNhaWQuICAiR28KYW5kIGhhdmUgYSBnb29kIGRyaW5rLiIKCiAgW1RoZSBBbWF6aW5nIE1hdXJpY2UgYW5kIEhpcyBFZHVjYXRlZCBSb2RlbnRzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxMTAgKG9wZW5pbmcgcXVvdGUgZm9yIGNoYXB0ZXIgNikKJXBhc3NhZ2UgNgpUaGVyZSB3ZXJlIGJpZyBhZHZlbnR1cmVzIGFuZCBzbWFsbCBhZHZlbnR1cmVzLCBNci4gQnVubnN5IGtuZXcuICBZb3UKZGlkbid0IGdldCB0b2xkIHdoYXQgc2l6ZSB0aGV5IHdlcmUgZ29pbmcgdG8gYmUgYmVmb3JlIHlvdSBzdGFydGVkLgpTb21ldGltZXMgeW91IGNvdWxkIGhhdmUgYSBiaWcgYWR2ZW50dXJlIGV2ZW4gd2hlbiB5b3Ugd2VyZSBzdGFuZGluZwpzdGlsbC4KCiAgW1RoZSBBbWF6aW5nIE1hdXJpY2UgYW5kIEhpcyBFZHVjYXRlZCBSb2RlbnRzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMTI3LTEyOCAoc2VhcmNoaW5nIGZvciBhIHNlY3JldCBkb29yLi4uKQolcGFzc2FnZSA3Ck1hbGljaWEgbGVhbmVkIGFnYWluc3QgdGhlIHdhbGwgd2l0aCBpbmNyZWRpYmxlIG5vbmNoYWxhbmNlLgoKVGhlcmUgd2FzIG5vdCBhIGNsaWNrLiAgQSBwYW5lbCBpbiB0aGUgZmxvb3IgZGlkIG5vdCBzbGlkZSBiYWNrLgoKIlByb2JhYmx5IHRoZSB3cm9uZyBwbGFjZSwiIHNoZSBzYWlkLiAgIkknbGwganVzdCByZXN0IG15IGFybSBpbm5vY2VudGx5Cm9uIHRoaXMgY29hdCBob29rLiIKCkEgc3VkZGVuIGRvb3IgaW4gdGhlIHdhbGwgY29tcGxldGVseSBmYWlsZWQgdG8gaGFwcGVuLgoKIk9mIGNvdXJzZSwgaXQnZCBoZWxwIGlmIHRoZXJlIHdhcyBhbiBvcm5hdGUgY2FuZGxlc3RpY2ssIiBzYWlkIE1hbGljaWEuCiJUaGV5J3JlIGFsd2F5cyBhIHN1cmVmaXJlIHNlY3JldC1wYXNzYWdlIGxldmVyLiAgRXZlcnkgYWR2ZW50dXJlciBrbm93cwp0aGF0LiIKCiJUaGVyZSBpc24ndCBhIGNhbmRsZXN0aWNrLCIgc2FpZCBNYXVyaWNlLgoKIkkga25vdy4gIFNvbWUgcGVvcGxlIHRvdGFsbHkgZmFpbCB0byBoYXZlIGFueSAvaWRlYS8gb2YgaG93IHRvIGRlc2lnbiBhCnByb3BlciBzZWNyZXQgcGFzc2FnZSwiIHNhaWQgTWFsaWNpYS4gIFNoZSBsZWFuZWQgYWdhaW5zdCBhbm90aGVyIHBpZWNlCm9mIHdhbGwsIHdoaWNoIGhhZCBubyBhZmZlY3Qgd2hhdHNvZXZlci4KCiJJIGRvbid0IHRoaW5rIHlvdSdsbCBmaW5kIGl0IHRoYXQgd2F5LCIgc2FpZCBLZWl0aCwgd2hvIHdhcyBjYXJlZnVsbHkKZXhhbWluaW5nIGEgdHJhcC4KCiJPaD8gIFdvbid0IEk/IiBzYWlkIE1hbGljaWEuICAiV2VsbCBhdCBsZWFzdCBJJ20gYmVpbmcgL2NvbnN0cnVjdGl2ZS8KYWJvdXQgdGhpbmdzISAgV2hlcmUgd291bGQgeW91IGxvb2ssIGlmIHlvdSdyZSBzdWNoIGFuIGV4cGVydD8iCgoiV2h5IGlzIHRoZXJlIGEgcmF0IGhvbGUgaW4gYSByYXQgY2F0Y2hlcidzIHNoZWQ/IiBzYWlkIEtlaXRoLiAgIkl0IHNtZWxscwpvZiBkZWFkIHJhdHMgYW5kIHdldCBkb2dzIGFuZCBwb2lzb24uICBJIHdvdWxkbid0IGNvbWUgbmVhciB0aGlzIHBsYWNlLAppZiBJIHdhcyBhIHJhdC4iCgpNYWxpY2lhIGdsYXJlZCBhdCBoaW0uICBUaGVuIGhlciBmYWNlIHdyYXBwZWQgaXRzZWxmIGluIGFuIGV4cHJlc3Npb24gb2YKYWN1dGUgY29uY2VudHJhdGlvbiwgYXMgaWYgc2hlIHdhcyB0cnlpbmcgb3V0IHNldmVyYWwgaWRlYXMgaW4gaGVyIGhlYWQuCgoiWWUtZXMsIiBzaGUgc2FpZC4gICJUaGF0IHVzdWFsbHkgd29ya3MsIGluIHN0b3JpZXMuICBJdCdzIG9mdGVuIHRoZSBzdHVwaWQKcGVyc29uIHdobyBjb21lcyB1cCB3aXRoIHRoZSBnb29kIGlkZWEgYnkgYWNjaWRlbnQuIgoKU2hlIGNyb3VjaGVkIGRvd24gYW5kIHBlZXJlZCBpbnRvIHRoZSBob2xlLgoKIlRoZXJlJ3MgYSBzb3J0IG9mIGxpdHRsZSBsZXZlciwiIHNoZSBzYWlkLiAgIkknbGwganVzdCBnaXZlIGl0IGEgbGl0dGxlCnB1c2guLi4uIgoKVGhlcmUgd2FzIGEgL2Nsb25rLyB1bmRlciB0aGUgZmxvb3IsIHBhcnQgb2YgaXQgc3d1bmcgYmFjaywgYW5kIEtlaXRoCmRyb3BwZWQgb3V0IG9mIHNpZ2h0LgoKIk9oLCB5ZXMsIiBzYWlkIE1hbGljaWEuICAiSSB0aG91Z2h0IHNvbWV0aGluZyBsaWtlIHRoYXQgd291bGQgcHJvYmFibHkKaGFwcGVuLiIKCiAgW1RoZSBBbWF6aW5nIE1hdXJpY2UgYW5kIEhpcyBFZHVjYXRlZCBSb2RlbnRzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyMzEgKHBhc3NhZ2UgZW5kcyBtaWQtcGFyYWdyYXBoKQolcGFzc2FnZSA4CkhlIGhhZCB0byBhZG1pdCB0aGF0IGhlIHdhcyBjbGV2ZXJlciBhdCBwbGFucyB0aGFuIGF0IHVuZGVyZ3JvdW5kCm5hdmlnYXRpb24uICBIZSB3YXNuJ3QgZXhhY3RseSBsb3N0LCBiZWNhdXNlIGNhdHMgbmV2ZXIgZ2V0IGxvc3QuICBIZQptZXJlbHkgZGlkbid0IGtub3cgd2hlcmUgZXZlcnl0aGluZyBlbHNlIHdhcy4KCiAgW1RoZSBBbWF6aW5nIE1hdXJpY2UgYW5kIEhpcyBFZHVjYXRlZCBSb2RlbnRzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMjk4LTMwMCAoS2VpdGggaGFzIGNoYWxsYW5nZWQgdGhlIHByb2Zlc3Npb25hbCByYXQgcGlwZXIgYW5kIG9mZmVyZWQKIyAgICAgICAgICAgICAgdG8gcmlkIHRoZSB0b3duIG9mIHJhdHMgZm9yIGEgbXVjaCBsb3dlciBwcmljZTsgU2FyZGluZXMgaXMKIyAgICAgICAgICAgICAgb25lIG9mIHRoZSBFZHVjYXRlZCBSb2RlbnRzLCBrbm93biBmb3IgZGFuY2luZyBhbGwgdGhlIHRpbWU7CiMgICAgICAgICAgICAgICJod3VuL3R3by90aHJlZS9mb3VyLyIgaXMgcnVuLXRvZ2V0aGVyICJvbmUgL3R3by8gdGhyZWUgL2ZvdXIvIjsKIyAgICAgICAgICAgICAgcXVpdGUgYSBsb25nIHBhc3NhZ2UgcHJpbWFyaWx5IGZvciB0aGUgJ2EgYml0IG1vcmUgZ3JpbXknIGdhZykKJXBhc3NhZ2UgOQpbLi4uXQoiQnV0IGZpcnN0IEkgc2hhbGwgbmVlZCB0byBib3Jyb3cgYSBwaXBlLCIgS2VpdGggd2VudCBvbi4KCiJZb3UgaGF2ZW4ndCBnb3Qgb25lPyIgYXNrZWQgdGhlIG1heW9yLgoKIkl0IGdvdCBicm9rZW4uIgoKQ29ycG9yYWwgS25vcGYgbnVkZ2VkIHRoZSBtYXlvci4gICJJJ3ZlIGdvdCBhIHRyb21ib25lIGZyb20gd2hlbiBJIHdhcyBpbgp0aGUgYXJteSwiIGhlIHNhaWQuICAiSXQgd29uJ3QgdGFrZSBhIG1vbWVudCB0byBnZXQgaXQuIgoKVGhlIHJhdCBwaXBlciBidXJzdCBvdXQgbGF1Z2hpbmcuCgoiRG9lc24ndCB0aGF0IGNvdW50PyIgYXNrZWQgdGhlIG1heW9yLCBhcyBDb3Jwb3JhbCBLbm9wZiBodXJyaWVkIG9mZi4KCiJXaGF0PyAgQSB0cm9tYm9uZSBmb3IgY2hhcm1pbmcgcmF0cz8gIE5vLCBubywgbGV0IGhpbSB0cnkuICBDYW4ndCBibGFtZQphIGtpZCBmb3IgdHJ5aW5nLiAgR29vZCB3aXRoIGEgdHJvbWJvbmUsIGFyZSB5b3U/IgoKIkkgZG9uJ3Qga25vdywiIHNhaWQgS2VpdGguCgoiV2hhdCBkbyB5b3UgbWVhbiwgeW91IGRvbid0IGtub3c/IgoKIkkgbWVhbnQgSSd2ZSBuZXZlciBwbGF5ZWQgb25lLiAgSSdkIGJlIGEgbG90IGhhcHBpZXIgd2l0aCBhIGZsdXRlLAp0cnVtcGV0LCBwaWNjb2xvLCBjb3JuZXQsIG9yIExhbmNyZSBiYWdwaXBlLCBidXQgSSd2ZSBzZWVuIHBlb3BsZSBwbGF5aW5nCnRoZSB0cm9tYm9uZSwgYW5kIGl0IGRvZXNuJ3QgbG9vayB0b28gZGlmZmljdWx0LiAgSXQncyBvbmx5IGFuIG92ZXJncm93bgp0cnVtcGV0LCByZWFsbHkuIgoKIkhhaCEiIHNhaWQgdGhlIHBpcGVyLiAgIlRoaXMgSSdkIGxpa2UgdG8gc2VlLS1idXQgbm90IGhlYXIuIgoKVGhlIFdhdGNoIGNhbWUgcnVubmluZyBiYWNrLCBydWJiaW5nIGEgYmF0dGVyZWQgdHJvbWJvbmUgd2l0aCBoaXMgc2xlYXZlCmFuZCB0aGVyZWZvcmUgbWFraW5nIGl0IGp1c3QgYSBiaXQgbW9yZSBncmlteS4gIEtlaXRoIHRvb2sgaXQsIHdpcGVkIHRoZQptb3V0aHBpZWNlLCBwdXQgaXQgdG8gaGlzIG1vdXRoLCBtb3ZlZCB0aGUgc2xpZGUgYSBmZXcgdGltZXMsIGFuZCB0aGVuCmJsZXcgb25lIGxvbmcgbm90ZS4KCiJTZWVtcyB0byB3b3JrLCIgaGUgc2FpZC4gICJJIGV4cGVjdCBJIGNhbiBsZWFybiBhcyBJIGdvIGFsb25nLiIgIEhlIGdhdmUKdGhlIHJhdCBwaXBlciBhIGJyaWVmIHNtaWxlLiAgIkRvIHlvdSB3YW50IHRvIGdvIGZpcnN0PyIKCiJZb3Ugd29uJ3QgY2hhcm0gb25lIHJhdCB3aXRoIHRoYXQgbWVzcywga2lkLCIgc2FpZCB0aGUgcGlwZXIsICJidXQgSSdtCmdsYWQgSSdtIGhlcmUgdG8gc2VlIHlvdSB0cnkuIgoKS2VpdGggZ2F2ZSBoaW0gYSBzbWlsZSBhZ2FpbiwgdG9vayBhIGJyZWF0aCwgYW5kIHBsYXllZC4KClRoZXJlIHdhcyBhIHR1bmUgdGhlcmUuICBUaGUgaW5zdHJ1bWVudCBzcXVlYWtlZCBhbmQgd2hlZXplZCwgYmVjYXVzZQpDb3Jwb3JhbCBLbm9wZiBoYWQgb2NjYXNpb25hbGx5IHVzZWQgdGhlIHRoaW5nIGFzIGEgaGFtbWVyLCBidXQgdGhlcmUgd2FzCmEgdHVuZSwgcXVpdGUgZmFzdCwgYWxtb3N0IGphdW50eS4gIFlvdSBjb3VsZCB0YXAgeW91ciBmZWV0IHRvIGl0LgoKU29tZW9uZSB0YXBwZWQgaGlzIGZlZXQgdG8gaXQuCgpTYXJkaW5lcyBlbWVyZ2VkIGZyb20gYSBjcmFjayBpbiBhIG5lYXJieSB3YWxsLCBnb2luZyAiaHd1bi90d28vdGhyZWUvZm91ci8iCnVuZGVyIGhpcyBicmVhdGguICBUaGUgY3Jvd2Qgd2F0Y2hlZCBoaW0gZGFuY2UgZmVyb2Npb3VzbHkgYWNyb3NzIHRoZQpjb2JibGVzIHVudGlsIGhlIGRpc2FwcGVhcmVkIGludG8gYSBkcmFpbi4gIFRoZW4gdGhleSBicm9rZSBpbnRvIGFwcGxhdXNlLgoKVGhlIHBpcGVyIGxvb2tlZCBhdCBLZWl0aC4KCiJEaWQgdGhhdCBvbmUgaGF2ZSBhIC9oYXQvIG9uPyIgaGUgYXNrZWQuCgoiSSBkaWRuJ3Qgbm90aWNlLCIgc2FpZCBLZWl0aC4gICJZb3VyIGdvLiIKCiAgW1RoZSBBbWF6aW5nIE1hdXJpY2UgYW5kIEhpcyBFZHVjYXRlZCBSb2RlbnRzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMzA5LTMxMAolcGFzc2FnZSAxMAoiWW91IHJlYWxseSAvY2FuLyB0YWxrPyAgWW91IGNhbiB0aGluaz8iIGFza2VkIHRoZSBtYXlvci4KCkRhcmt0YW4gbG9va2VkIHVwIGF0IGhpbS4gIEl0IGhhZCBiZWVuIGEgbG9uZyBuaWdodC4gIEhlIGRpZG4ndCB3YW50IHRvCnJlbWVtYmVyIGFueSBvZiBpdC4gIEFuZCBub3cgaXQgd2FzIGdvaW5nIHRvIGJlIGEgbG9uZ2VyLCBoYXJkZXIgZGF5LgpIZSB0b29rIGEgZGVlcCBicmVhdGguCgoiSGVyZSdzIHdoYXQgSSBzdWdnZXN0LCIgaGUgc2FpZC4gICJZb3UgcHJldGVuZCB0aGF0IHJhdHMgY2FuIHRoaW5rLCBhbmQKSSdsbCBwcm9taXNlIHRvIHByZXRlbmQgdGhhdCBodW1hbnMgY2FuIHRoaW5rLCB0b28uIgoKICBbVGhlIEFtYXppbmcgTWF1cmljZSBhbmQgSGlzIEVkdWNhdGVkIFJvZGVudHMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQolZSB0aXRsZQojCiMKIwoldGl0bGUgTmlnaHQgV2F0Y2ggKDcpCiVwYXNzYWdlIDEKV2hlbiBNaXN0ZXIgU2FmZXR5IENhdGNoIElzIE5vdCBPbiwgTWlzdGVyIENyb3NzYm93IElzIE5vdCBZb3VyIEZyaWVuZC4KCiAgW05pZ2h0IFdhdGNoLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMi00IChIYXJwZXIgVG9yY2ggZWRpdGlvbjsgb21pdHRlZCBzZWN0aW9uIGRlc2NyaWJlcyBob3cgdGhlIHN0dWRlbnQKIyAgICAgICAgICBhc3Nhc3Npbiwgd2hvIGhhcyBmYWxsZW4gb2ZmIGEgYm9vYnktdHJhcHBlZCBzaGVkIHJvb2YgaW50byBhCiMgICAgICAgICAgY2Vzc3BpdCwgaXMgb24gYW4gYXNzaWdubWVudCB0byB0cnkgdG8gZ2V0IGludG8gcG9zaXRpb24gdG8KIyAgICAgICAgICB0YXJnZXQgVmltZXMgYnV0IG5vdCBhY3R1YWxseSBhdHRhY2sgb3IgdHJ5IHRvIGtpbGwgaGltKQolcGFzc2FnZSAyCiJZb3UncmUgYSBiaXQgeW91bmcgdG8gYmUgc2VudCBvbiB0aGlzIGNvbnRyYWN0LCBhcmVuJ3QgeW91PyIgc2FpZCBWaW1lcy4KCiJOb3QgYSBjb250cmFjdCwgc2lyLCIgc2FpZCBKb2Nhc3RhLCBzdGlsbCBwYWRkbGluZy4KCiJDb21lIG5vdywgTWlzcyBXaWdncy4gIFRoZSBwcmljZSBvbiBteSBoZWFkIGlzIGF0IGxlYXN0LS0iCgoiVGhlIEd1aWxkIGNvdW5jaWwgcHV0IGl0IGluIGFiZXlhbmNlLCBzaXIsIiBzYWlkIHRoZSBwYXRpZW50IHN3aW1tZXIuCiJZb3UncmUgb2ZmIHRoZSByZWdpc3Rlci4gIFRoZXkncmUgbm90IGFjY2VwdGluZyBjb250cmFjdHMgb24geW91IGF0CnByZXNlbnQuIgoKWy4uLl0KCiJBbmQgcXVpdGUgYSBmZXcgb2YgdGhlIHRyYXBzIGRyb3AgeW91IGludG8gc29tZXRoaW5nIGRlYWRseSwiIHNhaWQgVmltZXMuCgoiTHVja3kgZm9yIG1lIHRoYXQgSSBmZWxsIGludG8gdGhpcyBvbmUsIGVoLCBzaXI/IgoKIk9oLCB0aGF0IG9uZSdzIGRlYWRseSB0b28sIiBzYWlkIFZpbWVzLiAgIi9FdmVudHVhbGx5LyBkZWFkbHkuIiAgSGUKc2lnaGVkLiAgSGUgcmVhbGx5IHdhbnRlZCB0byBkaXNjb3VyYWdlIHRoaXMgc29ydCBvZiB0aGluZyBidXQuLi4gdGhleSdkCnB1dCBoaW0gb2ZmIHRoZSByZWdpc3Rlcj8gIEl0IHdhc24ndCB0aGF0IGhlJ2QgL2xpa2VkLyBiZWluZyBzaG90IGF0IGJ5Cmhvb2RlZCBmaWd1cmVzIGluIHRoZSB0ZW1wb3JhcnkgZW1wbG95IG9mIGhpcyBtYW55IGFuZCB2YXJpZWQgZW5lbWllcywKYnV0IGhlJ2QgYWx3YXlzIGxvb2tlZCBhdCBpdCBhcyBzb21lIGtpbmQgb2Ygdm90ZSBvZiBjb25maWRlbmNlLiAgSXQKc2hvd2VkIHRoYXQgaGUgd2FzIGFubm95aW5nIHRoZSByaWNoIGFuZCBhcnJvZ2FudCBwZW9wbGUgd2hvIG91Z2h0IHRvIGJlCmFubm95ZWQuCgpCZXNpZGVzLCB0aGUgQXNzYXNzaW4ncyBHdWlsZCB3YXMgZWFzeSB0byBvdXR3aXQuICBUaGV5IGhhZCBzdHJpY3QgcnVsZXMsCndoaWNoIHRoZXkgZm9sbG93ZWQgcXVpdGUgaG9ub3JhYmx5LCBhbmQgdGhpcyB3YXMgZmluZSBieSBWaW1lcywgd2hvLCBpbgpjZXJ0YWluIHByYWN0aWNhbCBtYXR0ZXJzLCBoYWQgbm8gcnVsZXMgd2hhdGV2ZXIuCgpPZmYgdGhlIHJlZ2lzdGVyLCBlaD8gIFRoZSBvbmx5IG90aGVyIHBlcnNvbiBub3Qgb24gaXQgYW55bW9yZSwgaXQgd2FzCnJ1bW9yZWQsIHdhcyBMb3JkIFZldGluYXJpLCB0aGUgUGF0cmljaWFuLiAgVGhlIEFzc2Fzc2lucyB1bmRlcnN0b29kIHRoZQpwb2xpdGljYWwgZ2FtZSBpbiB0aGUgY2l0eSBiZXR0ZXIgdGhhbiBhbnlvbmUsIGFuZCBpZiB0aGV5IHRvb2sgeW91IG9mZgp0aGUgcmVnaXN0ZXIgaXQgd2FzIGJlY2F1c2UgdGhleSBmZWx0IHRoYXQgeW91ciBkZXBhcnR1cmUgd291bGQgbm90IG9ubHkKc3BvaWwgdGhlIGdhbWUgYnV0IGFsc28gc21hc2ggdGhlIGJvYXJkLgoKICBbTmlnaHQgV2F0Y2gsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDEyIChzb21lIHRyYWluZWUgV2F0Y2htZW4gaGF2ZSBiZWVuIHRhdWdodCBhIG1hcmNoaW5nL3J1bm5pbmcgc29uZyBieQojICAgICAgICBTZXJnZWFudCBEZXRyaXR1cywgYSB0cm9sbDsgdHJvbGxzIGNvdW50ICJvbmUsIHR3bywgbWFueSwgbG90cyIKIyAgICAgICAgYW5kIGV2aWRlbnRseSBjYW4ndCBnbyBhbnkgaGlnaGVyKQolcGFzc2FnZSAzCiAgICAiL05vdyB3ZSBzaW5nIGRpcyBzdHVwaWQgc29uZyEvCiAgICAvU2luZyBpdCBhcyB3ZSBydW4gYWxvbmchLwogICAgL1doeSB3ZSBzaW5nIGRpcyB3ZSBkb24ndCBrbm93IS8KICAgIC9XZSBjYW4ndCBtYWtlIGRlciB3b3JkcyByaHltZSBwcm9wJ2x5IS8iCiAgICAiU291bmQgb2ZmISIKICAgICAgICAiL09uZSEgIFR3byEvIgogICAgIlNvdW5kIG9mZiEiCiAgICAgICAgIi9NYW55ISAgTG90cyEvIgogICAgIlNvdW5kIG9mZiEiCiAgICAgICAgIi9Fci4uLiB3aGF0Py8iCgogIFtOaWdodCBXYXRjaCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTM3CiVwYXNzYWdlIDQKRXZlcnlvbmUgd2FzIGd1aWx0eSBvZiBzb21ldGhpbmcuICBWaW1lcyBrbmV3IHRoYXQuICBFdmVyeSBjb3BwZXIga25ldyBpdC4KVGhhdCB3YXMgaG93IHlvdSBtYWludGFpbmVkIHlvdXIgYXV0aG9yaXR5LS1ldmVyeW9uZSwgdGFsa2luZyB0byBhIGNvcHBlciwKd2FzIHNlY3JldGx5IGFmcmFpZCB5b3UgY291bGQgc2VlIHRoZWlyIGd1aWx0eSBzZWNyZXQgd3JpdHRlbiBvbiB0aGVpcgpmb3JlaGVhZC4gIFlvdSBjb3VsZG4ndCwgb2YgY291cnNlLiAgQnV0IG5laXRoZXIgd2VyZSB5b3Ugc3VwcG9zZWQgdG8gZHJhZwpzb21lb25lIG9mZiB0aGUgc3RyZWV0IGFuZCBzbWFzaCB0aGVpciBmaW5nZXJzIHdpdGggYSBoYW1tZXIgdW50aWwgdGhleQp0b2xkIHlvdSB3aGF0IGl0IHdhcy4KCiAgW05pZ2h0IFdhdGNoLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxMzggKHBhc3NhZ2Ugc3RhcnRzIG1pZC1wYXJhZ3JhcGgpCiVwYXNzYWdlIDUKWy4uLl0gIERvY3RvciBMYXduIHdhcyB3ZWFyaW5nIGEgZmFjZSBtYXNrIGFuZCBob2xkaW5nIGEgcGFpciBvZiB2ZXJ5IGxvbmcKdHdlZXplcnMgaW4gaGlzIGhhbmQuCgoiWWVzPyIKCiJJJ20gZ29pbmcgb3V0LCIgc2FpZCBWaW1lcy4gICJUcm91YmxlPyIKCiJOb3QgdG9vIGJhZC4gIFNsaWRleSBIYXJyaXMgd2FzIHVubHVja3kgYXQgY2FyZHMgbGFzdCBuaWdodCwgdGhhdCdzIGFsbC4KUGxheWVkIHRoZSBhY2Ugb2YgaGVhcnRzLiIKCiJUaGF0J3MgYW4gdW5sdWNreSBjYXJkPyIKCiJJdCBpcyBpZiBCaWcgVG9ueSBrbm93cyBoZSBkaWRuJ3QgZGVhbCBpdCB0byB5b3UuICBCdXQgSSdsbCBzb29uIGhhdmUgaXQKcmVtb3ZlZC4gIFsuLi5dIgoKICBbTmlnaHQgV2F0Y2gsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDE0MSAoJ2l0JyBpcyBhIHBpZWNlIG9mIHBhcGVyIGNvbmNlYWxlZCBpbnNpZGUgb25lIG9mIENNT1QgRGliYmxlcidzCiMgICAgICAgICAibWVhdCIgcGllcywgcGFydGx5IGVhdGVuIGJ5IFZpbWVzIGJ1dCBpbnRlbmRlZCBmb3Igc29tZW9uZSBlbHNlKQolcGFzc2FnZSA2CkhlIHVuZm9sZGVkIGl0LiAgSW4gc211ZGdlZCBwZW5jaWwsIGJ1dCBzdGlsbCByZWFkYWJsZSwgaXQgcmVhZDoKL01vcnBoaWMgU3RyZWV0LCA5IG8nY2xvY2sgdG9uaWdodC4gIFBhc3N3b3JkOiBTd29yZGZpc2gvLgoKU3dvcmRmaXNoPyAgRXZlcnkgcGFzc3dvcmQgd2FzICJzd29yZGZpc2giISAgV2hlbmV2ZXIgYW55b25lIHRyaWVkIHRvCnRoaW5rIG9mIGEgd29yZCB0aGF0IG5vIG9uZSB3b3VsZCBldmVyIGd1ZXNzLCB0aGV5IC9hbHdheXMvIGNob3NlCiJzd29yZGZpc2guIiAgSXQgd2FzIGp1c3Qgb25lIG9mIHRob3NlIHN0cmFuZ2UgcXVpcmtzIG9mIHRoZSBodW1hbiBtaW5kLgoKICBbTmlnaHQgV2F0Y2gsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDM0NSAodGV4dCBhY3R1YWxseSBoYXMgIndvcnRoIG1vcmUgKnRoYXQqIEFNJDEwLDAwMCItLW9idmlvdXNseSBhIHR5cG8pCiVwYXNzYWdlIDcKVGhlcmUgd2VyZSBydWxlcy4gIFdoZW4geW91IGhhZCBhIEd1aWxkIG9mIEFzc2Fzc2lucywgdGhlcmUgaGFkIHRvIGJlIHJ1bGVzCnRoYXQgZXZlcnlvbmUga25ldyBhbmQgdGhhdCB3ZXJlIG5ldmVyLCBldmVyIGJyb2tlbi4oMSkKCkFuIEFzc2Fzc2luLCBhIHJlYWwgQXNzYXNzaW4sIGhhZCB0byBsb29rIGxpa2Ugb25lLS1ibGFjayBjbG90aGVzLCBob29kLApib290cywgYW5kIGFsbC4gIElmIHRoZXkgY291bGQgd2VhciBhbnkgY2xvdGhlcywgYW55IGRpc2d1aXNlLCB0aGVuIHdoYXQKY291bGQgYW55b25lIGRvIGJ1dCBzcGVuZCBhbGwgZGF5IHNpdHRpbmcgaW4gYSBzbWFsbCByb29tIHdpdGggYSBsb2FkZWQKY3Jvc3Nib3cgcG9pbnRlZCBhdCB0aGUgZG9vcj8KCkFuZCB0aGV5IGNvdWxkbid0IGtpbGwgYSBtYW4gaW5jYXBhYmxlIG9mIGRlZmVuZGluZyBoaW1zZWxmIChhbHRob3VnaCBhCm1hbiB3b3J0aCBtb3JlIHRoYW4gQU0kMTAsMDAwIGEgeWVhciB3YXMgY29uc2lkZXJlZCBhdXRvbWF0aWNhbGx5IGNhcGFibGUKb2YgZGVmZW5kaW5nIGhpbXNlbGYgb3IgYXQgbGVhc3Qgb2YgZW1wbG95aW5nIHBlb3BsZSB3aG8gd2VyZSkuCgpBbmQgdGhleSBoYWQgdG8gZ2l2ZSB0aGUgdGFyZ2V0IGEgY2hhbmNlLgoKKDEpIFNvbWV0aW1lcywgYWRtaXR0ZWRseSwgZm9yIGEgZ2l2ZW4gdmFsdWUgb2YgIm5ldmVyLiIKCiAgW05pZ2h0IFdhdGNoLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKJWUgdGl0bGUKIwojCiMKJXRpdGxlIFRoZSBXZWUgRnJlZSBNZW4gKDkpCiMgcC4gMTAwIChIYXJwZXJUZW1wZXN0IGVkaXRpb247IHF1aW49PXF1ZWVuOwojICAgICAgICAgdGhpcyByYWxseWluZyBjcnkgb2NjdXJzIG11bHRpcGxlIHRpbWVzOyBwLiAxNjcgaGFzICIvTmFlIHF1aW4hCiMgICAgICAgICBOYWUga2luZyEgIE5hZSBsYWlyZCEgIE5hZSBtYXN0ZXIhICBXZSB3aWxsbmEgYmUgZm9vbGVkIGFnYWluIS8iLAojICAgICAgICAgcC4gMTkzIGhhcyBzYW1lIGV4Y2VwdCB0aGF0IEtpbmcgYW5kIFF1aW4gYXJlIHJldmVyc2VkIGFuZAojICAgICAgICAgY2FwaXRhbGl6ZWQsIHAuIDI4NyBoYXMgIi9OYWUgUXVpbiEgIE5hZSBMYWlyZCEgIFdlZSBGZWUgTWVuIS8iKQolcGFzc2FnZSAxCiJOYWMgTWFjIEZlZWdsZSEgIFRoZSBXZWUgRnJlZSBNZW4hICBOYWUga2luZyEgIE5hZSBxdWluISAgTmFlIGxhaXJkISAgTmFlCm1hc3RlciEgIC9XZSB3aWxsbmEgYmUgZm9vbGVkIGFnYWluIS8iCgogIFtUaGUgV2VlIEZyZWUgTWVuLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMTgtMTkgKHVubGlrZSBpbiBMYW5jcmUgYW5kIGl0cyBzdXJyb3VuZGluZyBSYW10b3AgbW91bnRhaW5zLCB3aXRjaGVzCiMgICAgICAgICAgIGFyZSB1bndlbGNvbWUgaW4gdGhlIENoYWxrOyB0aGUgZmlyc3QgcGFyYWdyYXBoIGNvbnRpbnVlcyB3aXRoCiMgICAgICAgICAgIG1lbnRpb24gb2YgdGhpbmdzIE1pc3MgVGljayBkb2Vzbid0IGNhcnJ5LCB0aGVuIHRoaW5ncyBzaGUgZG9lcywKIyAgICAgICAgICAgZW5kaW5nIHdpdGggJ2FuZCwgb2YgY291cnNlLCBhIGx1Y2t5IGNoYXJtLicpCiVwYXNzYWdlIDIKTWlzcyBUaWNrIGRpZCBub3QgbG9vayBsaWtlIGEgd2l0Y2guICBNb3N0IHdpdGNoZXMgZG9uJ3QsIGF0IGxlYXN0IHRoZSBvbmVzCndobyB3YW5kZXIgZnJvbSBwbGFjZSB0byBwbGFjZS4gIExvb2tpbmcgbGlrZSBhIHdpdGNoIGNhbiBiZSBkYW5nZXJvdXMgd2hlbgp5b3Ugd2FsayBhbW9uZyB0aGUgdW5lZHVjYXRlZC4gIFsuLi5dCgpFdmVyeW9uZSBpbiB0aGUgY291bnRyeSBjYXJyaWVkIGx1Y2t5IGNoYXJtcywgYW5kIE1pc3MgVGljayBoYWQgd29ya2VkIG91dAp0aGF0IGlmIHlvdSBkaWRuJ3QgaGF2ZSBvbmUsIHBlb3BsZSB3b3VsZCBzdXNwZWN0IHRoYXQgeW91IC93ZXJlLyBhIHdpdGNoLgpZb3UgaGFkIHRvIGJlIGEgYml0IGN1bm5pbmcgdG8gYmUgYSB3aXRjaC4KCk1pc3MgVGljayBkaWQgaGF2ZSBhIHBvaW50eSBoYXQsIGJ1dCBpdCB3YXMgYSBzdGVhbHRoIGhhdCBhbmQgcG9pbnRlZCBvbmx5CndoZW4gc2hlIHdhbnRlZCBpdCB0by4KClRoZSBvbmUgdGhpbmcgaW4gaGVyIGJhZyB0aGF0IG1pZ2h0IGhhdmUgbWFkZSBhbnlvbmUgc3VzcGljaW91cyB3YXMgYSB2ZXJ5CnNtYWxsLCBncnViYnkgYm9va2xldCBlbnRpdGxlZCAvQW4gSW50cm9kdWN0aW9uIHRvIEVzY2Fwb2xvZ3ksIGJ5IHRoZQpHcmVhdCBXaWxsaWFtc29uLy4gIElmIG9uZSBvZiB0aGUgcmlza3Mgb2YgeW91ciBqb2IgaXMgYmVpbmcgdGhyb3duIGludG8gYQpwb25kIHdpdGggeW91ciBoYW5kcyB0aWVkIHRvZ2V0aGVyLCB0aGVuIHRoZSBhYmlsaXR5IHRvIHN3aW0gdGhpcnR5IHlhcmRzCnVuZGVyd2F0ZXIsIGZ1bGx5IGNsb3RoZWQsIHBsdXMgdGhlIGFiaWxpdHkgdG8gbHVyayB1bmRlciB0aGUgd2VlZHMKYnJlYXRoaW5nIGFpciB0aHJvdWdoIGEgaG9sbG93IHJlZWQsIGNvdW50IGFzIG5vdGhpbmcgaWYgeW91IGFyZW4ndCBhbHNvCi9hbWF6aW5nbHkvIGdvb2QgYXQga25vdHMuCgogIFtUaGUgV2VlIEZyZWUgTWVuLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMjktMzAgKCdwdW5lJyBpcyBhY2N1cmF0ZTsgYSBtaXNwcm9udW5jaWF0aW9uIG9mICdwdW4nLCBhcyBpbmRpY2F0ZWQKIyAgICAgICAgICAgIGJ5IHRoZSBmb290bm90ZTsgb25lIHdvbmRlcnMgaG93IGEgbmluZSB5ZWFyIG9sZCBmYXJtIGdpcmwga25vd3MKIyAgICAgICAgICAgIGhvdyB0byBwcm9ub3VuY2UgJ215c3RpcXVlJy4uLikKJXBhc3NhZ2UgMwoiTXkgbmFtZSwiIHNoZSBzYWlkIGF0IGxhc3QsICJpcyBNaXNzIFRpY2suICBBbmQgSSAvYW0vIGEgd2l0Y2guICBJdCdzIGEKZ29vZCBuYW1lIGZvciBhIHdpdGNoLCBvZiBjb3Vyc2UuIgoKIllvdSBtZWFuIGJsb29kLXN1Y2tpbmcgcGFyYXNpdGU/IiBzYWlkIFRpZmZhbnksIHdyaW5rbGluZyBoZXIgZm9yZWhlYWQuCgoiSSdtIHNvcnJ5LCIgc2FpZCBNaXNzIFRpY2ssIGNvbGRseS4KCiJUaWNrcywiIHNhaWQgVGlmZmFueS4gICJTaGVlcCBnZXQgdGhlbS4gIEJ1dCBpZiB5b3UgdXNlIHR1cnBlbnRpbmUtLSIKCiJJIC9tZWFudC8gdGhhdCBpdCAvc291bmRzLyBsaWtlICdteXN0aWMsJyIgc2FpZCBNaXNzIFRpY2suCgoiT2gsIHlvdSBtZWFuIGEgcHVuZSwgb3IgcGxheSBvbiB3b3JkcywiIHNhaWQgVGlmZmFueS4oMSkgICJJbiB0aGF0IGNhc2UgaXQKd291bGQgYmUgZXZlbiBiZXR0ZXIgaWYgeW91IHdlcmUgTWlzcyAvVGVhay8sIGEgZGVuc2UgZm9yZWlnbiB3b29kLCBiZWNhdXNlCnRoYXQgd291bGQgc291bmQgbGlrZSAnbXlzdGlxdWUsJyBvciB5b3UgY291bGQgYmUgTWlzcyBUYWtlLCB3aGljaCB3b3VsZC0tIgoKIkkgY2FuIHNlZSB3ZSdyZSBnb2luZyB0byBnZXQgb24gbGlrZSBhIGhvdXNlIG9uIGZpcmUsIiBzYWlkIE1pc3MgVGljay4KIlRoZXJlIG1heSBiZSBubyBzdXJ2aXZvcnMuIgoKKDEpIFRpZmZhbnkgaGFkIHJlYWQgbG90cyBvZiB3b3JkcyBpbiB0aGUgZGljdGlvbmFyeSB0aGF0IHNoZSdkIG5ldmVyIGhlYXJkCnNwb2tlbiwgc28gc2hlIGhhZCB0byBndWVzcyBhdCBob3cgdGhleSB3ZXJlIHByb25vdW5jZWQuCgogIFtUaGUgV2VlIEZyZWUgTWVuLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gNjQtNjUKJXBhc3NhZ2UgNApUaGVyZSB3YXMgYSBsb3Qgb2YgbWlzdCBhcm91bmQsIGJ1dCBhIGZldyBzdGFycyB3ZXJlIHZpc2libGUgb3ZlcmhlYWQgYW5kCnRoZXJlIHdhcyBhIGdpYmJvdXMgbW9vbiBpbiB0aGUgc2t5LiAgVGlmZmFueSBrbmV3IGl0IHdhcyBnaWJib3VzIGJlY2F1c2UKc2hlJ2QgcmVhZCBpbiB0aGUgQWxtYW5hY2sgdGhhdCAvZ2liYm91cy8gbWVhbnMgd2hhdCB0aGUgbW9vbiBsb29rZWQgbGlrZQp3aGVuIGl0IHdhcyBqdXN0IGEgYml0IGZhdHRlciB0aGFuIGhhbGYgZnVsbCwgYW5kIHNvIHNoZSBtYWRlIGEgcG9pbnQgb2YKcGF5aW5nIGF0dGVudGlvbiB0byBpdCBhcm91bmQgdGhvc2UgdGltZXMganVzdCBzbyB0aGF0IHNoZSBjb3VsZCBzYXkgdG8KaGVyc2VsZiwgIkFoLCBJIHNlZSB0aGUgbW9vbidzIHZlcnkgZ2liYm91cyB0b25pZ2h0LiIKCkl0J3MgcG9zc2libGUgdGhhdCB0aGlzIHRlbGxzIHlvdSBtb3JlIGFib3V0IFRpZmZhbnkgdGhhbiBzaGUgd291bGQgd2FudAp5b3UgdG8ga25vdy4KCiAgW1RoZSBXZWUgRnJlZSBNZW4sIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDE1OSAoYmlnam9iOiBwaWN0c2llIHRlcm0gZm9yIGh1bWFuOyAnaGVpZCcsICdkaW5uYScsICdjYW5uYScsICdub28nLAojICAgICAgICAgJ2Fyb291bmQnLCBhbmQgJ1RpZmZhbicgYXJlIGFjY3VyYXRlKQolcGFzc2FnZSA1CiJbLi4uXSAgWWUgaGF2ZSB0aGUgRmlyc3QgU2lnaHQgYW5kIHRoZSBTZWNvbmQgVGhvdWdodHMsIGp1c3QgbGlrZSB5ZXIKR3Jhbm55LiAgVGhhdCdzIHJhcmUgaW4gYSBiaWdqb2IuIgoKIkRvbid0IHlvdSBtZWFuIFNlY29uZCBTaWdodD8iIFRpZmZhbnkgYXNrZWQuICAiTGlrZSBwZW9wbGUgd2hvIGNhbiBzZWUKZ2hvc3RzIGFuZCBzdHVmZj8iCgoiQWNoLCBuby4gIFRoYXQncyB0eXBpY2FsIGJpZ2pvYiB0aGlua2luZy4gIC9GaXJzdCBTaWdodC8gaXMgd2hlbiB5b3UgY2FuCnNlZSB3aGF0J3MgcmVhbGx5IHRoZXJlLCBub3Qgd2hhdCB5b3VyIGhlaWQgdGVsbHMgeW91IC9vdWdodC8gdG8gYmUgdGhlcmUuClllIHNhdyBKZW5ueSwgeWUgc2F3IHRoZSBob3JzZW1hbiwgeWUgc2F3IHRoZW0gYXMgcmVhbCB0aGluZ2llcy4gIFNlY29uZApzaWdodCBpcyBkdWxsIHNpZ2h0LCBpdCdzIHNlZWluZyBvbmx5IHdoYXQgeW91IGV4cGVjdCB0byBzZWUuICBNb3N0IGJpZ2pvYnMKaGEnIHRoYXQuICBMaXN0ZW4gdG8gbWUsIGJlY2F1c2UgSSdtIGZhZGluJyBub28gYW5kIHRoZXJlJ3MgYSBsb3QgeW91IGRpbm5hCmtlbi4gIFllIHRoaW5rIHRoaXMgaXMgdGhlIHdob2xlIHdvcmxkPyAgVGhhdCBpcyBhIGdvb2QgdGhvdWdodCBmb3Igc2hlZXAKYW5kIG1vcnRhbHMgd2hvIGRpbm5hIG9wZW4gdGhlaXIgZXllcy4gIEJlY2F1c2UgaW4gdHJ1dGggdGhlcmUgYXJlIG1vcmUKd29ybGRzIHRoYW4gc3RhcnMgaW4gdGhlIHNreS4gIFVuZGVyc3RhbmQ/ICBUaGV5IGFyZSBldmVyeXdoZXJlLCBiaWcgYW5kCnNtYWxsLCBjbG9zZSBhcyB5b3VyIHNraW4uICBUaGV5IGFyZSAvZXZlcnl3aGVyZS8uICBTb21lIHllIGNhbiBzZWUgYW4nCnNvbWUgeWUgY2FubmEsIGJ1dCB0aGVyZSBhcmUgZG9vcnMsIFRpZmZhbi4gIFRoZXkgbWlnaHQgYmUgYSBoaWxsIG9yIGEKdHJlZSBvciBhIHN0b25lIG9yIGEgdHVybiBpbiB0aGUgcm9hZCwgb3IgdGhleSBtaWdodCBlJ2VuIGJlIGEgdGhvdWdodCBpbgp5ZXIgaGVpZCwgYnV0IHRoZXkgYXJlIHRoZXJlLCBhbGwgYXJvb3VuZCB5ZS4gIFlvdSdsbCBoYXZlIHRvIGxlYXJuIHRvIHNlZQonZW0sIGJlY2F1c2UgeW91IHdhbGsgYW1vbmcgdGhlbSBhbmQgZGlubmEga25vdyBpdC4gIEFuZCBzb21lIG9mIHRoZW0uLi4KaXMgcG9pc29ub3VzLiIKCiAgW1RoZSBXZWUgRnJlZSBNZW4sIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDE5MyAoc291cmNlIHRleHQgaXMgYWxsIGl0YWxpY3MgaGVyZTsgcGFzc2FnZSBjb250aW51ZXMgd2l0aCB0aGUgc3BlYWtlcnMKIyAgICAgICAgIGdldHRpbmcgaW4gc3luY2ggYW5kIHNob3V0aW5nIHRoZSBjcnkgZnJvbSBwYXNzYWdlIDEpCiVwYXNzYWdlIDYKIlRoZXkgY2FuIHRhaycgb291ciBsaXZlcyBidXQgdGhleSBjYW5uYSB0YWsnIG9vdXIgdHJvb3VzZXJzISIKCiJZZSdsbCB0YWsnIHRoZSBoaWdoIHJvYWQgYW4nIEknbGwgdGFrJyB5ZXIgd2FsbGV0ISIKCiJUaGVyZSBjYW4gb25seSBiZSBvbmUgdCdvdXNhbmQhIgoKIkFjaCwgc3RpY2sgaXQgdXAgeWVyIHRyYWtrYW5zISIKCiAgW1RoZSBXZWUgRnJlZSBNZW4sIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDIyNyAoYWxzbyBhbGwgaXRhbGljczsgZW5kIG9mIGEgcmVtaW5pc2NlbmNlIG9mIEdyYW5ueSBBY2hpbmcgYnkgVGlmZmFueSkKJXBhc3NhZ2UgNwoiVGhlbSBhcyBjYW4gZG8gaGFzIHRvIGRvIGZvciB0aGVtIGFzIGNhbid0LiAgQW5kIHNvbWVvbmUgaGFzIHRvIHNwZWFrIHVwCmZvciB0aGVtIGFzIGhhcyBubyB2b2ljZXMuIgoKICBbVGhlIFdlZSBGcmVlIE1lbiwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjg3IChsaWtlIHBhc3NhZ2UgNiwgdGhpcyB0aWVzIGJhY2sgdG8gcGFzc2FnZSAxOyB0aGUgY3J5IHRoZXJlIGlzCiMgICAgICAgICBvbmUgb2YgdGhlIHRoaW5ncyBUaWZmYW55IGhlYXJzKQolcGFzc2FnZSA4ClRpZmZhbnkgbWlnaHQgaGF2ZSBiZWVuIHRoZSBvbmx5IHBlcnNvbiwgaW4gYWxsIHRoZSB3b3JsZHMgdGhhdCB0aGVyZSBhcmUsCnRvIGJlIGhhcHB5IHRvIGhlYXIgdGhlIHNvdW5kIG9mIHRoZSBOYWMgTWFjIEZlZWdsZS4KClRoZXkgcG91cmVkIG91dCBvZiB0aGUgc21hc2hlZCBudXQuICBTb21lIHdlcmUgc3RpbGwgd2VhcmluZyBib3cgdGllcy4KU29tZSB3ZXJlIGJhY2sgaW4gdGhlaXIga2lsdHMuICBCdXQgdGhleSB3ZXJlIGFsbCBpbiBhIGZpZ2h0aW5nIG1vb2QgYW5kLAp0byBzYXZlIHRpbWUsIHdlcmUgZmlnaHRpbmcgd2l0aCBvbmUgYW5vdGhlciB0byBnZXQgdXAgdG8gc3BlZWQuCgogIFtUaGUgV2VlIEZyZWUgTWVuLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMzEzLTMxNCAocGFzc2FnZSBzdGFydHMgbWlkLXBhcmFncmFwaDsgJ21lYmJlJyBhbmQgJ29vdXInIGFyZSBhY2N1cmF0ZSkKJXBhc3NhZ2UgOQoiWy4uLl0gIENhbiB5b3UgYnJpbmcgV2VudHdvcnRoPyIKCiJBeWUuIgoKIkFuZCB5b3Ugd29uJ3QgZ2V0IGxvc3Qgb3ItLW9yIGRydW5rIG9yIGFueXRoaW5nPyIKClJvYiBBbnlib2R5IGxvb2tlZCBvZmZlbmRlZC4gICJXZSBuZSdlciBnZXQgbG9zdCEiIGhlIHNhaWQuICAiV2UgYWx3YXlzIGtlbgp3aGVyZSB3ZSBhcmUhICBJdCdzIGp1c3Qgc29tZXRpbWVzIG1lYmJlIHdlIGFyZW4ndCBzdXJlIHdoZXJlIGV2ZXJ5dGhpbmcKZWxzZSBpcywgYnV0IGl0J3Mgbm8nIG91ciBmYXVsdCBpZiAvZXZlcnl0aGluZyBlbHNlLyBnZXRzIGxvc3QhICBUaGUgTmFjCk1hYyBGZWVnbGUgbmV2ZXIgZ2V0IGxvc3QhIgoKIldoYXQgYWJvdXQgZHJ1bms/IiBzYWlkIFRpZmZhbnksIGRyYWdnaW5nIFJvbGFuZCB0b3dhcmQgdGhlIGxpZ2h0aG91c2UuCgoiV2UndmUgbmUnZXIgYmVlbiBsb3N0IGluIG9vdXIgbGl2ZXMhICBJcyB0aGF0IG5vJyB0aGUgY2FzZSwgbGFkcz8iIHNhaWQKUm9iIEFueWJvZHkuICBUaGVyZSB3YXMgYSBtdXJtdXIgb2YgcmVzZW50ZnVsIGFncmVlbWVudC4gICJUaGUgd29yZHMgL2xvc3QvCmFuZCAvTmFjIE1hYyBGZWVnbGUvIHNob3VsZG5hIHR1cm4gdXAgaW4gdGhlIHNhbWUgc2VudGVuY2UhIgoKIkFuZCBkcnVuaz8iIHNhaWQgVGlmZmFueSBhZ2FpbiwgbGF5aW5nIFJvbGFuZCBkb3duIG9uIHRoZSBiZWFjaC4KCiJHZXR0aW4nIGxvc3QgaXMgc29tZXRoaW5nIHRoYXQgaGFwcGVucyB0byBvdGhlciBwZW9wbGUhIiBkZWNsYXJlZCBSb2IKQW55Ym9keS4gICJJIHdhbnQgdG8gbWFrZSB0aGF0IHBvaW50IHBlcmZlY3RseSBjbGVhciEiCgogIFtUaGUgV2VlIEZyZWUgTWVuLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKJWUgdGl0bGUKIwojCiMKJXRpdGxlIE1vbnN0cm91cyBSZWdpbWVudCAoOCkKJXBhc3NhZ2UgMQonSG93IGNhbiB5b3UgcHJvdGVjdCB5b3Vyc2VsZiBieSBjYXJyeWluZyBhIHN3b3JkIGlmIHlvdSBkb24ndCBrbm93IGhvdwp0byB1c2UgaXQ/JwoKJ05vdCBtZSwgc2lyLiAgT3RoZXIgcGVvcGxlLiAgVGhleSBzZWUgdGhlIHN3b3JkIGFuZCBkb24ndCBhdHRhY2sgbWUsJwpzYWlkIE1hbGFkaWN0IHBhdGllbnRseS4KCidZZXMsIGJ1dCBpZiB0aGV5IGRpZCwgbGFkLCB5b3Ugd291bGRuJ3QgYmUgYW55IGdvb2Qgd2l0aCBpdCwnIHNhaWQgdGhlCnNlcmdlYW50LgoKJ05vLCBzaXIuICBJJ2QgcHJvYmFibHkgc2V0dGxlIGZvciBqdXN0IHJpcHBpbmcgdGhlaXIgaGVhZHMgb2ZmLCBzaXIuClRoYXQncyB3aGF0IEkgbWVhbiBieSBwcm90ZWN0aW9uLCBzaXIuICBUaGVpcnMsIG5vdCBtaW5lLiAgQW5kIEknZCBnZXQKaGVsbCBmcm9tIHRoZSBMZWFndWUgaWYgSSBkaWQgdGhhdCwgc2lyLicKCiAgW01vbnN0cm91cyBSZWdpbWVudCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gNiAoSGFycGVyIFRvcmNoIGVkaXRpb24pCiVwYXNzYWdlIDIKL1RoZXJlIHdhcyBhbHdheXMgYSB3YXIuLyAgVXN1YWxseSB0aGV5IHdlcmUgYm9yZGVyIGRpc3B1dGVzLCB0aGUgbmF0aW9uYWwKZXF1aXZhbGVudCBvZiBjb21wbGFpbmluZyB0aGF0IHRoZSBuZWlnaGJvciB3YXMgbGV0dGluZyB0aGVpciBoZWRnZSBncm93CnRvbyBsb25nLiAgU29tZXRpbWVzIHRoZXkgd2VyZSBiaWdnZXIuICBCb3JvZ3JhdmlhIHdhcyBhIHBlYWNlLWxvdmluZwpjb3VudHJ5IGluIHRoZSBtaWRzdCBvZiB0cmVhY2hlcm91cywgZGV2aW91cywgd2FybGlrZSBlbmVtaWVzLiAgVGhleSBoYWQKdG8gYmUgdHJlYWNoZXJvdXMsIGRldmlvdXMsIGFuZCB3YXJsaWtlLCBvdGhlcndpc2Ugd2Ugd291bGRuJ3QgYmUgZmlnaHRpbmcKdGhlbSwgZWg/ICBUaGVyZSB3YXMgYWx3YXlzIGEgd2FyLgoKICBbTW9uc3Ryb3VzIFJlZ2ltZW50LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMTE1LTExNiAocGx1cmFsICdmb3Jlc3RzJyBpcyBvZGQgYnV0IGFjY3VyYXRlIFsxc3Qgc2VudGVuY2VdOwojICAgICAgICAgICAgICBzbyBpcyAna25ldycgd2hpY2ggb3VnaHQgdG8gYmUgJ2tub3duJyBbNHRoIHBhcmFncmFwaF07CiMgICAgICAgICAgICAgIDkgJzAncyBhbmQgNyAnMCdzIGFyZSBhY2N1cmF0ZSB0b28pCiVwYXNzYWdlIDMKQSBwaWdlb24gcm9zZSBvdmVyIHRoZSBmb3Jlc3RzLCBiYW5rZWQgc2xpZ2h0bHksIGFuZCBoZWFkZWQgc3RyYWlnaHQgZm9yCnRoZSB2YWxsZXkgb2YgdGhlIEtuZWNrLgoKRXZlbiBmcm9tIGhlcmUsIHRoZSBibGFjayBzdG9uZSBidWxrIG9mIHRoZSBLZWVwIHdhcyB2aXNpYmxlLCByaXNpbmcgYWJvdmUKdGhlIHNlYSBvZiB0cmVlcy4gIFRoZSBwaWdlb24gc3BlZCBvbiwgb25lIHNwYXJrIG9mIHB1cnBvc2UgaW4gdGhlIGZyZXNoCm5ldyBtb3JuaW5nLS0KCi0tYW5kIHNxdWF3a2VkIGFzIGRhcmtuZXNzIGRyb3BwZWQgZnJvbSB0aGUgc2t5LCBncmlwcGluZyBpdCBpbiB0YWxvbnMgb2YKc3RlZWwuICBCdXp6YXJkIGFuZCBwaWdlb24gdHVtYmxlZCBmb3IgYSBtb21lbnQsIGFuZCB0aGVuIHRoZSBidXp6YXJkCmdhaW5lZCBhIGxpdHRsZSBoZWlnaHQgYW5kIGZsYXBwZWQgb253YXJkcy4KClRoZSBwaWdlb24gdGhvdWdodDogMDAwMDAwMDAwLiAgQnV0IGhhZCBpdCBiZWVuIG1vcmUgY2FwYWJsZSBvZiBjb2hlcmVudAp0aG91Z2h0LCBhbmQga25ldyBzb21ldGhpbmcgYWJvdXQgaG93IGJpcmRzIG9mIHByZXkgY2F1Z2h0IHBpZ2VvbnMsKDEpIGl0Cm1pZ2h0IGhhdmUgd29uZGVyZWQgd2h5IGl0IHdhcyBiZWluZyBncmlwcGVkIHNvLi4uIGtpbmRseS4gIEl0IHdhcyBiZWluZwpoZWxkLCBub3Qgc3F1ZWV6ZWQuICBBcyBpdCB3YXMsIGFsbCBpdCBjb3VsZCB0aGluayB3YXMgMDAwMDAwMCEKCigxKSBBbmQgYWxsb3dpbmcgZm9yIHRoZSBmYWN0IHRoYXQgYWxsIHBpZ2VvbnMgd2hvIGtuZXcgaG93IGJpcmRzIG9mIHByZXkKY2F0Y2ggcGlnZW9ucyBhcmUgZGVhZCwgYW5kIHRoZXJlZm9yZSBjYXBhYmxlIG9mIHNsaWdodGx5IGxlc3MgdGhvdWdodAp0aGFuIGEgbGl2aW5nIHBpZ2Vvbi4KCiAgW01vbnN0cm91cyBSZWdpbWVudCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTMxCiVwYXNzYWdlIDQKIkFsbCB0aGUgZm9vZCdzIGJlZW4gdGFrZW4gYnV0IHRoZXJlJ3MgY2Fycm90cyBhbmQgcGFyc25pcHMgaW4gYSBsaXR0bGUKZ2FyZGVuIGRvd24gdGhlIGhpbGwgYSBiaXQsIiBTaHVmdGkgc2FpZCBhcyB0aGV5IHdhbGtlZCBhd2F5LgoKIkl0J2QgYmUgcy1zdGVhbGluZyBmcm9tIHRoZSBkZWFkLCIgc2FpZCBXYXp6ZXIuCgoiV2VsbCwgaWYgdGhleSBvYmplY3QgdGhleSBjYW4gaG9sZCBvbiwgY2FuJ3QgdGhleT8iIHNhaWQgU2h1ZnRpLiAgIlRoZXkncmUKdW5kZXJncm91bmQgYWxyZWFkeSEiCgogIFtNb25zdHJvdXMgUmVnaW1lbnQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDE2MAolcGFzc2FnZSA1CiJBbmQgdGhlcmUgeW91IGhhdmUgaXQsIFNlcmdlYW50IFRvd2VyaW5nLCIgc2FpZCB0aGUgbGlldXRlbmFudCwgdHVybmluZwp0byB0aGUgcHJpc29uZXIuICAiT2YgY291cnNlLCB3ZSBhbGwga25vdyB0aGVyZSBpcyBzb21lIGF0cm9jaW91cyBiZWhhdmlvcgppbiB0aW1lcyBvZiB3YXIsIGJ1dCBpdCBpcyBub3QgdGhlIHNvcnQgb2YgdGhpbmcgd2Ugd291bGQgZXhwZWN0IG9mIGEKcm95YWwgcHJpbmNlLigxKSAgSWYgd2UgYXJlIHRvIGJlIHB1cnN1ZWQgYmVjYXVzZSBhIGdhbGxhbnQgeW91bmcgc29sZGllcgpwcmV2ZW50ZWQgbWF0dGVycyBmcm9tIGJlY29taW5nIGV2ZW4gbW9yZSBkaXNndXN0aW5nLCB0aGVuIHNvIGJlIGl0LiIKCigxKSBMaWV1dGVuYW50IEJsb3VzZSByZWFkIG9ubHkgdGhlIG1vcmUgdGVjaG5pY2FsIGhpc3RvcnkgYm9va3MuCgogIFtNb25zdHJvdXMgUmVnaW1lbnQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDE3NiAoZmlyZTogYWxtb3N0IGNlcnRhaW5seSB0byBtYWtlIHRlYSkKJXBhc3NhZ2UgNgpUaGVyZSBhcmUgdGhyZWUgdGhpbmdzIGEgc29sZGllciB3YW50cyB0byBkbyB3aGVuIHRoZXJlJ3MgYSByZXNwaXRlIG9uIHRoZQpyb2FkLiAgT25lIGludm9sdmVzIGxpZ2h0aW5nIGEgY2lnYXJldHRlLCBvbmUgaW52b2x2ZXMgbGlnaHRpbmcgYSBmaXJlLAphbmQgdGhlIG90aGVyIGludm9sdmVzIG5vIGZsYW1lcyBhdCBhbGwgYnV0IGRvZXMsIGdlbmVyYWxseSwgcmVxdWlyZSBhCnRyZWUuKDEpCgooMSkgVGVjaG5pY2FsbHksIGEgdHJlZSBpcyBub3QgcmVxdWlyZWQsIGJ1dCBzZWVtcyB0byBiZSBpbnNpc3RlZCB1cG9uIGZvcgpyZWFzb25zIG9mIHN0eWxlLgoKICBbTW9uc3Ryb3VzIFJlZ2ltZW50LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxNzkgKCdodW1vcic6IEFtZXJpY2FuIHNwZWxsaW5nIGlzIGFjY3VyYXRlKQolcGFzc2FnZSA3Ck1hbGFkaWN0IGRyb3BwZWQgaGlzIGNyb3NzYm93LCB3aGljaCBmaXJlZCBzdHJhaWdodCB1cCBpbnRvIHRoZSBhaXIsKDEpCmFuZCBzYXQgZG93biB3aXRoIGhpcyBoZWFkIGluIGhpcyBoYW5kcy4KCigxKSBBbmQgZmFpbGVkIHRvIGhpdCBhbnl0aGluZywgZXNwZWNpYWxseSBhIGR1Y2suICBUaGlzIGlzIHNvIHVudXN1YWwKaW4gc2l0dWF0aW9ucyBsaWtlIHRoaXMgdGhhdCBpdCBtdXN0IGJlIHJlcG9ydGVkIHVuZGVyIHRoZSBuZXcgaHVtb3IKcmVndWxhdGlvbnMuICBJZiBpdCBoYWQgaGl0IGEgZHVjaywgd2hpY2ggcXVhY2tlZCBhbmQgbGFuZGVkIG9uIHNvbWVib2R5J3MKaGVhZCwgdGhpcyB3b3VsZCwgb2YgY291cnNlLCBoYXZlIGJlZW4gdmVyeSBkcm9sbCBhbmQgd291bGQgY2VydGFpbmx5IGhhdmUKYmVlbiByZXBvcnRlZC4gIEluc3RlYWQsIHRoZSBhcnJvdyBkcmlmdGVkIGluIHRoZSBicmVlemUgYSBsaXR0bGUgb24gdGhlCndheSBhbmQgbGFuZGVkIGluIGFuIG9hayB0cmVlIHNvbWUgdGhpcnR5IGZlZXQgYXdheSwgd2hlcmUgaXQgbWlzc2VkIGEKc3F1aXJyZWwuCgogIFtNb25zdHJvdXMgUmVnaW1lbnQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDI4NCAoc29sZGllcnMgZGlzZ3Vpc2VkIGFzIHdhc2hlcndvbWVuIGluIG9yZGVyIHRvIHNuZWFrIGludG8gYW4KIyAgICAgICAgIGVuZW15LWNvbnRyb2xsZWQgY2FzdGxlIGhhdmUgYmVlbiBwdXQgdG8gd29yayBkb2luZyB0aGUgbGF1bmRyeSkKJXBhc3NhZ2UgOAoiTG9vayBhdCB0aGlzLCB3aWxsIHlvdT8iIHNhaWQgU2h1ZnRpLCB3YXZpbmcgYSBzb2RkZW4gcGFpciBvZiBtZW4ncyBsb25nCnBhbnRzIGF0IGhlci4gICJUaGV5IGtlZXAgcHV0dGluZyB0aGUgY29sb3JzIGluIHdpdGggdGhlIHdoaXRlcy4iCgoiV2VsbCwgc28gd2hhdD8gIFRoZXNlIGFyZSAvZW5lbXkvIGxvbmcgam9obnMsIiBzYWlkIFBvbGx5LgoKIlllcywgYnV0IHRoZXJlJ3Mgc3VjaCBhIHRoaW5nIGFzIGRvaW5nIGl0IHByb3Blcmx5ISAgTG9vaywgdGhleSBwdXQgaW4KdGhpcyByZWQgcGFpciBhbmQgYWxsIHRoZSBvdGhlcnMgYXJlIGdvaW5nIHBpbmsuIgoKIkFuZD8gIEkgdXNlZCB0byBsb3ZlIHBpbmsgd2hlbiBJIHdhcyBhYm91dCBzZXZlbi4iKDEpCgoiQnV0IHBhbGUgcGluaz8gIE9uIGEgbWFuPyIKClBvbGx5IGxvb2tlZCBhdCB0aGUgbmV4dCB0dWIgZm9yIGEgbW9tZW50IGFuZCBwYXR0ZWQgU2h1ZnRpIG9uIHRoZSBzaG91bGRlci4KCiJZZXMuICBJdCBpcyAvdmVyeS8gcGFsZSwgaXNuJ3QgaXQ/ICBZb3UnZCBiZXR0ZXIgZmluZCBhIGNvdXBsZSBtb3JlIHJlZAppdGVtcywiIHNoZSBzYWlkLgoKIkJ1dCB0aGF0J2xsIG1ha2UgaXQgZXZlbiB3b3JzZS0tIiBTaHVmdGkgYmVnYW4uCgoiVGhhdCB3YXMgYW4gL29yZGVyLywgc29sZGllciwiIFBvbGx5IHdoaXNwZXJlZCBpbiBoZXIgZWFyLiAgIkFuZCBhZGQgc29tZQpzdGFyY2guIgoKIkhvdyBtdWNoPyIKCiJBbGwgeW91IGNhbiBmaW5kLiIKCigxKSBJdCBpcyBhbiBlc3RhYmxpc2hlZCBmYWN0IHRoYXQsIGRlc3BpdGUgZXZlcnl0aGluZyBzb2NpZXR5IGNhbiBkbywKZ2lybHMgb2Ygc2V2ZW4gYXJlIG1hZ25ldGljYWxseSBhdHRyYWN0ZWQgdG8gdGhlIGNvbG9yIHBpbmsuCgogIFtNb25zdHJvdXMgUmVnaW1lbnQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQolZSB0aXRsZQojCiMKIwoldGl0bGUgQSBIYXQgRnVsbCBvZiBTa3kgKDExKQojIHAuIDQwNSAoSGFycGVyVGVtcGVzdCBlZGl0aW9uKQolcGFzc2FnZSAxCldoeSBkbyB5b3UgZ28gYXdheT8gIFNvIHRoYXQgeW91IGNhbiBjb21lIGJhY2suICBTbyB0aGF0IHlvdSBjYW4gc2VlIHRoZQpwbGFjZSB5b3UgY2FtZSBmcm9tIHdpdGggbmV3IGV5ZXMgYW5kIGV4dHJhIGNvbG9ycy4gIEFuZCB0aGUgcGVvcGxlIHRoZXJlCnNlZSB5b3UgZGlmZmVyZW50bHksIHRvby4gIENvbWluZyBiYWNrIHRvIHdoZXJlIHlvdSBzdGFydGVkIGlzIG5vdCB0aGUKc2FtZSBhcyBuZXZlciBsZWF2aW5nLgoKICBbQSBIYXQgRnVsbCBvZiBTa3ksIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAxMS0xMgolcGFzc2FnZSAyCk1pc3MgVGljayB3YXMgYSBzb3J0IG9mIHdpdGNoIGZpbmRlci4gIFRoYXQgc2VlbWVkIHRvIGJlIGhvdyB3aXRjaGNyYWZ0CndvcmtlZC4gIFNvbWUgd2l0Y2hlcyBrZXB0IGEgbWFnaWNhbCBsb29rb3V0IGZvciBnaXJscyB3aG8gc2hvd2VkIHByb21pc2UsCmFuZCBmb3VuZCB0aGVtIGFuIG9sZGVyIHdpdGNoIHRvIGhlbHAgdGhlbSBhbG9uZy4gIFRoZXkgZGlkbid0IHRlYWNoIHlvdQpob3cgdG8gZG8gaXQuICBUaGV5IHRhdWdodCB5b3UgaG93IHRvIGtub3cgd2hhdCB5b3Ugd2VyZSBkb2luZy4KCldpdGNoZXMgd2VyZSBhIGJpdCBsaWtlIGNhdHMuICBUaGV5IGRpZG4ndCBtdWNoIGxpa2Ugb25lIGFub3RoZXIncyBjb21wYW55LApidXQgdGhleSAvZGlkLyBsaWtlIHRvIGtub3cgd2hlcmUgYWxsIHRoZSBvdGhlciB3aXRjaGVzIHdlcmUsIGp1c3QgaW4gY2FzZQp0aGV5IG5lZWRlZCB0aGVtLiAgQW5kIHdoYXQgeW91IG1pZ2h0IG5lZWQgdGhlbSBmb3Igd2FzIHRvIHRlbGwgeW91LCBhcyBhCmZyaWVuZCwgdGhhdCB5b3Ugd2VyZSBiZWdpbm5pbmcgdG8gY2Fja2xlLgoKICBbQSBIYXQgRnVsbCBvZiBTa3ksIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDMxCiVwYXNzYWdlIDMKIk9oLCIgc2FpZCBNaXNzIFRpY2suICBCdXQgYmVjYXVzZSBzaGUgd2FzIGEgdGVhY2hlciBhcyB3ZWxsIGFzIGEgd2l0Y2gsCmFuZCBwcm9iYWJseSBjb3VsZG4ndCBoZWxwIGhlcnNlbGYsIHNoZSBhZGRlZCwgIlRoZSBmdW5ueSB0aGluZyBpcywgb2YKY291cnNlLCB0aGF0IG9mZmljaWFsbHkgdGhlcmUgaXMgbm8gc3VjaCB0aGluZyBhcyBhIHdoaXRlIGhvcnNlLiAgVGhleSdyZQpjYWxsZWQgZ3JheS4iKDEpCgooMSkgU2hlIGhhZCB0byBzYXkgdGhhdCBiZWNhdXNlIHNoZSB3YXMgYSB3aXRjaCBhbmQgYSB0ZWFjaGVyLCBhbmQgdGhhdCdzCmEgdGVycmlibGUgY29tYmluYXRpb24uICBUaGV5IHdhbnQgdGhpbmdzIHRvIGJlIC9yaWdodC8uICBUaGV5IGxpa2UgdGhpbmdzCnRvIGJlIC9jb3JyZWN0Ly4gIElmIHlvdSB3YW50IHRvIHVwc2V0IGEgd2l0Y2gsIHlvdSBkb24ndCBoYXZlIHRvIG1lc3MKYXJvdW5kIHdpdGggY2hhcm1zIGFuZCBzcGVsbHMtLXlvdSBqdXN0IGhhdmUgdG8gcHV0IGhlciBpbiBhIHJvb20gd2l0aCBhCnBpY3R1cmUgdGhhdCdzIGh1bmcgc2xpZ2h0bHkgY3Jvb2tlZCBhbmQgd2F0Y2ggaGVyIHNxdWlybS4KCiAgW0EgSGF0IEZ1bGwgb2YgU2t5LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiA1MQolcGFzc2FnZSA0CiJPaCwiIHNoZSBzYWlkLiAgIkl0J3MgbGlrZSBjYXQncyBjcmFkbGUuIgoKIllvdSd2ZSBwbGF5ZWQgdGhhdCwgaGF2ZSB5b3U/IiBzYWlkIE1pc3MgVGljayB2YWd1ZWx5LCBzdGlsbApjb25jZW50cmF0aW5nLgoKIkkgY2FuIGRvIGFsbCB0aGUgY29tbW9uIHNoYXBlcywiIHNhaWQgVGlmZmFueS4gICJUaGUgSmV3ZWxzIGFuZCB0aGUKQ3JhZGxlIGFuZCB0aGUgSG91c2UgYW5kIHRoZSBGbG9jayBhbmQgdGhlIFRocmVlIE9sZCBMYWRpZXMsIE9uZSBXaXRoIGEKU3F1aW50LCBDYXJyeWluZyB0aGUgQnVja2V0IG9mIEZpc2ggdG8gTWFya2V0IFdoZW4gVGhleSBNZWV0IHRoZSBEb25rZXksCmFsdGhvdWdoIHlvdSBuZWVkIHR3byBwZW9wbGUgZm9yIHRoYXQgb25lLCBhbmQgSSBvbmx5IGV2ZXIgZGlkIGl0IG9uY2UsCmFuZCBCZXRzeSBUdXBwZXIgc2NyYXRjaGVkIGhlciBub3NlIGF0IHRoZSB3cm9uZyBtb21lbnQgYW5kIEkgaGFkIHRvIGdldApzb21lIHNjaXNzb3JzIHRvIHRvIGN1dCBoZXIgbG9vc2UuLi4iCgogIFtBIEhhdCBGdWxsIG9mIFNreSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTA2IChwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoOyAnZG9vbicgaXMgYWNjdXJhdGUpCiVwYXNzYWdlIDUKIlsuLi5dICBJdCdzIGEgYmFkIGNhc2UgbycgdGhlIHRoaW5raW4nIGhlJ3MgY2F1Z2h0LCBtaXNzdXMuICBXaGVuIGEgbWFuCnN0YXJ0cyBtZXNzaW4nIHdpJyB0aGUgcmVhZGluJyBhbmQgdGhlIHdyaXRpbicsIHRoZW4gaGUnbGwgY29tZSBkb29uIHdpdGgKYSBkb3NlIG8nIHRoZSB0aGlua2luJyBzb29uIGVub3VnaC4gIEknbGwgZmV0Y2ggc29tZSBvJyB0aGUgbGFkcyBhbmQgd2UnbGwKaG9sZCBoaXMgaGVhZCB1bmRlciB3YXRlciB1bnRpbCBoZSBzdG9wcyBkb2luJyBpdC0tJ3RpcyB0aGUgb25seSBjdXJlLiAgSXQKY2FuIGtpbGwgYSBtYW4sIHRoZSB0aGlua2luJy4iCgogIFtBIEhhdCBGdWxsIG9mIFNreSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTA3ICgnYnJha2VkJywgJ1BvbGlzJ21lbicsICdkaW5uYScgYWxsIGFjY3VyYXRlKQolcGFzc2FnZSA2CiJJIG5ldmVyIGJyYWtlZCBteSB3b3JkIHlldCwiIHNhaWQgUm9iLiAgIkV4Y2VwdCB0byBQb2xpcydtZW4gYW5kIG90aGVyIG8nCnRoYXQga2lkbmV5LCB5ZSBrZW4sIGFuZCB0aGV5IGRpbm5hIGNvdW50LiIKCiAgW0EgSGF0IEZ1bGwgb2YgU2t5LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxMTEgKHBhc3NhZ2Ugc3RhcnRzIG1pZC1wYXJhZ3JhcGg7ICdsYW5kIG8nIHRoZSBsaXZpbmcnOiB0aGUgTmFjIE1hYwojICAgICAgICAgRmVlZ2xlIGJlbGlldmUgdGhhdCB0aGV5J3JlIGRlYWQgYW5kIGFyZSBvbiBEaXNjd29ybGQgYmVjYXVzZSBpdAojICAgICAgICAgaXMgaGVhdmVuLCBhbHNvIHRoYXQgaWYgdGhleSBkaWUgb24gRGlzY3dvcmxkIHRoZXknbGwgYmUgcmVib3JuCiMgICAgICAgICBvbiB0aGVpciAicmVhbCB3b3JsZCI7ICdiaWcgd2VlIGhhZyc6IFRpZmZhbnksIGFwcHJlbnRpY2Ugd2l0Y2gKIwkgIFtiaWc6IHNoZSdzIGh1bWFuLCB3ZWU6IHNoZSdzIHN0aWxsIGEgY2hpbGQsIGhhZzogc2hlJ3MgYSB3aXRjaF0pCiVwYXNzYWdlIDcKIlsuLi5dICBOb3cgbGFkcywgeWUga2VuIGFsbCBhYm91dCBoaXZlcnMuICBUaGV5IGNhbm5hZSBiZSBraWxsZWQhICBCdXQKJ3RpcyBvb3IgZHV0eSB0byBzYXZlIHRoZSBiaWcgd2VlIGhhZywgc28gdGhpcyBpcywgbGlrZSwgYSBzb29leS1zaWRlCm1pc3Npb24gYW5kIHllJ2xsIHByb2JhYmx5IGFsbCBlbmQgdXAgYmFjayBpbiB0aGUgbGFuZCBvJyB0aGUgbGl2aW5nCmRvaW4nIGEgYm9yaW4nIHdlZSBqb2IuICBTby4uLiBJJ20gYXNraW4nIGZvciB2b2x1bnRlZXJzISIKCkV2ZXJ5IEZlZWdsZSBvdmVyIHRoZSBhZ2Ugb2YgZm91ciBhdXRvbWF0aWNhbGx5IHB1dCBoaXMgaGFuZCB1cC4KCiJPaCwgY29tZSAvb24vLCIgc2FpZCBSb2IuICAiWW91IGNhbm5hIC9hbGwvIGNvbWUhICBMb29rLCBJJ2xsIHRhaycuLi4KRGFmdCBXdWxsaWUsIEJpZyBZYW4sIGFuZCB5b3UuLi4gQXdmJ2x5IFdlZSBCaWxseSBCaWdjaGluLiAgQW4nIEknbSB0YWtpbicKbm8gd2VhbnMsIHNvIGlmIHlleiB1bmRlciB0aHJlZSBpbmNoZXMgaGlnaCwgeWUncmUgbm90IGNvbWluJyEgIEV4Y2VwdApmb3IgeWUsIG8nIGNvdXJzZSwgQXdmJ2x5IFdlZSBCaWxseS4gIEFzIGZvciB0aGUgcmVzdCBvZiB5b3VzZSwgd2UnbGwKc2V0dGxlIHRoaXMgdGhlIHRyYWRpdGlvbmFsIEZlZWdsZSB3YXkuICBJJ2xsIHRhaycgdGhlIGxhc3QgZmlmdHkgbWVuCnN0aWxsIHN0YW5kaW5nISIKCkhlIGJlY2tvbmVkIHRoZSBjaG9zZW4gdGhyZWUgdG8gYSBwbGFjZSBpbiB0aGUgY29ybmVyIG9mIHRoZSBtb3VuZCB3aGlsZQp0aGUgcmVzdCBvZiB0aGUgY3Jvd2Qgc3F1YXJlZCB1cCBjaGVlcmZ1bGx5LiAgQSBGZWVnbGUgbGlrZWQgdG8gZmFjZQplbm9ybW91cyBvZGRzIGFsbCBieSBoaW1zZWxmLCBiZWNhdXNlIGl0IG1lYW50IHlvdSBkaWRuJ3QgaGF2ZSB0byBsb29rCndoZXJlIHlvdSB3ZXJlIGhpdHRpbmcuCgogIFtBIEhhdCBGdWxsIG9mIFNreSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTE0IChwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoKQolcGFzc2FnZSA4ClsuLi5dICBJdCB3YXMgYSBtYWQsIGRlc3BlcmF0ZSBwbGFuLCB3aGljaCB3YXMgdmVyeSBkYW5nZXJvdXMgYW5kIHJpc2t5CmFuZCB3b3VsZCByZXF1aXJlIHRyZW1lbmRvdXMgc3RyZW5ndGggYW5kIGJyYXZlcnkgdG8gbWFrZSBpdCB3b3JrLgoKUHV0IGxpa2UgdGhhdCwgdGhleSBhZ3JlZWQgdG8gaXQgaW5zdGFudGx5LgoKICBbQSBIYXQgRnVsbCBvZiBTa3ksIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDIyNSAobGFzdCBwYXJhZ3JhcGggY29udGludWVzLS10aGV5IGRpZG4ndCB1bmRlcnN0YW5kIHRoZSBjb250ZW50cwojICAgICAgICAgc2luY2UgbW9zdCBwaWN0c2llcyBjYW4ndCByZWFkKQolcGFzc2FnZSA5CiJPaCwgYXllPyIgaGUgc2FpZC4gICJXZSBsb29rZWQgYXQgaGVyIGRpYXJ5IGxvYWRzIG8nIHRpbWVzLiAgTmFlIGhhcm0KZG9uZS4iCgoiWW91IC9sb29rZWQvIGF0IGhlciAvZGlhcnkvPyIgc2FpZCBNaXNzIExldmVsLCBob3JyaWZpZWQuICAiV2h5PyIKClJlYWxseSwgc2hlIHRob3VnaCBsYXRlciwgc2hlIHNob3VsZCBoYXZlIGV4cGVjdGVkIHRoZSBhbnN3ZXIuCgoiQ3V6IGl0IHd1eiBsb2NrZWQsIiBzYWlkIERhZnQgV3VsbGllLiAgIklmIHNoZSBkaWRuYSB3YW50IGFueW9uZSB0YWUgbG9vawphdCBpdCwgd2h5J2Qgc2hlIGtlZXAgaXQgYXQgdGhlIGJhY2sgbycgaGVyIHNvY2sgZHJhd2VyPyAgWy4uLl0iCgogIFtBIEhhdCBGdWxsIG9mIFNreSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjQwIChwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoOyAnZnJhbm5pdCcgaXMgYWNjdXJhdGUpCiVwYXNzYWdlIDEwCiJbLi4uXSAgQWxsIHdlIG5lZWQgdGFlIGRvIGlzIGZyYW5uaXQgYSB3aGVlbHN0b25lIG9uIGl0IGFuZCBpdCdsbCB0YWsnIHVzCnJpZ2h0IHdoZXJlIHNoZSBpcy4iKDEpCgooMSkgSWYgYW55b25lIGtuZXcgd2hhdCB0aGlzIG1lYW50LCB0aGV5J2Qga25vdyBhIGxvdCBtb3JlIGFib3V0IHRoZSBOYWMKTWFjIEZlZWdsZSdzIHdheSBvZiB0cmF2ZWxpbmcuCgogIFtBIEhhdCBGdWxsIG9mIFNreSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMzUxICh0aGUgaGl2ZXIncyBkaWFsb2cgaXMgdGVsZXBhdGhpYy0taW50ZXJuYWwgd291bGQgYmUgbW9yZQojICAgICAgICAgYWNjdXJhdGUtLWFuZCBvY2N1cnMgaW4gaXRhbGljcyB3aXRob3V0IHF1b3RlIG1hcmtzKQolcGFzc2FnZSAxMQpUaWZmYW55IHRvb2sgYSBkZWVwIGJyZWF0aC4gIFRoaXMgd2FzIGFib3V0IHdvcmRzLCBhbmQgc2hlIGtuZXcgYWJvdXQKd29yZHMuICAiSGVyZSBpcyBhIHN0b3J5IHRvIGJlbGlldmUsIiBzaGUgc2FpZC4gICJPbmNlIHdlIHdlcmUgYmxvYnMgaW4KdGhlIHNlYSwgYW5kIHRoZW4gZmlzaGVzLCBhbmQgdGhlbiBsaXphcmRzIGFuZCByYXRzLCBhbmQgdGhlbiBtb25rZXlzLAphbmQgaHVuZHJlZHMgb2YgdGhpbmdzIGluIGJldHdlZW4uICBUaGlzIGhhbmQgd2FzIG9uY2UgYSBmaW4sIHRoaXMgaGFuZApvbmNlIGhhZCBjbGF3cyEgIEluIG15IGh1bWFuIG1vdXRoIEkgaGF2ZSB0aGUgcG9pbnR5IHRlZXRoIG9mIGEgd29sZiBhbmQKdGhlIGNoaXNlbCB0ZWV0aCBvZiBhIHJhYmJpdCBhbmQgdGhlIGdyaW5kaW5nIHRlZXRoIG9mIGEgY293ISAgT3VyIGJsb29kCmlzIGFzIHNhbHR5IGFzIHRoZSBzZWEgd2UgdXNlZCB0byBsaXZlIGluISAgV2hlbiB3ZSdyZSBmcmlnaHRlbmVkLCB0aGUKaGFpciBvbiBvdXIgc2tpbiBzdGFuZHMgdXAsIGp1c3QgbGlrZSBpdCBkaWQgd2hlbiB3ZSBoYWQgZnVyLiAgV2UgL2FyZS8KaGlzdG9yeSEgIEV2ZXJ5dGhpbmcgd2UndmUgZXZlciBiZWVuIG9uIHRoZSB3YXkgdG8gYmVjb21pbmcgdXMsIHdlIHN0aWxsCmFyZS4gIFdvdWxkIHlvdSBsaWtlIHRvIGhlYXIgdGhlIHJlc3Qgb2YgdGhlIHN0b3J5PyIKCi9UZWxsIHVzLywgc2FpZCB0aGUgaGl2ZXIuCgoiSSdtIG1hZGUgdXAgb2YgdGhlIG1lbW9yaWVzIG9mIG15IHBhcmVudHMgYW5kIGdyYW5kcGFyZW50cywgYWxsIG15CmFuY2VzdG9ycy4gIFRoZXkncmUgaW4gdGhlIHdheSBJIGxvb2ssIGluIHRoZSBjb2xvciBvZiBteSBoYWlyLiAgQW5kIEknbQptYWRlIHVwIG9mIGV2ZXJ5b25lIEkndmUgZXZlciBtZXQgd2hvJ3MgY2hhbmdlZCB0aGUgd2F5IEkgdGhpbmsuICBTbyB3aG8KaXMgJ21lJz8iCgogIFtBIEhhdCBGdWxsIG9mIFNreSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiVlIHRpdGxlCiMKIwojCiV0aXRsZSBHb2luZyBQb3N0YWwgKDEzKQolcGFzc2FnZSAxCldoYXQgd2FzIG1hZ2ljLCBhZnRlciBhbGwsIGJ1dCBzb21ldGhpbmcgdGhhdCBoYXBwZW5lZCBhdCB0aGUgc25hcCBvZgphIGZpbmdlcj8gIFdoZXJlIHdhcyB0aGUgbWFnaWMgaW4gdGhhdD8gIEl0IHdhcyBtdW1ibGVkIHdvcmRzIGFuZCB3ZWlyZApkcmF3aW5ncyBpbiBvbGQgYm9va3MgYW5kIGluIHRoZSB3cm9uZyBoYW5kcyBpdCB3YXMgZGFuZ2Vyb3VzIGFzIGhlbGwsCmJ1dCBub3Qgb25lIGhhbGYgYXMgZGFuZ2Vyb3VzIGFzIGl0IGNvdWxkIGJlIGluIHRoZSByaWdodCBoYW5kcy4KCiAgW0dvaW5nIFBvc3RhbCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gNSAoSGFycGVyIFRvcmNoIGVkaXRpb24pCiVwYXNzYWdlIDIKVGhleSBzYXkgdGhhdCB0aGUgcHJvc3BlY3Qgb2YgYmVpbmcgaGFuZ2VkIGluIHRoZSBtb3JuaW5nIGNvbmNlbnRyYXRlcwphIG1hbidzIG1pbmQgd29uZGVyZnVsbHk7IHVuZm9ydHVuYXRlbHksIHdoYXQgdGhlIG1pbmQgaW5ldml0YWJseQpjb25jZW50cmF0ZXMgb24gaXMgdGhhdCwgaW4gdGhlIG1vcm5pbmcsIGl0IHdpbGwgYmUgaW4gYSBib2R5IHRoYXQgaXMKZ29pbmcgdG8gYmUgaGFuZ2VkLgoKICBbR29pbmcgUG9zdGFsLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxOAolcGFzc2FnZSAzClRoZXJlIGlzIGEgc2F5aW5nLCAiWW91IGNhbid0IGZvb2wgYW4gaG9uZXN0IG1hbiwiIHdoaWNoIGlzIG11Y2ggcXVvdGVkCmJ5IHBlb3BsZSB3aG8gbWFrZSBhIHByb2ZpdGFibGUgbGl2aW5nIGJ5IGZvb2xpbmcgaG9uZXN0IG1lbi4gIE1vaXN0Cm5ldmVyIHRyaWVkIGl0LCBrbm93aW5nbHkgYW55d2F5LiAgSWYgeW91IGRpZCBmb29sIGFuIGhvbmVzdCBtYW4sIGhlCnRlbmRlZCB0byBjb21wbGFpbiB0byB0aGUgbG9jYWwgV2F0Y2gsIGFuZCB0aGVzZSBkYXlzIHRoZXkgd2VyZSBoYXJkZXIKdG8gYnV5IG9mZi4gIEZvb2xpbmcgZGlzaG9uZXN0IG1lbiB3YXMgYSBsb3Qgc2FmZXIsIGFuZCBzb21laG93LCBtb3JlCnNwb3J0aW5nLiAgQW5kLCBvZiBjb3Vyc2UsIHRoZXJlIHdlcmUgc28gbWFueSBtb3JlIG9mIHRoZW0uICBZb3UgaGFyZGx5CmhhZCB0byBhaW0uCgogIFtHb2luZyBQb3N0YWwsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDQ3IChwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoOwojICAgICAgICBpdGFsaWNzIGJlY2F1c2UgaXQncyBNb2lzdCB2b24gTGlwd2lnJ3MgaW50ZXJuYWwgbW9ub2xvZykKJXBhc3NhZ2UgNAovV2hhdCBraW5kIG9mIG1hbiB3b3VsZCBwdXQgYSBrbm93biBjcmltaW5hbCBpbiBjaGFyZ2Ugb2YgYSBtYWpvciBicmFuY2gKb2YgZ292ZXJubWVudD8gIEFwYXJ0IGZyb20sIHNheSwgdGhlIGF2ZXJhZ2Ugdm90ZXIuLwoKICBbR29pbmcgUG9zdGFsLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxMzcKJXBhc3NhZ2UgNQpOb3cgaGUgY291bGQgc2VlIHRoZSBteXN0ZXJpb3VzIG9yZGVyIGNsZWFybHkuICBUaGV5IHdlcmUgcm9iZWQsIG9mIGNvdXJzZSwKYmVjYXVzZSB5b3UgY291bGRuJ3QgaGF2ZSBhIHNlY3JldCBvcmRlciB3aXRob3V0IHJvYmVzLiAgVGhleSBoYWQgcHVzaGVkCnRoZSBob29kcyBiYWNrIG5vdywgYW5kIGVhY2ggbWFuKDEpIHdhcyB3ZWFyaW5nIGEgcGVha2VkIGNhcCB3aXRoIGEgYmlyZApza2VsZXRvbiB3aXJlZCB0byBpdC4KCigxKSBXb21lbiBhcmUgYWx3YXlzIHNpZ25pZmljYW50bHkgdW5kZXJyZXByZXNlbnRlZCBpbiBzZWNyZXQgb3JkZXJzLgoKICBbR29pbmcgUG9zdGFsLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxODQgKCdUdWJzbycgYW5kICdCaXNzb25vbXknIGFyZSBhY2N1cmF0ZSkKJXBhc3NhZ2UgNgpKdXN0IGJlbG93IHRoZSBkb21lLCBzdGFyaW5nIGRvd24gZnJvbSB0aGVpciBuaWNoZXMsIHdlcmUgc3RhdHVlcyBvZiB0aGUKVmlydHVlczogIFBhdGllbmNlLCBDaGFzdGl0eSwgU2lsZW5jZSwgQ2hhcml0eSwgSG9wZSwgVHVic28sIEJpc3Nvbm9teSwoMSkKYW5kIEZvcnRpdHVkZS4KCigxKSBNYW55IGN1bHR1cmVzIHByYWN0aWNlIG5laXRoZXIgb2YgdGhlc2UgaW4gdGhlIGh1c3RsZSBhbmQgYnVzdGxlIG9mCnRoZSBtb2Rlcm4gd29ybGQsIGJlY2F1c2Ugbm8gb25lIGNhbiByZW1lbWJlciB3aGF0IHRoZXkgYXJlLgoKICBbR29pbmcgUG9zdGFsLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMjQ5LTI1MCAoTW9pc3QgYW5kIE1pc3MgRGVhcmhlYXJ0IGFyZSBpbiBhIGZhbmN5IHJlc3RhdXJhbnQpCiVwYXNzYWdlIDcKU2hlIGZyb3plLCBzdGFyaW5nIG92ZXIgaGlzIHNob3VsZGVyLiAgSGUgc2F3IGhlciByaWdodCBoYW5kIHNjcmFiYmxlCmZyYW50aWNhbGx5IGFtb25nIHRoZSBjdXRsZXJ5IGFuZCBncmFiIGEga25pZmUuCgoiVGhhdCBiYXN0YXJkIGhhcyBqdXN0IHdhbGtlZCBpbnRvIHRoZSBwbGFjZSEiIHNoZSBoaXNzZWQuICAiUmVhY2hlciBHaWx0IQpJJ2xsIGp1c3Qga2lsbCBoaW0gYW5kIGpvaW4geW91IGZvciB0aGUgcHVkZGluZy4uLiIKCiJZb3UgY2FuJ3QgZG8gdGhhdCEiIGhpc3NlZCBNb2lzdC4KCiJPaD8gIFdoeSBub3Q/IgoKIllvdSdyZSB1c2luZyB0aGUgd3Jvbmcga25pZmUhICBUaGF0J3MgZm9yIHRoZSBmaXNoISAgWW91J2xsIGdldCBpbnRvCnRyb3VibGUhIgoKU2hlIGdsYXJlZCBhdCBoaW0sIGJ1dCBoZXIgaGFuZCByZWxheGVkLCBhbmQgc29tZXRoaW5nIGxpa2UgYSBzbWlsZQphcHBlYXJlZCBvbiBoZXIgZmFjZS4KCiJUaGV5IGRvbid0IGhhdmUgYSBrbmlmZSBmb3Igc3RhYmJpbmcgcmljaCwgbXVyZGVyaW5nIGJhc3RhcmRzPyIgc2hlIHNhaWQuCgoiVGhleSBicmluZyBpdCB0byB0aGUgdGFibGUgd2hlbiB5b3Ugb3JkZXIgb25lLCIgc2FpZCBNb2lzdCB1cmdlbnRseS4KIkxvb2ssIHRoaXMgaXNuJ3QgdGhlIERydW0sIHRoZXkgZG9uJ3QganVzdCB0aHJvdyB0aGUgYm9keSBpbnRvIHRoZSByaXZlciEKVGhleSdsbCBjYWxsIHRoZSBXYXRjaCEgIEdldCBhIGdyaXAuICBOb3Qgb24gYSBrbmlmZSEgIEFuZCBnZXQgcmVhZHkgdG8KcnVuLiIKCiJXaHk/IgoKIkJlY2F1c2UgSSBmb3JnZWQgaGlzIHNpZ25hdHVyZSBvbiBHcmFuZCBUcnVuayBub3RlcGFwZXIgdG8gZ2V0IHVzIGluCmhlcmUsIHRoYXQncyB3aHkuIgoKICBbR29pbmcgUG9zdGFsLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcCAyNjAtMjYxIChNci4gR3JvYXQ6IGVsZGVybHkgcG9zdGFsIGVtcGxveWVlIHJlY2VudGx5IGF0dGFja2VkIGluCiMgICAgICAgICAgICAgdGhlIHBhbGFjaWFsIGJ1dCBzZXZlcmVseSBkaWxhcGlkYXRlZCBwb3N0IG9mZmljZTsKIyAgICAgICAgICAgICAiaGlzIGltYWdpbmF0aW9uIjogTW9pc3QnczsgImhpbSI6IE1yLiBHcm9hdDsgImhlIjogTW9pc3QpCiVwYXNzYWdlIDgKVGhlIHZpc2lvbiBvZiBNci4gR3JvYXQncyBjaGVzdCBrZXB0IGJ1bXBpbmcgaW5zaXN0ZW50bHkgYWdhaW5zdCBoaXMKaW1hZ2luYXRpb24uICBJdCBsb29rZWQgYXMgdGhvdWdoIHNvbWV0aGluZyB3aXRoIGNsYXdzIGhhZCB0YWtlbiBhIHN3aXBlCmF0IGhpbSwgYW5kIG9ubHkgdGhlIHRoaWNrIHVuaWZvcm0gY29hdCBwcmV2ZW50ZWQgaGltIGZyb20gYmVpbmcgb3BlbmVkCmxpa2UgYSBjbGFtLiAgQnV0IHRoYXQgZGlkbid0IHNvdW5kIGxpa2UgYSB2YW1waXJlLiAgVGhleSB3ZXJlbid0IG1lc3N5Cmxpa2UgdGhhdC4gIEl0IHdhcyBhIHdhc3RlIG9mIGdvb2QgZm9vZC4KCk5ldmVydGhlbGVzcywgaGUgcGlja2VkIHVwIGEgcGllY2Ugb2Ygc21hc2hlZCBjaGFpci4gIEl0IGhhZCBzcGxpbnRlcmVkCm5pY2VseS4gIEFuZCB0aGUgbmljZSB0aGluZyBhYm91dCBhIHN0YWtlIHRocm91Z2ggdGhlIGhlYXJ0IHdhcyB0aGF0IGl0CmFsc28gd29ya2VkIG9uIG5vbi12YW1waXJlcy4KCiAgW0dvaW5nIFBvc3RhbCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjYyIChTdGFubGV5LCBhIHlvdW5nIHBvc3RhbCBlbXBsb3llZSB3aG8gY29sbGVjdHMgcGlucywgcmVjZW50bHkKIyAgICAgICAgIGZvdWdodCBvZmYgL3NvbWV0aGluZy8gdXNpbmcgYSBiYWcgb2YgcGlucyBhcyBhIHdlYXBvbikKIyAgICAgICAgIFt0aGlzIHBhc3NhZ2UgZG9lc24ndCBoYXZlIGEgdmVyeSBzYXRpc2ZhY3RvcnkgZW5kaW5nLi4uXQolcGFzc2FnZSA5CllvdSBwcm9iYWJseSBjb3VsZG4ndCAva2lsbC8gYSB2YW1waXJlIHdpdGggcGlucy4uLgoKQW5kIGFmdGVyIGEgdGhvdWdodCBsaWtlIHRoYXQgaXMgd2hlbiB5b3UgcmVhbGl6ZSB0aGF0IGhvd2V2ZXIgaGFyZCB5b3UKdHJ5IHRvIGxvb2sgYmVoaW5kIHlvdSwgdGhlcmUncyBhIGJlaGluZCB5b3UsIGJlaGluZCB5b3UsIHdoZXJlIHlvdSBhcmVuJ3QKbG9va2luZy4gIE1vaXN0IGZsdW5nIGhpcyBiYWNrIHRvIHRoZSBjb2xkIHN0b25lIHdhbGwgd2hlcmUgaGUgc2xpdGhlcmVkCmFsb25nIGl0IHVudGlsIGhlIHJhbiBvdXQgb2Ygd2FsbCBhbmQgYWNxdWlyZWQgYSBkb29yZnJhbWUuCgogIFtHb2luZyBQb3N0YWwsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojcC4gMjc4ICgndGhvdWdodGVkJyBhbmQgJ3Rob3VnaHRpbmcnIGFyZSBhY2N1cmF0ZSkKJXBhc3NhZ2UgMTAKIk9oLCBNci4gTGlwd2lnISIKCkl0IGlzIG5vdCBvZnRlbiB0aGF0IGEgd2FpbGluZyB3b21hbiBydXNoZXMgaW50byBhIHJvb20gYW5kIHRocm93cyBoZXJzZWxmCmF0IGEgbWFuLiAgSXQgaGFkIG5ldmVyIGhhcHBlbmVkIHRvIE1vaXN0IGJlZm9yZS4gIE5vdyBpdCBoYXBwZW5lZCwgYW5kIGl0CnNlZW1lZCBzdWNoIGEgd2FzdGUgdGhhdCB0aGUgd29tYW4gd2FzIE1pc3MgTWFjY2FsYXJpYXQuCgpTaGUgdG90dGVyZWQgZm9yd2FyZCBhbmQgY2x1bmcgdG8gdGhlIHN0YXJ0bGVkIE1vaXN0LCB0ZWFycyBzdHJlYW1pbmcgZG93bgpoZXIgZmFjZS4KCiJPaCwgTXIuIExpcHdpZyEiIHNoZSB3YWlsZWQuICAiT2gsIE1yLiBMaXB3aWchIgoKTW9pc3QgcmVlbGVkIHVuZGVyIGhlciB3ZWlnaHQuICBTaGUgd2FzIGRyYWdnaW5nIGF0IGhpcyBjb2xsYXIgc28gaGFyZAp0aGF0IGhlIHdhcyBsaWtlbHkgdG8gZW5kIHVwIG9uIHRoZSBmbG9vciwgYW5kIHRoZSB0aG91Z2h0IG9mIGJlaW5nIGZvdW5kCm9uIHRoZSBmbG9vciB3aXRoIE1pc3MgTWFjY2FsYXJpYXQgd2FzLS13ZWxsLCBhIHRob3VnaHQgdGhhdCBqdXN0IGNvdWxkbid0CmJlIHRob3VnaHRlZC4gIFRoZSBoZWFkIHdvdWxkIGV4cGxvZGUgYmVmb3JlIHRob3VnaHRpbmcgaXQuCgogIFtHb2luZyBQb3N0YWwsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojcC4gMzE1CiVwYXNzYWdlIDExCkFsd2F5cyByZW1lbWJlciB0aGF0IHRoZSBjcm93ZCB0aGF0IGFwcGxhdWRzIHlvdXIgY29yb25hdGlvbiBpcyB0aGUgc2FtZQpjcm93ZCB0aGF0IHdpbGwgYXBwbGF1ZCB5b3VyIGJlaGVhZGluZy4gIFBlb3BsZSBsaWtlIGEgc2hvdy4KCiAgW0dvaW5nIFBvc3RhbCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMzI2IChob21hZ2UgdG8gIlRvIEhhdmUgYW5kIEhhdmUgTm90IjsgTGF1cmVuIEJhY2FsbCdzIGNoYXJhY3RlciBzYXlzCiMgICAgICAgICB0byBIdW1waHJleSBCb2dhcnQncyBjaGFyYWN0ZXIsICJZb3Uga25vdyBob3cgdG8gd2hpc3RsZSwgZG9uJ3QKIyAgICAgICAgIHlvdSBTdGV2ZT8gIEp1c3QgcHV0IHlvdXIgbGlwcyB0b2dldGhlciBhbmQtLWJsb3cuIgojICAgICAgICAgTWlzcyBEZWFyaGVhcnQncyBzbGlnaHQgcGF1c2Ugc2VlbXMgYmV0dGVyIHBsYWNlZC4uLikKJXBhc3NhZ2UgMTIKTWlzcyBEZWFyaGVhcnQgc3R1YmJlZCBvdXQgaGVyIGNpZ2FyZXR0ZS4gICJHbyB1cCB0aGVyZSB0b25pZ2h0LCBNci4gTGlwd2lnLgpHZXQgeW91cnNlbGYgYSBsaXR0bGUgYml0IGNsb3NlciB0byBoZWF2ZW4uICBBbmQgdGhlbiBnZXQgZG93biBvbiB5b3VyCmtuZWVzIGFuZCBwcmF5LiAgWW91IGtub3cgaG93IHRvIHByYXksIGRvbid0IHlvdT8gIFlvdSBqdXN0IHB1dCB5b3VyIGhhbmRzCnRvZ2V0aGVyLS1hbmQgaG9wZS4iCgogIFtHb2luZyBQb3N0YWwsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDMzMyAoJ2NyYWNrZXJzJyBoYXZlIGJlZW4gc2VuZGluZyBhbmQgcmVjZWl2aW5nIGNsYW5kZXN0aW5lIGNsYWNrcwojICAgICAgICAgbWVzc2FnZXMgd2l0aG91dCBvd25lcnMvb3BlcmF0b3JzIG9mIHRoZSBjbGFja3MgbmV0d29yayBub3RpY2luZykKJXBhc3NhZ2UgMTMKSXQgd2FzIGEgbGl0dGxlIGxpa2Ugc3RlYWxpbmcuICBJdCB3YXMgZXhhY3RseSBsaWtlIHN0ZWFsaW5nLiAgSXQgd2FzLCBpbgpmYWN0LCBzdGVhbGluZy4gIEJ1dCB0aGVyZSB3YXMgbm8gbGF3IGFnYWluc3QgaXQsIGJlY2F1c2Ugbm8gb25lIGtuZXcgdGhlCmNyaW1lIGV4aXN0ZWQsIHNvIGlzIGl0IHJlYWxseSBzdGVhbGluZyBpZiB3aGF0J3Mgc3RvbGVuIGlzbid0IG1pc3NlZD8KQW5kIGlzIGl0IHN0ZWFsaW5nIGlmIHlvdSdyZSBzdGVhbGluZyBmcm9tIHRoaWV2ZXM/ICBBbnl3YXksIGFsbCBwcm9wZXJ0eQppcyB0aGVmdCwgZXhjZXB0IG1pbmUuCgogIFtHb2luZyBQb3N0YWwsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQolZSB0aXRsZQojCiMKIwoldGl0bGUgVGh1ZCEgKDcpCiMgcC4gMzkgKEhhcnBlciBUb3JjaCBlZGl0aW9uOyBwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoOyBzcGVha2VyIGlzIE5vYmJ5KQolcGFzc2FnZSAxCiJXaHkgbWVzcyBhYm91dCB3aXRoIGEgY3VubmluZyBwbGFuIHdoZW4gYSBzaW1wbGUgb25lIHdpbGwgZG8/IgoKICBbVGh1ZCEsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAzMzQtMzM2IChvcmlnaW5hbGx5IHRyYW5zY3JpYmVkIGZyb20gc29tZSBvdGhlciBlZGl0aW9uKQolcGFzc2FnZSAyCkhlIHdhbnRlZCB0byBzbGVlcC4gIEhlJ2QgbmV2ZXIgZmVsdCB0aGlzIHRpcmVkIGJlZm9yZS4gIFZpbWVzIHNsdW1wZWQgdG8KaGlzIGtuZWVzLCBhbmQgdGhlbiBmZWxsIHNpZGV3YXlzIG9uIHRvIHRoZSBzYW5kLgoKV2hlbiBoZSBmb3JjZWQgaGlzIGV5ZXMgb3BlbiwgaGUgc2F3IHBhbGUgc3RhcnMgYWJvdmUgaGltLCBhbmQgaGFkLCBvbmNlCmFnYWluLCB0aGUgc2Vuc2F0aW9uIHRoYXQgdGhlcmUgd2FzIHNvbWVvbmUgZWxzZSBwcmVzZW50LgoKSGUgdHVybmVkIGhpcyBoZWFkLCB3aW5jaW5nIGF0IHRoZSBzdGFiIG9mIHBhaW4sIGFuZCBzYXcgYSBzbWFsbCBidXQKYnJpZ2h0bHkgbGl0IGZvbGRpbmcgY2hhaXIgb24gdGhlIHNhbmQuICBBIHJvYmVkIGZpZ3VyZSB3YXMgcmVjbGluaW5nIGluCml0LCByZWFkaW5nIGEgYm9vay4gIEEgc2N5dGhlIHdhcyBzdHVjayBpbiB0aGUgc2FuZCBiZXNpZGUgaXQuCgpBIHdoaXRlLCBza2VsZXRhbCBoYW5kIHR1cm5lZCBhIHBhZ2UuCgonWW91J2xsIGJlIERlYXRoLCB0aGVuPycgc2FpZCBWaW1lcywgYWZ0ZXIgYSB3aGlsZS4KCkFILCBNSVNURVIgVklNRVMsIEFTVFVURSBBUyBFVkVSLiAgR09UIElUIElOIE9ORSwgc2FpZCBEZWF0aCwgc2h1dHRpbmcgdGhlCmJvb2sgb24gaGlzIGZpbmdlciB0byBrZWVwIHRoZSBwbGFjZS4KCidJJ3ZlIHNlZW4geW91IGJlZm9yZS4nCgpJIEhBVkUgV0FMS0VEIFdJVEggWU9VIE1BTlkgVElNRVMsIE1JU1RFUiBWSU1FUy4KCidBbmQgdGhpcyBpcyAvaXQvLCBpcyBpdD8nCgpIQVMgSVQgTkVWRVIgU1RSVUNLIFlPVSBUSEFUIFRIRSBDT05DRVBUIE9GIEEgV1JJVFRFTiBOQVJSQVRJVkUgSVMgU09NRVdIQVQKU1RSQU5HRT8gc2FpZCBEZWF0aC4KClZpbWVzIGNvdWxkIHRlbGwgd2hlbiBwZW9wbGUgd2VyZSB0cnlpbmcgdG8gYXZvaWQgc29tZXRoaW5nIHRoZXkgcmVhbGx5CmRpZG4ndCB3YW50IHRvIHNheSwgYW5kIGl0IHdhcyBoYXBwZW5pbmcgaGVyZS4KCidJcyBpdD8nIGhlIGluc2lzdGVkLiAgJ0lzIHRoaXMgaXQ/ICBUaGlzIHRpbWUgSSBkaWU/JwoKQ09VTEQgQkUuCgonQ291bGQgYmU/ICBXaGF0IHNvcnQgb2YgYW5zd2VyIGlzIHRoYXQ/JyBzYWlkIFZpbWVzLgoKQSBWRVJZIEFDQ1VSQVRFIE9ORS4gIFlPVSBTRUUsIFlPVSBBUkUgSEFWSU5HIEEgTkVBUi1ERUFUSCBFWFBFUklFTkNFLApXSElDSCBJTkVTQ0FQQUJMWSBNRUFOUyBUSEFUIEkgTVVTVCBVTkRFUkdPIEEgTkVBUi0vVklNRVMvIEVYUEVSSUVOQ0UuCkRPTidUIE1JTkQgTUUuICBDQVJSWSBPTiBXSVRIIFdIQVRFVkVSIFlPVSBXRVJFIERPSU5HLiAgSSBIQVZFIEEgQk9PSy4KClZpbWVzIHJvbGxlZCBvdmVyIG9uIHRvIGhpcyBzdG9tYWNoLCBncml0dGVkIGhpcyB0ZWV0aCwgYW5kIHB1c2hlZCBoaW1zZWxmCm9uIHRvIGhpcyBoYW5kcyBhbmQga25lZXMgYWdhaW4uICBIZSBtYW5hZ2VkIGEgZmV3IHlhcmRzIGJlZm9yZSBzbHVtcGluZwpiYWNrIGRvd24uCgpIZSBoZWFyZCB0aGUgc291bmQgb2YgYSBjaGFpciBiZWluZyBtb3ZlZC4KCidTaG91bGRuJ3QgeW91IGJlIHNvbWV3aGVyZSBlbHNlPycgaGUgc2FpZC4KCkkgQU0sIHNhaWQgRGVhdGgsIHNpdHRpbmcgZG93biBhZ2Fpbi4KCidCdXQgeW91J3JlIGhlcmUhJwoKQVMgV0VMTC4gIERlYXRoIHR1cm5lZCBhIHBhZ2UgYW5kLCBmb3IgYSBwZXJzb24gd2l0aG91dCBicmVhdGgsIG1hbmFnZWQgYQpwcmV0dHkgZ29vZCBzaWdoLiAgSVQgQVBQRUFSUyBUSEFUIFRIRSBCVVRMRVIgRElEIElULgoKJ0RpZCB3aGF0PycKCklUIElTIEEgTUFERS1VUCBTVE9SWS4gIFZFUlkgU1RSQU5HRS4gIEFMTCBPTkUgTkVFRFMgVE8gRE8gSVMgVFVSTiBUTyBUSEUKTEFTVCBQQUdFIEFORCBUSEUgQU5TV0VSIElTIFRIRVJFLiAgV0hBVCwgVEhFUkVGT1JFLCBJUyBUSEUgUE9JTlQgT0YKREVMSUJFUkFURUxZIE5PVCBLTk9XSU5HPwoKSXQgc291bmRlZCBsaWtlIGdpYmJlcmlzaCB0byBWaW1lcywgc28gaGUgaWdub3JlZCBpdC4gIFNvbWUgb2YgdGhlIGFjaGVzCmhhZCBnb25lLCBhbHRob3VnaCBoaXMgaGVhZCBzdGlsbCBoYW1tZXJlZC4gIFRoZXJlIHdhcyBhbiBlbXB0eSBmZWVsaW5nCmV2ZXJ5d2hlcmUuICBIZSBqdXN0IHdhbnRlZCB0byBzbGVlcC4KCiAgW1RodWQhLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMjI1LTIyNgolcGFzc2FnZSAzCkFuZCBJJ20gZ29pbmcgaG9tZSwgVmltZXMgcmVwZWF0ZWQgdG8gaGltc2VsZi4gIEV2ZXJ5b25lIHdhbnRzIHNvbWV0aGluZwpmcm9tIFZpbWVzLCBldmVuIHRob3VnaCBJJ20gbm90IHRoZSBzaGFycGVzdCBrbmlmZSBpbiB0aGUgZHJhd2VyLiAgSGVsbCwKSSdtIHByb2JhYmx5IGEgc3Bvb24uICBXZWxsIEknbSBnb2luZyB0byBiZSBWaW1lcywgYW5kIFZpbWVzIHJlYWRzCi9XaGVyZSdzIE15IENvdz8vIHRvIFlvdW5nIFNhbSBhdCBzaXggbydjbG9jay4gIFdpdGggdGhlIG5vaXNlcyBkb25lIHJpZ2h0LgoKICBbVGh1ZCEsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAyNjEtMjYyCiVwYXNzYWdlIDQKRnJlZCBDb2xvbiBwZWVyZWQgdGhyb3VnaCB0aGUgYmFycy4gIEhlIHdhcywgb24gdGhlIHdob2xlLCBhIHByZXR0eSBnb29kCmphaWxlcjsgaGUgYWx3YXlzIGhhZCBhIHBvdCBvZiB0ZWEgb24gdGhlIGdvLCBoZSB3YXMsIGFzIGEgZ2VuZXJhbCBydWxlLAphbWlhYmx5IGRpc3Bvc2VkIHRvIG1vc3QgcGVvcGxlLCBoZSB3YXMgdG9vIHNsb3cgdG8gYmUgZWFzaWx5IGZvb2xlZCwgYW5kCmhlIGtlcHQgdGhlIGNlbGwga2V5cyBpbiBhIGJveCBpbiB0aGUgYm90dG9tIGRyYXdlciBvZiBoaXMgZGVzaywgYSBsb25nCndheSBvdXQgb2YgcmVhY2ggb2YgYW55IHN0aWNrLCBoYW5kLCBkb2csIGN1bm5pbmdseSB0aHJvd24gYmVsdCwgb3IKdHJhaW5lZCBLbGF0Y2hpYW4gbW9ua2V5IHNwaWRlci4oMSkKCigxKSBNYWtpbmcgRnJlZCBDb2xvbiBwb3NzaWJseSB1bmlxdWUgaW4gdGhlIGFubmFscyBvZiBqYWlsIGhpc3RvcnkuCgogIFtUaHVkISwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjg3IChBbWVyaWNhbiBzcGVsbGluZyBvZiAndGhlYXRlcicgaXMgYWNjdXJhdGUgW0hhcnBlciBUb3JjaCBlZGl0aW9uXSkKJXBhc3NhZ2UgNQpCcnVzaGluZyBhc2lkZSBjb2J3ZWJzIHdpdGggb25lIGhhbmQgYW5kIGhvbGRpbmcgdXAgYSBsYW50ZXJuIHdpdGggdGhlCm90aGVyLCBTeWJpbCBsZWQgdGhlIHdheSBwYXN0IGJveGVzIG9mIE1FTidTIEJPT1RTLCBWQVJJT1VTOyBSSVNJQkxFClBVUFBFVFMsIFNUUklORyAmIEdMT1ZFOyBNT0RFTCBUSEVBVEVSIEFORCBTQ0VORVJZLiAgTWF5YmUgdGhhdCB3YXMgdGhlCnJlYXNvbiBmb3IgdGhlaXIgd2VhbHRoOiB0aGV5IGJvdWdodCB0aGluZ3MgdGhhdCB3ZXJlIGJ1aWx0IHRvIGxhc3QsIGFuZApub3cgdGhleSBzZWxkb20gaGFkIHRvIGJ1eSBhbnl0aGluZyBhdCBhbGwuICBFeGNlcHQgZm9vZCwgb2YgY291cnNlLCBhbmQKZXZlbiB0aGVuIFZpbWVzIHdvdWxkIG5vdCBoYXZlIGJlZW4gc3VycHJpc2VkIHRvIHNlZSBib3hlcyBsYWJlbGVkIEFQUExFCkNPUkVTLCBWQVJJT1VTLCBvciBMRUZUT1ZFUlMsIE5FRUQgRUFUSU5HIFVQLigxKQoKKDEpIFRoYXQgd2FzIGEgcGhyYXNlIG9mIFN5YmlsJ3MgdGhhdCBnb3QgdG8gaGltLiAgU2hlJ2QgYW5ub3VuY2UgYXQgbHVuY2gsCiJ3ZSBtdXN0IGhhdmUgdGhlIHBvcmsgdG9uaWdodCwgaXQgbmVlZHMgZWF0aW5nIHVwLiIgIFZpbWVzIG5ldmVyIGhhZCBhbgphY3R1YWwgcHJvYmxlbSB3aXRoIHRoaXMsIGJlY2F1c2UgaGUnZCBiZWVuIHJhaXNlZCB0byBlYXQgd2hhdCB3YXMgcHV0IGluCmZyb250IG9mIGhpbSwgYW5kIGRvIGl0IHF1aWNrbHksIHRvbywgYmVmb3JlIHNvbWVvbmUgZWxzZSBzbmF0Y2hlZCBpdCBhd2F5LgpIZSB3YXMganVzdCBwdXp6bGVkIGF0IHRoZSBzdWdnZXN0aW9uIHRoYXQgaGUgd2FzIHRoZXJlIHRvIGRvIHRoZSBmb29kIGEKZmF2b3IuCgogIFtUaHVkISwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDI5Ni0yOTcKJXBhc3NhZ2UgNgoiVGVsbCBtZSBEcnVta25vdHQsIGFyZSB5b3UgYSBiZXR0aW5nIG1hbiBhdCBhbGw/IgoKIkkgaGF2ZSBiZWVuIGtub3cgdG8gaGF2ZSB0aGUgb2NjYXNpb25hbCAnbGl0dGxlIGZsdXR0ZXIsJyBzaXIuIgoKIkdpdmVuLCB0aGVuLCBhIGNvbnRlc3QgYmV0d2VlbiBhbiBpbnZpc2libGUgYW5kIHZlcnkgcG93ZXJmdWwgcXVhc2lkZW1vbmljCi90aGluZy8gb2YgcHVyZSB2ZW5nZWFuY2Ugb24gdGhlIG9uZSBoYW5kLCBhbmQgdGhlIGNvbW1hbmRlciBvbiB0aGUgb3RoZXIsCndoZXJlIHdvdWxkIHlvdSB3YWdlciwgc2F5Li4uIG9uZSBkb2xsYXI/IgoKIkkgd291bGRuJ3QsIHNpci4gIFRoYXQgbG9va3MgbGlrZSBvbmUgdGhhdCB3b3VsZCBnbyB0byB0aGUganVkZ2VzLiIKCiJZZXMsIiBzYWlkIFZldGluYXJpLCBzdGFyaW5nIHRob3VnaHRmdWxseSBhdCB0aGUgY2xvc2VkIGRvb3IuICAiWWVzLAovaW5kZWVkLy4iCgogIFtUaHVkISwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMzUxICgndGVldGgtYWNoaW5nJyBwcm9iYWJseSBvdWdodCB0byBoYXZlIGJlZW4gJ3RlZXRoLWFjaGluZ2x5JykKJXBhc3NhZ2UgNwpWaW1lcyByZWFjaGVkIHVwIGFuZCB0b29rIGEgbXVnIG9mIHdhdGVyIGZyb20gQW5ndWEuICBJdCB3YXMgdGVldGgtYWNoaW5nCmNvbGQgYW5kIHRoZSBiZXN0IGRyaW5rIGhlJ2QgZXZlciB0YXN0ZWQuICBBbmQgaGlzIG1pbmQgd29ya2VkIGZhc3QsIGZseWluZwppbiBlbWVyZ2VuY3kgc3VwcGxpZXMgb2YgY29tbW9uIHNlbnNlLCBhcyBodW1hbiBtaW5kcyBkbywgdG8gY29uc3RydWN0IGEKaHVnZSBhbmNob3IgaW4gc2FuaXR5IGFuZCBwcm92ZSB0aGF0IHdoYXQgaGFwcGVuZWQgaGFkbid0IHJlYWxseSBoYXBwZW5lZAphbmQsIGlmIGl0IGhhZCBoYXBwZW5lZCwgaGFkbid0IGhhcHBlbmVkIHZlcnkgbXVjaC4KCkl0IHdhcyBhbGwgbXlzdGljLCB0aGF0J3Mgd2hhdCBpdCB3YXMuICBPaCwgaXQgL21pZ2h0LyBhbGwgYmUgdHJ1ZSwgYnV0IGhvdwpjb3VsZCB5b3UgZXZlciB0ZWxsPyAgWW91IGhhZCB0byBzdGljayB0byB0aGUgdGhpbmdzIHlvdSBjYW4gc2VlLiAgQW5kIHlvdQpoYWQgdG8ga2VlcCByZW1pbmRpbmcgeW91cnNlbGYgb2YgdGhhdCwgdG9vLgoKWWVhaCwgdGhhdCB3YXMgaXQuICBXaGF0IGhhZCByZWFsbHkgaGFwcGVuZWQsIGVoPyAgQSBmZXcgc2lnbnM/ICBXZWxsLAphbnl0aGluZyBjYW4gbG9vayBsaWtlIHlvdSB3YW50IGl0IHRvLCBpZiB5b3UncmUgd29ycmllZCBhbmQgY29uZnVzZWQKZW5vdWdoLCB5ZXM/ICBBIHNoZWVwIGNhbiBsb29rIGxpa2UgYSBjb3csIHJpZ2h0PyAgSGEhCgogIFtUaHVkISwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiVlIHRpdGxlCiMKIwojCiV0aXRsZSBXaW50ZXJzbWl0aCAoMTYpCiMgcC4gODIgKEhhcnBlclRlZW4gZWRpdGlvbi0tcHJlc3VtYWJseSBIYXJwZXJUZW1wZXN0IHN1ZmZlcmVkIGEgbmFtZSBjaGFuZ2UpCiVwYXNzYWdlIDEKVGhhdCdzIFRoaXJkIFRob3VnaHRzIGZvciB5b3UuICBXaGVuIGEgaHVnZSByb2NrIGlzIGdvaW5nIHRvIGxhbmQgb24geW91cgpoZWFkLCB0aGV5J3JlIHRoZSB0aG91Z2h0cyB0aGF0IHRoaW5rOiAgSXMgdGhhdCBhbiBpZ25lb3VzIHJvY2ssIHN1Y2ggYXMKZ3Jhbml0ZSwgb3IgaXMgaXQgc2FuZHN0b25lPwoKICBbV2ludGVyc21pdGgsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQpwLiAxMTMKJXBhc3NhZ2UgMgpUaGV5IHNheSB0aGF0IHRoZXJlIGNhbiBuZXZlciBiZSB0d28gc25vd2ZsYWtlcyB0aGF0IGFyZSBleGFjdGx5IGFsaWtlLCBidXQKaGFzIGFueW9uZSBjaGVja2VkIGxhdGVseT8KCiAgW1dpbnRlcnNtaXRoLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMzItMzMKJXBhc3NhZ2UgMwpBbGwgd2l0Y2hlcyBhcmUgYSBiaXQgb2RkLiAgVGlmZmFueSBoYWQgZ290IHVzZWQgdG8gb2RkLCBzbyB0aGF0IG9kZCBzZWVtZWQKcXVpdGUgbm9ybWFsLiAgVGhlcmUgd2FzIE1pc3MgTGV2ZWwsIGZvciBleGFtcGxlLCB3aG8gaGFkIHR3byBib2RpZXMsCmFsdGhvdWdoIG9uZSBvZiB0aGVtIHdhcyBpbWFnaW5hcnkuICBNaXN0cmVzcyBQdWxsdW5kZXIsIHdobyBicmVkIHBlZGlncmVlZAplYXJ0aHdvcm1zIGFuZCBnYXZlIHRoZW0gYWxsIG5hbWVzLi4uIHdlbGwsIHNoZSB3YXMgaGFyZGx5IG9kZCBhdCBhbGwsIGp1c3QKYSBiaXQgcGVjdWxpYXIsIGFuZCBhbnl3YXkgZWFydGh3b3JtcyB3ZXJlIHF1aXRlIGludGVyZXN0aW5nIGluIGEgYmFzaWNhbGx5CnVuaW50ZXJlc3Rpbmcga2luZCBvZiB3YXkuICBBbmQgdGhlcmUgaGFkIGJlZW4gT2xkIE1vdGhlciBEaXNtYXNzLCB3aG8Kc3VmZmVyZWQgZnJvbSBib3V0cyBvZiB0ZW1wb3JhbCBjb25mdXNpb24sIHdoaWNoIGNhbiBiZSBxdWl0ZSBzdHJhbmdlIHdoZW4KaXQgaGFwcGVucyB0byBhIHdpdGNoOyBoZXIgbW91dGggbmV2ZXIgbW92ZWQgaW4gdGltZSB3aXRoIGhlciB3b3JkcywgYW5kCnNvbWV0aW1lcyBoZXIgZm9vdHN0ZXBzIGNhbWUgZG93biB0aGUgc3RhaXJzIHRlbiBtaW51dGVzIGJlZm9yZSBzaGUgZGlkLgoKQnV0IHdoZW4gaXQgY2FtZSB0byBvZGQsIE1pc3MgVHJlYXNvbiBkaWRuJ3QganVzdCB0YWtlIHRoZSBjYWtlLCBidXQgYQpwYWNrZXQgb2YgYmlzY3VpdHMgdG9vLCB3aXRoIHNwcmlua2xlcyBvbiB0aGUgdG9wLCBhbmQgYWxzbyBhIGNhbmRsZS4KCiAgW1dpbnRlcnNtaXRoLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAzNCAoJ3ZpbGxhZ2VzJzogcGx1cmFsIGlzIGFjY3VyYXRlOyAnY2xvbmstY2xhbmsnIGlzIHJlbmRlcmVkIGJvbGQpCiVwYXNzYWdlIDQKVGhlbiB0aGVyZSB3YXMgaGVyIGNsb2NrLiAgSXQgd2FzIGhlYXZ5IGFuZCBtYWRlIG9mIHJ1c3R5IGlyb24gYnkgc29tZW9uZQp3aG8gd2FzIG1vcmUgYmxhY2tzbWl0aCB0aGFuIHdhdGNobWFrZXIsIHdoaWNoIHdhcyB3aHkgaXQgd2VudAoqY2xvbmstY2xhbmsqIGluc3RlYWQgb2YgL3RpY2stdG9jay8uICBTaGUgd29yZSBpdCBvbiBoZXIgYmVsdCBhbmQgY291bGQKdGVsbCB0aGUgdGltZSBieSBmZWVsaW5nIHRoZSBzdHViYnkgbGl0dGxlIGhhbmRzLgoKVGhlcmUgd2FzIGEgc3RvcnkgaW4gdGhlIHZpbGxhZ2VzIHRoYXQgdGhlIGNsb2NrIHdhcyBNaXNzIFRyZWFzb24ncyBoZWFydCwKd2hpY2ggc2hlJ2QgdXNlZCBldmVyIHNpbmNlIGhlciBmaXJzdCBoZWFydCBkaWVkLiAgQnV0IHRoZXJlIHdlcmUgbG90cyBvZgpzdG9yaWVzIGFib3V0IE1pc3MgVHJlYXNvbi4KCiAgW1dpbnRlcnNtaXRoLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiA0MCAoQm9mZm8pCiVwYXNzYWdlIDUKRmlyc3QgU2lnaHQgYW5kIFNlY29uZCBUaG91Z2h0cywgdGhhdCdzIHdoYXQgYSB3aXRjaCBoYWQgdG8gcmVseSBvbjogRmlyc3QKU2lnaHQgdG8gc2VlIHdoYXQncyByZWFsbHkgdGhlcmUsIGFuZCBTZWNvbmQgVGhvdWdodHMgdG8gd2F0Y2ggdGhlIEZpcnN0ClRob3VnaHRzIHRvIGNoZWNrIHRoYXQgdGhleSB3ZXJlIHRoaW5raW5nIHJpZ2h0LiAgVGhlbiB0aGVyZSB3ZXJlIHRoZQpUaGlyZCBUaG91Z2h0cywgd2hpY2ggVGlmZmFueSBoYWQgbmV2ZXIgaGVhcmQgZGlzY3Vzc2VkIGFuZCB0aGVyZWZvcmUga2VwdApxdWlldCBhYm91dDsgdGhleSB3ZXJlIG9kZCwgc2VlbWVkIHRvIHRoaW5rIGZvciB0aGVtc2VsdmVzLCBhbmQgZGlkbid0CnR1cm4gdXAgdmVyeSBvZnRlbi4gIEFuZCB0aGV5IHdlcmUgdGVsbGluZyBoZXIgdGhhdCB0aGVyZSB3YXMgbW9yZSB0byBNaXNzClRyZWFzb24gdGhhbiBtZXQgdGhlIGV5ZS4KCiAgW1dpbnRlcnNtaXRoLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gNTMtNTQgKGluIENhcnBlIEp1Z3VsdW0sIG1vc3Qgb2YgdGhlIGxvcmUgW2ZvciBodW1hbnNdIGFib3V0IGhvdyB0byBraWxsCiMgICAgICAgICAgICB2YW1waXJlcyBoYWQgYmVlbiB3cml0dGVuIGJ5IGxvbmctbGl2ZWQvbG9uZy1ub3QtZGVmdW5jdCB2YW1waXJlcwojICAgICAgICAgICAgW21lYW5pbmcgdGhhdCBpdCB3YXMgZGVsaWJlcmF0ZWx5IGZ1bGwgb2YgaW5hY2N1cmFjaWVzLi4uXSkKJXBhc3NhZ2UgNgpJdCB3YXMgaW4gZmFjdCBNaXNzIFRpY2sgd2hvIGhhZCB3cml0dGVuIC9XaXRjaCBIdW50aW5nIGZvciBEdW1iIFBlb3BsZS8sCmFuZCBzaGUgbWFkZSBzdXJlIHRoYXQgY29waWVzIG9mIGl0IGZvdW5kIHRoZWlyIHdheSBpbnRvIHRob3NlIGFyZWFzIHdoZXJlCnBlb3BsZSBzdGlsbCBiZWxpZXZlZCB0aGF0IHdpdGNoZXMgc2hvdWxkIGJlIGJ1cm5lZCBvciBkcm93bmVkLgoKU2luY2UgdGhlIG9ubHkgd2l0Y2ggZXZlciBsaWtlbHkgdG8gcGFzcyB0aHJvdWdoIHRoZXNlIGRheXMgd2FzIE1pc3MgVGljawpoZXJzZWxmLCBpdCBtZWFudCB0aGF0IGlmIHRoaW5ncyBkaWQgZ28gd3JvbmcsIHNoZSdkIGdldCBhIGdvb2QgbmlnaHQncwpzbGVlcCBhbmQgYSBkZWNlbnQgbWVhbCBiZWZvcmUgYmVpbmcgdGhyb3duIGludG8gdGhlIHdhdGVyLiAgVGhlIHdhdGVyIHdhcwpubyBwcm9ibGVtIGF0IGFsbCBmb3IgTWlzcyBUaWNrLCB3aG8gaGFkIGJlZW4gdG8gdGhlIFF1aXJtIENvbGxlZ2UgZm9yCllvdW5nIExhZGllcywgd2hlcmUgeW91IGhhZCB0byBoYXZlIGFuIGljeSBkaXAgZXZlcnkgbW9ybmluZyB0byBidWlsZCBNb3JhbApGaWJlci4gIEFuZCBhIE5vLiAxIEJvc3VuJ3Mga25vdCB3YXMgdmVyeSBlYXN5IHRvIHVuZG8gd2l0aCB5b3VyIHRlZXRoLApldmVuIHVuZGVyd2F0ZXIuCgogIFtXaW50ZXJzbWl0aCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDU1LTU2CiVwYXNzYWdlIDcKV29ya2luZyBxdWlja2x5LCBzaGUgZW1wdGllZCBoZXIgcG9ja2V0cyBhbmQgc3RhcnRlZCBhIHNoYW1ibGUuCgpTaGFtYmxlcyB3b3JrZWQuICBUaGF0IHdhcyBhYm91dCBhbGwgeW91IGNvdWxkIHNheSBhYm91dCB0aGVtIGZvciBjZXJ0YWluLgpZb3UgbWFkZSB0aGVtIG91dCBvZiBzb21lIHN0cmluZyBhbmQgYSBjb3VwbGUgb2Ygc3RpY2tzIGFuZCBhbnl0aGluZyB5b3UKaGFkIGluIHlvdXIgcG9ja2V0IGF0IHRoZSB0aW1lLiAgVGhleSB3ZXJlIGEgd2l0Y2gncyBlcXVpdmFsZW50IG9mIHRob3NlCmtuaXZlcyB3aXRoIGZpZnRlZW4gYmxhZGVzIGFuZCB0aHJlZSBzY3Jld2RyaXZlcnMgYW5kIGEgdGlueSBtYWduaWZ5aW5nCmdsYXNzIGFuZCBhIHRoaW5nIGZvciBleHRyYWN0aW5nIGVhcndheCBmcm9tIGNoaWNrZW5zLgoKWW91IGNvdWxkbid0IGV2ZW4gc2F5IHByZWNpc2VseSB3aGF0IHRoZXkgZGlkLCBhbHRob3VnaCBNaXNzIFRpY2sgdGhvdWdodAp0aGF0IHRoZXkgd2VyZSBhIHdheSBvZiBmaW5kaW5nIG91dCB3aGF0IHRoaW5ncyB0aGUgaGlkZGVuIGJpdHMgb2YgeW91cgpvd24gbWluZCBhbHJlYWR5IGtuZXcuICBZb3UgaGFkIHRvIG1ha2UgYSBzaGFtYmxlIGZyb20gc2NyYXRjaCBldmVyeSB0aW1lLAphbmQgb25seSBmcm9tIHRoaW5ncyBpbiB5b3VyIHBvY2tldHMuICBUaGVyZSB3YXMgbm8gaGFybSBpbiBoYXZpbmcKaW50ZXJlc3RpbmcgdGhpbmdzIGluIHlvdXIgcG9ja2V0cywgdGhvdWdoLCBqdXN0IGluIGNhc2UuCgogIFtXaW50ZXJzbWl0aCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gNjkKJXBhc3NhZ2UgOApBIHdpdGNoIGRpZG4ndCBkbyB0aGluZ3MgYmVjYXVzZSB0aGV5IHNlZW1lZCBsaWtlIGEgZ29vZCBpZGVhIGF0IHRoZSB0aW1lIQpUaGF0IHdhcyBwcmFjdGljYWxseSBjYWNrbGluZyEgIFlvdSBoYWQgdG8gZGVhbCBldmVyeSBkYXkgd2l0aCBwZW9wbGUgd2hvCndlcmUgZm9vbGlzaCBhbmQgbGF6eSBhbmQgdW50cnV0aGZ1bCBhbmQgZG93bnJpZ2h0IHVucGxlYXNhbnQsIGFuZCB5b3UKY291bGQgY2VydGFpbmx5IGVuZCB1cCB0aGlua2luZyB0aGF0IHRoZSB3b3JsZCB3b3VsZCBiZSBjb25zaWRlcmFibHkKaW1wcm92ZWQgaWYgeW91IGdhdmUgdGhlbSBhIHNsYXAuICBCdXQgeW91IGRpZG4ndCBiZWNhdXNlLCBhcyBNaXNzIFRpY2sKaGFkIG9uY2UgZXhwbGFpbmVkOiBhKSBpdCB3b3VsZCBtYWtlIHRoZSB3b3JsZCBhIGJldHRlciBwbGFjZSBmb3Igb25seSBhCnZlcnkgc2hvcnQgcGVyaW9kIG9mIHRpbWU7IGIpIGl0IHdvdWxkIHRoZW4gbWFrZSB0aGUgd29ybGQgYSBzbGlnaHRseQp3b3JzZSBwbGFjZTsgYW5kIGMpIHlvdSdyZSBub3Qgc3VwcG9zZWQgdG8gYmUgYXMgc3R1cGlkIGFzIHRoZXkgYXJlLgoKICBbV2ludGVyc21pdGgsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDEwNiAoUm9iIEFueWJvZHkgaXMgbWFycmllZCB0byB0aGVpciBrZWxkYSwgcnVsZXIgb2YgdGhlIGNsYW47CiMgICAgICAgICBwYXNzYWdlIGNvbnRpbnVlcyB3aXRoIHRocmVlIG9yIHNvIHBhZ2VzIGFib3V0IEV4cGxhaW5pbmcKIyAgICAgICAgIFtmb2N1c2luZyBvbiB0aGUgcmVhY3Rpb25zIG9mIHRoZSByZWNpcGllbnQgb2YgdGhlIGV4cGxhbmF0aW9uOgojICAgICAgICAgUHVyc2luJyBvJyB0aGUgTGlwczsgRm9sZGluJyBvJyB0aGUgQXJtczsgVGFwcGluJyBvJyB0aGUgRmVldHM7CiMgICAgICAgICBhbmQgYWxzbyB0aGUgcmVhY3Rpb25zIG9mIHRoZSBsaXN0ZW5pbmcgRmVlZ2xlcyBhcyB0aGV5IGhlYXIKIyAgICAgICAgIGFib3V0IHRoZW1dIGJ1dCB3b3VsZCBlbmQgdXAgb24gdGhlIGxvbmcgc2lkZSBpZiBpbmNsdWRlZCBoZXJlKQolcGFzc2FnZSA5CiJBeWUsIGJ1dCB0aGUgYm95IHdpbGxuYSBiZSBpbnRlcmVzdGVkIGluIG1hcnJ5aW4nLCIgc2FpZCBTbGlnaHRseSBNYWQKQW5ndXMuCgoiSGUgbWlnaHQgYmUgb25lIGRheSwiIHNhaWQgQmlsbHkgQmlnY2hpbiwgd2hvJ2QgbWFkZSBhIGhvYmJ5IG9mIHdhdGNoaW5nCmh1bWFucy4gICJNb3N0IGJpZ2pvYiBtZW4gZ2V0IG1hcnJpZWQuIgoKIlRoZXkgZG8/IiBzYWlkIGEgRmVlZ2xlIGluIGFzdG9uaXNobWVudC4KCiJPaCwgYXllLiIKCiJUaGV5IHdhbnQgdGFlIGdldCBtYXJyaWVkPyIKCiJBIGxvdCBvJyB0aGVtIGRvLCBheWUsIiBzYWlkIEJpbGx5LgoKIlNvIHRoZXJlJ3MgbmFlIG1vcmUgZHJpbmtpbicsIGFuZCBzdGVhbGluJywgYW5kIGZpZ2h0aW4nPyIKCiJIZXksIGFoJ20gc3RpbGwgYWxsb3dlZCBzb21lIGRyaW5raW4nIGFuZCBzdGVhbGluJyBhbmQgZmlnaHRpbichIiBzYWlkClJvYiBBbnlib2R5LgoKIkF5ZSwgUm9iLCBidXQgd2UgY2FubmEgaGVscCBub3RpY2luJyB5ZSBhbHNvIGhhdmUgdGFlIGRvIHRoZSBFeHBsYWluaW4nLAp0b28uIiBzYWlkIERhZnQgV3VsbGllLgoKVGhlcmUgd2FzIGEgZ2VuZXJhbCBub2RkaW5nIGZyb20gdGhlIGNyb3dkLiAgVG8gRmVlZ2xlcywgRXhwbGFpbmluZyB3YXMgYQpkYXJrIGFydC4gIEl0IHdhcyBqdXN0IHNvIC9oYXJkLy4KCiAgW1dpbnRlcnNtaXRoLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMTI2LTEyNyAocGFzc2FnZSBzdGFydHMgbWlkLXBhcmFncmFwaDsKIyAgICAgICAgICAgICAgd2l0Y2hlcyBrbm93IGluIGFkdmFuY2Ugd2hlbiB0aGV5J3JlIGdvaW5nIHRvIGRpZSkKJXBhc3NhZ2UgMTAKIlsuLi5dICBXZSBzaGFsbCBob2xkIHRoZSBmdW5lcmFsIHRvbW9ycm93IGFmdGVybm9vbi4iCgoiU29ycnk/ICBZb3UgbWVhbiAvYmVmb3JlLyB5b3UgZGllPyIgc2FpZCBUaWZmYW55LgoKIldoeSwgb2YgY291cnNlISAgSSBkb24ndCBzZWUgd2h5IEkgc2hvdWxkbid0IGhhdmUgc29tZSBmdW4hIgoKIkdvb2QgdGhpbmtpbichIiBzYWlkIFJvYiBBbnlib2R5LiAgIlRoYXQncyB0aGUga2luZCBvJyBzZW5zaWJsZSBkZXRhaWwKcGVvcGxlIHVzdWFsbHkgZmFpbHMgdGFlIGNvbnNpZGVyLiIKCiJXZSBjYWxsIGl0IGEgZ29pbmctYXdheSBwYXJ0eSwiIHNhaWQgTWlzcyBUcmVhc29uLiAgIkp1c3QgZm9yIHdpdGNoZXMsIG9mCmNvdXJzZS4gIE90aGVyIHBlb3BsZSB0ZW5kIHRvIGdldCBhIGJpdCBuZXJ2b3VzLS1JIGNhbid0IHRoaW5rIHdoeS4gIEFuZApvbiB0aGUgYnJpZ2h0IHNpZGUsIHdlJ3ZlIGdvdCB0aGF0IHNwbGVuZGlkIGhhbSB0aGF0IE1yLiBBcm1iaW5kZXIgZ2F2ZSB1cwpsYXN0IHdlZWsgZm9yIHNldHRsaW5nIHRoZSBvd25lcnNoaXAgb2YgdGhlIGNoZXN0bnV0IHRyZWUsIGFuZCBJJ2QgbG92ZSB0bwp0cnkgaXQuIgoKICBbV2ludGVyc21pdGgsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDEyOQolcGFzc2FnZSAxMQpTb21lIHBlb3BsZSB0aGluayB0aGF0ICJjb3ZlbiIgaXMgYSB3b3JkIGZvciBhIGdyb3VwIG9mIHdpdGNoZXMsIGFuZCBpdCdzCnRydWUgdGhhdCdzIHdoYXQgdGhlIGRpY3Rpb25hcnkgc2F5cy4gIEJ1dCB0aGUgcmVhbCB3b3JkIGZvciBhIGdyb3VwIG9mCndpdGNoZXMgaXMgYW4gImFyZ3VtZW50LiIKCiAgW1dpbnRlcnNtaXRoLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMTc0LTE3NSAocGFzc2FnZSBzdGFydHMgbWlkLXBhcmFncmFwaDsgbGFzdCBwYXJhZ3JhcGggY29udGludWVzLCBidXQKIyAgICAgICAgICBjaGFuZ2VzIHRvcGljIHNvIGFicnVwdGx5IFRpZmZhbnkgZ2FzcHM7ICdydW1idXN0aW91cycgaXMgYWNjdXJhdGUpCiVwYXNzYWdlIDEyCiJbLi4uXSAgQW5kIG5vdyBJIHNoYWxsIHRlbGwgeW91IHNvbWV0aGluZyB2aXRhbGx5IGltcG9ydGFudC4gIEl0IGlzIHRoZQpzZWNyZXQgb2YgbXkgbG9uZyBsaWZlLiIKCkFoLCB0aG91Z2h0IFRpZmZhbnksIGFuZCBzaGUgbGVhbmVkIGZvcndhcmQuCgoiVGhlIGltcG9ydGFudCB0aGluZywiIHNhaWQgTWlzcyBUcmVhc29uLCAiaXMgdG8gc3RheSB0aGUgcGFzc2FnZSBvZiB0aGUKd2luZC4gIFlvdSBzaG91bGQgYXZvaWQgcnVtYnVzdGlvdXMgZnJ1aXRzIGFuZCB2ZWdldGFibGVzLiAgQmVhbnMgYXJlIHRoZQp3b3JzdCwgdGFrZSBpdCBmcm9tIG1lLiIKCiJJIGRvbid0IHRoaW5rIEkgdW5kZXJzdGFuZC0tIiBUaWZmYW55IGJlZ2FuLgoKIlRyeSBub3QgdG8gZmFydCwgaW4gYSBudXRzaGVsbC4iCgoiSW4gYSBudXRzaGVsbCwgSSBpbWFnaW5lIGl0IHdvdWxkIGJlIHByZXR0eSB1bnBsZWFzYW50ISIgc2FpZCBUaWZmYW55Cm5lcnZvdXNseS4gIFNoZSBjb3VsZG4ndCBiZWxpZXZlIHNoZSB3YXMgYmVpbmcgdG9sZCB0aGlzLgoKIlRoaXMgaXMgbm8gam9raW5nIG1hdHRlciwiIHNhaWQgTWlzcyBUcmVhc29uLiAgIlRoZSBodW1hbiBib2R5IGhhcyBvbmx5CnNvIG11Y2ggYWlyIGluIGl0LiAgWW91IGhhdmUgdG8gbWFrZSBpdCBsYXN0LiAgT25lIHBsYXRlIG9mIGJlYW5zIGNhbiB0YWtlCmEgeWVhciBvZmYgeW91ciBsaWZlLiAgSSBoYXZlIGF2b2lkZWQgcnVtYnVzdGlvdXNuZXNzIGFsbCBteSBkYXlzLiAgSSBhbQphbiBvbGQgcGVyc29uIGFuZCB0aGF0IG1lYW5zIHdoYXQgSSBzYXkgaXMgd2lzZG9tISIgIFNoZSBnYXZlIHRoZQpiZXdpbGRlcmVkIFRpZmZhbnkgYSBzdGVybiBsb29rLiAgIkRvIHlvdSB1bmRlcnN0YW5kLCBjaGlsZD8iCgpUaWZmYW55J3MgbWluZCByYWNlZC4gIEV2ZXJ5dGhpbmcgaXMgYSB0ZXN0ISAgIk5vLCIgc2hlIHNhaWQuICAiSSdtIG5vdCBhCmNoaWxkIGFuZCB0aGF0J3Mgbm9uc2Vuc2UsIG5vdCB3aXNkb20hIgoKVGhlIHN0ZXJuIGxvb2sgY3JhY2tlZCBpbnRvIGEgc21pbGUuICAiWWVzLCIgc2FpZCBNaXNzIFRyZWFzb24uICAiVG90YWwKZ2liYmVyaXNoLiAgQnV0IHlvdSd2ZSBnb3QgdG8gYWRtaXQgaXQncyBhIGNvcmtlciwgYWxsIHRoZSBzYW1lLCByaWdodD8KWW91IGRlZmluaXRlbHkgYmVsaWV2ZWQgaXQsIGp1c3QgZm9yIGEgbW9tZW50PyAgVGhlIHZpbGxhZ2VycyBkaWQgbGFzdAp5ZWFyLiAgWW91IHNob3VsZCBoYXZlIHNlZW4gdGhlIHdheSB0aGV5IHdhbGtlZCBhYm91dCBmb3IgYSBmZXcgd2Vla3MhClRoZSBzdHJhaW5lZCBsb29rcyBvbiB0aGVpciBmYWNlcyBxdWl0ZSBjaGVlcmVkIG1lIHVwISAgWy4uLl0iCgogIFtXaW50ZXJzbWl0aCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTg1IChNaXNzIFRyZWFzb24gdGVsbHMgcGVvcGxlIHNoZSdzIDExMywgYnV0IHNoZSdzIGFjdHVhbGx5IC9vbmx5LyAxMTEpCiVwYXNzYWdlIDEzCk1JU1MgRVVNRU5JREVTIFRSRUFTT04sIEFHRUQgT05FIEhVTkRSRUQgQU5EIEVMRVZFTj8KClRpZmZhbnkgaGVhcmQgdGhlIHZvaWNlIGluc2lkZSBoZXIgaGVhZC4gIEl0IGRpZG4ndCBzZWVtIHRvIGhhdmUgY29tZQp0aHJvdWdoIGhlciBlYXJzLiAgQW5kIHNoZSdkIGhlYXJkIGl0IGJlZm9yZSwgbWFraW5nIGhlciBxdWl0ZSB1bnVzdWFsLgpNb3N0IHBlb3BsZSBoZWFyIHRoZSB2b2ljZSBvZiBEZWF0aCBvbmx5IG9uY2UuCgogIFtXaW50ZXJzbWl0aCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjI5CiVwYXNzYWdlIDE0ClRpZmZhbnkgaGFkIGxvb2tlZCB1cCAic3RydW1wZXQiIGluIHRoZSBVbmV4cHVyZ2F0ZWQgRGljdGlvbmFyeSwgYW5kIGZvdW5kCml0IG1lYW50ICJhIHdvbWFuIHdobyBpcyBubyBiZXR0ZXIgdGhhbiBzaGUgc2hvdWxkIGJlIiBhbmQgImEgbGFkeSBvZiBlYXN5CnZpcnR1ZS4iICBUaGlzLCBzaGUgZGVjaWRlZCBhZnRlciBzb21lIHdvcmtpbmcgb3V0LCBtZWFudCB0aGF0IE1ycy4gR3l0aGEKT2dnLCBrbm93biBhcyBOYW5ueSwgd2FzIGEgdmVyeSByZXNwZWN0YWJsZSBwZXJzb24uICBTaGUgZm91bmQgdmlydHVlIGVhc3ksCmZvciBvbmUgdGhpbmcuICBBbmQgaWYgc2hlIHdhcyBubyBiZXR0ZXIgdGhhbiBzaGUgc2hvdWxkIGJlLCBzaGUgd2FzIGp1c3QKYXMgZ29vZCBhcyBzaGUgb3VnaHQgdG8gYmUuCgogIFtXaW50ZXJzbWl0aCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDM2MC0zNjEgKCd3dXJkcycgaXMgYWNjdXJhdGUpCiVwYXNzYWdlIDE1CiJBbiBoZXJvaWMgZWZmZWN0LCBNci4gQW55Ym9keSwiIHNhaWQgR3Jhbm55LiAgIlRoZSBmaXJzdCB0aGluZyBhIGhlcm8gbXVzdApjb25xdWVyIGlzIGhpcyBmZWFyLCBhbmQgd2hlbiBpdCBjb21lcyB0byBmaWdodGluJywgdGhlIE5hYyBNYWMgRmVlZ2xlCmRvbid0IGtub3cgdGhlIG1lYW5pbicgb2YgdGhlIHdvcmQuIgoKIkF5ZSwgdHJ1ZSBlbm91Z2gsIiBSb2IgZ3J1bnRlZC4gICJXZSBkaW5uYSBrZW4gdGhlIG1lYW5pbicgbycgdGhvdXNhbmRzCm8nIHd1cmRzISIKCiAgW1dpbnRlcnNtaXRoLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMzk4LTM5OSAoIkNodW1zZmFubGVpZ2giIGlzIHByb25vdW5jZWQgIkNodWZmbGV5IikKJXBhc3NhZ2UgMTYKQXQgdGhlIGJhY2sgb2YgdGhlIEZlZWdsZXMnIGNoYWxrIHBpdCwgbW9yZSBjaGFsayBoYWQgYmVlbiBjYXJ2ZWQgb3V0IG9mCnRoZSB3YWxsIHRvIG1ha2UgYSB0dW5uZWwgYWJvdXQgZml2ZSBmZWV0IGhpZ2ggYW5kIHBlcmhhcHMgYXMgbG9uZy4KCkluIGZyb250IG9mIGl0IHN0b29kIFJvbGFuZCBkZSBDaHVtc2ZhbmxlaWdoIChpdCB3YXNuJ3QgaGlzIGZhdWx0KS4gIEhpcwphbmNlc3RvcnMgaGFkIGJlZW4ga25pZ2h0cywgYW5kIHRoZXkgaGFkIGNvbWUgdG8gb3duIHRoZSBDaGFsayBieSBraWxsaW5nCnRoZSBraW5ncyB3aG8gdGhvdWdodCB0aGV5IGRpZC4gIFN3b3JkcywgdGhhdCdzIHdoYXQgaXQgaGFkIGFsbCBiZWVuIGFib3V0LgpTd29yZHMgYW5kIGN1dHRpbmcgb2ZmIGhlYWRzLiAgVGhhdCB3YXMgaG93IHlvdSBnb3QgbGFuZCBpbiB0aGUgb2xkIGRheXMsCmFuZCB0aGVuIHRoZSBydWxlcyB3ZXJlIGNoYW5nZWQgc28gdGhhdCB5b3UgZGlkbid0IG5lZWQgYSBzd29yZCB0byBvd24KbGFuZCBhbnltb3JlLCB5b3UganVzdCBuZWVkZWQgdGhlIHJpZ2h0IHBpZWNlIG9mIHBhcGVyLiAgQnV0IGhpcyBhbmNlc3RvcnMKaGFkIHN0aWxsIGh1bmcgb24gdG8gdGhlaXIgc3dvcmRzLCBqdXN0IGluIGNhc2UgcGVvcGxlIHRob3VnaHQgdGhhdCB0aGUKd2hvbGUgdGhpbmcgd2l0aCB0aGUgYml0cyBvZiBwYXBlciBoYWQgYmVlbiB1bmZhaXIsIGl0IGJlaW5nIGEgZmFjdCB0aGF0CnlvdSBjYW4ndCBwbGVhc2UgZXZlcnlib2R5LgoKSGUnZCBhbHdheXMgd2FudGVkIHRvIGJlIGdvb2Qgd2l0aCBhIHN3b3JkLCBhbmQgaXQgaGFkIGNvbWUgYXMgYSBzaG9jayB0bwpmaW5kIHRoYXQgdGhleSB3ZXJlIHNvIC9oZWF2eS8uICBIZSB3YXMgZ3JlYXQgYXQgYWlyIHN3b3JkLiAgSW4gZnJvbnQgb2YgYQptaXJyb3IgaGUgY291bGQgZmVuY2UgYWdhaW5zdCBoaXMgcmVmbGVjdGlvbiBhbmQgd2luIG5lYXJseSBhbGwgdGhlIHRpbWUuClJlYWwgc3dvcmRzIGRpZG4ndCBhbGxvdyB0aGF0LiAgWW91IHRyaWVkIHRvIHN3aW5nIHRoZW0gYW5kIHRoZXkgZW5kZWQgdXAKc3dpbmdpbmcgeW91LiAgSGUnZCByZWFsaXplZCB0aGF0IG1heWJlIGhlIHdhcyBtb3JlIGN1dCBvdXQgZm9yIGJpdHMgb2YKcGFwZXIuICBCZXNpZGVzLCBoZSBuZWVkZWQgZ2xhc3Nlcywgd2hpY2ggY291bGQgYmUgYSBiaXQgdHJpY2t5IHVuZGVyIGEKaGVsbWV0LCBlc3BlY2lhbGx5IGlmIHNvbWVvbmUgd2FzIGhpdHRpbmcgL3lvdS8gd2l0aCBhIHN3b3JkLgoKICBbV2ludGVyc21pdGgsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQolZSB0aXRsZQojCiMKIwoldGl0bGUgTWFraW5nIE1vbmV5ICgxNykKIyBwLiAxODcgKEhhcnBlciBlZGl0aW9uIC0tIHdoYXQncyBiZWNvbWUgb2YgSGFycGVyIFRvcmNoPykKJXBhc3NhZ2UgMQoiSSdtIGFuIElnb3IsIHRodXIuICBXZSBkb24ndCBhdGhrIHF1ZXRodGlvbnRoLiIKCiJSZWFsbHk/ICBXaHkgbm90PyIKCiJJIGRvbid0IGtub3csIHRodXIuICBJIGRpZG4ndCBhdGhrLiIKCiAgW01ha2luZyBNb25leSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTc3IChvcmlnaW5hbGx5IHRyYW5zY3JpYmVkIGZyb20gc29tZSBvdGhlciBlZGl0aW9uOyBIYXJwZXIgZWRpdGlvbgojICAgICAgICAgdXNlcyBBbWVyaWNhbiBzcGVsbGluZyBmb3IgImFybW9yIikKIyAgICAgICAgW3NvbWUgb2ZmLWR1dHkgV2F0Y2htZW4gbW9vbmxpZ2h0IGFzIGJhbmsgc2VjdXJpdHkgZ3VhcmRzXQolcGFzc2FnZSAyClRoZSBXYXRjaCBhcm1vciBoZSdkIGxpZnRlZCBmcm9tIHRoZSBiYW5rJ3MgbG9ja2VyIHJvb20gZml0dGVkIGxpa2UgYQpnbG92ZS4gIEhlJ2QgaGF2ZSBwcmVmZXJyZWQgaXQgdG8gZml0IGxpa2UgYSBoZWxtZXQgYW5kIGJyZWFzdHBsYXRlLgpCdXQsIGluIHRydXRoLCBpdCBwcm9iYWJseSBkaWRuJ3QgbG9vayBhbnkgYmV0dGVyIG9uIGl0cyBvd25lciwgY3VycmVudGx5CnN3YW5raW5nIGFsb25nIHRoZSBjb3JyaWRvcnMgaW4gdGhlIGJhbmsncyBvd24gc2hpbnkgYnV0IGltcHJhY3RpY2FsIGFybW9yLgpJdCB3YXMgY29tbW9uIGtub3dsZWRnZSB0aGF0IHRoZSBXYXRjaCdzIGFwcHJvYWNoIHRvIHVuaWZvcm1zIHdhcyBvbmUtc2l6ZS0KZG9lc24ndC1leGFjdGx5LWZpdC1hbnlib2R5LCBhbmQgdGhhdCBDb21tYW5kZXIgVmltZXMgZGlzYXBwcm92ZWQgb2YgYXJtb3IKdGhhdCBkaWRuJ3QgaGF2ZSB0aGF0IGtpY2tlZC1ieS10cm9sbHMgbG9vay4gIEhlIGxpa2VkIGFybW9yIHRvIHN0YXRlCmNsZWFybHkgdGhhdCBpdCBoYWQgYmVlbiBkb2luZyBpdHMgam9iLgoKICBbTWFraW5nIE1vbmV5LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMTA4IChwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoKQolcGFzc2FnZSAzCiJbLi4uXSAgVGhlIHdvcmxkIGlzIGZ1bGwgb2YgdGhpbmdzIHdvcnRoIG1vcmUgdGhhbiBnb2xkLiAgQnV0IHdlIGRpZyB0aGUKZGFtbiBzdHVmZiB1cCBhbmQgdGhlbiBidXJ5IGl0IGluIGEgZGlmZmVyZW50IGhvbGUuICBXaGVyZSdzIHRoZSBzZW5zZSBpbgp0aGF0PyAgV2hhdCBhcmUgd2UsIG1hZ3BpZXM/ICBHb29kIGhlYXZlbnMsIC9wb3RhdG9lcy8gYXJlIHdvcnRoIG1vcmUgdGhhbgpnb2xkISIKCiJTdXJlbHkgbm90ISIKCiJJZiB5b3Ugd2VyZSBzaGlwd3JlY2tlZCBvbiBhIGRlc2VydCBpc2xhbmQsIHdoYXQgd291bGQgeW91IHByZWZlciwgYSBiYWcKb2YgcG90YXRvZXMgb3IgYSBiYWcgb2YgZ29sZD8iCgoiWWVzLCBidXQgYSBkZXNlcnQgaXNsYW5kIGlzbid0IEFua2gtTW9ycG9yayEiCgoiQW5kIHRoYXQgcHJvdmVzIGdvbGQgaXMgb25seSB2YWx1YWJsZSBiZWNhdXNlIHdlIGFncmVlIGl0IGlzLCByaWdodD8KSXQncyBqdXN0IGEgZHJlYW0uICBCdXQgYSBwb3RhdG8gaXMgYWx3YXlzIHdvcnRoIGEgcG90YXRvLCBhbnl3aGVyZS4gIEFkZAphIGtub2Igb2YgYnV0dGVyIGFuZCBhIHBpbmNoIG9mIHNhbHQgYW5kIHlvdSd2ZSBnb3QgYSBtZWFsLCAvYW55d2hlcmUvLgpCdXJ5IGdvbGQgaW4gdGhlIGdyb3VuZCBhbmQgeW91J2xsIGJlIHdvcnJ5aW5nIGFib3V0IHRoaWV2ZXMgZm9yZXZlci4KQnVyeSBhIHBvdGF0byBhbmQgaW4gZHVlIHNlYXNvbiB5b3UgY291bGQgYmUgbG9va2luZyBhdCBhIGRpdmlkZW5kIG9mIGEKdGhvdXNhbmQgcGVyIGNlbnQuIgoKICBbTWFraW5nIE1vbmV5LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMjItMjQgKEFsYmVydCBTcGFuZ2xlciBpcyBvbmUgb2YgTW9pc3QgTGlwd2lnJ3MgYWxpYXNlczsKIyAgICAgICAgICAgICdkeXNsZWN0aWMnIGlzIGFjY3VyYXRlKQolcGFzc2FnZSA0CiJMZXQgdXMgdGFsayBhYm91dCBhbmdlbHMsIiBzYWlkIExvcmQgVmV0aW5hcmkuCgoiT2ggeWVzLCBJIGtub3cgdGhhdCBvbmUsIiBzYWlkIE1vaXN0IGJpdHRlcmx5LiAgIkkndmUgaGVhcmQgdGhhdCBvbmUuClRoYXQncyB0aGUgb25lIHlvdSBnb3QgbWUgd2l0aCBhZnRlciBJIHdhcyBoYW5nZWQtLSIKClZldGluYXJpIHJhaXNlZCBhbiBleWVicm93LiAgIk9ubHkgbW9zdGx5IGhhbmdlZCwgSSB0aGluayB5b3UnbGwgZmluZC4gIFRvCndpdGhpbiBhbiBpbmNoIG9mIHlvdXIgbGlmZS4iCgoiV2hhdGV2ZXIhICBJIHdhcyBoYW5nZWQhICBBbmQgdGhlIHdvcnN0IHBhcnQgb2YgdGhhdCB3YXMgZmluZGluZyBvdXQgSQpvbmx5IGdvdCB0d28gcGFyYWdyYXBocyBpbiB0aGUgL1RhbnR5IEJ1Z2xlLyEoMSkgIFR3byBwYXJhZ3JhcGhzLCBtYXkgSQpzYXksIGZvciBhIGxpZmUgb2YgaW5nZW5pb3VzLCBpbnZlbnRpdmUsIGFuZCBzdHJpY3RseSBub252aW9sZW50IGNyaW1lPwpJIGNvdWxkIGhhdmUgYmVlbiBhbiBleGFtcGxlIHRvIHRoZSB5b3VuZ3N0ZXJzISAgUGFnZSBvbmUgZ290IGhvZ2dlZCBieQp0aGUgRHlzbGVjdGljIEFscGhhYmV0IEtpbGxlciwgYW5kIGhlIG9ubHkgbWFuYWdlZCBBIGFuZCBXISIKCiJJIGNvbmZlc3MgdGhlIGVkaXRvciBkb2VzIGFwcGVhciB0byBiZWxpZXZlIHRoYXQgaXQgaXMgbm90IGEgcHJvcGVyIGNyaW1lCnVubGVzcyBzb21lb25lIGlzIGZvdW5kIGluIHRocmVlIGFsbGV5cyBhdCBvbmNlLCBidXQgdGhhdCBpcyB0aGUgcHJpY2Ugb2YKYSBmcmVlIHByZXNzLiAgQW5kIGl0IHN1aXRzIHVzIGJvdGgsIGRvZXMgaXQgbm90LCB0aGF0IEFsYmVydCBTcGFuZ2xlcidzCnBhc3NhZ2UgZnJvbSB0aGlzIHdvcmxkIHdhcy4uLiB1bm1lbW9yYWJsZT8iCgoiWWVzLCBidXQgSSB3YXNuJ3QgZXhwZWN0aW5nIGFuIGFmdGVybGlmZSBsaWtlIHRoaXMhICBJIGhhdmUgdG8gZG8gd2hhdApJJ20gdG9sZCBmb3IgdGhlIHJlc3Qgb2YgbXkgbGlmZT8iCgoiQ29ycmVjdGlvbiwgeW91ciBuZXcgbGlmZS4gIFRoYXQgaXMgYSBjcnVkZSBzdW1tYXJ5LCB5ZXMsIiBzYWlkIFZldGluYXJpLgoiTGV0IG1lIHJlcGhyYXNlIHRoaW5ncywgaG93ZXZlci4gIEFoZWFkIG9mIHlvdSwgTXIuIExpcHdpZywgaXMgYSBsaWZlIG9mCnJlc3BlY3RhYmxlIHF1aWV0IGNvbnRlbnRtZW50LCBvZiBjaXZpYyBkaWduaXR5LCBhbmQsIG9mIGNvdXJzZSwgaW4gdGhlCmZ1bGxuZXNzIG9mIHRpbWUsIGEgcGVuc2lvbi4gIE5vdCB0byBtZW50aW9uLCBvZiBjb3Vyc2UsIHRoZSBwcm91ZCBnb2xkLWlzaApjaGFpbi4iCgpNb2lzdCB3aW5jZWQgYXQgdGhpcy4gICJBbmQgaWYgSSAvZG9uJ3QvIGRvIHdoYXQgeW91IHNheT8iCgoiSG1tPyAgT2gsIHlvdSBtaXN1bmRlcnN0YW5kIG1lLCBNci4gTGlwd2lnLiAgVGhhdCBpcyB3aGF0IHdpbGwgaGFwcGVuIHRvCnlvdSBpZiB5b3UgZGVjbGluZSBteSBvZmZlci4gIElmIHlvdSBhY2NlcHQgaXQsIHlvdSB3aWxsIHN1cnZpdmUgb24geW91cgp3aXRzIGFnYWluc3QgcG93ZXJmdWwgYW5kIGRhbmdlcm91cyBlbmVtaWVzLCB3aXRoIGV2ZXJ5IGRheSBwcmVzZW50aW5nCmZyZXNoIGNoYWxsZW5nZXMuICBTb21lb25lIG1heSBldmVuIHRyeSB0byBraWxsIHlvdS4iCgoiV2hhdD8gIFdoeT8iCgoiWW91IGFubm95IHBlb3BsZS4gIEEgaGF0IGdvZXMgd2l0aCB0aGUgam9iLCBpbmNpZGVudGFsbHkuIgoKKDEpIEEgcGVyaW9kaWNhbCBwdWJsaXNoZWQgdGhyb3VnaG91dCB0aGUgUGxhaW5zLCBub3RlZCBmb3IgaXRzIGNvdmVyYWdlCm9mIG11cmRlciAocHJlZmVyYWJseSAnb3JyaWJsZSkgdHJpYWxzLCBwcmlzb24gZXNjYXBlcywgYW5kIHRoZSB3b3JsZCB0aGF0CmluIGdlbmVyYWwgaXMgc3Vycm91bmRlZCBieSBhIGNoYWxrIG91dGxpbmUuICBWZXJ5IHBvcHVsYXIuCgogIFtNYWtpbmcgTW9uZXksIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojcC4gNzEKJXBhc3NhZ2UgNQpXaGVuIGhlIGdvdCBiYWNrIHRvIHRoZSBQb3N0IE9mZmljZSwgTW9pc3QgbG9va2VkIHVwIHRoZSBMYXZpc2ggZmFtaWx5IGluCi9XaG9tJ3MgV2hvbS8uICBUaGV5IHdlcmUgaW5kZWVkIHdoYXQgd2FzIGtub3duIG9mIGFzICJvbGQgbW9uZXksIiB3aGljaAptZWFudCB0aGF0IGl0IGhhZCBiZWVuIG1hZGUgc28gbG9uZyBhZ28gdGhhdCB0aGUgYmxhY2sgZGVlZHMgd2hpY2ggaGFkCm9yaWdpbmFsbHkgZmlsbGVkIHRoZSBjb2ZmZXJzIHdlcmUgbm93IGhpc3RvcmljYWxseSBpcnJlbGV2YW50LiAgRnVubnksCnRoYXQ6ICBhIGJyaWdhbmQgZm9yIGEgZmF0aGVyIHdhcyBzb21ldGhpbmcgeW91IGtlcHQgcXVpZXQgYWJvdXQsIGJ1dCBhCnNsYXZlLXRha2luZyBwaXJhdGUgZm9yIGEgZ3JlYXQtZ3JlYXQtZ3JlYXQtZ3JhbmRmYXRoZXIgd2FzIHNvbWV0aGluZyB0bwpib2FzdCBvZiBvdmVyIHRoZSBwb3J0LiAgVGltZSB0dXJuZWQgdGhlIGV2aWwgYmFzdGFyZHMgaW50byByb2d1ZXMsIGFuZAovcm9ndWUvIHdhcyBhIHdvcmQgd2l0aCBhIHR3aW5rbGUgaW4gaXRzIGV5ZSBhbmQgbm90aGluZyB0byBiZSBhc2hhbWVkIG9mLgoKICBbTWFraW5nIE1vbmV5LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiA3MiAoJ2NsYWNrcycgaXMgYSBjb21tdW5pY2F0aW9uIHN5c3RlbSwgaGVyZSBhbmFsb2dvdXMgdG8gYSB0ZWxlZ3JhcGgpCiVwYXNzYWdlIDYKSGUgc3BvdHRlZCB0aGUgZmxpbXN5IHBpbmsgY2xhY2tzIGFtb25nIHRoZSBvdGhlciBzdHVmZiBhbmQgdHVnZ2VkIGl0IG91dApxdWlja2x5LgoKSXQgd2FzIGZyb20gU3Bpa2UhCgpIZSByZWFkOgoKICAgIFNVQ0NFU1MuICBSRVRVUk5JTkcgREFZIEFGVEVSIFRPTU9SUk9XLgogICAgQUxMIFdJTEwgQkUgUkVWRUFMRUQuICBTLgoKTW9pc3QgcHV0IGl0IGRvd24gY2FyZWZ1bGx5LgoKT2J2aW91c2x5IHNoZSdkIG1pc3NlZCBoaW0gdGVycmlibHkgYW5kIHdhcyBkZXNwZXJhdGUgdG8gc2VlIGhpbSBhZ2FpbiwgYnV0CnNoZSB3YXMgc3Rpbmd5IGFib3V0IHNwZW5kaW5nIEdvbGVtIFRydXN0IG1vbmV5LiAgQWxzbywgc2hlJ2QgcHJvYmFibHkgcnVuCm91dCBvZiBjaWdhcmV0dGVzLgoKTW9pc3QgZHJ1bW1lZCBoaXMgZmluZ2VycyBvbiB0aGUgZGVzay4gIEEgeWVhciBhZ28gaGUnZCBhc2tlZCBBZG9yYSBCZWxsZQpEZWFyaGVhcnQgdG8gYmUgaGlzIHdpZmUsIGFuZCBzaGUnZCBleHBsYWluZWQgdGhhdCwgaW4gZmFjdCwgaGUgd2FzIGdvaW5nCnRvIGJlIGhlciBodXNiYW5kLgoKSXQgd2FzIGdvaW5nIHRvIGJlLi4uIHdlbGwsIGl0IHdhcyBnb2luZyB0byBiZSBzb21ldGltZSBpbiB0aGUgbmVhciBmdXR1cmUsCndoZW4gTXJzLiBEZWFyaGVhcnQgZmluYWxseSBsb3N0IHBhdGllbmNlIHdpdGggaGVyIGRhdWdodGVyJ3MgYnVzeSBzY2hlZHVsZQphbmQgYXJyYW5nZWQgdGhlIHdlZGRpbmcgaGVyc2VsZi4KCkJ1dCBoZSB3YXMgYSBuZWFybHkgbWFycmllZCBtYW4sIGhvd2V2ZXIgeW91IGxvb2tlZCBhdCBpdC4gIEFuZCBuZWFybHkKbWFycmllZCBtZW4gZGlkbid0IGdldCBtaXhlZCB1cCB3aXRoIHRoZSBMYXZpc2ggZmFtaWx5LiAgQSBuZWFybHkgbWFycmllZAptYW4gd2FzIHN0ZWFkZmFzdCBhbmQgZGVwZW5kYWJsZSBhbmQgYWx3YXlzIHJlYWR5IHRvIGhhbmQgaGlzIG5lYXJseSB3aWZlCmFuIGFzaHRyYXkuICBIZSBoYWQgdG8gYmUgdGhlcmUgZm9yIGhpcyBvbmVkYXkgY2hpbGRyZW4sIGFuZCBtYWtlIHN1cmUKdGhleSBzbGVwdCBpbiBhIHdlbGwtdmVudGlsYXRlZCBudXJzZXJ5LgoKICBbTWFraW5nIE1vbmV5LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiA3OSAocGFzc2FnZSBzdGFydHMgbWlkLXBhcmFncmFwaDsgZGVwYXJ0ZWQgTXJzLiBMYXZpc2ggaXMgYSBiYW5rIG93bmVyKQolcGFzc2FnZSA3CiJbLi4uXSAgTm93IHdoYXQsIE1yLiBEZWF0aD8iCgpOT1c/IHNhaWQgRGVhdGguICBOT1csIFlPVSBDT1VMRCBTQVksIENPTUVTLi4uIFRIRSBBVURJVC4KCiJPaC4gIFRoZXJlIGlzIG9uZSwgaXMgdGhlcmU/ICBXZWxsLCBJJ20gbm90IGFzaGFtZWQuIgoKVEhBVCBDT1VOVFMuCgogIFtNYWtpbmcgTW9uZXksIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHBwLiAxODMtMTg0IChBbWVyaWNhbiBzcGVsbGluZyBvZiAnZ3JheScgaXMgYWNjdXJhdGUpCiVwYXNzYWdlIDgKTW9pc3QgbGl0IHRoZSBsYW1wIGFuZCB3YWxrZWQgb3ZlciB0byB0aGUgYmF0dGVyZWQgd3JlY2thZ2Ugb2YgaGlzIHdhcmRyb2JlLgpPbmNlIGFnYWluIGhlIHNlbGVjdGVkIHRoZSB0YXR0eSBncmF5IHN1aXQuICBJdCBoYWQgc2VudGltZW50YWwgdmFsdWU7IGhlCmhhZCBiZWVuIGhhbmdlZCBpbiBpdC4gIEFuZCBpdCB3YXMgYW4gdW5tZW1vcmFibGUgc3VpdCBmb3IgYW4gdW5tZW1vcmFibGUKbWFuLCB3aXRoIHRoZSBhZGRpdGlvbmFsIGFkdmFudGFnZSwgdW5saWtlIGJsYWNrLCBvZiBub3Qgc2hvd2luZyB1cCBpbiB0aGUKZGFyay4oMSkgIFsuLi5dCgooMSkgRXZlcnkgYXNzYXNzaW4ga25ldyB0aGF0IHJlYWwgYmxhY2sgb2Z0ZW4gc3Rvb2Qgb3V0IGluIHRoZSBkYXJrLApiZWNhdXNlIHRoZSBuaWdodCBpbiB0aGUgY2l0eSBpcyB1c3VhbGx5IG5ldmVyIGZ1bGwgYmxhY2ssIGFuZCB0aGF0IGdyYXkKb3IgZ3JlZW4gbWVyZ2UgbXVjaCBiZXR0ZXIuICBCdXQgdGhleSB3b3JlIGJsYWNrIGFueXdheSwgYmVjYXVzZSBzdHlsZQp0cnVtcHMgdXRpbGl0eSBldmVyeSB0aW1lLgoKICBbTWFraW5nIE1vbmV5LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyMTggKHRoZSBDYWJpbmV0IG9mIEN1cmlvc2l0eSkKJXBhc3NhZ2UgOQoiQWxsIHJpZ2h0LCB0aGVuLCIgc2FpZCBNb2lzdCwgIi93aGF0IGRvZXMgaXQgZG8vPyIKCiJXZSBkb24ndCBrbm93LiIKCiJIb3cgZG9lcyBpdCB3b3JrPyIKCiJXZSBkb24ndCBrbm93LiIKCiJXaGVyZSBkaWQgaXQgY29tZSBmcm9tPyIKCiJXZSBkb24ndCBrbm93LiIKCiJXZWxsLCB0aGF0IHNlZW1zIHRvIGJlIGFsbCwiIHNhaWQgTW9pc3Qgc2FyY2FzdGljYWxseS4gICJPaCBubywgb25lIGxhc3QKb25lOiAgd2hhdCBpcyBpdD8gIEFuZCBsZXQgbWUgdGVsbCB5b3UsIEknbSBhZ29nLiIKCiJUaGF0IG1heSBiZSB0aGUgd3Jvbmcgc29ydCBvZiBxdWVzdGlvbiB0byBhc2ssIiBzYWlkIFBvbmRlciwgc2hha2luZyBoaXMKaGVhZC4gICJUZWNobmljYWxseSBpdCBhcHBlYXJzIHRvIGJlIGEgY2xhc3NpYyBCYWcgb2YgSG9sZGluZyBidXQgd2l0aCAvbi8KbW91dGhzLCB3aGVyZSAvbi8gaXMgdGhlIG51bWJlciBvZiBpdGVtcyBpbiBhbiBlbGV2ZW4tZGltZW5zaW9uYWwgdW5pdmVyc2UsCndoaWNoIGFyZSBub3QgY3VycmVudGx5IGFsaXZlLCBub3QgcGluaywgYW5kIGNhbiBmaXQgaW4gYSBjdWJpY2FsIGRyYXdlcgoxNC4xNCBpbmNoZXMgb24gYSBzaWRlLCBkaXZpZGVkIGJ5IFAuIgoKIldoYXQncyBQPyIKCiJUaGF0IG1heSBiZSB0aGUgd3Jvbmcgc29ydCBvZiBxdWVzdGlvbi4iCgogIFtNYWtpbmcgTW9uZXksIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDIyNSAocGFzc2FnZSBzdGFydHMgbWlkLXBhcmFncmFwaCkKJXBhc3NhZ2UgMTAKIlsuLi5dICBJJ2xsIHRhbGsgdG8gRHIuIEhpY2tzLiAgSGUncyB0aGUgaGVhZCBvZiB0aGUgRGVwYXJ0bWVudCBvZgpQb3N0bW9ydGVtIENvbW11bmljYXRpb25zLiIKCiJQb3N0bW9ydGVtIENvbS4uLiIgTW9pc3QgYmVnYW4uICAiSXNuJ3QgdGhhdCB0aGUgc2FtZSBhcyBuZWNyb21hbi0tIgoKIkkgc2FpZCB0aGUgL0RlcGFydG1lbnQgb2YgUG9zdG1vcnRlbSBDb21tdW5pY2F0aW9ucy8sIiBzYWlkIFBvbmRlciB2ZXJ5CmZpcm1seS4gIFsuLi5dCgogIFtNYWtpbmcgTW9uZXksIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDI0NyAoaXQncyBhIHNwaXJpdCBzdW1tb25lZCBieSBEci4gSGlja3MgdGhhdCBpcyBkZXNjcmliaW5nIHRoZSBhcnQvcmlzaykKJXBhc3NhZ2UgMTEKIk5lY3JvbWFuY3kgaXMgYSBmaW5lIGFydD8iIHNhaWQgTW9pc3QuCgoiTm9uZSBmaW5lciwgeW91bmcgbWFuLiAgR2V0IHRoaW5ncyBqdXN0IGEgdGlueSBiaXQgd3JvbmcgYW5kIHRoZSBzcGlyaXRzCm9mIHRoZSB2ZW5nZWZ1bCBkZWFkIG1heSBlbnRlciB5b3VyIGhlYWQgdmlhIHlvdXIgZWFycyBhbmQgYmxvdyB5b3VyIGJyYWlucwpvdXQgZG93biB5b3VyIG5vc2UuIgoKVGhlIGV5ZXMgb2YgTW9pc3QgYW5kIEFkb3JhIEJlbGxlIGZvY3VzZWQgb24gRHIuIEhpY2tzIGxpa2UgdGhvc2Ugb2YgYW4KYXJjaGVyIG9uIGhpcyB0YXJnZXQuICBIZSB3YXZlZCBoaXMgaGFuZHMgZnJhbnRpY2FsbHkgYW5kIG1vdXRoZWQsICJOb3QKdmVyeSBvZnRlbiEiCgogIFtNYWtpbmcgTW9uZXksIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDI2OQolcGFzc2FnZSAxMgoiSWYgeW91IGNhbid0IHN0YW5kIHRoZSBoZWF0LCBnZXQgb2ZmIHRoZSBwb3QsIHRoYXQncyB3aGF0IEkgYWx3YXlzIHNheSwiCnNhaWQgYSBzZW5pb3IgY2xlcmssIGFuZCB0aGVyZSB3YXMgYSBnZW5lcmFsIG11cm11ciBvZiBhZ3JlZW1lbnQuCgogIFtNYWtpbmcgTW9uZXksIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDI2NCAocGFzc2FnZSBzdGFydHMgbWlkLXBhcmFncmFwaCkKJXBhc3NhZ2UgMTMKWy4uLl0gaWYgdGhlIGZ1bmRhbWVudGFsIG9jY3VsdCBtYXhpbSAiYXMgYWJvdmUsIHNvIGJlbG93IiB3YXMgdHJ1ZSwgdGhlbgpzbyB3YXMgImFzIGJlbG93LCBzbyBhYm92ZSIuLi4KCiAgW01ha2luZyBNb25leSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjgwCiVwYXNzYWdlIDE0CiJJbiB0aGUgT2xkIENvdW50cnkgd2UgaGF2ZSBhIHRoYXlpbmcsIiBJZ29yIHZvbHVudGVlcmVkLgoKIkEgd2hhdD8iCgoiQSB0aGF5aW5nLiAgV2UgdGhheSwgJ2lmIHlvdSBkb24ndCB3YW50IHRoZSBtb250aHRlciB5b3UgZG9uJ3QgcHVsbCB0aGUKbGV2ZXIuJyIKCiJZb3UgZG9uJ3QgdGhpbmsgSSd2ZSBnb25lIG1hZCwgZG8geW91LCBJZ29yPyIKCiJNYW55IGdyZWF0IG1lbiBoYXZlIGJlZW4gY29udGhpZGVyZWQgbWFkLCBNci4gSHViZXJ0LiAgRXZlbiBEci4gSGFudGgKRm9ydm9yZCB3YXRoIGNhbGxlZCBtYWQuICBCdXQgSSBwdXQgaXQgdG8geW91OiAgY291bGQgYSBtYWRtYW4gaGF2ZSBjcmVhdGVkCmEgcmV2b2x1dGlvbmFyeSBsaXZpbmctYnJhaW4gZXh0cmFjdG9yPyIKCiAgW01ha2luZyBNb25leSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMzAyCiVwYXNzYWdlIDE1ClRoZXJlIHdhcyBhIHNheWluZzogICJPbGQgbmVjcm9tYW5jZXJzIG5ldmVyIGRpZS4iICBXaGVuIGhlIHRvbGQgdGhlbSB0aGlzLApwZW9wbGUgd291bGQgc2F5ICIuLi4gYW5kPyIgYW5kIEhpY2tzIHdvdWxkIGhhdmUgdG8gcmVwbHksICJUaGF0J3MgYWxsIG9mCml0LCBJJ20gYWZyYWlkLiAgSnVzdCAnT2xkIG5lY3JvbWFuY2VycyBuZXZlciBkaWUuJyIKCiAgW01ha2luZyBNb25leSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMzM2IChwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoKQolcGFzc2FnZSAxNgpbLi4uXSAgV2hhdCB0aGUgaXJvbiBtYWlkZW4gd2FzIHRvIHN0dXBpZCB0eXJhbnRzLCB0aGUgY29tbWl0dGVlIHdhcyB0bwpMb3JkIFZldGluYXJpOyBpdCB3YXMgb25seSBzbGlnaHRseSBtb3JlIGV4cGVuc2l2ZSwoMSkgZmFyIGxlc3MgbWVzc3ksCmNvbnNpZGVyYWJseSBtb3JlIGVmZmljaWVudCwgYW5kLCBiZXN0IG9mIGFsbCwgeW91IGhhZCB0byAvZm9yY2UvIHBlb3BsZQp0byBjbGltYiBpbnNpZGUgdGhlIGlyb24gbWFpZGVuLgoKKDEpIFRoZSBvbmx5IHJlYWwgZXhwZW5zZSB3YXMgdGVhIGFuZCBiaXNjdWl0cyBoYWxmd2F5IHRocm91Z2gsIHdoaWNoCnNlbGRvbSBoYXBwZW5lZCB3aXRoIHRoZSBpcm9uIG1haWRlbi4KCiAgW01ha2luZyBNb25leSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMzYxIChNci4gU2xhbnQgaXMgYSB6b21iaWUpCiVwYXNzYWdlIDE3CiJNcnMuIExhdmlzaCwgYSBsYWR5IG1hbnkgb2YgdXMgd2VyZSBwcml2aWxlZ2VkIHRvIGtub3csIHJlY2VudGx5IGNvbmZpZGVkCmluIG1lIHRoYXQgc2hlIHdhcyBkeWluZywiIHNhaWQgVmV0aW5hcmkuICAiU2hlIGFza2VkIG1lIGZvciBhZHZpY2Ugb24gdGhlCmZ1dHVyZSBvZiB0aGUgYmFuaywgZ2l2ZW4gdGhhdCBoZXIgb2J2aW91cyBoZWlycyB3ZXJlLCBpbiBoZXIgd29yZHMsICdhcwpuYXN0eSBhIGJ1bmNoIG9mIHdlYXNlbHMgYXMgeW91IGNvdWxkIGV2ZXIgaG9wZSBub3QgdG8gbWVldC0tJyIKCkFsbCB0aGlydHktb25lIG9mIHRoZSBMYXZpc2ggbGF3eWVycyBzdG9vZCB1cCBhbmQgc3Bva2UgYXQgb25jZSwgaW5jdXJpbmcKYSB0b3RhbCBjb3N0IHRvIGNsaWVudHMgb2YgJEFNMTE5LjI4cC4KCk1yLiBTbGFudCBnbGFyZWQgYXQgdGhlbS4KCk1yLiBTbGFudCBkaWQgbm90LCBkZXNwaXRlIHdoYXQgaGFkIGJlZW4gc2FpZCwgaGF2ZSB0aGUgcmVzcGVjdCBvZiBBbmtoLQpNb3Jwb3JrJ3MgbGVnYWwgcHJvZmVzc2lvbi4gIEhlIGNvbW1hbmRlZCBpdHMgZmVhci4gIERlYXRoIGhhZCBub3QKZGltaW5pc2hlZCBoaXMgZW5jeWNsb3BlZGljIG1lbW9yeSwgaGlzIGd1aWxlLCBoaXMgdGFsZW50IGZvciBjb3Jrc2NyZXcKcmVhc29uaW5nLCBhbmQgdGhlIHZpdHJpb2wgb2YgaGlzIHN0YXJlLiAgRG8gbm90IGNyb3NzIG1lIHRoaXMgZGF5LCBpdAphZHZpc2VkIHRoZSBsYXd5ZXJzLiAgRG8gbm90IGNyb3NzIG1lLCBmb3IgaWYgeW91IGRvIEkgd2lsbCBoYXZlIHRoZSBmbGVzaApmcm9tIHlvdXIgdmVyeSBib25lcyBhbmQgdGhlIG1hcnJvdyB0aGVyZWluLiAgWW91IGtub3cgdGhvc2UgbGVhdGhlci1ib3VuZAp0b21lcyB5b3UgaGF2ZSBvbiB0aGUgd2FsbCBiZWhpbmQgeW91ciBkZXNrcyB0byBpbXByZXNzIHlvdXIgY2xpZW50cz8gIEkKaGF2ZSByZWFkIHRoZW0gYWxsLCBhbmQgd3JvdGUgaGFsZiBvZiB0aGVtLiAgRG8gbm90IHRyeSBtZS4gIEkgYW0gbm90IGluIGEKZ29vZCBtb29kLgoKT25lIGJ5IG9uZSwgdGhleSBzYXQgZG93bi4oMSkKCigxKSBUb3RhbCBjb3N0LCBpbmNsdWRpbmcgdGltZSBhbmQgZGlzYnVyc2VtZW50czogJEFNMjUzLjE2cC4KCiAgW01ha2luZyBNb25leSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiVlIHRpdGxlCiMKIwojCiV0aXRsZSBVbnNlZW4gQWNhZGVtaWNhbHMgKDEyKQojIHAuIDY4IChIYXJwZXIgZWRpdGlvbikKJXBhc3NhZ2UgMQpCZSBvbmUgb2YgdGhlIGNyb3dkPyAgSXQgd2VudCBhZ2FpbnN0IGV2ZXJ5dGhpbmcgYSB3aXphcmQgc3Rvb2QgZm9yLAphbmQgYSB3aXphcmQgd291bGQgbm90IHN0YW5kIGZvciBhbnl0aGluZyBpZiBoZSBjb3VsZCBzaXQgZG93biBmb3IgaXQsCmJ1dCBldmVuIHNpdHRpbmcgZG93biwgeW91IGhhZCB0byBzdGFuZCBvdXQuCgogIFtVbnNlZW4gQWNhZGVtaWNhbHMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDEgKGZvb3Rub3RlLCBzbyAiKDEpIiBvdWdodCB0byBiZSAiKDIpIiwgYnV0IHNvbWVib2R5IHdvdWxkIGNvbXBsYWluLi4uKQolcGFzc2FnZSAyClRlY2huaWNhbGx5LCB0aGUgY2l0eSBvZiBBbmtoLU1vcnBvcmsgaXMgYSBUeXJhbm55LCB3aGljaCBpcyBub3QgYWx3YXlzCnRoZSBzYW1lIHRoaW5nIGFzIGEgbW9uYXJjaHksIGFuZCBpbiBmYWN0IGV2ZW4gdGhlIHBvc3Qgb2YgVHlyYW50IGhhcyBiZWVuCnNvbWV3aGF0IHJlZGVmaW5lZCBieSB0aGUgaW5jdW1iZW50LCBMb3JkIFZldGluYXJpLCBhcyB0aGUgb25seSBmb3JtIG9mCmRlbW9jcmFjeSB0aGF0IHdvcmtzLiAgRXZlcnlvbmUgaXMgZW50aXRsZWQgdG8gdm90ZSwgdW5sZXNzIGRpc3F1YWxpZmllZApieSByZWFzb24gb2YgYWdlIG9yIG5vdCBiZWluZyBMb3JkIFZldGluYXJpLgoKQW5kIHlldCBpdCBkb2VzIHdvcmsuICBUaGlzIGhhcyBhbm5veWVkIGEgbnVtYmVyIG9mIHBlb3BsZSB3aG8gZmVlbCwKc29tZWhvdywgdGhhdCBpdCBzaG91bGQgbm90IHdvcmssIGFuZCB3aG8gd2FudCBhIG1vbmFyY2ggaW5zdGVhZCwgdGh1cwpyZXBsYWNpbmcgYSBtYW4gd2hvIGhhcyBhY2hpZXZlZCBoaXMgcG9zaXRpb24gYnkgY3VubmluZywgYSBkZWVwCnVuZGVyc3RhbmRpbmcgb2YgdGhlIHJlYWxpdGllcyBvZiB0aGUgaHVtYW4gcHN5Y2hlLCBicmVhdGh0YWtpbmcKZGlwbG9tYW5jeSwgYSBjZXJ0YWluIHByb3dlc3Mgd2l0aCB0aGUgc3RpbGV0dG8gZGFnZ2VyLCBhbmQsIGFsbCBhZ3JlZSwKYSBtaW5kIGxpa2UgYSBmaW5lbHkgYmFsYW5jZWQgY2lyY3VsYXIgc2F3LCB3aXRoIGEgbWFuIHdobyBoYXMgZ290IHRoZXJlCmJ5IGJlaW5nIGJvcm4uKDEpCgpIb3dldmVyLCB0aGUgY3Jvd24gaGFzIGh1bmcgb24gYW55d2F5LCBhcyBjcm93bnMgZG8tLW9uIHRoZSBQb3N0IE9mZmljZQphbmQgdGhlIFJveWFsIEJhbmsgYW5kIHRoZSBNaW50IGFuZCwgbm90IGxlYXN0LCBpbiB0aGUgc3ByYXdsaW5nLApicmF3bGluZywgc3F1YWxsaW5nIGNvbnNjaW91c25lc3Mgb2YgdGhlIGNpdHkgaXRzZWxmLiAgTG90cyBvZiB0aGluZ3MKbGl2ZSBpbiB0aGF0IGRhcmtuZXNzLiAgVGhlcmUgYXJlIGFsbCBraW5kcyBvZiBkYXJrbmVzcywgYW5kIGFsbCBraW5kcwpvZiB0aGluZ3MgY2FuIGJlIGZvdW5kIGluIHRoZW0sIGltcHJpc29uZWQsIGJhbmlzaGVkLCBsb3N0IG9yIGhpZGRlbi4KU29tZXRpbWVzIHRoZXkgZXNjYXBlLiAgU29tZXRpbWVzIHRoZXkgc2ltcGx5IGZhbGwgb3V0LiAgU29tZXRpbWVzIHRoZXkKanVzdCBjYW4ndCB0YWtlIGl0IGFueSBtb3JlLgoKKDEpIEEgdGhpcmQgcHJvcG9zaXRpb24sIHRoYXQgdGhlIGNpdHkgYmUgZ292ZXJuZWQgYnkgYSBjaG9pY2Ugb2YKcmVzcGVjdGFibGUgbWVtYmVycyBvZiB0aGUgY29tbXVuaXR5IHdobyB3b3VsZCBwcm9taXNlIG5vdCB0byBnaXZlCnRoZW1zZWx2ZXMgYWlycyBvciBiZXRyYXkgdGhlIHB1YmxpYyB0cnVzdCBhdCBldmVyeSB0dXJuLCB3YXMgaW5zdGFudGx5CnRoZSBzdWJqZWN0IG9mIG11c2ljIGhhbGwgam9rZXMgYWxsIG92ZXIgdGhlIGNpdHkuCgogIFtVbnNlZW4gQWNhZGVtaWNhbHMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDE2CiVwYXNzYWdlIDMKQSB3aXphcmQgY291bGQgZG8gd2hhdCBoZSBsaWtlZCBpbiBoaXMgb3duIHN0dWR5LCBhbmQgaW4gdGhlIG9sZCBkYXlzIHRoYXQKaGFkIGxhcmdlbHkgbWVhbnQgc21va2luZyBhbnl0aGluZyBoZSBmYW5jaWVkIGFuZCBmYXJ0aW5nIGh1Z2VseSB3aXRob3V0CmFwb2xvZ2l6aW5nLiAgVGhlc2UgZGF5cyBpdCBtZWFudCBidWlsZGluZyBvdXQgaW50byBhIGNvbmdydWVudCBzZXQgb2YKZGltZW5zaW9ucy4gIEV2ZW4gdGhlIEFyY2hjaGFuY2VsbG9yIHdhcyBkb2luZyBpdCwgd2hpY2ggbWFkZSBpdCBoYXJkIGZvcgpQb25kZXIgdG8gcHJvdGVzdDogIGhlIGhhZCBoYWxmIGEgbWlsZSBvZiB0cm91dCBzdHJlYW0gaW4gaGlzIGJhdGhyb29tLAphbmQgY2xhaW1lZCB0aGF0IG1lc3NpbicgYWJvdXQgaW4gaGlzIHN0dWR5IHdhcyB3aGF0IGtlcHQgYSB3aXphcmQgb3V0Cm9mIG1pc2NoaWVmLiAgQW5kLCBhcyBldmVyeW9uZSBrbmV3LCBpdCBkaWQuICBJdCBnZW5lcmFsbHkgZ290IGhpbSBpbnRvCnRyb3VibGUgaW5zdGVhZC4KCiAgW1Vuc2VlbiBBY2FkZW1pY2FscywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTggKFJpZGN1bGx5IGlzIGZ1cmlvdXMgYXQgdGhlIGZvcm1lciBEZWFuLCB3aG8gbGVmdCBVVSB0byBiZWNvbWUgYQojICAgICAgICByaXZhbCBbQXJjaC1dQ2hhbmNlbGxvciBhdCBCcmF6ZW5lY2sgVW5pdmVyc2l0eSBpbiBQc2V1ZG9wb2xpcykKJXBhc3NhZ2UgNAoiUmVtdW5lcmF0aW9uPyAgU2luY2Ugd2hlbiBkaWQgYSB3aXphcmQgd29yayBmb3Igd2FnZXM/ICBXZSBhcmUgcHVyZQphY2FkZW1pY3MsIE1pc3RlciBTdGliYm9ucyEgIFdlIGRvIG5vdCBjYXJlIGZvciBtZXJlIG1vbmV5ISIKClVuZm9ydHVuYXRlbHksIFBvbmRlciB3YXMgYSBjbGVhciBsb2dpY2FsIHRoaW5rZXIgd2hvLCBpbiB0aW1lcyBvZiBtZW50YWwKY29uZnVzaW9uLCBmZWxsIGJhY2sgb24gcmVhc29uIGFuZCBob25lc3R5LCB3aGljaCwgd2hlbiBkZWFsaW5nIHdpdGggYW4KYW5ncnkgQXJjaGNoYW5jZWxsb3IsIHdlcmUsIHRvIHVzZSB0aGUgcHJvcGVyIGFjYWRlbWljIHRlcm0sIHVuaGVscGZ1bC4KQW5kIGhlIG5lZ2xlY3RlZCB0byB0aGluayBzdHJhdGVnaWNhbGx5LCBhbHdheXMgYSBtaXN0YWtlIHdoZW4gdGFsa2luZyB0bwpmZWxsb3cgYWNhZGVtaWNzLCBhbmQgYXMgYSByZXN1bHQgbWFkZSB0aGUgbWlzdGFrZSBvZiBlbXBsb3lpbmcsIGFzIGF0CnRoaXMgcG9pbnQsIGNvbW1vbiBzZW5zZS4KCiJUaGF0J3MgYmVjYXVzZSB3ZSBuZXZlciBhY3R1YWxseSBwYXkgZm9yIGFueXRoaW5nIHZlcnkgbXVjaCwiIGhlIHNhaWQsCiJhbmQgaWYgYW55b25lIG5lZWRzIGFueSBwZXR0eSBjYXNoIHRoZXkganVzdCBoZWxwIHRoZW1zZWx2ZXMgZnJvbSB0aGUKYmlnIGphci0tIgoKIldlIGFyZSBwYXJ0IG9mIHRoZSB2ZXJ5IGZhYnJpYyBvZiB0aGUgdW5pdmVyc2l0eSwgTWlzdGVyIFN0aWJib25zISAgV2UKdGFrZSBvbmx5IHdoYXQgd2UgcmVxdWlyZSEgIFdlIGRvIG5vdCBzZWVrIHdlYWx0aCEgIEFuZCBtb3N0IGNlcnRhaW5seQp3ZSBkbyBub3QgYWNjZXB0IGEgJ3Bvc3Qgb2Ygdml0YWwgaW1wb3J0YW5jZSB3aGljaCBpbmNsdWRlcyBhbiBhdHRyYWN0aXZlCnBhY2thZ2Ugb2YgcmVtdW5lcmF0aW9uLCcgd2hhdGV2ZXIgdGhlIGhlbGxzIHRoYXQgbWVhbnMsICdhbmQgb3RoZXIKYmVuZWZpdHMgaW5jbHVkaW5nIGEgZ2VuZXJvdXMgcGVuc2lvbiEnICBBIHBlbnNpb24sIG1hcmsgeW91ISAgV2hlbiBoYXMgYQp3aXphcmQgZXZlciByZXRpcmVkPyIKCiAgW1Vuc2VlbiBBY2FkZW1pY2FscywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTkgKFNoZTogcGx1bXAgR2xlbmRhOyBIZXI6IGZhc2hpb24tbW9kZWwtdG8tYmUgSnVsaWV0KQolcGFzc2FnZSA1ClNoZSB3YXMsIGluIGZhY3QsIHF1aXRlIGEgcGxlYXNhbnQgbG9va2luZyBnaXJsLCBldmVuIGlmIGhlciBib3NvbSBoYWQKY2xlYXJseSBiZWVuIGludGVuZGVkIGZvciBhIGdpcmwgdHdvIGZlZXQgdGFsbGVyOyBidXQgc2hlIHdhcyBub3QgSGVyLigxKQoKKDEpIFRoZSBFZ3JlZ2lvdXMgUHJvZmVzc29yIG9mIEdyYW1tYXIgYW5kIFVzYWdlIHdvdWxkIGhhdmUgY29ycmVjdGVkCnRoaXMgdG8gInNoZSB3YXMgbm90IHNoZSwiIHdoaWNoIHdvdWxkIGhhdmUgY2F1c2VkIHRoZSBQcm9mZXNzb3Igb2YgTG9naWMKdG8gc3BpdCBvdXQgaGlzIGRyaW5rLgoKICBbVW5zZWVuIEFjYWRlbWljYWxzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiA0OCAoSGU6IE51dHQsIGEga2V5IGVsZW1lbnQgb2YgdGhlIHN0b3J5IHdobyBkb2Vzbid0IGZpZ3VyZSBpbiBhbnkKIyAgICAgICAgb2YgdGhlIG90aGVyIHNlbGVjdGVkIHBhc3NhZ2VzLi4uKQolcGFzc2FnZSA2CkhlJ2QgdHJpZWQgd2FuZGVyaW5nIGFyb3VuZCB0aGUgb3RoZXIgY2VsbGFycywgYnV0IHRoZXJlIHdhcyBub3RoaW5nIG11Y2gKaGFwcGVuaW5nIGF0IG5pZ2h0LCBhbmQgcGVvcGxlIGdhdmUgaGltIGZ1bm55IGxvb2tzLiAgTGFkeXNoaXAgZGlkIG5vdApydWxlIGhlcmUuICBCdXQgd2l6YXJkcyBhcmUgYSBtZXNzeSBsb3QgYW5kIG5vYm9keSB0aWRpZWQgdXAgbXVjaCBhbmQKbGl2ZWQgdG8gdGVsbCB0aGUgdGFsZSwgc28gYWxsIHNvcnRzIG9mIG9sZCBzdG9yZXJvb21zIGFuZCBqdW5rLWZpbGxlZAp3b3Jrc2hvcHMgYmVjYW1lIGhpcyBmb3IgdGhlIHVzZSBvZi4gIEFuZCB0aGVyZSB3YXMgc28gbXVjaCBmb3IgYSBsYWQgd2l0aAprZWVuIG5pZ2h0IHZpc2lvbiB0byBmaW5kLiAgSGUgaGFkIGFscmVhZHkgc2VlbiBzb21lIGx1bWlub3VzIHNwb29uIGFudHMKY2FycnlpbmcgYSBmb3JrLCBhbmQsIHRvIGhpcyBzdXJwcmlzZSwgdGhlIGZvcmdvdHRlbiBtYXplcyB3ZXJlIGhvbWUgdG8KdGhhdCB2ZXJ5IHJhcmUgaW5kb29yb3ZvcmUsIHRoZSBVbmNvbW1vbiBTb2NrIEVhdGVyLiAgVGhlcmUgd2VyZSBzb21lCnRoaW5ncyBsaXZpbmcgdXAgaW4gdGhlIHBpcGVzLCB0b28sIHdoaWNoIHBlcmlvZGljYWxseSBtdXJtdXJlZCAiQXdrISBBd2shIgpXaG8ga25ldyB3aGF0IHN0cmFuZ2UgbW9uc3RlcnMgbWFkZSB0aGVpciBob21lIGhlcmU/CgogIFtVbnNlZW4gQWNhZGVtaWNhbHMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDU4CiVwYXNzYWdlIDcKVHJ1dGggaXMgZmVtYWxlLCBzaW5jZSB0cnV0aCBpcyBiZWF1dHkgcmF0aGVyIHRoYW4gaGFuZHNvbWVuZXNzOyB0aGlzLApSaWRjdWxseSByZWZsZWN0ZWQgYXMgdGhlIENvdW5jaWwgZ3J1bWJsZWQgaW4sIHdvdWxkIGNlcnRhaW5seSBleHBsYWluCnRoZSBzYXlpbmcgdGhhdCBhIGxpZSBjb3VsZCBydW4gYXJvdW5kIHRoZSB3b3JsZCBiZWZvcmUgVHJ1dGggZ290IGl0cywKY29ycmVjdGlvbiwgL2hlci8gYm9vdHMgb24sIGFuZCBzaW5jZSBzaGUgd291bGQgaGF2ZSB0byBjaG9vc2Ugd2hpY2gKcGFpci0tdGhlIGlkZWEgdGhhdCBhbnkgd29tYW4gaW4gdGhlIHBvc2l0aW9uIHRvIGNob29zZSB3b3VsZCBoYXZlIGp1c3QKb25lIHBhaXIgb2YgYm9vdHMgYmVpbmcgYmV5b25kIHJhdGlvbmFsIGJlbGllZi4gIEluZGVlZCwgYXMgYSBnb2RkZXNzIHNoZQp3b3VsZCBoYXZlIGxvdHMgb2Ygc2hvZXMsIGFuZCB0aHVzIG1hbnkgY2hvaWNlczogIGNvbWZ5IHNob2VzIGZvciBob21lCnRydXRocywgaG9ibmFpbCBib290cyBmb3IgdW5wbGVhc2FudCB0cnV0aHMsIHNpbXBsZSBjbG9ncyBmb3IgdW5pdmVyc2FsCnRydXRocyBhbmQgcG9zc2libHkgc29tZSBraW5kIG9mIHNsaXBwZXIgZm9yIHNlbGYtZXZpZGVudCB0cnV0aC4gIE1vcmUKaW1wb3J0YW50IHJpZ2h0IG5vdyB3YXMgd2hhdCBraW5kIG9mIHRydXRoIGhlIHdhcyBnb2luZyB0byBoYXZlIHRvIGltcGFydAp0byBoaXMgY29sbGVhZ3VlcywgYW5kIGhlIGRlY2lkZWQgbm90IG9uIHRoZSB3aG9sZSB0cnV0aCwgYnV0IGluc3RlYWQgb24Kbm90aGluZyBidXQgdGhlIHRydXRoLCB3aGljaCBkaXNwZW5zZWQgd2l0aCB0aGUgbmVlZCBmb3IgaG9uZXN0eS4KCiAgW1Vuc2VlbiBBY2FkZW1pY2FscywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTY2IChzZWUgInRoZSB3cm9uZyBzb3J0IG9mIHF1ZXN0aW9uIiBwYXNzYWdlIGZyb20gL01ha2luZyBNb25leS8KIyAgICAgICAgIGZvciBhIGRlc2NyaXB0aW9uIG9mIHRoZSBDYWJpbmV0OyBpdGVtcyByZW1vdmVkIGZyb20gaXQgaGF2ZSB0bwojICAgICAgICAgYmUgcmV0dXJuZWQgd2l0aGluIDE0OjE0IGhvdXJzIG9yIHRoZXkncmUgZHJhd24gYmFjayBtYWdpY2FsbHk7CiMgICAgICAgICBzdHVkZW50IGluIHF1ZXN0aW9uIGhhZCByZW1vdmVkIGEgc2FuZHdpY2ggYW5kIHRoZW4gZWF0ZW4gaXQpCiVwYXNzYWdlIDgKIlllcywgc2lyPyIgc2FpZCBQb25kZXIgd2VhcmlseS4KCiJQcm9tb3RlIGhpbS4gIFdoYXRldmVyIGxldmVsIGhlIGlzLCBtb3ZlIGhpbSB1cCBvbmUuIgoKIkkgdGhpbmsgdGhhdCdsbCBzZW5kIHRoZSB3cm9uZyBraW5kIG9mIHNpZ25hbCwiIFBvbmRlciB0cmllZC4KCiJPbiB0aGUgY29udHJhcnksIE1pc3RlciBTdGliYm9ucy4gIEl0IHdpbGwgc2VuZCBleGFjdGx5IHRoZSByaWdodCBraW5kIG9mCm1lc3NhZ2UgdG8gdGhlIHN0dWRlbnQgYm9keS4iCgoiQnV0IGhlIGRpc29iZXllZCBhbiBleHByZXNzIG9yZGVyLCBtYXkgSSBwb2ludCBvdXQ/IgoKIlRoYXQncyByaWdodC4gIEhlIHNob3dlZCBpbmRlcGVuZGVudCB0aGlua2luZyBhbmQgYSBjZXJ0YWluIGFtb3VudCBvZgpwbHVjaywgYW5kIGluIHRoZSBjb3Vyc2Ugb2Ygc28gZG9pbmcgYWRkZWQgdmFsdWFibGUgZGF0YSB0byBvdXIKdW5kZXJzdGFuZGluZyBvZiB0aGUgQ2FiaW5ldC4iCgoiQnV0IGhlIG1pZ2h0IGhhdmUgZGVzdHJveWVkIHRoZSB3aG9sZSB1bml2ZXJzaXR5LCBzaXIuIgoKIlJpZ2h0LCBpbiB3aGljaCBjYXNlIGhlIHdvdWxkIGhhdmUgYmVlbiB2aWdvcm91c2x5IGRpc2NpcGxpbmVkLCBpZiB3ZSdkCmJlZW4gYWJsZSB0byBmaW5kIGFueXRoaW5nIGxlZnQgb2YgaGltLiAgQnV0IGhlIGRpZG4ndCBhbmQgaGUgd2FzIGx1Y2t5CmFuZCB3ZSBuZWVkIGx1Y2t5IHdpemFyZHMuICBQcm9tb3RlIGhpbSwgb24gdGhlIGRpcmVjdCBvcmRlciBvZiBtZSwgbm90CnBwJ2QgYXQgYWxsLiAgSW5jaWRlbnRhbGx5LCBob3cgbG91ZCB3ZXJlIGhpcyBzY3JlYW1zPyIKCiAgW1Vuc2VlbiBBY2FkZW1pY2FscywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDE5Mi0xOTMgKCdwYW50cyc6IHVuZGVycGFudHM7ICdmb290YmFsbCc6IHNvY2NlciA7LSkKJXBhc3NhZ2UgOQoiWW91IHdpbGwgYXJyYW5nZSB5b3Vyc2VsZiBpbnRvIHR3byB0ZWFtcywgc2V0IHVwIGdvYWxzLCBhbmQgc3RyaXZlIHRvIHdpbiEKTm8gbWFuIHdpbGwgbGVhdmUgdGhlIGZpZWxkIG9mIHBsYXkgdW5sZXNzIGluanVyZWQhICBUaGUgaGFuZHMgYXJlIG5vdCB0bwpiZSB1c2VkLCBpcyB0aGF0IGNsZWFyPyAgQW55IHF1ZXN0aW9ucz8iICBBIGhhbmQgd2VudCB1cC4gIFJpZGN1bGx5IHNvdWdodAp0aGUgYXR0YWNoZWQgZmFjZS4KCiJBaCwgUmluY2V3aW5kLCIgaGUgc2FpZCwgYW5kLCBiZWNhdXNlIGhlIHdhcyBub3QgYSBkZXRlcm1pbmVkbHkgdW5wbGVhc2FudAptYW4sIGFtZW5kZWQgdGhpcyB0bywgIlByb2Zlc3NvciBSaW5jZXdpbmQsIG9mIGNvdXJzZS4iCgoiSSB3b3VsZCBsaWtlIHBlcm1pc3Npb24gdG8gZmV0Y2ggYSBub3RlIGZyb20gbXkgbW90aGVyLCBzaXIuIgoKUmlkY3VsbHkgc2lnaGVkLiAgIlJpbmNld2luZCwgeW91IG9uY2UgaW5mb3JtZWQgbWUsIHRvIG15IGV2ZXJsYXN0aW5nCnB1enpsZW1lbnQsIHRoYXQgeW91IG5ldmVyIGtuZXcgeW91ciBtb3RoZXIgYmVjYXVzZSBzaGUgcmFuIGF3YXkgYmVmb3JlCnlvdSB3ZXJlIGJvcm4uICBEaXN0aW5jdGx5IHJlbWVtYmVyIHdyaXRpbmcgaXQgZG93biBpbiBteSBkaWFyeS4gIFdvdWxkCnlvdSBsaWtlIGFub3RoZXIgdHJ5PyIKCiJQZXJtaXNzaW9uIHRvIGdvIGFuZCBmaW5kIG15IG1vdGhlcj8iCgpSaWRjdWxseSBoZXNpdGF0ZWQuICBUaGUgUHJvZmVzc29yIG9mIENydWVsIGFuZCBVbnVzdWFsIEdlb2dyYXBoeSBoYWQgbm8Kc3R1ZGVudHMgYW5kIG5vIHJlYWwgZHV0aWVzIG90aGVyIHRoYW4gdG8gc3RheSBvdXQgb2YgdHJvdWJsZS4gIEFsdGhvdWdoClJpZGN1bGx5IHdvdWxkIG5ldmVyIGFkbWl0IGl0LCBpdCB3YXMgYWdhaW5zdCBhbGwgcmVhc29uIGFuIGVtZXJpdHVzCnBvc2l0aW9uLiAgUmluY2V3aW5kIHdhcyBhIGNvd2FyZCBhbmQgYW4gdW53aXR0aW5nIGNsb3duLCBidXQgaGUgaGFkCnNldmVyYWwgdGltZXMgc2F2ZWQgdGhlIHdvcmxkIGluIHNsaWdodGx5IHB1enpsaW5nIGNpcmN1bXN0YW5jZXMuICBIZSB3YXMKYSBsdWNrIHNpbmssIHRoZSBBcmNoY2hhbmNlbGxvciBkZWNpZGVkLCBkb29tZWQgdG8gYmVpbmcgYSBsaWdodG5pbmcgcm9kCmZvciB0aGUgZmF0ZXMgc28gdGhhdCBldmVyeW9uZSBlbHNlIGRpZG4ndCBoYXZlIHRvLiAgU3VjaCBhIHBlcnNvbiB3YXMKd29ydGggYWxsIGhpcyBtZWFscyBhbmQgbGF1bmRyeSAoaW5jbHVkaW5nIGFuIGFib3ZlLWF2ZXJhZ2UgbGV2ZWwgb2YKc29pbGVkIHBhbnRzKSBhbmQgYSBidWNrZXQgb2YgY29hbCBldmVyeSBkYXkgZXZlbiBpZiBoZSB3YXMsIGluIFJpZGN1bGx5J3MKb3BpbmlvbiwgYSBiaXQgb2YgYSB3aGluZXIuICBIb3dldmVyLCBoZSB3YXMgZmFzdCwgYW5kIHRoZXJlZm9yZSB1c2VmdWwuCgoiTG9vaywiIHNhaWQgUmluY2V3aW5kLCAiYSBteXN0ZXJpb3VzIHVybiB0dXJucyB1cCBhbmQgc3VkZGVubHkgaXQncyBhbGwKYWJvdXQgZm9vdGJhbGwuICBUaGF0IGJvZGVzLiAgSXQgbWVhbnMgdGhhdCBzb21ldGhpbmcgYmFkIGlzIGdvaW5nIHRvCmhhcHBlbi4iCgoiQ29tZSBub3csIGl0IGNvdWxkIGJlIHNvbWV0aGluZyB3b25kZXJmdWwsIiBSaWRjdWxseSBwcm90ZXN0ZWQuCgpSaW5jZXdpbmQgYXBwZWFyZWQgdG8gZ2l2ZSB0aGlzIGR1ZSBjb25zaWRlcmF0aW9uLiAgIkNvdWxkIGJlIHdvbmRlcmZ1bCwKd2lsbCBiZSBkcmVhZGZ1bC4gIFNvcnJ5LCB0aGF0J3MgaG93IGl0IGdvZXMuIgoKIlRoaXMgaXMgVW5zZWVuIFVuaXZlcnNpdHksIFJpbmNld2luZC4gIFdoYXQgaXMgdGhlcmUgdG8gZmVhcj8iIFJpZGN1bGx5CnNhaWQuICAiQXBhcnQgZnJvbSBtZSwgb2YgY291cnNlLiAgR29vZCBoZWF2ZW5zLCB0aGlzIGlzIGEgc3BvcnQuIiAgSGUKcmFpc2VkIGhpcyB2b2ljZS4gICJBcnJhbmdlIHlvdXJzZWx2ZXMgaW50byB0d28gdGVhbXMgYW5kIHBsYXkgZm9vdGJhbGwhIgoKICBbVW5zZWVuIEFjYWRlbWljYWxzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyNjggKHBhc3NhZ2Ugc3RhcnRzIG1pZC1wYXJhZ3JhcGg7IEdsZW5kYSBpcyBjbGVhbmluZyBVVSdzIE5pZ2h0IEtpdGNoZW4pCiVwYXNzYWdlIDEwClsuLi5dICBJZiB5b3Ugd2FudGVkIGEgam9iIGRvbmUgcHJvcGVybHksIHlvdSBoYWQgdG8gZG8gaXQgeW91cnNlbGYuCkp1bGlldCdzIHZlcnNpb24gb2YgY2xlYW5saW5lc3Mgd2FzIG5leHQgdG8gZ29kbGluZXNzLCB3aGljaCB3YXMgdG8gc2F5Cml0IHdhcyBlcnJhdGljLCBwYXN0IGFsbCB1bmRlcnN0YW5kaW5nIGFuZCBzZWxkb20gc2Vlbi4KCiAgW1Vuc2VlbiBBY2FkZW1pY2FscywgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDM1OC0zNTkKJXBhc3NhZ2UgMTEKIldlbGwsIGJpZyBkYXksIGxhZHMhIiBzYWlkIFJpZGN1bGx5LiAgIkxvb2tzIGxpa2UgdGhlcmUncyBnb2luZyB0byBiZSBhCm5pY2UgZGF5IGZvciBpdCBhcyB3ZWxsLiAgVGhleSdyZSBhbGwgb3ZlciB0aGVyZSB3YWl0aW5nIGZvciB1cyB0byBnaXZlCnRoZW0gYSBzaG93LiAgSSB3YW50IHlvdSB0byBhcHByb2FjaCB0aGlzIGluIHRoZSBiZXN0IHRyYWRpdGlvbnMgb2YgVW5zZWVuClVuaXZlcnNpdHkgc3BvcnRzbWFuc2hpcCwgd2hpY2ggaXMgdG8gY2hlYXQgd2hlbmV2ZXIgeW91IGFyZSB1bm9ic2VydmVkLAp0aG91Z2ggSSBmZWFyIHRoYXQgdGhlIGNoYW5jZSBvZiBhbnlvbmUgYmVpbmcgdW5vYnNlcnZlZCB0b2RheSBpcyByZW1vdGUuCkJ1dCBpbiBhbnkgY2FzZSwgSSB3YW50IHlvdSB0byBnaXZlIGl0IG9uZSBodW5kcmVkIGFuZCB0ZW4gcGVyY2VudC4iCgoiRXhjdXNlIG1lLCBBcmNoY2hhbmNlbGxvciwiIHNhaWQgUG9uZGVyIFN0aWJib25zLiAgIkkgdW5kZXJzdGFuZCB0aGUKc2Vuc2Ugb2Ygd2hhdCB5b3UgYXJlIHNheWluZywgYnV0IHRoZXJlIGlzIG9ubHkgb25lIGh1bmRyZWQgcGVyY2VudC4iCgoiV2VsbCwgdGhleSBjb3VsZCBnaXZlIGl0IG9uZSBodW5kcmVkIGFuZCB0ZW4gcGVyY2VudCBpZiB0aGV5IHRyaWVkCmhhcmRlciwiIHNhaWQgUmlkY3VsbHkuCgoiV2VsbCwgeWVzIGFuZCBubywgc2lyLiAgQnV0LCBpbiBmYWN0LCB0aGF0IHdvdWxkIG1lYW4gdGhhdCB5b3UgaGFkIGp1c3QKbWFkZSB0aGUgb25lIGh1bmRyZWQgcGVyY2VudCBiaWdnZXIgd2hpbGUgaXQgd291bGQgc3RpbGwgYmUgb25lIGh1bmRyZWQKcGVyY2VudC4gIEJlc2lkZXMsIHRoZXJlIGlzIG9ubHkgc28gZmFzdCBhIG1hbiBjYW4gcnVuLCBvbmx5IHNvIGhpZ2ggYSBtYW4KY2FuIGp1bXAuICBJIGp1c3Qgd2FudGVkIHRvIG1ha2UgdGhlIHBvaW50LiIKCiJHb29kIHBvaW50LCB3ZWxsIG1hZGUsIiBzYWlkIFJpZGN1bGx5LCBkaXNtaXNzaW5nIGl0IGluc3RhbnRseS4gIFsuLi5dCgogIFtVbnNlZW4gQWNhZGVtaWNhbHMsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDM2MyAobW9yZSBseXJpY3Mgb2NjdXIgbGF0ZXIgb247IHRoZXkncmUgZ2VuZXJhbGx5IGFib3V0IHVzaW5nCiMgICAgICAgICBlY29ub21pY3MgdG8gY29ucXVlciBhbnkgb3Bwb3NpdGlvbikKJXBhc3NhZ2UgMTIKVGhlIHNpbmdpbmcgb2YgdGhlIE5hdGlvbmFsIEFudGhlbSB3YXMgYWx3YXlzIGEgcmFnZ2VkIGFmZmFpciwgdGhlIGdvb2QKcGVvcGxlIG9mIEFua2gtTW9ycG9yayBmZWVsaW5nIHRoYXQgaXQgd2FzIHVucGF0cmlvdGljIHRvIHNpbmcgc29uZ3MgYWJvdXQKaG93IHBhdHJpb3RpYyB5b3Ugd2VyZSwgdGFraW5nIHRoZSB2aWV3IHRoYXQgc29tZW9uZSBzaW5naW5nIGEgc29uZyBhYm91dApob3cgcGF0cmlvdGljIHRoZXkgd2VyZSB3YXMgZWl0aGVyIHVwIHRvIHNvbWV0aGluZyBvciBhIEhlYWQgb2YgU3RhdGUuKDEpCgpBbiBhZGRpdGlvbmFsIHByb2JsZW0gdG9kYXkgbGF5IGluIHRoZSBhY291c3RpY3Mgb2YgdGhlIGFyZW5hLCB3aGljaCB3ZXJlCnJhdGhlciB0b28gZ29vZCwgY291cGxlZCB3aXRoIHRoZSBmYWN0IHRoYXQgdGhlIHNwZWVkIG9mIHNvdW5kIGF0IG9uZSBlbmQKb2YgdGhlIHN0YWRpdW0gd2FzIHNsaWdodGx5IG9mZmJlYXQgY29tcGFyZWQgd2l0aCB0aGUgb3RoZXIgZW5kLCBhCmRyYXdiYWNrIGV4YWNlcmJhdGVkIHdoZW4gYm90aCBzaWRlcyB0cmllZCB0byByZWNvdmVyIHRoZSBnYXAuCgpUaGVzZSBhY291c3RpY2FsIGFub21hbGllcyBkaWQgbm90IGNvdW50IGZvciBtdWNoIGlmIHlvdSB3ZXJlIHN0YW5kaW5nCm5leHQgdG8gTXVzdHJ1bSBSaWRjdWxseSwgYXMgdGhlIEFyY2hjaGFuY2VsbG9yIHdhcyBvbmUgb2YgdGhvc2UgZ2VudGxlbWFuCndobyB3aWxsIHNpbmcgaXQgYmVhdXRpZnVsbHksIGNvcnJlY3RseSBlbnVuY2lhdGVkIGFuZCB2ZXJ5LCB2ZXJ5IGxvdWRseS4KCiInV2hlbiBkcmFnb25zIGJlbGNoIGFuZCBoaXBwb3MgZmxlZSwgbXkgdGhvdWdodHMsIEFua2gtTW9ycG9yaywgYXJlIG9mCnRoZWUuJyIgaGUgYmVnYW4uCgooMSkgaS5lLiwgdXAgdG8gc29tZXRoaW5nLgoKICBbVW5zZWVuIEFjYWRlbWljYWxzLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKJWUgdGl0bGUKIwojCiMKJXRpdGxlIEkgU2hhbGwgV2VhciBNaWRuaWdodCAoMTMpCiMgcC4gNDQ3IChIYXJwZXIgZWRpdGlvbjsgdGhpcyBwYXNzYWdlIGlzIGEgcXVvdGUgZnJvbSB0aGUgIkF1dGh1cidzIE5vdGUiLAojICAgICAgICAgdGhyZWUgZXh0cmEgcGFnZXMgYWZ0ZXIgdGhlIGNvbmNsdXNpb24gb2YgdGhlIHN0b3J5OyB0aGVyZSBpcyBhCiMgICAgICAgICBzaW1pbGFyLCBzbGlnaHRseSBzaG9ydGVyIHZlcnNpb24gb2YgdGhpcyBpbiB0aGUgdGV4dCBvbiBwLiAyMzYsCiMgICAgICAgICB3aGVyZSBpdCdzIHByZWNlZGVkIGJ5ICJUaGUgcGFzdCBuZWVkcyB0byBiZSByZW1lbWJlcmVkLiIgYnV0CiMgICAgICAgICBsYWNrcyB0aGUgZmluYWwgJ2dvaW5nIHdyb25nJyBzZW50ZW5jZSkKJXBhc3NhZ2UgMQpJdCBpcyBpbXBvcnRhbnQgdGhhdCB3ZSBrbm93IHdoZXJlIHdlIGNvbWUgZnJvbSwgYmVjYXVzZSBpZiB5b3UgZG8gbm90Cmtub3cgd2hlcmUgeW91IGNvbWUgZnJvbSwgdGhlbiB5b3UgZG9uJ3Qga25vdyB3aGVyZSB5b3UgYXJlLCBhbmQgaWYgeW91CmRvbid0IGtub3cgd2hlcmUgeW91IGFyZSwgeW91IGRvbid0IGtub3cgd2hlcmUgeW91J3JlIGdvaW5nLiAgQW5kIGlmIHlvdQpkb24ndCBrbm93IHdoZXJlIHlvdSdyZSBnb2luZywgeW91J3JlIHByb2JhYmx5IGdvaW5nIHdyb25nLgoKICBbSSBTaGFsbCBXZWFyIE1pZG5pZ2h0LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gNDI5LTQzMCAocGFzc2FnZSBzdGFydHMgbWlkLXBhcmFncmFwaCBhbmQgZW5kcyBtaWQtcGFyYWdyYXBoKQolcGFzc2FnZSAyCiJbLi4uXSAgVGhlcmUgaGF2ZSBiZWVuIHRpbWVzLCBsYXRlbHksIHdoZW4gSSBkZWFybHkgd2lzaGVkIHRoYXQgSSBjb3VsZApjaGFuZ2UgdGhlIHBhc3QuICBXZWxsLCBJIGNhbid0LCBidXQgSSBjYW4gY2hhbmdlIHRoZSBwcmVzZW50LCBzbyB0aGF0CndoZW4gaXQgYmVjb21lcyB0aGUgcGFzdCBpdCB3aWxsIHR1cm4gb3V0IHRvIGJlIGEgcGFzdCB3b3J0aCBoYXZpbmcuIFsuLi5dIgoKICBbSSBTaGFsbCBXZWFyIE1pZG5pZ2h0LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyIChwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoOyBzY2VuZSBpcyBhIHZpbGxhZ2UgZmFpcikKJXBhc3NhZ2UgMwpbLi4uXSAgQW5kIHNvIGhlcmUsIFsuLi5dLCB5b3UgaGVhcmQgdGhlIHBlcm1hbmVudCBzY3JlYW0gb2YsIHdlbGwsCmV2ZXJ5b25lLiAgSXQgd2FzIGNhbGxlZCBoYXZpbmcgZnVuLiAgVGhlIG9ubHkgcGVvcGxlIG5vdCBtYWtpbmcgYW55IG5vaXNlCndlcmUgdGhlIHRoaWV2ZXMgYW5kIHBpY2twb2NrZXRzLCB3aG8gd2VudCBhYm91dCB0aGVpciBidXNpbmVzcyB3aXRoCmNvbW1lbmRhYmxlIHNpbGVuY2UsIGFuZCB0aGV5IGRpZG4ndCBjb21lIG5lYXIgVGlmZmFueTsgd2hvIHdvdWxkIHBpY2sgYQp3aXRjaCdzIHBvY2tldD8gIFlvdSB3b3VsZCBiZSBsdWNreSB0byBnZXQgYWxsIHlvdXIgZmluZ2VycyBiYWNrLiAgQXQKbGVhc3QsIHRoYXQncyB3aGF0IHRoZXkgZmVhcmVkLCBhbmQgYSBzZW5zaWJsZSB3aXRjaCB3b3VsZCBlbmNvdXJhZ2UgdGhlbQppbiB0aGlzIGZlYXIuCgogIFtJIFNoYWxsIFdlYXIgTWlkbmlnaHQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDYxCiVwYXNzYWdlIDQKL1RoZSBoYXJlIHJ1bnMgaW50byB0aGUgZmlyZS4vCgpIYWQgc2hlIHNlZW4gdGhhdCB3cml0dGVuIGRvd24gYW55d2hlcmU/ICBIYWQgc2hlIGhlYXJkIGl0IGFzIHBhcnQgb2YgYQpzb25nPyAgQSBudXJzZXJ5IHJoeW1lPyAgV2hhdCBoYWQgdGhlIGhhcmUgZ290IHRvIGRvIHdpdGggYW55dGhpbmc/ICBCdXQKc2hlIHdhcyBhIHdpdGNoLCBhZnRlciBhbGwsIGFuZCB0aGVyZSB3YXMgYSBqb2IgdG8gZG8uICBNeXN0ZXJpb3VzIG9tZW5zCmNvdWxkIHdhaXQuICBXaXRjaGVzIGtuZXcgdGhhdCBteXN0ZXJpb3VzIG9tZW5zIHdlcmUgYXJvdW5kIGFsbCB0aGUgdGltZS4KVGhlIHdvcmxkIHdhcyBhbHdheXMgdmVyeSBuZWFybHkgZHJvd25pbmcgaW4gbXlzdGVyaW91cyBvbWVucy4gIFlvdSBqdXN0CmhhZCB0byBwaWNrIHRoZSBvbmUgdGhhdCB3YXMgY29udmVuaWVudC4KCiAgW0kgU2hhbGwgV2VhciBNaWRuaWdodCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gNjQKJXBhc3NhZ2UgNQpUaGF0IHdhcyB0aGUgdGhpbmcgYWJvdXQgdGhvdWdodHMuICBUaGV5IHRob3VnaHQgdGhlbXNlbHZlcywgYW5kIHRoZW4KZHJvcHBlZCBpbnRvIHlvdXIgaGVhZCBpbiB0aGUgaG9wZSB0aGF0IHlvdSB3b3VsZCB0aGluayBzbyB0b28uICBZb3UgaGFkCnRvIHNsYXAgdGhlbSBkb3duLCB0aG91Z2h0cyBsaWtlIHRoYXQ7IHRoZXkgd291bGQgdGFrZSBhIHdpdGNoIG92ZXIgaWYgc2hlCmxldCB0aGVtLiAgQW5kIHRoZW4gaXQgd291bGQgYWxsIGJyZWFrIGRvd24sIGFuZCBub3RoaW5nIHdvdWxkIGJlIGxlZnQgYnV0CnRoZSBjYWNrbGluZy4KCiAgW0kgU2hhbGwgV2VhciBNaWRuaWdodCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gNjUgKHBhc3NhZ2Ugc3RhcnRzIG1pZC1wYXJhZ3JhcGgpCiVwYXNzYWdlIDYKIlsuLi5dICBJdCBqdXN0IHNvIGhhcHBlbnMgdGhhdCBJIHdhcyBwYXNzaW5nIGJ5LCB5ZSBrZW4sIGFuZCBub3QKZm9sbG93aW5nIHllIGF0IGFsbC4gIE9uZSBvZiB0aGVtIGNvaW5jaWRlbmNlcy4iCgoiVGhlcmUgaGF2ZSBiZWVuIGEgbG90IG9mIHRob3NlIGNvaW5jaWRlbmNlcyBsYXRlbHksIiBzYWlkIFRpZmZhbnkuCgoiQXllLCIgc2FpZCBSb2IsIGdyaW5uaW5nLCAiaXQgbXVzdCBiZSBhbm90aGVyIGNvaW5jaWRlbmNlLiIKCiAgW0kgU2hhbGwgV2VhciBNaWRuaWdodCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDE3OS0xODAKJXBhc3NhZ2UgNwpUaWZmYW55IGNsZWFyZWQgaGVyIHRocm9hdC4gICJXZWxsLCIgc2hlIHNhaWQsICJJIHN1cHBvc2UgUm9iIEFueWJvZHkgd291bGQKdGVsbCB5b3UgdGhhdCB0aGVyZSBhcmUgdGltZXMgd2hlbiBwcm9taXNlcyBzaG91bGQgYmUga2VwdCBhbmQgdGltZXMgd2hlbgpwcm9taXNlcyBzaG91bGQgYmUgYnJva2VuLCBhbmQgaXQgdGFrZXMgYSBGZWVnbGUgdG8ga25vdyB0aGUgZGlmZmVyZW5jZS4iCgpNcnMuIFByb3VzdCBncmlubmVkIGh1Z2VseS4gICJZb3UgY291bGQgYWxtb3N0IGJlIGZyb20gdGhlIGNpdHksIE1pc3MKVGlmZmFueSBBY2hpbmcuIgoKICBbSSBTaGFsbCBXZWFyIE1pZG5pZ2h0LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxODMgKFdlZSBNYWQgQXJ0aHVyIGlzIGEgbWVtYmVyIG9mIHRoZSBBbmtoLU1vcnBvcmsgV2F0Y2g7IGhlIHdhcyBhCiMgICAgICAgICBmb3VuZGxpbmcgcmFpc2VkIGJ5IGdub21lcyBhbmQgZGlkbid0IGtub3cgaGUgd2FzIGEgRmVlZ2xlIHVudGlsCiMgICAgICAgICBoZSBtZXQgd2l0aCB0aGUgb25lcyBhY2NvbXBhbnlpbmcgVGlmZmFueSkKJXBhc3NhZ2UgOApEZXNwaXRlIGhpbXNlbGYsIFdlZSBNYWQgQXJ0aHVyIHdhcyBncmlubmluZy4gICJIYXZlIHlvdSBib3lzIGdvdCBubyBzaGFtZT8iCgpSb2IgQW55Ym9keSBtYXRjaGVkIGhpbSBncmluIGZvciBncmluLiAgIkkgY291bGRuYSBzYXksIiBoZSByZXBsaWVkLCAiYnV0CmlmIHdlIGhhdmUsIGl0IHByb2JhYmx5IGJlbG9uZ2VkIHRhZSBzb21lYm9keSBlbHNlLiIKCiAgW0kgU2hhbGwgV2VhciBNaWRuaWdodCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjE5IChmb290bm90ZSkKJXBhc3NhZ2UgOQpUaGVyZSBpcyBhIGxvdCBvZiBmb2xrbG9yZSBhYm91dCBlcXVlc3RyaWFuIHN0YXR1ZXMsIGVzcGVjaWFsbHkgdGhlIG9uZXMKd2l0aCByaWRlcnMgb24gdGhlbS4gIFRoZXJlIGlzIHNhaWQgdG8gYmUgYSBjb2RlIGluIHRoZSBudW1iZXIgYW5kCnBsYWNlbWVudCBvZiB0aGUgaG9yc2UncyBob292ZXM6ICBJZiBvbmUgb2YgdGhlIGhvcnNlJ3MgaG9vdmVzIGlzIGluIHRoZQphaXIsIHRoZSByaWRlciB3YXMgd291bmRlZCBpbiBiYXR0bGU7IHR3byBsZWdzIGluIHRoZSBhaXIgbWVhbnMgdGhhdCB0aGUKcmlkZXIgd2FzIGtpbGxlZCBpbiBiYXR0bGU7IHRocmVlIGxlZ3MgaW4gdGhlIGFpciBpbmRpY2F0ZXMgdGhhdCB0aGUKcmlkZXIgZ290IGxvc3Qgb24gdGhlIHdheSB0byB0aGUgYmF0dGxlOyBhbmQgZm91ciBsZWdzIGluIHRoZSBhaXIgbWVhbnMKdGhhdCB0aGUgc2N1bHB0b3Igd2FzIHZlcnksIHZlcnkgY2xldmVyLiAgRml2ZSBsZWdzIGluIHRoZSBhaXIgbWVhbnMgdGhhdAp0aGVyZSdzIHByb2JhYmx5IGF0IGxlYXN0IG9uZSBvdGhlciBob3JzZSBzdGFuZGluZyBiZWhpbmQgdGhlIG9uZSB5b3UncmUKbG9va2luZyBhdDsgYW5kIHRoZSByaWRlciBseWluZyBvbiB0aGUgZ3JvdW5kIHdpdGggaGlzIGhvcnNlIGx5aW5nIG9uIHRvcApvZiBoaW0gd2l0aCBhbGwgZm91ciBsZWdzIGluIHRoZSBhaXIgbWVhbnMgdGhhdCB0aGUgcmlkZXIgd2FzIGVpdGhlciBhCnZlcnkgaW5jb21wZXRlbnQgaG9yc2VtYW4gb3Igb3duZWQgYSB2ZXJ5IGJhZC10ZW1wZXJlZCBob3JzZS4KCiAgW0kgU2hhbGwgV2VhciBNaWRuaWdodCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMzE4IChwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoIGFuZCBlbmRzIG1pZC1wYXJhZ3JhcGgpCiVwYXNzYWdlIDEwClsuLi5dICAiS25vd2xlZGdlIGlzIHBvd2VyLCBwb3dlciBpcyBlbmVyZ3ksIGVuZXJneSBpcyBtYXR0ZXIsIG1hdHRlciBpcwptYXNzLCBhbmQgbWFzcyBjaGFuZ2VzIHRpbWUgYW5kIHNwYWNlLiIgWy4uLl0KCiAgW0kgU2hhbGwgV2VhciBNaWRuaWdodCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMzYyIChwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoOyBzcGVha2VyIGlzIFByZXN0b24sIGEgY2FzdGxlIGd1YXJkOwojICAgICAgICAgcXVvdGUgaXMgYSBwYXJvZHkgb2YgSi5SLlIuVG9sa2llbidzICJEbyBub3QgbWVkZGxlIGluIHRoZSBhZmZhaXJzCiMgICAgICAgICBvZiB3aXphcmRzLCBmb3IgdGhleSBhcmUgc3VidGxlLCBhbmQgcXVpY2sgdG8gYW5nZXIuIikKJXBhc3NhZ2UgMTEKWy4uLl0gICJNeSBncmFubnkgc2FpZCwgJ0Rvbid0IG1lZGRsZSBpbiB0aGUgYWZmYWlycyBvZiB3aXRjaGVzIGJlY2F1c2UKdGhleSBjbG91dCB5b3UgYXJvdW5kIHRoZSBlYXIuJyIKCiAgW0kgU2hhbGwgV2VhciBNaWRuaWdodCwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDM4Ni0zODcgKFRpZmZhbnkgaXMgdHJ5aW5nIHRvIHJlc2N1ZSBzb21lIHdpdGNoZXMgZnJvbSBhIGNhc3RsZSByb29mKQolcGFzc2FnZSAxMgpUaWZmYW55IGNyYXdsZWQgYSBsaXR0bGUgZmFydGhlciwgd2VsbCBhd2FyZSBvZiB0aGUgc2hlZXIgZHJvcCBhbiBpbmNoCmF3YXkgZnJvbSBoZXIgaGFuZC4gICJQcmVzdG9uIGhhcyBnb25lIHRvIGZldGNoIGEgcm9wZS4gIERvIHlvdSBoYXZlIGEKYnJvb21zdGljaz8iCgoiQSBzaGVlcCBjcmFzaGVkIGludG8gaXQsIiBzYWlkIE1ycy4gUHJvdXN0LgoKVGlmZmFueSBjb3VsZCBqdXN0IG1ha2UgaGVyIG91dCBub3cuICAiWW91IGNyYXNoZWQgaW50byBhIHNoZWVwIGluCi90aGUgYWlyLz8iCgoiTWF5YmUgaXQgd2FzIGEgY293LCBvciBzb21ldGhpbmcuICBXaGF0IGFyZSB0aG9zZSB0aGluZ3MgdGhhdCBnbwovc251ZmZsZSBzbnVmZmxlLz8iCgoiWW91IHJhbiBpbnRvIGEgZmx5aW5nIGhlZGdlaG9nPyIKCiJObywgYXMgaXQgaGFwcGVuZWQuICBXZSB3ZXJlIGRvd24gbG93LCBsb29raW5nIGZvciBhIGJ1c2ggZm9yIE1ycy4KSGFwcGVuc3RhbmNlLiIgIFRoZXJlIHdhcyBhIHNpZ2ggaW4gdGhlIGdsb29tLiAgIkl0J3MgYmVjYXVzZSBvZiBoZXIKdHJvdWJsZSwgcG9vciBzb3VsLiAgV2UndmUgc3RvcHBlZCBhdCBhIGxvdCBvZiBidXNoZXMgb24gdGhlIHdheSBoZXJlLApiZWxpZXZlIG1lISAgQW5kIGRvIHlvdSBrbm93IHdoYXQ/ICBJbnNpZGUgZXZlcnkgc2luZ2xlIG9uZSBvZiB0aGVtIGlzCnNvbWV0aGluZyB0aGF0IHN0aW5ncywgYml0ZXMsIGtpY2tzLCBzY3JlYW1zLCBob3dscywgc3F1ZWxjaGVzLCBmYXJ0cwplbm9ybW91c2x5LCBnb2VzIGFsbCBzcGlreSwgdHJpZXMgdG8ga25vY2sgeW91IG92ZXIsIG9yIGRvZXMgYW4gZW5vcm1vdXMKcGlsZSBvZiBwb28hICBIYXZlbid0IHlvdSBwZW9wbGUgdXAgaGVyZSBldmVyIGhlYXJkIG9mIHBvcmNlbGFpbj8iCgpUaWZmYW55IHdhcyB0YWtlbiBhYmFjay4gICJXZWxsLCB5ZXMsIGJ1dCBub3QgaW4gdGhlIGZpZWxkcyEiCgoiVGhleSB3b3VsZCBiZSBhbGwgdGhlIGJldHRlciBmb3IgaXQsIiBzYWlkIE1ycy4gUHJvdXN0LiAgIkkndmUgcnVpbmVkCmEgZGVjZW50IHBhaXIgb2YgYm9vdHMsIEkgaGF2ZS4iCgogIFtJIFNoYWxsIFdlYXIgTWlkbmlnaHQsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDQ0MiAocGFzc2FnZSBzdGFydHMgbWlkLXBhcmFncmFwaDsgc2VlIC9UaGUgV2VlIEZyZWUgTWVuLzsKIyAgICAgICAgICd1bmRlcnJyJyBhbmQgJ2FnLXJyZWVlZWQnIGFyZSBhY2N1cmF0ZTsgJ2Fyci1hbmdlbWVudCcgaXMKIyAgICAgICAgIGh5cGhlbmF0ZWQgdG8gc3BhbiBsaW5lcy0taXQncyBqdXN0IGEgZ3Vlc3MgdGhhdCBpdCB3b3VsZCBoYXZlCiMgICAgICAgICBiZWVuIGh5cGhlbmF0ZWQgYW55d2F5KQolcGFzc2FnZSAxMwoiTmFlIGtpbmcsIG5hZSBxdWluLCBuYWUgbGFpcmQhICBPbmUgYmFyb24tLWFuZCB1bmRlcnJyIG11dHVhbGx5CmFnLXJyZWVlZWQgYXJyLWFuZ2VtZW50LCB5ZSBrZW4hIgoKICBbSSBTaGFsbCBXZWFyIE1pZG5pZ2h0LCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKJWUgdGl0bGUKIwojCiMKJXRpdGxlIFNudWZmICgxNikKIyBwLiAxNjggKEhhcnBlciBlZGl0aW9uOyAnYXgnIGlzIHNwZWxsZWQgd2l0aG91dCB0aGUgJ2UnIHRoZXJlLi4uKQolcGFzc2FnZSAxClRoZXkgd2VyZSBjcnVkZSB3ZWFwb25zLCB0byBiZSBzdXJlLCBidXQgYSBmbGludCBheGUgaGl0dGluZyB5b3VyIGhlYWQgZG9lcwpub3QgbmVlZCBhIGRlZ3JlZSBpbiBwaHlzaWNzLgoKICBbU251ZmYsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQolcGFzc2FnZSAyCkl0IGlzIGEgc3RyYW5nZSB0aGluZyB0byBmaW5kIHlvdXJzZWxmIGRvaW5nIHNvbWV0aGluZyB5b3UgaGF2ZSBhcHBhcmVudGx5CmFsd2F5cyB3YW50ZWQgdG8gZG8sIHdoZW4gaW4gZmFjdCB1cCB1bnRpbCB0aGF0IG1vbWVudCB5b3UgaGFkIG5ldmVyIGtub3duCnRoYXQgeW91IGFsd2F5cyB3YW50ZWQgdG8gZG8gaXQuLi4KCiAgW1NudWZmLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyICh0aGUgc3ViamVjdCBpcyBnb2JsaW5zKQolcGFzc2FnZSAzCkF0IHRoaXMgcG9pbnQsIExvcmQgVmV0aW5hcmksIFBhdHJpY2lhbiBvZiBBbmtoLU1vcnBvcmssIHN0b3BwZWQgcmVhZGluZwphbmQgc3RhcmVkIGF0IG5vdGhpbmcuICBBZnRlciBhIGZldyBzZWNvbmRzLCBub3RoaW5nIHdhcyBlY2xpcHNlZCBieSB0aGUKZm9ybSBvZiBEcnVta25vdHQsIGhpcyBzZWNyZXRhcnkgKHdobywgaXQgbXVzdCBiZSBzYWlkLCBoYWQgc3BlbnQgYSBjYXJlZXIKdHVybmluZyBoaW1zZWxmIGFzIG11Y2ggbGlrZSBub3RoaW5nIGFzIGFueXRoaW5nKS4KCkRydW1rbm90dCBzYWlkLCAiWW91IGxvb2sgcGVuc2l2ZSwgbXkgbG9yZCwiIHRvIHdoaWNoIG9ic2VydmF0aW9uIGhlCmFwcGVuZGVkIGEgbW9zdCBkZWxpY2F0ZSBxdWVzdGlvbiBtYXJrLCB3aGljaCBncmFkdWFsbHkgZXZhcG9yYXRlZC4KCiJBd2FzaCB3aXRoIHRlYXJzLCBEcnVta25vdHQsIGF3YXNoIHdpdGggdGVhcnMuIgoKRHJ1bWtub3R0IHN0b3BwZWQgZHVzdGluZyB0aGUgaW1wZWNjYWJseSBzaGlueSBibGFjayBsYWNxdWVyZWQgZGVzay4KIlBhc3RvciBPYXRzIGlzIGEgdmVyeSBwZXJzdWFzaXZlIHdyaXRlciwgaXNuJ3QgaGUsIHNpci4uLj8iCgoiSW5kZWVkIGhlIGlzLCBEcnVta25vdHQsIGJ1dCB0aGUgYmFzaWMgcHJvYmxlbSByZW1haW5zIGFuZCBpdCBpcyB0aGlzOgpodW1hbml0eSBtYXkgY29tZSB0byB0ZXJtcyB3aXRoIHRoZSBkd2FyZiwgdGhlIHRyb2xsIGFuZCBldmVuIHRoZSBvcmMsCnRlcnJpZnlpbmcgdGhvdWdoIGFsbCB0aGVzZSBoYXZlIHByb3ZlZCB0byBiZSBhdCB0aW1lcywgYW5kIHlvdSBrbm93IHdoeQp0aGlzIGlzLCBEcnVta25vdHQ/IgoKVGhlIHNlY3JldGFyeSBjYXJlZnVsbHkgZm9sZGVkIHRoZSBkdXN0ZXIgaGUgaGFkIGJlZW4gdXNpbmcgYW5kIGxvb2tlZCBhdAp0aGUgY2VpbGluZy4gICJJIHdvdWxkIHZlbnR1cmUgdG8gc3VnZ2VzdCwgbXkgbG9yZCwgdGhhdCBpbiB0aGVpciB2aW9sZW5jZQp3ZSByZWNvZ25pemUgb3Vyc2VsdmVzPyIKCiJPaCwgd2VsbCBkb25lLCBEcnVta25vdHQsIEkgc2hhbGwgbWFrZSBhIGN5bmljIG9mIHlvdSB5ZXQhICBQcmVkYXRvcnMKcmVzcGVjdCBvdGhlciBwcmVkYXRvcnMsIGRvIHRoZXkgbm90PyAgVGhleSBtYXkgcGVyaGFwcyBldmVuIHJlc3BlY3QgdGhlCnByZXk6ICB0aGUgbGlvbiBtYXkgbGllIGRvd24gd2l0aCB0aGUgbGFtYiwgZXZlbiBpZiBvbmx5IHRoZSBsaW9uIGlzCmxpa2VseSB0byBnZXQgdXAgYWdhaW4sIGJ1dCB0aGUgbGlvbiB3aWxsIG5vdCBsaWUgZG93biB3aXRoIHRoZSByYXQuClZlcm1pbiwgRHJ1bWtub3R0LCBhbiBlbnRpcmUgcmFjZSByZWR1Y2VkIHRvIHZlcm1pbiEiCgogIFtTbnVmZiwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gNgolcGFzc2FnZSA0ClZpbWVzIGdydW50ZWQuICAiV2hlcmUgdGhlcmUgYXJlIHBvbGljZW1lbiB0aGVyZSdzIGNyaW1lLCBzZXJnZWFudCwKcmVtZW1iZXIgdGhhdC4iCgoiWWVzLCBJIGRvLCBzaXIsIGFsdGhvdWdoIEkgdGhpbmsgaXQgc291bmRzIGJldHRlciB3aXRoIGEgbGl0dGxlIHJlb3JkZXJpbmcKb2YgdGhlIHdvcmRzLiIKCiAgW1NudWZmLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gNDYtNDcgKHBhc3NhZ2Ugc3RhcnRzIG1pZC1wYXJhZ3JhcGggYW5kIGVuZHMgbWlkLXBhcmFncmFwaDsgaXQncyBhCiMgICAgICAgICAgIGxvbmcgc2xvZyBmb3IgYSB3ZWFrIHB1bmNobGluZS4uLikKJXBhc3NhZ2UgNQoiWy4uLl0gIFRoZSB0aGlyZCBlYXJsLCAnTWFkJyBKYWNrIFJhbWtpbiwgaGFkIGEgYnJvdGhlciBjYWxsZWQKV29vbHN0aG9ycGUsIHByb2JhYmx5IGZvciBoaXMgc2lucy4gIEhlIHdhcyBzb21ldGhpbmcgb2YgYSBzY2hvbGFyIGFuZAp3b3VsZCBoYXZlIGJlZW4gc2VudCB0byB0aGUgdW5pdmVyc2l0eSB0byBiZWNvbWUgYSB3aXphcmQgd2VyZSBpdCBub3QgZm9yCnRoZSBmYWN0IHRoYXQgaGlzIGJyb3RoZXIgbGV0IGl0IGJlIGtub3duIHRoYXQgYW55IG1hbGUgc2libGluZyBvZiBoaXMgd2hvCnRvb2sgdXAgYSBwcm9mZXNzaW9uIHRoYXQgaW52b2x2ZWQgd2VhcmluZyBhIGRyZXNzIHdvdWxkIGJlIGRpc2luaGVyaXRlZAp3aXRoIGEgY2xlYXZlci4KCiJOZXZlcnRoZWxlc3MsIHlvdW5nIFdvb2xzdGhvcnBlIHBlcnNldmVyZWQgaW4gaGlzIHN0dWRpZXMgaW4gbmF0dXJhbApwaGlsb3NvcGh5IGluIHRoZSB3YXkgYSBnZW50bGVtYW4gc2hvdWxkLCBieSBkaWdnaW5nIGludG8gYW55IHN1c3BpY2lvdXMtCmxvb2tpbmcgYnVyaWFsIG1vdW5kcyBoZSBjb3VsZCBmaW5kIGluIHRoZSBuZWlnaGJvcmhvb2QsIGZpbGxpbmcgdXAgaGlzCmxpemFyZCBwcmVzcyB3aXRoIGFzIG1hbnkgcmFyZSBzcGVjaWVzIGFzIGhlIGNvdWxkIGNvbGxlY3QsIGFuZCBkcnlpbmcKc2FtcGxlcyBvZiBhbnkgZmxvd2VycyBoZSBjb3VsZCBmaW5kIGJlZm9yZSB0aGV5IGJlY2FtZSBleHRpbmN0LiAgVGhlCnN0b3J5IHJ1bnMgdGhhdCwgb24gb25lIHdhcm0gc3VtbWVyIGRheSwgaGUgZG96ZWQgb2ZmIHVuZGVyIGFuIGFwcGxlIHRyZWUKYW5kIHdhcyBhd2FrZW5lZCB3aGVuIGFuIGFwcGxlIGZlbGwgb24gaGlzIGhlYWQuICBBIGxlc3NlciBtYW4sIGFzIGhpcwpiaW9ncmFwaGVyIHB1dCBpdCwgd291bGQgaGF2ZSBzZWVuIG5vdGhpbmcgdW50b3dhcmQgYWJvdXQgdGhpcywgYnV0Cldvb2xzdGhvcnBlIHN1cm1pc2VkIHRoYXQsIHNpbmNlIGFwcGxlcyBhbmQgcHJhY3RpY2FsbHkgZXZlcnl0aGluZyBlbHNlCmFsd2F5cyBmZWxsIGRvd24sIHRoZW4gdGhlIHdvcmxkIHdvdWxkIGV2ZW50dWFsbHkgYmVjb21lIGRhbmdlcm91c2x5CnVuYmFsYW5jZWQuLi4gdW5sZXNzIHRoZXJlIHdhcyBhbm90aGVyIGFnZW5jeSBpbnZvbHZlZCB0aGF0IG5hdHVyYWwKcGhpbG9zb3BoeSBoYWQgeWV0IHRvIGRpc2NvdmVyLiAgSGUgbG9zdCBubyB0aW1lIGluIGRyYWdnaW5nIG9uZSBvZiB0aGUKZm9vdG1lbiB0byB0aGUgb3JjaGFyZCBhbmQgb3JkZXJpbmcgaGltLCBvbiB0aGUgcGFpbiBvZiBkaXNtaXNzYWwsIHRvIGxpZQp1bmRlciB0aGUgdHJlZSB1bnRpbCBhbiBhcHBsZSBoaXQgaGltIG9uIHRoZSBoZWFkISAgVGhlIHBvc3NpYmlsaXR5IG9mCnRoaXMgaGFwcGVuaW5nIHdhcyBpbmNyZWFzZWQgYnkgYW5vdGhlciBmb290bWFuIHdobyBoYWQgYmVlbiB0b2xkIGJ5Cldvb2xzdGhvcnBlIHRvIHNoYWtlIHRoZSB0cmVlIHZpZ29yb3VzbHkgdW50aWwgdGhlIHJlcXVpcmVkIGFwcGxlIGZlbGwuCldvb2xzdGhvcnBlIHdhcyByZWFkeSB0byBvYnNlcnZlIHRoaXMgZnJvbSBhIGRpc3RhbmNlLgoKIldobyBjYW4gaW1hZ2luZSBoaXMgam95IHdoZW4gdGhlIGluZXZpdGFibGUgYXBwbGUgZmVsbCBhbmQgYSBzZWNvbmQgYXBwbGUKd2FzIHNlZW4gcmlzaW5nIGZyb20gdGhlIHRyZWUgYW5kIGRpc2FwcGVhcmluZyBhdCBzcGVlZCBpbnRvIHRoZSB2YXVsdHMgb2YKaGVhdmVuLCBwcm92aW5nIHRoZSBoeXBvdGhlc2lzIHRoYXQgd2hhdCBnb2VzIHVwIG11c3QgY29tZSBkb3duLCBwcm92aWRlZAp0aGF0IHdoYXQgZ29lcyBkb3duIG11c3QgY29tZSB1cCwgdGh1cyBzYWZlZ3VhcmRpbmcgdGhlIGVxdWlsaWJyaXVtIG9mIHRoZQpVbml2ZXJzZS4gIFJlZ3JldHRhYmx5LCB0aGlzIG9ubHkgd29ya3Mgd2l0aCBhcHBsZXMgYW5kLCBhbWF6aW5nbHksIG9ubHkKdGhlIGFwcGxlcyBvbiB0aGlzIG9uZSB0cmVlLCAvTWFsdXMgZXF1aWxpYnJpYS8hICBJIGhlYXIgdGhhdCBzb21lb25lIGhhcwp3b3JrZWQgb3V0IHRoYXQgdGhlIGFwcGxlcyBhdCB0aGUgdG9wIG9mIHRoZSB0cmVlIGZpbGwgd2l0aCBnYXMgYW5kIGZseSB1cAp3aGVuIHRoZSB0cmVlIGlzIGRpc3R1cmJlZCBzbyB0aGF0IGl0IGNhbiBzZXQgaXRzIHNlZWRzIHNvbWUgd2F5IG9mZi4KV29uZGVyZnVsIHRoaW5nLCBuYXR1cmUsIHNoYW1lIHRoZSBmcnVpdCB0YXN0ZXMgbGlrZSBkb2cncyBidXNpbmVzcywiCldpbGxpa2lucyBhZGRlZCBhcyBZb3VuZyBTYW0gc3BhdCBzb21lIG91dC4gIFsuLi5dCgogIFtTbnVmZiwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTAwCiVwYXNzYWdlIDYKIkxvb2ssIFdpbGxpa2lucywgSSBkb24ndCBsaWtlIHRvIGludm9sdmUgeW91IGluIGFsbCB0aGlzLiAgSXQncyBvbmx5IGEKaHVuY2gsIGFmdGVyIGFsbC4iCgpXaWxsaWtpbnMgd2F2ZWQgdGhpcyBhd2F5LiAgIllvdSB3b3VsZG4ndCBrZWVwIG1lIG91dCBvZiBpdCBmb3IgYSBiaWcKY2xvY2ssIHNpciwgYmVjYXVzZSBhbGwgdGhpcyBpcyB0aWNrbGluZyBteSBmYW5jeSBhcyB3ZWxsLiAgSSBzaGFsbCBsYXkKb3V0IGEgc2VsZWN0aW9uIG9mIGN1dHRpbmcgZWRnZXMgZm9yIHlvdSBpbiB5b3VyIGRyZXNzaW5nIHJvb20sIHNpciwgYW5kIEkKbXlzZWxmIHdpbGwgZ28gdXAgdG8gdGhlIGNvcHNlIGhhbGYgYW4gaG91ciBiZWZvcmUgeW91J3JlIGR1ZSB0byBiZSB0aGVyZSwKd2l0aCBteSB0cnVzdHkgYm93IGFuZCBhbiBhc3NvcnRtZW50IG9mIGZhdm9yaXRlIHBsYXl0aGluZ3MuICBJdCdzIG5lYXJseQpmdWxsIG1vb24sIGNsZWFyIHNraWVzLCB0aGVyZSdsbCBiZSBzaGFkb3dzIGV2ZXJ5d2hlcmUsIGFuZCBJJ2xsIGJlCnN0YW5kaW5nIGluIHRoZSBkYXJrZXN0IG9uZSBvZiB0aGVtLiIKClZpbWVzIGxvb2tlZCBhdCBoaW0gZm9yIGEgbW9tZW50IGFuZCBzYWlkLCAiQ291bGQgSSBwbGVhc2UgYW1lbmQgdGhhdApzdWdnZXN0aW9uPyAgQ291bGQgeW91IG5vdCBiZSB0aGVyZSBpbiB0aGUgc2Vjb25kIGRhcmtlc3Qgc2hhZG93IG9uZSBob3VyCmJlZm9yZSBtaWRuaWdodCwgdG8gc2VlIHdobyBzdGVwcyBpbnRvIHRoZSBkYXJrZXN0IHNoYWRvdz8iCgoiQWggeWVzLCB0aGF0J3Mgd2h5IHlvdSBjb21tYW5kIHRoZSB3YXRjaCwgc2lyLCIgc2FpZCBXaWxsaWtpbnMsIGFuZCB0bwpWaW1lcydzIHNob2NrIHRoZXJlIHdhcyBhIGhpbnQgb2YgYSB0ZWFyIGluIHRoZSBtYW4ncyB2b2ljZS4gICJZb3UncmUKbGlzdGVuaW5nIHRvIHRoZSBzdHJlZXQsIGFyZW4ndCB5b3UsIHNpciwgeWVzPyIKClZpbWVzIHNocnVnZ2VkLiAgIk5vIHN0cmVldHMgaGVyZSwgV2lsbGlraW5zLiIKCldpbGxpa2lucyBzaG9vayBoaXMgaGVhZC4gICJPbmNlIGEgc3RyZWV0IGJveSwgYWx3YXlzIGEgc3RyZWV0IGJveSwgc2lyLgpJdCBjb21lcyB3aXRoIHVzLCBpbiB0aGUgcGluY2guICBNb3RoZXJzIGdvLCBmYXRoZXJzIGdvLS1pZiB3ZSBldmVyIGtuZXcKd2hvIHRoZXkgd2VyZS0tYnV0IHRoZSBTdHJlZXQsIHdlbGwsIHRoZSBTdHJlZXQgbG9va3MgYWZ0ZXIgdXMuICBJbiB0aGUKcGluY2ggaXQga2VlcHMgdXMgYWxpdmUuIgoKICBbU251ZmYsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDExNiAocGFzc2FnZSBlbmRzIG1pZC1wYXJhZ3JhcGgpCiVwYXNzYWdlIDcKV2VsbCwgd2UgbGl2ZSBhbmQgbGVhcm4sIFZpbWVzIHRob3VnaHQsIG9yIHBlcmhhcHMgbW9yZSBpbXBvcnRhbnRseSwgd2UKbGVhcm4gYW5kIGxpdmUuICBbLi4uXQoKICBbU251ZmYsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDE1MwolcGFzc2FnZSA4CkluIHRoZSBjb3VudHJ5LCB0aGVyZSBpcyBhbHdheXMgc29tZWJvZHkgd2F0Y2hpbmcgeW91LCBoZSB0aG91Z2h0IGFzIHRoZXkKc3BlZCBhbG9uZy4gIFdlbGwsIHRoZXJlIHdhcyBhbHdheXMgc29tZWJvZHkgd2F0Y2hpbmcgeW91IGluIHRoZSBjaXR5LCB0b28sCmJ1dCB0aGF0IHdhcyBnZW5lcmFsbHkgaW4gdGhlIGhvcGUgdGhhdCB5b3UgbWlnaHQgZHJvcCBkZWFkIGFuZCB0aGV5IGNvdWxkCnJ1biBvZmYgd2l0aCB5b3VyIHdhbGxldC4gIFRoZXkgd2VyZSBuZXZlciAvaW50ZXJlc3RlZC8uICBCdXQgaGVyZSBoZQp0aG91Z2h0IGhlIGNvdWxkIGZlZWwgbWFueSBleWVzIG9uIGhpbS4gIE1heWJlIHRoZXkgYmVsb25nZWQgdG8gc3F1aXJyZWxzCm9yIGJhZGdlcnMsIG9yIHdoYXRldmVyIHRoZSBkYW1uIHRoaW5ncyB3ZXJlIHRoYXQgVmltZXMgaGVhcmQgYXQgbmlnaHQ7CmdvcmlsbGFzLCBwb3NzaWJseS4KCiAgW1NudWZmLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMTY5LTE3MAolcGFzc2FnZSA5CiJXZWxsLCBzaXIsIGl0IGxvb2tzIGFzIHRob3VnaCB0aGV5J3JlIHBsZWFzZWQgdG8gc2VlIHVzLCB5ZXM/IgoKRmVlbmV5J3MgcmVsaWVmIGFuZCBob3BlIHNob3VsZCBoYXZlIGJlZW4gYm90dGxlZCBhbmQgc29sZCB0byBkZXNwYWlyaW5nCnBlb3BsZSBldmVyeXdoZXJlLiAgVmltZXMganVzdCBub2RkZWQsIGJlY2F1c2UgdGhlIHJhbmtzIHdlcmUgcHVsbGluZwphcGFydCwgbGVhdmluZyBhIHBhdGh3YXkgb2Ygc29ydHMsIGF0IHRoZSBlbmQgb2Ygd2hpY2ggdGhlcmUgd2FzLAppbmFyZ3VhYmx5LCBhIGNvcnBzZS4gIEl0IHdhcyBhIG1pbGQgcmVsaWVmIHRvIHNlZSB0aGF0IGl0IHdhcyBhIGdvYmxpbgpjb3Jwc2UsIGJ1dCBubyBjb3Jwc2UgaXMgZ29vZCBuZXdzLCBwYXJ0aWN1bGFybHkgd2hlbiBzZWVuIGluIGEgZ3JpbXkgbG93CmxpZ2h0IGFuZCBlc3BlY2lhbGx5IGZvciB0aGUgY29ycHNlLiAgQW5kIHlldCBzb21ldGhpbmcgaW5zaWRlIGhpbSBleHVsdGVkCmFuZCBjcmllZCAvSGFsbGVsdWphaCEvLCBiZWNhdXNlIGhlcmUgd2FzIGEgY29ycHNlIGFuZCBoZSB3YXMgYSBjb3BwZXIKYW5kIHRoaXMgd2FzIGEgY3JpbWUgYW5kIHRoaXMgcGxhY2Ugd2FzIHNtb2t5IGFuZCBkaXJ0eSBhbmQgZnVsbCBvZgpzdXNwaWNpb3VzLWxvb2tpbmcgZ29ibGlucyBhbmQgaGVyZSB3YXMgYSAvY3JpbWUvLiAgSGlzIHdvcmxkLiAgWWVzLCBoZXJlCndhcyAvaGlzLyB3b3JsZC4KCiAgW1NudWZmLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyMTEKJXBhc3NhZ2UgMTAKVmltZXMgbGF5IGJhY2sgaW4gdGhlIGJlZCwgZW5qb3lpbmcgdGhlIHdvbmRlcmZ1bCBzZW5zYXRpb24gb2YgZ3JhZHVhbGx5CmJlaW5nIGVhdGVuIGJ5IHRoZSBwaWxsb3dzLCBhbmQgc2FpZCB0byBTeWJpbCwgIkRvIHRoZSBSdXN0IGZhbWlseSBoYXZlIGEKcGxhY2UgZG93biBoZXJlPyIKClRvbyBsYXRlIGhlIHJlZmxlY3RlZCB0aGF0IHRoaXMgbWlnaHQgYmUgYSBiYWQgbW92ZSBiZWNhdXNlIHNoZSBtaWdodCB3ZWxsCmhhdmUgdG9sZCBoaW0gYWxsIGFib3V0IGl0IG9uIG9uZSBvZiB0aG9zZSBvY2Nhc2lvbnMgd2hlbiwgc28gdW51c3VhbGx5IGZvcgphIG1hcnJpZWQgbWFuLCBoZSB3YXMgbm90IHBheWluZyBtdWNoIGF0dGVudGlvbiB0byB3aGF0IGhpcyB3aWZlIHdhcwpzYXlpbmcsIGFuZCB0aGVyZWZvcmUgaGUgbWlnaHQgYmUgdGhlIGNhdXNlIG9mIGdydW1waW5lc3MgaW4gdGhvc2UKcHJlY2lvdXMsIHdhcm0gbWludXRlcyBiZWZvcmUgc2xlZXAuICBBbGwgaGUgY291bGQgc2VlIG9mIGhlciByaWdodCBub3cKd2FzIHRoZSB2ZXJ5IHRpcCBvZiBoZXIgbm9zZSwgYXMgdGhlIHBpbGxvd3MgY2xhaW1lZCBoZXIsIGJ1dCBzaGUgbXVtYmxlZCwKZHJvd3NpbHksICJPaCwgdGhleSBib3VnaHQgSGFuZ25haWwgTWFub3IgdGVuIHllYXJzIG9yIHNvIGFnbywgYWZ0ZXIgdGhlCk1hcnF1aXMgb2YgRmFudGFpbGVyIG11cmRlcmVkIGhpcyB3aWZlIHdpdGggYSBwcnVuaW5nIGtuaWZlIGluIHRoZQpwaW5lYXBwbGUgaG91c2UuICBEb24ndCB5b3UgcmVtZW1iZXI/ICBZb3Ugc3BlbnQgd2Vla3Mgc2VhcmNoaW5nIHRoZSBjaXR5CmZvciBoaW0uICBJbiB0aGUgZW5kIGV2ZXJ5Ym9keSBzZWVtZWQgdG8gdGhpbmsgaGUnZCBnb25lIG9mZiB0byBGb3VyZWNrcwphbmQgZGlzZ3Vpc2VkIGhpbXNlbGYgYnkgbm90IGNhbGxpbmcgaGltc2VsZiB0aGUgTWFycXVpcyBvZiBGYW50YWlsZXIuIgoKIk9oIHllcywiIHNhaWQgVmltZXMsICJhbmQgSSByZW1lbWJlciB0aGF0IGEgbG90IG9mIGhpcyBjaHVtcyB3ZXJlIHF1aXRlCmluZGlnbmFudCBhYm91dCB0aGUgaW52ZXN0aWdhdGlvbiEgIFRoZXkgc2FpZCBoZSdkIG9ubHkgZG9uZSBvbmUgbXVyZGVyLAphbmQgaXQgd2FzIGhpcyB3aWZlJ3MgZmF1bHQgZm9yIGhhdmluZyB0aGUgYmFkIHRhc3RlIHRvIGRpZSBhZnRlciBqdXN0IG9uZQpsaXR0bGUgc3RhYiEiCgogIFtTbnVmZiwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjEyIChwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoIGFuZCBlbmRzIG1pZC1wYXJhZ3JhcGgpCiVwYXNzYWdlIDExClsuLi5dIGhlIGhhZCBoZWFyZCB0aGF0IHdyaXRlcnMgc3BlbnQgYWxsIGRheSBpbiB0aGVpciBkcmVzc2luZyBnb3ducwpkcmlua2luZyBjaGFtcGFnbmUuKDEpICBbLi4uXQoKKDEpIFRoaXMgaXMsIG9mIGNvdXJzZSwgYWJzb2x1dGVseSB0cnVlLgoKICBbU251ZmYsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDIxNyAocGFzc2FnZSBzdGFydHMgbWlkLXBhcmFncmFwaCBhbmQgZW5kcyBtaWQtcGFyYWdyYXBoKQolcGFzc2FnZSAxMgoiWy4uLl0gYW5kIHRoZSBTdW1tb25pbmcgRGFyayBpcyAvcmVhbC8uICBJdCdzIG5vdCBhbGwgaW4geW91ciBoZWFkLApjb21tYW5kZXI6ICBubyBtYXR0ZXIgd2hhdCB5b3UgaGVhciwgSSBzb21ldGltZXMgaGVhciBpdCB0b28uICBPaCBkZWFyLAp5b3Ugb2YgYWxsIHBlb3BsZSBtdXN0IHJlY29nbml6ZSBhIHN1YnN0aXRpb24gd2hlbiB5b3UncmUgcG9zc2Vzc2VkIGJ5IGl0PwpJdCdzIHRoZSBvcHBvc2l0ZSBvZiBzdXBlcnN0aXRpb246ICBpdCdzIHJlYWwgZXZlbiBpZiB5b3UgZG9uJ3QgYmVsaWV2ZQppbiBpdC4gIFsuLi5dIgoKICBbU251ZmYsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDIzMwolcGFzc2FnZSAxMwpWaW1lcyBmcm93bmVkLiAgSGUgY291bGRuJ3QgcmVtZW1iZXIgZXZlciBnb2luZyBpbnRvIGEgY2h1cmNoIG9yIGEgdGVtcGxlCm9yIG9uZSBvZiB0aGUgbnVtZXJvdXMgb3RoZXIgcGxhY2VzIG9mIG1vcmUgb3IgbGVzcyBzcGlyaXR1YWxpdHkgZm9yIGFueQpvdGhlciByZWFzb24gdGhhbiB0aGUgb2NjYXNpb25hbCByZXF1aXJlbWVudHMgb2YgdGhlIGpvYi4gIFRoZXNlIGRheXMgaGUKdGVuZGVkIHRvIGdvIGluIGZvciByZWFzb25zIG9mIFN5YmlsLCBpLmUuLCBoaXMgd2lmZSBkcmFnZ2luZyBoaW0gYWxvbmcKc28gdGhhdCBoZSBjb3VsZCBiZSBzZWVuLCBhbmQsIGlmIHBvc3NpYmxlLCBzZWVuIHJlbWFpbmluZyBhd2FrZS4KCk5vLCB0aGUgd29ybGQgb2YgbmV4dCB3b3JsZHMsIGFmdGVybGl2ZXMsIGFuZCBwdXJnYXRvcmlhbCBkZXN0aW5hdGlvbnMKc2ltcGx5IGRpZCBub3QgZml0IGludG8gaGlzIGhlYWQuICBXaGV0aGVyIHlvdSB3YW50ZWQgaXQgb3Igbm90LCB5b3Ugd2VyZQpib3JuLCB5b3UgZGlkIHRoZSBiZXN0IHlvdSBjb3VsZCwgYW5kIHRoZW4sIHdoZXRoZXIgeW91IHJlYWxseSB3YW50ZWQgdG8Kb3Igbm90LCB5b3UgZGllZC4gIFRoZXkgd2VyZSB0aGUgb25seSBjZXJ0YWludGllcywgYW5kIHNvIHRoZSBiZXN0IHRoaW5nCmZvciBhIGNvcHBlciB0byBkbyB3YXMgdG8gZ2V0IG9uIHdpdGggdGhlIGpvYi4gIEFuZCBpdCB3YXMgYWJvdXQgdGltZQp0aGF0IFNhbSBWaW1lcyBnb3QgYmFjayB0byBkb2luZyBoaXMuCgogIFtTbnVmZiwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjU0IChwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoKQolcGFzc2FnZSAxNApbLi4uXSAgQW5kIG1heWJlIGlmIEkgZGlzdGluZ3Vpc2ggbXlzZWxmIEkgY2FuIGdldCBhIGpvYiBpbiB0aGUgY2l0eSwgc28KdGhhdCBteSBtdW0gY2FuIGxpdmUgaW4gYSBwbGFjZSB3aGVyZSB5b3UgZG9uJ3QgbGllIGF3YWtlIGF0IG5pZ2h0Cmxpc3RlbmluZyB0byB0aGUgbWljZSBmaWdodGluZyB0aGUgY29ja3JvYWNoZXMtLWhvb3JheSEoMSkKCigxKSBSZWdyZXR0YWJseSwgQ29uc3RhYmxlIFVwc2hvdCB3YXMgb3Zlcmx5IGhvcGVmdWw6ICBpbiBBbmtoLU1vcnBvcmsgdGhlCm1pY2UgYW5kIGNvY2tyb2FjaGVzIGhhZCBkZWNpZGVkIHRvIGZvcmdldCB0aGVpciBkaWZmZXJlbmNlcyBhbmQgZ2FuZyB1cApvbiB0aGUgaHVtYW5zLgoKICBbU251ZmYsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDQwMyAocGFzc2FnZSBzdGFydHMgbWlkLXBhcmFncmFwaCkKJXBhc3NhZ2UgMTUKIlsuLi5dICBBbmQgSSByZW1lbWJlciByZWFkaW5nIHNvbWV3aGVyZSB0aGF0IHlvdSB3b3VsZCBhcnJlc3QgdGhlIGdvZHMKZm9yIGRvaW5nIGl0IHdyb25nLiIKClZpbWVzIHNob29rIGhpcyBoZWFkLiAgIkknbSBzdXJlIEkgbmV2ZXIgc2FpZCBhbnl0aGluZyBvZiB0aGUgc29ydCEgIEJ1dApsYXcgaXMgb3JkZXIgYW5kIG9yZGVyIGlzIGxhdyBhbmQgaXQgbXVzdCBiZSB0aGUgaGlnaGVzdCB0aGluZy4gIFRoZSB3b3JsZApydW5zIG9uIGl0LCB0aGUgaGVhdmVucyBydW4gb24gaXQgYW5kIHdpdGhvdXQgb3JkZXIsIGxhZCwgb25lIHNlY29uZApjYW5ub3QgZm9sbG93IGFub3RoZXIuIgoKICBbU251ZmYsIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDQwNCAoZm9vdG5vdGUpCiVwYXNzYWdlIDE2ClRoZSBzb3VuZCBvZiB0aGUgZ2VudGxlIHJhdHRsZSBvZiBjaGluYSBjdXAgb24gY2hpbmEgc2F1Y2VyIGRyaXZlcyBhd2F5CmFsbCBkZW1vbnMsIGEgbGl0dGxlLWtub3duIGZhY3QuCgogIFtTbnVmZiwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiVlIHRpdGxlCiMKIwojCiV0aXRsZSBSYWlzaW5nIFN0ZWFtICgxMykKIyBwLiAyODEgKEFuY2hvciBCb29rcyBlZGl0aW9uOyBwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoKQolcGFzc2FnZSAxClsuLi5dICBBbmQgeWVzdGVyZGF5IHlvdSBuZXZlciB0aG91Z2h0IGFib3V0IGl0IGFuZCBhZnRlciB0b2RheSB5b3UgZG9uJ3QKa25vdyB3aGF0IHlvdSB3b3VsZCBkbyB3aXRob3V0IGl0LiAgVGhhdCB3YXMgd2hhdCB0aGUgdGVjaG5vbG9neSB3YXMgZG9pbmcuCkl0IHdhcyB5b3VyIHNsYXZlIGJ1dCwgaW4gYSBzZW5zZSwgaXQgbWlnaHQgYmUgdGhlIG90aGVyIHdheSByb3VuZC4KCiAgW1JhaXNpbmcgU3RlYW0sIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDM1OCAocGFzc2FnZSBzdGFydHMgbWlkLXBhcmFncmFwaCBhbmQgZW5kcyBtaWQtcGFyYWdyYXBoOyBxdW90ZSBpcwojICAgICAgICAgYXR0cmlidXRlZCB0byBMb3JkIFZldGluYXJpIGJ1dCBoZSdzIG5vdCBwcmVzZW50IGluIHRoZSBzY2VuZSkKJXBhc3NhZ2UgMgoiSWYgeW91IHRha2UgZW5vdWdoIHByZWNhdXRpb25zLCB5b3UgbmV2ZXIgbmVlZCB0byB0YWtlIHByZWNhdXRpb25zLiIKCiAgW1JhaXNpbmcgU3RlYW0sIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDU3IChBbmNob3IgQm9va3MgZWRpdGlvbikKJXBhc3NhZ2UgMwpSaHlzIFJoeXNzb24sIExvdyBLaW5nIG9mIHRoZSBkd2FyZnMsIHdhcyBhIGR3YXJmIG9mIGtlZW4gaW50ZWxsaWdlbmNlLApidXQgaGUgc29tZXRpbWVzIHdvbmRlcmVkIHdoeSBzb21lb25lIHdpdGggdGhhdCBpbnRlbGxpZ2VuY2Ugd291bGQgZ28gaW50bwpkd2FyZmlzaCBwb2xpdGljcywgbGV0IGFsb25lIGJlIEtpbmcgb2YgdGhlIER3YXJmcy4gIExvcmQgVmV0aW5hcmkgaGFkIGl0CnNvIGVhc3kgaGUgbXVzdCBoYXJkbHkga25vdyBoZSB3YXMgYm9ybiEgIFRoZSBLaW5nIHRob3VnaHQgdGhhdCBodW1hbnMKd2VyZSwgd2VsbCwgcmVhc29uYWJseSBzZW5zaWJsZSwgd2hlcmVhcyB0aGVyZSB3YXMgYW4gb2xkIGR3YXJmIHByb3ZlcmIKd2hpY2gsIHRyYW5zbGF0ZWQsIHNhaWQsICJBbnkgdGhyZWUgZHdhcmZzIGhhdmluZyBhIHNlbnNpYmxlIGNvbnZlcnNhdGlvbgp3aWxsIGFsd2F5cyBlbmQgdXAgaGF2aW5nIGZvdXIgcG9pbnRzIG9mIHZpZXcuIgoKICBbUmFpc2luZyBTdGVhbSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gNjQKJXBhc3NhZ2UgNApDdXJpb3VzLCB0aGUgUGF0cmljaWFuIHRob3VnaHQsIGFzIERydW1rbm90dCBodXJyaWVkIGF3YXkgdG8gZGlzcGF0Y2ggYQpjbGFja3MgdG8gdGhlIGVkaXRvciBvZiB0aGUgL1RpbWVzLywgdGhhdCBwZW9wbGUgaW4gQW5raC1Nb3Jwb3JrIHByb2Zlc3NlZApub3QgdG8gbGlrZSBjaGFuZ2Ugd2hpbGUgYXQgdGhlIHNhbWUgdGltZSBmaXhhdGluZyBvbiBldmVyeSBuZXcKZW50ZXJ0YWlubWVudCBhbmQgZGl2ZXJzaW9uIHRoYXQgY2FtZSB0aGVpciB3YXkuICBUaGVyZSB3YXMgbm90aGluZyB0aGUKbW9iIGxpa2VkIGJldHRlciB0aGFuIG5vdmVsdHkuICBMb3JkIFZldGluYXJpIHNpZ2hlZCBhZ2Fpbi4gIERpZCB0aGV5CmFjdHVhbGx5IHRoaW5rPyAgVGhlc2UgZGF5cyAvZXZlcnlib2R5LyB1c2VkIHRoZSBjbGFja3MsIGV2ZW4gbGl0dGxlIG9sZApsYWRpZXMgd2hvIHVzZWQgaXQgdG8gc2VuZCBoaW0gY2xhY2tzIG1lc3NhZ2VzIGNvbXBsYWluaW5nIGFib3V0IGFsbAp0aGVzZSBuZXdmYW5nbGVkIGlkZWFzLCB0b3RhbGx5IG1pc3NpbmcgdGhlIGlyb255LiAgQW5kIGluIHRoaXMgZG9sZWZ1bAptb29kIGhlIHZlbnR1cmVkIHRvIHdvbmRlciBpZiB0aGV5IGV2ZXIgdGhvdWdodCBiYWNrIHRvIHdoZW4gdGhpbmdzIHdlcmUKanVzdCBvbGQtZmFuZ2xlZCBvciBub3QgZmFuZ2xlZCBhdCBhbGwgYXMgYWdhaW5zdCB0aGUgbW9kZXJuIGRheSB3aGVuCmZhbmdsZWQgaGFkIHJlYWNoZWQgaXRzIGFwb2dlZS4gIEZhbmdsaW5nIHdhcyBpbmRlZWQsIGhlIHRob3VnaHQsIGhlcmUKdG8gc3RheS4gIFRoZW4gaGUgd29uZGVyZWQ6IGhhZCBhbnlvbmUgZXZlciB0aG91Z2h0IG9mIHRoZW1zZWx2ZXMgYXMgYQpmYW5nbGVyPwoKICBbUmFpc2luZyBTdGVhbSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTc1ICh0aGlyZCBwYXJhZ3JhcGggaGFzIGEgZmluYWwgc2VudGVuY2UsIGJ1dCBpdCdzIGFib3V0ICdncmFncycKIyAgICAgICAgIHdoaWNoIHdvdWxkbid0IG1ha2UgYW55IHNlbnNlIGhlcmUgd2hlcmUncyBubyBjb250ZXh0IGFib3V0IHRoZW0pCiVwYXNzYWdlIDUKIk1pc3RlciBMaXB3aWcsIHlvdSBrbm93IHdoYXQgdGhleSBzYXkgYWJvdXQgZHdhcmZzPyIKCk1vaXN0IGxvb2tlZCBibGFuay4gICJWZXJ5IHNtYWxsIHBlb3BsZT8iCgoiJ1R3byBkd2FyZnMgaXMgYW4gYXJndW1lbnQsIHRocmVlIGR3YXJmcyBpcyBhIHdhciwnIE1pc3RlciBMaXB3aWcuICBJdCdzCnNxdWFiYmxlLCBzcXVhYmJsZSwgc3F1YWJibGUuICBJdCdzIGJ1aWx0IGludG8gdGhlaXIgY3VsdHVyZS4gIFsuLi5dIgoKICBbUmFpc2luZyBTdGVhbSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjMzIChzZWNvbmQgcGFyYWdyYXBoIG9mIGEgZm9vdG5vdGUpCiVwYXNzYWdlIDYKVGhlcmUgY2xlYXJseSBoYXMgYmVlbiBtYWdpYyBhdCB3b3JrIGluIHRoZSBOZXRoZXJnbGFkZXMgYW5kIGl0cyBmdXR1cmUgYXMKdGhlIHBoYXJtYWNvcG9laWEgb2YgdGhlIHdvcmxkIGlzIGJlaW5nIHRlc3RlZCBieSBQcm9mZXNzb3IgUmluY2V3aW5kIG9mClVuc2VlbiBVbml2ZXJzaXR5LiAgQSBkaXNwYXRjaCBmcm9tIGhpbSByZXZlYWxzIHRoYXQgdGhlIGp1aWNlIHByZXNzZWQgZnJvbQphIGNlcnRhaW4gbGl0dGxlIHllbGxvdyBmbG93ZXIgaW5kdWNlcyBjZXJ0YWludHkgaW4gdGhlIHBhdGllbnQgZm9yIHVwIHRvCmZpZnRlZW4gbWludXRlcy4gIEFib3V0IHdoYXQgdGhleSBhcmUgY2VydGFpbiB0aGV5IGNhbm5vdCBzcGVjaWZ5LCBidXQgdGhlCnBhdGllbnQgaXMsIGluIHRoYXQgc2hvcnQgdGltZSwgY29tcGxldGVseSBjZXJ0YWluIGFib3V0IC9ldmVyeXRoaW5nLy4gIEFuZApmdXJ0aGVyIHJlc2VhcmNoIGhhcyBmb3VuZCB0aGF0IGEgZmxvYXRpbmcgd2F0ZXIgaHlhY2ludGggeWllbGRzIGluIGl0cwpqdWljZXMgdG90YWwgL3VuL2NlcnRhaW50eSBhYm91dCBhbnl0aGluZyBmb3IgaGFsZiBhIGhvdXIuICBQaGlsb3NvcGhlcnMKYXJlIGV4Y2l0ZWQgYWJvdXQgdGhlIHVzZXMgZm9yIHRoZXNlIHBvdGlvbnMsIGFuZCB0aGUgc2VhcmNoIGNvbnRpbnVlcyBmb3IKYSBwbGFudCB0aGF0IGNvbWJpbmVzIHRoZSBxdWFsaXRpZXMgb2YgYm90aCwgdGhlcmVieSBiZWluZyBvZiBncmVhdCB1c2UgdG8KdGhlb2xvZ2lhbnMuCgogIFtSYWlzaW5nIFN0ZWFtLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAyODgKJXBhc3NhZ2UgNwpUaGUgdG93biBvZiBCaWcgQ2FiYmFnZSwgdGhlb3JldGljYWxseSB0aGUgbGFzdCBwbGFjZSBhbnkgc2Vuc2libGUgcGVyc29uCndvdWxkIHdhbnQgdG8gdmlzaXQsIHdhcyBuZXZlcnRoZWxlc3MgcG9wdWxhciB0aHJvdWdob3V0IHRoZSBzdW1tZXIgYmVjYXVzZQpvZiB0aGUgYXR0cmFjdGlvbnMgb2YgQnJhc3NpY2EgV29ybGQgYW5kIHRoZSBDYWJiYWdlIFJlc2VhcmNoIEluc3RpdHV0ZSwKd2hvc2Ugc3R1ZGVudHMgd2VyZSB0aGUgZmlyc3QgdG8gZ2V0IGEgY2FiYmFnZSB0byBhIGhlaWdodCBvZiBmaXZlIGh1bmRyZWQKeWFyZHMgcHJvcGVsbGVkIGVudGlyZWx5IGJ5IGl0cyBvd24ganVpY2VzLiAgTm9ib2R5IGFza2VkIHdoeSB0aGV5IGZlbHQgaXQKd2FzIG5lY2Vzc2FyeSB0byBkbyB0aGlzLCBidXQgdGhhdCB3YXMgc2NpZW5jZSBmb3IgeW91LCBhbmQsIG9mIGNvdXJzZSwKc3R1ZGVudHMuCgogIFtSYWlzaW5nIFN0ZWFtLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwcC4gMzYzLTM2NCAoIk9mIHRoZSBXaGVlbCB0aGUgU3Bva2UiIGlzIHRoZSBnb2JsaW4ncyBmb3JtYWwgbmFtZTsgcGVyaGFwcwojICAgICAgICAgICAgICBhIG5ldyBuYW1lIGNob3NlbiBvciBnaXZlbiBhZnRlciBpbnZlbnRpbmcgdGhlIGJpY3ljbGU/KQolcGFzc2FnZSA4CkEgZmV3IHdlZWtzIGxhdGVyLCBEcnVta25vdHQgcGVyc3VhZGVkIExvcmQgVmV0aW5hcmkgdG8gYWNjb21wYW55IGhpbSB0bwp0aGUgYXJlYSBiZWhpbmQgdGhlIHBhbGFjZSB3aGVyZSBhIGp1bmdsZSBvZiBkcmFpbiBwaXBlcyBlbXB0aWVkIGFuZApzZXZlcmFsIG1pc21hdGNoZWQgc2hlZHMsIHdhc2hob3VzZXMsIGFuZCBsZWFuLXRvcyBob3VzZWQgc29tZSBvZiB0aGUKbmVjZXNzYXJ5IGZ1bmN0aW9ucyB3aXRob3V0IHdoaWNoIGEgbW9kZXJuIHBhbGFjZSBjb3VsZCBub3Qgb3BlcmF0ZS4oMSkKClRoZXJlIHdhcyBhIHlvdW5nIGdvYmxpbiB3YWl0aW5nIHRoZXJlLCByYXRoZXIgbmVydm91cywgY2xhc3Bpbmcgd2hhdApsb29rZWQgbGlrZSB0d28gd2hlZWxzIGhlbGQgdG9nZXRoZXIgYnkgbm90IHZlcnkgbXVjaC4gIFRoZSB3aGVlbHMgd2VyZQpzcGlubmluZy4KCkRydW1rbm90dCBjbGVhcmVkIGhpcyB0aHJvYXQuICAiU2hvdyBoaXMgbG9yZHNoaXAgeW91ciBuZXcgaW52ZW50aW9uLApNaXN0ZXIgT2YgdGhlIFdoZWVsIHRoZSBTcG9rZS4iCgooMSkgRnJhbmtseSBtb3N0IHBhbGFjZXMgYXJlIGp1c3QgbGlrZSB0aGlzLiAgVGhlaXIgYmFja3NpZGVzIGRvIG5vdCBiZWFyCmxvb2tpbmcgYXQuCgogIFtSYWlzaW5nIFN0ZWFtLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyMKIyBwYXNzYWdlcyA5Li4xMyBhZGRlZCBhZnRlciAzLjYuMCdzIHJlbGVhc2UKIyMKIyBwcC4gMjAtMjEKJXBhc3NhZ2UgOQpNb2lzdCBWb24gTGlwd2lnIGhhZCBkb25lIHNvbWUgaGVhdnkgd29yayBvbmNlIGFuZCBjb3VsZG4ndCBzZWUgYW55IGZ1dHVyZQppbiBpdCwgYnV0IGhlIGNvdWxkIGxvb2sgYXQgaXQgZm9yIGhvdXJzLCBwcm92aWRlZCBvdGhlciBwZW9wbGUgd2VyZSBkb2luZwppdCwgb2YgY291cnNlLCBhbmQgY2xlYXJseSBzb21lIG9mIHRoZW0gbGlrZWQgd2hhdCB0aGV5IHdlcmUgZG9pbmcsIGFuZCBzbwpoZSBzaHJ1Z2dlZCBhbmQgZmVsdCBoYXBweSB0aGF0IENyaXNwIHdhcyBoYXBweSBiZWluZyBhIGhhbmR5bWFuIHdoaWxzdApNb2lzdCB3YXMgaGFwcHkgbm90IHBpY2tpbmcgdXAgYW55dGhpbmcgdGhhdCB3YXMgaGVhdmllciB0aGFuIGEgZ2xhc3MuCkFmdGVyIGFsbCwgaGlzIHdvcmsgd2FzIHVuc2VlbiBhbmQgZGVwZW5kZWQgb24gd29yZHMsIHdoaWNoIHdlcmUKZm9ydHVuYXRlbHkgbm90IHZlcnkgaGVhdnkgYW5kIGRpZG4ndCBuZWVkIGdyZWFzZS4gIEluIGhpcyBjYXJlZXIgYXMgYQpjcm9vayB0aGV5IGhhZCBzZXJ2ZWQgaGltIHdlbGwgYW5kIG5vdyBoZSBmZWx0IHNvbWV3aGF0IHNtdWcgYXQgdXNpbmcgdGhlbQp0byB0aGUgYmVuZWZpdCBvZiB0aGUgY2l0aXplbnJ5LgoKVGhlcmUgd2FzIGEgZGlmZmVyZW5jZSBiZXR3ZWVuIGEgYmFua2VyIGFuZCBhIGNyb29rLCB0aGVyZSByZWFsbHkgd2FzLCBhbmQKYWx0aG91Z2ggaXQgd2FzIHZlcnksIHZlcnkgdGVlbnkgTW9pc3QgZmVsdCB0aGF0IGhlIHNob3VsZCBwb2ludCBvdXQgdGhhdAppdCBkaWQgZXhpc3QgYW5kLCBiZXNpZGVzLCBMb3JkIFZldGluYXJpIGFsd2F5cyBoYWQgaGlzIGV5ZSBvbiBoaW0uCgpTbyBldmVyeWJvZHkgd2FzIGhhcHB5IGFuZCBNb2lzdCB3ZW50IHRvIHdvcmsgaW4gdmVyeSBjbGVhbiBjbG90aGVzIGFuZAp3aXRoIGEgdmVyeSBjbGVhbiBjb25zY2llbmNlLgoKICBbUmFpc2luZyBTdGVhbSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjIKJXBhc3NhZ2UgMTAKSGFycnksIHJlZC1mYWNlZCBhbmQgaW1wYXRpZW50LCBsb29rZWQgb3ZlciBoaXMgZGVzayBhbmQgc2FpZCB0byBoaW0sICJMYWQsCnRpbWUgaXMgbW9uZXkgYW5kIEknbSBhIGJ1c3kgbWFuLiAgWW91IHRvbGQgTmFuY3kgZG93biBvbiByZWNlcHRpb24gdGhhdAp5b3UndmUgZ290IHNvbWV0aGluZyBJIG1pZ2h0IGxpa2UuICBOb3cgc3RvcCBmaWRnZXRpbmcgYW5kIGxvb2sgbWUgaW4gdGhlCmZhY2Ugc3F1YXJlIGxpa2UuICBJZiB5b3UncmUgYW5vdGhlciBjaGFuY2VyIHdhbnRpbmcgdG8gYmFtYm9vemxlIG1lIEknbGwKaGF2ZSB5b3UgZG93biB0aGUgRWZmaW5nIHN0YWlycygxKSBiZWZvcmUgeW91IGtub3cgaXQuIgoKKDEpIFRoZSB3b25kZXJmdWxseSBjb2xvcmVkIG9hayB3b29kIG9mIHRoZSBFZmZpbmcgRm9yZXN0IHdhcyBtdWNoIGluCmRlbWFuZCBmb3IgaGlnaC1jbGFzcyBqb2luZXJ5LgoKICBbUmFpc2luZyBTdGVhbSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gODAKJXBhc3NhZ2UgMTEKTW9pc3Qga25ldyBhYm91dCB0aGUgemVpdGdlaXN0LCBoZSB0YXN0ZWQgaXQgaW4gdGhlIHdpbmQsIGFuZCBzb21ldGltZXMgaXQKYWxsb3dlZCBoaW0gdG8gcGxheSB3aXRoIGl0LiAgSGUgdW5kZXJzdG9vZCBpdCwgYW5kIG5vdyBpdCBoaW50ZWQgYXQgc3BlZWQsCmVzY2FwZSwgc29tZXRoaW5nIHdvbmRlcmZ1bGx5IG5ldywgdGhlIHZlcnkgYm9uZXMgb2YgdGhlIGxhbmQgYXdha2VuaW5nLAphbmQgc3VkZGVubHkgaXQgc2VlbWVkIHRvIGNyeSBvdXQgZm9yIG1vdGlvbiwgbmV3IGhvcml6b25zLCBmYXJhd2F5IHBsYWNlcywKL2FueXdoZXJlIHRoYXQgaXMgbm90IGhlcmUvISAgTm8gZG91YnQgYWJvdXQgaXQsIHRoZSByYWlsd2F5IHdhcyBnb2luZyB0bwp0dXJuIGNvYWwgaW50byBnb2xkLgoKICBbUmFpc2luZyBTdGVhbSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMTk1IChwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoIGFuZCBlbmRzIG1pZC1wYXJhZ3JhcGgpCiVwYXNzYWdlIDEyCkFuZCB0aGUgdHJvdWJsZSB3aXRoIG1hZG5lc3Mgd2FzIHRoYXQgdGhlIG1hZCBkaWRuJ3Qga25vdyB0aGV5IHdlcmUgbWFkLgoKICBbUmFpc2luZyBTdGVhbSwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMjg0IChwYXNzYWdlIHN0YXJ0cyBtaWQtcGFyYWdyYXBoOyBzcGVha2VyIGlzIENtZHIgVmltZXMgb2YgdGhlIFdhdGNoKQolcGFzc2FnZSAxMwoiWy4uLl0gIFRoYXQncyB0aGUgdHJvdWJsZSwgeW91IHNlZS4gIFdoZW4geW91J3ZlIGhhZCBoYXRyZWQgb24geW91ciB0b25ndWUKZm9yIHN1Y2ggYSBsb25nIHRpbWUsIHlvdSBkb24ndCBrbm93IGhvdyB0byBzcGl0IGl0IG91dC4iCgogIFtSYWlzaW5nIFN0ZWFtLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKJWUgdGl0bGUKIwojCiMgU2lyIFRlcnJ5IFByYXRjaGV0dCdzIGZpbmFsIGJvb2ssIHB1Ymxpc2hlZCBwb3N0aHVtb3VzbHkuCiMgVGhlIHN0b3J5IGlzIGNvbXBsZXRlLCBidXQgdGhlIGxlbmd0aCBpcyBzdWJzdGFudGlhbGx5IHNob3J0ZXIgdGhhbgojIG90aGVyIHJlY2VudCBEaXNjd29ybGQgbm92ZWxzLiAgUHJlc3VtYWJseSBpdCB3b3VsZCBoYXZlIGJlZW4gZXhwYW5kZWQKIyBpZiBoZSBoYWQgaGFkIG1vcmUgdGltZSB0byB3b3JrIG9uIGl0Li4uLgojCiV0aXRsZSBUaGUgU2hlcGhlcmQncyBDcm93biAoNykKIyBwcC4gMjktMzAgKEhhcnBlciBlZGl0aW9uKQolcGFzc2FnZSAxCiJJdCdzIGFuIGluY29udmVuaWVuY2UsIHRydWUgZW5vdWdoLCBhbmQgSSBkb24ndCBsaWtlIGl0IGF0IGFsbCwgYnV0IEkKa25vdyB0aGF0IHlvdSBkbyBpdCBmb3IgZXZlcnlvbmUsIE1yLiBEZWF0aC4gIElzIHRoZXJlIGFueSBvdGhlciB3YXk/IgoKTk8sIFRIRVJFIElTTidULCBJJ00gQUZSQUlELiAgV0UgQVJFIEFMTCBGTE9BVElORyBJTiBUSEUgV0lORFMgT0YgVElNRS4KQlVUIFlPVVIgQ0FORExFLCBNSVNUUkVTUyBXRUFUSEVSV0FYLCBXSUxMIEZMSUNLRVIgRk9SIFNPTUUgVElNRSBCRUZPUkUKSVQgR09FUyBPVVQtLUEgTElUVExFIFJFV0FSRCBGT1IgQSBMSUZFIFdFTEwgTElWRUQuICBGT1IgSSBDQU4gU0VFIFRIRQpCQUxBTkNFIEFORCBZT1UgSEFWRSBMRUZUIFRIRSBXT1JMRCBNVUNIIEJFVFRFUiBUSEFOIFlPVSBGT1VORCBJVCwgQU5ECklGIFlPVSBBU0sgTUUsIHNhaWQgRGVhdGgsIE5PQk9EWSBDT1VMRCBETyBBTlkgQkVUVEVSIFRIQU4gVEhBVC4uLi4KCiAgW1RoZSBTaGVwaGVyZCdzIENyb3duLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAzMCAoJ3NoZScgaXMgTWlzcyBUaWNrLCBhIHRyYXZlbGxpbmcgd2l0Y2ggd2hvIGZpbmRzIG5ldyB3aXRjaGVzOwojICAgICAgICAndW5kZXIgd2F0ZXInIGlzIHNwZWxsZWQgYXMgdHdvIHdvcmRzOyAnZHVja2luZycgaXMgYWNjdXJhdGUpCiVwYXNzYWdlIDIKU2hlIHNpZ2hlZC4gIEl0IHdhcyBzdWNoIGEgc2hhbWUgd2hlbiBvbGQgY3VzdG9tcyBkaXNhcHBlYXJlZC4gIEEgZ29vZAp3aXRjaC1kdWNraW5nIHdhcyBzb21ldGhpbmcgc2hlIGhhZCBsaWtlZCBkb2luZyBpbiB0aGUgYmFkIG9sZCBkYXlzLS1zaGUKaGFkIGV2ZW4gL3RyYWluZWQvIGZvciBpdC4gIEFsbCB0aG9zZSBzd2ltbWluZyBsZXNzb25zLCBhbmQgcHJhY3RpY2Ugd2l0aAprbm90cyBhdCB0aGUgUXVpcm0gQ29sbGVnZSBmb3IgWW91bmcgTGFkaWVzLiAgU2hlIGhhZCBiZWVuIGFibGUgdG8gZGVmZWF0CnRoZSBtb2JzIHVuZGVyIHdhdGVyIGlmIG5lY2Vzc2FyeS4gIE9yIGF0IGxlYXN0IHdvcmsgYXQgYnJlYWtpbmcgaGVyIG93bgpyZWNvcmQgZm9yIHVudHlpbmcgdGhlIHNpbXBsZSBrbm90cyB0aGV5IGFsbCB0aG91Z2h0IHdvcmtlZCBvbiB0aGUgbmFzdHkKd2l0Y2guCgpOb3csIGEgYml0IG9mIHBvbmQtZGlwcGluZyBoYWQgYmVjb21lIG1vcmUgbGlrZSBhIGhvYmJ5LCBhbmQgc2hlIGhhZCBhCm5hc3R5IGZlZWxpbmcgdGhhdCBvdGhlcnMgd2VyZSBjb3B5aW5nIGhlciBhZnRlciBzaGUgcGFzc2VkIHRocm91Z2ggdGhlaXIKdmlsbGFnZXMuICBTaGUnZCBldmVuIGhlYXJkIHRhbGsgb2YgYSBzd2ltbWluZyBjbHViIGJlaW5nIHN0YXJ0ZWQgaW4gb25lCnNtYWxsIGhhbWxldCBvdmVyIGJ5IEhhbS1vbi1SeWUuKDEpCgooMSkgQSBwb3B1bGFyIGlkZWEgYW1vbmcgdGhlIHlvdW5nIGxhZHMsIHNpbmNlIHRoZXkgZmVsdCB0aGF0IGV2ZXJ5b25lLS0KYW5kICJldmVyeW9uZSIgZGVmaW5pdGVseSBpbmNsdWRlZCB0aGUgeW91bmcgbGFkaWVzLS1zaG91bGQgc3dpbSB3aXRob3V0CnRoZWlyIGNsb3RoZXMuCgogIFtUaGUgU2hlcGhlcmQncyBDcm93biwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcC4gMzcgKHBhc3NhZ2Ugc3RhcnRzIG1pZC1wYXJhZ3JhcGg7ICdzaGUnIGlzIFRpZmZhbnkgQWNoaW5nKQolcGFzc2FnZSAzCk5vdCBmb3IgdGhlIGZpcnN0IHRpbWUsIHNoZSB3b25kZXJlZCBob3cgaXQgd2FzIHRoYXQgY2F0cyBzZWVtZWQgdG8gYmUKYWJsZSB0byBiZSBpbiBvbmUgcGxhY2Ugb25lIG1vbWVudCwgYW5kIHRoZW4gL2FsbW9zdCBhdCB0aGUgc2FtZSB0aW1lLywKcmVhcHBlYXIgc29tZXdoZXJlIGVsc2UuKDEpCgooMSkgU2hlIGRpZCBub3Qga25vdyBpdCwgYnV0IGEga2VlbiB5b3VuZyBwaGlsb3NvcGhlciBpbiBFcGhlYmUgaGFkCnBvbmRlcmVkIGV4YWN0bHkgdGhhdCBzYW1lIGNvbnVtZHJ1bSwgdW50aWwgaGUgd2FzIGZvdW5kIG9uZSBtb3JuaW5nLS0KbW9zdCBvZiBoaW0sIGFueXdheS0tc3Vycm91bmRlZCBieSBhIG51bWJlciBvZiBwdXJyaW5nLCBhbmQgdmVyeSB3ZWxsIGZlZCwKY2F0cy4gIE5vIG9uZSBoYWQgc2VlbWVkIGtlZW4gdG8gY29udGludWUgaGlzIGV4cGVyaW1lbnRzIGFmdGVyIHRoYXQuCgogIFtUaGUgU2hlcGhlcmQncyBDcm93biwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiMgcHAuIDExMi0xMTMgKHRoZSBmb290bm90ZSBoYXMgYSBtaXNwcmludCBvZiBtaXNtYXRjaGVkIHF1b3RlczogIkNodWZmbGV5JykKJXBhc3NhZ2UgNApSb2xhbmQgZGUgQ2h1bXNmYW5sZWlnaCwoMSkgdGhlIHlvdW5nIEJhcm9uIG9uIHRoZSBDaGFsayAvZGlkLyB3YW50IHRvIGJlCmxpa2UgaGlzIGZhdGhlciBpbiBtYW55IHdheXMuICBIZSBrbmV3IHRoZSBvbGQgbWFuIGhhZCBiZWVuIHBvcHVsYXItLXdoYXQKd2FzIGtub3duIGFzIGFuICJvbGQtc2Nob29sIEJhcm9uLCIgd2hpY2ggbWVhbnQgdGhhdCBldmVyeW9uZSBrbmV3IHdoYXQKdG8gZXhwZWN0IGFuZCB0aGUgZ3VhcmRzIHBvbGlzaGVkIHVwIHRoZWlyIGFybW9yIGFuZCBzYWx1dGVkLCBhbmQgZGlkCndoYXQgd2FzIGV4cGVjdGVkIG9mIC90aGVtLywgd2hpbGUgdGhlIEJhcm9uIGRpZCB3aGF0IHdhcyBleHBlY3RlZCBvZiBoaW0sCmFuZCBwcmV0dHkgbXVjaCBsZWZ0IHRoZW0gYWxvbmUuCgpCdXQgaGlzIGZhdGhlciBoYWQgYWxzbyBiZWVuIGEgYml0IG9mIGEgYmFkLXRlbXBlcmVkIGJ1bGx5IGF0IHRpbWVzLiAgQW5kCi90aGF0LyBiaXQgUm9sYW5kIHdhbnRlZCB0byBmb3JnZXQgYWJvdXQuICBIZSBwYXJ0aWN1bGFybHkgd2FudGVkIHRvIHNvdW5kCnRoZSByaWdodCBub3RlIHdoZW4gaGUgY2FsbGVkIHJvdW5kIHRvIHNlZSBUaWZmYW55IEFjaGluZyBhdCBIb21lIEZhcm0uCkZvciB0aGV5IGhhZCBvbmNlIGJlZW4gZ29vZCBmcmllbmRzLCBhbmQgdG8gUm9sYW5kJ3MgYWxhcm0sIFRpZmZhbnkgd2FzCnRob3VnaHQgb2YgYXMgYSBnb29kIGZyaWVuZCBieSBoaXMgd2lmZSBMZXRpdGlhLiAgQW55IG1hbiB3aXRoIHNlbnNlIHdhcwp3aXNlIHRvIGJlIGZlYXJmdWwgb2YgYSB3aWZlJ3MgYmVzdCBmcmllbmRzLiAgRm9yIHdobyBrbmV3IHdoYXQgLi4uIGxpdHRsZQpzZWNyZXRzIG1pZ2h0IGJlIHNoYXJlZC4gIFJvbGFuZCwgaGF2aW5nIGJlZW4gZWR1Y2F0ZWQgYXQgaG9tZSBhbmQgd2l0aApsaW1pdGVkIGtub3dsZWRnZSBvZiB0aGUgd29ybGQgb3V0c2lkZSB0aGUgQ2hhbGssIGZlYXJlZCB0aGF0ICJsaXR0bGUiCm1pZ2h0IGJlIC9leGFjdGx5LyB0aGUga2luZCBvZiBjb21tZW50IExldGl0aWEgbWlnaHQgc2hhcmUgd2l0aCBUaWZmYW55LgoKKDEpIFByb25vdW5jZWQgIkNodWZmbGV5IiB1bmRlciB0aGUgc3RyYW5nZSBydWxlIHRoYXQgdGhlIG1vcmUgZ2VudHJpZmllZAphIGZhbWlseSBpcywgdGhlIG1vcmUgcGVjdWxpYXIgdGhlIHByb251bmNpYXRpb24gb2YgdGhlaXIgbmFtZSBiZWNvbWVzLgpUaWZmYW55IGhhZCBvbmNlIGhlYXJkIGEgaGlnaC1ib3JuIHZpc2l0b3IgbmFtZWQgUG9uc29uYnktTWFja2xld3JpZ2h0CigvUHd0LykgcmVmZXIgdG8gUm9sYW5kIGFzIC9DaGYvLiAgU2hlIHdvbmRlcmVkIGhvdyB0aGV5IG1hbmFnZWQgYXQgZGlubmVyCndoZW4gL1B3dC8gaW50cm9kdWNlZCAvQ2hmLyB0byAvV20vIG9yIC9IbXBmaC8uICBTdXJlbHkgaXQgY291bGQgbGVhZCB0bwptaXN1bmRlcnN0YW5kaW5ncz8KCiAgW1RoZSBTaGVwaGVyZCdzIENyb3duLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxNTgKJXBhc3NhZ2UgNQpIZSBraWNrZWQgdGhlIGhlbG1ldCBvZiBoaXMgY2hpZWYsIHRoZSBCaWcgTWFuIG9mIHRoZSBjbGFuLCBhbmQgc2hvdXRlZCwKIlRoZXJlJ3MgZWx2ZXMgaGVyZSEgIEkgY2FuIHNtZWxsIGl0LCB5ZSBrZW4hIgoKQW5kIGZyb20gZXZlcnkgaG9sZSBpbiB0dXJuLCB0aGUgY2xhbiBvZiB0aGUgTmFjIE1hYyBGZWVnbGUgcG91cmVkIG91dCBpbgp0aGVpciBodW5kcmVkcyB0byBkZWFsIHdpdGggdGhlIGFuY2llbnQgZW5lbXksIHdhdmluZyBjbGF5bW9yZXMgYW5kIHN3b3JkcywKeW9kZWxpbmcgdGhlaXIgd2FyIGNyaWVzOgoKIkFjaCwgc3RpY2tpdCB5ZXIgdHJha2thbnMhIgoKIk5hYyBNYWMgRmVlZ2xlIHdoYSBoYWUhIgoKIkdhZSBhd2EnIHdpJyB5ZSwgeWVyIGJvZ2xlISIKCiJHaSdlIHlvdSBzaWNoIGEgZ3VpZCBraWNraW4nISIKCiJOYWUga2luZyEgIE5hZSBxdWluISAgV2Ugd2lsbCBuYWUgYmUgZm9vbGVkIGFnaW4hIgoKVGhlcmUgaXMgYSBjb25jZXB0IGtub3duIGFzIGEgaHVzdGxlIGFuZCBidXN0bGUsIGFuZCB0aGUgRmVlZ2xlcyB3ZXJlIHZlcnkKZ29vZCBhdCBpdCwgY2hlZXJmdWxseSBnZXR0aW5nIGluIG9uZSBhbm90aGVyJ3Mgd2F5IGluIHRoZSBkcml2ZSB0byBiZSB0aGUKZmlyc3QgaW50byBiYXR0bGUsIGFuZCBpdCBzZWVtZWQgYXMgaWYgZWFjaCBzbWFsbCB3YXJyaW9yIGhhZCBhIGJhdHRsZSBjcnkKb2YgaGlzIG93bi0tYW5kIGhlIHdhcyB2ZXJ5IHJlYWR5IHRvIGZpZ2h0IGFueW9uZSB3aG8gdHJpZWQgdG8gdGFrZSBpdAphd2F5IGZyb20gaGltLgoKIkhvdyBtYW55IGVsdmVzPyIgYXNrZWQgUm9iIEFueWJvZHksIHRyeWluZyB0byBhZGp1c3QgaGlzIHNwb2cuCgpUaGVyZSB3YXMgYSBwYXVzZS4KCiJPbmUsIiBzYWlkIEJpZyBZYW4gc2hlZXBpc2hseS4KCiAgW1RoZSBTaGVwaGVyZCdzIENyb3duLCBieSBUZXJyeSBQcmF0Y2hldHRdCiVlIHBhc3NhZ2UKIyBwLiAxNTkgKHBhc3NhZ2Ugc3RhcnRzIG1pZC1wYXJhZ3JhcGguICdvb3InIGlzIGFjY3VyYXRlKQolcGFzc2FnZSA2CiJUaGlzIGVsZiBpcyBvb3IgcHJpc29uZXIuICBBIGhvc3RhZ2UsIHllIGtlbi4gIFRoYXQgbWVhbnMgeWUgYXJlIG5hZSB0YWUKa2lsbCBpdCB1bnRpbCB5ZSBhcmUgdG9sZC4iICBIZSBpZ25vcmVkIHRoZSBncnVtYmxlcyBmcm9tIHRoZSBjbGFuLiAgIkFzCnRhZSB0aGUgcmVzdCBvJyB5ZSwgdGFrIGd1YXJkIGFyb3VuZCB5b24gc3RvbmVzLiAgQW5kIGlmIHRoZXkgY29tZSBpbgpmb3JjZSwgc2hvdyB0aGVtIHdoYXQgdGhlIEZlZWdsZXMgY2FuIGRhZSEiCgpEYWZ0IFd1bGxpZSBzYWlkLCAiSSBjYW4gcGxheSB0aGUgaGFybW9uaWNhLiIKClJvYiBBbnlib2R5IHNpZ2hlZC4gICJBeWUsIHdlZWwsIEkgc3VwcG9zZSB0aGF0IHB1dHMgdGhlIHdpbGxpZXMgdXAgbWUsCnNvIHd1ZCBsaWtlbHkga2VlcCB0aGVtIGF3YScuIgoKICBbVGhlIFNoZXBoZXJkJ3MgQ3Jvd24sIGJ5IFRlcnJ5IFByYXRjaGV0dF0KJWUgcGFzc2FnZQojIHAuIDIwMgolcGFzc2FnZSA3ClNvbWV0aW1lcywgVGlmZmFueSB0aG91Z2h0LCBJIGFtIHNvIC9mZWQgdXAvIHdpdGggYmVpbmcgeW91bmcuKDEpCgooMSkgQSB0aG91Z2h0IHRoYXQgc2hlIHdvdWxkIG1vc3QgY2VydGFpbmx5IGdyb3cgb3V0IG9mLCBhc3N1bWluZyBzaGUKc3Vydml2ZWQgbG9uZyBlbm91Z2guCgogIFtUaGUgU2hlcGhlcmQncyBDcm93biwgYnkgVGVycnkgUHJhdGNoZXR0XQolZSBwYXNzYWdlCiVlIHRpdGxlCiMKJWUgc2VjdGlvbgojCiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQojIFVzZWQgZm9yIGludGVyYWN0aW9uIHdpdGggRGVhdGguCiMKIyBEZWF0aCBRdW90ZXMgYXJlIGFsd2F5cyBvbmUgbGluZSwgYW5kICclZSBwYXNzYWdlJyBjYW4gYmUgb21pdHRlZC4KIwolc2VjdGlvbiBEZWF0aAoldGl0bGUgRGVhdGggUXVvdGVzICgzMSkKJXBhc3NhZ2UgMQpXSEVSRSBUSEUgRklSU1QgUFJJTUFMIENFTEwgV0FTLCBUSEVSRSBXQVMgSSBBTFNPLiAgV0hFUkUgTUFOIElTLCBUSEVSRSBBTSBJLiAgV0hFTiBUSEUgTEFTVCBMSUZFIENSQVdMUyBVTkRFUiBGUkVFWklORyBTVEFSUywgVEhFUkUgV0lMTCBJIEJFLgolZSBwYXNzYWdlCiMgRmVldCBvZiBDbGF5LCBwLiAxNyAoSGFycGVyIFRvcmNoIGVkaXRpb24pCiVwYXNzYWdlIDIKSSBBTSBERUFUSCwgTk9UIFRBWEVTLiAgL0kvIFRVUk4gVVAgT05MWSBPTkNFLgolZSBwYXNzYWdlCiMgTWVuIGF0IEFybXMsIHAuIDI3IChIYXJwZXIgVG9yY2ggZWRpdGlvbikKJXBhc3NhZ2UgMwpUSElOSyBPRiBJVCBNT1JFIEFTIEJFSU5HIC4uLiBESU1FTlNJT05BTExZIERJU0FEVkFOVEFHRUQuCiVlIHBhc3NhZ2UKIyBTb3VsIE11c2ljLCBwLiAxNDYgKEhhcnBlciBUb3JjaCBlZGl0aW9uOyB3ZSBvbWl0ICJzYWlkIERlYXRoLCIgYWZ0ZXIgY29tbWEpCiVwYXNzYWdlIDQKSSBNQVkgSEFWRSBBTExPV0VEIE1ZU0VMRiBTT01FIEZMSUNLRVIgT0YgRU1PVElPTiBJTiBUSEUgUkVDRU5UIFBBU1QsIEJVVCBJIENBTiBHSVZFIElUIFVQIEFOWSBUSU1FIEkgTElLRS4KJWUgcGFzc2FnZQolcGFzc2FnZSA1CiMgTm90IGEgZGlyZWN0IHF1b3RlLCBidXQgYSByZWZlcmVuY2UgdG8gVGhpZWYgb2YgVGltZSBhbmQgdGhlIGZhY3QgdGhhdAojIHRoZSBwbGF5ZXIgaXMgV2FyCkhBVkUgWU9VIFNQT0tFTiBUTyBST05OSUUgTEFURUxZPwolZSBwYXNzYWdlCiMgUmFpc2luZyBTdGVhbSwgcC4gMTgwIChBbmNob3IgQm9va3MgZWRpdGlvbikKJXBhc3NhZ2UgNgpQTEVBU0UgRE8gTk9UIFBBTklDLiAgWU9VIEFSRSBNRVJFTFkgREVBRC4KJWUgcGFzc2FnZQojIFNtYWxsIEdvZHMsIHAuIDkwIChIYXJwZXIgVG9yY2ggZWRpdGlvbikKJXBhc3NhZ2UgNwpUSEVSRSBJUyBBIExJVFRMRSBDT05GVVNJT04gQVQgRklSU1QuICBJVCBJUyBPTkxZIFRPIEJFIEVYUEVDVEVELgolZSBwYXNzYWdlCiMgSG9nZmF0aGVyLCBwLiAzNDMgKEhhcnBlciBUb3JjaCBlZGl0aW9uOyBEZWF0aCAibGl2ZXMiIG91dHNpZGUgb2Ygbm9ybWFsCiMgICAgICAgICAgICAgICAgICAgIHRpbWUgYW5kIHNwYWNlKQolcGFzc2FnZSA4ClRIRVJFIElTIEFMV0FZUyBUSU1FIEZPUiBBTk9USEVSIExBU1QgTUlOVVRFLgojIFdpbnRlcnNtaXRoLCBwLiAxODcgKEhhcnBlclRlZW4gZWRpdGlvbjsgZHlpbmcgTWlzcyBUcmVhc29uIHRha2VzIGEgaGFtCiMgW3RvbyBzaWxseT9dICAgICAgICAgc2FuZHdpY2ggd2l0aCBoZXIgdG8gdGhlIGdyYXZlLCBhbmQgaXQgYWNjb21wYW5pZXMKIyAgICAgICAgICAgICAgICAgICAgICBoZXIgdG8gdGhlIGFmdGVybGlmZSwgYnV0IGl0cyBjb25kaW1lbnRzIGRvbid0KQolcGFzc2FnZSA5Ck1VU1RBUkQgSVMgQUxXQVlTIFRSSUNLWS4KJXBhc3NhZ2UgMTAKUElDS0xFUyBPRiBBTEwgU09SVFMgRE9OJ1QgU0VFTSBUTyBNQUtFIElULiAgSSdNIFNPUlJZLgojIFRoZSBDb2xvdXIgb2YgTWFnaWMsIHAuIDY4IChTaWduZXQgZWRpdGlvbikKJXBhc3NhZ2UgMTEKSVQgV09OJ1QgSFVSVCBBIEJJVC4KIyBwLiAxNzcKJXBhc3NhZ2UgMTIKU0hBTEwgV0UgR08/CiMgcC4gMjUxIChzcGVha2VyIGlzIGFjdHVhbGx5IGEgZGVtb24gbmFtZWQgJ1Njcm9mdWxhJyBmaWxsaW5nIGluIGZvciBEZWF0aCkKJXBhc3NhZ2UgMTMKSSBIQVZFIENPTUUgRk9SIFRIRUUuCiMgVGhlIExpZ2h0IEZhbnRhc3RpYywgcC4gNTIgKFNpZ25ldCBlZGl0aW9uOyBxdW90ZSBoYXMgcXVvdGF0aW9uIG1hcmtzIGJ1dAojICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNsdWRpbmcgdGhlbSBoZXJlIHdvdWxkbid0IGZpdCB3aXRoIHRoZSByZXN0OwojICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWF0aCBpcyBhZGRyZXNzaW5nIGFuIGVsZGVybHkgd2l6YXJkIHdobyB3ZW50CiMgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGV4dHJlbWUgbWVhc3VyZXMgdG8gaGlkZSBoaW1zZWxmIFtmcm9tIERlYXRoXSkKJXBhc3NhZ2UgMTQKREFSSyBJTiBIRVJFLCBJU04nVCBJVD8KIyBFcXVhbCBSaXRlcywgcC4gMTQgKFNpZ25ldCBlZGl0aW9uOyBzZWNvbmQgc2VudGVuY2UgY29udGludWVzCiMgICAgICAgICAgICAgICAgICAgICAnc2FpZCB0aGUgZGVlcCwgaGVhdnkgdm9pY2UuLi4nKQolcGFzc2FnZSAxNQpUSEVSRSBJUyBOTyBHT0lORyBCQUNLLiAgVEhFUkUgSVMgTk8gR09JTkcgQkFDSy4KIyBwLiAxNSAoY29udHJhZGljdHMgbGF0ZXIgZGVzY3JpcHRpb25zIG9mIERlYXRoIGFzIGV4aXN0aW5nIG91dHNpZGUgb2YgdGltZTsKIyAgICAgICAgcHJlc3VtYWJseSBpdCdzIGp1c3QgaW50ZW5kZWQgYXMgYSBjb2xsb3F1aWFsIGV4cHJlc3Npb24pCiVwYXNzYWdlIDE2CkkgSEFWRU4nVCBHT1QgQUxMIERBWSwgWU9VIEtOT1cuCiMgcC4gMTUgKHNhbWUgcGFnZSkKJXBhc3NhZ2UgMTcKTElGRSBJUyBGT1IgVEhFIExJVklORy4KIyBNb3J0LCBwLiAxNDggKFNpZ25ldCBlZGl0aW9uKQolcGFzc2FnZSAxOApOTy1PTkUgRVZFUiBXQU5URUQgVE8gVEFMSyBUTyBNRSBCRUZPUkUuCiMgcC4gMTQ5CiVwYXNzYWdlIDE5CkkgSEFWRU4nVCBHT1QgQSBTSU5HTEUgRlJJRU5ELiAgRVZFTiBDQVRTIEZJTkQgTUUgQU1VU0lORy4KIyBTb3VyY2VyeSwgcC4gMTIgKFNpZ25ldCBlZGl0aW9uKQolcGFzc2FnZSAyMApZT1UnUkUgT05MWSBQVVRUSU5HIE9GRiBUSEUgSU5FVklUQUJMRS4KIyBXeXJkIFNpc3RlcnMsIHAuIDExIChST0MgZWRpdGlvbikKJXBhc3NhZ2UgMjEKSSBTQUlEIFdBUy4gIElUJ1MgQ0FMTEVEIFRIRSBQQVNUIFRFTlNFLiAgWU9VJ0xMIFNPT04gR0VUIFVTRUQgVE8gSVQuCiMgcC4gMTMKJXBhc3NhZ2UgMjIKRE9OJ1QgTEVUIElUIFVQU0VUIFlPVS4KIyBQeXJhbWlkcywgcC4gNTcgKFJPQyBlZGl0aW9uKQolcGFzc2FnZSAyMwpJIENBTiBTRUUgVEhBVCBZT1UgSEFWRSBHT1QgQSBMT1QgVE8gVEhJTksgQUJPVVQuCiMgRXJpYywgcC4gMTM0IChIYXJwZXIgVG9yY2ggZWRpdGlvbikKJXBhc3NhZ2UgMjQKUEVSSEFQUyBJVCdTIFRJTUUgVE8gQ0FMTCBJVCBBIERBWS4KIyBNb3ZpbmcgUGljdHVyZXMsIHAuIDI2MCAoUk9DIGVkaXRpb24pCiVwYXNzYWdlIDI1CkkgS05PVyBXSEVOIEVWRVJZT05FJ1MgSEFEIEVOT1VHSC4KIyBSZWFwZXIgTWFuLCBwLiAxMCAoUk9DIGVkaXRpb24pCiVwYXNzYWdlIDI2CkkgSEFWRSBBTFdBWVMgRE9ORSBNWSBEVVRZIEFTIEkgU0FXIEZJVC4KIyBwLiAxOAolcGFzc2FnZSAyNwpJIEFNIE5PVCBLTk9XTiBGT1IgTVkgU0VOU0UgT0YgRlVOLgojIHAuIDE2MAolcGFzc2FnZSAyOApJIE1FQU4gVEhBVCBUSEVSRSBJUyBBIFRJTUUgRk9SIEVWRVJZT05FIFRPIERJRS4KIyBwLiAyMjcKJXBhc3NhZ2UgMjkKSlVTVCBCRUNBVVNFIFNPTUVUSElORyBJUyBBIE1FVEFQSE9SRSBET0VTTidUIE1FQU4gSVQgQ0FOJ1QgQkUgUkVBTC4KIyBwLiAzMzQKJXBhc3NhZ2UgMzAKSSBBTSBBTFdBWVMgQUxPTkUuICBCVVQgSlVTVCBOT1cgSSBXQU5UIFRPIEJFIEFMT05FIEJZIE1ZU0VMRi4KIyBXaXRjaGVzIEFicm9hZCwgcC4gMjk4IChEZWF0aCdzIGV4cGxhbmF0aW9uIHdoeSBoZSBkaWRuJ3QgY29tZSBmb3Igem9tYmllIDEyCiMgICAgICAgICAgICAgICAgICAgICAgICAgeWVhcnMgZWFybGllcjogIFlPVSBTVE9QUEVEIExJVklORy4gIFlPVSBORVZFUiBESUVELikKJXBhc3NhZ2UgMzEKSSBIQUQgQU4gQVBQT0lOVE1FTlQgV0lUSCBZT1UgVE9OSUdIVC4KJWUgdGl0bGUKJWUgc2VjdGlvbgojCiNlb2YKLS0gTmV0SGFjayAzLjcJZ2VoZW5ub20uZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODMgMjAxNS8wNS8yNSAwMDoxMzowMyAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjEzICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkyIGJ5IE0uIFN0ZXBoZW5zb24gYW5kIEl6Y2hhayBNaWxsZXIKLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZT0ibWF6ZWdyaWQiLCBiZyA9Ii0iIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiKQotLSBGaXJzdCBwYXJ0CmRlcy5tYXAoeyBoYWxpZ24gPSAiaGFsZi1sZWZ0IiwgdmFsaWduID0gImNlbnRlciIsIG1hcCA9IFtbCi0tLS0tLS0tLS0tLS0tLS0tLS0tLQp8Li4uLi4uLi4uLi4uLnwuLi4uLnwKfC4uLi4uLi4uLi4uLi5TLi4uLi58CnwtLS0rLS0tLS0tLS0tLS0tLi4ufAp8Li4uLi58Li4uLi4uLi4ufC0rLS0KfC4uLS0tfC4uLi4uLi4uLnwuLi4uCnwuLnwuLlMuLi4uLi4uLi58Li4uLgp8Li58Li58Li4uLi4uLi4ufC4uLi4KfC4ufC4ufC4uLi4uLi4uLnwtKy0tCnwuLnwuLi0tLS0tLS0tLS0tLi4ufAp8Li5TLi4uLi4uLi4uLnwuLi4uLnwKLS0tLS0tLS0tLS0tLS0tLS0tLS0tCl1dIH0pOwoKZGVzLmxldnJlZ2lvbih7IHJlZ2lvbj17MDEsMDAsNiwyMH0sIHJlZ2lvbl9pc2xldj0xLCBleGNsdWRlPXs2LDEsNzAsMTZ9LCBleGNsdWRlX2lzbGV2PTEsIHR5cGU9InN0YWlyLXVwIiB9KTsKLS0gZGVzLnN0YWlyKGxldnJlZ2lvbigwMSwwMCw2LDIwKSxsZXZyZWdpb24oNiwxLDcwLDE2KSx1cCkKCmRlcy5sZXZyZWdpb24oeyByZWdpb249ezAxLDAwLDYsMjB9LCByZWdpb25faXNsZXY9MSwgZXhjbHVkZT17NiwxLDcwLDE2fSwgZXhjbHVkZV9pc2xldj0xLCB0eXBlPSJicmFuY2giIH0pOwotLSBkZXMuYnJhbmNoKGxldnJlZ2lvbigwMSwwMCw2LDIwKSxsZXZyZWdpb24oNiwxLDcwLDE2KSkKZGVzLnRlbGVwb3J0X3JlZ2lvbih7IHJlZ2lvbiA9IHswMSwwMCw2LDIwfSwgcmVnaW9uX2lzbGV2PTEsIGV4Y2x1ZGU9ezYsMSw3MCwxNn0sIGV4Y2x1ZGVfaXNsZXY9MSB9KQoKLS0gRG9vcnMKZGVzLmRvb3IoImNsb3NlZCIsMDQsMDMpCmRlcy5kb29yKCJsb2NrZWQiLDE4LDA0KQpkZXMuZG9vcigiY2xvc2VkIiwxOCwwOCkKLS0KZGVzLnN0YWlyKCJkb3duIiwgMTMsMDcpCi0tIE5vbiBkaWdnYWJsZSB3YWxscwpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDIwLDExKSkKLS0gRW50aXJlIG1haW4gYXJlYQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAxLDAxLDIwLDEwKSwidW5saXQiKQotLSBUaGUgZmVsbG93IGluIHJlc2lkZW5jZQpkZXMubW9uc3RlcigiQXNtb2RldXMiLDEyLDA3KQotLSBTb21lIHJhbmRvbSB3ZWFwb25zIGFuZCBhcm1vci4KZGVzLm9iamVjdCgiWyIpCmRlcy5vYmplY3QoIlsiKQpkZXMub2JqZWN0KCIpIikKZGVzLm9iamVjdCgiKSIpCmRlcy5vYmplY3QoIioiKQpkZXMub2JqZWN0KCIhIikKZGVzLm9iamVjdCgiISIpCmRlcy5vYmplY3QoIj8iKQpkZXMub2JqZWN0KCI/IikKZGVzLm9iamVjdCgiPyIpCi0tIFNvbWUgdHJhcHMuCmRlcy50cmFwKCJzcGlrZWQgcGl0IiwgMDUsMDIpCmRlcy50cmFwKCJmaXJlIiwgMDgsMDYpCmRlcy50cmFwKCJzbGVlcCBnYXMiKQpkZXMudHJhcCgiYW50aSBtYWdpYyIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoIm1hZ2ljIikKZGVzLnRyYXAoIm1hZ2ljIikKLS0gUmFuZG9tIG1vbnN0ZXJzLgpkZXMubW9uc3RlcigiZ2hvc3QiLDExLDA3KQpkZXMubW9uc3RlcigiaG9ybmVkIGRldmlsIiwxMCwwNSkKZGVzLm1vbnN0ZXIoIkwiKQotLSBTb21lIFZhbXBpcmVzIGZvciBnb29kIG1lYXN1cmUKZGVzLm1vbnN0ZXIoIlYiKQpkZXMubW9uc3RlcigiViIpCmRlcy5tb25zdGVyKCJWIikKLS0gU2Vjb25kIHBhcnQKZGVzLm1hcCh7IGhhbGlnbiA9ICJoYWxmLXJpZ2h0IiwgdmFsaWduID0gImNlbnRlciIsIG1hcCA9IFtbCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4rCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KXV0gfSk7CmRlcy5tYXpld2FsaygzMiwwMiwiZWFzdCIpCi0tIE5vbiBkaWdnYWJsZSB3YWxscwpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDMyLDA0KSkKZGVzLmRvb3IoImNsb3NlZCIsMzIsMDIpCmRlcy5tb25zdGVyKCImIikKZGVzLm1vbnN0ZXIoIiYiKQpkZXMubW9uc3RlcigiJiIpCmRlcy50cmFwKCJhbnRpIG1hZ2ljIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgibWFnaWMiKQotLSBOZXRIYWNrIDMuNwlnZWhlbm5vbS5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4MyAyMDE1LzA1LzI1IDAwOjEzOjAzICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTMgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTIgYnkgTS4gU3RlcGhlbnNvbiBhbmQgSXpjaGFrIE1pbGxlcgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKLS0gVE9ETyBGSVhNRTogc2VlIGJhYWx6X2ZpeHVwIC0gdGhlIGxlZ3MgZ2V0IHJlbW92ZWQgY3VycmVudGx5LgoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAiY29ycm1hemUiKQotLSB0aGUgdHdvIHBvb2xzIGFyZSBmYWtlcyB1c2VkIHRvIG1hcmsgc3BvdHMgd2hpY2ggbmVlZCBzcGVjaWFsIHdhbGwgZml4dXBzCi0tIHRoZSB0d28gaXJvbiBiYXJzIGFyZSBleWVzIGFuZCBzcG90cyB0byB0aGVpciBsZWZ0IHdpbGwgYmUgbWFkZSBkaWdnYWJsZQpkZXMubWFwKHsgaGFsaWduID0gInJpZ2h0IiwgdmFsaWduID0gImNlbnRlciIsIG1hcCA9IFtbCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KfCAgICAgICAgICAgICAgICAgICAtLS0tICAgICAgICAgICAgICAgLS0tLSAgICAgIAp8ICAgICAgICAgIC0tLS0gICAgIHwgICAgIC0tLS0tLS0tLS0tICB8ICAgICAgICAgCnwgLS0tLS0tICAgICAgfCAgLS0tLS0tLS0tfC4uLi4uLi4uLnwtLVAgICAgICAgICAKfCBGLi4uLnwgIC0tLS0tLS18Li4uLi4uLi4uLi4tLS0tLS0tLS0tLS0tLSAgICAgIAotLS0uLi4ufC0tfC4uLi4uLi4uLi4uLi4uLi4uLlMuLi4uLi4uLi4uLi58LS0tLSAgCisuLi4tLS4uLi5TLi4tLS0tLS0tLS0tLS0tLS0tfC4uLi4uLi4uLi4uLlMuLi58ICAKLS0tLi4uLnwtLXwuLi4uLi4uLi4uLi4uLi4uLi58Li4uLi4uLi4uLi4ufC0tLS0gIAp8IEYuLi4ufCAgLS0tLS0tLXwuLi4uLi4uLi4uLi0tLS0tUy0tLS0tLS0tICAgICAgCnwgLS0tLS0tICAgICAgfCAgLS0tLS0tLS0tfC4uLi4uLi4uLnwtLVAgICAgICAgICAKfCAgICAgICAgICAtLS0tICAgICB8ICAgICAtLS0tLS0tLS0tLSAgfCAgICAgICAgIAp8ICAgICAgICAgICAgICAgICAgIC0tLS0gICAgICAgICAgICAgICAtLS0tICAgICAgCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KXV0gfSk7CmRlcy5sZXZyZWdpb24oeyByZWdpb24gPSB7MDEsMDAsMTUsMjB9LCByZWdpb25faXNsZXY9MSwgZXhjbHVkZT17MTUsMSw3MCwxNn0sIGV4Y2x1ZGVfaXNsZXY9MSwgdHlwZT0ic3RhaXItdXAiIH0pCmRlcy5sZXZyZWdpb24oeyByZWdpb24gPSB7MDEsMDAsMTUsMjB9LCByZWdpb25faXNsZXY9MSwgZXhjbHVkZT17MTUsMSw3MCwxNn0sIGV4Y2x1ZGVfaXNsZXY9MSwgdHlwZT0iYnJhbmNoIiB9KQpkZXMudGVsZXBvcnRfcmVnaW9uKHtyZWdpb24gPSB7MDEsMDAsMTUsMjB9LCByZWdpb25faXNsZXY9MSwgZXhjbHVkZSA9IHsxNSwxLDcwLDE2fSwgZXhjbHVkZV9pc2xldj0xIH0pCi0tIHRoaXMgYWN0dWFsbHkgbGVhdmVzIHRoZSBmYXJ0aGVzdCByaWdodCBjb2x1bW4gZGlnZ2FibGUKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgwMCwwMCw0NywxMikpCmRlcy5tYXpld2FsaygwMCwwNiwid2VzdCIpCmRlcy5zdGFpcigiZG93biIsIDQ0LDA2KQpkZXMuZG9vcigibG9ja2VkIiwwMCwwNikKaWYgcGVyY2VudCg1MCkgdGhlbgogICBkZXMudGVycmFpbigzNCwwOCwnLScpCiAgIGRlcy50ZXJyYWluKDM0LDA0LCdTJykKICAgZGVzLnRlcnJhaW4oMjksMDUsJ3wnKQogICBkZXMudGVycmFpbigyOSwwNywnUycpCmVuZAotLSBUaGUgZmVsbG93IGluIHJlc2lkZW5jZQpkZXMubW9uc3RlcigiQmFhbHplYnViIiwzNSwwNikKLS0gU29tZSByYW5kb20gd2VhcG9ucyBhbmQgYXJtb3IuCmRlcy5vYmplY3QoIlsiKQpkZXMub2JqZWN0KCJbIikKZGVzLm9iamVjdCgiKSIpCmRlcy5vYmplY3QoIikiKQpkZXMub2JqZWN0KCIqIikKZGVzLm9iamVjdCgiISIpCmRlcy5vYmplY3QoIiEiKQpkZXMub2JqZWN0KCI/IikKZGVzLm9iamVjdCgiPyIpCmRlcy5vYmplY3QoIj8iKQotLSBTb21lIHRyYXBzLgpkZXMudHJhcCgic3Bpa2VkIHBpdCIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoInNsZWVwIGdhcyIpCmRlcy50cmFwKCJhbnRpIG1hZ2ljIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgibWFnaWMiKQpkZXMudHJhcCgibWFnaWMiKQotLSBSYW5kb20gbW9uc3RlcnMuCmRlcy5tb25zdGVyKCJnaG9zdCIsMzcsMDcpCmRlcy5tb25zdGVyKCJob3JuZWQgZGV2aWwiLDMyLDA1KQpkZXMubW9uc3RlcigiYmFyYmVkIGRldmlsIiwzOCwwNykKZGVzLm1vbnN0ZXIoIkwiKQotLSBTb21lIFZhbXBpcmVzIGZvciBnb29kIG1lYXN1cmUKZGVzLm1vbnN0ZXIoIlYiKQpkZXMubW9uc3RlcigiViIpCmRlcy5tb25zdGVyKCJWIikKCgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub2ZsaXAiKTsKCmRlcy5tYXAoW1sKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufAp8Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58CnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufAp8Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58CnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufAp8Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58CnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufAp8Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58CnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufAp8Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58CnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KXV0pOwoKCmlmIHBlcmNlbnQoNzUpIHRoZW4KICAgbG9jYWwgdGVycmFpbnMgPSB7ICItIiwgIkYiLCAiTCIsICJUIiwgIkMiIH07CiAgIGxvY2FsIHRpZHggPSBtYXRoLnJhbmRvbSgxLCAjdGVycmFpbnMpOwogICBsb2NhbCBjaG9pY2UgPSBtYXRoLnJhbmRvbSgwLCA0KTsKICAgaWYgY2hvaWNlID09IDAgdGhlbgogICAgICAtLSBvbmUgaG9yaXpvbnRhbCBsaW5lCiAgICAgIGRlcy50ZXJyYWluKHNlbGVjdGlvbi5saW5lKDEwLDgsIDY1LDgpLCB0ZXJyYWluc1t0aWR4XSk7CiAgIGVsc2VpZiBjaG9pY2UgPT0gMSB0aGVuCiAgICAgIC0tIHR3byB2ZXJ0aWNhbCBsaW5lcwogICAgICBsb2NhbCBzZWwgPSBzZWxlY3Rpb24ubGluZSgxNSw0LCAxNSwgMTMpIHwgc2VsZWN0aW9uLmxpbmUoNTksNCwgNTksIDEzKTsKICAgICAgZGVzLnRlcnJhaW4oc2VsLCB0ZXJyYWluc1t0aWR4XSk7CiAgIGVsc2VpZiBjaG9pY2UgPT0gMiB0aGVuCiAgICAgIC0tIHBsdXMgc2lnbgogICAgICBsb2NhbCBzZWwgPSBzZWxlY3Rpb24ubGluZSgxMCw4LCA2NCwgOCkgfCBzZWxlY3Rpb24ubGluZSgzNywzLCAzNywgMTQpOwogICAgICBkZXMudGVycmFpbihzZWwsIHRlcnJhaW5zW3RpZHhdKTsKICAgZWxzZWlmIGNob2ljZSA9PSAzIHRoZW4KICAgICAgLS0gYnJhY2tldHM6ICBbICBdCiAgICAgIGRlcy50ZXJyYWluKHNlbGVjdGlvbi5yZWN0KDQsNCwgNzAsMTMpLCB0ZXJyYWluc1t0aWR4XSk7CiAgICAgIGxvY2FsIHNlbCA9IHNlbGVjdGlvbi5saW5lKDI1LDQsIDUwLDQpIHwgc2VsZWN0aW9uLmxpbmUoMjUsMTMsIDUwLDEzKTsKICAgICAgZGVzLnRlcnJhaW4oc2VsLCAnLicpOwogICBlbHNlCiAgICAgIC0tIG5vdGhpbmcKICAgZW5kCmVuZAoKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMSwwMSwgNzMsIDE2KSwgImxpdCIpOwoKZGVzLnN0YWlyKCJ1cCIpOwpkZXMuc3RhaXIoImRvd24iKTsKCmRlcy5ub25fZGlnZ2FibGUoKTsKCmZvciBpID0gMSwxNSBkbwogICBkZXMub2JqZWN0KCk7CmVuZAoKZm9yIGkgPSAxLDYgZG8KICAgZGVzLnRyYXAoKTsKZW5kCgpmb3IgaSA9IDEsMjggZG8KICBkZXMubW9uc3RlcigpOwplbmQKCgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub2ZsaXAiKTsKCmRlcy5tYXAoW1sKLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMuLi4KLi4uQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0MuLi4KLi4uQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMuLi4KLi4uQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0MuLi4KLi4uQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMuLi4KLi4uQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0MuLi4KLi4uQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMuLi4KLi4uQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0MuLi4KLi4uQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMuLi4KLi4uQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0MuLi4KLi4uQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMgQyBDIEMuLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KXV0pOwoKaWYgcGVyY2VudCg0MCkgdGhlbgogICAtLSBvY2Nhc2lvbmFsbHkgaXQncyBub3QgYSBmb2cgbWF6ZQogICBsb2NhbCB0ZXJyYWluID0geyAiTCIsICJ9IiwgIlQiLCAiLSIsICJGIiB9OwogICBsb2NhbCB0aWR4ID0gbWF0aC5yYW5kb20oMSwgI3RlcnJhaW4pOwogICAtLSBicmVhayBpdCB1cCBhIGJpdAogICBkZXMucmVwbGFjZV90ZXJyYWluKHsgcmVnaW9uPXswLCAwLCA3MCwgMTh9LCBmcm9tdGVycmFpbj0iQyIsIHRvdGVycmFpbj0iLiIsIGNoYW5jZT01IH0pOwogICBkZXMucmVwbGFjZV90ZXJyYWluKHsgcmVnaW9uPXswLCAwLCA3MCwgMTh9LCBmcm9tdGVycmFpbj0iQyIsIHRvdGVycmFpbj10ZXJyYWluW3RpZHhdIH0pOwplbmQ7CgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDcwLDE4KSwgImxpdCIpOwoKLS0gd2hlbiBmYWxsaW5nIGRvd24gb24gdGhpcyBsZXZlbCwgbmV2ZXIgZW5kIHVwIGluIHRoZSBmb2cgbWF6ZQpkZXMudGVsZXBvcnRfcmVnaW9uKHsgcmVnaW9uID0gezAwLDAwLDcwLDE4fSwgZXhjbHVkZSA9IHswMiwwMyw2OCwxNX0sIGRpciA9ICJkb3duIiB9KTsKCmZvciBpID0gMSwxNSBkbwogICBkZXMub2JqZWN0KCk7CmVuZAoKZm9yIGkgPSAxLDYgZG8KICAgZGVzLnRyYXAoKTsKZW5kCgpmb3IgaSA9IDEsMjggZG8KICBkZXMubW9uc3RlcigpOwplbmQKCmRlcy5tYXpld2Fsayh7IHg9NCwgeT0yLCBkaXI9InNvdXRoIiwgc3RvY2tlZD0wIH0pOwoKLS0gU3RhaXJzIHVwLCBub3QgaW4gdGhlIGZvZyBtYXplCmRlcy5sZXZyZWdpb24oeyByZWdpb24gPSB7MDAsMDAsNzAsMTh9LCBleGNsdWRlID0gezAyLDAzLDY4LDE1fSwgdHlwZT0ic3RhaXItdXAifSk7CmRlcy5zdGFpcigiZG93biIpOwoKZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm9mbGlwIik7CgpkZXMubWFwKFtbCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQp8Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58CnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufAp8Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58CnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufAp8Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58CnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufAp8Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58CnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufAp8Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58CnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufAp8Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCl1dKTsKLS0gRHVuZ2VvbiBEZXNjcmlwdGlvbgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAxLDAxLDczLDE2KSwibGl0Iik7Cgpsb2NhbCBjaG9pY2UgPSBtYXRoLnJhbmRvbSgwLCAzKQppZiBjaG9pY2UgPT0gMCB0aGVuCiAgZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMSwwNywyMiwwOSksInVubGl0Iik7CiAgZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgyNCwwMSw1MCwwNSksInVubGl0Iik7CiAgZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgyNCwxMSw1MCwxNiksInVubGl0Iik7CiAgZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg1MiwwNyw3MywwOSksInVubGl0Iik7CmVsc2VpZiBjaG9pY2UgPT0gMSB0aGVuCiAgZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgyNCwwMSw1MCwxNiksInVubGl0Iik7CmVsc2VpZiBjaG9pY2UgPT0gMiB0aGVuCiAgZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMSwwMSwyMiwxNiksInVubGl0Iik7CiAgZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg1MiwwMSw3MywxNiksInVubGl0Iik7CmVuZAoKLS0gU3RhaXJzCmRlcy5zdGFpcigidXAiKTsKZGVzLnN0YWlyKCJkb3duIik7Ci0tIE5vbiBkaWdnYWJsZSB3YWxscwpkZXMubm9uX2RpZ2dhYmxlKCk7Ci0tIE9iamVjdHMKZm9yIGkgPSAxLDE1IGRvCiAgIGRlcy5vYmplY3QoKTsKZW5kCi0tIFJhbmRvbSB0cmFwcwpmb3IgaSA9IDEsNiBkbwogICBkZXMudHJhcCgpOwplbmQKLS0gUmFuZG9tIG1vbnN0ZXJzLgpmb3IgaSA9IDEsMjggZG8KICAgZGVzLm1vbnN0ZXIoKTsKZW5kCgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub2ZsaXAiKTsKCmRlcy5tYXAoW1sKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCnwufC58LnwufC58LnwufC58LnwufC58LnwufC58LnwufC58LnwufC58LnwufC58LnwufC58LnwufC58LnwufC58LnwufC58LnwufAp8Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58CnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufAp8Li4uLi4uLi4uLi4uLi4tLS0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0uLi4uLi4uLi4uLi4uLnwKfC4uLi4uLi4uLi4uLi4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwuLi4uLi4uLi4uLi4uLi58CnwuLi4uLnwufC58LnwufC0tLXwufC58LnwufC4uLi4uLi4uLi4uLi4uLi4uLi58LnwufC58LnwufC0tLXwufC58LnwufC4uLi4ufAp8Li4uLi58LS0tLS0tLS0gICAtLS0tLS0tLXwuLi4uLi4uLi4uLi4uLi4uLi4ufC0tLS0tLS0tLS0gICAtLS0tLS0tLXwuLi4uLnwKfC4uLi4ufC58LnwufC58LS0tfC58LnwufC58Li4uLi4uLi4uLi4uLi4uLi4uLnwufC58LnwufC58LS0tfC58LnwufC58Li4uLi58CnwuLi4uLi4uLi4uLi4uLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58Li4uLi4uLi4uLi4uLi4ufAp8Li4uLi4uLi4uLi4uLi4tLS0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0uLi4uLi4uLi4uLi4uLnwKfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58CnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufAp8Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58CnwufC58LnwufC58LnwufC58LnwufC58LnwufC58LnwufC58LnwufC58LnwufC58LnwufC58LnwufC58LnwufC58LnwufC58LnwufAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KXV0pOwoKLS0gRHVuZ2VvbiBEZXNjcmlwdGlvbgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAxLDAxLDczLDE2KSwgImxpdCIpOwoKLS0gU3RhaXJzCmRlcy5zdGFpcigidXAiKTsKZGVzLnN0YWlyKCJkb3duIik7CgotLSBOb24gZGlnZ2FibGUgd2FsbHMKZGVzLm5vbl9kaWdnYWJsZSgpOwoKZm9yIGkgPSAxLDE1IGRvCiAgIGRlcy5vYmplY3QoKTsKZW5kCgpmb3IgaSA9IDEsNiBkbwogICBkZXMudHJhcCgpOwplbmQKCmRlcy5tb25zdGVyKHsgeCA9IDAxLCB5ID0gMDEgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDEzLCB5ID0gMDEgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDI1LCB5ID0gMDEgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDM3LCB5ID0gMDEgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDQ5LCB5ID0gMDEgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDYxLCB5ID0gMDEgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDczLCB5ID0gMDEgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDA3LCB5ID0gMDcgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDEzLCB5ID0gMDcgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDI1LCB5ID0gMDcgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDM3LCB5ID0gMDcgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDQ5LCB5ID0gMDcgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDYxLCB5ID0gMDcgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDY3LCB5ID0gMDcgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDA3LCB5ID0gMDkgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDEzLCB5ID0gMDkgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDI1LCB5ID0gMDkgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDM3LCB5ID0gMDkgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDQ5LCB5ID0gMDkgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDYxLCB5ID0gMDkgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDY3LCB5ID0gMDkgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDAxLCB5ID0gMTYgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDEzLCB5ID0gMTYgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDI1LCB5ID0gMTYgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDM3LCB5ID0gMTYgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDQ5LCB5ID0gMTYgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDYxLCB5ID0gMTYgfSk7CmRlcy5tb25zdGVyKHsgeCA9IDczLCB5ID0gMTYgfSk7CgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub2ZsaXAiKTsKCmRlcy5tYXAoW1sKLS0tLS0tLS0tLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tLS0tLS0tLS0tCnwuLi4uLi4uLi58ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8Li4uLi4uLi4ufAp8Li4uLi4uLi4ufC0tLS0tLS0tLS0tfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfC0tLS0tLS0tLS0tfC4uLi4uLi4uLnwKfC18Li4uLi4uLi4uLi4uLi4uLi4uLnwtLS0tLS0tLS0tfCAgICAgICB8LS0tLS0tLS0tLXwuLi4uLi4uLi4uLi4uLi4uLi4ufC18CiAgLXwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwtLS0tLS0tfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC0gIAogICAtfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC0gICAKICAgIC18Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC0gICAgCiAgICAgLXwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC0gICAgIAogICAgICAtfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC0gICAgICAKICAgICAgLXwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwtICAgICAgCiAgICAgLXwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC0gICAgIAogICAgLXwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58LSAgICAKICAgLXwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwtICAgCiAgLXwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwtLS0tLS0tfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC0gIAp8LXwuLi4uLi4uLi4uLi4uLi4uLi4ufC0tLS0tLS0tLS18ICAgICAgIHwtLS0tLS0tLS0tfC4uLi4uLi4uLi4uLi4uLi4uLi58LXwKfC4uLi4uLi4uLnwtLS0tLS0tLS0tLXwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwtLS0tLS0tLS0tLXwuLi4uLi4uLi58CnwuLi4uLi4uLi58ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8Li4uLi4uLi4ufAotLS0tLS0tLS0tLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0tLS0tLS0tLS0KXV0pOwoKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMSwwMSw3MywxNiksICJsaXQiKTsKCmRlcy5zdGFpcigidXAiKTsKZGVzLnN0YWlyKCJkb3duIik7CgpkZXMubm9uX2RpZ2dhYmxlKCk7Cgpmb3IgaSA9IDEsMTUgZG8KICAgZGVzLm9iamVjdCgpOwplbmQKCmZvciBpID0gMSw2IGRvCiAgIGRlcy50cmFwKCk7CmVuZAoKZm9yIGkgPSAxLDI4IGRvCiAgZGVzLm1vbnN0ZXIoKTsKZW5kCgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub2ZsaXAiKTsKCmRlcy5tYXAoW1sKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAtLS0tLS0tLS0uLi4uLi4uLi4uLi4uLi4uLS0tLS0tLS0tICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAtLS0tLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0tLS0tICAgICAgICAgICAgICAKICAgICAgICAgLS0tLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0tLS0gICAgICAgICAKICAgICAgLS0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi0tLS0gICAgICAKICAgIC0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi0tLSAgICAKICAtLS0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tICAKLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0KfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0KICAtLS0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tICAKICAgIC0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi0tLSAgICAKICAgICAgLS0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi0tLS0gICAgICAKICAgICAgICAgLS0tLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0tLS0gICAgICAgICAKICAgICAgICAgICAgICAtLS0tLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0tLS0tICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAtLS0tLS0tLS0uLi4uLi4uLi4uLi4uLi4uLS0tLS0tLS0tICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAKXV0pOwoKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMCwwMCw3MiwxOCksICJsaXQiKTsKCmRlcy5zdGFpcigidXAiKTsKZGVzLnN0YWlyKCJkb3duIik7CgpkZXMubm9uX2RpZ2dhYmxlKCk7Cgpmb3IgaSA9IDEsMTUgZG8KICAgZGVzLm9iamVjdCgpOwplbmQKCmZvciBpID0gMSw2IGRvCiAgIGRlcy50cmFwKCk7CmVuZAoKZm9yIGkgPSAxLDI4IGRvCiAgZGVzLm1vbnN0ZXIoKTsKZW5kCgoKZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm9mbGlwIik7CgpkZXMubWFwKFtbCiAgICAgLS0tLS0tLS0tICAgICAgICAgLS0tLS0tLS0tICAgICAgICAgLS0tLS0tLS0tICAgICAgICAgLS0tLS0tLS0tICAgICAKICAgLS0tLi4uLi4uLi0tLSAgICAgLS0tLi4uLi4uLi0tLSAgICAgLS0tLi4uLi4uLi0tLSAgICAgLS0tLi4uLi4uLi0tLSAgIAogIC0tLi4uLi4uLi4uLi4tLSAgIC0tLi4uLi4uLi4uLi4tLSAgIC0tLi4uLi4uLi4uLi4tLSAgIC0tLi4uLi4uLi4uLi4tLSAgCiAtLS4uLi4uLi4uLi4uLi4tLSAtLS4uLi4uLi4uLi4uLi4tLSAtLS4uLi4uLi4uLi4uLi4tLSAtLS4uLi4uLi4uLi4uLi4tLSAKIC0uLi4uLi4uLi4uLi4uLi4tIC0uLi4uLi4uLi4uLi4uLi4tIC0uLi4uLi4uLi4uLi4uLi4tIC0uLi4uLi4uLi4uLi4uLi4tIAp8LS4uLi4uLi4uLi4uLi4uLi0tLS4uLi4uLi4uLi4uLi4uLi0tLS4uLi4uLi4uLi4uLi4uLi0tLS4uLi4uLi4uLi4uLi4uLi0tCnwuLi4uLi4uLi4uLi4uLi4uLi0uLi4uLi4uLi4uLi4uLi4uLi0uLi4uLi4uLi4uLi4uLi4uLi0uLi4uLi4uLi4uLi4uLi4uLnwKfC4uLi4uLi4uVC4uLi4uLi4uLi4uLi4uLi4uVC4uLi4uLi4uLi4uLi4uLi4uVC4uLi4uLi4uLi4uLi4uLi4uVC4uLi4uLi4ufAp8Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58CnwuLi4uLi5ULnsuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnsuVC4uLi4uLnwKfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufAp8Li4uLi4uLi5ULi4uLi4uLi4uLi4uLi4uLi5ULi4uLi4uLi4uLi4uLi4uLi5ULi4uLi4uLi4uLi4uLi4uLi5ULi4uLi4uLi58CnwuLi4uLi4uLi4uLi4uLi4uLi0uLi4uLi4uLi4uLi4uLi4uLi0uLi4uLi4uLi4uLi4uLi4uLi0uLi4uLi4uLi4uLi4uLi4uLnwKLS0uLi4uLi4uLi4uLi4uLi4tLS0uLi4uLi4uLi4uLi4uLi4tLS0uLi4uLi4uLi4uLi4uLi4tLS0uLi4uLi4uLi4uLi4uLi4tLQogLS4uLi4uLi4uLi4uLi4uLi0gLS4uLi4uLi4uLi4uLi4uLi0gLS4uLi4uLi4uLi4uLi4uLi0gLS4uLi4uLi4uLi4uLi4uLi0gCiAtLS4uLi4uLi4uLi4uLi4tLSAtLS4uLi4uLi4uLi4uLi4tLSAtLS4uLi4uLi4uLi4uLi4tLSAtLS4uLi4uLi4uLi4uLi4tLSAKICAtLS4uLi4uLi4uLi4uLS0gICAtLS4uLi4uLi4uLi4uLS0gICAtLS4uLi4uLi4uLi4uLS0gICAtLS4uLi4uLi4uLi4uLS0gIAogICAtLS0uLi4uLi4uLS0tICAgICAtLS0uLi4uLi4uLS0tICAgICAtLS0uLi4uLi4uLS0tICAgICAtLS0uLi4uLi4uLS0tICAgCiAgICAgLS0tLS0tLS0tICAgICAgICAgLS0tLS0tLS0tICAgICAgICAgLS0tLS0tLS0tICAgICAgICAgLS0tLS0tLS0tICAgICAKXV0pOwoKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMSwwMSw3MiwxNyksICJsaXQiKTsKCmRlcy5zdGFpcigidXAiKTsKZGVzLnN0YWlyKCJkb3duIik7CgpkZXMubm9uX2RpZ2dhYmxlKCk7Cgpmb3IgaSA9IDEsMTUgZG8KICAgZGVzLm9iamVjdCgpOwplbmQKCmZvciBpID0gMSw2IGRvCiAgIGRlcy50cmFwKCk7CmVuZAoKZm9yIGkgPSAxLDI4IGRvCiAgZGVzLm1vbnN0ZXIoKTsKZW5kCgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIpOwoKZGVzLm1hcChbWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tLS0tICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0tLS0tLS0tLi4uLS0tICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLS0tLS0tLS0uLi4uLi4uLi5MLi4uLS0tICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tLS0tLS0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgLS0tLS0tLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tICAgICAgCiAgICAgICAgICAgICAgICAtLS0tLS0tLS0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tICAgIAogICAgICAgIC0tLS0tLS0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tICAKfC0tLS0tLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS18CnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufAp8LkwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5MLnwKfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58CnwtLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi0tLS0tLS0tfAogIC0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tLS0tLS0tICAgICAgICAKICAgIC0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0tLS0tLS0gICAgICAgICAgICAgICAgCiAgICAgIC0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi0tLS0tLS0tLSAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIC0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tLS0tLS0tICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgIC0tLS4uLkwuLi4uLi4uLi4tLS0tLS0tLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIC0tLS4uLi0tLS0tLS0tLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIC0tLS0tICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKXV0pOwoKbG9jYWwgdGVycmFpbiA9IHsgIkwiLCAiVCIsICJ7IiwgIi4iIH07CmxvY2FsIHRpZHggPSBtYXRoLnJhbmRvbSgxLCAjdGVycmFpbik7CmRlcy5yZXBsYWNlX3RlcnJhaW4oeyByZWdpb249ezAwLDAwLCA3NCwxOH0sIGZyb210ZXJyYWluPSJMIiwgdG90ZXJyYWluPXRlcnJhaW5bdGlkeF0gfSk7CgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAxLDAxLDczLDE3KSwgImxpdCIpOwoKZGVzLnN0YWlyKCJ1cCIpOwpkZXMuc3RhaXIoImRvd24iKTsKCmRlcy5ub25fZGlnZ2FibGUoKTsKCmZvciBpID0gMSwxNSBkbwogICBkZXMub2JqZWN0KCk7CmVuZAoKZm9yIGkgPSAxLDYgZG8KICAgZGVzLnRyYXAoKTsKZW5kCgpmb3IgaSA9IDEsMjggZG8KICBkZXMubW9uc3RlcigpOwplbmQKCgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIpOwoKZGVzLm1hcChbWwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tICAgICAgICAgICAgICAgICAgICAgICAgICAgCi0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tICAgICAgICAgICAgICAgICAgICAgICAgIAogLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5GRi4uLi4uLS0tICAgICAgICAgICAgICAgICAgICAgICAKICAgLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5GRi4uLi4uLi4uLS0tICAgICAgICAgICAgICAgICAgICAgCiAgICAgLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5GRi4uLi4uLi4uLi4uLS0tICAgICAgICAgICAgICAgICAgIAogICAgICAgLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5GRi4uLi4uLi4uLi4uLi4uLS0tICAgICAgICAgICAgICAgICAKICAgICAgICAgLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5GRi4uLi4uLi4uLi4uLi4uLi4uLS0tICAgICAgICAgICAgICAgCiAgICAgICAgICAgLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5GRi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tICAgICAgICAgICAgIAogICAgICAgICAgICAgLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi5GRi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tICAgICAgICAgICAKICAgICAgICAgICAgICAgLS0tLi4uLi4uLi4uLi4uLi4uLi5GRi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tICAgICAgICAgCiAgICAgICAgICAgICAgICAgLS0tLi4uLi4uLi4uLi4uLi5GRi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tICAgICAgIAogICAgICAgICAgICAgICAgICAgLS0tLi4uLi4uLi4uLi5GRi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tLSAgICAKICAgICAgICAgICAgICAgICAgICAgLS0tLi4uLi4uLi5GRi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tICAgCiAgICAgICAgICAgICAgICAgICAgICAgLS0tLi4uLi5GRi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tIAogICAgICAgICAgICAgICAgICAgICAgICAgLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0KICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpdXSk7CgppZiBwZXJjZW50KDQwKSB0aGVuCiAgIGxvY2FsIHRlcnJhaW4gPSB7ICJMIiwgIn0iLCAiVCIsICIuIiwgIi0iLCAiQyIgfTsKICAgbG9jYWwgdGlkeCA9IG1hdGgucmFuZG9tKDEsICN0ZXJyYWluKTsKICAgZGVzLnJlcGxhY2VfdGVycmFpbih7IHJlZ2lvbj17MDAsMDAsIDc0LDE3fSwgZnJvbXRlcnJhaW49IkYiLCB0b3RlcnJhaW49dGVycmFpblt0aWR4XSB9KTsKZW5kOwoKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMSwwMSw3MywxNiksICJsaXQiKTsKCmRlcy5zdGFpcigidXAiKTsKZGVzLnN0YWlyKCJkb3duIik7CgpkZXMubm9uX2RpZ2dhYmxlKCk7Cgpmb3IgaSA9IDEsMTUgZG8KICAgZGVzLm9iamVjdCgpOwplbmQKCmZvciBpID0gMSw2IGRvCiAgIGRlcy50cmFwKCk7CmVuZAoKZm9yIGkgPSAxLDI4IGRvCiAgZGVzLm1vbnN0ZXIoKTsKZW5kCgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub2ZsaXAiKTsKCmRlcy5tYXAoW1sKfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX0KfX19fX19fX19fX19fX19fX19fX19fX19fX19fX0uLi4uLi4uLi4uLi4uLi4ufX19fX19fX19fX19fX19fX19fX19fX19fX19fX0KfX19fX19fX19fX19fX19fX19fX19Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi59fX19fX19fX19fX19fX19fX19fX0KfX19fX19fX19fX19fX19Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi59fX19fX19fX19fX19fX0KfX19fX19fX19fS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLn19fX19fX19fX0KfX19fX19fS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLn19fX19fX0KfX19fX0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLkxMTExMTExMTExMTExMTExMTC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufX19fX0KfX19Li4uLi4uLi4uLi4uLi4uLi4uLi5MTExMTExMTExMTExMTExMTExMTExMTExMTEwuLi4uLi4uLi4uLi4uLi4uLi4uLi59fX0KfS4uLi4uLi4uLi4uLi4uLi4uLi4uTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTEwuLi4uLi4uLi4uLi4uLi4uLi4uLn0KfS4uLi4uLi4uLi4uLi4uLi4uLi4uTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTEwuLi4uLi4uLi4uLi4uLi4uLi4uLn0KfS4uLi4uLi4uLi4uLi4uLi4uLi4uTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTEwuLi4uLi4uLi4uLi4uLi4uLi4uLn0KfX19Li4uLi4uLi4uLi4uLi4uLi4uLi5MTExMTExMTExMTExMTExMTExMTExMTExMTEwuLi4uLi4uLi4uLi4uLi4uLi4uLi59fX0KfX19fX0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLkxMTExMTExMTExMTExMTExMTC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufX19fX0KfX19fX19fS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLn19fX19fX0KfX19fX19fX19fS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLn19fX19fX19fX0KfX19fX19fX19fX19fX19Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi59fX19fX19fX19fX19fX0KfX19fX19fX19fX19fX19fX19fX19Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi59fX19fX19fX19fX19fX19fX19fX0KfX19fX19fX19fX19fX19fX19fX19fX19fX19fX0uLi4uLi4uLi4uLi4uLi4ufX19fX19fX19fX19fX19fX19fX19fX19fX19fX0KfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX0KXV0pOwoKLS0gVW5saXQsIGV4Y2VwdCAzIG1hcGdyaWRzIGFyb3VuZCB0aGUgInB1cGlsIgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDczLDE4KSwidW5saXQiKTsKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgyNiwwNCw0NywxNCksImxpdCIpOwpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDIxLDA1LDUxLDEzKSwibGl0Iik7CmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMTksMDYsNTQsMTIpLCJsaXQiKTsKCmRlcy5zdGFpcigidXAiKTsKZGVzLnN0YWlyKCJkb3duIik7CgpkZXMubm9uX2RpZ2dhYmxlKCk7Cgpmb3IgaSA9IDEsMTUgZG8KICAgZGVzLm9iamVjdCgpOwplbmQKCmZvciBpID0gMSw2IGRvCiAgIGRlcy50cmFwKCk7CmVuZAoKZm9yIGkgPSAxLDI4IGRvCiAgZGVzLm1vbnN0ZXIoKTsKZW5kCi0tIE5ldEhhY2sgMy43CWNhc3RsZS5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4MyAyMDE1LzA1LzI1IDAwOjEzOjAzICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTEgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQotLQotLSBUaGlzIGlzIHRoZSBzdHJvbmdob2xkIGxldmVsIDoKLS0gdGhlcmUgYXJlIHNldmVyYWwgd2F5cyB0byBlbnRlciBpdCA6Ci0tCS0gb3BlbmluZyB0aGUgZHJhd2JyaWRnZSAod2FuZCBvZiBvcGVuaW5nLCBrbm9jayBzcGVsbCwgcGxheWluZwotLQkgIHRoZSBhcHByb3ByaWF0ZSB0dW5lKQotLQotLQktIGVudGVyIHZpYSB0aGUgYmFjayBlbnRyeSAodGhpcyBzdXBwb3NlIGEgcmluZyBvZiBsZXZpdGF0aW9uLCBib290cwotLQkgIG9mIHdhdGVyIHdhbGtpbmcsIGV0Yy4pCi0tCi0tIE5vdGUgOiBJZiB5b3UgZG9uJ3QgcGxheSB0aGUgcmlnaHQgdHVuZSwgeW91IGdldCBpbmRpY2F0aW9ucyBsaWtlIGluIHRoZQotLQkgTWFzdGVyTWluZCBnYW1lLi4uCi0tCi0tIFRvIG1vdGl2YXRlIHRoZSBwbGF5ZXIgOiB0aGVyZSBhcmUgNCBzdG9yZXJvb21zIChhcm1vcnMsIHdlYXBvbnMsIGZvb2QgYW5kCi0tIGdlbXMpIGFuZCBhIHdhbmQgb2Ygd2lzaGluZyBpbiBvbmUgb2YgdGhlIDQgdG93ZXJzLi4uCgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlPSJtYXplZ3JpZCIsIGJnID0iLSIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub3RlbGVwb3J0IiwgIm5vZmxpcHkiKQoKZGVzLm1hcChbWwp9fX19fX19fX0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi59fX19fX19fX0KfS0tLS0tLS19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fS0tLS0tLS19Cn18Li4uLi58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18Li4uLi58fQp9fC4uLi4uKy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uKy4uLi4ufH0KfS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS19Cn19fX19fXwuLi4uLi4uLnwuLi4uLi4uLi4uKy4uLi4uLi4uLi4ufC4uLi4uLi5TLlMuLi4uLi4ufH19fX19fQouLi4uLn18Li4uLi4uLi58Li4uLi4uLi4uLnwuLi4uLi4uLi4uLnwuLi4uLi4ufC58Li4uLi4uLnx9Li4uLi4KLi4uLi59fC4uLi4uLi4uLS0tLS0tLS0tLS0tLi4uLi4uLi4uLi4tLS0tLS0tLS1TLS0tLS0tLS0tfS4uLi4uCi4uLi4ufXwuLi57Li4uLisuLi4uLi4uLi4uKy4uLi4uLi4uLlwuUy4uLi4uLi4uLi4uLi4uLi4uKy4uLi4uLgouLi4uLn18Li4uLi4uLi4tLS0tLS0tLS0tLS0uLi4uLi4uLi4uLi0tLS0tLS0tLVMtLS0tLS0tLS19Li4uLi4KLi4uLi59fC4uLi4uLi4ufC4uLi4uLi4uLi58Li4uLi4uLi4uLi58Li4uLi4uLnwufC4uLi4uLi58fS4uLi4uCn19fX19fXwuLi4uLi4uLnwuLi4uLi4uLi4uKy4uLi4uLi4uLi4ufC4uLi4uLi5TLlMuLi4uLi4ufH19fX19fQp9LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLX0KfXwuLi4uLisuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLisuLi4uLnx9Cn18Li4uLi58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18Li4uLi58fQp9LS0tLS0tLX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19LS0tLS0tLX0KfX19fX19fX19Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufX19fX19fX19Cl1dKTsKCi0tIFJhbmRvbSByZWdpc3RlcnMgaW5pdGlhbGlzYXRpb24KbG9jYWwgb2JqZWN0ID0geyAiWyIsICIpIiwgIioiLCAiJSIgfTsKc2h1ZmZsZShvYmplY3QpCgpsb2NhbCBwbGFjZSA9IHNlbGVjdGlvbi5uZXcoKTsKcGxhY2U6c2V0KDA0LDAyKTsKcGxhY2U6c2V0KDU4LDAyKTsKcGxhY2U6c2V0KDA0LDE0KTsKcGxhY2U6c2V0KDU4LDE0KTsKCmxvY2FsIG1vbnN0ZXIgPSB7ICJMIiwgIk4iLCAiRSIsICJIIiwgIk0iLCAiTyIsICJSIiwgIlQiLCAiWCIsICJaIiB9CnNodWZmbGUobW9uc3RlcikKCmRlcy50ZWxlcG9ydF9yZWdpb24oeyByZWdpb24gPSB7MDEsMDAsMTAsMjB9LCByZWdpb25faXNsZXY9MSwgZXhjbHVkZT17MSwxLDYxLDE1fSwgZGlyPSJkb3duIiB9KQpkZXMudGVsZXBvcnRfcmVnaW9uKHsgcmVnaW9uID0gezY5LDAwLDc5LDIwfSwgcmVnaW9uX2lzbGV2PTEsIGV4Y2x1ZGU9ezEsMSw2MSwxNX0sIGRpcj0idXAiIH0pCmRlcy5sZXZyZWdpb24oeyByZWdpb24gPSB7MDEsMDAsMTAsMjB9LCByZWdpb25faXNsZXY9MSwgZXhjbHVkZT17MCwwLDYyLDE2fSwgdHlwZT0ic3RhaXItdXAiIH0pCmRlcy5mZWF0dXJlKCJmb3VudGFpbiIsIDEwLDA4KQotLSBEb29ycwpkZXMuZG9vcigiY2xvc2VkIiwwNywwMykKZGVzLmRvb3IoImNsb3NlZCIsNTUsMDMpCmRlcy5kb29yKCJsb2NrZWQiLDMyLDA0KQpkZXMuZG9vcigibG9ja2VkIiwyNiwwNSkKZGVzLmRvb3IoImxvY2tlZCIsNDYsMDUpCmRlcy5kb29yKCJsb2NrZWQiLDQ4LDA1KQpkZXMuZG9vcigibG9ja2VkIiw0NywwNykKZGVzLmRvb3IoImNsb3NlZCIsMTUsMDgpCmRlcy5kb29yKCJjbG9zZWQiLDI2LDA4KQpkZXMuZG9vcigibG9ja2VkIiwzOCwwOCkKZGVzLmRvb3IoImxvY2tlZCIsNTYsMDgpCmRlcy5kb29yKCJsb2NrZWQiLDQ3LDA5KQpkZXMuZG9vcigibG9ja2VkIiwyNiwxMSkKZGVzLmRvb3IoImxvY2tlZCIsNDYsMTEpCmRlcy5kb29yKCJsb2NrZWQiLDQ4LDExKQpkZXMuZG9vcigibG9ja2VkIiwzMiwxMikKZGVzLmRvb3IoImNsb3NlZCIsMDcsMTMpCmRlcy5kb29yKCJjbG9zZWQiLDU1LDEzKQotLSBUaGUgZHJhd2JyaWRnZQpkZXMuZHJhd2JyaWRnZSh7IGRpcj0iZWFzdCIsIHN0YXRlPSJjbG9zZWQiLCB4PTA1LHk9MDh9KQotLSBTdG9yZXJvb20gbnVtYmVyIDEKZGVzLm9iamVjdChvYmplY3RbMV0sMzksMDUpCmRlcy5vYmplY3Qob2JqZWN0WzFdLDQwLDA1KQpkZXMub2JqZWN0KG9iamVjdFsxXSw0MSwwNSkKZGVzLm9iamVjdChvYmplY3RbMV0sNDIsMDUpCmRlcy5vYmplY3Qob2JqZWN0WzFdLDQzLDA1KQpkZXMub2JqZWN0KG9iamVjdFsxXSw0NCwwNSkKZGVzLm9iamVjdChvYmplY3RbMV0sNDUsMDUpCmRlcy5vYmplY3Qob2JqZWN0WzFdLDM5LDA2KQpkZXMub2JqZWN0KG9iamVjdFsxXSw0MCwwNikKZGVzLm9iamVjdChvYmplY3RbMV0sNDEsMDYpCmRlcy5vYmplY3Qob2JqZWN0WzFdLDQyLDA2KQpkZXMub2JqZWN0KG9iamVjdFsxXSw0MywwNikKZGVzLm9iamVjdChvYmplY3RbMV0sNDQsMDYpCmRlcy5vYmplY3Qob2JqZWN0WzFdLDQ1LDA2KQotLSBTdG9yZXJvb20gbnVtYmVyIDIKZGVzLm9iamVjdChvYmplY3RbMl0sNDksMDUpCmRlcy5vYmplY3Qob2JqZWN0WzJdLDUwLDA1KQpkZXMub2JqZWN0KG9iamVjdFsyXSw1MSwwNSkKZGVzLm9iamVjdChvYmplY3RbMl0sNTIsMDUpCmRlcy5vYmplY3Qob2JqZWN0WzJdLDUzLDA1KQpkZXMub2JqZWN0KG9iamVjdFsyXSw1NCwwNSkKZGVzLm9iamVjdChvYmplY3RbMl0sNTUsMDUpCmRlcy5vYmplY3Qob2JqZWN0WzJdLDQ5LDA2KQpkZXMub2JqZWN0KG9iamVjdFsyXSw1MCwwNikKZGVzLm9iamVjdChvYmplY3RbMl0sNTEsMDYpCmRlcy5vYmplY3Qob2JqZWN0WzJdLDUyLDA2KQpkZXMub2JqZWN0KG9iamVjdFsyXSw1MywwNikKZGVzLm9iamVjdChvYmplY3RbMl0sNTQsMDYpCmRlcy5vYmplY3Qob2JqZWN0WzJdLDU1LDA2KQotLSBTdG9yZXJvb20gbnVtYmVyIDMKZGVzLm9iamVjdChvYmplY3RbM10sMzksMTApCmRlcy5vYmplY3Qob2JqZWN0WzNdLDQwLDEwKQpkZXMub2JqZWN0KG9iamVjdFszXSw0MSwxMCkKZGVzLm9iamVjdChvYmplY3RbM10sNDIsMTApCmRlcy5vYmplY3Qob2JqZWN0WzNdLDQzLDEwKQpkZXMub2JqZWN0KG9iamVjdFszXSw0NCwxMCkKZGVzLm9iamVjdChvYmplY3RbM10sNDUsMTApCmRlcy5vYmplY3Qob2JqZWN0WzNdLDM5LDExKQpkZXMub2JqZWN0KG9iamVjdFszXSw0MCwxMSkKZGVzLm9iamVjdChvYmplY3RbM10sNDEsMTEpCmRlcy5vYmplY3Qob2JqZWN0WzNdLDQyLDExKQpkZXMub2JqZWN0KG9iamVjdFszXSw0MywxMSkKZGVzLm9iamVjdChvYmplY3RbM10sNDQsMTEpCmRlcy5vYmplY3Qob2JqZWN0WzNdLDQ1LDExKQotLSBTdG9yZXJvb20gbnVtYmVyIDQKZGVzLm9iamVjdChvYmplY3RbNF0sNDksMTApCmRlcy5vYmplY3Qob2JqZWN0WzRdLDUwLDEwKQpkZXMub2JqZWN0KG9iamVjdFs0XSw1MSwxMCkKZGVzLm9iamVjdChvYmplY3RbNF0sNTIsMTApCmRlcy5vYmplY3Qob2JqZWN0WzRdLDUzLDEwKQpkZXMub2JqZWN0KG9iamVjdFs0XSw1NCwxMCkKZGVzLm9iamVjdChvYmplY3RbNF0sNTUsMTApCmRlcy5vYmplY3Qob2JqZWN0WzRdLDQ5LDExKQpkZXMub2JqZWN0KG9iamVjdFs0XSw1MCwxMSkKZGVzLm9iamVjdChvYmplY3RbNF0sNTEsMTEpCmRlcy5vYmplY3Qob2JqZWN0WzRdLDUyLDExKQpkZXMub2JqZWN0KG9iamVjdFs0XSw1MywxMSkKZGVzLm9iamVjdChvYmplY3RbNF0sNTQsMTEpCmRlcy5vYmplY3Qob2JqZWN0WzRdLDU1LDExKQotLSBUSEUgV0FORCBPRiBXSVNISU5HIGluIDEgb2YgdGhlIDQgdG93ZXJzCmxvY2FsIHB4LCBweSA9IHBsYWNlOnJuZGNvb3JkKDEpOwpkZXMub2JqZWN0KHsgaWQgPSAiY2hlc3QiLCB0cmFwcGVkID0gMCwgbG9ja2VkID0gMSwgeCA9IHB4LCB5ID0gcHksCiAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGRlcy5vYmplY3QoIndpc2hpbmciKTsKICAgICAgICAgICAgIGVuZAp9KTsKLS0gUHJldmVudCBtb25zdGVycyBmcm9tIGVhdGluZyBpdC4gIChAJ3MgbmV2ZXIgZWF0IG9iamVjdHMpCmRlcy5lbmdyYXZpbmcoeyB4ID0gcHgsIHkgPSBweSwgdHlwZT0iYnVybiIsIHRleHQ9IkVsYmVyZXRoIiB9KQpkZXMub2JqZWN0KHsgaWQgPSAic2NhcmUgbW9uc3RlciIsIHggPSBweCwgeSA9IHB5LCBidWM9ImN1cnNlZCIgfSkKLS0gVGhlIHRyZWFzdXJlIG9mIHRoZSBsb3JkCmRlcy5vYmplY3QoImNoZXN0IiwzNywwOCkKLS0gVHJhcHMKZGVzLnRyYXAoInRyYXAgZG9vciIsNDAsMDgpCmRlcy50cmFwKCJ0cmFwIGRvb3IiLDQ0LDA4KQpkZXMudHJhcCgidHJhcCBkb29yIiw0OCwwOCkKZGVzLnRyYXAoInRyYXAgZG9vciIsNTIsMDgpCmRlcy50cmFwKCJ0cmFwIGRvb3IiLDU1LDA4KQotLSBTb2xkaWVycyBndWFyZGluZyB0aGUgZW50cnkgaGFsbApkZXMubW9uc3Rlcigic29sZGllciIsMDgsMDYpCmRlcy5tb25zdGVyKCJzb2xkaWVyIiwwOSwwNSkKZGVzLm1vbnN0ZXIoInNvbGRpZXIiLDExLDA1KQpkZXMubW9uc3Rlcigic29sZGllciIsMTIsMDYpCmRlcy5tb25zdGVyKCJzb2xkaWVyIiwwOCwxMCkKZGVzLm1vbnN0ZXIoInNvbGRpZXIiLDA5LDExKQpkZXMubW9uc3Rlcigic29sZGllciIsMTEsMTEpCmRlcy5tb25zdGVyKCJzb2xkaWVyIiwxMiwxMCkKZGVzLm1vbnN0ZXIoImxpZXV0ZW5hbnQiLDA5LDA4KQotLSBTb2xkaWVycyBndWFyZGluZyB0aGUgdG93ZXJzCmRlcy5tb25zdGVyKCJzb2xkaWVyIiwwMywwMikKZGVzLm1vbnN0ZXIoInNvbGRpZXIiLDA1LDAyKQpkZXMubW9uc3Rlcigic29sZGllciIsNTcsMDIpCmRlcy5tb25zdGVyKCJzb2xkaWVyIiw1OSwwMikKZGVzLm1vbnN0ZXIoInNvbGRpZXIiLDAzLDE0KQpkZXMubW9uc3Rlcigic29sZGllciIsMDUsMTQpCmRlcy5tb25zdGVyKCJzb2xkaWVyIiw1NywxNCkKZGVzLm1vbnN0ZXIoInNvbGRpZXIiLDU5LDE0KQotLSBUaGUgZm91ciBkcmFnb25zIHRoYXQgYXJlIGd1YXJkaW5nIHRoZSBzdG9yZXJvb21zCmRlcy5tb25zdGVyKCJEIiw0NywwNSkKZGVzLm1vbnN0ZXIoIkQiLDQ3LDA2KQpkZXMubW9uc3RlcigiRCIsNDcsMTApCmRlcy5tb25zdGVyKCJEIiw0NywxMSkKLS0gU2VhIG1vbnN0ZXJzIGluIHRoZSBtb2F0CmRlcy5tb25zdGVyKCJnaWFudCBlZWwiLDA1LDA3KQpkZXMubW9uc3RlcigiZ2lhbnQgZWVsIiwwNSwwOSkKZGVzLm1vbnN0ZXIoImdpYW50IGVlbCIsNTcsMDcpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiLDU3LDA5KQpkZXMubW9uc3Rlcigic2hhcmsiLDA1LDAwKQpkZXMubW9uc3Rlcigic2hhcmsiLDA1LDE2KQpkZXMubW9uc3Rlcigic2hhcmsiLDU3LDAwKQpkZXMubW9uc3Rlcigic2hhcmsiLDU3LDE2KQotLSBUaGUgdGhyb25lIHJvb20gYW5kIHRoZSBjb3VydCBtb25zdGVycwpkZXMubW9uc3Rlcihtb25zdGVyWzEwXSwyNywwNSkKZGVzLm1vbnN0ZXIobW9uc3RlclsxXSwzMCwwNSkKZGVzLm1vbnN0ZXIobW9uc3RlclsyXSwzMywwNSkKZGVzLm1vbnN0ZXIobW9uc3RlclszXSwzNiwwNSkKZGVzLm1vbnN0ZXIobW9uc3Rlcls0XSwyOCwwNikKZGVzLm1vbnN0ZXIobW9uc3Rlcls1XSwzMSwwNikKZGVzLm1vbnN0ZXIobW9uc3Rlcls2XSwzNCwwNikKZGVzLm1vbnN0ZXIobW9uc3Rlcls3XSwzNywwNikKZGVzLm1vbnN0ZXIobW9uc3Rlcls4XSwyNywwNykKZGVzLm1vbnN0ZXIobW9uc3Rlcls5XSwzMCwwNykKZGVzLm1vbnN0ZXIobW9uc3RlclsxMF0sMzMsMDcpCmRlcy5tb25zdGVyKG1vbnN0ZXJbMV0sMzYsMDcpCmRlcy5tb25zdGVyKG1vbnN0ZXJbMl0sMjgsMDgpCmRlcy5tb25zdGVyKG1vbnN0ZXJbM10sMzEsMDgpCmRlcy5tb25zdGVyKG1vbnN0ZXJbNF0sMzQsMDgpCmRlcy5tb25zdGVyKG1vbnN0ZXJbNV0sMjcsMDkpCmRlcy5tb25zdGVyKG1vbnN0ZXJbNl0sMzAsMDkpCmRlcy5tb25zdGVyKG1vbnN0ZXJbN10sMzMsMDkpCmRlcy5tb25zdGVyKG1vbnN0ZXJbOF0sMzYsMDkpCmRlcy5tb25zdGVyKG1vbnN0ZXJbOV0sMjgsMTApCmRlcy5tb25zdGVyKG1vbnN0ZXJbMTBdLDMxLDEwKQpkZXMubW9uc3Rlcihtb25zdGVyWzFdLDM0LDEwKQpkZXMubW9uc3Rlcihtb25zdGVyWzJdLDM3LDEwKQpkZXMubW9uc3Rlcihtb25zdGVyWzNdLDI3LDExKQpkZXMubW9uc3Rlcihtb25zdGVyWzRdLDMwLDExKQpkZXMubW9uc3Rlcihtb25zdGVyWzVdLDMzLDExKQpkZXMubW9uc3Rlcihtb25zdGVyWzZdLDM2LDExKQotLSBNYXplV2Fsa3MKZGVzLm1hemV3YWxrKDAwLDEwLCJ3ZXN0IikKZGVzLm1hemV3YWxrKDYyLDA2LCJlYXN0IikKLS0gTm9uIGRpZ2dhYmxlIHdhbGxzCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDAsMDAsNjIsMTYpKQotLSBTdWJyb29tczoKLS0gICBFbnRpcmUgY2FzdGxlIGFyZWEKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMCwwMCw2MiwxNiksInVubGl0IikKLS0gICBDb3VydHlhcmRzCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDUsMDUsMTEpLCJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDU3LDA1LDYyLDExKSwibGl0IikKLS0gICBUaHJvbmUgcm9vbQpkZXMucmVnaW9uKHsgcmVnaW9uPXsyNywwNSwgMzcsMTF9LGxpdD0xLHR5cGU9InRocm9uZSIsIGZpbGxlZD0yIH0pCi0tICAgQW50ZWNoYW1iZXIKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwNywwNSwxNCwxMSksImxpdCIpCi0tICAgU3RvcmVyb29tcwpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDM5LDA1LDQ1LDA2KSwibGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgzOSwxMCw0NSwxMSksImxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoNDksMDUsNTUsMDYpLCJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDQ5LDEwLDU1LDExKSwibGl0IikKLS0gICBDb3JuZXJzCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDIsMDIsMDYsMDMpLCJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDU2LDAyLDYwLDAzKSwibGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMiwxMywwNiwxNCksImxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoNTYsMTMsNjAsMTQpLCJsaXQiKQotLSAgIEJhcnJhY2tzCmRlcy5yZWdpb24oeyByZWdpb249ezE2LDA1LCAyNSwwNn0sbGl0PTEsdHlwZT0iYmFycmFja3MiLCBmaWxsZWQ9MSB9KQpkZXMucmVnaW9uKHsgcmVnaW9uPXsxNiwxMCwgMjUsMTF9LGxpdD0xLHR5cGU9ImJhcnJhY2tzIiwgZmlsbGVkPTEgfSkKLS0gICBIYWxsd2F5cwpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDA4LDAzLDU0LDAzKSwidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDA4LDEzLDU0LDEzKSwidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDE2LDA4LDI1LDA4KSwidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDM5LDA4LDU1LDA4KSwidW5saXQiKQotLSAgIFN0b3Jlcm9vbSBhbGNvdmVzCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoNDcsMDUsNDcsMDYpLCJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoNDcsMTAsNDcsMTEpLCJ1bmxpdCIpCi0tIE5ldEhhY2sgMy43CXllbmRvci5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4MyAyMDE1LzA1LzI1IDAwOjEzOjAzICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTAgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTIgYnkgTS4gU3RlcGhlbnNvbiBhbmQgSXpjaGFrIE1pbGxlcgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlPSJtYXplZ3JpZCIsIGJnID0iLSIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIpOwoKZGVzLm1hcChbWwouLi4uLi4uLi4KLn19fX19fX0uCi59fS0tLX19LgoufS0tLi0tfS4KLn18Li4ufH0uCi59LS0uLS19LgoufX0tLS19fS4KLn19fX19fX0uCl1dKTsKZGVzLmxldnJlZ2lvbih7IHJlZ2lvbj17MDEsMDAsNzksMjB9LCByZWdpb25faXNsZXY9MSwgZXhjbHVkZT17MCwwLDgsN30sIHR5cGU9InN0YWlyLXVwIiB9KQpkZXMubGV2cmVnaW9uKHsgcmVnaW9uPXswMSwwMCw3OSwyMH0sIHJlZ2lvbl9pc2xldj0xLCBleGNsdWRlPXswLDAsOCw3fSwgdHlwZT0ic3RhaXItZG93biIgfSkKZGVzLmxldnJlZ2lvbih7IHJlZ2lvbj17MDEsMDAsNzksMjB9LCByZWdpb25faXNsZXY9MSwgZXhjbHVkZT17MCwwLDgsN30sIHR5cGU9ImJyYW5jaCIgfSk7CmRlcy50ZWxlcG9ydF9yZWdpb24oeyByZWdpb249ezAxLDAwLDc5LDIwfSwgcmVnaW9uX2lzbGV2PTEsZXhjbHVkZT17MiwyLDYsNn0gfSkKZGVzLmxldnJlZ2lvbih7IHJlZ2lvbj17NCw0LDQsNH0sIHR5cGU9InBvcnRhbCIsIG5hbWU9IndpemFyZDMiIH0pCmRlcy5tYXpld2FsaygwOCwwNSwiZWFzdCIpCmRlcy5yZWdpb24oeyByZWdpb249ezA0LDAzLDA2LDA2fSxsaXQ9MCx0eXBlPSJvcmRpbmFyeSIsaXJyZWd1bGFyPTEsYXJyaXZhbF9yb29tPXRydWUgfSkKZGVzLm1vbnN0ZXIoIkwiLDA0LDA0KQpkZXMubW9uc3RlcigidmFtcGlyZSBsb3JkIiwwMywwNCkKZGVzLm1vbnN0ZXIoImtyYWtlbiIsMDYsMDYpCi0tIEFuZCB0byBtYWtlIHRoaW5ncyBhIGxpdHRsZSBoYXJkZXIuCmRlcy50cmFwKCJib2FyZCIsMDQsMDMpCmRlcy50cmFwKCJib2FyZCIsMDQsMDUpCmRlcy50cmFwKCJib2FyZCIsMDMsMDQpCmRlcy50cmFwKCJib2FyZCIsMDUsMDQpCgotLSBOZXRIYWNrIDMuNwl5ZW5kb3IuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODMgMjAxNS8wNS8yNSAwMDoxMzowMyAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjEwICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkyIGJ5IE0uIFN0ZXBoZW5zb24gYW5kIEl6Y2hhayBNaWxsZXIKLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZT0ibWF6ZWdyaWQiLCBiZyA9Ii0iIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiKTsKCmRlcy5tYXAoW1sKLi4uLi4uLi4uCi59fX19fX19LgoufX0tLS19fS4KLn0tLS4tLX0uCi59fC4uLnx9LgoufS0tLi0tfS4KLn19LS0tfX0uCi59fX19fX19LgpdXSk7CmRlcy5sZXZyZWdpb24oeyByZWdpb249ezAxLDAwLDc5LDIwfSwgcmVnaW9uX2lzbGV2PTEsIGV4Y2x1ZGU9ezAsMCw4LDd9LCB0eXBlPSJzdGFpci11cCIgfSkKZGVzLmxldnJlZ2lvbih7IHJlZ2lvbj17MDEsMDAsNzksMjB9LCByZWdpb25faXNsZXY9MSwgZXhjbHVkZT17MCwwLDgsN30sIHR5cGU9InN0YWlyLWRvd24iIH0pCmRlcy5sZXZyZWdpb24oeyByZWdpb249ezAxLDAwLDc5LDIwfSwgcmVnaW9uX2lzbGV2PTEsIGV4Y2x1ZGU9ezAsMCw4LDd9LCB0eXBlPSJicmFuY2giIH0pOwpkZXMudGVsZXBvcnRfcmVnaW9uKHsgcmVnaW9uPXswMSwwMCw3OSwyMH0sIHJlZ2lvbl9pc2xldj0xLGV4Y2x1ZGU9ezIsMiw2LDZ9IH0pCmRlcy5tYXpld2FsaygwOCwwNSwiZWFzdCIpCmRlcy5tb25zdGVyKCJMIiwwNCwwNCkKZGVzLm1vbnN0ZXIoInZhbXBpcmUgbG9yZCIsMDMsMDQpCmRlcy5tb25zdGVyKCJrcmFrZW4iLDA2LDA2KQotLSBBbmQgdG8gbWFrZSB0aGluZ3MgYSBsaXR0bGUgaGFyZGVyLgpkZXMudHJhcCgiYm9hcmQiLDA0LDAzKQpkZXMudHJhcCgiYm9hcmQiLDA0LDA1KQpkZXMudHJhcCgiYm9hcmQiLDAzLDA0KQpkZXMudHJhcCgiYm9hcmQiLDA1LDA0KQotLSB0cmVhc3VyZXMKZGVzLm9iamVjdCgiXCIiLDA0LDA0KQotLSBOZXRIYWNrIDMuNwlnZWhlbm5vbS5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4MyAyMDE1LzA1LzI1IDAwOjEzOjAzICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTMgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTIgYnkgTS4gU3RlcGhlbnNvbiBhbmQgSXpjaGFrIE1pbGxlcgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAic2hvcnRzaWdodGVkIiwgIm5vZmxpcCIpCi0tIGRlcy5sZXZlbF9pbml0KG1pbmVzLCcuJywnfScsdHJ1ZSx0cnVlLHVubGl0LGZhbHNlKQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInN3YW1wIiwgbGl0ID0gMCB9KTsKLS0gZ3VhcmFudGVlIGF0IGxlYXN0IG9uZSBvcGVuIHNwb3QgdG8gZW5zdXJlIHN1Y2Nlc3NmdWwgc3RhaXIgcGxhY2VtZW50CmRlcy5tYXAoeyBoYWxpZ24gPSAibGVmdCIsIHZhbGlnbiA9ICJib3R0b20iLCBtYXAgPSBbWwp4eHh4eHh4eAp4eC4uLnh4eAp4eHguLi54eAp4eHh4Lnh4eAp4eHh4eHh4eApdXSB9KTsKZGVzLm9iamVjdCgiYm91bGRlciIpCmRlcy5tYXAoeyBoYWxpZ24gPSAicmlnaHQiLCB2YWxpZ24gPSAidG9wIiwgbWFwID0gW1sKeHh4eHh4eHgKeHh4eC54eHgKeHh4Li4ueHgKeHguLi54eHgKeHh4eHh4eHgKXV0gfSk7CmRlcy5vYmplY3QoImJvdWxkZXIiKQotLSBsYWlyCmRlcy5tYXAoW1sKeHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4Cnh4eHgueHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHgueHh4eAp4eHguLi54eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHguLi54eHgKeHh4eC54eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eC54eHh4Cnh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eH19fXh4eHh4eHh4eHh4eHh4eH19fX19eHh4eAp4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eH19fX19eHh4eHh4eHh4eHh4eH0uLi4uLn14eHgKeHh4eHh4eHh4eHh4eHh4eHh4eHh4eH19Li4ufX14eHh4eHh4eHh4eH0uLlAuUC4ufXh4Cnh4eHh4eHh4eHh4eHh4eHh4eHh4eH19Li5QLi59fXh4eHh4eHh4eHh4fS4uLi4ufXh4eAp4eHh4eHh4eHh4eHh4eHh4eHh4eHh9fS5QLlAufX14eHh4eHh4eHh4eHh9Li4ufXh4eHgKeHh4eHh4eHh4eHh4eHh4eHh4eHh4fX0uLlAuLn19eHh4eHh4eHh4eHh4fS4uLn14eHh4Cnh4eHh4eHh4eHh4eHh4eHh4eHh4eHh9fS4uLn19eHh4eHh4eHh4eHh4eHh9fX14eHh4eAp4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eH19fX19eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHgKeHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4fX19eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4Cnh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eAp4eHh4Lnh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4Lnh4eHgKeHh4Li4ueHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4Li4ueHh4Cnh4eHgueHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHgueHh4eAp4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHgKXV0pOwotLSBSYW5kb20gcmVnaXN0ZXJzCmxvY2FsIG1vbnN0ZXIgPSB7ICJqIiwiYiIsIlAiLCJGIiB9CnNodWZmbGUobW9uc3RlcikKCmxvY2FsIHBsYWNlID0gc2VsZWN0aW9uLm5ldygpOwpwbGFjZTpzZXQoMDQsMDIpOwpwbGFjZTpzZXQoNDYsMDIpOwpwbGFjZTpzZXQoMDQsMTUpOwpwbGFjZTpzZXQoNDYsMTUpOwoKLS0gRHVuZ2VvbiBkZXNjcmlwdGlvbgpkZXMucmVnaW9uKHsgcmVnaW9uPXswMCwwMCw1MCwxN30sIGxpdD0wLCB0eXBlPSJzd2FtcCIsIGZpbGxlZD0yIH0pCmRlcy5sZXZyZWdpb24oeyByZWdpb24gPSB7MDEsMDAsMTEsMjB9LCByZWdpb25faXNsZXY9MSwgZXhjbHVkZT17MCwwLDUwLDE3fSwgdHlwZT0ic3RhaXItZG93biIgfSk7CmRlcy5sZXZyZWdpb24oeyByZWdpb24gPSB7NjksMDAsNzksMjB9LCByZWdpb25faXNsZXY9MSwgZXhjbHVkZT17MCwwLDUwLDE3fSwgdHlwZT0ic3RhaXItdXAiIH0pOwpkZXMubGV2cmVnaW9uKHsgcmVnaW9uID0gezAxLDAwLDExLDIwfSwgcmVnaW9uX2lzbGV2PTEsIGV4Y2x1ZGU9ezAsMCw1MCwxN30sIHR5cGU9ImJyYW5jaCIgfSk7CmRlcy50ZWxlcG9ydF9yZWdpb24oeyByZWdpb24gPSB7MDEsMDAsMTEsMjB9LCByZWdpb25faXNsZXY9MSwgZXhjbHVkZT17MCwwLDUwLDE3fSxkaXI9InVwIiB9KQpkZXMudGVsZXBvcnRfcmVnaW9uKHsgcmVnaW9uID0gezY5LDAwLDc5LDIwfSwgcmVnaW9uX2lzbGV2PTEsIGV4Y2x1ZGU9ezAsMCw1MCwxN30sZGlyPSJkb3duIiB9KQpkZXMuZmVhdHVyZSgiZm91bnRhaW4iLCBwbGFjZTpybmRjb29yZCgxKSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJnaWFudCBtaW1pYyIsIGNvb3JkID0geyBwbGFjZTpybmRjb29yZCgxKSB9LCBhcHBlYXJfYXMgPSAidGVyOmZvdW50YWluIiB9KQpkZXMubW9uc3Rlcih7IGlkID0gImdpYW50IG1pbWljIiwgY29vcmQgPSB7IHBsYWNlOnJuZGNvb3JkKDEpIH0sIGFwcGVhcl9hcyA9ICJ0ZXI6Zm91bnRhaW4iIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZ2lhbnQgbWltaWMiLCBjb29yZCA9IHsgcGxhY2U6cm5kY29vcmQoMSkgfSwgYXBwZWFyX2FzID0gInRlcjpmb3VudGFpbiIgfSkKLS0gVGhlIGRlbW9uIG9mIHRoZSBzd2FtcApkZXMubW9uc3RlcigiSnVpYmxleCIsMjUsMDgpCi0tIEFuZCBhIGNvdXBsZSBkZW1vbnMKZGVzLm1vbnN0ZXIoImxlbXVyZSIsNDMsMDgpCmRlcy5tb25zdGVyKCJsZW11cmUiLDQ0LDA4KQpkZXMubW9uc3RlcigibGVtdXJlIiw0NSwwOCkKLS0gU29tZSBsaXF1aWRzIGFuZCBnZW1zCmRlcy5vYmplY3QoIioiLDQzLDA2KQpkZXMub2JqZWN0KCIqIiw0NSwwNikKZGVzLm9iamVjdCgiISIsNDMsMDkpCmRlcy5vYmplY3QoIiEiLDQ0LDA5KQpkZXMub2JqZWN0KCIhIiw0NSwwOSkKLS0gQW5kIGxvdHMgb2YgYmxvYmJ5IG1vbnN0ZXJzCmRlcy5tb25zdGVyKG1vbnN0ZXJbNF0sMjUsMDYpCmRlcy5tb25zdGVyKG1vbnN0ZXJbMV0sMjQsMDcpCmRlcy5tb25zdGVyKG1vbnN0ZXJbMl0sMjYsMDcpCmRlcy5tb25zdGVyKG1vbnN0ZXJbM10sMjMsMDgpCmRlcy5tb25zdGVyKG1vbnN0ZXJbM10sMjcsMDgpCmRlcy5tb25zdGVyKG1vbnN0ZXJbMl0sMjQsMDkpCmRlcy5tb25zdGVyKG1vbnN0ZXJbMV0sMjYsMDkpCmRlcy5tb25zdGVyKG1vbnN0ZXJbNF0sMjUsMTApCmRlcy5tb25zdGVyKCJqIikKZGVzLm1vbnN0ZXIoImoiKQpkZXMubW9uc3RlcigiaiIpCmRlcy5tb25zdGVyKCJqIikKZGVzLm1vbnN0ZXIoIlAiKQpkZXMubW9uc3RlcigiUCIpCmRlcy5tb25zdGVyKCJQIikKZGVzLm1vbnN0ZXIoIlAiKQpkZXMubW9uc3RlcigiYiIpCmRlcy5tb25zdGVyKCJiIikKZGVzLm1vbnN0ZXIoImIiKQpkZXMubW9uc3RlcigiRiIpCmRlcy5tb25zdGVyKCJGIikKZGVzLm1vbnN0ZXIoIkYiKQpkZXMubW9uc3RlcigibSIpCmRlcy5tb25zdGVyKCJtIikKZGVzLm1vbnN0ZXIoImplbGx5ZmlzaCIpCmRlcy5tb25zdGVyKCJqZWxseWZpc2giKQotLSBTb21lIHJhbmRvbSBvYmplY3RzCmRlcy5vYmplY3QoIiEiKQpkZXMub2JqZWN0KCIhIikKZGVzLm9iamVjdCgiISIpCmRlcy5vYmplY3QoIiUiKQpkZXMub2JqZWN0KCIlIikKZGVzLm9iamVjdCgiJSIpCmRlcy5vYmplY3QoImJvdWxkZXIiKQotLSBTb21lIHRyYXBzCmRlcy50cmFwKCJzbGVlcCBnYXMiKQpkZXMudHJhcCgic2xlZXAgZ2FzIikKZGVzLnRyYXAoImFudGkgbWFnaWMiKQpkZXMudHJhcCgiYW50aSBtYWdpYyIpCmRlcy50cmFwKCJtYWdpYyIpCmRlcy50cmFwKCJtYWdpYyIpCi0tIE5ldEhhY2sgMy43CWtub3guZGVzCSROSERULURhdGU6IDE1NDczNDM4MjEgMjAxOS8wMS8xMyAwMTo0Mzo0MSAkICAkTkhEVC1CcmFuY2g6IE5ldEhhY2stMy42LjItYmV0YTAxICQ6JE5IRFQtUmV2aXNpb246IDEuMTMgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTIgYnkgSXpjaGFrIE1pbGxlcgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm90ZWxlcG9ydCIpCi0tIEZvcnQncyBlbnRyeSBpcyB2aWEgYSBzZWNyZXQgZG9vciByYXRoZXIgdGhhbiBhIGRyYXdicmlkZ2U7Ci0tIHRoZSBtb2F0IG11c3QgYmUgbWFudWFsbHkgY2lyY3VtdmVudGVkLgpkZXMubWFwKFtbCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KfCB8Li4uLi4uLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufAp8IHwuLi4uLi4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tLS0tLS0tLS0tLi58CnwgLS1TLS0tLVMtLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58Li4uLi4uLi4uLnwuLnwKfCAgICMgICB8Li4uLi4uLi59fX19fX19Li4uLi4uLi4uLi4uLi4uLi4uLi59fX19fX19Li4uLi4uLi4uLnwuLi4uLi4uLi4ufC4ufAp8ICAgIyAgIHwuLi4uLi4uLn0tLS0tLX0uLi4uLi4uLi4uLi4uLi4uLi4uLn0tLS0tLX0uLi4uLi4uLi4uLS0rLS0rLS0uLi58Li58CnwgICAjIC0tLS4uLi4uLi4ufXwuLi58fX19fX19fX19fX19fX19fX19fX19fXwuLi58fS4uLi4uLi4uLi4uLi4uLi4ufC4uLnwuLnwKfCAgICMgfC4uLi4uLi4uLi59LS0tUy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVMtLS19Li4uLi4uLi4uLi4uLi4uLi58Li4ufC4ufAp8ICAgIyB8Li4uLi4uLi4uLn19fXwuLi4uLi4uLi4uLi4uLi58Li4uLi4uLi4uLnx9fX0uLi4uLi4uLi4uLi4uLi4uLisuLi58Li58CnwgLS1TLS0tLS4uLi4uLi4uLi59fC4uLi4uLi4uLi4uLi4uLlMuLi4uLi4uLi4ufH0uLi4uLi4uLi4uLi4uLi4uLi4ufC4uLnwuLnwKfCB8Li4uLi58Li4uLi4uLi4uLn18Li4uLi4uLi4uLi4uLi4ufC4uLi4uLlwuLi5TfS4uLi4uLi4uLi4uLi4uLi4uLi58Li4ufC4ufAp8IHwuLi4uLisuLi4uLi4uLn19fXwuLi4uLi4uLi4uLi4uLi58Li4uLi4uLi4uLnx9fX0uLi4uLi4uLi4uLi4uLi4uLisuLi58Li58CnwgfC4uLi4ufC4uLi4uLi4ufS0tLVMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1TLS0tfS4uLi4uLi4uLi4uLi4uLi4ufC4uLnwuLnwKfCB8Li4uLi58Li4uLi4uLi59fC4uLnx9fX19fX19fX19fX19fX19fX19fX19fC4uLnx9Li4uLi4uLi4uLi4uLi4uLi58Li4ufC4ufAp8IHwuLi1TLS0tLS4uLi4uLn0tLS0tLX0uLi4uLi4uLi4uLi4uLi4uLi4uLn0tLS0tLX0uLi4uLi4uLi4uLS0rLS0rLS0uLi58Li58CnwgfC4ufC4uLi58Li4uLi4ufX19fX19fS4uLi4uLi4uLi4uLi4uLi4uLi4ufX19fX19fS4uLi4uLi4uLi58Li4uLi4uLi4uLnwuLnwKfCB8Li58Li4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwuLi4uLi4uLi4ufC4ufAp8IC0tLS0tLS0tLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tLS0tLS0tLS0tLi58CnwgICAgICAgICAgIHwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpdXSk7Ci0tIE5vbiBkaWdnYWJsZSB3YWxscwpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDc1LDE5KSkKLS0gUG9ydGFsIGFycml2YWwgcG9pbnQKZGVzLmxldnJlZ2lvbih7IHJlZ2lvbiA9IHswOCwxNiwwOCwxNn0sIHR5cGU9ImJyYW5jaCIgfSk7Ci0tIGFjY2Vzc2libGUgdmlhIF5WIGluIHdpemFyZCBtb2RlOyBhcnJpdmUgbmVhciB0aGUgcG9ydGFsCmRlcy50ZWxlcG9ydF9yZWdpb24oeyByZWdpb24gPSB7MDYsMTUsMDksMTZ9LCBkaXI9InVwIiB9KQpkZXMudGVsZXBvcnRfcmVnaW9uKHsgcmVnaW9uID0gezA2LDE1LDA5LDE2fSwgZGlyPSJkb3duIiB9KQotLSAgIFRocm9uZSByb29tLCB3aXRoIENyb2VzdXMgb24gdGhlIHRocm9uZQpkZXMucmVnaW9uKHsgeDE9MzcseTE9MDgseDI9NDYseTI9MTEsIGxpdD0xLCB0eXBlPSJ0aHJvbmUiLCBmaWxsZWQ9MSB9KQotLSAgIDUwJSBjaGFuY2UgZWFjaCB0byBtb3ZlIHRocm9uZSBhbmQvb3IgZm9ydCdzIGVudHJ5IHNlY3JldCBkb29yIHVwIG9uZSByb3cKaWYgcGVyY2VudCg1MCkgdGhlbgogICBkZXMubW9uc3Rlcih7IGlkID0gIkNyb2VzdXMiLCB4PTQzLCB5PTEwLCBwZWFjZWZ1bCA9IDAgfSkKZWxzZQogICBkZXMubW9uc3Rlcih7IGlkID0gIkNyb2VzdXMiLCB4PTQzLCB5PTA5LCBwZWFjZWZ1bCA9IDAgfSkKICAgZGVzLnRlcnJhaW4oNDMsMDksICJcXCIpCiAgIGRlcy50ZXJyYWluKDQzLDEwLCAiLiIpCmVuZAppZiBwZXJjZW50KDUwKSB0aGVuCiAgIGRlcy50ZXJyYWluKDQ3LDA5LCAiUyIpCiAgIGRlcy50ZXJyYWluKDQ3LDEwLCAifCIpCmVuZAoKLS0gICBUaGUgVmF1bHQKZnVuY3Rpb24gdHJlYXN1cmVfc3BvdCh4LHkpCiAgIGRlcy5nb2xkKHsgeCA9IHgsIHkgPSB5LCBhbW91bnQgPSA2MDAgKyBtYXRoLnJhbmRvbSgwLCAzMDApIH0pOwogICBpZiAobWF0aC5yYW5kb20oMCwyKSA9PSAwKSB0aGVuCiAgICAgIGlmIChtYXRoLnJhbmRvbSgwLDIpID09IDApIHRoZW4KICAgICAgICAgZGVzLnRyYXAoInNwaWtlZCBwaXQiLCB4LHkpOwogICAgICBlbHNlCiAgICAgICAgIGRlcy50cmFwKCJsYW5kIG1pbmUiLCB4LHkpOwogICAgICBlbmQKICAgZW5kCmVuZAoKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MjEsMDgsMzUsMTF9LCBsaXQ9MSwgdHlwZT0ib3JkaW5hcnkiIH0pCmxvY2FsIHRyZWFzdXJ5ID0gc2VsZWN0aW9uLmFyZWEoMjEsMDgsMzUsMTEpOwp0cmVhc3VyeTppdGVyYXRlKHRyZWFzdXJlX3Nwb3QpOwoKLS0gICBWYXVsdCBlbnRyYW5jZSBhbHNvIHZhcmllcwppZiBwZXJjZW50KDUwKSB0aGVuCiAgIGRlcy50ZXJyYWluKDM2LDA5LCAifCIpCiAgIGRlcy50ZXJyYWluKDM2LDEwLCAiUyIpCmVuZAotLSAgIENvcm5lciB0b3dlcnMKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgxOSwwNiwyMSwwNiksImxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoNDYsMDYsNDgsMDYpLCJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDE5LDEzLDIxLDEzKSwibGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg0NiwxMyw0OCwxMyksImxpdCIpCi0tICAgQSB3ZWxjb21pbmcgY29tbWl0dGVlCmRlcy5yZWdpb24oeyByZWdpb249ezAzLDEwLDA3LDEzfSxsaXQ9MSx0eXBlPSJ6b28iLGZpbGxlZD0xLGlycmVndWxhcj0xIH0pCi0tICAgYXJyaXZhbCBjaGFtYmVyOyBuZWVkcyB0byBiZSBhIHJlYWwgcm9vbSB0byBjb250cm9sIG1pZ3JhdGluZyBtb25zdGVycywKLS0gICBhbmQgYHVuZmlsbGVkJyBpcyBhIGtsdWRnZSB0byBmb3JjZSBhbiBvcmRpbmFyeSByb29tIHRvIHJlbWFpbiBhIHJvb20KZGVzLnJlZ2lvbih7IHJlZ2lvbj17MDYsMTUsMDksMTZ9LGxpdD0wLHR5cGU9Im9yZGluYXJ5IixhcnJpdmFsX3Jvb209dHJ1ZSB9KQoKLS0gICAzLjYuMjogIEVudGVyaW5nIGxldmVsIGNhcnJ5aW5nIGEgbGl0IGNhbmRsZSB3b3VsZCBzaG93IHRoZSB3aG9sZSBlbnRyeQotLSAgIGNoYW1iZXIgZXhjZXB0IGZvciBpdHMgdG9wIHJpZ2h0IGNvcm5lciBldmVuIHRob3VnaCBzb21lIG9mIHRoZSByZXZlYWxlZAotLSAgIHNwb3RzIGFyZSBmYXJ0aGVyIGF3YXkgdGhhbiB0aGF0IGlzLiAgVGhpcyBpcyBiZWNhdXNlIHRoZSBsaXQgdHJlYXN1cmUgem9vCi0tICAgaXMgZm9yY2luZyB0aGUgd2FsbHMgYXJvdW5kIGl0IHRvIGJlIGxpdCB0b28gKHNlZSBsaWdodF9yZWdpb24oc3BfbGV2LmMpKSwKLS0gICBhbmQgbGl0IHdhbGxzIHNob3cgdXAgd2hlbiBsaWdodCByZWFjaGVzIHRoZSBzcG90IG5leHQgdG8gdGhlbS4gIFRoZSB1bmxpdAotLSAgIGNvcm5lciBpcyBiZXlvbmQgY2FuZGxlIHJhbmdlIGFuZCBpc24ndCBmbGFnZ2VkIGFzIGxpdCBzbyBpdCBkb2Vzbid0IHNob3cKLS0gICB1cCB1bnRpbCBsaWdodCByZWFjaGVzIGl0IHJhdGhlciB0aGFuIHdoZW4gbGlnaHQgZ2V0cyBuZXh0IHRvIGl0LgotLQotLSAgIEZvcmNlIGxlZnQgYW5kIHRvcCB3YWxscyBvZiB0aGUgYXJyaXZhbCBjaGFtYmVyIHRvIGJlIHVubGl0IGluIG9yZGVyIHRvCi0tICAgaGlkZSB0aGlzIGxpZ2h0aW5nIHF1aXJrLgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDA1LDE0LDA1LDE3KSwidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDA1LDE0LDA5LDE0KSwidW5saXQiKQotLSAgIChFbnRlcmluZyB0aGUgdHJlYXN1cmUgem9vIHdoaWxlIGJsaW5kIGFuZCB0aGVuIHJlZ2FpbmluZyBzaWdodCBtaWdodAotLSAgIGV4cG9zZSB0aGUgbmV3IG9kZGl0eSBvZiB0aGVzZSB3YWxscyBub3QgYXBwZWFyaW5nIHdoZW4gb24gdGhlIGxpdCBzaWRlCi0tICAgYnV0IHRoYXQncyBldmVuIGxlc3MgbGlrZWx5IHRvIG9jY3VyIHRoYW4gdGhlIHJhcmUgaW5zdGFuY2Ugb2YgZW50ZXJpbmcKLS0gICB0aGUgbGV2ZWwgd2l0aCBhIGNhbmRsZS4gIFRoZXknbGwgYWxtb3N0IGFsd2F5cyBiZSBtYXBwZWQgZnJvbSB0aGUgYXJyaXZhbAotLSAgIHNpZGUgYmVmb3JlIGVudGVyaW5nIHRoZSB0cmVhc3VyZSB6b28uCi0tCi0tICAgQSBwcmlvciB3b3JrYXJvdW5kIGxpdCB0aGUgdG9wIHJpZ2h0IGNvcm5lciB3YWxsIGFuZCB0aGVuIGp1bXBlZCB0aHJvdWdoCi0tICAgaG9vcHMgdG8gc3VwcHJlc3MgdGhlIGV4dHJhIGxpZ2h0IGluIHRoZSAzeDMgbGl0IGFyZWEgdGhhdCBwcm9kdWNlZC4KLS0gICBUaGlzIGlzIHNpbXBsZXIgYW5kIG1ha2VzIHRoZSBzaG9ydCByYW5nZSBjYW5kbGUgbGlnaHQgYmVoYXZlIG1vcmUgbGlrZQotLSAgIGl0IGlzIGV4cGVjdGVkIHRvIHdvcmsuKQoKLS0gICBCYXJyYWNrcwpkZXMucmVnaW9uKHsgcmVnaW9uPXs2MiwwMyw3MSwwNH0sbGl0PTEsdHlwZT0iYmFycmFja3MiLGZpbGxlZD0xLGlycmVndWxhcj0xIH0pCi0tIERvb3JzCmRlcy5kb29yKCJjbG9zZWQiLDA2LDE0KQpkZXMuZG9vcigiY2xvc2VkIiwwOSwwMykKZGVzLmRvb3IoIm9wZW4iLDYzLDA1KQpkZXMuZG9vcigib3BlbiIsNjYsMDUpCmRlcy5kb29yKCJvcGVuIiw2OCwwOCkKZGVzLmRvb3IoImxvY2tlZCIsMDgsMTEpCmRlcy5kb29yKCJvcGVuIiw2OCwxMSkKZGVzLmRvb3IoImNsb3NlZCIsNjMsMTQpCmRlcy5kb29yKCJjbG9zZWQiLDY2LDE0KQpkZXMuZG9vcigiY2xvc2VkIiwwNCwwMykKZGVzLmRvb3IoImNsb3NlZCIsMDQsMDkpCi0tIFNvbGRpZXJzIGd1YXJkaW5nIHRoZSBmb3J0CmRlcy5tb25zdGVyKCJzb2xkaWVyIiwxMiwxNCkKZGVzLm1vbnN0ZXIoInNvbGRpZXIiLDEyLDEzKQpkZXMubW9uc3Rlcigic29sZGllciIsMTEsMTApCmRlcy5tb25zdGVyKCJzb2xkaWVyIiwxMywwMikKZGVzLm1vbnN0ZXIoInNvbGRpZXIiLDE0LDAzKQpkZXMubW9uc3Rlcigic29sZGllciIsMjAsMDIpCmRlcy5tb25zdGVyKCJzb2xkaWVyIiwzMCwwMikKZGVzLm1vbnN0ZXIoInNvbGRpZXIiLDQwLDAyKQpkZXMubW9uc3Rlcigic29sZGllciIsMzAsMTYpCmRlcy5tb25zdGVyKCJzb2xkaWVyIiwzMiwxNikKZGVzLm1vbnN0ZXIoInNvbGRpZXIiLDQwLDE2KQpkZXMubW9uc3Rlcigic29sZGllciIsNTQsMTYpCmRlcy5tb25zdGVyKCJzb2xkaWVyIiw1NCwxNCkKZGVzLm1vbnN0ZXIoInNvbGRpZXIiLDU0LDEzKQpkZXMubW9uc3Rlcigic29sZGllciIsNTcsMTApCmRlcy5tb25zdGVyKCJzb2xkaWVyIiw1NywwOSkKZGVzLm1vbnN0ZXIoImxpZXV0ZW5hbnQiLDE1LDA4KQotLSBQb3NzaWJsZSBzb3VyY2Ugb2YgYSBib3VsZGVyCmRlcy5tb25zdGVyKCJzdG9uZSBnaWFudCIsMDMsMDEpCi0tIEZvdXIgZHJhZ29ucyBndWFyZGluZyBlYWNoIHNpZGUKZGVzLm1vbnN0ZXIoIkQiLDE4LDA5KQpkZXMubW9uc3RlcigiRCIsNDksMTApCmRlcy5tb25zdGVyKCJEIiwzMywwNSkKZGVzLm1vbnN0ZXIoIkQiLDMzLDE0KQotLSBFZWxzIGluIHRoZSBtb2F0CmRlcy5tb25zdGVyKCJnaWFudCBlZWwiLDE3LDA4KQpkZXMubW9uc3RlcigiZ2lhbnQgZWVsIiwxNywxMSkKZGVzLm1vbnN0ZXIoImdpYW50IGVlbCIsNDgsMDgpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiLDQ4LDExKQotLSBUaGUgY29ybmVyIHJvb21zIHRyZWFzdXJlcwpkZXMub2JqZWN0KCJkaWFtb25kIiwxOSwwNikKZGVzLm9iamVjdCgiZGlhbW9uZCIsMjAsMDYpCmRlcy5vYmplY3QoImRpYW1vbmQiLDIxLDA2KQpkZXMub2JqZWN0KCJlbWVyYWxkIiwxOSwxMykKZGVzLm9iamVjdCgiZW1lcmFsZCIsMjAsMTMpCmRlcy5vYmplY3QoImVtZXJhbGQiLDIxLDEzKQpkZXMub2JqZWN0KCJydWJ5Iiw0NiwwNikKZGVzLm9iamVjdCgicnVieSIsNDcsMDYpCmRlcy5vYmplY3QoInJ1YnkiLDQ4LDA2KQpkZXMub2JqZWN0KCJhbWV0aHlzdCIsNDYsMTMpCmRlcy5vYmplY3QoImFtZXRoeXN0Iiw0NywxMykKZGVzLm9iamVjdCgiYW1ldGh5c3QiLDQ4LDEzKQotLSBOZXRIYWNrIDMuNwltZWR1c2EuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODMgMjAxNS8wNS8yNSAwMDoxMzowMyAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjEwICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkwLCAxOTkxIGJ5IE0uIFN0ZXBoZW5zb24KLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KLS0KLS0gVGhlc2UgYXJlIHRoZSBNZWR1c2EncyBsZXZlbHMgOgotLQoKZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIiwgIm5vdGVsZXBvcnQiKQoKZGVzLm1hcChbWwp9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX0KfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19Cn19Ln19fX19Li59fX19fS4uLi4uLn19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fS4uLi59fX0uLi59fX19fQp9Li4ufX0uLi4uLn19fX19Li4uLn19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fS4uLi4uLi4uLi4uLi4uLn0KfS4uLi59fX19fX19fX19Li4uLn19fS4ufX19fX19fX19fX0uLi4uLi4ufX19fX19fX19fX19fX19fS4ufX0uLi4uLn19fS4uLn19Cn0uLi4ufX19fX19fX0uLi4uLn19fX0uLn19fX19fS4uLi4uLi4uLi4uLi4uLi4ufX19fX19fX19fX0ufX19fS4uLi4ufX0uLi59fQp9Li4uLn19fX19fX19fX19fS59fX19Ln19fX19fS4tLS0tLS0tLS0tLS0tLS0tLS59fX19fX19fX19fX19fX19fS4uLi4uLi4uLn0KfS4uLi59fX19fX19fX19fX19fX19fX0ufX19Li4ufC4uLi4uLi4uLi4uLi4uLlMuLi59fX19fX19fX19fX19fX19fX19Li4uLn19Cn0uLi4uLn0ufX0uLi4ufX19fX19fX19Ln19Li4uLi0tLS0tLS0tKy0tLS0tLS0tLi4uLn19fX19fS4ufX19fX19fX19fX0uLi59fQp9Li4uLi4ufX19fS4ufX19fX19fX19fX19fS4uLi4uLi4ufC4uLi4uLi58Li4uLi4uLi59fX19fS4uLi59fX19fX19fX19fX19fX0KfS4uLi4ufX19fX19fX19fX19fX19fX19fX0uLi4uLi4uLnwuLi4uLi4ufC4uLi4uLi4ufX19fX0uLi59fX19fX19fX0ufX19fX19Cn0uLi4uLn19fX19fX19fX19fX19fX19fX19Li4uLi0tLS0tLS0tKy0tLS0tLS0tLi4uLn19fX19fS59Ln19fX19fX19fX19fX19fQp9Li4uLi4ufX19fX19fX19fX19fX19fX19fX0uLi5TLi4uLi4uLi4uLi4uLi4ufC4uLn19fX19fX19fX19fX19fX19Ln19fX19fX0KfS4uLi4uLi59fX19fX19Li59fX19fX19fX19fX0uLS0tLS0tLS0tLS0tLS0tLS0ufX19fX19fX19fX19fX19fX0uLi4ufX19fX19Cn0uLi4uLi4uLn19Ln19Li4uLn19fX19fX19fX19fS4uLi4uLi4uLi4uLi4uLi4ufX19fX0uLn19fX19fX19fS4uLi4uLi59fX19fQp9Li4uLi4uLn19fX19fX0uLi4uLi59fX19fX19fX19fX19fS4uLi4uLi59fX19fX19fX0uLi4uLn19fX19fS4uLn19Li59fX19fX0KfS4uLi4ufX19fX19fX19fX0uLi4uLn19fX19fX19fX19fX19fX19fX19fX0ufX19fX19fS4ufX19fX19fX19fS4uLi59fX19fX19Cn19Li59fX19fX19fX19fX19Li4uLn19fX19fX19fX19fX19fX19fX19fX0uLi59fS4ufX19fX19fS59fS59fX19Li59fX19fX19fQp9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX0KfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19Cl1dKTsKLS0gRHVuZ2VvbiBEZXNjcmlwdGlvbgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDc0LDE5KSwibGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgzMSwwNyw0NSwwNyksInVubGl0IikKLS0gbWFrZSB0aGUgZG93bnN0YWlycyByb29tIGEgcmVhbCByb29tIHRvIGNvbnRyb2wgYXJyaXZpbmcgbW9uc3RlcnMsIAotLSBhbmQgYWxzbyBhcyBhIGZpeHVwX3NwZWNpYWwgaGFjazsgdGhlIGZpcnN0IHJvb20gZGVmaW5lZCBvbiBNZWR1c2EncyBsZXZlbAotLSByZWNlaXZlcyBzb21lIHN0YXR1ZXMKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MzUsMDksIDQxLDEwfSwgbGl0ID0gMCwgdHlwZT0ib3JkaW5hcnkiLCBhcnJpdmFsX3Jvb209dHJ1ZSB9KQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDMxLDEyLDQ1LDEyKSwidW5saXQiKQotLSBUZWxlcG9ydDogZG93biB0byB1cCBzdGFpcnMgaXNsYW5kLCB1cCB0byBNZWR1c2EncyBpc2xhbmQKZGVzLnRlbGVwb3J0X3JlZ2lvbih7IHJlZ2lvbiA9IHswMSwwMSwwNSwxN30sIGRpcj0iZG93biIgfSkKZGVzLnRlbGVwb3J0X3JlZ2lvbih7IHJlZ2lvbiA9IHsyNiwwNCw1MCwxNX0sIGRpcj0idXAiIH0pCi0tIFN0YWlycwpkZXMuc3RhaXIoInVwIiwgMDUsMTQpCmRlcy5zdGFpcigiZG93biIsIDM2LDEwKQotLSBEb29ycwpkZXMuZG9vcigiY2xvc2VkIiw0NiwwNykKZGVzLmRvb3IoImxvY2tlZCIsMzgsMDgpCmRlcy5kb29yKCJsb2NrZWQiLDM4LDExKQpkZXMuZG9vcigiY2xvc2VkIiwzMCwxMikKLS0gQnJhbmNoLCBub3QgYWxsb3dlZCBpbnNpZGUgTWVkdXNhJ3MgYnVpbGRpbmcuCmRlcy5sZXZyZWdpb24oeyByZWdpb24gPSB7MDEsMDAsNzksMjB9LCBleGNsdWRlID0gezMwLDA2LDQ2LDEzfSwgdHlwZSA9ICJicmFuY2giIH0pCi0tIE5vbiBkaWdnYWJsZSB3YWxscwpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDMwLDA2LDQ2LDEzKSkKLS0gT2JqZWN0cwpkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgeD0zNix5PTEwLCBidWM9InVuY3Vyc2VkIiwKICAgICAgICAgICAgIG1vbnR5cGU9ImtuaWdodCIsIGhpc3RvcmljPTEsIG1hbGUgPSAxLCBuYW1lPSJQZXJzZXVzIiwKICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgaWYgcGVyY2VudCg3NSkgdGhlbgogICAgICAgICAgICAgICAgICAgZGVzLm9iamVjdCh7IGlkID0gInNoaWVsZCBvZiByZWZsZWN0aW9uIiwgYnVjPSJjdXJzZWQiLCBzcGU9MCB9KQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBpZiBwZXJjZW50KDI1KSB0aGVuCiAgICAgICAgICAgICAgICAgICBkZXMub2JqZWN0KHsgaWQgPSAibGV2aXRhdGlvbiBib290cyIsIHNwZT0wIH0pCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGlmIHBlcmNlbnQoNTApIHRoZW4KICAgICAgICAgICAgICAgICAgIGRlcy5vYmplY3QoeyBpZCA9ICJzY2ltaXRhciIsIGJ1Yz0iYmxlc3NlZCIsIHNwZT0yIH0pCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGlmIHBlcmNlbnQoNTApIHRoZW4KICAgICAgICAgICAgICAgICAgIGRlcy5vYmplY3QoInNhY2siKQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICBlbmQKfSk7CgotLSBTcGVjaWZ5aW5nIGV4cGxpY2l0IGNvbnRlbnRzIGZvcmNlcyB0aGVtIHRvIGJlIGVtcHR5LgpkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgY29udGVudHMgPSAwIH0pCmRlcy5vYmplY3QoeyBpZCA9ICJzdGF0dWUiLCBjb250ZW50cyA9IDAgfSkKZGVzLm9iamVjdCh7IGlkID0gInN0YXR1ZSIsIGNvbnRlbnRzID0gMCB9KQpkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgY29udGVudHMgPSAwIH0pCmRlcy5vYmplY3QoeyBpZCA9ICJzdGF0dWUiLCBjb250ZW50cyA9IDAgfSkKZGVzLm9iamVjdCh7IGlkID0gInN0YXR1ZSIsIGNvbnRlbnRzID0gMCB9KQpkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgY29udGVudHMgPSAwIH0pCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKLS0gUmFuZG9tIHRyYXBzCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgiYm9hcmQiLDM4LDA3KQpkZXMudHJhcCgiYm9hcmQiLDM4LDEyKQotLSBSYW5kb20gbW9uc3RlcnMKZGVzLm1vbnN0ZXIoeyBpZCA9ICJNZWR1c2EiLCB4PTM2LHk9MTAsIGFzbGVlcD0xIH0pCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiLDExLDA2KQpkZXMubW9uc3RlcigiZ2lhbnQgZWVsIiwyMywxMykKZGVzLm1vbnN0ZXIoImdpYW50IGVlbCIsMjksMDIpCmRlcy5tb25zdGVyKCJqZWxseWZpc2giLDAyLDAyKQpkZXMubW9uc3RlcigiamVsbHlmaXNoIiwwMCwwOCkKZGVzLm1vbnN0ZXIoImplbGx5ZmlzaCIsMDQsMTgpCmRlcy5tb25zdGVyKCJ3YXRlciB0cm9sbCIsNTEsMDMpCmRlcy5tb25zdGVyKCJ3YXRlciB0cm9sbCIsNjQsMTEpCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAnUycsIHg9MzgsIHk9MDcgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICdTJywgeD0zOCwgeT0xMiB9KQpkZXMubW9uc3RlcigpCmRlcy5tb25zdGVyKCkKZGVzLm1vbnN0ZXIoKQpkZXMubW9uc3RlcigpCmRlcy5tb25zdGVyKCkKZGVzLm1vbnN0ZXIoKQpkZXMubW9uc3RlcigpCmRlcy5tb25zdGVyKCkKZGVzLm1vbnN0ZXIoKQpkZXMubW9uc3RlcigpCi0tIE5ldEhhY2sgMy43CW1lZHVzYS5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4MyAyMDE1LzA1LzI1IDAwOjEzOjAzICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTAgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTAsIDE5OTEgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm90ZWxlcG9ydCIpCgpkZXMubWFwKFtbCn19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fQp9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX0KfS0tLS0tLX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19LS0tLS0tLX19fX19fX19LS0tLS0tLS0tLS0tLS19Cn18Li4uLnx9fX19fX19fX0uLn0ufX0uLn19fX19fX19fX19fX0uLn19fX19fS0uLi4uLi0tfX19fX19fXwuLi4uLi4uLi4uLi58fQp9fC4uLi58Ln19fX19fX19fX19Ln0uLi59fS4ufX19fX19fX19fX19fX19fX0tLS0uLi4uLi59fX19fS58Li4uLi4uLi4uLi4ufH0KfVMuLi4ufC59fX19fX0tLS19fX19fX19fX19fX19fX19fX19fX19fX19fS0tLS4uLnwuLi19fX19fX0uUy4uLS0tLS0tLS0tLXx9Cn18Li4uLnwufX19fX19LS4uLn19fX19fX19fS59fS4uLn0ufX19fS59fX0uLi4uLi4tLS0tfX19fX19LnwuLi4uLi4uLi4uLi58fQp9fC4uLi58Ln19fX19fS0uLi4uLS19fX19fX19fX19fX19fX19fX19fX19LS0tLS4uLi0tfX19fX19fS58Li4tLS0tLS0tLSstfH0KfXwuLi4ufC59fX19fX19Li4uLi4ufX19fS4uLn19fX19fS59fX19fX19fX19fS0tLS4uLS0tfX19fX0ufC4ufC4uUy4uLnwuLnx9Cn18Li4uLnwufX19fX19LS4uLi4tfX19fX19fS0tLS0tLX19fX19fX19fX19fX19LS4uLnwuLX19fX19LnwuLnwuLnwuLi58Li58fQp9fC4uLi58Ln19fX19fX19fS0tLX19fX19fX0uLi4uLi4uLn19fX19fX19fX0tLS0ufC4uLi59fX19fS58Li58Li58Li4ufC4ufH0KfXwuLi4ufC59fX19fX19fX19fX19fX19fX0tLi4uLnwuLi4tfX19fX19fX0tLS4uLi0tLS0ufX19fX0ufC4ufC4ufC4uLnwuLnx9Cn18Li4uLnwufX19fX19Li59fX19fX19fX19LS0tLi4tLS0tLS0tLX19fX19LS4uLS0tfX19fX19fX19LnwuLnwuLi0tLS0tLS18fQp9fC4uLn18Li4ufX19Ln19fX19fS4uLn19fX19LS0uLi4uLi4uLi4ufX19fS4uLS19fX19fX19fX19fS58Li58Li4uLi4uLi4ufH0KfXwuLi59Uy4uLn19Ln19fX19fX19fX19fX19fS0uLi0tLS0tLS0tfX19fX19fX19fX19fX0uLi59fX0ufC4uLS0tLS0tLS0uLlN9Cn18Li4ufXwuLi59fX19fX19Li59fX19fX0tLS0tLi58Li4uLi19fX19fX19fX19fX19fX19fS4ufX19LnwuLi4uLi4uLi4uLi58fQp9fC4uLi58fX19fX0uLi4ufX19fS4ufX0uLS4uLi4uLi4tLS0tfX0uLi4uLi59fX19fX0uLi4uLi4ufX18Li4uLi4uLi4uLi4ufH0KfS0tLS0tLX19fX19fX19fX19fX19fX19fS0tLS0tLS0tLX19fX19fX19fX19fX19fX19fX19fX19fX19LS0tLS0tLS0tLS0tLS19Cn19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fQp9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX0KXV0pOwotLSBEdW5nZW9uIERlc2NyaXB0aW9uCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzQsMTkpLCJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAyLDAzLDA1LDE2KSwidW5saXQiKQotLSBmaXh1cF9zcGVjaWFsIGhhY2s6IHRoZSBmaXJzdCByb29tIGRlZmluZWQgb24gYSBNZWR1c2EgbGV2ZWwgZ2V0cyBzb21lCi0tIGxlYWRlcmJvYXJkIHN0YXR1ZXM7IHNldHRpbmcgdGhlIHJlZ2lvbiBhcyBpcnJlZ3VsYXIgbWFrZXMgaXQgYSByb29tCmRlcy5yZWdpb24oeyByZWdpb249ezYxLDAzLCA3MiwxNn0sIGxpdD0wLCB0eXBlPSJvcmRpbmFyeSIsaXJyZWd1bGFyID0gMSB9KQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDcxLDA4LDcyLDExKSwidW5saXQiKQotLSBtYWtlIHRoZSBkb3duc3RhaXJzIGFyZWEgYSByZWFsIHJvb20gdG8gY29udHJvbCBhcnJpdmluZyBtb25zdGVycwpkZXMucmVnaW9uKHsgcmVnaW9uPXs2NywwOCw2OSwxMX0sIGxpdD0xLCB0eXBlPSJvcmRpbmFyeSIsIGFycml2YWxfcm9vbT10cnVlIH0pCi0tIFRlbGVwb3J0OiBkb3duIHRvIHVwIHN0YWlycyBpc2xhbmQsIHVwIHRvIE1lZHVzYSdzIGlzbGFuZApkZXMudGVsZXBvcnRfcmVnaW9uKHsgcmVnaW9uID0gezAyLDAzLDA1LDE2fSwgZGlyPSJkb3duIiB9KQpkZXMudGVsZXBvcnRfcmVnaW9uKHsgcmVnaW9uID0gezYxLDAzLDcyLDE2fSwgZGlyPSJ1cCIgfSkKLS0gU3RhaXJzCmRlcy5zdGFpcigidXAiLCAwNCwwOSkKZGVzLnN0YWlyKCJkb3duIiwgNjgsMTApCi0tIERvb3JzCmRlcy5kb29yKCJsb2NrZWQiLCA3MSwwNykKLS0gQnJhbmNoLCBub3QgYWxsb3dlZCBvbiBNZWR1c2EncyBpc2xhbmQuCmRlcy5sZXZyZWdpb24oeyB0eXBlPSJicmFuY2giLCByZWdpb24gPSB7MDEsMDAsNzksMjB9LCBleGNsdWRlID0gezU5LDAxLDczLDE3fSB9KQotLSBOb24gZGlnZ2FibGUgd2FsbHMKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgwMSwwMiwwNiwxNykpCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoNjAsMDIsNzMsMTcpKQotLSBPYmplY3RzCmRlcy5vYmplY3QoeyBpZCA9ICJzdGF0dWUiLCB4PTY4LHk9MTAsYnVjPSJ1bmN1cnNlZCIsCiAgICAgICAgICAgICAgICAgICAgICBtb250eXBlPSJrbmlnaHQiLCBoaXN0b3JpYz0xLCBtYWxlPTEsbmFtZT0iUGVyc2V1cyIsCiAgICAgICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHBlcmNlbnQoMjUpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5vYmplY3QoeyBpZCA9ICJzaGllbGQgb2YgcmVmbGVjdGlvbiIsIGJ1Yz0iY3Vyc2VkIiwgc3BlPTAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgaWYgcGVyY2VudCg3NSkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLm9iamVjdCh7IGlkID0gImxldml0YXRpb24gYm9vdHMiLCBzcGU9MCB9KQogICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICBpZiBwZXJjZW50KDUwKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMub2JqZWN0KHsgaWQgPSAic2NpbWl0YXIiLCBidWM9ImJsZXNzZWQiLCBzcGU9MiB9KQogICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICBpZiBwZXJjZW50KDUwKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMub2JqZWN0KCJzYWNrIikKICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgZW5kCn0pOwpkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgeD02NCwgeT0wOCwgY29udGVudHM9MCB9KQpkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgeD02NSwgeT0wOCwgY29udGVudHM9MCB9KQpkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgeD02NCwgeT0wOSwgY29udGVudHM9MCB9KQpkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgeD02NSwgeT0wOSwgY29udGVudHM9MCB9KQpkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgeD02NCwgeT0xMCwgY29udGVudHM9MCB9KQpkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgeD02NSwgeT0xMCwgY29udGVudHM9MCB9KQpkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgeD02NCwgeT0xMSwgY29udGVudHM9MCB9KQpkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgeD02NSwgeT0xMSwgY29udGVudHM9MCB9KQpkZXMub2JqZWN0KCJib3VsZGVyIiwwNCwwNCkKZGVzLm9iamVjdCgiLyIsNTIsMDkpCmRlcy5vYmplY3QoImJvdWxkZXIiLDUyLDA5KQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQotLSBUcmFwcwpkZXMudHJhcCgibWFnaWMiLDAzLDEyKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tIE1vbnN0ZXJzLgpkZXMubW9uc3Rlcih7IGlkPSJNZWR1c2EiLHg9NjgseT0xMCxhc2xlZXA9MSB9KQpkZXMubW9uc3RlcigiZ3JlbWxpbiIsMDIsMTQpCmRlcy5tb25zdGVyKCJ0aXRhbiIsMDIsMDUpCmRlcy5tb25zdGVyKCJlbGVjdHJpYyBlZWwiLDEwLDEzKQpkZXMubW9uc3RlcigiZWxlY3RyaWMgZWVsIiwxMSwxMykKZGVzLm1vbnN0ZXIoImVsZWN0cmljIGVlbCIsMTAsMTQpCmRlcy5tb25zdGVyKCJlbGVjdHJpYyBlZWwiLDExLDE0KQpkZXMubW9uc3RlcigiZWxlY3RyaWMgZWVsIiwxMCwxNSkKZGVzLm1vbnN0ZXIoImVsZWN0cmljIGVlbCIsMTEsMTUpCmRlcy5tb25zdGVyKCJqZWxseWZpc2giLDAxLDAxKQpkZXMubW9uc3RlcigiamVsbHlmaXNoIiwwMCwwOCkKZGVzLm1vbnN0ZXIoImplbGx5ZmlzaCIsMDQsMTkpCmRlcy5tb25zdGVyKHsgaWQgPSAic3RvbmUgZ29sZW0iLHg9NjQseT0wOCxhc2xlZXA9MSB9KQpkZXMubW9uc3Rlcih7IGlkID0gInN0b25lIGdvbGVtIix4PTY1LHk9MDgsYXNsZWVwPTEgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJzdG9uZSBnb2xlbSIseD02NCx5PTA5LGFzbGVlcD0xIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic3RvbmUgZ29sZW0iLHg9NjUseT0wOSxhc2xlZXA9MSB9KQpkZXMubW9uc3Rlcih7IGlkID0gImNvYnJhIix4PTY0LHk9MTAsYXNsZWVwPTEgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJjb2JyYSIseD02NSx5PTEwLGFzbGVlcD0xIH0pCmRlcy5tb25zdGVyKCJBIiw3MiwwOCkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJ5ZWxsb3cgbGlnaHQiLHg9NzIseT0xMSxhc2xlZXA9MSB9KQpkZXMubW9uc3Rlcih7IHggPSAxNywgeSA9IDA3IH0pCmRlcy5tb25zdGVyKHsgeCA9IDI4LCB5ID0gMTEgfSkKZGVzLm1vbnN0ZXIoeyB4ID0gMzIsIHkgPSAxMyB9KQpkZXMubW9uc3Rlcih7IHggPSA0OSwgeSA9IDA5IH0pCmRlcy5tb25zdGVyKHsgeCA9IDQ4LCB5ID0gMDcgfSkKZGVzLm1vbnN0ZXIoeyB4ID0gNjUsIHkgPSAwMyB9KQpkZXMubW9uc3Rlcih7IHggPSA3MCwgeSA9IDA0IH0pCmRlcy5tb25zdGVyKHsgeCA9IDcwLCB5ID0gMTUgfSkKZGVzLm1vbnN0ZXIoeyB4ID0gNjUsIHkgPSAxNiB9KQpkZXMubW9uc3RlcigpCmRlcy5tb25zdGVyKCkKZGVzLm1vbnN0ZXIoKQpkZXMubW9uc3RlcigpCgotLSBOZXRIYWNrIDMuNwltZWR1c2EuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODMgMjAxNS8wNS8yNSAwMDoxMzowMyAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjEwICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkwLCAxOTkxIGJ5IE0uIFN0ZXBoZW5zb24KLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKZGVzLmxldmVsX2ZsYWdzKCJub3RlbGVwb3J0IiwgIm1hemVsZXZlbCIsICJzaG9ydHNpZ2h0ZWQiKQotLQotLSBIZXJlIHlvdSBkaXN0dXJiIHJhdmVucyBuZXN0aW5nIGluIHRoZSB0cmVlcy4KLS0KZGVzLm1hcChbWwp9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19Cn19fX19fX19fX0ufX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19Ln19fX19fX19fX19fX19fX19fX19fX19fX19fX0KfX19fX19fX1ULi5ULn19fX19fX19fX19fX19fX19fX19Li59fX19fX19fS59fX0uLi59fX19fX19Ln19fX19Li4uLi4ufX19fX19fQp9fX19fX0uLi4uLi4uVC59fX19fX19fX19fS4ufX19fS4uVC59fX19fX0uLi5ULi4uVC4ufX0uLi5ULi59fS4uLS0tLS0uLn19fX19Cn19fS4uLi0tLS0tLi4uLn19fX19fX19fX0uVC4ufX19fX0uLi59fX19fS4uLi4uVC4ufX19fX0uLi4uLi5ULi58Li4ufC5ULi59fX0KfX19LlQufC4uLnwuLi5ULn19fX19fX0uVC4uLi4uLn19fX0uLlQuLn19Ln19fS59fS4uLn19fX19LlQuLi4uLisuLi58Li4ufX19fQp9fX19Li58Li4ufC59fS59fX19fS4uLi4ufX19VC59fX19Li4uLi59fX19fX0uVH19fX19fX19fX19fX0uLlQufC4uLnwufX19fX19Cn19fX19LnwuLi58Ln19fX19fS4uVC4ufX19fX19fX19fX19fVQufX19fX19fX0uLn19fX19fX19fX19Li4uLi4tLS0tLS59fX19fX0KfX19fX0uLS0rLS0uLn19fX19fS4uLn19fX19fX19fX19fX19fX19fX1ULn19fX19fX19fX19fX19fX0uVC59Li4uLi4uLi59fX19fQp9fX19fS4uLi4uLi59fX19fX0uLn19fX19fX19fS59fX19fX19fX19fX19fX19fX19fX19fX19fX19fX0ufX19Ln19LlQufX19fX19Cn19LlQuLi5ULi4ufX19fVR9fX19fX19fX19fS4uLi59fX19fX19fX19VH19fX19LlR9fS4uLn19fX19fX19fX19fX19Li4ufX19fX0KfX19Li4uVH19fX19fX0uLn19fX19fX19fX19LlQuLi59fX19fX19fS5ULn0uVC4uLi4uVC4uLi59fX19fX19fX19fX19Ln19fX19fQp9fX19fX19fX19fX19fX0uLi4ufX19fX19fS4uLn19Ln19fX19fX19fX0uLi4uLi4uLi4uLi5ULi59fX19fS5ULn19fX19fX19fX19Cn19fX19fX19fX19fX19fX0uLlQuLn19fX19fX19fX19fX19Li59fX19fS4uLS0tLS0tKy0tLi4uVC59fX0uLi4ufX19fX19fX19fX0KfX19fS59Li59fX19fX19LlQuLi4uLn19fX19fX19fX19Li5ULn19fX0uVC58Li4ufC4uLnwuLi4ufX19fX0ufX19fX0uLi59fX19fQp9fX0uVC59Li4ufS4ufX19fVQuVC59fX19fX0ufX19fX19fS4uLi59fS4uLnwuLi4rLi4ufC59fX19fX19fX19fX19Li5ULi4ufX19Cn19fX0uLn19fS4uLi4ufX0uLi59fX19fX19Li4ufX19fX19fX19fX19fVQufC4uLnwuLi58fX19fX19fX19fX0uLi4uVC4ufX19fX0KfX19fX0uLn19fS5ULi59fX0ufX19fX19fX0uVC4ufX19fX19fX19fX19fX0tLS1TLS0tLS19fX19fX19fX19fX19Li4uLn19fX19fQp9fX19fX19fX19fS4ufX19fX19fX19fX19fX19Ln19fX19fX19fX19fX19fX19VC4uVH19fX19fX19fX19fX19fX19fX19fX19fX19Cn19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX0KXV0pOwoKbG9jYWwgcGxhY2UgPSBzZWxlY3Rpb24ubmV3KCk7CnBsYWNlOnNldCgwOCwwNik7CnBsYWNlOnNldCg2NiwwNSk7CnBsYWNlOnNldCg0NiwxNSk7CgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDc0LDE5KSwibGl0IikKLS0gZml4dXBfc3BlY2lhbCBoYWNrOiB0aGUgZmlyc3Qgcm9vbSBkZWZpbmVkIG9uIGEgTWVkdXNhIGxldmVsIGdldHMgc29tZQotLSBsZWFkZXJib2FyZCBzdGF0dWVzLCB1c2UgYXJyaXZhbF9yb29tIHRvIGZvcmNlIGl0IHRvIGJlIGEgcm9vbSBldmVuIHRob3VnaAotLSBtb25zdGVycyB3b24ndCBhcnJpdmUgd2l0aGluIGl0CmRlcy5yZWdpb24oeyByZWdpb249ezQ5LDE0LCA1MSwxNn0sIGxpdD0tMSwgdHlwZT0ib3JkaW5hcnkiLCBhcnJpdmFsX3Jvb209dHJ1ZSB9KTsKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwNywwNSwwOSwwNyksInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg2NSwwNCw2NywwNiksInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg0NSwxNCw0NywxNiksInVubGl0IikKLS0gTm9uIGRpZ2dhYmxlIHdhbGxzCi0tIDR0aCByb29tIGhhcyBkaWdnYWJsZSB3YWxscyBhcyBNZWR1c2EgaXMgbmV2ZXIgcGxhY2VkIHRoZXJlCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDYsMDQsMTAsMDgpKQpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDY0LDAzLDY4LDA3KSkKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSg0NCwxMyw0OCwxNykpCi0tIEFsbCBwbGFjZXMgYXJlIGFjY2Vzc2libGUgYWxzbyB3aXRoIGp1bXBpbmcsIHNvIGRvbid0IGJvdGhlcgotLSByZXN0cmljdGluZyB0aGUgcGxhY2VtZW50IHdoZW4gdGVsZXBvcnRpbmcgZnJvbSBsZXZlbHMgYmVsb3cgdGhpcy4KZGVzLnRlbGVwb3J0X3JlZ2lvbih7IHJlZ2lvbiA9IHszMywwMiwzOCwwN30sIGRpcj0iZG93biIgfSkKZGVzLmxldnJlZ2lvbih7IHJlZ2lvbiA9IHszMiwwMSwzOSwwN30sIHR5cGU9InN0YWlyLXVwIiB9KTsKbG9jYWwgbXgsIG15ID0gcGxhY2U6cm5kY29vcmQoMSk7CmRlcy5zdGFpcigiZG93biIsIG14LCBteSkKZGVzLmRvb3IoImxvY2tlZCIsMDgsMDgpCmRlcy5kb29yKCJsb2NrZWQiLDY0LDA1KQpkZXMuZG9vcigicmFuZG9tIiw1MCwxMykKZGVzLmRvb3IoImxvY2tlZCIsNDgsMTUpCi0tCmxvY2FsIHB4LCBweSA9IHBsYWNlOnJuZGNvb3JkKDEpOwpkZXMuZmVhdHVyZSgiZm91bnRhaW4iLCBweCxweSk7Ci0tCmxvY2FsIHB4LCBweSA9IHBsYWNlOnJuZGNvb3JkKDEpOwpkZXMub2JqZWN0KHsgaWQ9InN0YXR1ZSIseD1weCwgeT1weSwgYnVjPSJ1bmN1cnNlZCIsCiAgICAgICAgICAgICAgICAgICAgICBtb250eXBlPSJrbmlnaHQiLCBoaXN0b3JpYz0xLCBtYWxlPTEsbmFtZT0iUGVyc2V1cyIsCiAgICAgICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHBlcmNlbnQoNzUpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5vYmplY3QoeyBpZCA9ICJzaGllbGQgb2YgcmVmbGVjdGlvbiIsIGJ1Yz0iY3Vyc2VkIiwgc3BlPTAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgaWYgcGVyY2VudCgyNSkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLm9iamVjdCh7IGlkID0gImxldml0YXRpb24gYm9vdHMiLCBzcGU9MCB9KQogICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICBpZiBwZXJjZW50KDUwKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMub2JqZWN0KHsgaWQgPSAic2NpbWl0YXIiLCBidWM9ImJsZXNzZWQiLCBzcGU9MiB9KQogICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICBpZiBwZXJjZW50KDUwKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMub2JqZWN0KCJzYWNrIikKICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgZW5kCn0pOwotLQpkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgY29udGVudHM9MCB9KQpkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgY29udGVudHM9MCB9KQpkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgY29udGVudHM9MCB9KQpkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgY29udGVudHM9MCB9KQpkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgY29udGVudHM9MCB9KQpkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgY29udGVudHM9MCB9KQpkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgY29udGVudHM9MCB9KQoKZm9yIGk9MSw4IGRvCiAgIGRlcy5vYmplY3QoKQplbmQKZGVzLm9iamVjdCgiYmxhbmsgcGFwZXIiLDQ4LDE4KQpkZXMub2JqZWN0KCJibGFuayBwYXBlciIsNDgsMTgpCi0tCmRlcy50cmFwKCJydXN0IikKZGVzLnRyYXAoInJ1c3QiKQpkZXMudHJhcCgiYm9hcmQiKQpkZXMudHJhcCgiYm9hcmQiKQpkZXMudHJhcCgpCi0tCmRlcy5tb25zdGVyKHsgaWQgPSAiTWVkdXNhIiwgeD1teCwgeT1teSwgYXNsZWVwPTEgfSkKZGVzLm1vbnN0ZXIoImdpYW50IGVlbCIpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiKQpkZXMubW9uc3RlcigiamVsbHlmaXNoIikKZGVzLm1vbnN0ZXIoImplbGx5ZmlzaCIpCmRlcy5tb25zdGVyKCJ3b29kIG55bXBoIikKZGVzLm1vbnN0ZXIoIndvb2QgbnltcGgiKQpkZXMubW9uc3Rlcigid2F0ZXIgbnltcGgiKQpkZXMubW9uc3Rlcigid2F0ZXIgbnltcGgiKQoKZm9yIGk9MSwzMCBkbwogICBkZXMubW9uc3Rlcih7IGlkID0gInJhdmVuIiwgaG9zdGlsZSA9IDEgfSkKZW5kCgotLSBOZXRIYWNrIDMuNwltZWR1c2EuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODMgMjAxNS8wNS8yNSAwMDoxMzowMyAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjEwICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkwLCAxOTkxIGJ5IE0uIFN0ZXBoZW5zb24KLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKZGVzLmxldmVsX2ZsYWdzKCJub3RlbGVwb3J0IiwgIm1hemVsZXZlbCIpCi0tCi0tIEhlcmUgdGhlIE1lZHVzYSBydWxlcyBzb21lIHNsaXRoZXJ5IG1vbnN0ZXJzIGZyb20gaGVyICdwYWxhY2UnLCB3aXRoCi0tIGEgeWVsbG93IGRyYWdvbiBuZXN0aW5nIGluIHRoZSBiYWNreWFyZC4KLS0KZGVzLm1hcChbWwp9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19Cn19fX19fX19fX19fX19Li4uLi4uLi59fX19fX19fX19fX19fX19fX19fX19fS4ufX19Li4uLi59fX19fX19fX19fS0tLS18fX19fX0KfX19fX19Li4tLS0tLS0tLS0tRi0uLi4uLn19fX19fX19fX19fX19fX0uLi0tLS4uLn19fX0uLi4uVC59fX19fX19Li4uLnx9fX19fQp9fX0uLi4uLnwuLi5GLi4uLi4uU319fX0uLi4ufX19fX19fS4uLn19Li4uLi58fX0ufX19fX19fS4uLi4uLn19fX18Li4uLi4ufX19Cn19fS4uLi4uKy4uLnwuLnsuLi58fX19fX19fX19fX19Li4uLi59fX19fC4uLnx9fX19fX19fX19fS59fX19fX19fS0tLS0ufX19fX0KfX0uLi4uLi58Li4ufC4uLi4uLnx9fX19fX19fX0uLi4uLi59fX19fX18Li4uLi4uLn19fX19fX19fX19fX0uLn19fX19Li4ufX19fQp9fXwtKy0tRnwtKy0tLi4uLnxGfC18fX19fX0uLi4ufX19Li4uLn19fS0tLS0tfX0uLi4uLn19fX19fX0uLi4uLi59fX19Ln19fX19Cn19fC4uLn19fC4uLnwuLi4ufH19fXx9fX19fX19Li59fX19fX19fX19fX19fX19fX19fS4uLi59fX19fX19fS4uLi5ULn19fX19fX0KfX18Li4ufX1GLi4uKy4uLi5GfX19fX19fS4ufX19fX19fX19fX19fX0uLi59fX19fX19fX19fX19fX19fX19fX19Li4uLn19Li59fQp9fXwuLi59fXwuLi58Li4uLnx9fX18fS4uLi59fX19fX0uLi4ufX19Li4ufX19fX0uLi59fX19fX19fX19fX19fX19fS4uLi4ufX19Cn19LS0rLS1GfC0rLS0uLi4uLUZ8LXwuLi4ufX19fX19fX19fS5ULi4ufX19fS4uLi4tLS19fX19fX19fX19fX19fX19fX19fX19fX0KfX0uLi4uLi58Li4ufC4uLi4uLnx9fX19fS59fX19fX19fX0uLi4ufX19fX19fS4uLi4ufH19fX19fX19fS59fX19fX19fX19fX19fQp9fX19Li4uLisuLi58Li57Li4ufC59fX19fX19fX19fX19fX19fX19fX19fX19fS58Li58fX19fX19fS4uLi4uLn19fX0uLi59fX19Cn19fX19fS4ufC4uLkYuLi4uLi58Li4ufX19fX19fX19fS4uLS0tfX19fX19fX19fS0tLi19fX19fS4uLi59fX19fX0uLi4ufX19fX0KfX19fX19fX0tLS0tLVMtLS0tRnwuLi4ufX19fX19fX19fC4uLnx9fX19fX19fX19fX0uLi59fX19fX0uLi59fX19fX0uLn19fX19fQp9fX19fX19fX0uLi4uLi4uLi4uLi4uLlQuLi59fX19fS58Li4uLi4uLn19fX19fX19fX19fX19Li59Li4ufS59fX19Li4uLn19fX19Cn19fX19fX19fX0uLi4ufX19fS4uLn0uLi59fX19fS4uLi4uLi58Ln19fX19fX19fX19fX19Li4uLi4uLn19fX19fX19fS4uLn19fX0KfX19fX19fX19fS4ufX19fX19fX19fS59fX19fX19fX19LS4uLS0ufX19fX19fX0uLn19fX19fS4uVC4uLn19fS4ufX19fX19fX19fQp9fX19fX19fX0uLi59fX19fX19fX19fX19fX19fX19fX19fS4uLn19fX19fX0uLi4ufX19fX19fS59fX0uLn19fS4uLn19fX19fX19Cn19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX0ufX19fX19Li4uLn19fX19fX19fX19fX19fX19fX0uLi59fX19fX0KfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fQpdXSk7Ci0tCmxvY2FsIHBsYWNlID0gc2VsZWN0aW9uLm5ldygpOwpwbGFjZTpzZXQoMDQsMDgpOwpwbGFjZTpzZXQoMTAsMDQpOwpwbGFjZTpzZXQoMTAsMDgpOwpwbGFjZTpzZXQoMTAsMTIpOwotLQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDc0LDE5KSwibGl0IikKLS0gZml4dXBfc3BlY2lhbCBoYWNrOiBUaGUgZmlyc3QgInJvb20iIHJlZ2lvbiBpbiBNZWR1c2EgbGV2ZWxzIGdldHMgZmlsbGVkIHdpdGgKLS0gc29tZSBsZWFkZXJib2FyZCBzdGF0dWVzLCBzbyB0aGlzIG5lZWRzIHRvIGJlIGEgcm9vbTsgc2V0dGluZyBpcnJlZ3VsYXI9MQotLSB3aWxsIGZvcmNlIHRoaXMKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MTMsMDMsIDE4LDEzfSwgbGl0PTEsIHR5cGU9Im9yZGluYXJ5IiwgaXJyZWd1bGFyPTEgfSkKLS0KZGVzLnRlbGVwb3J0X3JlZ2lvbih7IHJlZ2lvbiA9IHs2NCwwMSw3NCwxN30sIGRpcj0iZG93biIgfSk7CmRlcy50ZWxlcG9ydF9yZWdpb24oeyByZWdpb24gPSB7MDIsMDIsMTgsMTN9LCBkaXI9InVwIiB9KTsKLS0KZGVzLmxldnJlZ2lvbih7IHJlZ2lvbiA9IHs2NywwMSw3NCwyMH0sIHR5cGU9InN0YWlyLXVwIiB9KTsKbG9jYWwgbXgsIG15ID0gcGxhY2U6cm5kY29vcmQoMSk7CmRlcy5zdGFpcigiZG93biIsIG14LCBteSkKLS0KZGVzLmRvb3IoImxvY2tlZCIsMDQsMDYpCmRlcy5kb29yKCJsb2NrZWQiLDA0LDEwKQpkZXMuZG9vcigibG9ja2VkIiwwOCwwNCkKZGVzLmRvb3IoImxvY2tlZCIsMDgsMTIpCmRlcy5kb29yKCJsb2NrZWQiLDEwLDA2KQpkZXMuZG9vcigibG9ja2VkIiwxMCwxMCkKZGVzLmRvb3IoImxvY2tlZCIsMTIsMDgpCi0tCmRlcy5sZXZyZWdpb24oeyByZWdpb24gPSB7MjcsMDAsNzksMjB9LCB0eXBlPSJicmFuY2giIH0pOwotLQpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDAxLDAxLDIyLDE0KSk7Ci0tCmRlcy5vYmplY3QoImNyeXN0YWwgYmFsbCIsIDA3LDA4KQotLQpsb2NhbCBweCwgcHkgPSBwbGFjZTpybmRjb29yZCgxKTsKZGVzLm9iamVjdCh7IGlkPSJzdGF0dWUiLHg9cHgsIHk9cHksIGJ1Yz0idW5jdXJzZWQiLAogICAgICAgICAgICAgICAgICAgICAgbW9udHlwZT0ia25pZ2h0IiwgaGlzdG9yaWM9MSwgbWFsZT0xLG5hbWU9IlBlcnNldXMiLAogICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICBpZiBwZXJjZW50KDc1KSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMub2JqZWN0KHsgaWQgPSAic2hpZWxkIG9mIHJlZmxlY3Rpb24iLCBidWM9ImN1cnNlZCIsIHNwZT0wIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHBlcmNlbnQoMjUpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5vYmplY3QoeyBpZCA9ICJsZXZpdGF0aW9uIGJvb3RzIiwgc3BlPTAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgaWYgcGVyY2VudCg1MCkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLm9iamVjdCh7IGlkID0gInNjaW1pdGFyIiwgYnVjPSJibGVzc2VkIiwgc3BlPTIgfSkKICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgaWYgcGVyY2VudCg1MCkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLm9iamVjdCgic2FjayIpCiAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgIGVuZAp9KTsKLS0KZGVzLm9iamVjdCh7IGlkID0gInN0YXR1ZSIsIGNvbnRlbnRzPTAgfSkKZGVzLm9iamVjdCh7IGlkID0gInN0YXR1ZSIsIGNvbnRlbnRzPTAgfSkKZGVzLm9iamVjdCh7IGlkID0gInN0YXR1ZSIsIGNvbnRlbnRzPTAgfSkKZGVzLm9iamVjdCh7IGlkID0gInN0YXR1ZSIsIGNvbnRlbnRzPTAgfSkKZGVzLm9iamVjdCh7IGlkID0gInN0YXR1ZSIsIGNvbnRlbnRzPTAgfSkKZGVzLm9iamVjdCh7IGlkID0gInN0YXR1ZSIsIGNvbnRlbnRzPTAgfSkKZGVzLm9iamVjdCh7IGlkID0gInN0YXR1ZSIsIGNvbnRlbnRzPTAgfSkKZm9yIGk9MSw4IGRvCiAgIGRlcy5vYmplY3QoKQplbmQKLS0KZm9yIGk9MSw3IGRvCiAgIGRlcy50cmFwKCkKZW5kCi0tCmRlcy5tb25zdGVyKCJNZWR1c2EiLCBteCwgbXkpCmRlcy5tb25zdGVyKCJrcmFrZW4iLCAwNywwNykKLS0KLS0gdGhlIG5lc3RpbmcgZHJhZ29uCmRlcy5tb25zdGVyKHsgaWQgPSAieWVsbG93IGRyYWdvbiIsIHg9MDUsIHk9MDQsIGFzbGVlcD0xIH0pCmlmIHBlcmNlbnQoNTApIHRoZW4KICAgZGVzLm1vbnN0ZXIoeyBpZCA9ICJiYWJ5IHllbGxvdyBkcmFnb24iLCB4PTA0LHk9MDQsIGFzbGVlcD0xIH0pCmVuZAppZiBwZXJjZW50KDI1KSB0aGVuCiAgIGRlcy5tb25zdGVyKHsgaWQgPSAiYmFieSB5ZWxsb3cgZHJhZ29uIiwgeD0wNCwgeT0wNSwgYXNsZWVwPTEgfSkKZW5kCmRlcy5vYmplY3QoeyBpZCA9ICJlZ2ciLCB4PTA1LCB5PTA0LCBtb250eXBlPSJ5ZWxsb3cgZHJhZ29uIiB9KTsKaWYgcGVyY2VudCg1MCkgdGhlbgogICBkZXMub2JqZWN0KHsgaWQgPSAiZWdnIiwgeD0wNSwgeT0wNCwgbW9udHlwZT0ieWVsbG93IGRyYWdvbiIgfSk7CmVuZAppZiBwZXJjZW50KDI1KSB0aGVuCiAgIGRlcy5vYmplY3QoeyBpZCA9ICJlZ2ciLCB4PTA1LCB5PTA0LCBtb250eXBlPSJ5ZWxsb3cgZHJhZ29uIiB9KTsKZW5kCi0tCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiKQpkZXMubW9uc3RlcigiZ2lhbnQgZWVsIikKZGVzLm1vbnN0ZXIoImplbGx5ZmlzaCIpCmRlcy5tb25zdGVyKCJqZWxseWZpc2giKQpmb3IgaT0xLDE0IGRvCiAgIGRlcy5tb25zdGVyKCJTIikKZW5kCmZvciBpPTEsNCBkbwogICBkZXMubW9uc3RlcigiYmxhY2sgbmFnYSBoYXRjaGxpbmciKQogICBkZXMubW9uc3RlcigiYmxhY2sgbmFnYSIpCmVuZAotLSBOZXRIYWNrIDMuNwltaW5lcy5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4MyAyMDE1LzA1LzI1IDAwOjEzOjAzICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMjUgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODktOTUgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEtOTUgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQotLSBNaW5lIGVuZCBsZXZlbCB2YXJpYW50IDEKLS0gIk1pbWljIG9mIHRoZSBNaW5lcyIKCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiICIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIpOwoKZGVzLm1hcChbWwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gICAtLS0tLS0KfCAgICAgICAgICAgICAgICAgICAgICAgIHwuLi4uLi4ufCAgICAgfC4uLi4uLi4tLi4ufCAgICAgICB8Li4uLi58LiAgICAgICB8CnwgICAgLS0tLS0tLS0tICAgICAgICAtLS0tLi4uLi4uLi0tLS0tLS0uLi4uLi4uLi4uLnwgICAgICAgLS0tLi4uLVMtICAgICAgfAp8ICAgIHwuLi4uLi4ufCAgICAgICAgfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLVMtICAgICAgLS0uLi4uLi4ufCAgICAgIHwKfCAgICB8Li4uLi4uLS0tLS0tLSAgIC0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwuICAgICAgIHwuLi4uLi4uLS0gICAgICB8CnwgICAgfC4uLS0uLi4uLi4uLi0tLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58LiAgICAgICAtLi0uLi0tLS0gICAgICAgfAp8ICAgIC0tLi4tLS4tLS0tLS4uLi4uLi4uLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi0tLSAgICAgICAgLS0uLi0tICAgICAgICAgIHwKfCAgICAgLS0uLi0tLi58IC0tLS0tLS0tLS0tLi4uLi4uLi4uLi4uLi4uLi4uLS0tLi0tLS0tLS0tLS0uLi0tICAgICAgICAgICB8CnwgICAgICB8Li4uLS0ufCAgICB8Li5TLi4uUy4uLi4uLi4uLi4uLi4uLS0tLi4uLi4uLi4uLi4uLi4uLi0tICAgICAgICAgICAgfAp8ICAgICAtLS0tLi4tLS0tLSAgLS0tLS0tLS0tLS0tLi4uLi4uLi4tLS0gLS0tLS0tLS0tLS0tLi4uLS0tICAgICAgICAgICAgIHwKfCAgICAgfC4uLi4uLi4uLi0tICAgICAgICAgICAgLS0tLS0tLS0tLSAgICAgICAgICAgICAgLS0tLi4uLS0gLS0tLS0gICAgICB8CnwgICAgLS0uLi4uLi0tLS4uLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAtLS0tLS0tLSAgLS0uLi4tLS0uLi4tLSAgICAgfAp8IC0tLS0uLi0uLi0tIC0tLi4tLS0tLS0tLS0tLS0tLS0tLS0tLS0gICAgICAtLS4uLi4uLi0tICAtLS0uLi4uLi4uLnwgICAgIHwKfC0tLi4uLi0tLS0tICAgLS0uLi0uLi4uLi4uLi4uLi4uLi4uLi4tLS0gICAgfC4uLi4uLi4ufCAgICB8Li4uLi4uLi0tICAgICB8CnwuLi4uLi4ufCAgICAgICAtLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi5TLi4gIC0tLi4uLi4uLS0gICAgLS0tLi4tLS0tICAgICAgfAp8LS0uLS0uLS0gICAgICAgIC0tLS0uLi4uLi4uLi4uLi4uLi4uLi0tLSAgICAgLS0tLS0tLi4tLS0tLS0uLi4tLSAgICAgICAgIHwKfCB8Li4uLlMuLiAgICAgICAgICB8Li4uLi4uLi4uLi4uLi4uLS4ufCAgICAgICAgIC4uUy4uLi4uLi4uLi4ufCAgICAgICAgICB8Ci0tLS0tLS0tICAgICAgICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0gICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpdXSk7CgotLSBEdW5nZW9uIERlc2NyaXB0aW9uCmxvY2FsIHBsYWNlID0geyB7MDgsMTZ9LHsxMywwN30sezIxLDA4fSx7NDEsMTR9LHs1MCwwNH0sezUwLDE2fSx7NjYsMDF9IH0Kc2h1ZmZsZShwbGFjZSkKCi0tIG1ha2UgdGhlIGVudHJ5IGNoYW1iZXIgYSByZWFsIHJvb207IGl0IGFmZmVjdHMgbW9uc3RlciBhcnJpdmFsCmRlcy5yZWdpb24oeyByZWdpb249ezI2LDAxLDMyLDAxfSwgbGl0PTAsIHR5cGU9Im9yZGluYXJ5IiwgaXJyZWd1bGFyPTEsIGFycml2YWxfcm9vbT10cnVlIH0pCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMjAsMDgsMjEsMDgpLCJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMjMsMDgsMjUsMDgpLCJ1bmxpdCIpOwotLSBTZWNyZXQgZG9vcnMKZGVzLmRvb3IoImxvY2tlZCIsMDcsMTYpCmRlcy5kb29yKCJsb2NrZWQiLDIyLDA4KQpkZXMuZG9vcigibG9ja2VkIiwyNiwwOCkKZGVzLmRvb3IoImxvY2tlZCIsNDAsMTQpCmRlcy5kb29yKCJsb2NrZWQiLDUwLDAzKQpkZXMuZG9vcigibG9ja2VkIiw1MSwxNikKZGVzLmRvb3IoImxvY2tlZCIsNjYsMDIpCi0tIFN0YWlycwpkZXMuc3RhaXIoInVwIiwgMzYsMDQpCi0tIE5vbiBkaWdnYWJsZSB3YWxscwpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDc0LDE3KSkKLS0gTmljaGVzCi0tIE5vdGU6IHBsYWNlWzZdIGVtcHR5CmRlcy5vYmplY3QoImRpYW1vbmQiLHBsYWNlWzddKQpkZXMub2JqZWN0KCJlbWVyYWxkIixwbGFjZVs3XSkKZGVzLm9iamVjdCgid29ydGhsZXNzIHBpZWNlIG9mIHZpb2xldCBnbGFzcyIscGxhY2VbN10pCmRlcy5tb25zdGVyKHsgY2xhc3M9Im0iLCBjb29yZD1wbGFjZVs3XSwgYXBwZWFyX2FzPSJvYmo6bHVja3N0b25lIiB9KQpkZXMub2JqZWN0KCJ3b3J0aGxlc3MgcGllY2Ugb2Ygd2hpdGUgZ2xhc3MiLHBsYWNlWzFdKQpkZXMub2JqZWN0KCJlbWVyYWxkIixwbGFjZVsxXSkKZGVzLm9iamVjdCgiYW1ldGh5c3QiLHBsYWNlWzFdKQpkZXMubW9uc3Rlcih7IGNsYXNzPSJtIiwgY29vcmQ9cGxhY2VbMV0sIGFwcGVhcl9hcz0ib2JqOmxvYWRzdG9uZSIgfSkKZGVzLm9iamVjdCgiZGlhbW9uZCIscGxhY2VbMl0pCmRlcy5vYmplY3QoIndvcnRobGVzcyBwaWVjZSBvZiBncmVlbiBnbGFzcyIscGxhY2VbMl0pCmRlcy5vYmplY3QoImFtZXRoeXN0IixwbGFjZVsyXSkKZGVzLm1vbnN0ZXIoeyBjbGFzcz0ibSIsIGNvb3JkPXBsYWNlWzJdLCBhcHBlYXJfYXM9Im9iajpmbGludCIgfSkKZGVzLm9iamVjdCgid29ydGhsZXNzIHBpZWNlIG9mIHdoaXRlIGdsYXNzIixwbGFjZVszXSkKZGVzLm9iamVjdCgiZW1lcmFsZCIscGxhY2VbM10pCmRlcy5vYmplY3QoIndvcnRobGVzcyBwaWVjZSBvZiB2aW9sZXQgZ2xhc3MiLHBsYWNlWzNdKQpkZXMubW9uc3Rlcih7IGNsYXNzPSJtIiwgY29vcmQ9cGxhY2VbM10sIGFwcGVhcl9hcz0ib2JqOnRvdWNoc3RvbmUiIH0pCmRlcy5vYmplY3QoIndvcnRobGVzcyBwaWVjZSBvZiByZWQgZ2xhc3MiLHBsYWNlWzRdKQpkZXMub2JqZWN0KCJydWJ5IixwbGFjZVs0XSkKZGVzLm9iamVjdCgibG9hZHN0b25lIixwbGFjZVs0XSkKZGVzLm9iamVjdCgicnVieSIscGxhY2VbNV0pCmRlcy5vYmplY3QoIndvcnRobGVzcyBwaWVjZSBvZiByZWQgZ2xhc3MiLHBsYWNlWzVdKQpkZXMub2JqZWN0KHsgaWQ9Imx1Y2tzdG9uZSIsIGNvb3JkPXBsYWNlWzVdLCBidWM9Im5vdC1jdXJzZWQiLCBhY2hpZXZlbWVudD0xIH0pCi0tIFJhbmRvbSBvYmplY3RzCmRlcy5vYmplY3QoIioiKQpkZXMub2JqZWN0KCIqIikKZGVzLm9iamVjdCgiKiIpCmRlcy5vYmplY3QoIioiKQpkZXMub2JqZWN0KCIqIikKZGVzLm9iamVjdCgiKiIpCmRlcy5vYmplY3QoIioiKQpkZXMub2JqZWN0KCIoIikKZGVzLm9iamVjdCgiKCIpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCi0tIFJhbmRvbSB0cmFwcwpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQotLSBSYW5kb20gbW9uc3RlcnMKZGVzLm1vbnN0ZXIoImdub21lIGtpbmciKQpkZXMubW9uc3RlcigiZ25vbWUgbG9yZCIpCmRlcy5tb25zdGVyKCJnbm9tZSBsb3JkIikKZGVzLm1vbnN0ZXIoImdub21lIGxvcmQiKQpkZXMubW9uc3RlcigiZ25vbWlzaCB3aXphcmQiKQpkZXMubW9uc3RlcigiZ25vbWlzaCB3aXphcmQiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiaG9iYml0IikKZGVzLm1vbnN0ZXIoImhvYmJpdCIpCmRlcy5tb25zdGVyKCJkd2FyZiIpCmRlcy5tb25zdGVyKCJkd2FyZiIpCmRlcy5tb25zdGVyKCJkd2FyZiIpCmRlcy5tb25zdGVyKCJoIikKLS0gTmV0SGFjayAzLjcJbWluZXMuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODMgMjAxNS8wNS8yNSAwMDoxMzowMyAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjI1ICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5LTk1IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxLTk1IGJ5IE0uIFN0ZXBoZW5zb24KLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KLS0gTWluZSBlbmQgbGV2ZWwgdmFyaWFudCAyCi0tICJHbm9tZSBLaW5nJ3MgV2luZSBDZWxsYXIiCgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiKTsKCmRlcy5tYXAoW1sKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58ICAgICAgICAgICAgICAgICAgICAgfAp8LnwtLS0tLS0tLS1TLS0uLS18Li4ufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC4ufCAgICAgICAgICAgICAgICAgICAgIHwKfC58fC0tLXwgICB8Lnx8LXwgfC4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwuLnwgICAgICAgICAgICAgICAgICAgICB8CnwufHwuLi58IHwtfC58LnwtLS0uLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58ICAgICAgICAgICAgICAgIC4uICAgfAp8Lnx8Li4ufC18Li4uLi58Li4uLnwtfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC4ufC4gICAgICAgICAgICAgICAuLiAgIHwKfC58fC4uLi4ufC1TfC4ufC4uLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwuLnwuLiAgICAgICAgICAgICAgICAgICB8CnwufHwtLXwuLnwuLnwuLnwtfC4ufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18Li58LS4gICAgICAgICAgICAgICAgICAgfAp8LnwgICB8Li58Li58Li4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC4uLiAgICAgICAgICAgICAgICAgIHwKfC58ICAgfC4ufC4ufC0tLS18Li4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwuLnwuLi4uICAgICAgICAgICAgICAgICB8CnwufC0tLXwuLnwtLXwuLi4uLi4ufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18Li58Li4uLi4gICAgICAgICAgICAgICAgfAp8Li4uLi4uLi4uLi58LS0tLS4tLXwuLi4uLi4uLi4uLi4uLi4uLi4uLi4ufCAgICAgfC4ufC4uLi4uLi4gICAgICAgICAgICAgIHwKfC0tLS0tLS0tLS0tfC4uLnwufCB8LS0tLS0tLS0tLS0tLS0tLS0tfC58LnwtLS0tLXwuLnwuLi4uLnwuLiAgICAgICAgICAgICB8CnwtLS0tLS0tLS0tLXwuey58LnwtLS0tLS0tLS0tLS0tLS0tLS0tLXwufC4uLi4uLi4uLi58Li4uLi58Li4uLiAgICAgICAgICAgfAp8Li4uLi4uLi4uLi4uLi4ufC5TLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwtLS0tLS0tLS0tLS0tLi4tLS0tLS4uLiAgICAgICAgIHwKfC4tLS0tLS0tLS0tLS0tLXwufC0tLS0tLS0tLS0tLS0tLS0tLS0tfC58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICB8CnwuLi4uLi4uLi4uLi4uLi4uLnwgICAgICAgICAgICAgICAgICAgIHwuLi4uLi4uLi4uLi4uLi4uLi4uLi58Li4uLi4uLi4gICAgfAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KXV0pOwoKaWYgcGVyY2VudCg1MCkgdGhlbgogICBkZXMudGVycmFpbih7NTUsMTR9LCItIikKICAgZGVzLnRlcnJhaW4oezU2LDE0fSwiLSIpCiAgIGRlcy50ZXJyYWluKHs2MSwxNX0sInwiKQogICBkZXMudGVycmFpbih7NTIsNX0sICJTIikKICAgZGVzLmRvb3IoImxvY2tlZCIsIDUyLDUpCmVuZAppZiBwZXJjZW50KDUwKSB0aGVuCiAgIGRlcy50ZXJyYWluKHsxOCwxfSwgInwiKQogICBkZXMudGVycmFpbihzZWxlY3Rpb24uYXJlYSg3LDEyLCA4LDEzKSwgIi4iKQplbmQKaWYgcGVyY2VudCg1MCkgdGhlbgogICBkZXMudGVycmFpbih7NDksNH0sICJ8IikKICAgZGVzLnRlcnJhaW4oezIxLDV9LCAiLiIpCmVuZAppZiBwZXJjZW50KDUwKSB0aGVuCiAgIGlmIHBlcmNlbnQoNTApIHRoZW4KICAgICAgZGVzLnRlcnJhaW4oezIyLDF9LCAifCIpCiAgIGVsc2UKICAgICAgZGVzLnRlcnJhaW4oezUwLDd9LCAiLSIpCiAgICAgIGRlcy50ZXJyYWluKHs1MSw3fSwgIi0iKQogICBlbmQKZW5kCgoKLS0gRHVuZ2VvbiBEZXNjcmlwdGlvbgpkZXMuZmVhdHVyZSgiZm91bnRhaW4iLCB7MTQsMTN9KQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDIzLDAzLDQ4LDA2KSwibGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgyMSwwNiwyMiwwNiksImxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMTQsMDQsMTQsMDQpLCJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMTAsMDUsMTQsMDgpLCJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMTAsMDksMTEsMDkpLCJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMTUsMDgsMTYsMDgpLCJ1bmxpdCIpCi0tIFNlY3JldCBkb29ycwpkZXMuZG9vcigibG9ja2VkIiwxMiwwMikKZGVzLmRvb3IoImxvY2tlZCIsMTEsMDYpCi0tIFN0YWlycwpkZXMuc3RhaXIoInVwIiwgMzYsMDQpCi0tIE5vbiBkaWdnYWJsZSB3YWxscwpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDUyLDE3KSkKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSg1MywwMCw3NCwwMCkpCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoNTMsMTcsNzQsMTcpKQpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDc0LDAxLDc0LDE2KSkKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSg1MywwNyw1NSwwNykpCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoNTMsMTQsNjEsMTQpKQotLSBUaGUgR25vbWUgS2luZydzIHdpbmUgY2VsbGFyLgotLSB0aGUgVHJlc3Bhc3NlcnMgc2lnbiBpcyBhIGxvbmctcnVubmluZyBqb2tlCmRlcy5lbmdyYXZpbmcoezEyLDAzfSwgImVuZ3JhdmUiLAoJICAgICAgIllvdSBhcmUgbm93IGVudGVyaW5nIHRoZSBHbm9tZSBLaW5nJ3Mgd2luZSBjZWxsYXIuIikKZGVzLmVuZ3JhdmluZyh7MTIsMDR9LCAiZW5ncmF2ZSIsICJUcmVzcGFzc2VycyB3aWxsIGJlIHBlcnNlY3V0ZWQhIikKZGVzLm9iamVjdCgiYm9vemUiLCAxMCwgMDcpCmRlcy5vYmplY3QoImJvb3plIiwgMTAsIDA3KQpkZXMub2JqZWN0KCIhIiwgMTAsIDA3KQpkZXMub2JqZWN0KCJib296ZSIsIDEwLCAwOCkKZGVzLm9iamVjdCgiYm9vemUiLCAxMCwgMDgpCmRlcy5vYmplY3QoIiEiLCAxMCwgMDgpCmRlcy5vYmplY3QoImJvb3plIiwgMTAsIDA5KQpkZXMub2JqZWN0KCJib296ZSIsIDEwLCAwOSkKZGVzLm9iamVjdCgib2JqZWN0IGRldGVjdGlvbiIsIDEwLCAwOSkKLS0gT2JqZWN0cwotLSBUaGUgVHJlYXN1cmUgY2hhbWJlci4uLgpkZXMub2JqZWN0KCJkaWFtb25kIiwgNjksIDA0KQpkZXMub2JqZWN0KCIqIiwgNjksIDA0KQpkZXMub2JqZWN0KCJkaWFtb25kIiwgNjksIDA0KQpkZXMub2JqZWN0KCIqIiwgNjksIDA0KQpkZXMub2JqZWN0KCJlbWVyYWxkIiwgNzAsIDA0KQpkZXMub2JqZWN0KCIqIiwgNzAsIDA0KQpkZXMub2JqZWN0KCJlbWVyYWxkIiwgNzAsIDA0KQpkZXMub2JqZWN0KCIqIiwgNzAsIDA0KQpkZXMub2JqZWN0KCJlbWVyYWxkIiwgNjksIDA1KQpkZXMub2JqZWN0KCIqIiwgNjksIDA1KQpkZXMub2JqZWN0KCJydWJ5IiwgNjksIDA1KQpkZXMub2JqZWN0KCIqIiwgNjksIDA1KQpkZXMub2JqZWN0KCJydWJ5IiwgNzAsIDA1KQpkZXMub2JqZWN0KCJhbWV0aHlzdCIsIDcwLCAwNSkKZGVzLm9iamVjdCgiKiIsIDcwLCAwNSkKZGVzLm9iamVjdCgiYW1ldGh5c3QiLCA3MCwgMDUpCmRlcy5vYmplY3QoeyBpZD0ibHVja3N0b25lIiwgeD03MCwgeT0wNSwKCSAgICAgYnVjPSJub3QtY3Vyc2VkIiwgYWNoaWV2ZW1lbnQ9MSB9KTsKLS0gU2NhdHRlcmVkIGdlbXMuLi4KZGVzLm9iamVjdCgiKiIpCmRlcy5vYmplY3QoIioiKQpkZXMub2JqZWN0KCIqIikKZGVzLm9iamVjdCgiKiIpCmRlcy5vYmplY3QoIioiKQpkZXMub2JqZWN0KCIqIikKZGVzLm9iamVjdCgiKiIpCmRlcy5vYmplY3QoIigiKQpkZXMub2JqZWN0KCIoIikKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKLS0gUmFuZG9tIHRyYXBzCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tIFJhbmRvbSBtb25zdGVycy4KZGVzLm1vbnN0ZXIoImdub21lIGtpbmciKQpkZXMubW9uc3RlcigiZ25vbWUgbG9yZCIpCmRlcy5tb25zdGVyKCJnbm9tZSBsb3JkIikKZGVzLm1vbnN0ZXIoImdub21lIGxvcmQiKQpkZXMubW9uc3RlcigiZ25vbWlzaCB3aXphcmQiKQpkZXMubW9uc3RlcigiZ25vbWlzaCB3aXphcmQiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiaG9iYml0IikKZGVzLm1vbnN0ZXIoImhvYmJpdCIpCmRlcy5tb25zdGVyKCJkd2FyZiIpCmRlcy5tb25zdGVyKCJkd2FyZiIpCmRlcy5tb25zdGVyKCJkd2FyZiIpCmRlcy5tb25zdGVyKCJoIikKLS0gTmV0SGFjayAzLjcJbWluZXMuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODMgMjAxNS8wNS8yNSAwMDoxMzowMyAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjI1ICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5LTk1IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxLTk1IGJ5IE0uIFN0ZXBoZW5zb24KLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KLS0gIkNhdGFjb21icyIgYnkgS2VsbHkgQmFpbGV5Ci0tIFJlbGllcyBvbiBzb21lIHZlcnkgc3BlY2lmaWMgYmVoYXZpb3Igb2YgTUFaRVdBTEsuCgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIi0iIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm9tbWFwIikKCmRlcy5tYXAoeyBoYWxpZ24gPSAiY2VudGVyIiwgdmFsaWduID0gImJvdHRvbSIsIG1hcCA9IFtbCiAtIC0gLSAtIC0gLSAtIC0gLSAtIC0tIC0tIC0gLSAuIC0gLSAtIC0gLSAtIC0gLSAtIC0tIC0gLSAtLSAtIC0gLSAtIC4gLSAtIHwKLS0tLS0tLi4uLS0tLS0tLS0tLi0tLS0tLS0tLS0tLi4uLS0tLS0uLS0tLS0tLS4tLS0tLS0tICAgICAtLS0tLS0tLS0tLS0tLS0tfAogLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC4gLSAtIC0gLiAtIC0gLSAtIC0gLSAtIC0gLSAtIC0tIC0gLS0gLSAuIC0gLSAtIC0gLSB8Ci0tLS0tLS0tLS0tLS4tLS0tLS0tLS0uLi4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLi0tLSAgIC0tLS0tLS0tLS0tLS0tLS0tLXwKIC0gLSAtIC0gLSAtIC0gLSAtIC0gLiAuIC0gLSAtLS0gLSAuIC0gLSAtIC0gLSAtIC0gLSAtLSAtLSAtIC0gLSAtIHwuLi4uLnwgfAotLS4tLS0tLS0tLS0tLS0tLS0uLi4uLi4uLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAtLS0tLS0tLS0tfC4uLi4uUy18CiAtIC0gLSAtIHwuLiAuLnwgLSAuLi4uLi4uIC4gLSAtIC0gLSB8Li4uLi4uLi4ufCAtIC0gLSAtLS0gLSAtIC0gLSB8Li4uLi58IHwKLS0tLS4tLS0tfC4uLi4ufC0tLS0tLS4uLi4uLi4tLS0tLS0tLXwuLi4uLi4uLi58LS0tLS0tLS0tLS0tLS0uLS0tLS0tLS0tLS0tfAogLSAtIC0gLSB8Li57Li58IC0gLSAtLi4uLiAuIC0tLSAtIC0uUy4uLi4uLi4uLlMgLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSB8Ci0tLS0tLS0tLXwuLi4uLnwtLS4tLS0uLi4tLS0tLS0tLS0tLS18Li4uLi4uLi4ufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwKIC0gLSAtIC0gfC4uIC4ufCAtIC0gLSAuIC0gLSAtIC0gLSAtIHwuLi4uLi4uLi58IC0gLS0tIC4gLSAtIC0gLSAtIC0gLSAtIC0gfAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLi4uLS0tLS0tLS4tLS0tLS0tLS0tLS0tLS0tLS0tLS0uLi4tLS0tLS0tLS0tLS0tLS0tLS18Ci0tLS4ufCAtIC0gLSAtIC0gLSAtIC0gLiAtLS0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAuIC0gLSAtLS0gLSAtIC0tLSAtIHwKLS5TLi58LS0tLS4tLS0tLS0tLi0tLS0tLS0gLS0tLS0tLS0tLi0tLS0tLS0tLS0tLS0tLS0tLi4uLS0tLS0gLS0tLS0uLS0tLS0tLQotLS0uLnwgLSAtIC0gLSAtIC0gLSAtLSAtIC0gLS0gLiAtIC0gLSAtIC0gLiAtIC0gLSAuIC0gLiAtIC0gLS0gLS0gLSAtIC0gLS0gCi0uUy4ufC0tLS0tLS0tLi0tLS4tLS0gICAgICAgLS4uLi0tLS0tLS0tLS0tLS0tLS4uLnsuLS0tLS0tLS0tICAgLS0tLS0tLS0tICAKLS18LiAtIC0gLSAtIC0gLSAtIC0tIC0gLSAtIC0tIC4gLSAtIC0gLS0tIC0gLSAtIC4gLiAtIC0gLSAtIC0tIC0gLSAtIC0gLSAtIApdXSB9KTsKCmxvY2FsIHBsYWNlID0geyB7MSwxNX0sezY4LDZ9LHsxLDEzfSB9CnNodWZmbGUocGxhY2UpCgpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDY3LDMsNzMsNykpCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMCwxMiwyLDE2KSkKZGVzLmZlYXR1cmUoImZvdW50YWluIiwgezEyLDA4fSkKZGVzLmZlYXR1cmUoImZvdW50YWluIiwgezUxLDE1fSkKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwLDAsNzUsMTYpLCJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMzgsNiw0NiwxMCksImxpdCIpCmRlcy5kb29yKCJjbG9zZWQiLDM3LDgpCmRlcy5kb29yKCJjbG9zZWQiLDQ3LDgpCmRlcy5kb29yKCJjbG9zZWQiLDczLDUpCmRlcy5kb29yKCJjbG9zZWQiLDIsMTUpCmRlcy5tYXpld2Fsayh7IHg9MzYsIHk9OCwgZGlyPSJ3ZXN0Iiwgc3RvY2tlZD1mYWxzZSB9KQpkZXMuc3RhaXIoInVwIiwgNDIsOCkKZGVzLndhbGxpZnkoKQoKLS0gT2JqZWN0cwpkZXMub2JqZWN0KCJkaWFtb25kIikKZGVzLm9iamVjdCgiKiIpCmRlcy5vYmplY3QoImRpYW1vbmQiKQpkZXMub2JqZWN0KCIqIikKZGVzLm9iamVjdCgiZW1lcmFsZCIpCmRlcy5vYmplY3QoIioiKQpkZXMub2JqZWN0KCJlbWVyYWxkIikKZGVzLm9iamVjdCgiKiIpCmRlcy5vYmplY3QoImVtZXJhbGQiKQpkZXMub2JqZWN0KCIqIikKZGVzLm9iamVjdCgicnVieSIpCmRlcy5vYmplY3QoIioiKQpkZXMub2JqZWN0KCJydWJ5IikKZGVzLm9iamVjdCgiYW1ldGh5c3QiKQpkZXMub2JqZWN0KCIqIikKZGVzLm9iamVjdCgiYW1ldGh5c3QiKQpkZXMub2JqZWN0KHsgaWQ9Imx1Y2tzdG9uZSIsIGNvb3JkPXBsYWNlWzJdLCBidWM9Im5vdC1jdXJzZWQiLCBhY2hpZXZlbWVudD0xIH0pCmRlcy5vYmplY3QoImZsaW50IixwbGFjZVsxXSkKZGVzLm9iamVjdCgiPyIpCmRlcy5vYmplY3QoIj8iKQpkZXMub2JqZWN0KCI/IikKZGVzLm9iamVjdCgiPyIpCmRlcy5vYmplY3QoIj8iKQpkZXMub2JqZWN0KCIrIikKZGVzLm9iamVjdCgiKyIpCmRlcy5vYmplY3QoIisiKQpkZXMub2JqZWN0KCIrIikKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQotLSBPbmUtdGltZSBhbm5veWFuY2UgZmFjdG9yCmRlcy50cmFwKCJsZXZlbCB0ZWxlcG9ydCIscGxhY2VbMl0pCmRlcy50cmFwKCJsZXZlbCB0ZWxlcG9ydCIscGxhY2VbMV0pCmRlcy5tb25zdGVyKCJNIikKZGVzLm1vbnN0ZXIoIk0iKQpkZXMubW9uc3RlcigiTSIpCmRlcy5tb25zdGVyKCJNIikKZGVzLm1vbnN0ZXIoIk0iKQpkZXMubW9uc3RlcigiZXR0aW4gbXVtbXkiKQpkZXMubW9uc3RlcigiViIpCmRlcy5tb25zdGVyKCJaIikKZGVzLm1vbnN0ZXIoIloiKQpkZXMubW9uc3RlcigiWiIpCmRlcy5tb25zdGVyKCJaIikKZGVzLm1vbnN0ZXIoIloiKQpkZXMubW9uc3RlcigiViIpCmRlcy5tb25zdGVyKCJlIikKZGVzLm1vbnN0ZXIoImUiKQpkZXMubW9uc3RlcigiZSIpCmRlcy5tb25zdGVyKCJlIikKLS0gTmV0SGFjayAzLjcJbWluZXMuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODMgMjAxNS8wNS8yNSAwMDoxMzowMyAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjI1ICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5LTk1IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxLTk1IGJ5IE0uIFN0ZXBoZW5zb24KLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KLS0KCi0tCVRoZSAiZmlsbCIgbGV2ZWwgZm9yIHRoZSBtaW5lcy4KLS0KLS0JVGhpcyBsZXZlbCBpcyB1c2VkIHRvIGZpbGwgb3V0IGFueSBsZXZlbHMgbm90IG9jY3VwaWVkIGJ5Ci0tCXNwZWNpZmljIGxldmVscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIiwgIm5vZmxpcCIpOwoKZGVzLmxldmVsX2luaXQoeyBzdHlsZT0ibWluZXMiLCBmZz0iLiIsIGJnPSIgIiwgc21vb3RoZWQ9dHJ1ZSAsam9pbmVkPXRydWUsIGxpdD0icmFuZG9tIiwgd2FsbGVkPXRydWUgfSkKCi0tCmRlcy5zdGFpcigidXAiKQpkZXMuc3RhaXIoImRvd24iKQotLQpkZXMub2JqZWN0KCIqIikKZGVzLm9iamVjdCgiKiIpCmRlcy5vYmplY3QoIioiKQpkZXMub2JqZWN0KCIoIikKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKLS0KZGVzLm1vbnN0ZXIoImdub21lIikKZGVzLm1vbnN0ZXIoImdub21lIikKZGVzLm1vbnN0ZXIoImdub21lIikKZGVzLm1vbnN0ZXIoImdub21lIikKZGVzLm1vbnN0ZXIoImdub21lIikKZGVzLm1vbnN0ZXIoImdub21lIikKZGVzLm1vbnN0ZXIoImdub21lIikKZGVzLm1vbnN0ZXIoImdub21lIGxvcmQiKQpkZXMubW9uc3RlcigiZHdhcmYiKQpkZXMubW9uc3RlcigiZHdhcmYiKQpkZXMubW9uc3RlcigiRyIpCmRlcy5tb25zdGVyKCJHIikKZGVzLm1vbnN0ZXIoImgiKQotLQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQotLSBOZXRIYWNrIDMuNwltaW5lcy5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4MyAyMDE1LzA1LzI1IDAwOjEzOjAzICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMjUgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODktOTUgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEtOTUgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQotLSBBIHRyYWdpYyBhY2NpZGVudCBoYXMgb2NjdXJyZWQgaW4gRnJvbnRpZXIgVG93bi4uLi4KLS0KLS0gTWluZXRvd24gdmFyaWFudCAxCi0tIE9yY2lzaCBUb3duIC0gYSB2YXJpYW50IG9mIEZyb250aWVyIFRvd24gdGhhdCBoYXMgYmVlbgotLSBvdmVycnVuIGJ5IG9yY3MuICBOb3RlIHRoZSBiYXJyaWNhZGVzIChpcm9uIGJhcnMpLgoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiKQoKZGVzLmxldmVsX2luaXQoeyBzdHlsZT0ibWluZXMiLCBmZz0iLiIsIGJnPSIgIiwgc21vb3RoZWQ9dHJ1ZSAsam9pbmVkPXRydWUsIGxpdD0icmFuZG9tIiwgd2FsbGVkPXRydWUgfSkKCmRlcy5tYXAoW1sKLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLS0tLS0tLS0tLS0tLS0tLUYtLS0tLS0tLS0tLS0tLS0tLS0uCi58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC4KLnwuLS0tLS0tLS0tLS0tLS4uLi4uLi0tLS0tLS0tLS0tLS58LgoufC58Li4ufC4uLnwuLi58Li4uLi4ufC4ufC4uLnwuLi58LnwuCi5GLnwuLi58Li4ufC4uLnwuLi4uLi58Li58Li4ufC4uLnwufC4KLnwufC4uLnwuLi58Li4ufC4uLi4uLnwuLnwuLi58Li4ufC5GLgoufC58Li4ufC4uLnwtLS0tLi4uLi4uLS0tLS0tLS0tLS0tLnwuCi58Li0tLS0tLS0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC4KLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58LgoufC4tLS0tLS0tLS0uLi4uLi0tLi4uLS0uLi4uLi4uLi4uLnwuCi58LnwuLi58Li4ufC0tLS0ufC4uLi4ufC4tLS0tLS0tLS0ufC4KLnwufC4uLnwuLi58Li4ufC58Li4uLi58LnwuLnwuLi4ufC58LgoufC58Li4ufC4uLnwuLi58LnwuLi4uLnwufC4ufC4uLi58LnwuCi58LnwuLi58Li4ufC4uLnwufC4uLi4ufC58Li58Li4uLnwufC4KLnwuLS0tLS0tLS0tLS0tLS4tLS0tLS0tLi0tLS0tLS0tLS58LgoufC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLkYuCi4tLS0tLS0tLS0tLUYtLS0tLS0tLS0tLS1GLS0tLS0tLS0tLS4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgpdXSk7CgotLSBEb24ndCBsZXQgdGhlIHBsYXllciBmYWxsIGludG8gaGlzIGxpa2VseSBkZWF0aDsgdXNlZCB0byBleHBsaWNpdGx5IGV4Y2x1ZGUKLS0gdGhlIHRvd24sIGJ1dCB0aGF0IG1lYW50IHRoYXQgeW91IGNvdWxkbid0IHRlbGVwb3J0IG91dCBhcyB3ZWxsIGFzIG5vdCBpbi4KZGVzLnRlbGVwb3J0X3JlZ2lvbih7IHJlZ2lvbj17MDEsMDEsMjAsMTl9LCByZWdpb25faXNsZXY9MSB9KQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAxLDAxLDM1LDE3KSwgImxpdCIpCmRlcy5sZXZyZWdpb24oeyB0eXBlPSJzdGFpci11cCIsIHJlZ2lvbj17MDEsMDMsMjAsMTl9LCByZWdpb25faXNsZXY9MSwKCQlleGNsdWRlPXswMCwwMSwzNiwxN30gfSk7CmRlcy5sZXZyZWdpb24oeyB0eXBlPSJzdGFpci1kb3duIiwgcmVnaW9uPXs2MSwwMyw3NSwxOX0sIHJlZ2lvbl9pc2xldj0xLAoJCWV4Y2x1ZGU9ezAwLDAxLDM2LDE3fSB9KQoKLS0gc2hhbWUgd2UgY2FuJ3QgbWFrZSBwb2xsdXRlZCBmb3VudGFpbnMKZGVzLmZlYXR1cmUoImZvdW50YWluIiwxNiwwOSkKZGVzLmZlYXR1cmUoImZvdW50YWluIiwyNSwwOSkKCi0tIHRoZSBhbHRhcidzIGRlZmlsZWQ7IHVzZWZ1bCBmb3IgQlVDIGJ1dCBuZXZlciBjb2FsaWduZWQKZGVzLmFsdGFyKHsgeD0yMCx5PTEzLGFsaWduPSJub2FsaWduIiwgdHlwZT0ic2hyaW5lIiB9KQoKLS0gc2V0IHVwIHRoZSBzaG9wIGRvb3JzOyBjb3VsZCBiZSBicm9rZW4gZG93bgpkZXMuZG9vcigicmFuZG9tIiw1LDgpCmRlcy5kb29yKCJyYW5kb20iLDksOCkKZGVzLmRvb3IoInJhbmRvbSIsMTMsNykKZGVzLmRvb3IoInJhbmRvbSIsMjIsNSkKZGVzLmRvb3IoInJhbmRvbSIsMjcsNykKZGVzLmRvb3IoInJhbmRvbSIsMzEsNykKZGVzLmRvb3IoInJhbmRvbSIsNSwxMCkKZGVzLmRvb3IoInJhbmRvbSIsOSwxMCkKZGVzLmRvb3IoInJhbmRvbSIsMTUsMTMpCmRlcy5kb29yKCJyYW5kb20iLDI1LDEzKQpkZXMuZG9vcigicmFuZG9tIiwzMSwxMSkKCi0tIGtub2NrIGEgZmV3IGhvbGVzIGluIHRoZSBzaG9wIGludGVyaW9yIHdhbGxzCmRlcy5yZXBsYWNlX3RlcnJhaW4oeyByZWdpb249ezA3LDA0LDExLDA2fSwgZnJvbXRlcnJhaW49InwiLCB0b3RlcnJhaW49Ii4iLCBjaGFuY2U9MTggfSkKZGVzLnJlcGxhY2VfdGVycmFpbih7IHJlZ2lvbj17MjUsMDQsMjksMDZ9LCBmcm9tdGVycmFpbj0ifCIsIHRvdGVycmFpbj0iLiIsIGNoYW5jZT0xOCB9KQpkZXMucmVwbGFjZV90ZXJyYWluKHsgcmVnaW9uPXswNywxMiwxMSwxNH0sIGZyb210ZXJyYWluPSJ8IiwgdG90ZXJyYWluPSIuIiwgY2hhbmNlPTE4IH0pCmRlcy5yZXBsYWNlX3RlcnJhaW4oeyByZWdpb249ezI4LDEyLDI4LDE0fSwgZnJvbXRlcnJhaW49InwiLCB0b3RlcnJhaW49Ii4iLCBjaGFuY2U9MzMgfSkKCi0tIE9uZSBzcG90IGVhY2ggaW4gbW9zdCBzaG9wcy4uLgpsb2NhbCBwbGFjZSA9IHsgezA1LDA0fSx7MDksMDV9LHsxMywwNH0sezI2LDA0fSx7MzEsMDV9LHszMCwxNH0sezA1LDE0fSx7MTAsMTN9LHsyNiwxNH0sezI3LDEzfSB9CnNodWZmbGUocGxhY2UpOwoKLS0gc2NhdHRlciBzb21lIGJvZGllcwpkZXMub2JqZWN0KHsgaWQgPSAiY29ycHNlIiwgeD0yMCx5PTEyLCBtb250eXBlPSJhbGlnbmVkIHByaWVzdCIgfSkKZGVzLm9iamVjdCh7IGlkID0gImNvcnBzZSIsIGNvb3JkID0gcGxhY2VbMV0sIG1vbnR5cGU9InNob3BrZWVwZXIiIH0pCmRlcy5vYmplY3QoeyBpZCA9ICJjb3Jwc2UiLCBjb29yZCA9IHBsYWNlWzJdLCBtb250eXBlPSJzaG9wa2VlcGVyIiB9KQpkZXMub2JqZWN0KHsgaWQgPSAiY29ycHNlIiwgY29vcmQgPSBwbGFjZVszXSwgbW9udHlwZT0ic2hvcGtlZXBlciIgfSkKZGVzLm9iamVjdCh7IGlkID0gImNvcnBzZSIsIGNvb3JkID0gcGxhY2VbNF0sIG1vbnR5cGU9InNob3BrZWVwZXIiIH0pCmRlcy5vYmplY3QoeyBpZCA9ICJjb3Jwc2UiLCBjb29yZCA9IHBsYWNlWzVdLCBtb250eXBlPSJzaG9wa2VlcGVyIiB9KQpkZXMub2JqZWN0KHsgaWQgPSAiY29ycHNlIiwgbW9udHlwZT0id2F0Y2htYW4iIH0pCmRlcy5vYmplY3QoeyBpZCA9ICJjb3Jwc2UiLCBtb250eXBlPSJ3YXRjaG1hbiIgfSkKZGVzLm9iamVjdCh7IGlkID0gImNvcnBzZSIsIG1vbnR5cGU9IndhdGNobWFuIiB9KQpkZXMub2JqZWN0KHsgaWQgPSAiY29ycHNlIiwgbW9udHlwZT0id2F0Y2htYW4iIH0pCmRlcy5vYmplY3QoeyBpZCA9ICJjb3Jwc2UiLCBtb250eXBlPSJ3YXRjaCBjYXB0YWluIiB9KQoKLS0gUnViYmxlIQpmb3IgaT0xLDkgKyBtYXRoLnJhbmRvbSgyIC0gMSwyKjUpIGRvCiAgaWYgcGVyY2VudCg5MCkgdGhlbgogICAgZGVzLm9iamVjdCgiYm91bGRlciIpCiAgZW5kCiAgZGVzLm9iamVjdCgicm9jayIpCmVuZAoKLS0gR3VhcmFudGVlIDcgY2FuZGxlcyBzaW5jZSB3ZSB3b24ndCBoYXZlIEl6Y2hhayBhdmFpbGFibGUKZGVzLm9iamVjdCh7IGlkID0gIndheCBjYW5kbGUiLCBjb29yZCA9IHBsYWNlWzRdLCBxdWFudGl0eSA9IG1hdGgucmFuZG9tKDEsMikgfSkKCmRlcy5vYmplY3QoeyBpZCA9ICJ3YXggY2FuZGxlIiwgY29vcmQgPSBwbGFjZVsxXSwgcXVhbnRpdHkgPSBtYXRoLnJhbmRvbSgyLDQpIH0pCmRlcy5vYmplY3QoeyBpZCA9ICJ3YXggY2FuZGxlIiwgY29vcmQgPSBwbGFjZVsyXSwgcXVhbnRpdHkgPSBtYXRoLnJhbmRvbSgxLDIpIH0pCmRlcy5vYmplY3QoeyBpZCA9ICJ0YWxsb3cgY2FuZGxlIiwgY29vcmQgPSBwbGFjZVszXSwgcXVhbnRpdHkgPSBtYXRoLnJhbmRvbSgxLDMpIH0pCmRlcy5vYmplY3QoeyBpZCA9ICJ0YWxsb3cgY2FuZGxlIiwgY29vcmQgPSBwbGFjZVsyXSwgcXVhbnRpdHkgPSBtYXRoLnJhbmRvbSgxLDIpIH0pCmRlcy5vYmplY3QoeyBpZCA9ICJ0YWxsb3cgY2FuZGxlIiwgY29vcmQgPSBwbGFjZVs0XSwgcXVhbnRpdHkgPSBtYXRoLnJhbmRvbSgxLDIpIH0pCgotLSBnbyBhaGVhZCBhbmQgbGVhdmUgYSBsYW1wIG5leHQgdG8gb25lIGNvcnBzZSB0byBiZSBzdWdnZXN0aXZlCi0tIGFuZCBzb21lIGVtcHR5IHdhbmRzLi4uCmRlcy5vYmplY3QoIm9pbCBsYW1wIixwbGFjZVsyXSkKZGVzLm9iamVjdCh7IGlkID0gInN0cmlraW5nIiwgY29vcmQgPSBwbGFjZVsxXSwgYnVjPSJ1bmN1cnNlZCIsIHNwZT0wIH0pCmRlcy5vYmplY3QoeyBpZCA9ICJzdHJpa2luZyIsIGNvb3JkID0gcGxhY2VbM10sIGJ1Yz0idW5jdXJzZWQiLCBzcGU9MCB9KQpkZXMub2JqZWN0KHsgaWQgPSAic3RyaWtpbmciLCBjb29yZCA9IHBsYWNlWzRdLCBidWM9InVuY3Vyc2VkIiwgc3BlPTAgfSkKZGVzLm9iamVjdCh7IGlkID0gIm1hZ2ljIG1pc3NpbGUiLCBjb29yZCA9IHBsYWNlWzRdLCBidWM9InVuY3Vyc2VkIiwgc3BlPTAgfSkKZGVzLm9iamVjdCh7IGlkID0gIm1hZ2ljIG1pc3NpbGUiLCBjb29yZCA9IHBsYWNlWzVdLCBidWM9InVuY3Vyc2VkIiwgc3BlPTAgfSkKCi0tIHRoZSBPcmNpc2ggQXJteQoKbG9jYWwgaW5zaWRlID0gc2VsZWN0aW9uLmZsb29kZmlsbCgxOCw4KQpsb2NhbCBuZWFyX3RlbXBsZSA9IHNlbGVjdGlvbi5hcmVhKDE3LDgsIDIzLDE0KSAmIGluc2lkZQoKZm9yIGk9MSw1ICsgbWF0aC5yYW5kb20oMSAtIDEsMSoxMCkgZG8KICAgaWYgcGVyY2VudCg1MCkgdGhlbgogICAgICBkZXMubW9uc3Rlcih7IGlkID0gIm9yYy1jYXB0YWluIiwgY29vcmQgPSB7IGluc2lkZTpybmRjb29yZCgxKSB9LCBwZWFjZWZ1bD0wIH0pOwogICBlbHNlCiAgICAgIGlmIHBlcmNlbnQoODApIHRoZW4KICAgICAgICAgZGVzLm1vbnN0ZXIoeyBpZCA9ICJVcnVrLWhhaSIsIGNvb3JkID0geyBpbnNpZGU6cm5kY29vcmQoMSkgfSwgcGVhY2VmdWw9MCB9KQogICAgICBlbHNlCiAgICAgICAgIGRlcy5tb25zdGVyKHsgaWQgPSAiTW9yZG9yIG9yYyIsIGNvb3JkID0geyBpbnNpZGU6cm5kY29vcmQoMSkgfSwgcGVhY2VmdWw9MCB9KQogICAgICBlbmQKICAgZW5kCmVuZAotLSBzaGFtYW5zIGNhbiBiZSBoYW5naW5nIG91dCBpbi9uZWFyIHRoZSB0ZW1wbGUKZm9yIGk9MSxtYXRoLnJhbmRvbSgyIC0gMSwyKjMpIGRvCiAgIGRlcy5tb25zdGVyKHsgaWQgPSAib3JjIHNoYW1hbiIsIGNvb3JkID0geyBuZWFyX3RlbXBsZTpybmRjb29yZCgwKSB9LCBwZWFjZWZ1bD0wIH0pOwplbmQKLS0gdGhlc2UgYXJlIG5vdCBzdWNoIGEgYmlnIGRlYWwKLS0gdG8gcnVuIGludG8gb3V0c2lkZSB0aGUgYmFycwpmb3IgaT0xLDkgKyBtYXRoLnJhbmRvbSgyIC0gMSwyKjUpIGRvCiAgIGlmIHBlcmNlbnQoOTApIHRoZW4KICAgICAgZGVzLm1vbnN0ZXIoeyBpZCA9ICJoaWxsIG9yYyIsIHBlYWNlZnVsID0gMCB9KQogICBlbHNlCiAgICAgIGRlcy5tb25zdGVyKHsgaWQgPSAiZ29ibGluIiwgcGVhY2VmdWwgPSAwIH0pCiAgIGVuZAplbmQKCi0tIEhhY2sgdG8gZm9yY2UgZnVsbC1sZXZlbCB3YWxsaWZpY2F0aW9uCgpkZXMud2FsbGlmeSgpCi0tIE5ldEhhY2sgMy43CW1pbmVzLmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzgzIDIwMTUvMDUvMjUgMDA6MTM6MDMgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS4yNSAkCi0tCUNvcHlyaWdodCAoYykgMTk4OS05NSBieSBKZWFuLUNocmlzdG9waGUgQ29sbGV0Ci0tCUNvcHlyaWdodCAoYykgMTk5MS05NSBieSBNLiBTdGVwaGVuc29uCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCi0tIE1pbmV0b3duIHZhcmlhbnQgMgotLSAiVG93biBTcXVhcmUiCgpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLCBsaXQ9MSwgeD0zLCB5PTMsCiAgICAgICAgICAgeGFsaWduPSJjZW50ZXIiLCB5YWxpZ249ImNlbnRlciIsIHc9MzEsIGg9MTUsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLmZlYXR1cmUoImZvdW50YWluIiwgMTcsIDUpCiAgICAgICAgICAgICAgZGVzLmZlYXR1cmUoImZvdW50YWluIiwgMTMsIDgpCgogICAgICAgICAgICAgIGlmIHBlcmNlbnQoNzUpIHRoZW4KICAgICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLCB4PTIseT0wLCB3PTIsaD0yLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlPSJjbG9zZWQiLCB3YWxsPSJ3ZXN0IiB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgaWYgcGVyY2VudCg3NSkgdGhlbgogICAgICAgICAgICAgICAgIGRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsIGxpdD0wLCB4PTUseT0wLCB3PTIsaD0yLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlPSJjbG9zZWQiLCB3YWxsPSJzb3V0aCIgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgIGlmIHBlcmNlbnQoNzUpIHRoZW4KICAgICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLCB4PTgseT0wLCB3PTIsaD0yLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlPSJjbG9zZWQiLCB3YWxsPSJlYXN0IiB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgaWYgcGVyY2VudCg3NSkgdGhlbgogICAgICAgICAgICAgICAgIGRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsIGxpdD0xLCB4PTE2LHk9MCwgdz0yLGg9MiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZT0iY2xvc2VkIiwgd2FsbD0id2VzdCIgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgIGlmIHBlcmNlbnQoNzUpIHRoZW4KICAgICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLCBsaXQ9MCwgeD0xOSx5PTAsIHc9MixoPTIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5kb29yKHsgc3RhdGU9ImNsb3NlZCIsIHdhbGw9InNvdXRoIiB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgaWYgcGVyY2VudCg3NSkgdGhlbgogICAgICAgICAgICAgICAgIGRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsIHg9MjIseT0wLCB3PTIsaD0yLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlPSJjbG9zZWQiLCB3YWxsPSJzb3V0aCIgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJnbm9tZSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICBpZiBwZXJjZW50KDc1KSB0aGVuCiAgICAgICAgICAgICAgICAgZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwgbGl0PTAsIHg9MjUseT0wLCB3PTIsaD0yLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlPSJjbG9zZWQiLCB3YWxsPSJlYXN0IiB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgaWYgcGVyY2VudCg3NSkgdGhlbgogICAgICAgICAgICAgICAgIGRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsIGxpdD0xLCB4PTIseT01LCB3PTIsaD0yLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlPSJjbG9zZWQiLCB3YWxsPSJub3J0aCIgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgIGlmIHBlcmNlbnQoNzUpIHRoZW4KICAgICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLCBsaXQ9MSwgeD01LHk9NSwgdz0yLGg9MiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZT0iY2xvc2VkIiwgd2FsbD0ic291dGgiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICBpZiBwZXJjZW50KDc1KSB0aGVuCiAgICAgICAgICAgICAgICAgZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwgeD04LHk9NSwgdz0yLGg9MiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZT0ibG9ja2VkIiwgd2FsbD0ibm9ydGgiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMubW9uc3RlcigiZ25vbWUiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgZGVzLnJvb20oeyB0eXBlPSJzaG9wIiwgY2hhbmNlPTkwLCBsaXQ9MSwgeD0yLHk9MTAsIHc9NCxoPTMsCiAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5kb29yKHsgc3RhdGU9ImNsb3NlZCIsIHdhbGw9Indlc3QiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgZGVzLnJvb20oeyB0eXBlID0gInRvb2wgc2hvcCIsIGNoYW5jZT05MCwgbGl0PTEsIHg9MjMseT0xMCwgdz00LGg9MywKICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZT0iY2xvc2VkIiwgd2FsbD0iZWFzdCIgfSkKICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGUgPSBtb25rZm9vZHNob3AoKSwgY2hhbmNlPTkwLCBsaXQ9MSwgeD0yNCx5PTUsIHc9MyxoPTQsCiAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5kb29yKHsgc3RhdGU9ImNsb3NlZCIsIHdhbGw9Im5vcnRoIiB9KQogICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGRlcy5yb29tKHsgdHlwZSA9ICJjYW5kbGUgc2hvcCIsIGxpdD0xLCB4PTExLHk9MTAsIHc9NCxoPTMsCiAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5kb29yKHsgc3RhdGU9ImNsb3NlZCIsIHdhbGw9ImVhc3QiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgaWYgcGVyY2VudCg3NSkgdGhlbgogICAgICAgICAgICAgICAgIGRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsIGxpdD0wLCB4PTcseT0xMCwgdz0zLGg9MywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZT0ibG9ja2VkIiwgd2FsbD0ibm9ydGgiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMubW9uc3RlcigiZ25vbWUiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgIGRlcy5yb29tKHsgdHlwZSA9ICJ0ZW1wbGUiLCBsaXQ9MSwgeD0xOSx5PTUsIHc9NCxoPTQsCiAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5kb29yKHsgc3RhdGU9ImNsb3NlZCIsIHdhbGw9Im5vcnRoIiB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmFsdGFyKHsgeD0wMiwgeT0wMiwgYWxpZ249YWxpZ25bMV0sdHlwZT0ic2hyaW5lIiB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoImdub21pc2ggd2l6YXJkIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJnbm9taXNoIHdpemFyZCIpCiAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgaWYgcGVyY2VudCg3NSkgdGhlbgogICAgICAgICAgICAgICAgIGRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsIGxpdD0xLCB4PTE4LHk9MTAsIHc9NCxoPTMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5kb29yKHsgc3RhdGU9ImxvY2tlZCIsIHdhbGw9Indlc3QiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMubW9uc3RlcigiZ25vbWUgbG9yZCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgLS0gVGhlIFRvd24gV2F0Y2gKICAgICAgICAgICAgICBkZXMubW9uc3Rlcih7IGlkID0gIndhdGNobWFuIiwgcGVhY2VmdWwgPSAxIH0pCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoeyBpZCA9ICJ3YXRjaG1hbiIsIHBlYWNlZnVsID0gMSB9KQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKHsgaWQgPSAid2F0Y2htYW4iLCBwZWFjZWZ1bCA9IDEgfSkKICAgICAgICAgICAgICBkZXMubW9uc3Rlcih7IGlkID0gIndhdGNobWFuIiwgcGVhY2VmdWwgPSAxIH0pCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoeyBpZCA9ICJ3YXRjaCBjYXB0YWluIiwgcGVhY2VmdWwgPSAxIH0pCiAgICAgICAgICAgZW5kCn0pOwoKZGVzLnJvb20oeyBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMuc3RhaXIoInVwIikKICAgICAgICAgICAgICAgICAgICAgIGVuZAp9KTsKCmRlcy5yb29tKHsgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLnN0YWlyKCJkb3duIikKICAgICAgICAgICAgICBkZXMudHJhcCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoImdub21lIikKICAgICAgICAgICAgICBkZXMubW9uc3RlcigiZ25vbWUiKQogICAgICAgICAgICAgICAgICAgICAgZW5kCn0pOwoKZGVzLnJvb20oeyBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMubW9uc3RlcigiZHdhcmYiKQogICAgICAgICAgICAgICAgICAgICAgZW5kCn0pOwoKZGVzLnJvb20oeyBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMudHJhcCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoImdub21lIikKICAgICAgICAgICAgICAgICAgICAgIGVuZAp9KTsKCmRlcy5yYW5kb21fY29ycmlkb3JzKCkKCi0tIE5ldEhhY2sgMy43CW1pbmVzLmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzgzIDIwMTUvMDUvMjUgMDA6MTM6MDMgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS4yNSAkCi0tCUNvcHlyaWdodCAoYykgMTk4OS05NSBieSBKZWFuLUNocmlzdG9waGUgQ29sbGV0Ci0tCUNvcHlyaWdodCAoYykgMTk5MS05NSBieSBNLiBTdGVwaGVuc29uCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCi0tIE1pbmV0b3duIHZhcmlhbnQgMyBieSBLZWxseSBCYWlsZXkKLS0gIkFsbGV5IFRvd24iCgpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLGxpdD0xLHg9Myx5PTMsCiAgICAgICAgICAgeGFsaWduPSJjZW50ZXIiLHlhbGlnbj0iY2VudGVyIix3PTMxLGg9MTUsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLmZlYXR1cmUoImZvdW50YWluIiwgMDEsMDYpCiAgICAgICAgICAgICAgZGVzLmZlYXR1cmUoImZvdW50YWluIiwgMjksMTMpCgogIGRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIseD0yLHk9Mix3PTIsaD0yLAogICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlPSJjbG9zZWQiLCB3YWxsPSJzb3V0aCIgfSkKICAgICAgICAgICAgIGVuZAogIH0pOwoKICBkZXMucm9vbSh7IHR5cGUgPSAidG9vbCBzaG9wIiwgY2hhbmNlPTMwLCBsaXQ9MSx4PTUseT0zLHc9MixoPTMsCiAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGRlcy5kb29yKHsgc3RhdGU9ImNsb3NlZCIsIHdhbGw9InNvdXRoIiB9KQogICAgICAgICAgICAgZW5kCiAgfSkKCiAgZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5Iix4PTIseT0xMCx3PTIsaD0zLAogICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlID0ibG9ja2VkIiwgd2FsbD0ibm9ydGgiIH0pCiAgICAgICAgICAgICAgICBkZXMubW9uc3RlcigiRyIpCiAgICAgICAgICAgICBlbmQKICB9KQoKICBkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLCB4PTUseT05LHc9MixoPTIsCiAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGRlcy5kb29yKHsgc3RhdGU9ImNsb3NlZCIsIHdhbGw9Im5vcnRoIiB9KQogICAgICAgICAgICAgZW5kCiAgfSkKCiAgZGVzLnJvb20oeyB0eXBlID0gInRlbXBsZSIsbGl0PTEseD0xMCx5PTIsdz0zLGg9NCwKICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZT0iY2xvc2VkIiwgd2FsbD0iZWFzdCIgfSkKICAgICAgICAgICAgICAgIGRlcy5hbHRhcih7IHg9MSwgeT0xLCBhbGlnbiA9IGFsaWduWzFdLCB0eXBlPSJzaHJpbmUiIH0pCiAgICAgICAgICAgICAgICBkZXMubW9uc3RlcigiZ25vbWlzaCB3aXphcmQiKQogICAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoImdub21pc2ggd2l6YXJkIikKICAgICAgICAgICAgIGVuZAogIH0pCgogIGRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIseD0xMSx5PTcsdz0yLGg9MiwKICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZT0iY2xvc2VkIiwgd2FsbD0id2VzdCIgfSkKICAgICAgICAgICAgIGVuZAogIH0pCgogIGRlcy5yb29tKHsgdHlwZSA9ICJzaG9wIixsaXQ9MSx4PTEwLHk9MTAsdz0zLGg9MywKICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZT0iY2xvc2VkIiwgd2FsbD0id2VzdCIgfSkKICAgICAgICAgICAgIGVuZAogIH0pCgogIGRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIscmFuZG9tLHg9MTQseT04LHc9MixoPTIsCiAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGRlcy5kb29yKHsgc3RhdGU9ImxvY2tlZCIsIHdhbGw9Im5vcnRoIiB9KQogICAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoIkciKQogICAgICAgICAgICAgZW5kCiAgfSkKCiAgZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IixyYW5kb20seD0xNCx5PTExLHc9MixoPTIsCiAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGRlcy5kb29yKHsgc3RhdGU9ImNsb3NlZCIsIHdhbGw9InNvdXRoIiB9KQogICAgICAgICAgICAgZW5kCiAgfSkKCiAgZGVzLnJvb20oeyB0eXBlID0gInRvb2wgc2hvcCIsIGNoYW5jZT00MCxsaXQ9MSx4PTE3LHk9MTAsdz0zLGg9MywKICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZT0iY2xvc2VkIiwgd2FsbD0ibm9ydGgiIH0pCiAgICAgICAgICAgICBlbmQKICB9KQoKICBkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLHg9MjEseT0xMSx3PTIsaD0yLAogICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlPSJsb2NrZWQiLCB3YWxsPSJlYXN0IiB9KQogICAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoIkciKQogICAgICAgICAgICAgZW5kCiAgfSkKCiAgZGVzLnJvb20oeyB0eXBlID0gbW9ua2Zvb2RzaG9wKCksIGNoYW5jZT05MCxsaXQ9MSx4PTI2LHk9OCx3PTMsaD0yLAogICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlPSJjbG9zZWQiLCB3YWxsPSJ3ZXN0IiB9KQogICAgICAgICAgICAgZW5kCiAgfSkKCiAgZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IixyYW5kb20seD0xNix5PTIsdz0yLGg9MiwKICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZT0iY2xvc2VkIiwgd2FsbD0id2VzdCIgfSkKICAgICAgICAgICAgIGVuZAogIH0pCgogIGRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIscmFuZG9tLHg9MTkseT0yLHc9MixoPTIsCiAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGRlcy5kb29yKHsgc3RhdGU9ImNsb3NlZCIsIHdhbGw9Im5vcnRoIiB9KQogICAgICAgICAgICAgZW5kCiAgfSkKCiAgZGVzLnJvb20oeyB0eXBlID0gIndhbmQgc2hvcCIsIGNoYW5jZT0zMCxsaXQ9MSx4PTE5LHk9NSx3PTMsaD0yLAogICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlPSJjbG9zZWQiLCB3YWxsPSJ3ZXN0IiB9KQogICAgICAgICAgICAgZW5kCiAgfSkKCiAgZGVzLnJvb20oeyB0eXBlID0gImNhbmRsZSBzaG9wIixsaXQ9MSx4PTI1LHk9Mix3PTMsaD0zLAogICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlPSJjbG9zZWQiLCB3YWxsPSJzb3V0aCIgfSkKICAgICAgICAgICAgIGVuZAogIH0pCgogIGRlcy5tb25zdGVyKHsgaWQgPSAid2F0Y2htYW4iLCBwZWFjZWZ1bCA9IDEgfSkKICBkZXMubW9uc3Rlcih7IGlkID0gIndhdGNobWFuIiwgcGVhY2VmdWwgPSAxIH0pCiAgZGVzLm1vbnN0ZXIoeyBpZCA9ICJ3YXRjaG1hbiIsIHBlYWNlZnVsID0gMSB9KQogIGRlcy5tb25zdGVyKHsgaWQgPSAid2F0Y2htYW4iLCBwZWFjZWZ1bCA9IDEgfSkKICBkZXMubW9uc3Rlcih7IGlkID0gIndhdGNoIGNhcHRhaW4iLCBwZWFjZWZ1bCA9IDEgfSkKCiAgICAgICAgICAgZW5kCn0pCgpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLCBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMuc3RhaXIoInVwIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5zdGFpcigiZG93biIpCiAgICAgICAgICAgICAgZGVzLnRyYXAoKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJnbm9tZSIpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoImdub21lIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJkd2FyZiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAp9KQoKZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLnRyYXAoKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJnbm9tZSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCn0pCgpkZXMucmFuZG9tX2NvcnJpZG9ycygpCi0tIE5ldEhhY2sgMy43CW1pbmVzLmRlcwkkTkhEVC1EYXRlOiAxNTQ4NjMxNzA0IDIwMTkvMDEvMjcgMjM6Mjg6MjQgJCAgJE5IRFQtQnJhbmNoOiBOZXRIYWNrLTMuNi4yLWJldGEwMSAkOiROSERULVJldmlzaW9uOiAxLjMwICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5LTk1IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxLTk1IGJ5IE0uIFN0ZXBoZW5zb24KLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KLS0gTWluZXRvd24gdmFyaWFudCA0IGJ5IEtlbGx5IEJhaWxleQotLSAiQ29sbGVnZSBUb3duIgoKZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwgbGl0PTEsIHg9Myx5PTMsCiAgICAgICAgICAgeGFsaWduPSJjZW50ZXIiLCB5YWxpZ249ImNlbnRlciIsIHc9MzAsIGg9MTUsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLmZlYXR1cmUoImZvdW50YWluIiwgMDgsMDcpCiAgICAgICAgICAgICAgZGVzLmZlYXR1cmUoImZvdW50YWluIiwgMTgsMDcpCgogICAgICAgICAgICAgIGRlcy5yb29tKHsgdHlwZSA9ICJib29rIHNob3AiLCBsaXQ9MSwgeD00LCB5PTIsIHc9MywgaD0zLAogICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlID0gImNsb3NlZCIsIHdhbGw9InNvdXRoIiB9KQogICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgfSkKCiAgICAgICAgICAgICAgZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwgeD04LCB5PTIsIHc9MiwgaD0yLAogICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlID0gImNsb3NlZCIsIHdhbGw9InNvdXRoIiB9KQogICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgfSkKCiAgICAgICAgICAgICAgZGVzLnJvb20oeyB0eXBlID0gInRlbXBsZSIsIGxpdD0xLCB4PTExLCB5PTMsIHc9NSwgaD00LAogICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlID0gImNsb3NlZCIsIHdhbGw9InNvdXRoIiB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmFsdGFyKHsgeD0yLHk9MSxhbGlnbj1hbGlnblsxXSwgdHlwZT0ic2hyaW5lIiB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoImdub21pc2ggd2l6YXJkIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJnbm9taXNoIHdpemFyZCIpCiAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICB9KQoKICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLCB4PTE5LCB5PTIsIHc9MiwgaD0yLAogICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlID0gImNsb3NlZCIsIHdhbGw9InNvdXRoIiB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoIkciKQogICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgfSkKCiAgICAgICAgICAgICAgZGVzLnJvb20oeyB0eXBlID0gImNhbmRsZSBzaG9wIiwgbGl0PTEsIHg9MjIsIHk9Miwgdz0zLCBoPTMsCiAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5kb29yKHsgc3RhdGUgPSAiY2xvc2VkIiwgd2FsbD0ic291dGgiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICB9KQoKICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLCB4PTI2LCB5PTIsIHc9MiwgaD0yLAogICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlID0gImxvY2tlZCIsIHdhbGw9ImVhc3QiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMubW9uc3RlcigiRyIpCiAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICB9KQoKICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGUgPSAidG9vbCBzaG9wIiwgY2hhbmNlPTkwLCBsaXQ9MSwgeD00LHk9MTAsIHc9MyxoPTMsCiAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5kb29yKHsgc3RhdGUgPSAiY2xvc2VkIiwgd2FsbD0ibm9ydGgiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICB9KQoKICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLCB4PTgsIHk9MTEsIHc9MiwgaD0yLAogICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlID0gImxvY2tlZCIsIHdhbGw9InNvdXRoIiB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoImtvYm9sZCBzaGFtYW4iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoImtvYm9sZCBzaGFtYW4iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoImtpdHRlbiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMubW9uc3RlcigiZiIpCiAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICB9KQoKICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGUgPSBtb25rZm9vZHNob3AoKSwgY2hhbmNlPTkwLCBsaXQ9MSwgeD0xMSwgeT0xMSwgdz0zLCBoPTIsCiAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5kb29yKHsgc3RhdGUgPSAiY2xvc2VkIiwgd2FsbD0iZWFzdCIgfSkKICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgIH0pCgogICAgICAgICAgICAgIGRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsIHg9MTcsIHk9MTEsIHc9MiwgaD0yLAogICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlID0gImNsb3NlZCIsIHdhbGw9Indlc3QiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICB9KQoKICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLCB4PTIwLCB5PTEwLCB3PTIsIGg9MiwKICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZSA9ICJsb2NrZWQiLCB3YWxsPSJub3J0aCIgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJHIikKICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgIH0pCgogICAgICAgICAgICAgIGRlcy5yb29tKHsgdHlwZSA9ICJzaG9wIiwgY2hhbmNlPTkwLCBsaXQ9MSwgeD0yMywgeT0xMCwgdz0zLCBoPTMsCiAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5kb29yKHsgc3RhdGUgPSAiY2xvc2VkIiwgd2FsbD0ibm9ydGgiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICB9KQoKICAgICAgICAgICAgICBkZXMubW9uc3Rlcih7IGlkID0gIndhdGNobWFuIiwgcGVhY2VmdWwgPSAxIH0pCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoeyBpZCA9ICJ3YXRjaG1hbiIsIHBlYWNlZnVsID0gMSB9KQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKHsgaWQgPSAid2F0Y2htYW4iLCBwZWFjZWZ1bCA9IDEgfSkKICAgICAgICAgICAgICBkZXMubW9uc3Rlcih7IGlkID0gIndhdGNobWFuIiwgcGVhY2VmdWwgPSAxIH0pCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoeyBpZCA9ICJ3YXRjaCBjYXB0YWluIiwgcGVhY2VmdWwgPSAxIH0pCiAgICAgICAgICAgZW5kCn0pCgpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5zdGFpcigidXAiKQogICAgICAgICAgIGVuZAp9KQoKZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMuc3RhaXIoImRvd24iKQogICAgICAgICAgICAgIGRlcy50cmFwKCkKICAgICAgICAgICAgICBkZXMubW9uc3RlcigiZ25vbWUiKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJnbm9tZSIpCiAgICAgICAgICAgZW5kCn0pCgpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJkd2FyZiIpCiAgICAgICAgICAgZW5kCn0pCgpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy50cmFwKCkKICAgICAgICAgICAgICBkZXMubW9uc3RlcigiZ25vbWUiKQogICAgICAgICAgIGVuZAp9KQoKZGVzLnJhbmRvbV9jb3JyaWRvcnMoKQotLSBOZXRIYWNrIDMuNwltaW5lcy5kZXMJJE5IRFQtRGF0ZTogMTU0ODYzMTcwNCAyMDE5LzAxLzI3IDIzOjI4OjI0ICQgICROSERULUJyYW5jaDogTmV0SGFjay0zLjYuMi1iZXRhMDEgJDokTkhEVC1SZXZpc2lvbjogMS4zMCAkCi0tCUNvcHlyaWdodCAoYykgMTk4OS05NSBieSBKZWFuLUNocmlzdG9waGUgQ29sbGV0Ci0tCUNvcHlyaWdodCAoYykgMTk5MS05NSBieSBNLiBTdGVwaGVuc29uCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCi0tICJHcm90dG8gVG93biIgYnkgS2VsbHkgQmFpbGV5CgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiKTsKCmRlcy5tYXAoW1sKLS0tLS0gICAgICAgICAtLS0tLS0tLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCnwuLi4tLS0gIC0tLS0tLS4uLi4uLi4tLSAgICAtLS0tLS0tICAgICAgICAgICAgICAgICAgICAgICAtLS0tLS0tLS0tLS0tLS0gIAp8Li4uLi4tLS0tLi4uLi4uLi4uLS0uLnwgICAgfC4uLi4ufCAgICAgICAgICAtLS0tLS0tICAgICAgfC4uLi4uLi4uLi4uLi58ICAKLS0uLi0uLi4uLS4tLS0tLS0tLS0tLi58ICAgIHwuLi4uLnwgICAgICAgICAgfC4uLi4ufCAgICAgLS0rLS0tKy0tLi0tLS0rLSAgCiAtLS4tLS4uLi4uLS0tLSAgICAgLS0tLSAgICB8Li4uLi58ICAtLS0tLS0gIC0tLi4uLi0tLS0gIHwuLi0uLi4tLS4tLisuLnwgIAogIC0tLS4uLi4uLi4uLi0tLS0gIC0tLS0tICAgLS0tKy0tLSAgfC4uKy58ICAgLS0tLi4tLi4tLS0tLi4tLS0rLS4uLS0tLi58ICAKICAgIC0tLS0uLS4uLi58Li4tLS0tLi4uLS0gICAgfC58ICAgIHwuLnwufCAgICAtLS0rLS4uLi4uLSstLS4uLi4uLi4uLS0rLSAgCiAgICAgICAtLS0tLS4ufC4uLi4tLi4uLi4tLS0tIHwufCAgICB8Li58Li0tLS0tLS4uLi4uLi0tLi4uLi4uLi4uLi4uLi4uLnwgIAogICAgLS0tLS0tIHwuLnwuLi4uLi4uLi4uLi4uLS0tLi0tICAgLS0tLS4rLi58LS4uLi4uLi4tLS4uLS0tLS0tLS0rLS0uLi0tICAKICAgIHwuLi4ufCAtLS4uLi4uLi0tLS4uLi4uLi4uLi4uLS0tLS0gIHwufC4ufC0uLi57Li4uLi0tLXwuLi4uLi4uLi58Li4tLSAgCiAgICB8Li4uLnwgIHwuLi4uLi4uLi0uLi4tLi4uLi4uLi4uLi4tLS0tLnwuLnwtLS4uLi4uLi58ICB8Li4uLi4uLi4ufC4uLnwgIAogICAgLS0tKy0tLS0tLS0tLi4uLi0tLS0tLS0uLi4tLS0uLi4uLi4tLS4tLS0tLS0tLi4uLi0tLS0gLS0tLS0tLS0tLS0uLi58ICAKIC0tLS0tLS4tLS0uLi4tLS4uLi0tLi4tLi4tLS4uLi0uLi0tLS4uLnwuLS0uLi0uLi4tLi4uLi0tLS0tLS0gfC4uLi4uLi4tLSAgCiB8Li58LS4uLi4uLi4uLi0uLi0tLS4uLS4uLS0tLi4uLi4tLS4uLi58Li4uLi4uLi4tLS0uLi4tfC4uLi58IHwuLS0tLS0tLSAgIAogfC4uKy4uLi4uLi4uLi4uLi4uLi0rLS0tKy0tLS0tLi4tLS4uLi4uLi4uLi4tLS4uLi4tLS4uLisuLi4ufCB8LnwuLi5TLiAgICAKLS0tLS0uLi4uLnsuLi4uLS0tLS4uLi4uLi4uLi4uLi4uLi0uLi4uLi4uLi4uLi0tLi4uLS4uLi18Li4uLnwgfC58Li4ufCAgICAgCnwuLi4uLi4uLi4uLi4uLi0tIC0tKy0tLi0tLS0tLS0tLS4uLi4uLi4uLi0tLi4tLi4uLi4uLi4tLS0tLS0tIHwuLS0rLS0tLS0tLQotKy0tLS0tLi4uLi4uLi4ufCB8Li4ufC58Li4uLnwgIC0tLi4uLi4uLi0tLS0tLS4uLnwuLi4uLS0tLS0tLS0tLi4uLi58Li4uLnwKfC4uLnwgLS0uLi0tLS0tLS0gfC4uLnwuKy4uLi58ICAgLS0tLi4uLS0tICAgIC0tLi58Li4uLS0uLi4uLi4tLi4uey4uKy4uLSt8CnwuLi58ICAtLS0tICAgICAgIC0tLS0tLXwuLi4ufCAgICAgLS0tLS0gICAgICAgLS0tLS0uLi4uLi0tLS0uLi4uLi4uLnwuLnwufAotLS0tLSAgICAgICAgICAgICAgICAgICAtLS0tLS0gICAgICAgICAgICAgICAgICAgICAtLS0tLS0tICAtLS0tLS0tLS0tLS0tLS0KXV0pOwoKaWYgcGVyY2VudCg3NSkgdGhlbgogIGlmIHBlcmNlbnQoNTApIHRoZW4KICAgIGRlcy50ZXJyYWluKHNlbGVjdGlvbi5saW5lKDI1LDgsIDI1LDkpLCAifCIpCiAgZWxzZQogICAgZGVzLnRlcnJhaW4oc2VsZWN0aW9uLmxpbmUoMTYsMTMsIDE3LDEzKSwgIi0iKQogIGVuZAplbmQKaWYgcGVyY2VudCg3NSkgdGhlbgogIGlmIHBlcmNlbnQoNTApIHRoZW4KICAgIGRlcy50ZXJyYWluKHNlbGVjdGlvbi5saW5lKDM2LDEwLCAzNiwxMSksICJ8IikKICBlbHNlCiAgICBkZXMudGVycmFpbihzZWxlY3Rpb24ubGluZSgzMiwxNSwgMzMsMTUpLCAiLSIpCiAgZW5kCmVuZAppZiBwZXJjZW50KDUwKSB0aGVuCiAgZGVzLnRlcnJhaW4oc2VsZWN0aW9uLmFyZWEoMjEsNCwgMjIsNSksICIuIikKICBkZXMudGVycmFpbihzZWxlY3Rpb24ubGluZSgxNCw5LCAxNCwxMCksICJ8IikKZW5kCmlmIHBlcmNlbnQoNTApIHRoZW4KICBkZXMudGVycmFpbih7NDYsMTN9LCAifCIpCiAgZGVzLnRlcnJhaW4oc2VsZWN0aW9uLmxpbmUoNDMsNSwgNDcsNSksICItIikKICBkZXMudGVycmFpbihzZWxlY3Rpb24ubGluZSg0Miw2LCA0Niw2KSwgIi4iKQogIGRlcy50ZXJyYWluKHNlbGVjdGlvbi5saW5lKDQ2LDcsIDQ3LDcpLCAiLiIpCmVuZAppZiBwZXJjZW50KDUwKSB0aGVuCiAgZGVzLnRlcnJhaW4oc2VsZWN0aW9uLmFyZWEoNjksMTEsIDcxLDExKSwgIi0iKQplbmQKCmRlcy5zdGFpcigidXAiLCAwMSwwMSkKZGVzLnN0YWlyKCJkb3duIiwgNDYsMDMpCmRlcy5mZWF0dXJlKCJmb3VudGFpbiIsIDUwLDA5KQpkZXMuZmVhdHVyZSgiZm91bnRhaW4iLCAxMCwxNSkKZGVzLmZlYXR1cmUoImZvdW50YWluIiwgNjYsMTgpCgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDc0LDIwKSwidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDA5LDEzLDExLDE3KSwibGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwOCwxNCwxMiwxNiksImxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoNDksMDcsNTEsMTEpLCJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDQ4LDA4LDUyLDEwKSwibGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg2NCwxNyw2OCwxOSksImxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMzcsMTMsMzksMTcpLCJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDM2LDE0LDQwLDE3KSwibGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg1OSwwMiw3MiwxMCksImxpdCIpCgpkZXMubW9uc3Rlcih7IGlkID0gIndhdGNobWFuIiwgcGVhY2VmdWwgPSAxIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0Y2htYW4iLCBwZWFjZWZ1bCA9IDEgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJ3YXRjaG1hbiIsIHBlYWNlZnVsID0gMSB9KQpkZXMubW9uc3Rlcih7IGlkID0gIndhdGNobWFuIiwgcGVhY2VmdWwgPSAxIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0Y2ggY2FwdGFpbiIsIHBlYWNlZnVsID0gMSB9KQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUgbG9yZCIpCmRlcy5tb25zdGVyKCJnbm9tZSBsb3JkIikKZGVzLm1vbnN0ZXIoImR3YXJmIikKZGVzLm1vbnN0ZXIoImR3YXJmIikKZGVzLm1vbnN0ZXIoImR3YXJmIikKCi0tIFRoZSBzaG9wcwpkZXMucmVnaW9uKHsgcmVnaW9uPXsyNSwxNywgMjgsMTl9LCBsaXQ9MSwgdHlwZT0iY2FuZGxlIHNob3AiLCBmaWxsZWQ9MSB9KQpkZXMuZG9vcigiY2xvc2VkIiwyNCwxOCkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17NTksIDksIDY3LDEwfSwgbGl0PTEsIHR5cGU9InNob3AiLCBmaWxsZWQ9MSB9KQpkZXMuZG9vcigiY2xvc2VkIiw2NiwwOCkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17NTcsMTMsIDYwLDE1fSwgbGl0PTEsIHR5cGU9InRvb2wgc2hvcCIsIGZpbGxlZD0xIH0pCmRlcy5kb29yKCJjbG9zZWQiLDU2LDE0KQpkZXMucmVnaW9uKHsgcmVnaW9uPXswNSwwOSwgMDgsMTB9LCBsaXQ9MSwgdHlwZT1tb25rZm9vZHNob3AoKSwgZmlsbGVkPTEgfSkKZGVzLmRvb3IoImNsb3NlZCIsMDcsMTEpCi0tIEdub21lIGhvbWVzCmRlcy5kb29yKCJjbG9zZWQiLDA0LDE0KQpkZXMuZG9vcigibG9ja2VkIiwwMSwxNykKZGVzLm1vbnN0ZXIoImdub21pc2ggd2l6YXJkIiwgMDIsIDE5KQpkZXMuZG9vcigibG9ja2VkIiwyMCwxNikKZGVzLm1vbnN0ZXIoIkciLCAyMCwgMTgpCmRlcy5kb29yKCJyYW5kb20iLDIxLDE0KQpkZXMuZG9vcigicmFuZG9tIiwyNSwxNCkKZGVzLmRvb3IoInJhbmRvbSIsNDIsMDgpCmRlcy5kb29yKCJsb2NrZWQiLDQwLDA1KQpkZXMubW9uc3RlcigiRyIsIDM4LCAwNykKZGVzLmRvb3IoInJhbmRvbSIsNTksMDMpCmRlcy5kb29yKCJyYW5kb20iLDU4LDA2KQpkZXMuZG9vcigicmFuZG9tIiw2MywwMykKZGVzLmRvb3IoInJhbmRvbSIsNjMsMDUpCmRlcy5kb29yKCJsb2NrZWQiLDcxLDAzKQpkZXMuZG9vcigibG9ja2VkIiw3MSwwNikKZGVzLmRvb3IoImNsb3NlZCIsNjksMDQpCmRlcy5kb29yKCJjbG9zZWQiLDY3LDE2KQpkZXMubW9uc3RlcigiZ25vbWlzaCB3aXphcmQiLCA2NywgMTQpCmRlcy5vYmplY3QoIj0iLCA3MCwgMTQpCmRlcy5kb29yKCJsb2NrZWQiLDY5LDE4KQpkZXMubW9uc3RlcigiZ25vbWUgbG9yZCIsIDcxLCAxOSkKZGVzLmRvb3IoImxvY2tlZCIsNzMsMTgpCmRlcy5vYmplY3QoImNoZXN0IiwgNzMsIDE5KQpkZXMuZG9vcigibG9ja2VkIiw1MCwwNikKZGVzLm9iamVjdCgiKCIsIDUwLCAwMykKZGVzLm9iamVjdCh7IGlkID0gInN0YXR1ZSIsIHg9MzgsIHk9MTUsIG1vbnR5cGU9Imdub21lIGtpbmciLCBoaXN0b3JpYz0xIH0pCi0tIFRlbXBsZQpkZXMucmVnaW9uKHsgcmVnaW9uPXsyOSwwMiwgMzMsMDR9LCBsaXQ9MSwgdHlwZT0idGVtcGxlIiwgZmlsbGVkPTEgfSkKZGVzLmRvb3IoImNsb3NlZCIsMzEsMDUpCmRlcy5hbHRhcih7IHg9MzEseT0wMywgYWxpZ249YWxpZ25bMV0sIHR5cGU9InNocmluZSIgfSkKLS0gTmV0SGFjayAzLjcJbWluZXMuZGVzCSROSERULURhdGU6IDE1NDg2MzE3MDQgMjAxOS8wMS8yNyAyMzoyODoyNCAkICAkTkhEVC1CcmFuY2g6IE5ldEhhY2stMy42LjItYmV0YTAxICQ6JE5IRFQtUmV2aXNpb246IDEuMzAgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODktOTUgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEtOTUgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQotLSAiQnVzdGxpbmcgVG93biIgYnkgS2VsbHkgQmFpbGV5CgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAiaW5hY2Nlc3NpYmxlcyIpCgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlPSJtaW5lcyIsIGZnPSIuIiwgYmc9Ii0iLCBzbW9vdGhlZD10cnVlLCBqb2luZWQ9dHJ1ZSxsaXQ9MSx3YWxsZWQ9dHJ1ZSB9KQoKZGVzLm1hcCh7IGhhbGlnbiA9ICJjZW50ZXIiLCB2YWxpZ24gPSAidG9wIiwgbWFwID0gW1sKLi0tLS0tLi4uLi4uLi4uLi4uLi4uLi0tLS0tLS0tLS0tLS0tLS0uLQoufC4uLnwuLi4uLi4uLi4uLi4uLi4ufC4uLnwuLnwuLi58Li4ufC4uCi58Li4uKy4uLS0rLS0uLi4uLi4uLi58Li4ufC4ufC4uLnwuLi58Li4KLnwuLi58Li58Li4ufC4uLS0tLS0uLnwuLi58Li58LSstLS0rLS0uLgouLS0tLS0uLnwuLi58LS18Li4ufC4uLS0rLS0tKy0uLi4uLi4uLi58Ci4uLi4uLi4ufC4uLnwuLnwuLi4rLi4uLi4uLi4uLi4uLi0tLS0tLi4KLi4uLi4uLi4tLS0tLS4ufC4uLnwuLi4uLi4tLSstLi4ufC4uLnwuLgouLS0tLS4uLnwuLi58Ky0tLS0tLS4uey4uLnwuLnwuLi4rLi4ufC4uCi58Li4rLi4ufC4uLnwuLi4uLi4uLi4uLi4ufC4ufC4uLnwuLi58Li4KLnwuLnwuLi58Li4ufC0rLS4uLi4uLS0tKy0tLS0tLS0tLS0tLS0ufAouLS0tLS4uLi0tKy0tLi58Li4tKy18Li4uLi4uLi4uLi4uLi4uLi4uCi4uLnwuLi4uLi4uLnwuLnwuLnwuLnwtLS0tLi4uLi0tLS0tLS0tLS4KLi4ufC4uVC4uLi4uLS0tLS4ufC4ufC4uLisuLi4ufC4uLi4uLnwtLgouLi58LS4uLi57Li4uLi4uLi58Li58Li4ufC4uLi4rLi4uLi4ufC0uCi4uLi0tLi4tLi4uLlQuLi4uLi0tLS0tLS0tLi4uLnwuLi4uLi58LS4KLi4uLi4uLi0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tLS0tLS0tLQpdXSB9KTsKCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsMzgsMTUpLCJsaXQiKQpkZXMubGV2cmVnaW9uKHsgdHlwZT0ic3RhaXItdXAiLCByZWdpb249ezAxLDAzLDIwLDE5fSwgcmVnaW9uX2lzbGV2PTEsIGV4Y2x1ZGU9ezAsMCwzOSwxNX0gfSkKZGVzLmxldnJlZ2lvbih7IHR5cGU9InN0YWlyLWRvd24iLCByZWdpb249ezYxLDAzLDc1LDE5fSwgcmVnaW9uX2lzbGV2PTEsIGV4Y2x1ZGU9ezAsMCwzOSwxNX0gfSkKZGVzLmZlYXR1cmUoImZvdW50YWluIiAsMjIsMDcpCmRlcy5mZWF0dXJlKCJmb3VudGFpbiIsIDA5LDEzKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDEzLDUsMTQsNiksInVubGl0IikKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MDksMDcsIDExLDA5fSwgbGl0PTEsIHR5cGU9ImNhbmRsZSBzaG9wIiwgZmlsbGVkPTEgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MTYsMDQsIDE4LDA2fSwgbGl0PTEsIHR5cGU9InRvb2wgc2hvcCIsIGZpbGxlZD0xIH0pCmRlcy5yZWdpb24oeyByZWdpb249ezIzLDAxLCAyNSwwM30sIGxpdD0xLCB0eXBlPSJzaG9wIiwgZmlsbGVkPTEgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MjIsMTIsIDI0LDEzfSwgbGl0PTEsIHR5cGU9bW9ua2Zvb2RzaG9wKCksIGZpbGxlZD0xIH0pCmRlcy5yZWdpb24oeyByZWdpb249ezMxLDEyLCAzNiwxNH0sIGxpdD0xLCB0eXBlPSJ0ZW1wbGUiLCBmaWxsZWQ9MSB9KQpkZXMuYWx0YXIoeyB4PTM1LHk9MTMsYWxpZ249YWxpZ25bMV0sdHlwZT0ic2hyaW5lIn0pCgpkZXMuZG9vcigiY2xvc2VkIiw1LDIpCmRlcy5kb29yKCJsb2NrZWQiLDQsOCkKZGVzLmRvb3IoImNsb3NlZCIsMTAsMikKZGVzLmRvb3IoImNsb3NlZCIsMTAsMTApCmRlcy5kb29yKCJsb2NrZWQiLDEzLDcpCmRlcy5kb29yKCJsb2NrZWQiLDE0LDkpCmRlcy5kb29yKCJjbG9zZWQiLDE5LDUpCmRlcy5kb29yKCJjbG9zZWQiLDE5LDEwKQpkZXMuZG9vcigiY2xvc2VkIiwyNCw0KQpkZXMuZG9vcigiY2xvc2VkIiwyNCw5KQpkZXMuZG9vcigiY2xvc2VkIiwyNSwxMikKZGVzLmRvb3IoImNsb3NlZCIsMjgsNCkKZGVzLmRvb3IoImxvY2tlZCIsMjgsNikKZGVzLmRvb3IoImNsb3NlZCIsMzAsMTMpCmRlcy5kb29yKCJjbG9zZWQiLDMxLDMpCmRlcy5kb29yKCJjbG9zZWQiLDM1LDMpCmRlcy5kb29yKCJjbG9zZWQiLDMzLDcpCgpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiKQpkZXMubW9uc3RlcigiZ25vbWUiLCAxNCwgNikKZGVzLm1vbnN0ZXIoImdub21lIGxvcmQiLCAxNCwgNSkKZGVzLm1vbnN0ZXIoImdub21lIiwgMjcsIDgpCmRlcy5tb25zdGVyKCJnbm9tZSBsb3JkIikKZGVzLm1vbnN0ZXIoImdub21lIGxvcmQiKQpkZXMubW9uc3RlcigiZHdhcmYiKQpkZXMubW9uc3RlcigiZHdhcmYiKQpkZXMubW9uc3RlcigiZHdhcmYiKQpkZXMubW9uc3Rlcih7IGlkID0gIndhdGNobWFuIiwgcGVhY2VmdWwgPSAxIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0Y2htYW4iLCBwZWFjZWZ1bCA9IDEgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJ3YXRjaG1hbiIsIHBlYWNlZnVsID0gMSB9KQpkZXMubW9uc3Rlcih7IGlkID0gIndhdGNoIGNhcHRhaW4iLCBwZWFjZWZ1bCA9IDEgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJ3YXRjaCBjYXB0YWluIiwgcGVhY2VmdWwgPSAxIH0pCgotLSBOZXRIYWNrIDMuNwltaW5lcy5kZXMJJE5IRFQtRGF0ZTogMTU0ODYzMTcwNCAyMDE5LzAxLzI3IDIzOjI4OjI0ICQgICROSERULUJyYW5jaDogTmV0SGFjay0zLjYuMi1iZXRhMDEgJDokTkhEVC1SZXZpc2lvbjogMS4zMCAkCi0tCUNvcHlyaWdodCAoYykgMTk4OS05NSBieSBKZWFuLUNocmlzdG9waGUgQ29sbGV0Ci0tCUNvcHlyaWdodCAoYykgMTk5MS05NSBieSBNLiBTdGVwaGVuc29uCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCi0tICJCYXphYXIgVG93biIgYnkgS2VsbHkgQmFpbGV5CgpkZXMucm9vbSh7IHR5cGU9Im9yZGluYXJ5IiwgbGl0PTEsIHg9Myx5PTMsCiAgICAgICAgICAgeGFsaWduPSJjZW50ZXIiLHlhbGlnbj0iY2VudGVyIiwgdz0zMCxoPTE1LAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5mZWF0dXJlKCJmb3VudGFpbiIsIDEyLCAwNykKICAgICAgICAgICAgICBkZXMuZmVhdHVyZSgiZm91bnRhaW4iLCAxMSwgMTMpCgogICAgICAgICAgICAgIGlmIHBlcmNlbnQoNzUpIHRoZW4KICAgICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGU9Im9yZGluYXJ5IiwgeD0yLHk9Miwgdz00LGg9MiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZSA9ICJjbG9zZWQiLCB3YWxsPSJzb3V0aCIgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgIGlmIHBlcmNlbnQoNzUpIHRoZW4KICAgICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGU9Im9yZGluYXJ5IiwgeD03LHk9Miwgdz0yLGg9MiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZSA9ICJjbG9zZWQiLCB3YWxsPSJub3J0aCIgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgIGlmIHBlcmNlbnQoNzUpIHRoZW4KICAgICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGU9Im9yZGluYXJ5IiwgeD03LHk9NSwgdz0yLGg9MiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZSA9ICJjbG9zZWQiLCB3YWxsPSJzb3V0aCIgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgIGlmIHBlcmNlbnQoNzUpIHRoZW4KICAgICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGU9Im9yZGluYXJ5IiwgbGl0PTEsIHg9MTAseT0yLCB3PTMsaD00LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMubW9uc3RlcigiZ25vbWUiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoIm1vbmtleSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMubW9uc3RlcigibW9ua2V5IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJtb25rZXkiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZSA9ICJjbG9zZWQiLCB3YWxsPSJzb3V0aCIgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgIGlmIHBlcmNlbnQoNzUpIHRoZW4KICAgICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGU9Im9yZGluYXJ5IiwgeD0xNCx5PTIsIHc9NCxoPTIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5kb29yKHsgc3RhdGUgPSAiY2xvc2VkIiwgd2FsbD0ic291dGgiLCBwb3M9MCB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoIm4iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgaWYgcGVyY2VudCg3NSkgdGhlbgogICAgICAgICAgICAgICAgIGRlcy5yb29tKHsgdHlwZT0ib3JkaW5hcnkiLCB4PTE2LHk9NSwgdz0yLGg9MiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZSA9ICJjbG9zZWQiLCB3YWxsPSJzb3V0aCIgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgIGlmIHBlcmNlbnQoNzUpIHRoZW4KICAgICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGU9Im9yZGluYXJ5IiwgbGl0PTAsIHg9MTkseT0yLCB3PTIsaD0yLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlID0gImxvY2tlZCIsIHdhbGw9ImVhc3QiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMubW9uc3RlcigiZ25vbWUga2luZyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGU9bW9ua2Zvb2RzaG9wKCksIGNoYW5jZT01MCwgbGl0PTEsIHg9MTkseT01LCB3PTIsaD0zLAogICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlID0gImNsb3NlZCIsIHdhbGw9InNvdXRoIiB9KQogICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgfSkKCiAgICAgICAgICAgICAgaWYgcGVyY2VudCg3NSkgdGhlbgogICAgICAgICAgICAgICAgIGRlcy5yb29tKHsgdHlwZT0ib3JkaW5hcnkiLCB4PTIseT03LCB3PTIsaD0yLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlID0gImNsb3NlZCIsIHdhbGw9ImVhc3QiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGU9InRvb2wgc2hvcCIsIGNoYW5jZT01MCwgbGl0PTEsIHg9Mix5PTEwLCB3PTIsaD0zLAogICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlID0gImNsb3NlZCIsIHdhbGw9InNvdXRoIiB9KQogICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgfSkKCiAgICAgICAgICAgICAgZGVzLnJvb20oeyB0eXBlPSJjYW5kbGUgc2hvcCIsIGxpdD0xLCB4PTUseT0xMCwgdz0zLGg9MywKICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZSA9ICJjbG9zZWQiLCB3YWxsPSJub3J0aCIgfSkKICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgIH0pCgogICAgICAgICAgICAgIGlmIHBlcmNlbnQoNzUpIHRoZW4KICAgICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGU9Im9yZGluYXJ5IiwgeD0xMSx5PTEwLCB3PTIsaD0yLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlID0gImxvY2tlZCIsIHdhbGw9Indlc3QiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMubW9uc3RlcigiRyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGU9InNob3AiLCBjaGFuY2U9NjAsIGxpdD0xLCB4PTE0LHk9MTAsIHc9MixoPTMsCiAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5kb29yKHsgc3RhdGUgPSAiY2xvc2VkIiwgd2FsbD0ibm9ydGgiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICB9KQoKICAgICAgICAgICAgICBpZiBwZXJjZW50KDc1KSB0aGVuCiAgICAgICAgICAgICAgICAgZGVzLnJvb20oeyB0eXBlPSJvcmRpbmFyeSIsIHg9MTcseT0xMSwgdz00LGg9MiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZSA9ICJjbG9zZWQiLCB3YWxsPSJub3J0aCIgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgIGlmIHBlcmNlbnQoNzUpIHRoZW4KICAgICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGU9Im9yZGluYXJ5IiwgeD0yMix5PTExLCB3PTIsaD0yLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlID0gImNsb3NlZCIsIHdhbGw9InNvdXRoIiB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmZlYXR1cmUoInNpbmsiLCAwMCwwMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgIGRlcy5yb29tKHsgdHlwZT1tb25rZm9vZHNob3AoKSwgY2hhbmNlPTUwLCBsaXQ9MSwgeD0yNSx5PTExLCB3PTMsaD0yLAogICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlID0gImNsb3NlZCIsIHdhbGw9ImVhc3QiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICB9KQoKICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGU9InRvb2wgc2hvcCIsIGNoYW5jZT0zMCwgbGl0PTEsIHg9MjUseT0yLCB3PTMsaD0zLAogICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlID0gImNsb3NlZCIsIHdhbGw9Indlc3QiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICB9KQoKICAgICAgICAgICAgICBkZXMucm9vbSh7IHR5cGU9InRlbXBsZSIsIGxpdD0xLCB4PTI0LHk9Niwgdz00LGg9NCwKICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZSA9ICJjbG9zZWQiLCB3YWxsID0gIndlc3QiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuYWx0YXIoeyB4PTAyLCB5PTAxLCBhbGlnbj1hbGlnblsxXSwgdHlwZT0ic2hyaW5lIiB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoImdub21pc2ggd2l6YXJkIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJnbm9taXNoIHdpemFyZCIpCiAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICB9KQoKICAgICAgICAgICAgICBkZXMubW9uc3Rlcih7IGlkID0gIndhdGNobWFuIiwgcGVhY2VmdWwgPSAxIH0pCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoeyBpZCA9ICJ3YXRjaG1hbiIsIHBlYWNlZnVsID0gMSB9KQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKHsgaWQgPSAid2F0Y2htYW4iLCBwZWFjZWZ1bCA9IDEgfSkKICAgICAgICAgICAgICBkZXMubW9uc3Rlcih7IGlkID0gIndhdGNobWFuIiwgcGVhY2VmdWwgPSAxIH0pCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoeyBpZCA9ICJ3YXRjaCBjYXB0YWluIiwgcGVhY2VmdWwgPSAxIH0pCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoImdub21lIikKICAgICAgICAgICAgICBkZXMubW9uc3RlcigiZ25vbWUiKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJnbm9tZSIpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoImdub21lIGxvcmQiKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJtb25rZXkiKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJtb25rZXkiKQoKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZT0ib3JkaW5hcnkiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5zdGFpcigidXAiKQogICAgICAgICAgIGVuZAp9KQoKZGVzLnJvb20oeyB0eXBlPSJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLnN0YWlyKCJkb3duIikKICAgICAgICAgICAgICBkZXMudHJhcCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoImdub21lIikKICAgICAgICAgICAgICBkZXMubW9uc3RlcigiZ25vbWUiKQogICAgICAgICAgIGVuZAp9KQoKZGVzLnJvb20oeyB0eXBlPSJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoImR3YXJmIikKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZT0ib3JkaW5hcnkiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy50cmFwKCkKICAgICAgICAgICAgICBkZXMubW9uc3RlcigiZ25vbWUiKQogICAgICAgICAgIGVuZAp9KQoKZGVzLnJhbmRvbV9jb3JyaWRvcnMoKQoKZGVzLmxldmVsX2ZsYWdzKCJub2ZsaXAiKTsKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsIGxpdD0xLCB4PTMseT0zLCB4YWxpZ249ImNlbnRlciIseWFsaWduPSJjZW50ZXIiLCB3PTExLGg9OSwgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCh7IGlkID0gInN0YXR1ZSIsIHggPSAwLCB5ID0gMCwgbW9udHlwZSA9ICJDIiwgaGlzdG9yaWMgPSB0cnVlIH0pOwogICAgICAgICAgICAgIGRlcy5vYmplY3QoeyBpZCA9ICJzdGF0dWUiLCB4ID0gMCwgeSA9IDgsIG1vbnR5cGUgPSAiQyIsIGhpc3RvcmljID0gdHJ1ZSB9KTsKICAgICAgICAgICAgICBkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgeCA9MTAsIHkgPSAwLCBtb250eXBlID0gIkMiLCBoaXN0b3JpYyA9IHRydWUgfSk7CiAgICAgICAgICAgICAgZGVzLm9iamVjdCh7IGlkID0gInN0YXR1ZSIsIHggPTEwLCB5ID0gOCwgbW9udHlwZSA9ICJDIiwgaGlzdG9yaWMgPSB0cnVlIH0pOwogICAgICAgICAgICAgIGRlcy5vYmplY3QoeyBpZCA9ICJzdGF0dWUiLCB4ID0gNSwgeSA9IDEsIG1vbnR5cGUgPSAiQyIsIGhpc3RvcmljID0gdHJ1ZSB9KTsKICAgICAgICAgICAgICBkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiwgeCA9IDUsIHkgPSA3LCBtb250eXBlID0gIkMiLCBoaXN0b3JpYyA9IHRydWUgfSk7CiAgICAgICAgICAgICAgZGVzLm9iamVjdCh7IGlkID0gInN0YXR1ZSIsIHggPSAyLCB5ID0gNCwgbW9udHlwZSA9ICJDIiwgaGlzdG9yaWMgPSB0cnVlIH0pOwogICAgICAgICAgICAgIGRlcy5vYmplY3QoeyBpZCA9ICJzdGF0dWUiLCB4ID0gOCwgeSA9IDQsIG1vbnR5cGUgPSAiQyIsIGhpc3RvcmljID0gdHJ1ZSB9KTsKCiAgICAgICAgICAgICAgZGVzLnJvb20oeyB0eXBlID0gImRlbHBoaSIsIGxpdCA9IDEsIHg9NCx5PTMsIHc9MyxoPTMsIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmZlYXR1cmUoImZvdW50YWluIiwgMCwgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZmVhdHVyZSgiZm91bnRhaW4iLCAxLCAwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5mZWF0dXJlKCJmb3VudGFpbiIsIDEsIDIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmZlYXR1cmUoImZvdW50YWluIiwgMiwgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMubW9uc3RlcigiT3JhY2xlIiwgMSwgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlPSJub2Rvb3IiLCB3YWxsPSJhbGwiIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCk7CiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoKTsKICAgICAgICAgICBlbmQKfSk7CgpkZXMucm9vbSh7IGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgIGRlcy5zdGFpcigidXAiKTsKICAgICAgICAgICAgICAgICBkZXMub2JqZWN0KCk7CiAgICAgICAgICAgICAgZW5kCn0pOwoKZGVzLnJvb20oeyBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICBkZXMuc3RhaXIoImRvd24iKTsKICAgICAgICAgICAgICAgICBkZXMub2JqZWN0KCk7CiAgICAgICAgICAgICAgICAgZGVzLnRyYXAoKTsKICAgICAgICAgICAgICAgICBkZXMubW9uc3RlcigpOwogICAgICAgICAgICAgICAgIGRlcy5tb25zdGVyKCk7CiAgICAgICAgICAgICAgZW5kCn0pOwoKZGVzLnJvb20oeyBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICBkZXMub2JqZWN0KCk7CiAgICAgICAgICAgICAgICAgZGVzLm9iamVjdCgpOwogICAgICAgICAgICAgICAgIGRlcy5tb25zdGVyKCk7CiAgICAgICAgICAgICAgZW5kCn0pOwoKZGVzLnJvb20oeyBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICBkZXMub2JqZWN0KCk7CiAgICAgICAgICAgICAgICAgZGVzLnRyYXAoKTsKICAgICAgICAgICAgICAgICBkZXMubW9uc3RlcigpOwogICAgICAgICAgICAgIGVuZAp9KTsKCmRlcy5yb29tKHsgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgZGVzLm9iamVjdCgpOwogICAgICAgICAgICAgICAgIGRlcy50cmFwKCk7CiAgICAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoKTsKICAgICAgICAgICAgICBlbmQKfSk7CgpkZXMucmFuZG9tX2NvcnJpZG9ycygpOwotLSBOZXRIYWNrIDMuNwlnZWhlbm5vbS5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4MyAyMDE1LzA1LzI1IDAwOjEzOjAzICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTMgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTIgYnkgTS4gU3RlcGhlbnNvbiBhbmQgSXpjaGFrIE1pbGxlcgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlPSJtYXplZ3JpZCIsIGJnID0iLSIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJzaG9ydHNpZ2h0ZWQiKQotLSBBIGdob3N0IHRvd24KZGVzLm1hcCh7IGhhbGlnbiA9ICJyaWdodCIsIHZhbGlnbiA9ICJjZW50ZXIiLCBtYXAgPSBbWwoufC4uLi58Li4uLnwuLi4ufC4uLi4uLi4uLi4uLi4ufC4uLi58Li4uLi4uLi4KLnwuLi4ufC4uLi58Li4uLnwuLi4uLi4uLi4uLi4uLnwuLi4ufC4uLi4uLi4uCi58Li4uLnwuLi4ufC4uLi58LS0uLi4tKy0tLS0tLS18Li4uLi4uLi4uLi4uLgoufC4uLi58Li4uLnwuLi4ufC4uLi4uLi4uLi4uLi4uKy4uLi4uLi4uLi4uLi4KLnwuLi4uLi4uLi58Li4uLnwuLi4uLi4uLi4uLi4uLnwuLi4ufC4uLi4uLi4uCi4tLSstLi4uLSstLS0tKy0tLi4uLi0tLS0tLS0uLi4tLS0tLS0tLS4tKy0tLQouLi4uLi4uLi4uLi4uLi4uLi4uLi58Li4uLi58Li4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC4uLi4ufC4uLi4uLi4uLi4uLi4uLi4uCi4tLSstLS0tLi4uLi0rLS0tLi4uLnwuLi4uLnwuLi4tLS0tLS0tLS0tKy0tLQoufC4uLi58Li4uLnwuLi4ufC4uLi4tLS0rLS0tLi4ufC4uLi4uLnwuLi4uLi4KLnwuLi4uLi4uLi58Li4uLnwuLi4uLi4uLi4uLi4uLnwuLi4uLi58Li4uLi4uCi4tLS0tLi4uLS0tLS0tLS0tLi4uLi4tLS0tLS4uLi4rLi4uLi4ufC4uLi4uLgoufC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwuLi4ufC4uLi4uLnwuLi4uLi4KLi0tLS0tLS0tLS0rLS4uLi0tKy0tfC4uLi58Li4uLi0tLS0tLS0tLS0rLS0tCi58Li4uLnwuLi4uLi4uLi4uLi4uLnwuLi4uKy4uLi58Li4uLi4uLi4uLi4uLgoufC4uLi4rLi4uLi4uLnwuLi4uLi58Li4uLnwuLi4ufC4uLi4uLi4uLi4uLi4KLnwuLi4ufC4uLi4uLi58Li4uLi4ufC4uLi58Li4uLnwuLi4uLi4uLi4uLi4uCl1dIH0pOwpkZXMubWF6ZXdhbGsoMDAsMDYsIndlc3QiKQotLSBFbnRpcmUgbWFpbiBhcmVhCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDEsMDAsNDQsMTYpLCJ1bmxpdCIpCmRlcy5zdGFpcigiZG93biIsIDMzLDE1KQpkZXMubGV2cmVnaW9uKHsgcmVnaW9uPXswMSwwMCwxMiwyMH0sIHJlZ2lvbl9pc2xldj0xLCBleGNsdWRlPXsyMCwwMSw3MCwyMH0sIGV4Y2x1ZGVfaXNsZXY9MSwgdHlwZT0ic3RhaXItdXAiIH0pOwpkZXMubGV2cmVnaW9uKHsgcmVnaW9uPXswMSwwMCwxMiwyMH0sIHJlZ2lvbl9pc2xldj0xLCBleGNsdWRlPXsyMCwwMSw3MCwyMH0sIGV4Y2x1ZGVfaXNsZXY9MSwgdHlwZT0iYnJhbmNoIiB9KTsKZGVzLnRlbGVwb3J0X3JlZ2lvbih7IHJlZ2lvbj17MDEsMDAsMTIsMjB9LCByZWdpb25faXNsZXY9MSwgZXhjbHVkZT17MjAsMDEsNzAsMjB9LCBleGNsdWRlX2lzbGV2PTEgfSk7Ci0tIFdhbGwgInJ1aW5zIgpkZXMub2JqZWN0KCJib3VsZGVyIiwxOSwwMikKZGVzLm9iamVjdCgiYm91bGRlciIsMjAsMDIpCmRlcy5vYmplY3QoImJvdWxkZXIiLDIxLDAyKQpkZXMub2JqZWN0KCJib3VsZGVyIiwzNiwwMikKZGVzLm9iamVjdCgiYm91bGRlciIsMzYsMDMpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA2LDA0KQpkZXMub2JqZWN0KCJib3VsZGVyIiwwNSwwNSkKZGVzLm9iamVjdCgiYm91bGRlciIsMDYsMDUpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA3LDA1KQpkZXMub2JqZWN0KCJib3VsZGVyIiwzOSwwNSkKZGVzLm9iamVjdCgiYm91bGRlciIsMDgsMDgpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA5LDA4KQpkZXMub2JqZWN0KCJib3VsZGVyIiwxMCwwOCkKZGVzLm9iamVjdCgiYm91bGRlciIsMTEsMDgpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA2LDEwKQpkZXMub2JqZWN0KCJib3VsZGVyIiwwNSwxMSkKZGVzLm9iamVjdCgiYm91bGRlciIsMDYsMTEpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA3LDExKQpkZXMub2JqZWN0KCJib3VsZGVyIiwyMSwxMSkKZGVzLm9iamVjdCgiYm91bGRlciIsMjEsMTIpCmRlcy5vYmplY3QoImJvdWxkZXIiLDEzLDEzKQpkZXMub2JqZWN0KCJib3VsZGVyIiwxNCwxMykKZGVzLm9iamVjdCgiYm91bGRlciIsMTUsMTMpCmRlcy5vYmplY3QoImJvdWxkZXIiLDE0LDE0KQotLSBEb29ycwpkZXMuZG9vcigiY2xvc2VkIiwyMywwMikKZGVzLmRvb3IoIm9wZW4iLDMxLDAzKQpkZXMuZG9vcigibm9kb29yIiwwMywwNSkKZGVzLmRvb3IoImNsb3NlZCIsMDksMDUpCmRlcy5kb29yKCJjbG9zZWQiLDE0LDA1KQpkZXMuZG9vcigiY2xvc2VkIiw0MSwwNSkKZGVzLmRvb3IoIm9wZW4iLDAzLDA4KQpkZXMuZG9vcigibm9kb29yIiwxMywwOCkKZGVzLmRvb3IoIm9wZW4iLDQxLDA4KQpkZXMuZG9vcigiY2xvc2VkIiwyNCwwOSkKZGVzLmRvb3IoImNsb3NlZCIsMzEsMTEpCmRlcy5kb29yKCJvcGVuIiwxMSwxMykKZGVzLmRvb3IoImNsb3NlZCIsMTgsMTMpCmRlcy5kb29yKCJjbG9zZWQiLDQxLDEzKQpkZXMuZG9vcigib3BlbiIsMjYsMTQpCmRlcy5kb29yKCJjbG9zZWQiLDA2LDE1KQotLSBTcGVjaWFsIHJvb21zCmRlcy5hbHRhcih7IHg9MjQseT0wNyxhbGlnbj0ibm9hbGlnbiIsdHlwZT0ic2FuY3R1bSIgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MjIsMTIsMjUsMTZ9LGxpdD0wLHR5cGU9Im1vcmd1ZSIsZmlsbGVkPTEgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MzIsMDksMzcsMTJ9LGxpdD0xLHR5cGU9InNob3AiLGZpbGxlZD0xIH0pCmRlcy5yZWdpb24oeyByZWdpb249ezEyLDAwLDE1LDA0fSxsaXQ9MSx0eXBlPSJzaG9wIixmaWxsZWQ9MSB9KQotLSBTb21lIHRyYXBzLgpkZXMudHJhcCgic3Bpa2VkIHBpdCIpCmRlcy50cmFwKCJzbGVlcCBnYXMiKQpkZXMudHJhcCgiYW50aSBtYWdpYyIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJtYWdpYyIpCmRlcy50cmFwKCJtYWdpYyIpCi0tIFNvbWUgcmFuZG9tIG9iamVjdHMKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCi0tIFRoZSByZXNpZGVudCBuYXN0eQpkZXMubW9uc3RlcigiT3JjdXMiLDMzLDE1KQotLSBBbmQgaXRzIHByZWZlcnJlZCBjb21wYW5pb25zCmRlcy5tb25zdGVyKCJodW1hbiB6b21iaWUiLDMyLDE1KQpkZXMubW9uc3Rlcigic2hhZGUiLDMyLDE0KQpkZXMubW9uc3Rlcigic2hhZGUiLDMyLDE2KQpkZXMubW9uc3RlcigidmFtcGlyZSIsMzUsMTYpCmRlcy5tb25zdGVyKCJ2YW1waXJlIiwzNSwxNCkKZGVzLm1vbnN0ZXIoInZhbXBpcmUgbG9yZCIsMzYsMTQpCmRlcy5tb25zdGVyKCJ2YW1waXJlIGxvcmQiLDM2LDE1KQotLSBSYW5kb21seSBwbGFjZWQgY29tcGFuaW9ucwpkZXMubW9uc3Rlcigic2tlbGV0b24iKQpkZXMubW9uc3Rlcigic2tlbGV0b24iKQpkZXMubW9uc3Rlcigic2tlbGV0b24iKQpkZXMubW9uc3Rlcigic2tlbGV0b24iKQpkZXMubW9uc3Rlcigic2tlbGV0b24iKQpkZXMubW9uc3Rlcigic2hhZGUiKQpkZXMubW9uc3Rlcigic2hhZGUiKQpkZXMubW9uc3Rlcigic2hhZGUiKQpkZXMubW9uc3Rlcigic2hhZGUiKQpkZXMubW9uc3RlcigiZ2lhbnQgem9tYmllIikKZGVzLm1vbnN0ZXIoImdpYW50IHpvbWJpZSIpCmRlcy5tb25zdGVyKCJnaWFudCB6b21iaWUiKQpkZXMubW9uc3RlcigiZXR0aW4gem9tYmllIikKZGVzLm1vbnN0ZXIoImV0dGluIHpvbWJpZSIpCmRlcy5tb25zdGVyKCJldHRpbiB6b21iaWUiKQpkZXMubW9uc3RlcigiaHVtYW4gem9tYmllIikKZGVzLm1vbnN0ZXIoImh1bWFuIHpvbWJpZSIpCmRlcy5tb25zdGVyKCJodW1hbiB6b21iaWUiKQpkZXMubW9uc3RlcigidmFtcGlyZSIpCmRlcy5tb25zdGVyKCJ2YW1waXJlIikKZGVzLm1vbnN0ZXIoInZhbXBpcmUiKQpkZXMubW9uc3RlcigidmFtcGlyZSBsb3JkIikKZGVzLm1vbnN0ZXIoInZhbXBpcmUgbG9yZCIpCi0tIEEgZmV3IG1vcmUgZm9yIHRoZSBwYXJ0eQpkZXMubW9uc3RlcigpCmRlcy5tb25zdGVyKCkKZGVzLm1vbnN0ZXIoKQpkZXMubW9uc3RlcigpCmRlcy5tb25zdGVyKCkKLS0gTmV0SGFjayAzLjcJZ2VoZW5ub20uZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODMgMjAxNS8wNS8yNSAwMDoxMzowMyAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjEzICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkyIGJ5IE0uIFN0ZXBoZW5zb24gYW5kIEl6Y2hhayBNaWxsZXIKLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIiwgIm5vdGVsZXBvcnQiLCAiaGFyZGZsb29yIiwgIm5vbW1hcCIpCi0tIFRoaXMgaXMgb3V0c2lkZSB0aGUgbWFpbiBtYXAsIGJlbG93LCBzbyB3ZSBtdXN0IGRvIGl0IGJlZm9yZSBhZGRpbmcKLS0gdGhhdCBtYXAgYW5kIGFuY2hvcmluZyBjb29yZGluYXRlcyB0byBpdC4gVGhpcyBleHRlbmRzIHRoZSBpbnZpc2libGUKLS0gYmFycmllciB1cCB0byB0aGUgdG9wIHJvdywgd2hpY2ggZmFsbHMgb3V0c2lkZSB0aGUgZHJhd24gbWFwLgpkZXMubm9uX3Bhc3N3YWxsKHNlbGVjdGlvbi5hcmVhKDM5LDAwLDQxLDAwKSkKZGVzLm1hcChbWwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCnwgICAgICAgICAgICAgLS0tLS0tLS0tLS0tLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCAgICAgICAgICAgICB8Li4uLi4uLi4uLi4ufCAgICAgICAgICAgICAtLS0tLS0tICAgICAgICAgICAgICAgICAgICAgICAgICAgfAp8ICAgICAgIC0tLS0tLS0uLi4uLi4uLi4uLi4tLS0tLSAgICAgICAgIHwuLi4uLnwgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgICAgICAgfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi58ICAgICAgICAtLS4uLi4ufCAgICAgICAgICAgIC0tLS0tLS0tLSAgICAgIHwKfCAgICAtLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi0tLS0tLS0tLXwuLi4uLi4tLS0tICAgICAgICAgfC4uLi4uLi58ICAgICAgfAp8ICAgIHwuLi4uLi4uLi0tLS0tLS0tLS4uLi4uLi4uLi58Li4uLi4uKy4uLi4uLi4uLnwgICAgIC0tLS0tLSstLS0uLnwgICAgICB8CnwgIC0tLS4uLi4uLi4ufC4uLi4uLi58Li4uLi4uLi4uLi0tUy0tLS18Li4uLi4uLi4ufCAgICAgfC4uLi4uLi4ufC4ufCAgICAgIHwKfCAgfC4uLi4uLi4uLi58Li4uLi4uLnwuLi4uLi4uLi4uLi4ufCAgIHwuLi4uLi4uLi4tLS0tLS0tLi4tLS0tLS0tLS0tICAgICAgfAp8ICB8Li4uLi4uLi4uLnwuLi4uLi4ufC4uLi4uLi4uLi4tLS0tICAgfC4uLi4uLi4uLi58Li4uLnwuLnwuLi4uLi58ICAgICAgICB8CnwgIHwuLi4uLi4uLi4ufC4uLi4uLi58Li4uLi4uLi4uLnwgICAgICAtLS4uLi4uLi4tLS0tKy0tLVMtLS1TLS0uLnwgICAgICAgIHwKfCAgfC4uLi4uLi4uLi4tLS0tLS0tLS0uLi4uLi4uLi4ufCAgICAgICB8Li4uLi4uLnwuLi4uLi4uLi4uLi4ufC4ufCAgICAgICAgfAp8ICAtLS0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58ICAgICAgIC0tLS0tKy0tLS0tLS1TLS0tLS0tLS0tUy0tLSAgICAgICB8CnwgICAgfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwgICAgICAgICAgfC4uLnwgfC4uLi4uLnwgICAgfC4uLi58LS0gICAgIHwKfCAgICAtLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tLSAgICAgICAgICB8Li4uLS0tLi4uLi0tLSAgLS0tLi4uLi4ufCAgICAgfAp8ICAgICAgIHwuLi4uLi4uLi4uLi4uLi4uLi4uLi58ICAgICAgICAgICAgIHwuLi4uLi4uLi4ufCAgICB8Li4uLi4tLS0tICAgICB8CnwgICAgICAgLS0tLS0tLS4uLi4uLi4uLi4uLS0tLS0gICAgICAgICAgICAgLS0uLi4tLS0tLS0tICAgIHwuLi4uLnwgICAgICAgIHwKfCAgICAgICAgICAgICB8Li4uLi4uLi4uLi58ICAgICAgICAgICAgICAgICAgfC4uLnwgICAgICAgICAgfC4uLi4ufCAgICAgICAgfAp8ICAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0gICAgICAgICAgICAgICAgICAtLS0tLSAgICAgICAgICAtLS0tLS0tICAgICAgICB8Ci0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KXV0pOwpkZXMucmVnaW9uKHsgcmVnaW9uPXsxNSwwNywgMjEsMTB9LCBsaXQ9MSwgdHlwZT0idGVtcGxlIiwgZmlsbGVkPTIsIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgZGVzLmRvb3IoeyB3YWxsID0gInJhbmRvbSIsIHN0YXRlID0gInNlY3JldCIgfSk7CmVuZCB9KQpkZXMuYWx0YXIoeyB4PTE4LCB5PTA4LCBhbGlnbj0ibm9hbGlnbiIsIHR5cGU9InNhbmN0dW0iIH0pCmRlcy5yZWdpb24oeyByZWdpb249ezQxLDA2LCA0OCwxMX0sIGxpdD0wLCB0eXBlPSJtb3JndWUiLCBmaWxsZWQ9MSwgaXJyZWd1bGFyPTEgfSkKLS0gTm9uIGRpZ2dhYmxlIHdhbGxzCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMTkpKQotLSBJbnZpc2libGUgYmFycmllciBzZXBhcmF0aW5nIHRoZSBsZWZ0ICYgcmlnaHQgaGFsdmVzIG9mIHRoZSBsZXZlbApkZXMubm9uX3Bhc3N3YWxsKHNlbGVjdGlvbi5hcmVhKDM3LDAwLDM5LDE5KSkKLS0gRG9vcnMKZGVzLmRvb3IoImNsb3NlZCIsNDAsMDYpCmRlcy5kb29yKCJsb2NrZWQiLDYyLDA2KQpkZXMuZG9vcigiY2xvc2VkIiw0NiwxMikKZGVzLmRvb3IoImNsb3NlZCIsNTMsMTApCi0tIFN1cnJvdW5kIHRoZSB0ZW1wbGUgd2l0aCBmaXJlCmRlcy50cmFwKCJmaXJlIiwxMywwNSkKZGVzLnRyYXAoImZpcmUiLDE0LDA1KQpkZXMudHJhcCgiZmlyZSIsMTUsMDUpCmRlcy50cmFwKCJmaXJlIiwxNiwwNSkKZGVzLnRyYXAoImZpcmUiLDE3LDA1KQpkZXMudHJhcCgiZmlyZSIsMTgsMDUpCmRlcy50cmFwKCJmaXJlIiwxOSwwNSkKZGVzLnRyYXAoImZpcmUiLDIwLDA1KQpkZXMudHJhcCgiZmlyZSIsMjEsMDUpCmRlcy50cmFwKCJmaXJlIiwyMiwwNSkKZGVzLnRyYXAoImZpcmUiLDIzLDA1KQpkZXMudHJhcCgiZmlyZSIsMTMsMTIpCmRlcy50cmFwKCJmaXJlIiwxNCwxMikKZGVzLnRyYXAoImZpcmUiLDE1LDEyKQpkZXMudHJhcCgiZmlyZSIsMTYsMTIpCmRlcy50cmFwKCJmaXJlIiwxNywxMikKZGVzLnRyYXAoImZpcmUiLDE4LDEyKQpkZXMudHJhcCgiZmlyZSIsMTksMTIpCmRlcy50cmFwKCJmaXJlIiwyMCwxMikKZGVzLnRyYXAoImZpcmUiLDIxLDEyKQpkZXMudHJhcCgiZmlyZSIsMjIsMTIpCmRlcy50cmFwKCJmaXJlIiwyMywxMikKZGVzLnRyYXAoImZpcmUiLDEzLDA2KQpkZXMudHJhcCgiZmlyZSIsMTMsMDcpCmRlcy50cmFwKCJmaXJlIiwxMywwOCkKZGVzLnRyYXAoImZpcmUiLDEzLDA5KQpkZXMudHJhcCgiZmlyZSIsMTMsMTApCmRlcy50cmFwKCJmaXJlIiwxMywxMSkKZGVzLnRyYXAoImZpcmUiLDIzLDA2KQpkZXMudHJhcCgiZmlyZSIsMjMsMDcpCmRlcy50cmFwKCJmaXJlIiwyMywwOCkKZGVzLnRyYXAoImZpcmUiLDIzLDA5KQpkZXMudHJhcCgiZmlyZSIsMjMsMTApCmRlcy50cmFwKCJmaXJlIiwyMywxMSkKLS0gU29tZSB0cmFwcy4KZGVzLnRyYXAoInNwaWtlZCBwaXQiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJzbGVlcCBnYXMiKQpkZXMudHJhcCgiYW50aSBtYWdpYyIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoIm1hZ2ljIikKLS0gU29tZSByYW5kb20gb2JqZWN0cwpkZXMub2JqZWN0KCJbIikKZGVzLm9iamVjdCgiWyIpCmRlcy5vYmplY3QoIlsiKQpkZXMub2JqZWN0KCJbIikKZGVzLm9iamVjdCgiKSIpCmRlcy5vYmplY3QoIikiKQpkZXMub2JqZWN0KCIqIikKZGVzLm9iamVjdCgiISIpCmRlcy5vYmplY3QoIiEiKQpkZXMub2JqZWN0KCIhIikKZGVzLm9iamVjdCgiISIpCmRlcy5vYmplY3QoIj8iKQpkZXMub2JqZWN0KCI/IikKZGVzLm9iamVjdCgiPyIpCmRlcy5vYmplY3QoIj8iKQpkZXMub2JqZWN0KCI/IikKLS0gU29tZSBtb25zdGVycy4KZGVzLm1vbnN0ZXIoeyBpZCA9ICJob3JuZWQgZGV2aWwiLCB4PTE0LHk9MTIscGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImJhcmJlZCBkZXZpbCIsIHg9MTgseT0wOCxwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZXJpbnlzIiwgeD0xMCx5PTA0LHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJtYXJpbGl0aCIsIHg9MDcseT0wOSxwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibmFsZmVzaG5lZSIsIHg9MjcseT0wOCxwZWFjZWZ1bD0wIH0pCi0tIE1vbG9jaCdzIGhvcmRlCmRlcy5tb25zdGVyKHsgaWQgPSAiYWxpZ25lZCBwcmllc3QiLCB4PTIwLHk9MDMsYWxpZ249Im5vYWxpZ24iLHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJhbGlnbmVkIHByaWVzdCIsIHg9MTUseT0wNCxhbGlnbj0ibm9hbGlnbiIscGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImFsaWduZWQgcHJpZXN0IiwgeD0xMSx5PTA1LGFsaWduPSJub2FsaWduIixwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYWxpZ25lZCBwcmllc3QiLCB4PTExLHk9MDcsYWxpZ249Im5vYWxpZ24iLHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJhbGlnbmVkIHByaWVzdCIsIHg9MTEseT0wOSxhbGlnbj0ibm9hbGlnbiIscGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImFsaWduZWQgcHJpZXN0IiwgeD0xMSx5PTEyLGFsaWduPSJub2FsaWduIixwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYWxpZ25lZCBwcmllc3QiLCB4PTE1LHk9MTMsYWxpZ249Im5vYWxpZ24iLHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJhbGlnbmVkIHByaWVzdCIsIHg9MTcseT0xMyxhbGlnbj0ibm9hbGlnbiIscGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImFsaWduZWQgcHJpZXN0IiwgeD0yMSx5PTEzLGFsaWduPSJub2FsaWduIixwZWFjZWZ1bD0wIH0pCi0tIEEgZmV3IG5hc3RpZXMKZGVzLm1vbnN0ZXIoIkwiKQpkZXMubW9uc3RlcigiTCIpCmRlcy5tb25zdGVyKCJWIikKZGVzLm1vbnN0ZXIoIlYiKQpkZXMubW9uc3RlcigiViIpCmRlcy5zdGFpcigidXAiLCA2MywxNSkKLS0gVGVsZXBvcnRpbmcgdG8gdGhpcyBsZXZlbCBpcyBhbGxvd2VkIGFmdGVyIHRoZSBpbnZvY2F0aW9uIGNyZWF0ZXMgaXRzCi0tIGVudHJhbmNlLiAgRm9yY2UgYXJyaXZhbCBpbiB0aGF0IGNhc2UgdG8gYmUgb24gcmlnaHRtb3N0IHRoaXJkIG9mIGxldmVsLgpkZXMudGVsZXBvcnRfcmVnaW9uKHsgcmVnaW9uID0gezU0LDEsNzksMTh9LCByZWdpb25faXNsZXY9MSwgZGlyPSJkb3duIiB9KQotLSBOZXRIYWNrIDMuNwlzb2tvYmFuLmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzg0IDIwMTUvMDUvMjUgMDA6MTM6MDQgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS4xMyAkCi0tCUNvcHlyaWdodCAoYykgMTk5OC0xOTk5IGJ5IEtldmluIEh1Z28KLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIiwgIm5vdGVsZXBvcnQiLCAicHJlbWFwcGVkIiwgInNvbGlkaWZ5Iik7CmRlcy5tYXAoW1sKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKfC4uLi4uLi58LS0tLS0tLS0tLS0tLS0tLnwKLS0tLS0tLS4tLS0tLS0gICAgICAgICB8LnwKIHwuLi4uLi4uLi4uLnwgICAgICAgICB8LnwKIHwuLi4uLi4uLi4uLnwgICAgICAgICB8LnwKLS0tLS0tLS0uLS0tLS0gICAgICAgICB8LnwKfC4uLi4uLi4uLi4uLnwgICAgICAgICB8LnwKfC4uLi4uLi4uLi4uLnwgICAgICAgICB8LnwKLS0tLS0uLS0tLS0tLS0gICAtLS0tLS18LnwKIHwuLi4uLi4uLi4ufCAgLS18Li4uLi58LnwKIHwuLi4uLi4uLi4ufCAgfC4rLi4uLi58LnwKIHwuLi4uLi4uLi58LSAgfC18Li4uLi58LnwKLS0tLS0tLS4tLS0tICAgfC4rLi4uLi4rLnwKfC4uLi4uLi4ufCAgICAgfC18Li4uLi58LS0KfC4uLi4uLi4ufCAgICAgfC4rLi4uLi58ICAKfC4uLnwtLS0tLSAgICAgLS18Li4uLi58ICAKLS0tLS0gICAgICAgICAgICAtLS0tLS0tICAKXV0pOwoKcGxhY2UgPSBzZWxlY3Rpb24ubmV3KCk7CnBsYWNlOnNldCgxNiwxMSk7CnBsYWNlOnNldCgxNiwxMyk7CnBsYWNlOnNldCgxNiwxNSk7CgpkZXMuc3RhaXIoImRvd24iLCAwMSwgMDEpOwpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDI1LDE3KSwibGl0Iik7CmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDAsMDAsMjUsMTcpKTsKZGVzLm5vbl9wYXNzd2FsbChzZWxlY3Rpb24uYXJlYSgwMCwwMCwyNSwxNykpOwoKLS0gQm91bGRlcnMKZGVzLm9iamVjdCgiYm91bGRlciIsIDAzLCAwNSk7CmRlcy5vYmplY3QoImJvdWxkZXIiLCAwNSwgMDUpOwpkZXMub2JqZWN0KCJib3VsZGVyIiwgMDcsIDA1KTsKZGVzLm9iamVjdCgiYm91bGRlciIsIDA5LCAwNSk7CmRlcy5vYmplY3QoImJvdWxkZXIiLCAxMSwgMDUpOwotLQpkZXMub2JqZWN0KCJib3VsZGVyIiwgMDQsIDA3KTsKZGVzLm9iamVjdCgiYm91bGRlciIsIDA0LCAwOCk7CmRlcy5vYmplY3QoImJvdWxkZXIiLCAwNiwgMDcpOwpkZXMub2JqZWN0KCJib3VsZGVyIiwgMDksIDA3KTsKZGVzLm9iamVjdCgiYm91bGRlciIsIDExLCAwNyk7Ci0tCmRlcy5vYmplY3QoImJvdWxkZXIiLCAwMywgMTIpOwpkZXMub2JqZWN0KCJib3VsZGVyIiwgMDQsIDEwKTsKZGVzLm9iamVjdCgiYm91bGRlciIsIDA1LCAxMik7CmRlcy5vYmplY3QoImJvdWxkZXIiLCAwNiwgMTApOwpkZXMub2JqZWN0KCJib3VsZGVyIiwgMDcsIDExKTsKZGVzLm9iamVjdCgiYm91bGRlciIsIDA4LCAxMCk7CmRlcy5vYmplY3QoImJvdWxkZXIiLCAwOSwgMTIpOwotLQpkZXMub2JqZWN0KCJib3VsZGVyIiwgMDMsIDE0KTsKCi0tIFRyYXBzCmRlcy50cmFwKCJob2xlIiwgMDgsIDAxKTsKZGVzLnRyYXAoImhvbGUiLCAwOSwgMDEpOwpkZXMudHJhcCgiaG9sZSIsIDEwLCAwMSk7CmRlcy50cmFwKCJob2xlIiwgMTEsIDAxKTsKZGVzLnRyYXAoImhvbGUiLCAxMiwgMDEpOwpkZXMudHJhcCgiaG9sZSIsIDEzLCAwMSk7CmRlcy50cmFwKCJob2xlIiwgMTQsIDAxKTsKZGVzLnRyYXAoImhvbGUiLCAxNSwgMDEpOwpkZXMudHJhcCgiaG9sZSIsIDE2LCAwMSk7CmRlcy50cmFwKCJob2xlIiwgMTcsIDAxKTsKZGVzLnRyYXAoImhvbGUiLCAxOCwgMDEpOwpkZXMudHJhcCgiaG9sZSIsIDE5LCAwMSk7CmRlcy50cmFwKCJob2xlIiwgMjAsIDAxKTsKZGVzLnRyYXAoImhvbGUiLCAyMSwgMDEpOwpkZXMudHJhcCgiaG9sZSIsIDIyLCAwMSk7CmRlcy50cmFwKCJob2xlIiwgMjMsIDAxKTsKCmRlcy5tb25zdGVyKHsgaWQgPSAiZ2lhbnQgbWltaWMiLCBhcHBlYXJfYXMgPSAib2JqOmJvdWxkZXIiIH0pOwpkZXMubW9uc3Rlcih7IGlkID0gImdpYW50IG1pbWljIiwgYXBwZWFyX2FzID0gIm9iajpib3VsZGVyIiB9KTsKCi0tIFJhbmRvbSBvYmplY3RzCmRlcy5vYmplY3QoeyBjbGFzcyA9ICIlIiB9KTsKZGVzLm9iamVjdCh7IGNsYXNzID0gIiUiIH0pOwpkZXMub2JqZWN0KHsgY2xhc3MgPSAiJSIgfSk7CmRlcy5vYmplY3QoeyBjbGFzcyA9ICIlIiB9KTsKZGVzLm9iamVjdCh7IGNsYXNzID0gIj0iIH0pOwpkZXMub2JqZWN0KHsgY2xhc3MgPSAiLyIgfSk7CgotLSBSZXdhcmRzCmRlcy5kb29yKCJsb2NrZWQiLCAyMywgMTMpOwpkZXMuZG9vcigiY2xvc2VkIiwgMTcsIDExKTsKZGVzLmRvb3IoImNsb3NlZCIsIDE3LCAxMyk7CmRlcy5kb29yKCJjbG9zZWQiLCAxNywgMTUpOwoKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MTgsMTAsIDIyLDE2fSwgbGl0ID0gMSwgdHlwZSA9ICJ6b28iLCBmaWxsZWQgPSAxLCBpcnJlZ3VsYXIgPSAxIH0pOwoKcHgsIHB5ID0gc2VsZWN0aW9uLnJuZGNvb3JkKHBsYWNlKTsKaWYgcGVyY2VudCg3NSkgdGhlbgogICBkZXMub2JqZWN0KHsgaWQ9ImJhZyBvZiBob2xkaW5nIiwgeD1weCwgeT1weSwKCQlidWM9Im5vdC1jdXJzZWQiLCBhY2hpZXZlbWVudD0xIH0pOwplbHNlCiAgIGRlcy5vYmplY3QoeyBpZD0iYW11bGV0IG9mIHJlZmxlY3Rpb24iLCB4PXB4LCB5PXB5LAoJCWJ1Yz0ibm90LWN1cnNlZCIsIGFjaGlldmVtZW50PTEgfSk7CmVuZApkZXMuZW5ncmF2aW5nKHsgeCA9IHB4LCB5ID0gcHksIHR5cGUgPSAiYnVybiIsIHRleHQgPSAiRWxiZXJldGgiIH0pOwpkZXMub2JqZWN0KHsgaWQgPSAic2NhcmUgbW9uc3RlciIsIHggPSBweCwgeSA9IHB5LCBidWMgPSAiY3Vyc2VkIiB9KTsKCi0tIE5ldEhhY2sgMy43CXNva29iYW4uZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjEzICQKLS0JQ29weXJpZ2h0IChjKSAxOTk4LTE5OTkgYnkgS2V2aW4gSHVnbwotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm90ZWxlcG9ydCIsICJwcmVtYXBwZWQiLCAic29saWRpZnkiKTsKCmRlcy5tYXAoW1sKICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICB8Li4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKICB8Li4tLS0tLS0tLS0tLS0tLS0tLS0tLnwKLS0tLS58ICAgIC0tLS0tICAgICAgICB8LnwKfC4ufC4tLSAgLS0uLi58ICAgICAgICB8LnwKfC4uLi4ufC0tfC4uLi58ICAgICAgICB8LnwKfC4uLi4ufC4ufC4uLi58ICAgICAgICB8LnwKLS0uLi4ufC4uLi4uLi0tICAgICAgICB8LnwKIHwuLi4uLi4ufC4uLnwgICAtLS0tLS18LnwKIHwuLi4ufC4ufC4uLnwgLS18Li4uLi58LnwKIHwuLi4ufC0tfC4uLnwgfC4rLi4uLi58LnwKIHwuLi4uLi4ufC4uLS0gfC18Li4uLi58LnwKIC0tLS0uLi4ufC4tLSAgfC4rLi4uLi4rLnwKICAgIC0tLS4tLS58ICAgfC18Li4uLi58LS0KICAgICB8Li4uLi58ICAgfC4rLi4uLi58ICAKICAgICB8Li58Li58ICAgLS18Li4uLi58ICAKICAgICAtLS0tLS0tICAgICAtLS0tLS0tICAKXV0pOwoKbG9jYWwgcGxhY2UgPSBzZWxlY3Rpb24ubmV3KCk7CnBsYWNlOnNldCgxNiwxMCk7CnBsYWNlOnNldCgxNiwxMik7CnBsYWNlOnNldCgxNiwxNCk7CgpkZXMuc3RhaXIoImRvd24iLCAwNiwxNSk7CmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsMjUsMTYpLCJsaXQiKTsKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgwMCwwMCwyNSwxNikpOwpkZXMubm9uX3Bhc3N3YWxsKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDI1LDE2KSk7CgotLSBCb3VsZGVycwpkZXMub2JqZWN0KCJib3VsZGVyIiwwNCwwNCk7CmRlcy5vYmplY3QoImJvdWxkZXIiLDAyLDA2KTsKZGVzLm9iamVjdCgiYm91bGRlciIsMDMsMDYpOwpkZXMub2JqZWN0KCJib3VsZGVyIiwwNCwwNyk7CmRlcy5vYmplY3QoImJvdWxkZXIiLDA1LDA3KTsKZGVzLm9iamVjdCgiYm91bGRlciIsMDIsMDgpOwpkZXMub2JqZWN0KCJib3VsZGVyIiwwNSwwOCk7CmRlcy5vYmplY3QoImJvdWxkZXIiLDAzLDA5KTsKZGVzLm9iamVjdCgiYm91bGRlciIsMDQsMDkpOwpkZXMub2JqZWN0KCJib3VsZGVyIiwwMywxMCk7CmRlcy5vYmplY3QoImJvdWxkZXIiLDA1LDEwKTsKZGVzLm9iamVjdCgiYm91bGRlciIsMDYsMTIpOwotLQpkZXMub2JqZWN0KCJib3VsZGVyIiwwNywxNCk7Ci0tCmRlcy5vYmplY3QoImJvdWxkZXIiLDExLDA1KTsKZGVzLm9iamVjdCgiYm91bGRlciIsMTIsMDYpOwpkZXMub2JqZWN0KCJib3VsZGVyIiwxMCwwNyk7CmRlcy5vYmplY3QoImJvdWxkZXIiLDExLDA3KTsKZGVzLm9iamVjdCgiYm91bGRlciIsMTAsMDgpOwpkZXMub2JqZWN0KCJib3VsZGVyIiwxMiwwOSk7CmRlcy5vYmplY3QoImJvdWxkZXIiLDExLDEwKTsKCi0tIFRyYXBzCmRlcy50cmFwKCJob2xlIiwwNSwwMSkKZGVzLnRyYXAoImhvbGUiLDA2LDAxKQpkZXMudHJhcCgiaG9sZSIsMDcsMDEpCmRlcy50cmFwKCJob2xlIiwwOCwwMSkKZGVzLnRyYXAoImhvbGUiLDA5LDAxKQpkZXMudHJhcCgiaG9sZSIsMTAsMDEpCmRlcy50cmFwKCJob2xlIiwxMSwwMSkKZGVzLnRyYXAoImhvbGUiLDEyLDAxKQpkZXMudHJhcCgiaG9sZSIsMTMsMDEpCmRlcy50cmFwKCJob2xlIiwxNCwwMSkKZGVzLnRyYXAoImhvbGUiLDE1LDAxKQpkZXMudHJhcCgiaG9sZSIsMTYsMDEpCmRlcy50cmFwKCJob2xlIiwxNywwMSkKZGVzLnRyYXAoImhvbGUiLDE4LDAxKQpkZXMudHJhcCgiaG9sZSIsMTksMDEpCmRlcy50cmFwKCJob2xlIiwyMCwwMSkKZGVzLnRyYXAoImhvbGUiLDIxLDAxKQpkZXMudHJhcCgiaG9sZSIsMjIsMDEpCgpkZXMubW9uc3Rlcih7IGlkID0gImdpYW50IG1pbWljIiwgYXBwZWFyX2FzID0gIm9iajpib3VsZGVyIiB9KTsKZGVzLm1vbnN0ZXIoeyBpZCA9ICJnaWFudCBtaW1pYyIsIGFwcGVhcl9hcyA9ICJvYmo6Ym91bGRlciIgfSk7CgotLSBSYW5kb20gb2JqZWN0cwpkZXMub2JqZWN0KHsgY2xhc3MgPSAiJSIgfSk7CmRlcy5vYmplY3QoeyBjbGFzcyA9ICIlIiB9KTsKZGVzLm9iamVjdCh7IGNsYXNzID0gIiUiIH0pOwpkZXMub2JqZWN0KHsgY2xhc3MgPSAiJSIgfSk7CmRlcy5vYmplY3QoeyBjbGFzcyA9ICI9IiB9KTsKZGVzLm9iamVjdCh7IGNsYXNzID0gIi8iIH0pOwoKLS0gUmV3YXJkcwpkZXMuZG9vcigibG9ja2VkIiwyMywxMikKZGVzLmRvb3IoImNsb3NlZCIsMTcsMTApCmRlcy5kb29yKCJjbG9zZWQiLDE3LDEyKQpkZXMuZG9vcigiY2xvc2VkIiwxNywxNCkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MTgsMDksIDIyLDE1fSwgbGl0ID0gMSwgdHlwZSA9ICJ6b28iLCBmaWxsZWQgPSAxLCBpcnJlZ3VsYXIgPSAxIH0pOwoKcHgsIHB5ID0gc2VsZWN0aW9uLnJuZGNvb3JkKHBsYWNlKTsKaWYgcGVyY2VudCgyNSkgdGhlbgogICBkZXMub2JqZWN0KHsgaWQ9ImJhZyBvZiBob2xkaW5nIiwgeD1weCwgeT1weSwKCQlidWM9Im5vdC1jdXJzZWQiLCBhY2hpZXZlbWVudD0xIH0pOwplbHNlCiAgIGRlcy5vYmplY3QoeyBpZD0iYW11bGV0IG9mIHJlZmxlY3Rpb24iLCB4PXB4LCB5PXB5LAoJCWJ1Yz0ibm90LWN1cnNlZCIsIGFjaGlldmVtZW50PTEgfSk7CmVuZApkZXMuZW5ncmF2aW5nKHsgeCA9IHB4LCB5ID0gcHksIHR5cGUgPSAiYnVybiIsIHRleHQgPSAiRWxiZXJldGgiIH0pOwpkZXMub2JqZWN0KHsgaWQgPSAic2NhcmUgbW9uc3RlciIsIHggPSBweCwgeSA9IHB5LCBidWMgPSAiY3Vyc2VkIiB9KTsKLS0gTmV0SGFjayAzLjcJc29rb2Jhbi5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4NCAyMDE1LzA1LzI1IDAwOjEzOjA0ICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTMgJAotLQlDb3B5cmlnaHQgKGMpIDE5OTgtMTk5OSBieSBLZXZpbiBIdWdvCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiICIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub3RlbGVwb3J0IiwgInByZW1hcHBlZCIsICJzb2xpZGlmeSIpOwoKZGVzLm1hcChbWwotLS0tLS0tLS0tLS0tLS0tLS0tLQp8Li4uLi4uLi58Li4ufC4uLi4ufAp8Li4uLi4tLi58Li0ufC4uLi4ufAp8Li58Li4uLi58Li4ufC4uLi4ufAp8LS58Li4tLi58Li0ufC4uLi4ufAp8Li4uLS0uLi4uLi4ufC4uLi4ufAp8Li4ufC4uLi0uLi4tfC4uLi4ufAp8Li4ufC4ufC4uLi0tfC4uLi4ufAp8LS4ufC4ufC0tLS0tLS0tLS0rfAp8Li4uLi4uLi4uLi4uLi4uLi4ufAp8Li4ufC4ufC0tLS0tLS0tLS0tLQotLS0tLS0tLSAgICAgICAgICAgIApdXSk7CmRlcy5zdGFpcigiZG93biIsIDA2LDEwKTsKZGVzLnN0YWlyKCJ1cCIsIDE2LDA0KTsKZGVzLmRvb3IoImxvY2tlZCIsIDE4LDA4KTsKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMCwwMCwgMTksMTEpLCAibGl0Iik7CmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDAsMDAsMTksMTEpKTsKZGVzLm5vbl9wYXNzd2FsbChzZWxlY3Rpb24uYXJlYSgwMCwwMCwxOSwxMSkpOwoKLS0gQm91bGRlcnMKZGVzLm9iamVjdCgiYm91bGRlciIsMDIsMDIpCmRlcy5vYmplY3QoImJvdWxkZXIiLDAzLDAyKQotLQpkZXMub2JqZWN0KCJib3VsZGVyIiwwNSwwMykKZGVzLm9iamVjdCgiYm91bGRlciIsMDcsMDMpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA3LDAyKQpkZXMub2JqZWN0KCJib3VsZGVyIiwwOCwwMikKLS0KZGVzLm9iamVjdCgiYm91bGRlciIsMTAsMDMpCmRlcy5vYmplY3QoImJvdWxkZXIiLDExLDAzKQotLQpkZXMub2JqZWN0KCJib3VsZGVyIiwwMiwwNykKZGVzLm9iamVjdCgiYm91bGRlciIsMDIsMDgpCmRlcy5vYmplY3QoImJvdWxkZXIiLDAzLDA5KQotLQpkZXMub2JqZWN0KCJib3VsZGVyIiwwNSwwNykKZGVzLm9iamVjdCgiYm91bGRlciIsMDYsMDYpCgotLSBUcmFwcwpkZXMudHJhcCgiaG9sZSIsMDgsMDkpCmRlcy50cmFwKCJob2xlIiwwOSwwOSkKZGVzLnRyYXAoImhvbGUiLDEwLDA5KQpkZXMudHJhcCgiaG9sZSIsMTEsMDkpCmRlcy50cmFwKCJob2xlIiwxMiwwOSkKZGVzLnRyYXAoImhvbGUiLDEzLDA5KQpkZXMudHJhcCgiaG9sZSIsMTQsMDkpCmRlcy50cmFwKCJob2xlIiwxNSwwOSkKZGVzLnRyYXAoImhvbGUiLDE2LDA5KQpkZXMudHJhcCgiaG9sZSIsMTcsMDkpCgotLSBSYW5kb20gb2JqZWN0cwpkZXMub2JqZWN0KHsgY2xhc3MgPSAiJSIgfSk7CmRlcy5vYmplY3QoeyBjbGFzcyA9ICIlIiB9KTsKZGVzLm9iamVjdCh7IGNsYXNzID0gIiUiIH0pOwpkZXMub2JqZWN0KHsgY2xhc3MgPSAiJSIgfSk7CmRlcy5vYmplY3QoeyBjbGFzcyA9ICI9IiB9KTsKZGVzLm9iamVjdCh7IGNsYXNzID0gIi8iIH0pOwotLSBOZXRIYWNrIDMuNwlzb2tvYmFuLmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzg0IDIwMTUvMDUvMjUgMDA6MTM6MDQgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS4xMyAkCi0tCUNvcHlyaWdodCAoYykgMTk5OC0xOTk5IGJ5IEtldmluIEh1Z28KLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIiwgIm5vdGVsZXBvcnQiLCAicHJlbWFwcGVkIiwgInNvbGlkaWZ5Iik7CgpkZXMubWFwKFtbCiAgLS0tLS0tLS0gICAgICAgICAgCi0tfC58Li4uLnwgICAgICAgICAgCnwuLi4uLi4uLnwtLS0tLS0tLS0tCnwuLS4uLi0uLnwufC4uLi4uLi58CnwuLi4tLi4uLi4ufC4uLi4uLi58CnwuLS4uLi58Li4ufC4uLi4uLi58CnwuLi4uLS4tLS4tfC4uLi4uLi58CnwuLi4uLi4uLi4ufC4uLi4uLi58CnwuLS0uLi58Li4ufC4uLi4uLi58CnwuLi4uLS58LS0tfC4uLi4uLi58Ci0tfC4uLi58LS0tLS0tLS0tLSt8CiAgfC4uLi4uLi4uLi4uLi4uLi58CiAgLS0tLS0tLS0tLS0tLS0tLS0tCl1dKTsKZGVzLnN0YWlyKCJkb3duIiwgMDYsMTEpCmRlcy5zdGFpcigidXAiLCAxNSwwNikKZGVzLmRvb3IoImxvY2tlZCIsMTgsMTApCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsMTksMTIpLCAibGl0Iik7CmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDAsMDAsMTksMTIpKTsKZGVzLm5vbl9wYXNzd2FsbChzZWxlY3Rpb24uYXJlYSgwMCwwMCwxOSwxMikpOwoKLS0gQm91bGRlcnMKZGVzLm9iamVjdCgiYm91bGRlciIsMDQsMDIpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA0LDAzKQpkZXMub2JqZWN0KCJib3VsZGVyIiwwNSwwMykKZGVzLm9iamVjdCgiYm91bGRlciIsMDcsMDMpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA4LDAzKQpkZXMub2JqZWN0KCJib3VsZGVyIiwwMiwwNCkKZGVzLm9iamVjdCgiYm91bGRlciIsMDMsMDQpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA1LDA1KQpkZXMub2JqZWN0KCJib3VsZGVyIiwwNiwwNikKZGVzLm9iamVjdCgiYm91bGRlciIsMDksMDYpCmRlcy5vYmplY3QoImJvdWxkZXIiLDAzLDA3KQpkZXMub2JqZWN0KCJib3VsZGVyIiwwNCwwNykKZGVzLm9iamVjdCgiYm91bGRlciIsMDcsMDcpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA2LDA5KQpkZXMub2JqZWN0KCJib3VsZGVyIiwwNSwxMCkKZGVzLm9iamVjdCgiYm91bGRlciIsMDUsMTEpCgotLSBUcmFwcwpkZXMudHJhcCgiaG9sZSIsMDcsMTEpCmRlcy50cmFwKCJob2xlIiwwOCwxMSkKZGVzLnRyYXAoImhvbGUiLDA5LDExKQpkZXMudHJhcCgiaG9sZSIsMTAsMTEpCmRlcy50cmFwKCJob2xlIiwxMSwxMSkKZGVzLnRyYXAoImhvbGUiLDEyLDExKQpkZXMudHJhcCgiaG9sZSIsMTMsMTEpCmRlcy50cmFwKCJob2xlIiwxNCwxMSkKZGVzLnRyYXAoImhvbGUiLDE1LDExKQpkZXMudHJhcCgiaG9sZSIsMTYsMTEpCmRlcy50cmFwKCJob2xlIiwxNywxMSkKCi0tIFJhbmRvbSBvYmplY3RzCmRlcy5vYmplY3QoeyBjbGFzcyA9ICIlIiB9KTsKZGVzLm9iamVjdCh7IGNsYXNzID0gIiUiIH0pOwpkZXMub2JqZWN0KHsgY2xhc3MgPSAiJSIgfSk7CmRlcy5vYmplY3QoeyBjbGFzcyA9ICIlIiB9KTsKZGVzLm9iamVjdCh7IGNsYXNzID0gIj0iIH0pOwpkZXMub2JqZWN0KHsgY2xhc3MgPSAiLyIgfSk7Ci0tIE5ldEhhY2sgMy43CXNva29iYW4uZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjEzICQKLS0JQ29weXJpZ2h0IChjKSAxOTk4LTE5OTkgYnkgS2V2aW4gSHVnbwotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm90ZWxlcG9ydCIsICJwcmVtYXBwZWQiLCAic29saWRpZnkiKTsKCmRlcy5tYXAoW1sKLS0tLS0tLS0tLS0gICAgICAgLS0tLS0tLS0tLS0KfC4uLi58Li4uLnwtLSAgICAgfC4uLi4uLi4uLnwKfC4uLi58Li4uLi4ufCAgICAgfC4uLi4uLi4uLnwKfC4uLi4uLi4uLnwtLSAgICAgfC4uLi4uLi4uLnwKfC4uLi58Li4uLnwgICAgICAgfC4uLi4uLi4uLnwKfC0uLS0tLS0tLS0tICAgICAgfC4uLi4uLi4uLnwKfC4uLi58Li4uLi58ICAgICAgfC4uLi4uLi4uLnwKfC4uLi58Li4uLi58ICAgICAgfC4uLi4uLi4uLnwKfC4uLi4uLi4uLi58ICAgICAgfC4uLi4uLi4uLnwKfC4uLi58Li4uLi58LS0tLS0tLS0tLS0tLS0tK3wKfC4uLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KXV0pOwpkZXMuc3RhaXIoImRvd24iLCAxMSwwMikKZGVzLnN0YWlyKCJ1cCIsIDIzLDA0KQpkZXMuZG9vcigibG9ja2VkIiwgMjcsMDkpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsMjgsMTEpLCAibGl0IikKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgwMCwwMCwyOCwxMSkpCmRlcy5ub25fcGFzc3dhbGwoc2VsZWN0aW9uLmFyZWEoMDAsMDAsMjgsMTEpKQoKLS0gQm91bGRlcnMKZGVzLm9iamVjdCgiYm91bGRlciIsMDMsMDIpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA0LDAyKQotLQpkZXMub2JqZWN0KCJib3VsZGVyIiwwNiwwMikKZGVzLm9iamVjdCgiYm91bGRlciIsMDYsMDMpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA3LDAyKQotLQpkZXMub2JqZWN0KCJib3VsZGVyIiwwMywwNikKZGVzLm9iamVjdCgiYm91bGRlciIsMDIsMDcpCmRlcy5vYmplY3QoImJvdWxkZXIiLDAzLDA3KQpkZXMub2JqZWN0KCJib3VsZGVyIiwwMywwOCkKZGVzLm9iamVjdCgiYm91bGRlciIsMDIsMDkpCmRlcy5vYmplY3QoImJvdWxkZXIiLDAzLDA5KQpkZXMub2JqZWN0KCJib3VsZGVyIiwwNCwwOSkKLS0KZGVzLm9iamVjdCgiYm91bGRlciIsMDYsMDcpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA2LDA5KQpkZXMub2JqZWN0KCJib3VsZGVyIiwwOCwwNykKZGVzLm9iamVjdCgiYm91bGRlciIsMDgsMTApCmRlcy5vYmplY3QoImJvdWxkZXIiLDA5LDA4KQpkZXMub2JqZWN0KCJib3VsZGVyIiwwOSwwOSkKZGVzLm9iamVjdCgiYm91bGRlciIsMTAsMDcpCmRlcy5vYmplY3QoImJvdWxkZXIiLDEwLDEwKQoKLS0gVHJhcHMKZGVzLnRyYXAoImhvbGUiLDEyLDEwKQpkZXMudHJhcCgiaG9sZSIsMTMsMTApCmRlcy50cmFwKCJob2xlIiwxNCwxMCkKZGVzLnRyYXAoImhvbGUiLDE1LDEwKQpkZXMudHJhcCgiaG9sZSIsMTYsMTApCmRlcy50cmFwKCJob2xlIiwxNywxMCkKZGVzLnRyYXAoImhvbGUiLDE4LDEwKQpkZXMudHJhcCgiaG9sZSIsMTksMTApCmRlcy50cmFwKCJob2xlIiwyMCwxMCkKZGVzLnRyYXAoImhvbGUiLDIxLDEwKQpkZXMudHJhcCgiaG9sZSIsMjIsMTApCmRlcy50cmFwKCJob2xlIiwyMywxMCkKZGVzLnRyYXAoImhvbGUiLDI0LDEwKQpkZXMudHJhcCgiaG9sZSIsMjUsMTApCmRlcy50cmFwKCJob2xlIiwyNiwxMCkKCi0tIFJhbmRvbSBvYmplY3RzCmRlcy5vYmplY3QoeyBjbGFzcyA9ICIlIiB9KTsKZGVzLm9iamVjdCh7IGNsYXNzID0gIiUiIH0pOwpkZXMub2JqZWN0KHsgY2xhc3MgPSAiJSIgfSk7CmRlcy5vYmplY3QoeyBjbGFzcyA9ICIlIiB9KTsKZGVzLm9iamVjdCh7IGNsYXNzID0gIj0iIH0pOwpkZXMub2JqZWN0KHsgY2xhc3MgPSAiLyIgfSk7CgotLSBOZXRIYWNrIDMuNwlzb2tvYmFuLmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzg0IDIwMTUvMDUvMjUgMDA6MTM6MDQgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS4xMyAkCi0tCUNvcHlyaWdodCAoYykgMTk5OC0xOTk5IGJ5IEtldmluIEh1Z28KLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIiwgIm5vdGVsZXBvcnQiLCAicHJlbWFwcGVkIiwgInNvbGlkaWZ5Iik7CgpkZXMubWFwKFtbCiAtLS0tICAgICAgICAgIC0tLS0tLS0tLS0tCi18Li58LS0tLS0tLSAgIHwuLi4uLi4uLi58CnwuLi4uLi4uLi4ufCAgIHwuLi4uLi4uLi58CnwuLi0tLS0tLi0ufCAgIHwuLi4uLi4uLi58CnwuLnwuLi58Li4ufCAgIHwuLi4uLi4uLi58CnwuLi4uLi4uLi4tfCAgIHwuLi4uLi4uLi58CnwuLi4uLi4ufC4ufCAgIHwuLi4uLi4uLi58CnwuLS0tLS4uLS0ufCAgIHwuLi4uLi4uLi58CnwuLi4uLi4uLnwuLS0gIHwuLi4uLi4uLi58CnwuLS0tLi0uLi4uLi0tLS0tLS0tLS0tLSt8CnwuLi58Li4uLS4uLi4uLi4uLi4uLi4uLi58CnwuLi4uLi4uLi4tLS0tLS0tLS0tLS0tLS0tCi0tLS18Li58Li58ICAgICAgICAgICAgICAgCiAgICAtLS0tLS0tICAgICAgICAgICAgICAgCl1dKTsKZGVzLnN0YWlyKCJkb3duIiwgMDMsMDEpCmRlcy5zdGFpcigidXAiLCAyMCwwNCkKZGVzLmRvb3IoImxvY2tlZCIsMjQsMDkpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsMjUsMTMpLCAibGl0IikKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgwMCwwMCwyNSwxMykpCmRlcy5ub25fcGFzc3dhbGwoc2VsZWN0aW9uLmFyZWEoMDAsMDAsMjUsMTMpKQoKLS0gQm91bGRlcnMKZGVzLm9iamVjdCgiYm91bGRlciIsMDIsMDMpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA4LDAzKQpkZXMub2JqZWN0KCJib3VsZGVyIiwwOSwwNCkKZGVzLm9iamVjdCgiYm91bGRlciIsMDIsMDUpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA0LDA1KQpkZXMub2JqZWN0KCJib3VsZGVyIiwwOSwwNSkKZGVzLm9iamVjdCgiYm91bGRlciIsMDIsMDYpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA1LDA2KQpkZXMub2JqZWN0KCJib3VsZGVyIiwwNiwwNykKZGVzLm9iamVjdCgiYm91bGRlciIsMDMsMDgpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA3LDA4KQpkZXMub2JqZWN0KCJib3VsZGVyIiwwNSwwOSkKZGVzLm9iamVjdCgiYm91bGRlciIsMTAsMDkpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA3LDEwKQpkZXMub2JqZWN0KCJib3VsZGVyIiwxMCwxMCkKZGVzLm9iamVjdCgiYm91bGRlciIsMDMsMTEpCgotLSBUcmFwcwpkZXMudHJhcCgiaG9sZSIsMTIsMTApCmRlcy50cmFwKCJob2xlIiwxMywxMCkKZGVzLnRyYXAoImhvbGUiLDE0LDEwKQpkZXMudHJhcCgiaG9sZSIsMTUsMTApCmRlcy50cmFwKCJob2xlIiwxNiwxMCkKZGVzLnRyYXAoImhvbGUiLDE3LDEwKQpkZXMudHJhcCgiaG9sZSIsMTgsMTApCmRlcy50cmFwKCJob2xlIiwxOSwxMCkKZGVzLnRyYXAoImhvbGUiLDIwLDEwKQpkZXMudHJhcCgiaG9sZSIsMjEsMTApCmRlcy50cmFwKCJob2xlIiwyMiwxMCkKZGVzLnRyYXAoImhvbGUiLDIzLDEwKQoKLS0gUmFuZG9tIG9iamVjdHMKZGVzLm9iamVjdCh7IGNsYXNzID0gIiUiIH0pOwpkZXMub2JqZWN0KHsgY2xhc3MgPSAiJSIgfSk7CmRlcy5vYmplY3QoeyBjbGFzcyA9ICIlIiB9KTsKZGVzLm9iamVjdCh7IGNsYXNzID0gIiUiIH0pOwpkZXMub2JqZWN0KHsgY2xhc3MgPSAiPSIgfSk7CmRlcy5vYmplY3QoeyBjbGFzcyA9ICIvIiB9KTsKCi0tIE5ldEhhY2sgMy43CXNva29iYW4uZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjEzICQKLS0JQ29weXJpZ2h0IChjKSAxOTk4LTE5OTkgYnkgS2V2aW4gSHVnbwotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQotLQotLSBJbiBjYXNlIHlvdSBoYXZlbid0IHBsYXllZCB0aGUgZ2FtZSBTb2tvYmFuLCB5b3UnbGwgbGVhcm4KLS0gcXVpY2tseS4gIFRoaXMgYnJhbmNoIGlzbid0IHBhcnRpY3VsYXJseSBkaWZmaWN1bHQsIGp1c3QgdGltZQotLSBjb25zdW1pbmcuICBTb21lIHBsYXllcnMgbWF5IHdpc2ggdG8gc2tpcCB0aGlzIGJyYW5jaC4KLS0KLS0gVGhlIGZvbGxvd2luZyBhY3Rpb25zIGFyZSBjdXJyZW50bHkgcGVybWl0dGVkIHdpdGhvdXQgcGVuYWx0eToKLS0gICBDYXJyeWluZyBvciB0aHJvd2luZyBhIGJvdWxkZXIgYWxyZWFkeSBpbiBpbnZlbnRvcnkKLS0gICAgIChwbGF5ZXIgb3Igbm9ucGxheWVyKS4KLS0gICBUZWxlcG9ydGluZyBib3VsZGVycy4KLS0gICBEaWdnaW5nIGluIHRoZSBmbG9vci4KLS0gVGhlIGZvbGxvd2luZyBhY3Rpb25zIGFyZSBwZXJtaXR0ZWQsIGJ1dCB3aXRoIGEgbHVjayBwZW5hbHR5OgotLSAgIEJyZWFraW5nIGJvdWxkZXJzLgotLSAgIFN0b25lLXRvLWZsZXNoaW5nIGJvdWxkZXJzLgotLSAgIENyZWF0aW5nIG5ldyBib3VsZGVycyAoZS5nLiwgd2l0aCBhIHNjcm9sbCBvZiBlYXJ0aCkuCi0tICAgSnVtcGluZy4KLS0gICBCZWluZyBwdWxsZWQgYnkgYSB0aHJvd24gaXJvbiBiYWxsLgotLSAgIEh1cnRsaW5nIHRocm91Z2ggdGhlIGFpciBmcm9tIE5ld3RvbidzIDNyZCBsYXcuCi0tICAgU3F1ZWV6aW5nIHBhc3QgYm91bGRlcnMgd2hlbiBuYWtlZCBvciBhcyBhIGdpYW50LgotLSBUaGVzZSBhY3Rpb25zIGFyZSBub3QgcGVybWl0dGVkOgotLSAgIE1vdmluZyBkaWFnb25hbGx5IGJldHdlZW4gdHdvIGJvdWxkZXJzIGFuZC9vciB3YWxscy4KLS0gICBQdXNoaW5nIGEgYm91bGRlciBkaWFnb25hbGx5LgotLSAgIFBpY2tpbmcgdXAgYm91bGRlcnMgKHBsYXllciBvciBub25wbGF5ZXIpLgotLSAgIERpZ2dpbmcgb3Igd2Fsa2luZyB0aHJvdWdoIHdhbGxzLgotLSAgIFRlbGVwb3J0aW5nIHdpdGhpbiBsZXZlbHMgb3IgYmV0d2VlbiBsZXZlbHMgb2YgdGhpcyBicmFuY2guCi0tICAgVXNpbmcgY3Vyc2VkIHBvdGlvbnMgb2YgZ2FpbiBsZXZlbC4KLS0gICBFc2NhcGluZyBhIHBpdC9ob2xlIChlLmcuLCBieSBmbHlpbmcsIGxldml0YXRpb24sIG9yCi0tICAgICBwYXNzaW5nIGEgZGV4dGVyaXR5IGNoZWNrKS4KLS0gICBCb25lcyBmaWxlcyBhcmUgbm90IHBlcm1pdHRlZC4KCgotLSMjIEJvdHRvbSAoZmlyc3QpIGxldmVsIG9mIFNva29iYW4gIyMjCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiICIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub3RlbGVwb3J0IiwgImhhcmRmbG9vciIsICJwcmVtYXBwZWQiLCAic29saWRpZnkiKTsKCmRlcy5tYXAoW1sKLS0tLS0tICAtLS0tLSAKfC4uLi58ICB8Li4ufCAKfC4uLi4tLS0tLi4ufCAKfC4uLi4uLi4uLi4ufCAKfC4ufC18LnwtfC4ufCAKLS0tLS0tLS0tfC4tLS0KfC4uLi4uLnwuLi4uLnwKfC4uLS0tLXwuLi4uLnwKLS0ufCAgIHwuLi4uLnwKIHwufC0tLXwuLi4uLnwKIHwuLi4uLi4uLi4uLnwKIHwuLnwtLS0tLS0tLS0KIC0tLS0gICAgICAgICAKXV0pOwpkZXMubGV2cmVnaW9uKHsgcmVnaW9uID0gezA2LDA0LDA2LDA0fSwgdHlwZSA9ICJicmFuY2giIH0pCmRlcy5zdGFpcigidXAiLCAwNiwwNikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMCwwMCwxMywxMiksICJsaXQiKQpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDEzLDEyKSkKZGVzLm5vbl9wYXNzd2FsbChzZWxlY3Rpb24uYXJlYSgwMCwwMCwxMywxMikpCgotLSBCb3VsZGVycwpkZXMub2JqZWN0KCJib3VsZGVyIiwwMiwwMikKZGVzLm9iamVjdCgiYm91bGRlciIsMDIsMDMpCi0tCmRlcy5vYmplY3QoImJvdWxkZXIiLDEwLDAyKQpkZXMub2JqZWN0KCJib3VsZGVyIiwwOSwwMykKZGVzLm9iamVjdCgiYm91bGRlciIsMTAsMDQpCi0tCmRlcy5vYmplY3QoImJvdWxkZXIiLDA4LDA3KQpkZXMub2JqZWN0KCJib3VsZGVyIiwwOSwwOCkKZGVzLm9iamVjdCgiYm91bGRlciIsMDksMDkpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA4LDEwKQpkZXMub2JqZWN0KCJib3VsZGVyIiwxMCwxMCkKCi0tIFRyYXBzCmRlcy50cmFwKCJwaXQiLDAzLDA2KQpkZXMudHJhcCgicGl0IiwwNCwwNikKZGVzLnRyYXAoInBpdCIsMDUsMDYpCmRlcy50cmFwKCJwaXQiLDAyLDA4KQpkZXMudHJhcCgicGl0IiwwMiwwOSkKZGVzLnRyYXAoInBpdCIsMDQsMTApCmRlcy50cmFwKCJwaXQiLDA1LDEwKQpkZXMudHJhcCgicGl0IiwwNiwxMCkKZGVzLnRyYXAoInBpdCIsMDcsMTApCgotLSBBIGxpdHRsZSBoZWxwCmRlcy5vYmplY3QoImVhcnRoIiwwMiwxMSkKZGVzLm9iamVjdCgiZWFydGgiLDAzLDExKQoKLS0gUmFuZG9tIG9iamVjdHMKZGVzLm9iamVjdCh7IGNsYXNzID0gIiUiIH0pOwpkZXMub2JqZWN0KHsgY2xhc3MgPSAiJSIgfSk7CmRlcy5vYmplY3QoeyBjbGFzcyA9ICIlIiB9KTsKZGVzLm9iamVjdCh7IGNsYXNzID0gIiUiIH0pOwpkZXMub2JqZWN0KHsgY2xhc3MgPSAiPSIgfSk7CmRlcy5vYmplY3QoeyBjbGFzcyA9ICIvIiB9KTsKCi0tIE5ldEhhY2sgMy43CXNva29iYW4uZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjEzICQKLS0JQ29weXJpZ2h0IChjKSAxOTk4LTE5OTkgYnkgS2V2aW4gSHVnbwotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm90ZWxlcG9ydCIsICJoYXJkZmxvb3IiLCAicHJlbWFwcGVkIiwgInNvbGlkaWZ5Iik7CgpkZXMubWFwKFtbCi0tLS0tLS0tIC0tLS0tLQp8LnwuLi4ufC18Li4uLnwKfC58LS4uLi4uLi4uLi58CnwufHwuLi4ufC4uLi4ufAp8Lnx8Li4uLnwuLi4uLnwKfC58LS0tLS18Li0tLS0tCnwufCAgICB8Li4uLi4ufAp8Li0tLS0tfC4uLi4uLnwKfC4uLi4uLi4uLi4uLi58CnwuLnwtLS18Li4uLi4ufAotLS0tICAgLS0tLS0tLS0KXV0pOwpkZXMubGV2cmVnaW9uKHsgcmVnaW9uID0gezAzLDAxLDAzLDAxfSwgdHlwZSA9ICJicmFuY2giIH0pCmRlcy5zdGFpcigidXAiLCAwMSwwMSkKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMCwwMCwxNCwxMCksImxpdCIpCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDAsMDAsMTQsMTApKQpkZXMubm9uX3Bhc3N3YWxsKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDE0LDEwKSkKCi0tIEJvdWxkZXJzCmRlcy5vYmplY3QoImJvdWxkZXIiLDA1LDAyKQpkZXMub2JqZWN0KCJib3VsZGVyIiwwNiwwMikKZGVzLm9iamVjdCgiYm91bGRlciIsMDYsMDMpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA3LDAzKQotLQpkZXMub2JqZWN0KCJib3VsZGVyIiwwOSwwNSkKZGVzLm9iamVjdCgiYm91bGRlciIsMTAsMDMpCmRlcy5vYmplY3QoImJvdWxkZXIiLDExLDAyKQpkZXMub2JqZWN0KCJib3VsZGVyIiwxMiwwMykKLS0KZGVzLm9iamVjdCgiYm91bGRlciIsMDcsMDgpCmRlcy5vYmplY3QoImJvdWxkZXIiLDA4LDA4KQpkZXMub2JqZWN0KCJib3VsZGVyIiwwOSwwOCkKZGVzLm9iamVjdCgiYm91bGRlciIsMTAsMDgpCgotLSBUcmFwcwpkZXMudHJhcCgicGl0IiwwMSwwMikKZGVzLnRyYXAoInBpdCIsMDEsMDMpCmRlcy50cmFwKCJwaXQiLDAxLDA0KQpkZXMudHJhcCgicGl0IiwwMSwwNSkKZGVzLnRyYXAoInBpdCIsMDEsMDYpCmRlcy50cmFwKCJwaXQiLDAxLDA3KQpkZXMudHJhcCgicGl0IiwwMywwOCkKZGVzLnRyYXAoInBpdCIsMDQsMDgpCmRlcy50cmFwKCJwaXQiLDA1LDA4KQpkZXMudHJhcCgicGl0IiwwNiwwOCkKCi0tIEEgbGl0dGxlIGhlbHAKZGVzLm9iamVjdCgiZWFydGgiLDAxLDA5KQpkZXMub2JqZWN0KCJlYXJ0aCIsMDIsMDkpCgotLSBSYW5kb20gb2JqZWN0cwpkZXMub2JqZWN0KHsgY2xhc3MgPSAiJSIgfSk7CmRlcy5vYmplY3QoeyBjbGFzcyA9ICIlIiB9KTsKZGVzLm9iamVjdCh7IGNsYXNzID0gIiUiIH0pOwpkZXMub2JqZWN0KHsgY2xhc3MgPSAiJSIgfSk7CmRlcy5vYmplY3QoeyBjbGFzcyA9ICI9IiB9KTsKZGVzLm9iamVjdCh7IGNsYXNzID0gIi8iIH0pOwoKCi0tIE5ldEhhY2sgMy43CXRvd2VyLmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzg0IDIwMTUvMDUvMjUgMDA6MTM6MDQgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS45ICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KLS0KLS0gVXBwZXIgc3RhZ2Ugb2YgVmxhZCdzIHRvd2VyCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiICIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub3RlbGVwb3J0IiwgImhhcmRmbG9vciIsICJzb2xpZGlmeSIpCmRlcy5tYXAoeyBoYWxpZ24gPSAiaGFsZi1sZWZ0IiwgdmFsaWduID0gImNlbnRlciIsIG1hcCA9IFtbCiAgLS0tIC0tLSAtLS0gIAogIHwufCB8LnwgfC58ICAKLS0tUy0tLVMtLS1TLS0tCnwuLi4uLi4uKy4rLi4ufAotLS0rLS0tLS0uLS0tLS0KICB8Li4uXC58LisufCAgCi0tLSstLS0tLS4tLS0tLQp8Li4uLi4uLisuKy4uLnwKLS0tUy0tLVMtLS1TLS0tCiAgfC58IHwufCB8LnwgIAogIC0tLSAtLS0gLS0tICAKXV0gfSk7Cgpsb2NhbCBuaWNoZXMgPSB7IHswMywwMX0sIHswMywwOX0sIHswNywwMX0sIHswNywwOX0sIHsxMSwwMX0sIHsxMSwwOX0gfTsKc2h1ZmZsZShuaWNoZXMpOwoKZGVzLmxhZGRlcigiZG93biIsIDExLDA1KQotLSBUaGUgbG9yZCBhbmQgaGlzIGNvdXJ0CmRlcy5tb25zdGVyKCJWbGFkIHRoZSBJbXBhbGVyIiwgMDYsIDA1KQpkZXMubW9uc3RlcigiViIsbmljaGVzWzFdKQpkZXMubW9uc3RlcigiViIsbmljaGVzWzJdKQpkZXMubW9uc3RlcigiViIsbmljaGVzWzNdKQpkZXMubW9uc3RlcigiViIsbmljaGVzWzRdKQpkZXMubW9uc3RlcigiViIsbmljaGVzWzVdKQpkZXMubW9uc3RlcigiViIsbmljaGVzWzZdKQotLSBUaGUgZG9vcnMKZGVzLmRvb3IoImNsb3NlZCIsMDgsMDMpCmRlcy5kb29yKCJjbG9zZWQiLDEwLDAzKQpkZXMuZG9vcigiY2xvc2VkIiwwMywwNCkKZGVzLmRvb3IoImxvY2tlZCIsMTAsMDUpCmRlcy5kb29yKCJsb2NrZWQiLDA4LDA3KQpkZXMuZG9vcigibG9ja2VkIiwxMCwwNykKZGVzLmRvb3IoImNsb3NlZCIsMDMsMDYpCi0tIHRyZWFzdXJlcwpkZXMub2JqZWN0KCJjaGVzdCIsIDA3LDA1KQoKZGVzLm9iamVjdCgiY2hlc3QiLG5pY2hlc1s2XSkKZGVzLm9iamVjdCgiY2hlc3QiLG5pY2hlc1sxXSkKZGVzLm9iamVjdCgiY2hlc3QiLG5pY2hlc1syXSkKZGVzLm9iamVjdCgiY2hlc3QiLG5pY2hlc1szXSkKZGVzLm9iamVjdCh7IGlkID0gImNoZXN0IiwgY29vcmQ9bmljaGVzWzRdLAogICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBkZXMub2JqZWN0KHsgaWQgPSAid2F4IGNhbmRsZSIsIHF1YW50aXR5PW1hdGgucmFuZG9tKDQsOCkgfSkKICAgICAgICAgICAgIGVuZAp9KTsKZGVzLm9iamVjdCh7IGlkID0gImNoZXN0IiwgY29vcmQ9bmljaGVzWzVdLAogICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBkZXMub2JqZWN0KHsgaWQgPSAidGFsbG93IGNhbmRsZSIsIHF1YW50aXR5PW1hdGgucmFuZG9tKDQsOCkgfSkKICAgICAgICAgICAgIGVuZAp9KTsKLS0gV2UgaGF2ZSB0byBwcm90ZWN0IHRoZSB0b3dlciBhZ2FpbnN0IG91dHNpZGUgYXR0YWNrcwpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDE0LDEwKSkKLS0gTmV0SGFjayAzLjcJdG93ZXIuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjkgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm90ZWxlcG9ydCIsICJoYXJkZmxvb3IiLCAic29saWRpZnkiKQpkZXMubWFwKHsgaGFsaWduID0gImhhbGYtbGVmdCIsIHZhbGlnbiA9ICJjZW50ZXIiLCBtYXAgPSBbWwogIC0tLSAtLS0gLS0tICAKICB8LnwgfC58IHwufCAgCi0tLVMtLS1TLS0tUy0tLQp8LlMuLi4uLi4uLi5TLnwKLS0tLi0tLS0tLSstLS0tCiAgfC4uLi4uLnwuLnwgIAotLS0tLS0tLS4tLS0tLS0KfC5TLi4uLi4uKy4uUy58Ci0tLVMtLS1TLS0tUy0tLQogIHwufCB8LnwgfC58ICAKICAtLS0gLS0tIC0tLSAgCl1dIH0pOwotLSBSYW5kb20gcGxhY2VzIGFyZSB0aGUgMTAgbmljaGVzCmxvY2FsIHBsYWNlID0geyB7MDMsMDF9LHswNywwMX0sezExLDAxfSx7MDEsMDN9LHsxMywwM30sCgkgICB7MDEsMDd9LHsxMywwN30sezAzLDA5fSx7MDcsMDl9LHsxMSwwOX0gfQpzaHVmZmxlKHBsYWNlKQoKZGVzLmxhZGRlcigidXAiLCAxMSwwNSkKZGVzLmxhZGRlcigiZG93biIsIDAzLDA3KQpkZXMuZG9vcigibG9ja2VkIiwxMCwwNCkKZGVzLmRvb3IoImxvY2tlZCIsMDksMDcpCmRlcy5tb25zdGVyKCImIixwbGFjZVsxMF0pCmRlcy5tb25zdGVyKCImIixwbGFjZVsxXSkKZGVzLm1vbnN0ZXIoImhlbGwgaG91bmQgcHVwIixwbGFjZVsyXSkKZGVzLm1vbnN0ZXIoImhlbGwgaG91bmQgcHVwIixwbGFjZVszXSkKZGVzLm1vbnN0ZXIoIndpbnRlciB3b2xmIixwbGFjZVs0XSkKZGVzLm9iamVjdCh7IGlkID0gImNoZXN0IiwgY29vcmQgPSBwbGFjZVs1XSwKICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgZGVzLm9iamVjdCgiYW11bGV0IG9mIGxpZmUgc2F2aW5nIikKICAgICAgICAgICAgIGVuZAp9KTsKZGVzLm9iamVjdCh7IGlkID0gImNoZXN0IiwgY29vcmQgPSBwbGFjZVs2XSwKICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgZGVzLm9iamVjdCgiYW11bGV0IG9mIHN0cmFuZ3VsYXRpb24iKQogICAgICAgICAgICAgZW5kCn0pOwpkZXMub2JqZWN0KCJ3YXRlciB3YWxraW5nIGJvb3RzIixwbGFjZVs3XSkKZGVzLm9iamVjdCgiY3J5c3RhbCBwbGF0ZSBtYWlsIixwbGFjZVs4XSkKZGVzLm9iamVjdCgiaW52aXNpYmlsaXR5IixwbGFjZVs5XSkKLS0gV2FsbHMgaW4gdGhlIHRvd2VyIGFyZSBub24gZGlnZ2FibGUKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgwMCwwMCwxNCwxMCkpCgotLSBOZXRIYWNrIDMuNwl0b3dlci5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4NCAyMDE1LzA1LzI1IDAwOjEzOjA0ICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuOSAkCi0tCUNvcHlyaWdodCAoYykgMTk4OSBieSBKZWFuLUNocmlzdG9waGUgQ29sbGV0Ci0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiICIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub3RlbGVwb3J0IiwgImhhcmRmbG9vciIsICJzb2xpZGlmeSIpCmRlcy5tYXAoeyBoYWxpZ24gPSAiaGFsZi1sZWZ0IiwgdmFsaWduID0gImNlbnRlciIsIG1hcCA9IFtbCiAgICAtLS0gLS0tIC0tLSAgICAKICAgIHwufCB8LnwgfC58ICAgIAogIC0tLVMtLS1TLS0tUy0tLSAgCiAgfC5TLi4uLi4uLi4uUy58ICAKLS0tLS0uLi4uLi4uLi4tLS0tLQp8Li4ufC4uLi4uLi4uLisuLi58CnwuLS0tLi4uLi4uLi4uLS0tLnwKfC58LlMuLi4uLi4uLi5TLnwufAp8Li0tLVMtLS1TLS0tUy0tLS58CnwuLi58LnwufC58LnwufC4uLnwKLS0tLi0tLS4tLS0uLS0tLi0tLQogIHwuLi4uLi4uLi4uLi4ufCAgCiAgLS0tLS0tLS0tLS0tLS0tICAKXV0gfSk7Ci0tIFJhbmRvbSBwbGFjZXMgYXJlIHRoZSAxMCBuaWNoZXMKbG9jYWwgcGxhY2UgPSB7IHswNSwwMX0sezA5LDAxfSx7MTMsMDF9LHswMywwM30sezE1LDAzfSwKCSAgIHswMywwN30sezE1LDA3fSx7MDUsMDl9LHswOSwwOX0sezEzLDA5fSB9CgpkZXMubGV2cmVnaW9uKHsgdHlwZT0iYnJhbmNoIiwgcmVnaW9uPXswMiwwNSwwMiwwNX0gfSkKZGVzLmxhZGRlcigidXAiLCAwNSwwNykKLS0gRW50cnkgZG9vciBpcywgb2YgY291cnNlLCBsb2NrZWQKZGVzLmRvb3IoImxvY2tlZCIsMTQsMDUpCi0tIExldCdzIHB1dCBhIGRyYWdvbiBiZWhpbmQgdGhlIGRvb3IsIGp1c3QgZm9yIHRoZSBmdW4uLi4KZGVzLm1vbnN0ZXIoIkQiLCAxMywgMDUpCmRlcy5tb25zdGVyKHsgeD0xMiwgeT0wNCB9KQpkZXMubW9uc3Rlcih7IHg9MTIsIHk9MDYgfSkKZGVzLm1vbnN0ZXIoKQpkZXMubW9uc3RlcigpCmRlcy5tb25zdGVyKCkKZGVzLm1vbnN0ZXIoKQpkZXMubW9uc3RlcigpCmRlcy5tb25zdGVyKCkKZGVzLm9iamVjdCgibG9uZyBzd29yZCIscGxhY2VbNF0pCmRlcy50cmFwKHsgY29vcmQgPSBwbGFjZVs0XSB9KQpkZXMub2JqZWN0KCJsb2NrIHBpY2siLHBsYWNlWzFdKQpkZXMudHJhcCh7IGNvb3JkID0gcGxhY2VbMV0gfSkKZGVzLm9iamVjdCgiZWx2ZW4gY2xvYWsiLHBsYWNlWzJdKQpkZXMudHJhcCh7IGNvb3JkID0gcGxhY2VbMl0gfSkKZGVzLm9iamVjdCgiYmxpbmRmb2xkIixwbGFjZVszXSkKZGVzLnRyYXAoeyBjb29yZCA9IHBsYWNlWzNdIH0pCi0tIFdhbGxzIGluIHRoZSB0b3dlciBhcmUgbm9uIGRpZ2dhYmxlCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDAsMDAsMTgsMTIpKQotLSBOZXRIYWNrIDMuNwlnZWhlbm5vbS5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4MyAyMDE1LzA1LzI1IDAwOjEzOjAzICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTMgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTIgYnkgTS4gU3RlcGhlbnNvbiBhbmQgSXpjaGFrIE1pbGxlcgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQotLQoKZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIiwgIm5vdGVsZXBvcnQiLCAiaGFyZGZsb29yIiwgIm5vbW1hcCIpOwoKZGVzLm1hcChbWwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCnwuLi5TLnwuLnwuLi4uLnwgIHwuLi4uLi18ICAgICAgfC4uLi4uLi4uLi4uLi4uLi58ICAgfC4uLi4uLi4uLi4uLi4uLnwgfC4uLnwKfC0tLXwufC4tLS4tLS0ufCAgfC4uLi4uLi0tLSAtLS0tLi4uLi4uLi4uLi0tLS0tLi0tLS0tLi4uLi0tLS4uLi4uLi4uLS0tLi0ufAp8ICAgfC58LnwuLnwgfC58IC0tLi4uLi4uLi58IHwuLi4uLi4uLi4uLi4ufCAgIHwuLi4uLi4uLS0tfCB8LS4uLi4uLi4uLi4uLS18CnwgICB8Li4uUy4ufCB8LnwgfC4uLi4uLi4tLS0tLS4uLi4uLi4tLS0tLS18ICAgfC0tLS0tLS0tLi4tLS0uLi4uLi4tLS0tLS0tIHwKfC0tLS0tLS0tLS0tIHwufCB8LS4uLi4uLnwgfC4uLi58Li4uLS0gfC4uLi0tLS0tLi4uLi4uLi4uLi4uLi4uLi0tLS0gICAgICAgfAp8Li4uLi5TLi4uLi0tLS58IHwuLi4uLi4ufCB8Li4uLnwuLi58ICB8Li4uLi4uLi4uLi4uLi4tLS0tLS0tLS0tLSAgICAgICAgICB8CnwuLi4uLnwufC4uLi4uLnwgfC4uLi4uLS0tIHwuLi4uLi4tLS0gIHwuLi4uLS0tLi4uLi4uLnwgICAgICAgICAgICAgICAgICAgIHwKfC4uLi4ufC58LS0tLS0tfCB8Li4uLi0tICAgLS0uLi4uLS0gfC0tLS0tLS0tIC0tLS0uLi4uLS0tLS0tLS0tLS0tLS0tICAgICAgfAp8Li4uLi58LS0uLi4uLi4tLS1CQkItfCAgICAgfC4uLi0tICB8Li4uLi4uLnwgICAgfC4uLi4uLi4uLi4uLi4uLi4uLnwgICAgICB8CnwuLi4uLi4uLi4ufHwuLi4uLi4uLi18ICAgIC0tLi4ufCAgIHwuLi4uLi4ufCAgICB8Li4ufHwuLi4uLi4uLi4uLi4ufCAgICAgIHwKfC4uLi4ufC4uLi18fC0uLi4uLi4uLi0tLS0tLS4uLi58ICAgfC4uLi4uLi4tLS0tIHwuLi58fC4uLi4uLi4uLi4uLi4tLSAgICAgfAp8Li4uLi58LS0uLi4uLi4tLS0uLi4uLi4uLi4uLi0tLS0tLS0tLi4uLi4uLi4uLnwgfC4uLi4uLi4tLS0tLS0tLS0uLi4tLSAgICB8CnwuLi4uLnwgfC0tLS0tLXwgfC0tLi4uLi4uLi0tfCAgIHwuLkIuLi4uLi4tLS0tLSAtLS0tLS4uLi58IHwufCAgfC4uLi4tLS0gIHwKfC4uLi4ufCB8Li4uLi4uLS18IC0tLS0tLS4ufCB8LS0tLS4uQi4uLi4uLnwgICAgICAgfC4tLS0tLS0tLS4tLSB8LS4uLi4uLS0tfAp8LS0tLS0tIHwuLi4uLi4uLnwgIHwufC4uLi58IHwuLi4uLi0tLS1CQkJCLS0tLS0tLS0tLi4uLi4uLi4uLi4tLS0uLi4uLi4uLi58CnwgICAgICAgfC4uLi4uLi4ufCAgfC4uLnwuLnwgfC4uLi4ufCAgfC0uLi4uLi4uLi4uLi4uLS0tLS0tLS0uLi4uLi4uLi4uLi0tLXwKfCAgICAgICAtLS4uLi4uLS0tLS0tLS0tLS0ufCB8Li4uLi0tLS0tLi4uLi4tLS0tLS0tLS0tICAgICB8Li4uLi4uLi4uLS0tLSAgfAp8ICAgICAgICB8Li58Li5CLi4uLi4uLi4uLi58IHwufC4uLi4uLi4uLi58LnwgICAgICAgICAgICAgIHwufC4uLi4uLi4ufCAgICB8Ci0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KXV0pOwoKLS0gTWFrZSB0aGUgcGF0aCBzb21ld2hhdCB1bnByZWRpY3RhYmxlCi0tIElmIHlvdSBnZXQgImx1Y2t5IiwgeW91IG1heSBoYXZlIHRvIGdvIHRocm91Z2ggYWxsIHRocmVlIGdyYXZleWFyZHMuCmlmIHBlcmNlbnQoNTApIHRoZW4KICAgZGVzLnRlcnJhaW4oc2VsZWN0aW9uLmxpbmUoNTAsOCwgNTMsOCksICctJykKICAgZGVzLnRlcnJhaW4oc2VsZWN0aW9uLmxpbmUoNDAsOCwgNDMsOCksICdCJykKZW5kCmlmIHBlcmNlbnQoNTApIHRoZW4KICAgZGVzLnRlcnJhaW4oeyB4PTI3LCB5PTEyLCB0eXA9J3wnIH0pCiAgIGRlcy50ZXJyYWluKHNlbGVjdGlvbi5saW5lKDI3LDMsIDI5LDMpLCAnQicpCiAgIGRlcy50ZXJyYWluKHsgeD0yOCwgeT0yLCB0eXA9Jy0nIH0pCmVuZAppZiBwZXJjZW50KDUwKSB0aGVuCiAgIGRlcy50ZXJyYWluKHNlbGVjdGlvbi5saW5lKDE2LDEwLCAxNiwxMSksICd8JykKICAgZGVzLnRlcnJhaW4oc2VsZWN0aW9uLmxpbmUoOSwxMywgMTQsMTMpLCAnQicpCmVuZAoKCi0tIER1bmdlb24gRGVzY3JpcHRpb24KLS0gVGhlIHNocmluZSB0byBNb2xvY2guCmRlcy5yZWdpb24oeyByZWdpb249ezAxLDA2LCAwNSwxNH0sbGl0PTEsdHlwZT0idGVtcGxlIixmaWxsZWQ9MiB9KQotLSBUaGUgTW9yZ3VlcwpkZXMucmVnaW9uKHsgcmVnaW9uPXsxOSwwMSwgMjQsMDh9LGxpdD0wLHR5cGU9Im1vcmd1ZSIsZmlsbGVkPTEsaXJyZWd1bGFyPTEgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MDksMTQsIDE2LDE4fSxsaXQ9MCx0eXBlPSJtb3JndWUiLGZpbGxlZD0xLGlycmVndWxhcj0xIH0pCmRlcy5yZWdpb24oeyByZWdpb249ezM3LDA5LCA0MywxNH0sbGl0PTAsdHlwZT0ibW9yZ3VlIixmaWxsZWQ9MSxpcnJlZ3VsYXI9MSB9KQotLSBTdGFpcnMKZGVzLnN0YWlyKCJkb3duIiwgMDEsMDEpCi0tIEJyYW5jaCBsb2NhdGlvbgpkZXMubGV2cmVnaW9uKHsgdHlwZT0iYnJhbmNoIiwgcmVnaW9uPXs2NiwxNyw2NiwxN30gfSkKZGVzLnRlbGVwb3J0X3JlZ2lvbih7IHJlZ2lvbiA9IHs1OCwwOSw3MiwxOH0sIGRpcj0iZG93biIgfSkKCi0tIFNlY3JldCBEb29ycwpkZXMuZG9vcigibG9ja2VkIiwwNCwwMSkKZGVzLmRvb3IoImxvY2tlZCIsMDgsMDQpCmRlcy5kb29yKCJsb2NrZWQiLDA2LDA2KQoKLS0gVGhlIGFsdGFyIG9mIE1vbG9jaC4KZGVzLmFsdGFyKHsgeD0wMyx5PTEwLGFsaWduPSJub2FsaWduIiwgdHlwZT0ic2hyaW5lIiB9KQoKLS0gTm9uIGRpZ2dhYmxlIHdhbGxzIC0gZXZlcnl3aGVyZSEKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgwMCwwMCw3NSwxOSkpCgotLSBPYmplY3RzCi0tICoqTE9UUyoqIG9mIGRlYWQgYm9kaWVzIChhbGwgaHVtYW4pLgotLSBub3RlOiBubyBwcmllc3QoZXNzZSlzIG9yIG1vbmtzIC0gbWF5YmUgTW9sb2NoIGhhcyBhICpzcGVjaWFsKgotLSAgICAgICBmYXRlIHJlc2VydmVkIGZvciBtZW1iZXJzIG9mICp0aG9zZSogY2xhc3Nlcy4KLS0KZGVzLm9iamVjdCh7IGlkPSJjb3Jwc2UiLG1vbnR5cGU9ImFyY2hlb2xvZ2lzdCIgfSkKZGVzLm9iamVjdCh7IGlkPSJjb3Jwc2UiLG1vbnR5cGU9ImFyY2hlb2xvZ2lzdCIgfSkKZGVzLm9iamVjdCh7IGlkPSJjb3Jwc2UiLG1vbnR5cGU9ImJhcmJhcmlhbiIgfSkKZGVzLm9iamVjdCh7IGlkPSJjb3Jwc2UiLG1vbnR5cGU9ImJhcmJhcmlhbiIgfSkKZGVzLm9iamVjdCh7IGlkPSJjb3Jwc2UiLG1vbnR5cGU9ImNhdmVtYW4iIH0pCmRlcy5vYmplY3QoeyBpZD0iY29ycHNlIixtb250eXBlPSJjYXZld29tYW4iIH0pCmRlcy5vYmplY3QoeyBpZD0iY29ycHNlIixtb250eXBlPSJoZWFsZXIiIH0pCmRlcy5vYmplY3QoeyBpZD0iY29ycHNlIixtb250eXBlPSJoZWFsZXIiIH0pCmRlcy5vYmplY3QoeyBpZD0iY29ycHNlIixtb250eXBlPSJrbmlnaHQiIH0pCmRlcy5vYmplY3QoeyBpZD0iY29ycHNlIixtb250eXBlPSJrbmlnaHQiIH0pCmRlcy5vYmplY3QoeyBpZD0iY29ycHNlIixtb250eXBlPSJyYW5nZXIiIH0pCmRlcy5vYmplY3QoeyBpZD0iY29ycHNlIixtb250eXBlPSJyYW5nZXIiIH0pCmRlcy5vYmplY3QoeyBpZD0iY29ycHNlIixtb250eXBlPSJyb2d1ZSIgfSkKZGVzLm9iamVjdCh7IGlkPSJjb3Jwc2UiLG1vbnR5cGU9InJvZ3VlIiB9KQpkZXMub2JqZWN0KHsgaWQ9ImNvcnBzZSIsbW9udHlwZT0ic2FtdXJhaSIgfSkKZGVzLm9iamVjdCh7IGlkPSJjb3Jwc2UiLG1vbnR5cGU9InNhbXVyYWkiIH0pCmRlcy5vYmplY3QoeyBpZD0iY29ycHNlIixtb250eXBlPSJ0b3VyaXN0IiB9KQpkZXMub2JqZWN0KHsgaWQ9ImNvcnBzZSIsbW9udHlwZT0idG91cmlzdCIgfSkKZGVzLm9iamVjdCh7IGlkPSJjb3Jwc2UiLG1vbnR5cGU9InZhbGt5cmllIiB9KQpkZXMub2JqZWN0KHsgaWQ9ImNvcnBzZSIsbW9udHlwZT0idmFsa3lyaWUiIH0pCmRlcy5vYmplY3QoeyBpZD0iY29ycHNlIixtb250eXBlPSJ3aXphcmQiIH0pCmRlcy5vYmplY3QoeyBpZD0iY29ycHNlIixtb250eXBlPSJ3aXphcmQiIH0pCi0tCi0tIFNvbWUgcmFuZG9tIHdlYXBvbnMgYW5kIGFybW9yLgotLQpkZXMub2JqZWN0KCJbIikKZGVzLm9iamVjdCgiWyIpCmRlcy5vYmplY3QoIlsiKQpkZXMub2JqZWN0KCJbIikKZGVzLm9iamVjdCgiKSIpCmRlcy5vYmplY3QoIikiKQpkZXMub2JqZWN0KCIpIikKZGVzLm9iamVjdCgiKSIpCi0tCi0tIFNvbWUgcmFuZG9tIGxvb3QuCi0tCmRlcy5vYmplY3QoInJ1YnkiKQpkZXMub2JqZWN0KCIqIikKZGVzLm9iamVjdCgiKiIpCmRlcy5vYmplY3QoIiEiKQpkZXMub2JqZWN0KCIhIikKZGVzLm9iamVjdCgiISIpCmRlcy5vYmplY3QoIj8iKQpkZXMub2JqZWN0KCI/IikKZGVzLm9iamVjdCgiPyIpCmRlcy5vYmplY3QoIi8iKQpkZXMub2JqZWN0KCIvIikKZGVzLm9iamVjdCgiPSIpCmRlcy5vYmplY3QoIj0iKQpkZXMub2JqZWN0KCIrIikKZGVzLm9iamVjdCgiKyIpCmRlcy5vYmplY3QoIigiKQpkZXMub2JqZWN0KCIoIikKZGVzLm9iamVjdCgiKCIpCgotLSAoTm90IHNvKSBSYW5kb20gdHJhcHMuCmRlcy50cmFwKCJzcGlrZWQgcGl0IiwgMDUsMDIpCmRlcy50cmFwKCJzcGlrZWQgcGl0IiwgMTQsMDUpCmRlcy50cmFwKCJzbGVlcCBnYXMiLCAwMywwMSkKZGVzLnRyYXAoImJvYXJkIiwgMjEsMTIpCmRlcy50cmFwKCJib2FyZCIpCmRlcy50cmFwKCJkYXJ0IiwgNjAsMDEpCmRlcy50cmFwKCJkYXJ0IiwgMjYsMTcpCmRlcy50cmFwKCJhbnRpIG1hZ2ljIikKZGVzLnRyYXAoImFudGkgbWFnaWMiKQpkZXMudHJhcCgibWFnaWMiKQpkZXMudHJhcCgibWFnaWMiKQoKLS0gUmFuZG9tIG1vbnN0ZXJzLgotLSBUaGUgZ2hvc3RzLgpkZXMubW9uc3RlcigiZ2hvc3QiKQpkZXMubW9uc3RlcigiZ2hvc3QiKQpkZXMubW9uc3RlcigiZ2hvc3QiKQpkZXMubW9uc3RlcigiZ2hvc3QiKQpkZXMubW9uc3RlcigiZ2hvc3QiKQpkZXMubW9uc3RlcigiZ2hvc3QiKQotLSBBZGQgYSBmZXcgYmF0cyBmb3IgYXRtb3NwaGVyZS4KZGVzLm1vbnN0ZXIoInZhbXBpcmUgYmF0IikKZGVzLm1vbnN0ZXIoInZhbXBpcmUgYmF0IikKZGVzLm1vbnN0ZXIoInZhbXBpcmUgYmF0IikKLS0gQW5kIGEgbGljaCBmb3IgZ29vZCBtZWFzdXJlLgpkZXMubW9uc3RlcigiTCIpCi0tIFNvbWUgdW5kZWFkIG5hc3RpZXMgZm9yIGdvb2QgbWVhc3VyZQpkZXMubW9uc3RlcigiViIpCmRlcy5tb25zdGVyKCJWIikKZGVzLm1vbnN0ZXIoIlYiKQpkZXMubW9uc3RlcigiWiIpCmRlcy5tb25zdGVyKCJaIikKZGVzLm1vbnN0ZXIoIloiKQpkZXMubW9uc3RlcigiWiIpCmRlcy5tb25zdGVyKCJNIikKZGVzLm1vbnN0ZXIoIk0iKQpkZXMubW9uc3RlcigiTSIpCmRlcy5tb25zdGVyKCJNIikKLS0gTmV0SGFjayAzLjcJeWVuZG9yLmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzgzIDIwMTUvMDUvMjUgMDA6MTM6MDMgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS4xMCAkCi0tCUNvcHlyaWdodCAoYykgMTk4OSBieSBKZWFuLUNocmlzdG9waGUgQ29sbGV0Ci0tCUNvcHlyaWdodCAoYykgMTk5MiBieSBNLiBTdGVwaGVuc29uIGFuZCBJemNoYWsgTWlsbGVyCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCi0tCi0tIFRoZSB0b3AgKHJlYWwpIHdpemFyZCBsZXZlbC4KLS0gS2VlcGluZyB0aGUgTW9hdCBmb3Igb2xkLXRpbWUncyBzYWtlCmRlcy5sZXZlbF9pbml0KHsgc3R5bGU9Im1hemVncmlkIiwgYmcgPSItIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIiwgIm5vdGVsZXBvcnQiLCAiaGFyZGZsb29yIikKZGVzLm1hcChbWwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLgp8Li4uLi4uLnwuLnwuLi4uLi4uLi58Li4uLi58Lgp8Li4uLi4uLlMuLnwufX19fX19fS58Li4uLi58Lgp8Li4tLVMtLXwuLnwufX0tLS19fS58LS0tUy18Lgp8Li58Li4uLnwuLnwufS0tLi0tfS58Li58Li58Lgp8Li58Li4uLnwuLnwufXwuLi58fS58Li58Li58Lgp8Li4tLS0tLS0tLXwufS0tLi0tfS58Li58Li58Lgp8Li58Li4uLi4uLnwufX0tLS19fS58Li58Li58Lgp8Li5TLi4uLi4uLnwufX19fX19fS58Li58Li58Lgp8Li58Li4uLi4uLnwuLi4uLi4uLi58Li58Li58Lgp8Li58Li4uLi4uLnwtLS0tLS0tLS0tLVMtUy18Lgp8Li58Li4uLi4uLlMuLi4uLi4uLi4uLi4uLi58LgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLgpdXSk7CmRlcy5sZXZyZWdpb24oeyB0eXBlPSJzdGFpci11cCIsIHJlZ2lvbj17MDEsMDAsNzksMjB9LCByZWdpb25faXNsZXY9MSwgZXhjbHVkZT17MCwwLDI4LDEyfSB9KQpkZXMubGV2cmVnaW9uKHsgdHlwZT0ic3RhaXItZG93biIsIHJlZ2lvbj17MDEsMDAsNzksMjB9LCByZWdpb25faXNsZXY9MSwgZXhjbHVkZT17MCwwLDI4LDEyfSB9KQpkZXMubGV2cmVnaW9uKHsgdHlwZT0iYnJhbmNoIiwgcmVnaW9uPXswMSwwMCw3OSwyMH0sIHJlZ2lvbl9pc2xldj0xLCBleGNsdWRlPXswLDAsMjgsMTJ9IH0pCmRlcy50ZWxlcG9ydF9yZWdpb24oeyByZWdpb249ezAxLDAwLDc5LDIwfSwgcmVnaW9uX2lzbGV2PTEsIGV4Y2x1ZGU9ezAsMCwyNywxMn0gfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MTIsMDEsIDIwLDA5fSwgbGl0PTAsIHR5cGU9Im1vcmd1ZSIsIGZpbGxlZD0yLCBjb250ZW50cz1mdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2NhbCBzZHdhbGwgPSB7ICJzb3V0aCIsICJ3ZXN0IiwgImVhc3QiIH07CiAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHdhbGwgPSBzZHdhbGxbbWF0aC5yYW5kb20oMSwgI3Nkd2FsbCldLCBzdGF0ZSA9ICJzZWNyZXQiIH0pOwplbmQgfSkKLS0gYW5vdGhlciByZWdpb24gdG8gY29uc3RyYWluIG1vbnN0ZXIgYXJyaXZhbApkZXMucmVnaW9uKHsgcmVnaW9uPXswMSwwMSwgMTAsMTF9LCBsaXQ9MCwgdHlwZT0ib3JkaW5hcnkiLCBhcnJpdmFsX3Jvb209dHJ1ZSB9KQpkZXMubWF6ZXdhbGsoMjgsMDUsImVhc3QiKQpkZXMubGFkZGVyKCJkb3duIiwgMDYsMDUpCi0tIE5vbiBkaWdnYWJsZSB3YWxscwotLSBXYWxscyBpbnNpZGUgdGhlIG1vYXQgc3RheSBkaWdnYWJsZQpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDExLDEyKSkKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgxMSwwMCwyMSwwMCkpCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMTEsMTAsMjcsMTIpKQpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDIxLDAwLDI3LDEwKSkKLS0gTm9uIHBhc3NhYmxlIHdhbGxzCmRlcy5ub25fcGFzc3dhbGwoc2VsZWN0aW9uLmFyZWEoMDAsMDAsMTEsMTIpKQpkZXMubm9uX3Bhc3N3YWxsKHNlbGVjdGlvbi5hcmVhKDExLDAwLDIxLDAwKSkKZGVzLm5vbl9wYXNzd2FsbChzZWxlY3Rpb24uYXJlYSgxMSwxMCwyNywxMikpCmRlcy5ub25fcGFzc3dhbGwoc2VsZWN0aW9uLmFyZWEoMjEsMDAsMjcsMTApKQotLSBUaGUgd2l6YXJkIGFuZCBoaXMgZ3VhcmRzCmRlcy5tb25zdGVyKHsgaWQgPSAiV2l6YXJkIG9mIFllbmRvciIsIHg9MTYsIHk9MDUsIGFzbGVlcD0xIH0pCmRlcy5tb25zdGVyKCJoZWxsIGhvdW5kIiwgMTUsIDA1KQpkZXMubW9uc3RlcigidmFtcGlyZSBsb3JkIiwgMTcsIDA1KQotLSBUaGUgbG9jYWwgdHJlYXN1cmUKZGVzLm9iamVjdCgiQm9vayBvZiB0aGUgRGVhZCIsIDE2LCAwNSkKLS0gU3Vycm91bmRpbmcgdGVycm9yCmRlcy5tb25zdGVyKCJrcmFrZW4iLCAxNCwgMDIpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiLCAxNywgMDIpCmRlcy5tb25zdGVyKCJrcmFrZW4iLCAxMywgMDQpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiLCAxMywgMDYpCmRlcy5tb25zdGVyKCJrcmFrZW4iLCAxOSwgMDQpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiLCAxOSwgMDYpCmRlcy5tb25zdGVyKCJrcmFrZW4iLCAxNSwgMDgpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiLCAxNywgMDgpCmRlcy5tb25zdGVyKCJwaXJhbmhhIiwgMTUsIDAyKQpkZXMubW9uc3RlcigicGlyYW5oYSIsIDE5LCAwOCkKLS0gUmFuZG9tIG1vbnN0ZXJzCmRlcy5tb25zdGVyKCJEIikKZGVzLm1vbnN0ZXIoIkgiKQpkZXMubW9uc3RlcigiJiIpCmRlcy5tb25zdGVyKCImIikKZGVzLm1vbnN0ZXIoIiYiKQpkZXMubW9uc3RlcigiJiIpCi0tIEFuZCB0byBtYWtlIHRoaW5ncyBhIGxpdHRsZSBoYXJkZXIuCmRlcy50cmFwKCJib2FyZCIsMTYsMDQpCmRlcy50cmFwKCJib2FyZCIsMTYsMDYpCmRlcy50cmFwKCJib2FyZCIsMTUsMDUpCmRlcy50cmFwKCJib2FyZCIsMTcsMDUpCi0tIFJhbmRvbSB0cmFwcy4KZGVzLnRyYXAoInNwaWtlZCBwaXQiKQpkZXMudHJhcCgic2xlZXAgZ2FzIikKZGVzLnRyYXAoImFudGkgbWFnaWMiKQpkZXMudHJhcCgibWFnaWMiKQotLSBTb21lIHJhbmRvbSBsb290LgpkZXMub2JqZWN0KCJydWJ5IikKZGVzLm9iamVjdCgiISIpCmRlcy5vYmplY3QoIiEiKQpkZXMub2JqZWN0KCI/IikKZGVzLm9iamVjdCgiPyIpCmRlcy5vYmplY3QoIisiKQpkZXMub2JqZWN0KCIrIikKZGVzLm9iamVjdCgiKyIpCgotLSBOZXRIYWNrIDMuNwl5ZW5kb3IuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODMgMjAxNS8wNS8yNSAwMDoxMzowMyAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjEwICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkyIGJ5IE0uIFN0ZXBoZW5zb24gYW5kIEl6Y2hhayBNaWxsZXIKLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZT0ibWF6ZWdyaWQiLCBiZyA9Ii0iIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm90ZWxlcG9ydCIsICJoYXJkZmxvb3IiKQpkZXMubWFwKFtbCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0uCnwuLi4uLnwuUy4uLi58Li4uLi4uLi4uLi4uLnwuCnwuLi4uLnwuLS0tLS0tLVMtLS0tLS0tLVMtLXwuCnwuLi4uLnwufC4uLi4uLi4uLnwuLi4uLi4uLnwuCnwuLi1TLS1TfC4uLi4uLi4uLnwuLi4uLi4uLnwuCnwuLnwuLi4ufC4uLi4uLi4uLnwtLS0tLS1TLXwuCnwuLnwuLi4ufC4uLi4uLi4uLnwuLi4uLnwuLnwuCnwtUy0tLS0tfC4uLi4uLi4uLnwuLi4uLnwuLnwuCnwuLi4uLi4ufC4uLi4uLi4uLnxTLS1TLS0uLnwuCnwuLi4uLi4ufC4uLi4uLi4uLnwufC4uLi4uLnwuCnwtLS0tLVMtLS0tUy0tLS0tLS0ufC4uLi4uLnwuCnwuLi4uLi4uLi4uLi58Li4uLlMufC4uLi4uLnwuCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0uCl1dKTsKZGVzLmxldnJlZ2lvbih7IHR5cGU9InN0YWlyLXVwIiwgcmVnaW9uPXswMSwwMCw3OSwyMH0sIHJlZ2lvbl9pc2xldj0xLCBleGNsdWRlPXswLDAsMjgsMTJ9IH0pCmRlcy5sZXZyZWdpb24oeyB0eXBlPSJzdGFpci1kb3duIiwgcmVnaW9uPXswMSwwMCw3OSwyMH0sIHJlZ2lvbl9pc2xldj0xLCBleGNsdWRlPXswLDAsMjgsMTJ9IH0pCmRlcy5sZXZyZWdpb24oeyB0eXBlPSJicmFuY2giLCByZWdpb249ezAxLDAwLDc5LDIwfSwgcmVnaW9uX2lzbGV2PTEsIGV4Y2x1ZGU9ezAsMCwyOCwxMn0gfSkKZGVzLnRlbGVwb3J0X3JlZ2lvbih7IHJlZ2lvbj17MDEsMDAsNzksMjB9LCByZWdpb25faXNsZXY9MSwgZXhjbHVkZT17MCwwLDI3LDEyfSB9KQotLSBlbnRpcmUgdG93ZXIgaW4gYSByZWdpb24sIGNvbnN0cmFpbnMgbW9uc3RlciBtaWdyYXRpb24KZGVzLnJlZ2lvbih7IHJlZ2lvbj17MDEsMDEsIDI2LDExfSwgbGl0PTAsIHR5cGU9Im9yZGluYXJ5IiwgYXJyaXZhbF9yb29tPXRydWUgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MDksMDMsIDE3LDA5fSwgbGl0PTAsIHR5cGU9InpvbyIsIGZpbGxlZD0xIH0pCmRlcy5kb29yKCJjbG9zZWQiLDE1LDAyKQpkZXMuZG9vcigiY2xvc2VkIiwxMSwxMCkKZGVzLm1hemV3YWxrKDI4LDA1LCJlYXN0IikKZGVzLmxhZGRlcigidXAiLCAxMiwwMSkKZGVzLmxhZGRlcigiZG93biIsIDE0LDExKQotLSBOb24gZGlnZ2FibGUgd2FsbHMgZXZlcnl3aGVyZQpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDI3LDEyKSkKLS0KZGVzLm5vbl9wYXNzd2FsbChzZWxlY3Rpb24uYXJlYSgwMCwwMCwwNiwxMikpCmRlcy5ub25fcGFzc3dhbGwoc2VsZWN0aW9uLmFyZWEoMDYsMDAsMjcsMDIpKQpkZXMubm9uX3Bhc3N3YWxsKHNlbGVjdGlvbi5hcmVhKDE2LDAyLDI3LDEyKSkKZGVzLm5vbl9wYXNzd2FsbChzZWxlY3Rpb24uYXJlYSgwNiwxMiwxNiwxMikpCi0tIFJhbmRvbSB0cmFwcy4KZGVzLnRyYXAoInNwaWtlZCBwaXQiKQpkZXMudHJhcCgic2xlZXAgZ2FzIikKZGVzLnRyYXAoImFudGkgbWFnaWMiKQpkZXMudHJhcCgibWFnaWMiKQotLSBTb21lIHJhbmRvbSBsb290LgpkZXMub2JqZWN0KCIhIikKZGVzLm9iamVjdCgiISIpCmRlcy5vYmplY3QoIj8iKQpkZXMub2JqZWN0KCI/IikKZGVzLm9iamVjdCgiKyIpCi0tIHRyZWFzdXJlcwpkZXMub2JqZWN0KCJcIiIsIDA0LCAwNikKLS0gTmV0SGFjayAzLjcJeWVuZG9yLmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzgzIDIwMTUvMDUvMjUgMDA6MTM6MDMgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS4xMCAkCi0tCUNvcHlyaWdodCAoYykgMTk4OSBieSBKZWFuLUNocmlzdG9waGUgQ29sbGV0Ci0tCUNvcHlyaWdodCAoYykgMTk5MiBieSBNLiBTdGVwaGVuc29uIGFuZCBJemNoYWsgTWlsbGVyCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGU9Im1hemVncmlkIiwgYmcgPSItIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIiwgIm5vdGVsZXBvcnQiLCAiaGFyZGZsb29yIikKZGVzLm1hcChbWwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLgp8Li58Li4uLi4uLi4uLi4uUy4uLi4uLi4uLi58Lgp8Li58Li4tLS0tLS0tLS0tLS0tLS0tLS1TLS18Lgp8Li58Li58Li4uLi4uLi4ufC4uLi4uLi4uLi58Lgp8Li5TLi58Ln19fX19fX0ufC4uLi4uLi4uLi58Lgp8Li58Li58Ln19LS0tfX0ufC1TLS0tLS0tLS18Lgp8Li58Li58Ln0tLS4tLX0ufC4ufC4uLi4uLi58Lgp8Li58Li58Ln18Li4ufH0ufC4ufC4uLi4uLi58Lgp8Li4tLS18Ln0tLS4tLX0ufC4ufC4uLi4uLi58Lgp8Li4uLi58Ln19LS0tfX0ufC4ufC4uLi4uLi58Lgp8Li4uLi5TLn19fX19fX0ufC4ufC4uLi4uLi58Lgp8Li4uLi58Li4uLi4uLi4ufC4ufC4uLi4uLi58LgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLgpdXSk7CmRlcy5sZXZyZWdpb24oeyB0eXBlPSJzdGFpci11cCIsIHJlZ2lvbj17MDEsMDAsNzksMjB9LCByZWdpb25faXNsZXY9MSwgZXhjbHVkZT17MCwwLDI4LDEyfSB9KQpkZXMubGV2cmVnaW9uKHsgdHlwZT0ic3RhaXItZG93biIsIHJlZ2lvbj17MDEsMDAsNzksMjB9LCByZWdpb25faXNsZXY9MSwgZXhjbHVkZT17MCwwLDI4LDEyfSB9KQpkZXMubGV2cmVnaW9uKHsgdHlwZT0iYnJhbmNoIiwgcmVnaW9uPXswMSwwMCw3OSwyMH0sIHJlZ2lvbl9pc2xldj0xLCBleGNsdWRlPXswLDAsMjgsMTJ9IH0pCmRlcy50ZWxlcG9ydF9yZWdpb24oeyByZWdpb249ezAxLDAwLDc5LDIwfSwgcmVnaW9uX2lzbGV2PTEsIGV4Y2x1ZGU9ezAsMCwyNywxMn0gfSkKZGVzLmxldnJlZ2lvbih7IHJlZ2lvbj17MjUsMTEsMjUsMTF9LCB0eXBlPSJwb3J0YWwiLCBuYW1lPSJmYWtld2l6MSIgfSk7CmRlcy5tYXpld2FsaygyOCwwOSwiZWFzdCIpCmRlcy5yZWdpb24oeyByZWdpb249ezA3LDAzLCAxNSwxMX0sIGxpdD0wICx0eXBlPSJtb3JndWUiLCBmaWxsZWQ9MiB9KQpkZXMucmVnaW9uKHsgcmVnaW9uPXsxNywwNiwgMTgsMTF9LCBsaXQ9MCwgdHlwZT0iYmVlaGl2ZSIsIGZpbGxlZD0xIH0pCi0tIG1ha2UgdGhlIGVudHJ5IGNoYW1iZXIgYSByZWFsIHJvb207IGl0IGFmZmVjdHMgbW9uc3RlciBhcnJpdmFsCmRlcy5yZWdpb24oeyByZWdpb249ezIwLDA2LDI2LDExfSxsaXQ9MCx0eXBlPSJvcmRpbmFyeSIsYXJyaXZhbF9yb29tPXRydWUsCiAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvY2FsIHcgPSAibm9ydGgiOwogICAgICAgICAgICAgICAgaWYgcGVyY2VudCg1MCkgdGhlbiB3ID0gIndlc3QiIGVuZAogICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZT0ic2VjcmV0Iiwgd2FsbD13IH0pCiAgICAgICAgICAgICBlbmQKfSk7CmRlcy5kb29yKCJjbG9zZWQiLDE4LDA1KQpkZXMubGFkZGVyKCJ1cCIsIDExLDA3KQotLSBOb24gZGlnZ2FibGUgd2FsbHMKLS0gV2FsbHMgaW5zaWRlIHRoZSBtb2F0IHN0YXkgZGlnZ2FibGUKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgwMCwwMCwwNiwxMikpCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDYsMDAsMjcsMDIpKQpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDE2LDAyLDI3LDEyKSkKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgwNiwxMiwxNiwxMikpCi0tCmRlcy5ub25fcGFzc3dhbGwoc2VsZWN0aW9uLmFyZWEoMDAsMDAsMDYsMTIpKQpkZXMubm9uX3Bhc3N3YWxsKHNlbGVjdGlvbi5hcmVhKDA2LDAwLDI3LDAyKSkKZGVzLm5vbl9wYXNzd2FsbChzZWxlY3Rpb24uYXJlYSgxNiwwMiwyNywxMikpCmRlcy5ub25fcGFzc3dhbGwoc2VsZWN0aW9uLmFyZWEoMDYsMTIsMTYsMTIpKQotLQpkZXMubW9uc3RlcigiTCIsIDEwLCAwNykKZGVzLm1vbnN0ZXIoInZhbXBpcmUgbG9yZCIsIDEyLCAwNykKLS0gU29tZSBzdXJyb3VuZGluZyBob3Jyb3JzCmRlcy5tb25zdGVyKCJrcmFrZW4iLCAwOCwgMDUpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiLCAwOCwgMDgpCmRlcy5tb25zdGVyKCJrcmFrZW4iLCAxNCwgMDUpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiLCAxNCwgMDgpCi0tIE90aGVyIG1vbnN0ZXJzCmRlcy5tb25zdGVyKCJMIikKZGVzLm1vbnN0ZXIoIkQiKQpkZXMubW9uc3RlcigiRCIsIDI2LCAwOSkKZGVzLm1vbnN0ZXIoIiYiKQpkZXMubW9uc3RlcigiJiIpCmRlcy5tb25zdGVyKCImIikKLS0gQW5kIHRvIG1ha2UgdGhpbmdzIGEgbGl0dGxlIGhhcmRlci4KZGVzLnRyYXAoImJvYXJkIiwxMCwwNykKZGVzLnRyYXAoImJvYXJkIiwxMiwwNykKZGVzLnRyYXAoImJvYXJkIiwxMSwwNikKZGVzLnRyYXAoImJvYXJkIiwxMSwwOCkKLS0gU29tZSBsb290CmRlcy5vYmplY3QoIikiKQpkZXMub2JqZWN0KCIhIikKZGVzLm9iamVjdCgiPyIpCmRlcy5vYmplY3QoIj8iKQpkZXMub2JqZWN0KCIoIikKLS0gdHJlYXN1cmVzCmRlcy5vYmplY3QoIlwiIiwgMTEsIDA3KQoKLS0gY29tcGF0aWJpbGl0eSBzaGltCm1hdGgucmFuZG9tID0gZnVuY3Rpb24oLi4uKQogICBsb2NhbCBhcmcgPSB7Li4ufTsKICAgaWYgKCNhcmcgPT0gMSkgdGhlbgogICAgICByZXR1cm4gMSArIG5oLnJuMihhcmdbMV0pOwogICBlbHNlaWYgKCNhcmcgPT0gMikgdGhlbgogICAgICByZXR1cm4gbmgucmFuZG9tKGFyZ1sxXSwgYXJnWzJdICsgMSAtIGFyZ1sxXSk7CiAgIGVsc2UKICAgICAgLS0gd2UgZG9uJ3Qgc3VwcG9ydCByZWFscwogICAgICBlcnJvcigiTmV0SGFjayBtYXRoLnJhbmRvbSByZXF1aXJlcyBhdCBsZWFzdCBvbmUgcGFyYW1ldGVyIik7CiAgIGVuZAplbmQKCmZ1bmN0aW9uIHNodWZmbGUobGlzdCkKICAgZm9yIGkgPSAjbGlzdCwgMiwgLTEgZG8KICAgICAgbG9jYWwgaiA9IG1hdGgucmFuZG9tKGkpCiAgICAgIGxpc3RbaV0sIGxpc3Rbal0gPSBsaXN0W2pdLCBsaXN0W2ldCiAgIGVuZAplbmQKCmFsaWduID0geyAibGF3IiwgIm5ldXRyYWwiLCAiY2hhb3MiIH07CnNodWZmbGUoYWxpZ24pOwoKLS0gZCgyLDYpID0gMmQ2Ci0tIGQoMjApID0gMWQyMCAoc2luZ2xlIGFyZ3VtZW50ID0gaW1wbGljaXQgMSBkaWUpCmZ1bmN0aW9uIGQoZGljZSwgZmFjZXMpCiAgIGlmIChmYWNlcyA9PSBuaWwpIHRoZW4KICAgICAgLS0gMS1hcmcgZm9ybTogYXJndW1lbnQgImRpY2UiIGlzIGFjdHVhbGx5IHRoZSBudW1iZXIgb2YgZmFjZXMKICAgICAgcmV0dXJuIG1hdGgucmFuZG9tKDEsIGRpY2UpCiAgIGVsc2UKICAgICAgbG9jYWwgc3VtID0gMAogICAgICBmb3IgaT0xLGRpY2UgZG8KICAgICAgICAgc3VtID0gc3VtICsgbWF0aC5yYW5kb20oMSwgZmFjZXMpCiAgICAgIGVuZAogICAgICByZXR1cm4gc3VtCiAgIGVuZAplbmQKCi0tIHBlcmNlbnQoMjApIHJldHVybnMgdHJ1ZSAyMCUgb2YgdGhlIHRpbWUKZnVuY3Rpb24gcGVyY2VudCh0aHJlc2hvbGQpCiAgIHJldHVybiBtYXRoLnJhbmRvbSgwLCA5OSkgPCB0aHJlc2hvbGQKZW5kCgpmdW5jdGlvbiBtb25rZm9vZHNob3AoKQogICBpZiAodS5yb2xlID09ICJNb25rIikgdGhlbgogICAgICByZXR1cm4gImhlYWx0aCBmb29kIHNob3AiOwogICBlbmQKICAgcmV0dXJuICJmb29kIHNob3AiOwplbmQKCi0tIHRoZW1lcm9vbXMgaXMgYW4gYXJyYXkgb2YgdGFibGVzIGFuZC9vciBmdW5jdGlvbnMuCi0tIHRoZSB0YWJsZXMgZGVmaW5lICJmcmVxdWVuY3kiLCAiY29udGVudHMiLCAibWluZGlmZiIgYW5kICJtYXhkaWZmIi4KLS0gZnJlcXVlbmN5IGlzIG9wdGlvbmFsOyBpZiBvbWl0dGVkLCAxIGlzIGFzc3VtZWQuCi0tIG1pbmRpZmYgYW5kIG1heGRpZmYgYXJlIG9wdGlvbmFsIGFuZCBpbmRlcGVuZGVudDsgaWYgb21pdHRlZCwgdGhlIHJvb20gaXMKLS0gbm90IGNvbnN0cmFpbmVkIGJ5IGxldmVsIGRpZmZpY3VsdHkuCi0tIGEgcGxhaW4gZnVuY3Rpb24gaGFzIGZyZXF1ZW5jeSBvZiAxLCBhbmQgbm8gZGlmZmljdWx0eSBjb25zdHJhaW50cy4KLS0gZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwgZmlsbGVkID0gMSB9KQotLSAgIC0gb3JkaW5hcnkgcm9vbXMgY2FuIGJlIGNvbnZlcnRlZCB0byBzaG9wcyBvciBhbnkgb3RoZXIgc3BlY2lhbCByb29tcy4KLS0gICAtIGZpbGxlZCA9IDEgbWVhbnMgdGhlIHJvb20gZ2V0cyByYW5kb20gcm9vbSBjb250ZW50cywgZXZlbiBpZiBpdAotLSAgICAgZG9lc24ndCBnZXQgY29udmVydGVkIGludG8gYSBzcGVjaWFsIHJvb20uIFdpdGhvdXQgZmlsbGVkLAotLSAgICAgdGhlIHJvb20gb25seSBnZXRzIHdoYXQgeW91IGRlZmluZSBpbiBoZXJlLgotLSAgIC0gdXNlIHR5cGUgPSAidGhlbWVkIiB0byBmb3JjZSBhIHJvb20gdGhhdCdzIG5ldmVyIGNvbnZlcnRlZAotLSAgICAgdG8gYSBzcGVjaWFsIHJvb20sIHN1Y2ggYXMgYSBzaG9wIG9yIGEgdGVtcGxlLgotLSBjb3JlIGNhbGxzIHRoZW1lcm9vbXNfZ2VuZXJhdGUoKSBtdWx0aXBsZSB0aW1lcyBwZXIgbGV2ZWwKLS0gdG8gZ2VuZXJhdGUgYSBzaW5nbGUgdGhlbWVkIHJvb20uCgp0aGVtZXJvb21zID0gewogICB7CiAgICAgLS0gdGhlICJkZWZhdWx0IiByb29tCiAgICAgIGZyZXF1ZW5jeSA9IDEwMDAsCiAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICBkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLCBmaWxsZWQgPSAxIH0pOwogICAgICAgICBlbmQKICAgfSwKCiAgIC0tIEZha2UgRGVscGhpCiAgIGZ1bmN0aW9uKCkKICAgICAgZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwgdyA9IDExLGggPSA5LCBmaWxsZWQgPSAxLAogICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgIGRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsIHggPSA0LHkgPSAzLCB3ID0gMyxoID0gMywgZmlsbGVkID0gMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZT0icmFuZG9tIiwgd2FsbD0iYWxsIiB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIGVuZAogICAgICB9KTsKICAgZW5kLAoKICAgLS0gUm9vbSBpbiBhIHJvb20KICAgLS0gRklYTUU6IHN1YnJvb20gbG9jYXRpb24gaXMgdG9vIG9mdGVuIGxlZnQvdG9wPwogICBmdW5jdGlvbigpCiAgICAgIGRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsIGZpbGxlZCA9IDEsCiAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZT0icmFuZG9tIiwgd2FsbD0iYWxsIiB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIGVuZAogICAgICB9KTsKICAgZW5kLAoKICAgLS0gSHVnZSByb29tLCB3aXRoIGFub3RoZXIgcm9vbSBpbnNpZGUgKDkwJSkKICAgZnVuY3Rpb24oKQogICAgICBkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLCB3ID0gbmgucm4yKDEwKSsxMSxoID0gbmgucm4yKDUpKzgsIGZpbGxlZCA9IDEsCiAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgaWYgKHBlcmNlbnQoOTApKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwgZmlsbGVkID0gMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZT0icmFuZG9tIiwgd2FsbD0iYWxsIiB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZXJjZW50KDUwKSkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZT0icmFuZG9tIiwgd2FsbD0iYWxsIiB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgZW5kCiAgICAgIH0pOwogICBlbmQsCgogICAtLSBJY2Ugcm9vbQogICBmdW5jdGlvbigpCiAgICAgIGRlcy5yb29tKHsgdHlwZSA9ICJ0aGVtZWQiLCBmaWxsZWQgPSAxLAogICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgIGRlcy50ZXJyYWluKHNlbGVjdGlvbi5mbG9vZGZpbGwoMSwxKSwgIkkiKTsKICAgICAgICAgICAgICAgICBlbmQKICAgICAgfSk7CiAgIGVuZCwKCiAgIC0tIEJvdWxkZXIgcm9vbQogICB7CiAgICAgIG1pbmRpZmYgPSA0LAogICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgZGVzLnJvb20oeyB0eXBlID0gInRoZW1lZCIsCiAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24ocm0pCiAgICAgICAgICAgICAgICAgICAgIGZvciB4ID0gMCwgcm0ud2lkdGggLSAxIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciB5ID0gMCwgcm0uaGVpZ2h0IC0gMSBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVyY2VudCgzMCkpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlcmNlbnQoNTApKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5vYmplY3QoImJvdWxkZXIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMudHJhcCgicm9sbGluZyBib3VsZGVyIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgfSk7CiAgICAgIGVuZAogICB9LAoKICAgLS0gU3BpZGVyIG5lc3QKICAgewogICAgICBtaW5kaWZmID0gMTAsCiAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICBkZXMucm9vbSh7IHR5cGUgPSAidGhlbWVkIiwKICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbihybSkKICAgICAgICAgICAgICAgICAgICAgZm9yIHggPSAwLCBybS53aWR0aCAtIDEgZG8KICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHkgPSAwLCBybS5oZWlnaHQgLSAxIGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZXJjZW50KDMwKSkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMudHJhcCgid2ViIiwgeCwgeSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICB9KTsKICAgICAgZW5kCiAgIH0sCgogICAtLSBUcmFwIHJvb20KICAgZnVuY3Rpb24oKQogICAgICBkZXMucm9vbSh7IHR5cGUgPSAidGhlbWVkIiwgZmlsbGVkID0gMCwKICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKHJtKQogICAgICAgICAgICAgICAgICAgIGxvY2FsIHRyYXBzID0geyAiYXJyb3ciLCAiZGFydCIsICJmYWxsaW5nIHJvY2siLCAiYmVhciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsYW5kIG1pbmUiLCAic2xlZXAgZ2FzIiwgInJ1c3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYW50aSBtYWdpYyIgfTsKICAgICAgICAgICAgICAgICAgICBzaHVmZmxlKHRyYXBzKTsKICAgICAgICAgICAgICAgICAgICBmb3IgeCA9IDAsIHJtLndpZHRoIC0gMSBkbwogICAgICAgICAgICAgICAgICAgICAgIGZvciB5ID0gMCwgcm0uaGVpZ2h0IC0gMSBkbwogICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZXJjZW50KDMwKSkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy50cmFwKHRyYXBzWzFdLCB4LCB5KTsKICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICBlbmQKICAgICAgfSk7CiAgIGVuZCwKCiAgIC0tIEJ1cmllZCB0cmVhc3VyZQogICBmdW5jdGlvbigpCiAgICAgIGRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsIGZpbGxlZCA9IDEsCiAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgZGVzLm9iamVjdCh7IGlkID0gImNoZXN0IiwgYnVyaWVkID0gdHJ1ZSwgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpID0gMSwgZCgzLDQpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5vYmplY3QoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kIH0pOwogICAgICAgICAgICAgICAgIGVuZAogICAgICB9KTsKICAgZW5kLAoKICAgLS0gTWFzc2FjcmUKICAgZnVuY3Rpb24oKQogICAgICBkZXMucm9vbSh7IHR5cGUgPSAidGhlbWVkIiwKICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICBsb2NhbCBtb24gPSB7ICJhcHByZW50aWNlIiwgIndhcnJpb3IiLCAibmluamEiLCAidGh1ZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHVudGVyIiwgImFjb2x5dGUiLCAiYWJib3QiLCAicGFnZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYXR0ZW5kYW50IiwgIm5lYW5kZXJ0aGFsIiwgImNoaWVmdGFpbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3R1ZGVudCIsICJ3aXphcmQiLCAidmFsa3lyaWUiLCAidG91cmlzdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic2FtdXJhaSIsICJyb2d1ZSIsICJyYW5nZXIiLCAicHJpZXN0ZXNzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwcmllc3QiLCAibW9uayIsICJrbmlnaHQiLCAiaGVhbGVyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjYXZld29tYW4iLCAiY2F2ZW1hbiIsICJiYXJiYXJpYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImFyY2hlb2xvZ2lzdCIgfTsKICAgICAgICAgICAgICAgICAgICBzaHVmZmxlKG1vbik7CiAgICAgICAgICAgICAgICAgICAgZm9yIGkgPSAxLCBkKDUsNSkgZG8KICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVyY2VudCgxMCkpIHRoZW4gc2h1ZmZsZShtb24pOyBlbmQKICAgICAgICAgICAgICAgICAgICAgICBkZXMub2JqZWN0KHsgaWQgPSAiY29ycHNlIiwgbW9udHlwZSA9IG1vblsxXSB9KTsKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICBlbmQKICAgICAgfSk7CiAgIGVuZCwKCiAgIC0tIFBpbGxhcnMKICAgZnVuY3Rpb24oKQogICAgICBkZXMucm9vbSh7IHR5cGUgPSAidGhlbWVkIiwgdyA9IDEwLCBoID0gMTAsCiAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbihybSkKICAgICAgICAgICAgICAgICAgICBsb2NhbCB0ZXJyID0geyAiLSIsICItIiwgIi0iLCAiLSIsICJMIiwgIlAiLCAiVCIgfTsKICAgICAgICAgICAgICAgICAgICBzaHVmZmxlKHRlcnIpOwogICAgICAgICAgICAgICAgICAgIGZvciB4ID0gMCwgKHJtLndpZHRoIC8gNCkgLSAxIGRvCiAgICAgICAgICAgICAgICAgICAgICAgZm9yIHkgPSAwLCAocm0uaGVpZ2h0IC8gNCkgLSAxIGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLnRlcnJhaW4oeyB4ID0geCAqIDQgKyAyLCB5ID0geSAqIDQgKyAyLCB0eXAgPSB0ZXJyWzFdLCBsaXQgPSAtMiB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXMudGVycmFpbih7IHggPSB4ICogNCArIDMsIHkgPSB5ICogNCArIDIsIHR5cCA9IHRlcnJbMV0sIGxpdCA9IC0yIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy50ZXJyYWluKHsgeCA9IHggKiA0ICsgMiwgeSA9IHkgKiA0ICsgMywgdHlwID0gdGVyclsxXSwgbGl0ID0gLTIgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLnRlcnJhaW4oeyB4ID0geCAqIDQgKyAzLCB5ID0geSAqIDQgKyAzLCB0eXAgPSB0ZXJyWzFdLCBsaXQgPSAtMiB9KTsKICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICBlbmQKICAgICAgfSk7CiAgIGVuZCwKCiAgIC0tIFN0YXR1YXJ5CiAgIGZ1bmN0aW9uKCkKICAgICAgZGVzLnJvb20oeyB0eXBlID0gInRoZW1lZCIsCiAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgZm9yIGkgPSAxLCBkKDUsNSkgZG8KICAgICAgICAgICAgICAgICAgICAgICBkZXMub2JqZWN0KHsgaWQgPSAic3RhdHVlIiB9KTsKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBmb3IgaSA9IDEsIGQoMykgZG8KICAgICAgICAgICAgICAgICAgICAgICBkZXMudHJhcCgic3RhdHVlIik7CiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgZW5kCiAgICAgIH0pOwogICBlbmQsCgogICAtLSBMaWdodCBzb3VyY2UKICAgZnVuY3Rpb24oKQogICAgICBkZXMucm9vbSh7IHR5cGUgPSAidGhlbWVkIiwgbGl0ID0gMCwKICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICBkZXMub2JqZWN0KHsgaWQgPSAib2lsIGxhbXAiLCBsaXQgPSB0cnVlIH0pOwogICAgICAgICAgICAgICAgIGVuZAogICAgICB9KTsKICAgZW5kLAoKICAgLS0gVGVtcGxlIG9mIHRoZSBnb2RzCiAgIGZ1bmN0aW9uKCkKICAgICAgZGVzLnJvb20oeyB0eXBlID0gInRoZW1lZCIsCiAgICAgICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgZGVzLmFsdGFyKHsgYWxpZ24gPSBhbGlnblsxXSB9KTsKICAgICAgICAgICAgICAgICAgICBkZXMuYWx0YXIoeyBhbGlnbiA9IGFsaWduWzJdIH0pOwogICAgICAgICAgICAgICAgICAgIGRlcy5hbHRhcih7IGFsaWduID0gYWxpZ25bM10gfSk7CiAgICAgICAgICAgICAgICAgZW5kCiAgICAgIH0pOwogICBlbmQsCgogICAtLSBNYXVzb2xldW0KICAgZnVuY3Rpb24oKQogICAgICBkZXMucm9vbSh7IHR5cGUgPSAidGhlbWVkIiwgdyA9IDUgKyBuaC5ybjIoMykqMiwgaCA9IDUgKyBuaC5ybjIoMykqMiwKICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKHJtKQogICAgICAgICAgICAgICAgICAgIGRlcy5yb29tKHsgdHlwZSA9ICJ0aGVtZWQiLAoJCQkgICAgICAgeCA9IChybS53aWR0aCAtIDEpIC8gMiwgeSA9IChybS5oZWlnaHQgLSAxKSAvIDIsCgkJCSAgICAgICB3ID0gMSwgaCA9IDEsIGpvaW5lZCA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZXJjZW50KDUwKSkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgbW9ucyA9IHsgIk0iLCAiViIsICJMIiwgIloiIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaHVmZmxlKG1vbnMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIobW9uc1sxXSwgMCwwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5vYmplY3QoeyBpZCA9ICJjb3Jwc2UiLCBtb250eXBlID0gIkAiLCBjb29yZCA9IHswLDB9IH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVyY2VudCgyMCkpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcy5kb29yKHsgc3RhdGU9InNlY3JldCIsIHdhbGw9ImFsbCIgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIGVuZAogICAgICB9KTsKICAgZW5kLAoKICAgLS0gUmFuZG9tIGR1bmdlb24gZmVhdHVyZSBpbiB0aGUgbWlkZGxlIG9mIGEgb2RkLXNpemVkIHJvb20KICAgZnVuY3Rpb24oKQogICAgICBsb2NhbCB3aWQgPSAzICsgKG5oLnJuMigzKSAqIDIpOwogICAgICBsb2NhbCBoZWkgPSAzICsgKG5oLnJuMigzKSAqIDIpOwogICAgICBkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLCBmaWxsZWQgPSAxLCB3ID0gd2lkLCBoID0gaGVpLAogICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24ocm0pCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgZmVhdHVyZSA9IHsgIkMiLCAiTCIsICJJIiwgIlAiLCAiVCIgfTsKICAgICAgICAgICAgICAgICAgICBzaHVmZmxlKGZlYXR1cmUpOwogICAgICAgICAgICAgICAgICAgIGRlcy50ZXJyYWluKChybS53aWR0aCAtIDEpIC8gMiwgKHJtLmhlaWdodCAtIDEpIC8gMiwKCQkJCWZlYXR1cmVbMV0pOwogICAgICAgICAgICAgICAgIGVuZAogICAgICB9KTsKICAgZW5kLAoKICAgLS0gTC1zaGFwZWQKICAgZnVuY3Rpb24oKQogICAgICBkZXMubWFwKHsgbWFwID0gW1sKLS0tLS14eHgKfC4uLnx4eHgKfC4uLnx4eHgKfC4uLi0tLS0KfC4uLi4uLnwKfC4uLi4uLnwKfC4uLi4uLnwKLS0tLS0tLS1dXSwgY29udGVudHMgPSBmdW5jdGlvbihtKSBkZXMucmVnaW9uKHsgcmVnaW9uPXsxLDEsMywzfSwgdHlwZT0ib3JkaW5hcnkiLCBpcnJlZ3VsYXI9dHJ1ZSwgZmlsbGVkPTEgfSk7IGVuZCB9KTsKICAgZW5kLAoKICAgLS0gTC1zaGFwZWQsIHJvdCAxCiAgIGZ1bmN0aW9uKCkKICAgICAgZGVzLm1hcCh7IG1hcCA9IFtbCnh4eC0tLS0tCnh4eHwuLi58Cnh4eHwuLi58Ci0tLS0uLi58CnwuLi4uLi58CnwuLi4uLi58CnwuLi4uLi58Ci0tLS0tLS0tXV0sIGNvbnRlbnRzID0gZnVuY3Rpb24obSkgZGVzLnJlZ2lvbih7IHJlZ2lvbj17NSwxLDUsM30sIHR5cGU9Im9yZGluYXJ5IiwgaXJyZWd1bGFyPXRydWUsIGZpbGxlZD0xIH0pOyBlbmQgfSk7CiAgIGVuZCwKCiAgIC0tIEwtc2hhcGVkLCByb3QgMgogICBmdW5jdGlvbigpCiAgICAgIGRlcy5tYXAoeyBtYXAgPSBbWwotLS0tLS0tLQp8Li4uLi4ufAp8Li4uLi4ufAp8Li4uLi4ufAotLS0tLi4ufAp4eHh8Li4ufAp4eHh8Li4ufAp4eHgtLS0tLV1dLCBjb250ZW50cyA9IGZ1bmN0aW9uKG0pIGRlcy5yZWdpb24oeyByZWdpb249ezEsMSwyLDJ9LCB0eXBlPSJvcmRpbmFyeSIsIGlycmVndWxhcj10cnVlLCBmaWxsZWQ9MSB9KTsgZW5kIH0pOwogICBlbmQsCgogICAtLSBMLXNoYXBlZCwgcm90IDMKICAgZnVuY3Rpb24oKQogICAgICBkZXMubWFwKHsgbWFwID0gW1sKLS0tLS0tLS0KfC4uLi4uLnwKfC4uLi4uLnwKfC4uLi4uLnwKfC4uLi0tLS0KfC4uLnx4eHgKfC4uLnx4eHgKLS0tLS14eHhdXSwgY29udGVudHMgPSBmdW5jdGlvbihtKSBkZXMucmVnaW9uKHsgcmVnaW9uPXsxLDEsMiwyfSwgdHlwZT0ib3JkaW5hcnkiLCBpcnJlZ3VsYXI9dHJ1ZSwgZmlsbGVkPTEgfSk7IGVuZCB9KTsKICAgZW5kLAoKICAgLS0gQmxvY2tlZCBjZW50ZXIKICAgZnVuY3Rpb24oKQogICAgICBkZXMubWFwKHsgbWFwID0gW1sKLS0tLS0tLS0tLS0KfC4uLi4uLi4uLnwKfC4uLi4uLi4uLnwKfC4uLi4uLi4uLnwKfC4uLkxMTC4uLnwKfC4uLkxMTC4uLnwKfC4uLkxMTC4uLnwKfC4uLi4uLi4uLnwKfC4uLi4uLi4uLnwKfC4uLi4uLi4uLnwKLS0tLS0tLS0tLS1dXSwgY29udGVudHMgPSBmdW5jdGlvbihtKQppZiAocGVyY2VudCgzMCkpIHRoZW4KICAgbG9jYWwgdGVyciA9IHsgIi0iLCAiUCIgfTsKICAgc2h1ZmZsZSh0ZXJyKTsKICAgZGVzLnJlcGxhY2VfdGVycmFpbih7IHJlZ2lvbiA9IHsxLDEsIDksOX0sIGZyb210ZXJyYWluID0gIkwiLCB0b3RlcnJhaW4gPSB0ZXJyWzFdIH0pOwplbmQKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MSwxLDIsMn0sIHR5cGU9Im9yZGluYXJ5IiwgaXJyZWd1bGFyPXRydWUsIGZpbGxlZD0xIH0pOwplbmQgfSk7CiAgIGVuZCwKCiAgIC0tIENpcmN1bGFyLCBzbWFsbAogICBmdW5jdGlvbigpCiAgICAgIGRlcy5tYXAoeyBtYXAgPSBbWwp4eC0tLXh4CngtLS4tLXgKLS0uLi4tLQp8Li4uLi58Ci0tLi4uLS0KeC0tLi0teAp4eC0tLXh4XV0sIGNvbnRlbnRzID0gZnVuY3Rpb24obSkgZGVzLnJlZ2lvbih7IHJlZ2lvbj17MywzLDMsM30sIHR5cGU9Im9yZGluYXJ5IiwgaXJyZWd1bGFyPXRydWUsIGZpbGxlZD0xIH0pOyBlbmQgfSk7CiAgIGVuZCwKCiAgIC0tIENpcmN1bGFyLCBtZWRpdW0KICAgZnVuY3Rpb24oKQogICAgICBkZXMubWFwKHsgbWFwID0gW1sKeHgtLS0tLXh4CngtLS4uLi0teAotLS4uLi4uLS0KfC4uLi4uLi58CnwuLi4uLi4ufAp8Li4uLi4uLnwKLS0uLi4uLi0tCngtLS4uLi0teAp4eC0tLS0teHhdXSwgY29udGVudHMgPSBmdW5jdGlvbihtKSBkZXMucmVnaW9uKHsgcmVnaW9uPXs0LDQsNCw0fSwgdHlwZT0ib3JkaW5hcnkiLCBpcnJlZ3VsYXI9dHJ1ZSwgZmlsbGVkPTEgfSk7IGVuZCB9KTsKICAgZW5kLAoKICAgLS0gQ2lyY3VsYXIsIGJpZwogICBmdW5jdGlvbigpCiAgICAgIGRlcy5tYXAoeyBtYXAgPSBbWwp4eHgtLS0tLXh4eAp4LS0tLi4uLS0teAp4LS4uLi4uLi4teAotLS4uLi4uLi4tLQp8Li4uLi4uLi4ufAp8Li4uLi4uLi4ufAp8Li4uLi4uLi4ufAotLS4uLi4uLi4tLQp4LS4uLi4uLi4teAp4LS0tLi4uLS0teAp4eHgtLS0tLXh4eF1dLCBjb250ZW50cyA9IGZ1bmN0aW9uKG0pIGRlcy5yZWdpb24oeyByZWdpb249ezUsNSw1LDV9LCB0eXBlPSJvcmRpbmFyeSIsIGlycmVndWxhcj10cnVlLCBmaWxsZWQ9MSB9KTsgZW5kIH0pOwogICBlbmQsCgogICAtLSBULXNoYXBlZAogICBmdW5jdGlvbigpCiAgICAgIGRlcy5tYXAoeyBtYXAgPSBbWwp4eHgtLS0tLXh4eAp4eHh8Li4ufHh4eAp4eHh8Li4ufHh4eAotLS0tLi4uLS0tLQp8Li4uLi4uLi4ufAp8Li4uLi4uLi4ufAp8Li4uLi4uLi4ufAotLS0tLS0tLS0tLV1dLCBjb250ZW50cyA9IGZ1bmN0aW9uKG0pIGRlcy5yZWdpb24oeyByZWdpb249ezUsNSw1LDV9LCB0eXBlPSJvcmRpbmFyeSIsIGlycmVndWxhcj10cnVlLCBmaWxsZWQ9MSB9KTsgZW5kIH0pOwogICBlbmQsCgogICAtLSBULXNoYXBlZCwgcm90IDEKICAgZnVuY3Rpb24oKQogICAgICBkZXMubWFwKHsgbWFwID0gW1sKLS0tLS14eHgKfC4uLnx4eHgKfC4uLnx4eHgKfC4uLi0tLS0KfC4uLi4uLnwKfC4uLi4uLnwKfC4uLi4uLnwKfC4uLi0tLS0KfC4uLnx4eHgKfC4uLnx4eHgKLS0tLS14eHhdXSwgY29udGVudHMgPSBmdW5jdGlvbihtKSBkZXMucmVnaW9uKHsgcmVnaW9uPXsyLDIsMiwyfSwgdHlwZT0ib3JkaW5hcnkiLCBpcnJlZ3VsYXI9dHJ1ZSwgZmlsbGVkPTEgfSk7IGVuZCB9KTsKICAgZW5kLAoKICAgLS0gVC1zaGFwZWQsIHJvdCAyCiAgIGZ1bmN0aW9uKCkKICAgICAgZGVzLm1hcCh7IG1hcCA9IFtbCi0tLS0tLS0tLS0tCnwuLi4uLi4uLi58CnwuLi4uLi4uLi58CnwuLi4uLi4uLi58Ci0tLS0uLi4tLS0tCnh4eHwuLi58eHh4Cnh4eHwuLi58eHh4Cnh4eC0tLS0teHh4XV0sIGNvbnRlbnRzID0gZnVuY3Rpb24obSkgZGVzLnJlZ2lvbih7IHJlZ2lvbj17MiwyLDIsMn0sIHR5cGU9Im9yZGluYXJ5IiwgaXJyZWd1bGFyPXRydWUsIGZpbGxlZD0xIH0pOyBlbmQgfSk7CiAgIGVuZCwKCiAgIC0tIFQtc2hhcGVkLCByb3QgMwogICBmdW5jdGlvbigpCiAgICAgIGRlcy5tYXAoeyBtYXAgPSBbWwp4eHgtLS0tLQp4eHh8Li4ufAp4eHh8Li4ufAotLS0tLi4ufAp8Li4uLi4ufAp8Li4uLi4ufAp8Li4uLi4ufAotLS0tLi4ufAp4eHh8Li4ufAp4eHh8Li4ufAp4eHgtLS0tLV1dLCBjb250ZW50cyA9IGZ1bmN0aW9uKG0pIGRlcy5yZWdpb24oeyByZWdpb249ezUsNSw1LDV9LCB0eXBlPSJvcmRpbmFyeSIsIGlycmVndWxhcj10cnVlLCBmaWxsZWQ9MSB9KTsgZW5kIH0pOwogICBlbmQsCgogICAtLSBTLXNoYXBlZAogICBmdW5jdGlvbigpCiAgICAgIGRlcy5tYXAoeyBtYXAgPSBbWwotLS0tLXh4eAp8Li4ufHh4eAp8Li4ufHh4eAp8Li4uLS0tLQp8Li4uLi4ufAp8Li4uLi4ufAp8Li4uLi4ufAotLS0tLi4ufAp4eHh8Li4ufAp4eHh8Li4ufAp4eHgtLS0tLV1dLCBjb250ZW50cyA9IGZ1bmN0aW9uKG0pIGRlcy5yZWdpb24oeyByZWdpb249ezIsMiwyLDJ9LCB0eXBlPSJvcmRpbmFyeSIsIGlycmVndWxhcj10cnVlLCBmaWxsZWQ9MSB9KTsgZW5kIH0pOwogICBlbmQsCgogICAtLSBTLXNoYXBlZCwgcm90IDEKICAgZnVuY3Rpb24oKQogICAgICBkZXMubWFwKHsgbWFwID0gW1sKeHh4LS0tLS0tLS0KeHh4fC4uLi4uLnwKeHh4fC4uLi4uLnwKLS0tLS4uLi4uLnwKfC4uLi4uLi0tLS0KfC4uLi4uLnx4eHgKfC4uLi4uLnx4eHgKLS0tLS0tLS14eHhdXSwgY29udGVudHMgPSBmdW5jdGlvbihtKSBkZXMucmVnaW9uKHsgcmVnaW9uPXs1LDUsNSw1fSwgdHlwZT0ib3JkaW5hcnkiLCBpcnJlZ3VsYXI9dHJ1ZSwgZmlsbGVkPTEgfSk7IGVuZCB9KTsKICAgZW5kLAoKICAgLS0gWi1zaGFwZWQKICAgZnVuY3Rpb24oKQogICAgICBkZXMubWFwKHsgbWFwID0gW1sKeHh4LS0tLS0KeHh4fC4uLnwKeHh4fC4uLnwKLS0tLS4uLnwKfC4uLi4uLnwKfC4uLi4uLnwKfC4uLi4uLnwKfC4uLi0tLS0KfC4uLnx4eHgKfC4uLnx4eHgKLS0tLS14eHhdXSwgY29udGVudHMgPSBmdW5jdGlvbihtKSBkZXMucmVnaW9uKHsgcmVnaW9uPXs1LDUsNSw1fSwgdHlwZT0ib3JkaW5hcnkiLCBpcnJlZ3VsYXI9dHJ1ZSwgZmlsbGVkPTEgfSk7IGVuZCB9KTsKICAgZW5kLAoKICAgLS0gWi1zaGFwZWQsIHJvdCAxCiAgIGZ1bmN0aW9uKCkKICAgICAgZGVzLm1hcCh7IG1hcCA9IFtbCi0tLS0tLS0teHh4CnwuLi4uLi58eHh4CnwuLi4uLi58eHh4CnwuLi4uLi4tLS0tCi0tLS0uLi4uLi58Cnh4eHwuLi4uLi58Cnh4eHwuLi4uLi58Cnh4eC0tLS0tLS0tXV0sIGNvbnRlbnRzID0gZnVuY3Rpb24obSkgZGVzLnJlZ2lvbih7IHJlZ2lvbj17MiwyLDIsMn0sIHR5cGU9Im9yZGluYXJ5IiwgaXJyZWd1bGFyPXRydWUsIGZpbGxlZD0xIH0pOyBlbmQgfSk7CiAgIGVuZCwKCiAgIC0tIENyb3NzCiAgIGZ1bmN0aW9uKCkKICAgICAgZGVzLm1hcCh7IG1hcCA9IFtbCnh4eC0tLS0teHh4Cnh4eHwuLi58eHh4Cnh4eHwuLi58eHh4Ci0tLS0uLi4tLS0tCnwuLi4uLi4uLi58CnwuLi4uLi4uLi58CnwuLi4uLi4uLi58Ci0tLS0uLi4tLS0tCnh4eHwuLi58eHh4Cnh4eHwuLi58eHh4Cnh4eC0tLS0teHh4XV0sIGNvbnRlbnRzID0gZnVuY3Rpb24obSkgZGVzLnJlZ2lvbih7IHJlZ2lvbj17Niw2LDYsNn0sIHR5cGU9Im9yZGluYXJ5IiwgaXJyZWd1bGFyPXRydWUsIGZpbGxlZD0xIH0pOyBlbmQgfSk7CiAgIGVuZCwKCiAgIC0tIEZvdXItbGVhZiBjbG92ZXIKICAgZnVuY3Rpb24oKQogICAgICBkZXMubWFwKHsgbWFwID0gW1sKLS0tLS14LS0tLS0KfC4uLnx4fC4uLnwKfC4uLi0tLS4uLnwKfC4uLi4uLi4uLnwKLS0tLi4uLi4tLS0KeHh8Li4uLi58eHgKLS0tLi4uLi4tLS0KfC4uLi4uLi4uLnwKfC4uLi0tLS4uLnwKfC4uLnx4fC4uLnwKLS0tLS14LS0tLS1dXSwgY29udGVudHMgPSBmdW5jdGlvbihtKSBkZXMucmVnaW9uKHsgcmVnaW9uPXs2LDYsNiw2fSwgdHlwZT0ib3JkaW5hcnkiLCBpcnJlZ3VsYXI9dHJ1ZSwgZmlsbGVkPTEgfSk7IGVuZCB9KTsKICAgZW5kLAoKICAgLS0gV2F0ZXItc3Vycm91bmRlZCB2YXVsdAogICBmdW5jdGlvbigpCiAgICAgIGRlcy5tYXAoeyBtYXAgPSBbWwp9fX19fX0KfS0tLS19Cn18Li58fQp9fC4ufH0KfS0tLS19Cn19fX19fV1dLCBjb250ZW50cyA9IGZ1bmN0aW9uKG0pIGRlcy5yZWdpb24oeyByZWdpb249ezMsMywzLDN9LCB0eXBlPSJ0aGVtZWQiLCBpcnJlZ3VsYXI9dHJ1ZSwgZmlsbGVkPTAsIGpvaW5lZD1mYWxzZSB9KTsKICAgICBsb2NhbCBuYXN0eV91bmRlYWQgPSB7ICJnaWFudCB6b21iaWUiLCAiZXR0aW4gem9tYmllIiwgInZhbXBpcmUgbG9yZCIgfTsKICAgICBkZXMub2JqZWN0KCJjaGVzdCIsIDIsIDIpOwogICAgIGRlcy5vYmplY3QoImNoZXN0IiwgMywgMik7CiAgICAgZGVzLm9iamVjdCgiY2hlc3QiLCAyLCAzKTsKICAgICBkZXMub2JqZWN0KCJjaGVzdCIsIDMsIDMpOwogICAgIHNodWZmbGUobmFzdHlfdW5kZWFkKTsKICAgICBkZXMubW9uc3RlcihuYXN0eV91bmRlYWRbMV0sIDIsIDIpOwplbmQgfSk7CiAgIGVuZCwKCn07CgpmdW5jdGlvbiBpc19lbGlnaWJsZShyb29tKQogICBsb2NhbCB0ID0gdHlwZShyb29tKTsKICAgbG9jYWwgZGlmZiA9IG5oLmxldmVsX2RpZmZpY3VsdHkoKTsKICAgaWYgKHQgPT0gInRhYmxlIikgdGhlbgogICAgICBpZiAocm9vbS5taW5kaWZmIH49IG5pbCBhbmQgZGlmZiA8IHJvb20ubWluZGlmZikgdGhlbgogICAgICAgICByZXR1cm4gZmFsc2UKICAgICAgZWxzZWlmIChyb29tLm1heGRpZmYgfj0gbmlsIGFuZCBkaWZmID4gcm9vbS5tYXhkaWZmKSB0aGVuCiAgICAgICAgIHJldHVybiBmYWxzZQogICAgICBlbmQKICAgZWxzZWlmICh0ID09ICJmdW5jdGlvbiIpIHRoZW4KICAgICAgLS0gZnVuY3Rpb25zIGN1cnJlbnRseSBoYXZlIG5vIGNvbnN0cmFpbnRzCiAgIGVuZAogICByZXR1cm4gdHJ1ZQplbmQKCmZ1bmN0aW9uIHRoZW1lcm9vbXNfZ2VuZXJhdGUoKQogICBsb2NhbCBwaWNrID0gMTsKICAgbG9jYWwgdG90YWxfZnJlcXVlbmN5ID0gMDsKICAgZm9yIGkgPSAxLCAjdGhlbWVyb29tcyBkbwogICAgICAtLSBSZXNlcnZvaXIgc2FtcGxpbmc6IHNlbGVjdCBvbmUgcm9vbSBmcm9tIHRoZSBzZXQgb2YgZWxpZ2libGUgcm9vbXMsCiAgICAgIC0tIHdoaWNoIG1heSBjaGFuZ2Ugb24gZGlmZmVyZW50IGxldmVscyBiZWNhdXNlIG9mIGxldmVsIGRpZmZpY3VsdHkuCiAgICAgIGlmIGlzX2VsaWdpYmxlKHRoZW1lcm9vbXNbaV0pIHRoZW4KICAgICAgICAgbG9jYWwgdGhpc19mcmVxdWVuY3k7CiAgICAgICAgIGlmICh0eXBlKHRoZW1lcm9vbXNbaV0pID09ICJ0YWJsZSIgYW5kIHRoZW1lcm9vbXNbaV0uZnJlcXVlbmN5IH49IG5pbCkgdGhlbgogICAgICAgICAgICB0aGlzX2ZyZXF1ZW5jeSA9IHRoZW1lcm9vbXNbaV0uZnJlcXVlbmN5OwogICAgICAgICBlbHNlCiAgICAgICAgICAgIHRoaXNfZnJlcXVlbmN5ID0gMTsKICAgICAgICAgZW5kCiAgICAgICAgIHRvdGFsX2ZyZXF1ZW5jeSA9IHRvdGFsX2ZyZXF1ZW5jeSArIHRoaXNfZnJlcXVlbmN5OwogICAgICAgICAtLSBhdm9pZCBybjIoMCkgaWYgYSByb29tIGhhcyBmcmVxIDAKICAgICAgICAgaWYgdGhpc19mcmVxdWVuY3kgPiAwIGFuZCBuaC5ybjIodG90YWxfZnJlcXVlbmN5KSA8IHRoaXNfZnJlcXVlbmN5IHRoZW4KICAgICAgICAgICAgcGljayA9IGk7CiAgICAgICAgIGVuZAogICAgICBlbmQKICAgZW5kCgogICBsb2NhbCB0ID0gdHlwZSh0aGVtZXJvb21zW3BpY2tdKTsKICAgaWYgKHQgPT0gInRhYmxlIikgdGhlbgogICAgICB0aGVtZXJvb21zW3BpY2tdLmNvbnRlbnRzKCk7CiAgIGVsc2VpZiAodCA9PSAiZnVuY3Rpb24iKSB0aGVuCiAgICAgIHRoZW1lcm9vbXNbcGlja10oKTsKICAgZW5kCmVuZAotLSBOZXRIYWNrIDMuNwllbmRnYW1lLmRlcwkkTkhEVC1EYXRlOiAxNTQ2MzAzNjgwIDIwMTkvMDEvMDEgMDA6NDg6MDAgJCAgJE5IRFQtQnJhbmNoOiBOZXRIYWNrLTMuNi4yLWJldGEwMSAkOiROSERULVJldmlzaW9uOiAxLjE0ICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkyLDE5OTMgYnkgSXpjaGFrIE1pbGxlciwgRGF2aWQgQ29ocnMsCi0tICAgICAgICAgICAgICAgICAgICAgIGFuZCBUaW1vIEhha3VsaW5lbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm90ZWxlcG9ydCIsICJoYXJkZmxvb3IiLCAibm9tbWFwIiwgInNob3J0c2lnaHRlZCIsICJzb2xpZGlmeSIpCmRlcy5tZXNzYWdlKCJZb3UgYXJyaXZlIG9uIHRoZSBBc3RyYWwgUGxhbmUhIikKZGVzLm1lc3NhZ2UoIkhlcmUgdGhlIEhpZ2ggVGVtcGxlIG9mICVkIGlzIGxvY2F0ZWQuIikKZGVzLm1lc3NhZ2UoIllvdSBzZW5zZSBhbGFybSwgaG9zdGlsaXR5LCBhbmQgZXhjaXRlbWVudCBpbiB0aGUgYWlyISIpCmRlcy5tYXAoW1sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0tLS0tLS0tLS0tLS0tICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwuLi4uLi4uLi4uLi4ufCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8Li4tLS0tLS0tLS0uLnwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfC4ufC4uLi4uLi58Li58ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCi0tLS0tLS0tLS0tLS0tLSAgICAgICAgICAgICAgIHwuLnwuLi4uLi4ufC4ufCAgICAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLQp8Li4uLi4uLi4uLi4uLnwgICAgICAgICAgICAgICB8Li58Li4uLi4uLnwuLnwgICAgICAgICAgICAgICB8Li4uLi4uLi4uLi4uLnwKfC4uLS0tLS0tLS0tLi4tfCAgIHwtLS0tLS0tfCAgfC4ufC4uLi4uLi58Li58ICB8LS0tLS0tLXwgICB8LS4uLS0tLS0tLS0tLi58CnwuLnwuLi4uLi4ufC4uLi18IHwtLi4uLi4uLi18IHwuLnwuLi4uLi4ufC4ufCB8LS4uLi4uLi4tfCB8LS4uLnwuLi4uLi4ufC4ufAp8Li58Li4uLi4uLnwuLi4uLXwtLi4uLi4uLi4uLXx8Li4tLS0tKy0tLS0uLnx8LS4uLi4uLi4uLi18LS4uLi58Li4uLi4uLnwuLnwKfC4ufC4uLi4uLi4rLi4uLi4rLi4uLi4uLi4uLi58fC4uLi4uLi4uLi4uLi58fC4uLi4uLi4uLi4uKy4uLi4uKy4uLi4uLi58Li58CnwuLnwuLi4uLi4ufC4uLi4tfC0uLi4uLi4uLi4tfC0tfC4uLi4uLi4uLnwtLXwtLi4uLi4uLi4uLXwtLi4uLnwuLi4uLi4ufC4ufAp8Li58Li4uLi4uLnwuLi4tfCB8LS4uLi4uLi4tfCAgIC18LS0tKy0tLXwtICAgfC0uLi4uLi4uLXwgfC0uLi58Li4uLi4uLnwuLnwKfC4uLS0tLS0tLS0tLi4tfCAgIHwtLS0rLS0tfCAgICB8LS4uLi4uLi4tfCAgICB8LS0tKy0tLXwgICB8LS4uLS0tLS0tLS0tLi58CnwuLi4uLi4uLi4uLi4ufCAgICAgIHwuLi58LS0tLS18LS4uLi4uLi4uLi18LS0tLS18Li4ufCAgICAgIHwuLi4uLi4uLi4uLi4ufAotLS0tLS0tLS0tLS0tLS0gICAgICB8Li4uLi4uLi4ufC4uLi4uLi4uLi4ufC4uLi4uLi4uLnwgICAgICAtLS0tLS0tLS0tLS0tLS0KICAgICAgICAgICAgICAgICAgICAgLS0tLS0tLS4uLnwtLi4uLi4uLi4uLXwuLi4tLS0tLS0tICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHwuLi4ufC0uLi4uLi4uLXwuLi4ufCAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAtLS0uLi58LS0tKy0tLXwuLi4tLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8Li4uLi4uLi4uLi4uLi4ufCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0tLS0tLS0tLS0tLS0tLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIApdXSk7CgotLSBjaGFuY2UgdG8gYWx0ZXIgYWJvdmUgbWFwIGFuZCB0dXJuIHRoZSB3aW5ncyBvZiB0aGUgYm90dG9tLWNlbnRlciBpbnRvCi0tIGEgcGFpciBvZiBiaWcgKDV4MTUpIHJvb21zCmZvciBpPTEsMiBkbwogICAtLSAzLjYuWzAxXTogNzUlIGNoYW5jZSB0aGF0IGJvdGggc2lkZXMgb3BlbmVkIHVwLCAyNSUgdGhhdCBuZWl0aGVyIGRpZDsKICAgLS0gMy42LjI6IDYwJSB0d2ljZSA9PSAzNiUgY2hhbmNlIHRoYXQgYm90aCBzaWRlcyBvcGVuIHVwLCAyNCUgbGVmdCBzaWRlCiAgIC0tIG9ubHksIDI0JSByaWdodCBzaWRlIG9ubHksIDE2JSB0aGF0IG5laXRoZXIgc2lkZSBvcGVucyB1cAogICBsb2NhbCBoYWxsOwogICBpZiBwZXJjZW50KDYwKSB0aGVuCiAgICAgaWYgaSA9PSAxIHRoZW4KICAgICAgICBkZXMudGVycmFpbihzZWxlY3Rpb24uYXJlYSgxNywxNCwgMzAsMTgpLCIuIikKICAgICAgICBkZXMud2FsbGlmeSgpCiAgICAgICAgLS0gdGVtcG9yYXJpbHkgY2xvc2Ugb2ZmIHRoZSBhcmVhIHRvIGJlIGZpbGxlZCBzbyB0aGF0IGl0IGRvZXNuJ3QgY292ZXIKICAgICAgICAtLSB0aGUgZW50aXJlIGVudHJ5IGFyZWEKICAgICAgICBkZXMudGVycmFpbigzMywxOCwgInwiKQogICAgICAgIGhhbGwgPSBzZWxlY3Rpb24uZmxvb2RmaWxsKDMwLDE2KQogICAgICAgIC0tIHJlLWNvbm5lY3QgdGhlIG9wZW5lZCB3aW5nIHdpdGggdGhlIHJlc3Qgb2YgdGhlIG1hcAogICAgICAgIGRlcy50ZXJyYWluKDMzLDE4LCAiLiIpCiAgICAgZWxzZQogICAgICAgIGRlcy50ZXJyYWluKHNlbGVjdGlvbi5hcmVhKDQ0LDE0LCA1NywxOCksIi4iKQogICAgICAgIGRlcy53YWxsaWZ5KCkKICAgICAgICBkZXMudGVycmFpbig0MSwxOCwgInwiKQogICAgICAgIGhhbGwgPSBzZWxlY3Rpb24uZmxvb2RmaWxsKDQ0LDE2KQogICAgICAgIGRlcy50ZXJyYWluKDQxLDE4LCAiLiIpCiAgICAgZW5kCiAgICAgLS0gZXh0cmEgbW9uc3RlcnM7IHdhcyBbNiArIDNkNF0gd2hlbiBib3RoIHdpbmdzIHdlcmUgb3BlbmVkIHVwIGF0IG9uY2UKICAgICBmb3IgaT0xLDMgKyBtYXRoLnJhbmRvbSgyIC0gMSwyKjMpIGRvCiAgICAgICAgZGVzLm1vbnN0ZXIoeyBpZD0iQW5nZWwiLCBjb29yZCA9IHsgaGFsbDpybmRjb29yZCgxKSB9LCBhbGlnbj0ibm9hbGlnbiIsIHBlYWNlZnVsPTAgfSkKICAgICAgICBpZiBwZXJjZW50KDUwKSB0aGVuCiAgICAgICAgICAgZGVzLm1vbnN0ZXIoeyBjb29yZCA9IHsgaGFsbDpybmRjb29yZCgxKSB9LCBwZWFjZWZ1bD0wIH0pCiAgICAgICAgZW5kCiAgICAgZW5kCiAgIGVuZAplbmQKCi0tIFJpZGVyIGxvY2F0aW9ucwpsb2NhbCBwbGFjZSA9IHNlbGVjdGlvbi5uZXcoKTsKcGxhY2U6c2V0KDIzLDkpOwpwbGFjZTpzZXQoMzcsMTQpOwpwbGFjZTpzZXQoNTEsOSk7CgotLSBXaGVyZSB0aGUgcGxheWVyIHdpbGwgbGFuZCBvbiBhcnJpdmFsCmRlcy50ZWxlcG9ydF9yZWdpb24oeyByZWdpb24gPSB7MjksMTUsNDUsMTV9LCBleGNsdWRlID0gezMwLDE1LDQ0LDE1fSB9KQotLSBMaXQgY291cnRzCmRlcy5yZWdpb24oeyByZWdpb249ezAxLDA1LDE2LDE0fSxsaXQ9MSx0eXBlPSJvcmRpbmFyeSIsaXJyZWd1bGFyPTEgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MzEsMDEsNDQsMTB9LGxpdD0xLHR5cGU9Im9yZGluYXJ5IixpcnJlZ3VsYXI9MSB9KQpkZXMucmVnaW9uKHsgcmVnaW9uPXs2MSwwNSw3NCwxNH0sbGl0PTEsdHlwZT0ib3JkaW5hcnkiLGlycmVndWxhcj0xIH0pCi0tIEEgU2FuY3R1bSBmb3IgZWFjaCBhbGlnbm1lbnQKLS0gVGhlIHNocmluZXMnIGFsaWdubWVudHMgYXJlIHNodWZmbGVkIGZvcgotLSBlYWNoIGdhbWUKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MDQsMDcsMTAsMTF9LGxpdD0xLHR5cGU9InRlbXBsZSIsZmlsbGVkPTIgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MzQsMDMsNDAsMDd9LGxpdD0xLHR5cGU9InRlbXBsZSIsZmlsbGVkPTIgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17NjQsMDcsNzAsMTF9LGxpdD0xLHR5cGU9InRlbXBsZSIsZmlsbGVkPTIgfSkKCmRlcy5hbHRhcih7IHg9MDcsIHk9MDksIGFsaWduPWFsaWduWzFdLHR5cGU9InNhbmN0dW0iIH0pCmRlcy5hbHRhcih7IHg9MzcsIHk9MDUsIGFsaWduPWFsaWduWzJdLHR5cGU9InNhbmN0dW0iIH0pCmRlcy5hbHRhcih7IHg9NjcsIHk9MDksIGFsaWduPWFsaWduWzNdLHR5cGU9InNhbmN0dW0iIH0pCi0tIERvb3JzCmRlcy5kb29yKCJjbG9zZWQiLDExLDA5KQpkZXMuZG9vcigiY2xvc2VkIiwxNywwOSkKZGVzLmRvb3IoImxvY2tlZCIsMjMsMTIpCmRlcy5kb29yKCJsb2NrZWQiLDM3LDA4KQpkZXMuZG9vcigiY2xvc2VkIiwzNywxMSkKZGVzLmRvb3IoImNsb3NlZCIsMzcsMTcpCmRlcy5kb29yKCJsb2NrZWQiLDUxLDEyKQpkZXMuZG9vcigibG9ja2VkIiw1NywwOSkKZGVzLmRvb3IoImNsb3NlZCIsNjMsMDkpCi0tIE5vbiBkaWdnYWJsZSBhbmQgcGhhemVhYmxlIGV2ZXJ5d2hlcmUKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgwMCwwMCw3NCwxOSkpCmRlcy5ub25fcGFzc3dhbGwoc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzQsMTkpKQotLSBNb2xvY2gncyBob3JkZQotLSBXZXN0IHJvdW5kIHJvb20KZGVzLm1vbnN0ZXIoeyBpZCA9ICJhbGlnbmVkIHByaWVzdCIseD0xOCx5PTA5LGFsaWduPSJub2FsaWduIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImFsaWduZWQgcHJpZXN0Iix4PTE5LHk9MDgsYWxpZ249Im5vYWxpZ24iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYWxpZ25lZCBwcmllc3QiLHg9MTkseT0wOSxhbGlnbj0ibm9hbGlnbiIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJhbGlnbmVkIHByaWVzdCIseD0xOSx5PTEwLGFsaWduPSJub2FsaWduIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIkFuZ2VsIix4PTIwLHk9MDksYWxpZ249Im5vYWxpZ24iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiQW5nZWwiLHg9MjAseT0xMCxhbGlnbj0ibm9hbGlnbiIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJQZXN0aWxlbmNlIiwgY29vcmQgPSB7IHBsYWNlOnJuZGNvb3JkKDEpIH0sIHBlYWNlZnVsPTAgfSkKLS0gU291dGgtY2VudHJhbCByb3VuZCByb29tCmRlcy5tb25zdGVyKHsgaWQgPSAiYWxpZ25lZCBwcmllc3QiLHg9MzYseT0xMixhbGlnbj0ibm9hbGlnbiIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJhbGlnbmVkIHByaWVzdCIseD0zNyx5PTEyLGFsaWduPSJub2FsaWduIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImFsaWduZWQgcHJpZXN0Iix4PTM4LHk9MTIsYWxpZ249Im5vYWxpZ24iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYWxpZ25lZCBwcmllc3QiLHg9MzYseT0xMyxhbGlnbj0ibm9hbGlnbiIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJBbmdlbCIseD0zOCx5PTEzLGFsaWduPSJub2FsaWduIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIkFuZ2VsIix4PTM3LHk9MTMsYWxpZ249Im5vYWxpZ24iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiRGVhdGgiLCBjb29yZCA9IHsgcGxhY2U6cm5kY29vcmQoMSkgfSwgcGVhY2VmdWw9MCB9KQotLSBFYXN0IHJvdW5kIHJvb20KZGVzLm1vbnN0ZXIoeyBpZCA9ICJhbGlnbmVkIHByaWVzdCIseD01Nix5PTA5LGFsaWduPSJub2FsaWduIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImFsaWduZWQgcHJpZXN0Iix4PTU1LHk9MDgsYWxpZ249Im5vYWxpZ24iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYWxpZ25lZCBwcmllc3QiLHg9NTUseT0wOSxhbGlnbj0ibm9hbGlnbiIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJhbGlnbmVkIHByaWVzdCIseD01NSx5PTEwLGFsaWduPSJub2FsaWduIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIkFuZ2VsIix4PTU0LHk9MDksYWxpZ249Im5vYWxpZ24iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiQW5nZWwiLHg9NTQseT0xMCxhbGlnbj0ibm9hbGlnbiIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJGYW1pbmUiLCBjb29yZCA9IHsgcGxhY2U6cm5kY29vcmQoMSkgfSwgcGVhY2VmdWw9MCB9KQotLQotLSBUaGUgYWxpZ25lZCBob3JkZQotLQotLSBXZSBkbyBub3Qga25vdyBpbiBhZHZhbmNlIHRoZSBhbGlnbm1lbnQgb2YgdGhlCi0tIHBsYXllci4gIFRoZSBtcGVhY2VmdWwgYml0IHdpbGwgbmVlZCByZXNldHRpbmcKLS0gd2hlbiB0aGUgbGV2ZWwgaXMgY3JlYXRlZC4gIFRoZSBzZXR0aW5nIGhlcmUgaXMKLS0gYnV0IGEgcGxhY2UgaG9sZGVyLgotLQotLSBXZXN0IGNvdXJ0CmRlcy5tb25zdGVyKHsgaWQgPSAiYWxpZ25lZCBwcmllc3QiLHg9MTIseT0wNyxhbGlnbj0iY2hhb3MiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYWxpZ25lZCBwcmllc3QiLHg9MTMseT0wNyxhbGlnbj0iY2hhb3MiLHBlYWNlZnVsPTEgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJhbGlnbmVkIHByaWVzdCIseD0xNCx5PTA3LGFsaWduPSJsYXciLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYWxpZ25lZCBwcmllc3QiLHg9MTIseT0xMSxhbGlnbj0ibGF3IixwZWFjZWZ1bD0xIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYWxpZ25lZCBwcmllc3QiLHg9MTMseT0xMSxhbGlnbj0ibmV1dHJhbCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJhbGlnbmVkIHByaWVzdCIseD0xNCx5PTExLGFsaWduPSJuZXV0cmFsIixwZWFjZWZ1bD0xIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiQW5nZWwiLHg9MTEseT0wNSxhbGlnbj0iY2hhb3MiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiQW5nZWwiLHg9MTIseT0wNSxhbGlnbj0iY2hhb3MiLHBlYWNlZnVsPTEgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJBbmdlbCIseD0xMyx5PTA1LGFsaWduPSJsYXciLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiQW5nZWwiLHg9MTEseT0xMyxhbGlnbj0ibGF3IixwZWFjZWZ1bD0xIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiQW5nZWwiLHg9MTIseT0xMyxhbGlnbj0ibmV1dHJhbCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJBbmdlbCIseD0xMyx5PTEzLGFsaWduPSJuZXV0cmFsIixwZWFjZWZ1bD0xIH0pCi0tIENlbnRyYWwgY291cnQKZGVzLm1vbnN0ZXIoeyBpZCA9ICJhbGlnbmVkIHByaWVzdCIseD0zMix5PTA5LGFsaWduPSJjaGFvcyIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJhbGlnbmVkIHByaWVzdCIseD0zMyx5PTA5LGFsaWduPSJjaGFvcyIscGVhY2VmdWw9MSB9KQpkZXMubW9uc3Rlcih7IGlkID0gImFsaWduZWQgcHJpZXN0Iix4PTM0LHk9MDksYWxpZ249ImxhdyIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJhbGlnbmVkIHByaWVzdCIseD00MCx5PTA5LGFsaWduPSJsYXciLHBlYWNlZnVsPTEgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJhbGlnbmVkIHByaWVzdCIseD00MSx5PTA5LGFsaWduPSJuZXV0cmFsIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImFsaWduZWQgcHJpZXN0Iix4PTQyLHk9MDksYWxpZ249Im5ldXRyYWwiLHBlYWNlZnVsPTEgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJBbmdlbCIseD0zMSx5PTA4LGFsaWduPSJjaGFvcyIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJBbmdlbCIseD0zMix5PTA4LGFsaWduPSJjaGFvcyIscGVhY2VmdWw9MSB9KQpkZXMubW9uc3Rlcih7IGlkID0gIkFuZ2VsIix4PTMxLHk9MDksYWxpZ249ImxhdyIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJBbmdlbCIseD00Mix5PTA4LGFsaWduPSJsYXciLHBlYWNlZnVsPTEgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJBbmdlbCIseD00Myx5PTA4LGFsaWduPSJuZXV0cmFsIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIkFuZ2VsIix4PTQzLHk9MDksYWxpZ249Im5ldXRyYWwiLHBlYWNlZnVsPTEgfSkKLS0gRWFzdCBjb3VydApkZXMubW9uc3Rlcih7IGlkID0gImFsaWduZWQgcHJpZXN0Iix4PTYwLHk9MDcsYWxpZ249ImNoYW9zIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImFsaWduZWQgcHJpZXN0Iix4PTYxLHk9MDcsYWxpZ249ImNoYW9zIixwZWFjZWZ1bD0xIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYWxpZ25lZCBwcmllc3QiLHg9NjIseT0wNyxhbGlnbj0ibGF3IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImFsaWduZWQgcHJpZXN0Iix4PTYwLHk9MTEsYWxpZ249ImxhdyIscGVhY2VmdWw9MSB9KQpkZXMubW9uc3Rlcih7IGlkID0gImFsaWduZWQgcHJpZXN0Iix4PTYxLHk9MTEsYWxpZ249Im5ldXRyYWwiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYWxpZ25lZCBwcmllc3QiLHg9NjIseT0xMSxhbGlnbj0ibmV1dHJhbCIscGVhY2VmdWw9MSB9KQpkZXMubW9uc3Rlcih7IGlkID0gIkFuZ2VsIix4PTYxLHk9MDUsYWxpZ249ImNoYW9zIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIkFuZ2VsIix4PTYyLHk9MDUsYWxpZ249ImNoYW9zIixwZWFjZWZ1bD0xIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiQW5nZWwiLHg9NjMseT0wNSxhbGlnbj0ibGF3IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIkFuZ2VsIix4PTYxLHk9MTMsYWxpZ249ImxhdyIscGVhY2VmdWw9MSB9KQpkZXMubW9uc3Rlcih7IGlkID0gIkFuZ2VsIix4PTYyLHk9MTMsYWxpZ249Im5ldXRyYWwiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiQW5nZWwiLHg9NjMseT0xMyxhbGlnbj0ibmV1dHJhbCIscGVhY2VmdWw9MSB9KQotLQotLSBBc3NvcnRlZCBuYXN0aWVzCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiTCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJMIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkwiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiViIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJWIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIlYiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiRCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJEIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkQiLCBwZWFjZWZ1bD0wIH0pCi0tIE5ldEhhY2sgMy43CWVuZGdhbWUuZGVzCSROSERULURhdGU6IDE1NDYzMDM2ODAgMjAxOS8wMS8wMSAwMDo0ODowMCAkICAkTkhEVC1CcmFuY2g6IE5ldEhhY2stMy42LjItYmV0YTAxICQ6JE5IRFQtUmV2aXNpb246IDEuMTQgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTIsMTk5MyBieSBJemNoYWsgTWlsbGVyLCBEYXZpZCBDb2hycywKLS0gICAgICAgICAgICAgICAgICAgICAgYW5kIFRpbW8gSGFrdWxpbmVuCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiICIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub3RlbGVwb3J0IiwgImhhcmRmbG9vciIsICJzaG9ydHNpZ2h0ZWQiKQotLSBUaGUgZm9sbG93aW5nIG1lc3NhZ2VzIGFyZSBzb21ld2hhdCBvYnR1c2UsIHRvIG1ha2UgdGhlbgotLSBlcXVhbGx5IG1lYW5pbmdmdWwgaWYgdGhlIHBsYXllciBjYW4gc2VlIG9yIG5vdC4KZGVzLm1lc3NhZ2UoIldoYXQgYSBzdHJhbmdlIGZlZWxpbmchIikKZGVzLm1lc3NhZ2UoIllvdSBub3RpY2UgdGhhdCB0aGVyZSBpcyBubyBncmF2aXR5IGhlcmUuIikKLS0gVGhlIHBsYXllciBsYW5kcywgdXBvbiBhcnJpdmFsLCBpbiB0aGUKLS0gbG93ZXItbGVmdCBhcmVhLiAgVGhlIGxvY2F0aW9uIG9mIHRoZQotLSBwb3J0YWwgdG8gdGhlIG5leHQgbGV2ZWwgaXMgcmFuZG9tbHkgY2hvc2VuLgotLSBUaGlzIG1hcCBoYXMgbm8gdmlzaWJsZSBvdXRlciBib3VuZGFyeSwgYW5kCi0tIGlzIGFsbCAiYWlyIi4KZGVzLm1hcChbWwpBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBCkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEKQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQQpBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBCkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEKQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQQpBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBCkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEKQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQQpBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBCkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEKQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQQpBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBCkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEKQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQQpBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBCkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEKQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQQpBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBCkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEKXV0pOwotLSBVc2UgdXAgYW5kIGRvd24gcmVnaW9ucyB0byBwYXJ0aXRpb24gdGhlIGxldmVsIGludG8gdGhyZWUgcGFydHM7Ci0tIHRlbGVwb3J0YXRpb24gY2FuJ3QgY3Jvc3MgZnJvbSBvbmUgcGFydCBpbnRvIGFub3RoZXIuCi0tIFRoZSB1cCByZWdpb24gaXMgd2hlcmUgeW91J2xsIGFycml2ZSBhZnRlciBhY3RpdmF0aW5nIHRoZSBwb3J0YWwgZnJvbQotLSB0aGUgcHJlY2VkaW5nIGxldmVsOyB0aGUgZXhpdCBwb3J0YWwgaXMgcGxhY2VkIGluc2lkZSB0aGUgZG93biByZWdpb24uCmRlcy50ZWxlcG9ydF9yZWdpb24oeyByZWdpb24gPSB7MDEsMDAsMjQsMjB9LCByZWdpb25faXNsZXYgPSAxLCBleGNsdWRlID0gezI1LDAwLDc5LDIwfSwgZXhjbHVkZV9pc2xldj0xLCBkaXI9InVwIiB9KQpkZXMudGVsZXBvcnRfcmVnaW9uKHsgcmVnaW9uID0gezU2LDAwLDc5LDIwfSwgcmVnaW9uX2lzbGV2ID0gMSwgZXhjbHVkZSA9IHswMSwwMCw1NSwyMH0sIGV4Y2x1ZGVfaXNsZXY9MSwgZGlyPSJkb3duIiB9KQoKLS0gZGVzLnBvcnRhbChsZXZyZWdpb24oNTcsMDEsNzgsMTkpLCgwLDAsMCwwKSwiZmlyZSIpCmRlcy5sZXZyZWdpb24oeyByZWdpb24gPSB7NTcsMDEsNzgsMTl9LCByZWdpb25faXNsZXY9MSwgdHlwZT0icG9ydGFsIiwgbmFtZT0iZmlyZSIgfSk7CmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMTkpLCJsaXQiKQpkZXMubW9uc3Rlcih7IGlkID0gImFpciBlbGVtZW50YWwiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJhaXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYWlyIGVsZW1lbnRhbCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImFpciBlbGVtZW50YWwiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJhaXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYWlyIGVsZW1lbnRhbCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImFpciBlbGVtZW50YWwiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJhaXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYWlyIGVsZW1lbnRhbCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImFpciBlbGVtZW50YWwiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJhaXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCgpkZXMubW9uc3Rlcih7IGlkID0gImZsb2F0aW5nIGV5ZSIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZsb2F0aW5nIGV5ZSIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZsb2F0aW5nIGV5ZSIsIHBlYWNlZnVsID0gMCB9KQoKZGVzLm1vbnN0ZXIoeyBpZCA9ICJ5ZWxsb3cgbGlnaHQiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJ5ZWxsb3cgbGlnaHQiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJ5ZWxsb3cgbGlnaHQiLCBwZWFjZWZ1bCA9IDAgfSkKCmRlcy5tb25zdGVyKCJjb3VhdGwiKQoKZGVzLm1vbnN0ZXIoIkQiKQpkZXMubW9uc3RlcigiRCIpCmRlcy5tb25zdGVyKCJEIikKZGVzLm1vbnN0ZXIoIkQiKQpkZXMubW9uc3RlcigiRCIpCgpkZXMubW9uc3RlcigiRSIpCmRlcy5tb25zdGVyKCJFIikKZGVzLm1vbnN0ZXIoIkUiKQpkZXMubW9uc3RlcigiSiIpCmRlcy5tb25zdGVyKCJKIikKCmRlcy5tb25zdGVyKHsgaWQgPSAiZGppbm5pIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZGppbm5pIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZGppbm5pIiwgcGVhY2VmdWwgPSAwIH0pCgpkZXMubW9uc3Rlcih7IGlkID0gImZvZyBjbG91ZCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvZyBjbG91ZCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvZyBjbG91ZCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvZyBjbG91ZCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvZyBjbG91ZCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvZyBjbG91ZCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvZyBjbG91ZCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvZyBjbG91ZCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvZyBjbG91ZCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImVuZXJneSB2b3J0ZXgiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJlbmVyZ3kgdm9ydGV4IiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZW5lcmd5IHZvcnRleCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImVuZXJneSB2b3J0ZXgiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJlbmVyZ3kgdm9ydGV4IiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic3RlYW0gdm9ydGV4IiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic3RlYW0gdm9ydGV4IiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic3RlYW0gdm9ydGV4IiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic3RlYW0gdm9ydGV4IiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic3RlYW0gdm9ydGV4IiwgcGVhY2VmdWwgPSAwIH0pCgotLSBOZXRIYWNrIDMuNwllbmRnYW1lLmRlcwkkTkhEVC1EYXRlOiAxNTQ2MzAzNjgwIDIwMTkvMDEvMDEgMDA6NDg6MDAgJCAgJE5IRFQtQnJhbmNoOiBOZXRIYWNrLTMuNi4yLWJldGEwMSAkOiROSERULVJldmlzaW9uOiAxLjE0ICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkyLDE5OTMgYnkgSXpjaGFrIE1pbGxlciwgRGF2aWQgQ29ocnMsCi0tICAgICAgICAgICAgICAgICAgICAgIGFuZCBUaW1vIEhha3VsaW5lbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQotLQotLSBUaGVzZSBhcmUgdGhlIEVOREdBTUUgbGV2ZWxzOiBlYXJ0aCwgYWlyLCBmaXJlLCB3YXRlciwgYW5kIGFzdHJhbC4KLS0gVGhlIHRvcC1tb3N0IGxldmVsLCB0aGUgQXN0cmFsIExldmVsLCBoYXMgMyB0ZW1wbGVzIGFuZCBzaHJpbmVzLgotLSBQbGF5ZXJzIGFyZSBzdXBwb3NlZCB0byBzYWNyaWZpY2UgdGhlIEFtdWxldCBvZiBZZW5kb3Igb24gdGhlIGFwcHJvcHJpYXRlCi0tIHNocmluZS4KCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiICIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub3RlbGVwb3J0IiwgImhhcmRmbG9vciIsICJzaG9ydHNpZ2h0ZWQiKQoKZGVzLm1lc3NhZ2UoIldlbGwgZG9uZSwgbW9ydGFsISIpCmRlcy5tZXNzYWdlKCJCdXQgbm93IHRob3UgbXVzdCBmYWNlIHRoZSBmaW5hbCBUZXN0Li4uIikKZGVzLm1lc3NhZ2UoIlByb3ZlIHRoeXNlbGYgd29ydGh5IG9yIHBlcmlzaCEiKQoKLS0gVGhlIHBsYXllciBsYW5kcywgdXBvbiBhcnJpdmFsLCBpbiB0aGUKLS0gbG93ZXItcmlnaHQgY2F2ZXJuLiAgVGhlIGxvY2F0aW9uIG9mIHRoZQotLSBwb3J0YWwgdG8gdGhlIG5leHQgbGV2ZWwgaXMgcmFuZG9tbHkgY2hvc2VuLgotLSBUaGlzIG1hcCBoYXMgbm8gdmlzaWJsZSBvdXRlciBib3VuZGFyeSwgYW5kCi0tIGlzIG1vc3RseSBkaWdnYWJsZSAicm9jayIuCmRlcy5tYXAoW1sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAuLi4uICAgICAgICAgICAgICAgIC4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKIC4uLi4uICAgICAgICAgICAgIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4gICAgICAgICAgICAgIAogIC4uLi4gICAgICAgICAgICAgIC4uLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uICAgICAgICAgICAgCiAgIC4uLi4gICAgICAgICAgICAgIC4uLiAgICAgICAgICAgICAgICAuLi4uICAgICAgICAgICAgICAgICAuLi4gICAgICAuICAgICAKICAgIC4uICAgICAgICAgICAgICAgIC4uICAgICAgICAgICAgICAuLi4uLi4uICAgICAgICAgICAgICAgICAuICAgICAgLi4gICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAuICAgICAgCiAgICAgICAgICAgICAgLiAgICAgICAgICAgICAgICAgICAgICAuLiAgICAuICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiAgICAKICAgICAgICAgICAgIC4uICAuLiAgICAgICAgICAgICAgICAgIC4gICAgIC4uICAgICAgICAgICAgICAgICAgICAgICAgIC4gICAgIAogICAgICAgICAgICAuLiAgIC4uLiAgICAgICAgICAgICAgICAgICAgICAgIC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIC4uLiAgIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAuLiAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLiAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAuLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4gICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4gICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIC4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uLi4gICAgIAogIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uICAgICAgCiAuLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCl1dKTsKCmRlcy5yZXBsYWNlX3RlcnJhaW4oeyByZWdpb249ezAsMCwgNzUsMTl9LCBmcm9tdGVycmFpbj0iICIsIHRvdGVycmFpbj0iLiIsIGxpdD0wLCBjaGFuY2U9NSB9KQoKLS0gIFNpbmNlIHRoZXJlIGFyZSBubyBzdGFpcnMsIHRoaXMgZm9yY2VzIHRoZSBoZXJvJ3MgaW5pdGlhbCBwbGFjZW1lbnQKZGVzLnRlbGVwb3J0X3JlZ2lvbih7cmVnaW9uID0gezY5LDE2LDY5LDE2fSB9KQpkZXMubGV2cmVnaW9uKHsgcmVnaW9uID0gezAsMCw3NSwxOX0sIGV4Y2x1ZGUgPSB7NjUsMTMsNzUsMTl9LCB0eXBlPSJwb3J0YWwiLCBuYW1lPSJhaXIiIH0pCi0tICBTb21lIGhlbHBmdWwgbW9uc3RlcnMuICBNYWtpbmcgc3VyZSBhCi0tICBwaWNrIGF4ZSBhbmQgYXQgbGVhc3Qgb25lIHdhbmQgb2YgZGlnZ2luZwotLSAgYXJlIGF2YWlsYWJsZS4KZGVzLm1vbnN0ZXIoIkVsdmVua2luZyIsIDY3LDE2KQpkZXMubW9uc3RlcigibWlub3RhdXIiLCA2NywxNCkKLS0gIEFuIGFzc29ydG1lbnQgb2YgZWFydGgtYXBwcm9wcmlhdGUgbmFzdGllcwotLSAgaW4gZWFjaCBjYXZlcm4uCmRlcy5tb25zdGVyKHsgaWQgPSAiZWFydGggZWxlbWVudGFsIiwgeCA9IDUyLCB5ID0gMTMsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImVhcnRoIGVsZW1lbnRhbCIsIHggPSA1MywgeSA9IDEzLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoInJvY2sgdHJvbGwiLCA1MywxMikKZGVzLm1vbnN0ZXIoInN0b25lIGdpYW50IiwgNTQsMTIpCi0tCmRlcy5tb25zdGVyKCJwaXQgdmlwZXIiLCA3MCwwNSkKZGVzLm1vbnN0ZXIoImJhcmJlZCBkZXZpbCIsIDY5LDA2KQpkZXMubW9uc3Rlcigic3RvbmUgZ2lhbnQiLCA2OSwwOCkKZGVzLm1vbnN0ZXIoInN0b25lIGdvbGVtIiwgNzEsMDgpCmRlcy5tb25zdGVyKCJwaXQgZmllbmQiLCA3MCwwOSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJlYXJ0aCBlbGVtZW50YWwiLCB4ID0gNzAsIHkgPSAwOCwgcGVhY2VmdWwgPSAwIH0pCi0tCmRlcy5tb25zdGVyKHsgaWQgPSAiZWFydGggZWxlbWVudGFsIiwgeCA9IDYwLCB5ID0gMDMsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcigic3RvbmUgZ2lhbnQiLCA2MSwwNCkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJlYXJ0aCBlbGVtZW50YWwiLCB4ID0gNjIsIHkgPSAwNCwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZWFydGggZWxlbWVudGFsIiwgeCA9IDYxLCB5ID0gMDUsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcigic2NvcnBpb24iLCA2MiwwNSkKZGVzLm1vbnN0ZXIoInJvY2sgcGllcmNlciIsIDYzLDA1KQotLQpkZXMubW9uc3RlcigidW1iZXIgaHVsayIsIDQwLDA1KQpkZXMubW9uc3RlcigiZHVzdCB2b3J0ZXgiLCA0MiwwNSkKZGVzLm1vbnN0ZXIoInJvY2sgdHJvbGwiLCAzOCwwNikKZGVzLm1vbnN0ZXIoeyBpZCA9ICJlYXJ0aCBlbGVtZW50YWwiLCB4ID0gMzksIHkgPSAwNiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZWFydGggZWxlbWVudGFsIiwgeCA9IDQxLCB5ID0gMDYsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImVhcnRoIGVsZW1lbnRhbCIsIHggPSAzOCwgeSA9IDA3LCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoInN0b25lIGdpYW50IiwgMzksMDcpCmRlcy5tb25zdGVyKHsgaWQgPSAiZWFydGggZWxlbWVudGFsIiwgeCA9IDQzLCB5ID0gMDcsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcigic3RvbmUgZ29sZW0iLCAzNywwOCkKZGVzLm1vbnN0ZXIoInBpdCB2aXBlciIsIDQzLDA4KQpkZXMubW9uc3RlcigicGl0IHZpcGVyIiwgNDMsMDkpCmRlcy5tb25zdGVyKCJyb2NrIHRyb2xsIiwgNDQsMTApCi0tCmRlcy5tb25zdGVyKHsgaWQgPSAiZWFydGggZWxlbWVudGFsIiwgeCA9IDAyLCB5ID0gMDEsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImVhcnRoIGVsZW1lbnRhbCIsIHggPSAwMywgeSA9IDAxLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoInN0b25lIGdvbGVtIiwgMDEsMDIpCmRlcy5tb25zdGVyKHsgaWQgPSAiZWFydGggZWxlbWVudGFsIiwgeCA9IDAyLCB5ID0gMDIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcigicm9jayB0cm9sbCIsIDA0LDAzKQpkZXMubW9uc3Rlcigicm9jayB0cm9sbCIsIDAzLDAzKQpkZXMubW9uc3RlcigicGl0IGZpZW5kIiwgMDMsMDQpCmRlcy5tb25zdGVyKHsgaWQgPSAiZWFydGggZWxlbWVudGFsIiwgeCA9IDA0LCB5ID0gMDUsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3RlcigicGl0IHZpcGVyIiwgMDUsMDYpCi0tCmRlcy5tb25zdGVyKHsgaWQgPSAiZWFydGggZWxlbWVudGFsIiwgeCA9IDIxLCB5ID0gMDIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImVhcnRoIGVsZW1lbnRhbCIsIHggPSAyMSwgeSA9IDAzLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoIm1pbm90YXVyIiwgMjEsMDQpCmRlcy5tb25zdGVyKHsgaWQgPSAiZWFydGggZWxlbWVudGFsIiwgeCA9IDIxLCB5ID0gMDUsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcigicm9jayB0cm9sbCIsIDIyLDA1KQpkZXMubW9uc3Rlcih7IGlkID0gImVhcnRoIGVsZW1lbnRhbCIsIHggPSAyMiwgeSA9IDA2LCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJlYXJ0aCBlbGVtZW50YWwiLCB4ID0gMjMsIHkgPSAwNiwgcGVhY2VmdWwgPSAwIH0pCi0tCmRlcy5tb25zdGVyKCJwaXQgdmlwZXIiLCAxNCwwOCkKZGVzLm1vbnN0ZXIoImJhcmJlZCBkZXZpbCIsIDE0LDA5KQpkZXMubW9uc3Rlcih7IGlkID0gImVhcnRoIGVsZW1lbnRhbCIsIHggPSAxMywgeSA9IDEwLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoInJvY2sgdHJvbGwiLCAxMiwxMSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJlYXJ0aCBlbGVtZW50YWwiLCB4ID0gMTQsIHkgPSAxMiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZWFydGggZWxlbWVudGFsIiwgeCA9IDE1LCB5ID0gMTMsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcigic3RvbmUgZ2lhbnQiLCAxNywxMykKZGVzLm1vbnN0ZXIoInN0b25lIGdvbGVtIiwgMTgsMTMpCmRlcy5tb25zdGVyKCJwaXQgZmllbmQiLCAxOCwxMikKZGVzLm1vbnN0ZXIoeyBpZCA9ICJlYXJ0aCBlbGVtZW50YWwiLCB4ID0gMTgsIHkgPSAxMSwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZWFydGggZWxlbWVudGFsIiwgeCA9IDE4LCB5ID0gMTAsIHBlYWNlZnVsID0gMCB9KQotLQpkZXMubW9uc3RlcigiYmFyYmVkIGRldmlsIiwgMDIsMTYpCmRlcy5tb25zdGVyKHsgaWQgPSAiZWFydGggZWxlbWVudGFsIiwgeCA9IDAzLCB5ID0gMTYsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcigicm9jayB0cm9sbCIsIDAyLDE3KQpkZXMubW9uc3Rlcih7IGlkID0gImVhcnRoIGVsZW1lbnRhbCIsIHggPSAwNCwgeSA9IDE3LCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJlYXJ0aCBlbGVtZW50YWwiLCB4ID0gMDQsIHkgPSAxOCwgcGVhY2VmdWwgPSAwIH0pCgpkZXMub2JqZWN0KCJib3VsZGVyIikKCi0tIE5ldEhhY2sgMy43CWVuZGdhbWUuZGVzCSROSERULURhdGU6IDE1NDYzMDM2ODAgMjAxOS8wMS8wMSAwMDo0ODowMCAkICAkTkhEVC1CcmFuY2g6IE5ldEhhY2stMy42LjItYmV0YTAxICQ6JE5IRFQtUmV2aXNpb246IDEuMTQgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTIsMTk5MyBieSBJemNoYWsgTWlsbGVyLCBEYXZpZCBDb2hycywKLS0gICAgICAgICAgICAgICAgICAgICAgYW5kIFRpbW8gSGFrdWxpbmVuCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiICIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub3RlbGVwb3J0IiwgImhhcmRmbG9vciIsICJzaG9ydHNpZ2h0ZWQiKQotLSBUaGUgcGxheWVyIGxhbmRzLCB1cG9uIGFycml2YWwsIGluIHRoZQotLSBsb3dlci1yaWdodC4gIFRoZSBsb2NhdGlvbiBvZiB0aGUKLS0gcG9ydGFsIHRvIHRoZSBuZXh0IGxldmVsIGlzIHJhbmRvbWx5IGNob3Nlbi4KLS0gVGhpcyBtYXAgaGFzIG5vIHZpc2libGUgb3V0ZXIgYm91bmRhcnksIGFuZAotLSBpcyBtb3N0bHkgb3BlbiBhcmVhLCB3aXRoIGxhdmEgbGFrZXMgYW5kIGJ1bmNoZXMgb2YgZmlyZSB0cmFwcy4KZGVzLm1hcChbWwouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi5MTExMTExMTC4uLi4uLi4uLi4uLkwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLkxMTC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uTEwuLi4uLi4uLi4uLi4uLi4uLi4uTC4uLi4uLi4uLi4uLi4uLi4uLi4uLi5MTExMLi4uLi4uLi4uLi4uLi4uLkxMLi4uLi4uLgouLi5MLi4uLi4uLi4uLi4uLkxMTEwuLi5MTC4uLi5MTC4uLi4uLi4uLi4uLi4uLkxMTExMLi4uLi4uLi4uLi4uLkxMTC4uLi4uLi4uCi5MTExMLi4uLi4uLi4uLi4uLi5MTC4uLi5MLi4uLi5MTEwuLi4uLi4uLi4uLi4uLkxMTEwuLi4uLi4uLi4uLi4uLkxMTEwuLi4uLi4KLi4uLi4uLi4uLkxMTEwuLi5MTExMLi4uTExMLi4uLkxMTC4uLi4uLkwuLi4uLi4uLkxMTEwuLi4uTEwuLi4uLi4uLkxMTC4uLi4uLgouLi4uLi4uLkxMTExMTEwuLi5MTC4uLi4uTC4uLi4uLkwuLi4uLi5MTC4uLi4uLi4uLkxMLi4uLi4uTEwuLi4uLi4uLkxMLi4uTC4uCi4uLi4uLi4uTEwuLkxMTC4uTEwuLi4uLi5MTC4uLi4uLkxMTEwuLkwuLi4uLi4uLi5MTC4uLi4uLkxMTC4uLi4uLi4uLi4uLkxMLi4KLi4uLkwuLkxMLi4uLkxMTExMLi4uLi4uLi4uLi4uLi4uLi5MTExMTExMLi4uLi4uLkwuLi4uLi5MTC4uLi4uLi4uLi4uLkxMTExMTAouLi4uTC4uTC4uLi4uTEwuTExMTC4uLi4uLi5MLi4uLi4uLi4uLi4uTC4uLi4uLi4uTExMTEwuTEwuLi4uLi5MTC4uLi4uLi4uLkxMCi4uLi5MTC4uLi4uLi4uTC4uLkxMLi4uLi4uTEwuLi4uLi4uLi4uLi4uTExMLi4uLi5MLi4uTExMLi4uLi4uLkxMTC4uLi4uLi4uLkwKLi4uLi5MTExMTEwuLi4uLi4uLkwuLi4uLi4uTExMLi4uLi4uLi4uLi4uLkwuLi4uTEwuLi5MLkxMTC4uLi4uLkxMTExMTEwuLi4uLgouLi4uLi4uLi4uTExMTC4uLi4uLi4uLi4uLkxMLkwuLi4uLi4uLi4uLi4uTC4uLi5MLi4uTEwuLi4uLi4uLi5MTEwuLkxMTC4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLkxMTExMLi4uLi4uLi4uLi5MTC4uLkwuLi5MLi4uLi4uLi5MTExMLi5MTExMTEwuLi4KLi4uLi5MTExMLi4uLi4uLi4uLi4uLkxMLi4uLkxMLi4uLi4uLkxMTC4uLkxMLi4uLi4uLkwuLkxMTC4uLi5MTExMTExMLi4uLi4uLgouLi4uLi4uTExMLi4uLi4uLi4uTExMTExMTExMTEwuLi4uLi5MTExMTC4uLkwuLi4uLi4uLi4uLkxMLi4uTEwuLi5MTC4uLi4uLi4uCi4uLi4uLi4uLkxMLi4uLi4uLkxMLi4uLi4uLi4uTEwuLi4uLi4uTExMLi4uLkwuLkxMTC4uLi5MTC4uLi4uLi4uLkxMLi4uLi4uLi4KLi4uLi4uLi4uLkxMTExMTExMTC4uLi4uLi4uLi4uTEwuLi4uTExMLi4uLi4uLkxMTExMLi4uLi5MTC4uLi4uLi4uTEwuLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLkwuLi4uLi4uLi4uLi4uTExMTExMLi4uLi4uLi4uLi4uTEwuLi5MTExMLi4uLi4uLi4uTEwuLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLkxMLi4uLi4uLi4uLi4uLi4uLi4uLi5MTC4uLi4uLi4uLi4uLi4uLi4uLi4KXV0pOwpkZXMudGVsZXBvcnRfcmVnaW9uKHsgcmVnaW9uID0gezY5LDE2LDY5LDE2fSB9KQpkZXMubGV2cmVnaW9uKHsgcmVnaW9uID0gezAsMCw3NSwxOX0sIGV4Y2x1ZGUgPSB7NjUsMTMsNzUsMTl9LCB0eXBlPSJwb3J0YWwiLCBuYW1lPSJ3YXRlciIgfSkKCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJmaXJlIikKLS0gIEFuIGFzc29ydG1lbnQgb2YgZmlyZS1hcHByb3ByaWF0ZSBuYXN0aWVzCmRlcy5tb25zdGVyKCJyZWQgZHJhZ29uIikKZGVzLm1vbnN0ZXIoImJhbHJvZyIpCmRlcy5tb25zdGVyKHsgaWQgPSAiZmlyZSBlbGVtZW50YWwiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJmaXJlIGVsZW1lbnRhbCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3RlcigiZmlyZSB2b3J0ZXgiKQpkZXMubW9uc3RlcigiaGVsbCBob3VuZCIpCi0tCmRlcy5tb25zdGVyKCJmaXJlIGdpYW50IikKZGVzLm1vbnN0ZXIoImJhcmJlZCBkZXZpbCIpCmRlcy5tb25zdGVyKCJoZWxsIGhvdW5kIikKZGVzLm1vbnN0ZXIoInN0b25lIGdvbGVtIikKZGVzLm1vbnN0ZXIoInBpdCBmaWVuZCIpCmRlcy5tb25zdGVyKHsgaWQgPSAiZmlyZSBlbGVtZW50YWwiLCBwZWFjZWZ1bCA9IDAgfSkKLS0KZGVzLm1vbnN0ZXIoeyBpZCA9ICJmaXJlIGVsZW1lbnRhbCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3RlcigiaGVsbCBob3VuZCIpCmRlcy5tb25zdGVyKHsgaWQgPSAiZmlyZSBlbGVtZW50YWwiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJmaXJlIGVsZW1lbnRhbCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcigic2NvcnBpb24iKQpkZXMubW9uc3RlcigiZmlyZSBnaWFudCIpCi0tCmRlcy5tb25zdGVyKCJoZWxsIGhvdW5kIikKZGVzLm1vbnN0ZXIoImR1c3Qgdm9ydGV4IikKZGVzLm1vbnN0ZXIoImZpcmUgdm9ydGV4IikKZGVzLm1vbnN0ZXIoeyBpZCA9ICJmaXJlIGVsZW1lbnRhbCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZpcmUgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZmlyZSBlbGVtZW50YWwiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoImhlbGwgaG91bmQiKQpkZXMubW9uc3Rlcih7IGlkID0gImZpcmUgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKCJzdG9uZSBnb2xlbSIpCmRlcy5tb25zdGVyKCJwaXQgdmlwZXIiKQpkZXMubW9uc3RlcigicGl0IHZpcGVyIikKZGVzLm1vbnN0ZXIoImZpcmUgdm9ydGV4IikKLS0KZGVzLm1vbnN0ZXIoeyBpZCA9ICJmaXJlIGVsZW1lbnRhbCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZpcmUgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKCJmaXJlIGdpYW50IikKZGVzLm1vbnN0ZXIoeyBpZCA9ICJmaXJlIGVsZW1lbnRhbCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3RlcigiZmlyZSB2b3J0ZXgiKQpkZXMubW9uc3RlcigiZmlyZSB2b3J0ZXgiKQpkZXMubW9uc3RlcigicGl0IGZpZW5kIikKZGVzLm1vbnN0ZXIoeyBpZCA9ICJmaXJlIGVsZW1lbnRhbCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3RlcigicGl0IHZpcGVyIikKLS0KZGVzLm1vbnN0ZXIoeyBpZCA9ICJzYWxhbWFuZGVyIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic2FsYW1hbmRlciIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3RlcigibWlub3RhdXIiKQpkZXMubW9uc3Rlcih7IGlkID0gInNhbGFtYW5kZXIiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoInN0ZWFtIHZvcnRleCIpCmRlcy5tb25zdGVyKHsgaWQgPSAic2FsYW1hbmRlciIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInNhbGFtYW5kZXIiLCBwZWFjZWZ1bCA9IDAgfSkKLS0KZGVzLm1vbnN0ZXIoImZpcmUgZ2lhbnQiKQpkZXMubW9uc3RlcigiYmFyYmVkIGRldmlsIikKZGVzLm1vbnN0ZXIoeyBpZCA9ICJmaXJlIGVsZW1lbnRhbCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3RlcigiZmlyZSB2b3J0ZXgiKQpkZXMubW9uc3Rlcih7IGlkID0gImZpcmUgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZmlyZSBlbGVtZW50YWwiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoImhlbGwgaG91bmQiKQpkZXMubW9uc3RlcigiZmlyZSBnaWFudCIpCmRlcy5tb25zdGVyKCJwaXQgZmllbmQiKQpkZXMubW9uc3Rlcih7IGlkID0gImZpcmUgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZmlyZSBlbGVtZW50YWwiLCBwZWFjZWZ1bCA9IDAgfSkKLS0KZGVzLm1vbnN0ZXIoImJhcmJlZCBkZXZpbCIpCmRlcy5tb25zdGVyKHsgaWQgPSAic2FsYW1hbmRlciIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcigic3RlYW0gdm9ydGV4IikKZGVzLm1vbnN0ZXIoeyBpZCA9ICJzYWxhbWFuZGVyIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic2FsYW1hbmRlciIsIHBlYWNlZnVsID0gMCB9KQoKZGVzLm9iamVjdCgiYm91bGRlciIpCmRlcy5vYmplY3QoImJvdWxkZXIiKQpkZXMub2JqZWN0KCJib3VsZGVyIikKZGVzLm9iamVjdCgiYm91bGRlciIpCmRlcy5vYmplY3QoImJvdWxkZXIiKQoKLS0gTmV0SGFjayAzLjcJZW5kZ2FtZS5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4MyAyMDE1LzA1LzI1IDAwOjEzOjAzICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTMgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTIsMTk5MyBieSBJemNoYWsgTWlsbGVyLCBEYXZpZCBDb2hycywKLS0gICAgICAgICAgICAgICAgICAgICAgYW5kIFRpbW8gSGFrdWxpbmVuCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiICIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub3RlbGVwb3J0IiwgImhhcmRmbG9vciIsICJzaG9ydHNpZ2h0ZWQiKQpkZXMubWVzc2FnZSgiWW91IGZpbmQgeW91cnNlbGYgc3VzcGVuZGVkIGluIGFuIGFpciBidWJibGUgc3Vycm91bmRlZCBieSB3YXRlci4iKQotLSBUaGUgcGxheWVyIGxhbmRzIHVwb24gYXJyaXZhbCB0byBhbiBhaXIgYnViYmxlCi0tIHdpdGhpbiB0aGUgbGVmdG1vc3QgdGhpcmQgb2YgdGhlIGxldmVsLiAgVGhlCi0tIHBvcnRhbCB0byB0aGUgbmV4dCBsZXZlbCBpcyByYW5kb21seSBsb2NhdGVkIGluIGFuIGFpcgotLSBidWJibGUgd2l0aGluIHRoZSByaWdodG1vc3QgdGhpcmQgb2YgdGhlIGxldmVsLgotLSBCdWJibGVzIGFyZSBnZW5lcmF0ZWQgYnkgc3BlY2lhbCBjb2RlIGluIG1rbWF6ZS5jIGZvciBub3cuCmRlcy5tYXAoW1sKV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXVwpXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXCldXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1cKV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXVwpXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXCldXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1cKV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXVwpXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXCldXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1cKV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXVwpXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXCldXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1cKV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXVwpXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXCldXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1cKV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXVwpXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXCldXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1cKV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXVwpXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXCl1dKTsKZGVzLnRlbGVwb3J0X3JlZ2lvbih7IHJlZ2lvbiA9IHswLDAsMjUsMTl9IH0pCmRlcy5sZXZyZWdpb24oeyB0eXBlPSJwb3J0YWwiLCByZWdpb249ezUxLDAsNzUsMTl9LCBuYW1lPSJhc3RyYWwiIH0pCi0tIEEgZmlzaGVybWFuJ3MgZHJlYW0uLi4KZGVzLm1vbnN0ZXIoImdpYW50IGVlbCIpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiKQpkZXMubW9uc3RlcigiZ2lhbnQgZWVsIikKZGVzLm1vbnN0ZXIoImdpYW50IGVlbCIpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiKQpkZXMubW9uc3RlcigiZ2lhbnQgZWVsIikKZGVzLm1vbnN0ZXIoImdpYW50IGVlbCIpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiKQpkZXMubW9uc3RlcigiZWxlY3RyaWMgZWVsIikKZGVzLm1vbnN0ZXIoImVsZWN0cmljIGVlbCIpCmRlcy5tb25zdGVyKCJlbGVjdHJpYyBlZWwiKQpkZXMubW9uc3RlcigiZWxlY3RyaWMgZWVsIikKZGVzLm1vbnN0ZXIoImVsZWN0cmljIGVlbCIpCmRlcy5tb25zdGVyKCJlbGVjdHJpYyBlZWwiKQpkZXMubW9uc3RlcigiZWxlY3RyaWMgZWVsIikKZGVzLm1vbnN0ZXIoImVsZWN0cmljIGVlbCIpCmRlcy5tb25zdGVyKCJrcmFrZW4iKQpkZXMubW9uc3Rlcigia3Jha2VuIikKZGVzLm1vbnN0ZXIoImtyYWtlbiIpCmRlcy5tb25zdGVyKCJrcmFrZW4iKQpkZXMubW9uc3Rlcigia3Jha2VuIikKZGVzLm1vbnN0ZXIoImtyYWtlbiIpCmRlcy5tb25zdGVyKCJrcmFrZW4iKQpkZXMubW9uc3Rlcigia3Jha2VuIikKZGVzLm1vbnN0ZXIoImtyYWtlbiIpCmRlcy5tb25zdGVyKCJzaGFyayIpCmRlcy5tb25zdGVyKCJzaGFyayIpCmRlcy5tb25zdGVyKCJzaGFyayIpCmRlcy5tb25zdGVyKCJzaGFyayIpCmRlcy5tb25zdGVyKCJwaXJhbmhhIikKZGVzLm1vbnN0ZXIoInBpcmFuaGEiKQpkZXMubW9uc3RlcigicGlyYW5oYSIpCmRlcy5tb25zdGVyKCJwaXJhbmhhIikKZGVzLm1vbnN0ZXIoImplbGx5ZmlzaCIpCmRlcy5tb25zdGVyKCJqZWxseWZpc2giKQpkZXMubW9uc3RlcigiamVsbHlmaXNoIikKZGVzLm1vbnN0ZXIoImplbGx5ZmlzaCIpCmRlcy5tb25zdGVyKCI7IikKZGVzLm1vbnN0ZXIoIjsiKQpkZXMubW9uc3RlcigiOyIpCmRlcy5tb25zdGVyKCI7IikKLS0gVGhlc2UgZ3V5cyBmZWVsIGxpa2UgaG9tZSBoZXJlCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgZWxlbWVudGFsIiwgcGVhY2VmdWwgPSAwIH0pCgotLSBOZXRIYWNrIDMuNwlBcmNoLmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzg0IDIwMTUvMDUvMjUgMDA6MTM6MDQgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS4xMCAkCi0tCUNvcHlyaWdodCAoYykgMTk4OSBieSBKZWFuLUNocmlzdG9waGUgQ29sbGV0Ci0tCUNvcHlyaWdodCAoYykgMTk5MSBieSBNLiBTdGVwaGVuc29uCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiICIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIpOwoKZGVzLm1hcChbWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLS0tLS0tLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwuLnwufC4ufCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgIC0tLS0tLS0tLS0tfC4uUy5TLi58LS0tLS0tLS0tLS0gICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgfC58Li4uLi4uLi58Ky18LnwtK3wuLi4uLi4uLnwufCAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICB8LlMuLi4uLi4uLlMuLnwufC4uUy4uLi4uLi4uUy58ICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgIHwufC4uLi4uLi4ufC4ufC58Li58Li4uLi4uLi58LnwgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tKy0tLS0tLS0tLS0tLS0tLS0tLSAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICB8Li58Li4uLi4uLi4uLnwuLi4uLi4ufC4uLi4uLi4uLi58Li58ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHwuLnwuLi4uLi4uLi4uKy4uLi4uLi58Li4uLi4uLi4uLlMuLnwgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgfC4uUy4uLi4uLi4uLi58Li4uLi4uLisuLi4uLi4uLi4ufC4ufCAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICB8Li58Li4uLi4uLi4uLnwuLi4uLi4ufC4uLi4uLi4uLi58Li58ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0gICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgfC58Li4uLi4uLi58Li58LnwuLnwuLi4uLi4uLnwufCAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICB8LlMuLi4uLi4uLlMuLnwufC4uUy4uLi4uLi4uUy58ICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgIHwufC4uLi4uLi4ufCstfC58LSt8Li4uLi4uLi58LnwgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgLS0tLS0tLS0tLS18Li5TLlMuLnwtLS0tLS0tLS0tLSAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwuLnwufC4ufCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0tLS0tLS0tICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKXV0pOwotLSBEdW5nZW9uIERlc2NyaXB0aW9uCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMTkpLCAibGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgzNSwwMiwzNiwwMyksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoNDAsMDIsNDEsMDMpLCAidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDI0LDA0LDI0LDA2KSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgyNiwwNCwzMywwNiksICJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDM4LDAyLDM4LDA2KSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg0MywwNCw1MCwwNiksICJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDUyLDA0LDUyLDA2KSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgzNSwwNSwzNiwwNiksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoNDAsMDUsNDEsMDYpLCAidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDIxLDA4LDIyLDExKSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgyNCwwOCwzMywxMSksICJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDM1LDA4LDQxLDExKSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg0MywwOCw1MiwxMSksICJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDU0LDA4LDU1LDExKSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgyNCwxMywyNCwxNSksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMjYsMTMsMzMsMTUpLCAidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDM1LDEzLDM2LDE0KSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgzNSwxNiwzNiwxNyksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMzgsMTMsMzgsMTcpLCAidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDQwLDEzLDQxLDE0KSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg0MCwxNiw0MSwxNyksICJ1bmxpdCIpCmRlcy5yZWdpb24oeyByZWdpb249ezQzLDEzLCA1MCwxNX0sIGxpdD0wLCB0eXBlPSJ0ZW1wbGUiLCBmaWxsZWQ9MiB9KQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDUyLDEzLDUyLDE1KSwgInVubGl0IikKLS0gU3RhaXJzCmRlcy5zdGFpcigidXAiLCAzOCwxMCkKLS0gTm9uIGRpZ2dhYmxlIHdhbGxzCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMTkpKQotLSBUaGUgYWx0YXIgb2YgSHVoZXRvdGwuICBVbmF0dGVuZGVkLgpkZXMuYWx0YXIoeyB4PTUwLHk9MTQsYWxpZ249ImNoYW9zIix0eXBlPSJhbHRhciIgfSkKLS0gT2JqZWN0cwpkZXMub2JqZWN0KHsgaWQgPSAiY3J5c3RhbCBiYWxsIiwgeD01MCwgeT0xNCxidWM9ImJsZXNzZWQiLHNwZT01LG5hbWU9IlRoZSBPcmIgb2YgRGV0ZWN0aW9uIiB9KQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCi0tIFJhbmRvbSB0cmFwcwpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgicm9sbGluZyBib3VsZGVyIiw0NiwxNCkKLS0gUmFuZG9tIG1vbnN0ZXJzLgpkZXMubW9uc3RlcigiTWluaW9uIG9mIEh1aGV0b3RsIiwgNTAsIDE0KQpkZXMubW9uc3RlcigiUyIpCmRlcy5tb25zdGVyKCJTIikKZGVzLm1vbnN0ZXIoIlMiKQpkZXMubW9uc3RlcigiUyIpCmRlcy5tb25zdGVyKCJTIikKZGVzLm1vbnN0ZXIoIlMiKQpkZXMubW9uc3RlcigiUyIpCmRlcy5tb25zdGVyKCJTIikKZGVzLm1vbnN0ZXIoIlMiKQpkZXMubW9uc3RlcigiUyIpCmRlcy5tb25zdGVyKCJTIikKZGVzLm1vbnN0ZXIoIlMiKQpkZXMubW9uc3RlcigiUyIpCmRlcy5tb25zdGVyKCJTIikKZGVzLm1vbnN0ZXIoIlMiKQpkZXMubW9uc3RlcigiUyIpCmRlcy5tb25zdGVyKCJTIikKZGVzLm1vbnN0ZXIoIlMiKQpkZXMubW9uc3RlcigiaHVtYW4gbXVtbXkiKQpkZXMubW9uc3RlcigiaHVtYW4gbXVtbXkiKQpkZXMubW9uc3RlcigiaHVtYW4gbXVtbXkiKQpkZXMubW9uc3RlcigiaHVtYW4gbXVtbXkiKQpkZXMubW9uc3RlcigiaHVtYW4gbXVtbXkiKQpkZXMubW9uc3RlcigiaHVtYW4gbXVtbXkiKQpkZXMubW9uc3RlcigiaHVtYW4gbXVtbXkiKQpkZXMubW9uc3RlcigiaHVtYW4gbXVtbXkiKQpkZXMubW9uc3RlcigiTSIpCi0tIE5ldEhhY2sgMy43CUJhcmIuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjkgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiKTsKCmRlcy5tYXAoW1sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uLi4uLi4uLi4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uLi4uLi4uLi4uLi4uLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAuLi4uICAgICAgICAgICAgICAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uICAgICAgICAgIC4uLi4gICAgICAgICAgIAogICAgICAuLi4uLi4uICAgICAgICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uICAgICAgICAgICAuLi4uLi4uICAgICAgICAgCiAgICAgIC4uLi4uLiAgICAgICAgICAgICAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAgICAgLi4uLi4uLiAgICAgICAgICAKICAgICAgLi4gIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uICAgICAgICAgICAgIC4uICAgICAgICAgICAgIAogICAgICAgLi4gICAgICAgICAgICAgICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgICAgICAuLiAgICAgICAgICAgICAgCiAgICAgICAgLi4gICAgICAgICAgICAgICAgIC4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgICAgICAgLi4gICAgICAgICAgICAgICAKICAgICAgICAgLi4gICAgICAgICAuLlMuLi5TLi4uLi4uLi4uLi4uLi4gICAuLi4uLi4uLi4uLi4uLi4uICAgICAgICAgICAgICAgIAogICAgICAgICAgLi4gICAgICAgICAgICAgICAgICAgLi4uLi4uLi4gICAgICAgICAgICAgICAgLi4uICAgICAgICAgICAgICAgICAgCiAgICAgICAuLi4uLi4uLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uICAgICAgICAgICAgICAgICAKICAgICAgIC4uLi4uLiAgLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiAgLi4uLiAgICAgICAgIAogICAgICAuLiAuLi4gICAgLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLi4uLiAgICAgICAuLi4uLi4uLiAgICAgICAgCiAgIC4uLi4gICAgICAgICAgLi4gLi4uLi4uLi4uLi4uLi4uLi4uICAgICAgICAuLi4uLi4uLiAgICAgICAuLi4uLi4gICAgICAgICAKICAuLi4uLi4gICAgICAgICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAuLi4uLi4gICAgICAgICAuLiAgICAgICAgICAgIAogICAuLi4uICAgICAgICAgICAgIC4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgICAgICAgLi4uLi4uLi4uLi4gICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAuLi4uLi4uLi4uLi4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgLi4uLi4uLi4uLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCl1dKTsKLS0gRHVuZ2VvbiBEZXNjcmlwdGlvbgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDc1LDE5KSwgInVubGl0IikKLS0gU2VjcmV0IGRvb3JzCmRlcy5kb29yKCJsb2NrZWQiLDIyLDA5KQpkZXMuZG9vcigibG9ja2VkIiwyNiwwOSkKLS0gU3RhaXJzCmRlcy5zdGFpcigidXAiLCAzNiwwNSkKLS0gVGhlIGFsdGFyLiAgVW5hdHRlbmRlZC4KZGVzLmFsdGFyKHsgeD02Myx5PTA0LGFsaWduPSJub25jb2FsaWduZWQiLCB0eXBlPSJhbHRhciIgfSkKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgwMCwwMCw3NSwxOSkpCi0tIE9iamVjdHMKZGVzLm9iamVjdCh7IGlkID0gImx1Y2tzdG9uZSIsIHg9NjMsIHk9MDQsYnVjPSJibGVzc2VkIixzcGU9MCxuYW1lPSJUaGUgSGVhcnQgb2YgQWhyaW1hbiIgfSkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQotLSBSYW5kb20gdHJhcHMKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKLS0gUmFuZG9tIG1vbnN0ZXJzLgpkZXMubW9uc3Rlcih7IGlkID0gIlRob3RoIEFtb24iLCB4PTYzLCB5PTA0LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2dyZSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJvZ3JlIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9ncmUiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2dyZSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJvZ3JlIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9ncmUiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2dyZSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJvZ3JlIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9ncmUiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2dyZSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJvZ3JlIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9ncmUiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2dyZSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJvZ3JlIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9ncmUiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2dyZSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJPIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIk8iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicm9jayB0cm9sbCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJyb2NrIHRyb2xsIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInJvY2sgdHJvbGwiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicm9jayB0cm9sbCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJyb2NrIHRyb2xsIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInJvY2sgdHJvbGwiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicm9jayB0cm9sbCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJyb2NrIHRyb2xsIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIlQiLCBwZWFjZWZ1bD0wIH0pCmRlcy53YWxsaWZ5KCkKCi0tIE5ldEhhY2sgMy43CUNhdmVtYW4uZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODMgMjAxNS8wNS8yNSAwMDoxMzowMyAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjggJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiKTsKCmRlcy5tYXAoW1sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCl1dKTsKLS0gRHVuZ2VvbiBEZXNjcmlwdGlvbgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDc1LDE5KSwgImxpdCIpCi0tIFN0YWlycwpkZXMuc3RhaXIoInVwIikKLS0gTm9uIGRpZ2dhYmxlIHdhbGxzCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMTkpKQotLSBPYmplY3RzCmRlcy5vYmplY3QoeyBpZCA9ICJtYWNlIiwgeD0yMywgeT0xMCwgYnVjPSJibGVzc2VkIiwgc3BlPTAsIG5hbWU9IlRoZSBTY2VwdHJlIG9mIE1pZ2h0IiB9KQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCi0tIG1vbnN0ZXJzLgpkZXMubW9uc3Rlcih7IGlkID0gIkNocm9tYXRpYyBEcmFnb24iLCB4PTIzLCB5PTEwLCBhc2xlZXA9MSB9KQpkZXMubW9uc3Rlcigic2hyaWVrZXIiLCAyNiwgMTMpCmRlcy5tb25zdGVyKCJzaHJpZWtlciIsIDI1LCA4KQpkZXMubW9uc3Rlcigic2hyaWVrZXIiLCA0NSwgMTEpCmRlcy53YWxsaWZ5KCkKLS0gTmV0SGFjayAzLjcJSGVhbGVyLmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzg0IDIwMTUvMDUvMjUgMDA6MTM6MDQgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS4xMCAkCi0tCUNvcHlyaWdodCAoYykgMTk4OSBieSBKZWFuLUNocmlzdG9waGUgQ29sbGV0Ci0tCUNvcHlyaWdodCAoYykgMTk5MSwgMTk5MyBieSBNLiBTdGVwaGVuc29uLCBQLiBXaW5uZXIKLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICJQIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIik7CgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlPSJtaW5lcyIsIGZnPSIuIiwgYmc9IlAiLCBzbW9vdGhlZD1mYWxzZSwgam9pbmVkPXRydWUsIGxpdD0xLCB3YWxsZWQ9ZmFsc2UgfSkKCmRlcy5tYXAoW1sKLlAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5QUC4KUFAuLi4uLi4uUFBQUFBQUC4uLi5QUFBQUFBQLi4uLlBQUFAuLi5QUC4KLi4uUFBQUFBQUC4uLi5QUFBQUFBQLi4uLi5QUFBQUFAuLlBQUC4uLlAKLi4uUFAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5QUFAuLi4KLi5QUC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlBQLi4uLi4KLi5QUC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlBQUC4uLi4KLi5QUFAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5QUC4uLi4KLlBQUC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlBQUFAuLi4KLi4uUFAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uUFBQLi4uUFAKLi5QUFBQLi4uUFBQUFAuLlBQUFAuLi5QUFBQUC4uLi4uUFAuLi5QUC4KUC4uLi5QUFBQUC4uLlBQUFAuLlBQUFBQLi4uUFBQUFBQUC4uLlBQLi4KUFBQLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlBQUC4KXV0pOwotLSBEdW5nZW9uIERlc2NyaXB0aW9uCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsNDAsMTEpLCAibGl0IikKLS0gU3RhaXJzCmRlcy5zdGFpcigidXAiLCAzOSwxMCkKLS0gTm9uIGRpZ2dhYmxlIHdhbGxzCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDAsMDAsNDAsMTEpKQotLSBPYmplY3RzCmRlcy5vYmplY3QoeyBpZCA9ICJxdWFydGVyc3RhZmYiLCB4PTIwLCB5PTA2LCBidWM9ImJsZXNzZWQiLCBzcGU9MCwgbmFtZT0iVGhlIFN0YWZmIG9mIEFlc2N1bGFwaXVzIiB9KQpkZXMub2JqZWN0KCJsaWdodG5pbmciLCAyMCwgMDYpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKLS0gUmFuZG9tIHRyYXBzCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tIFJhbmRvbSBtb25zdGVycy4KZGVzLm1vbnN0ZXIoeyBpZCA9ICJDeWNsb3BzIiwgeD0yMCwgeT0wNiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3RlcigicmFiaWQgcmF0IikKZGVzLm1vbnN0ZXIoInJhYmlkIHJhdCIpCmRlcy5tb25zdGVyKCJyYWJpZCByYXQiKQpkZXMubW9uc3Rlcih7IGNsYXNzID0gInIiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiciIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoImdpYW50IGVlbCIpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiKQpkZXMubW9uc3RlcigiZ2lhbnQgZWVsIikKZGVzLm1vbnN0ZXIoImdpYW50IGVlbCIpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiKQpkZXMubW9uc3RlcigiZ2lhbnQgZWVsIikKZGVzLm1vbnN0ZXIoImVsZWN0cmljIGVlbCIpCmRlcy5tb25zdGVyKCJlbGVjdHJpYyBlZWwiKQpkZXMubW9uc3Rlcigic2hhcmsiKQpkZXMubW9uc3Rlcigic2hhcmsiKQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIjsiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiRCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJEIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiRCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJEIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIlMiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiUyIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJTIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIlMiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiUyIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJTIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIlMiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiUyIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJTIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIlMiLCBwZWFjZWZ1bD0wIH0pCgotLSBOZXRIYWNrIDMuNwlLbmlnaHQuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjkgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEsOTIgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiKTsKCmRlcy5tYXAoW1sKLi4uLlBQUFAuLlBQUC4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAouUFBQUFAuLi5QUC4uICAgICAuLi4uLi4uLi4uICAgICAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAgICAgCi4uUFBQUFAuLi5QLi4gICAgLi4uLi4uLi4uLi4gICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAgICAKLi5QUFAuLi4uLi4uICAgLi4uLi4uLi4uLi4gICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAgIAouLi5QUFAuLi4uLi4uICAgIC4uLi4uLi4uLiAgICAgLi4uLi4uLi4uLi4uLi4uICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uICAgICAgCi4uLi4uLi4uLi4uICAgIC4uLi4uLi4uLi4uLiAgICAuLi4uLi4uLi4uLi4gICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAKLi4uLi4uLi4uLi4uICAgLi4uLi4uLi4uLi4uLiAgICAgIC4uLi4uLi4gICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgIAouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAgICAgICAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uICAgICAgICAgCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uICAgICAgICAKLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uICAgICAgIAouLi4uLi4uLi4gICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uICAgICAgICAgCi4uLi4uUFAuLi4gICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAgICAKLi4uLi5QUFAuLi4uICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAgIAouLi4uLi5QUFAuLi4uICAgLi4uLi4uLi4uLi4uLi4gICAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAgCi4uLi4uLi5QUFAuLi4uICAuLi4uLi4uLi4uLi4uICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAKLi4uLi4uLi5QUC4uLiAgICAuLi4uLi4uLi4uLi4gICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgIAouLi5QUFAuLi4uLi4uLiAgICAgLi4uLi4uLi4uLiAgICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgCi4uUFBQUFAuLi4uLi4uLiAgICAgLi4uLi4uLi4uLiAgICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uICAgICAgICAgICAKLi4uLlBQUFBQLi4uLi4uICAgICAgIC4uLi4uLi4uLiAgICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAgICAgICAgIAouLi4uLi4uUFBQUC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCl1dKTsKLS0gRHVuZ2VvbiBEZXNjcmlwdGlvbgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDE0LDE5KSwgImxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMTUsMDAsNzUsMTkpLCAidW5saXQiKQotLSBTdGFpcnMKZGVzLnN0YWlyKCJ1cCIsIDAzLDA4KQotLSBOb24gZGlnZ2FibGUgd2FsbHMKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgwMCwwMCw3NSwxOSkpCi0tIE9iamVjdHMKZGVzLm9iamVjdCh7IGlkID0gIm1pcnJvciIsIHg9NTAseT0wNiwgYnVjPSJibGVzc2VkIiwgc3BlPTAsIG5hbWU9IlRoZSBNYWdpYyBNaXJyb3Igb2YgTWVybGluIiB9KQpkZXMub2JqZWN0KHsgY29vcmQgPSB7IDMzLCAwMSB9IH0pCmRlcy5vYmplY3QoeyBjb29yZCA9IHsgMzMsIDAyIH0gfSkKZGVzLm9iamVjdCh7IGNvb3JkID0geyAzMywgMDMgfSB9KQpkZXMub2JqZWN0KHsgY29vcmQgPSB7IDMzLCAwNCB9IH0pCmRlcy5vYmplY3QoeyBjb29yZCA9IHsgMzMsIDA1IH0gfSkKZGVzLm9iamVjdCh7IGNvb3JkID0geyAzNCwgMDEgfSB9KQpkZXMub2JqZWN0KHsgY29vcmQgPSB7IDM0LCAwMiB9IH0pCmRlcy5vYmplY3QoeyBjb29yZCA9IHsgMzQsIDAzIH0gfSkKZGVzLm9iamVjdCh7IGNvb3JkID0geyAzNCwgMDQgfSB9KQpkZXMub2JqZWN0KHsgY29vcmQgPSB7IDM0LCAwNSB9IH0pCmRlcy5vYmplY3QoeyBjb29yZCA9IHsgMzUsIDAxIH0gfSkKZGVzLm9iamVjdCh7IGNvb3JkID0geyAzNSwgMDIgfSB9KQpkZXMub2JqZWN0KHsgY29vcmQgPSB7IDM1LCAwMyB9IH0pCmRlcy5vYmplY3QoeyBjb29yZCA9IHsgMzUsIDA0IH0gfSkKZGVzLm9iamVjdCh7IGNvb3JkID0geyAzNSwgMDUgfSB9KQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQotLSBSYW5kb20gdHJhcHMKZGVzLnRyYXAoInNwaWtlZCBwaXQiLDEzLDA3KQpkZXMudHJhcCgic3Bpa2VkIHBpdCIsMTIsMDgpCmRlcy50cmFwKCJzcGlrZWQgcGl0IiwxMiwwOSkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tIFJhbmRvbSBtb25zdGVycy4KZGVzLm1vbnN0ZXIoeyBpZCA9ICJJeG90aCIsIHg9NTAsIHk9MDYsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJxdWFzaXQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicXVhc2l0IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInF1YXNpdCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJxdWFzaXQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicXVhc2l0IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInF1YXNpdCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJxdWFzaXQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicXVhc2l0IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInF1YXNpdCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJxdWFzaXQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicXVhc2l0IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInF1YXNpdCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJxdWFzaXQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicXVhc2l0IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInF1YXNpdCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJxdWFzaXQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiaSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJpIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9jaHJlIGplbGx5IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9jaHJlIGplbGx5IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9jaHJlIGplbGx5IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9jaHJlIGplbGx5IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9jaHJlIGplbGx5IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9jaHJlIGplbGx5IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9jaHJlIGplbGx5IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9jaHJlIGplbGx5IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gImoiLCBwZWFjZWZ1bD0wIH0pCi0tIE5ldEhhY2sgMy43CU1vbmsuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjEyICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxLTIgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQotLSBkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiKTsKCmRlcy5sZXZlbF9pbml0KHsgc3R5bGU9Im1pbmVzIiwgZmc9IkwiLCBiZz0iLiIsIHNtb290aGVkPWZhbHNlLCBqb2luZWQ9ZmFsc2UsIGxpdD0wLCB3YWxsZWQ9ZmFsc2UgfSkKCmRlcy5tYXAoW1sKeHh4eHh4Li54eHh4eHguLi54eHh4eHh4eHgKeHh4eC4uLi4uLnh4Li4uLi4ueHh4eHh4eHgKeHgueHguLi4uLi4uLi4uLi4ueHh4eHh4eHgKeC4uLi4uLi4uLi4uLi4uLi4uLi4ueHh4eHgKLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnh4eHgKLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnh4eHgKeHguLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KeHh4Li4uLi4uLi4uLi4uLi4uLi4uLi4uLngKeHh4Li4uLi4uLi4uLi4uLi4uLnh4eHh4eHgKeHh4eC4uLi4ueC54eC4uLi4uLi54eHh4eHgKeHh4eHguLi54eHh4eHguLi4ueHh4eHh4eHgKXV0pOwotLSBEdW5nZW9uIERlc2NyaXB0aW9uCmxvY2FsIHBsYWNlID0geyB7MTQsMDR9LHsxMywwN30gfQpsb2NhbCBwbGFjZWlkeCA9IG1hdGgucmFuZG9tKDEsICNwbGFjZSk7CgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDI1LDEwKSwgInVubGl0IikKLS0gU3RhaXJzCmRlcy5zdGFpcigidXAiLCAyMCwwNSkKLS0gT2JqZWN0cwpkZXMub2JqZWN0KHsgaWQgPSAibGVuc2VzIiwgY29vcmQgPSBwbGFjZVtwbGFjZWlkeF0sIGJ1Yz0iYmxlc3NlZCIsIHNwZT0wLCBuYW1lPSJUaGUgRXllcyBvZiB0aGUgT3ZlcndvcmxkIiB9KQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCi0tIFJhbmRvbSB0cmFwcwpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQotLSBSYW5kb20gbW9uc3RlcnMuCmRlcy5tb25zdGVyKCJNYXN0ZXIgS2FlbiIscGxhY2VbcGxhY2VpZHhdKQpkZXMuYWx0YXIoeyBjb29yZCA9IHBsYWNlW3BsYWNlaWR4XSwgYWxpZ249Im5vYWxpZ24iLCB0eXBlPSJhbHRhciIgfSkKZGVzLm1vbnN0ZXIoImVhcnRoIGVsZW1lbnRhbCIpCmRlcy5tb25zdGVyKCJlYXJ0aCBlbGVtZW50YWwiKQpkZXMubW9uc3RlcigiZWFydGggZWxlbWVudGFsIikKZGVzLm1vbnN0ZXIoImVhcnRoIGVsZW1lbnRhbCIpCmRlcy5tb25zdGVyKCJlYXJ0aCBlbGVtZW50YWwiKQpkZXMubW9uc3RlcigiZWFydGggZWxlbWVudGFsIikKZGVzLm1vbnN0ZXIoImVhcnRoIGVsZW1lbnRhbCIpCmRlcy5tb25zdGVyKCJlYXJ0aCBlbGVtZW50YWwiKQpkZXMubW9uc3RlcigiZWFydGggZWxlbWVudGFsIikKZGVzLm1vbnN0ZXIoInhvcm4iKQpkZXMubW9uc3RlcigieG9ybiIpCmRlcy5tb25zdGVyKCJ4b3JuIikKZGVzLm1vbnN0ZXIoInhvcm4iKQpkZXMubW9uc3RlcigieG9ybiIpCmRlcy5tb25zdGVyKCJ4b3JuIikKZGVzLm1vbnN0ZXIoInhvcm4iKQpkZXMubW9uc3RlcigieG9ybiIpCmRlcy5tb25zdGVyKCJ4b3JuIikKLS0gTmV0SGFjayAzLjcJUHJpZXN0LmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzg0IDIwMTUvMDUvMjUgMDA6MTM6MDQgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS4xMSAkCi0tCUNvcHlyaWdodCAoYykgMTk4OSBieSBKZWFuLUNocmlzdG9waGUgQ29sbGV0Ci0tCUNvcHlyaWdodCAoYykgMTk5MS0yIGJ5IE0uIFN0ZXBoZW5zb24KLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIik7CgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlPSJtaW5lcyIsIGZnPSJMIiwgYmc9Ii4iLCBzbW9vdGhlZD1mYWxzZSwgam9pbmVkPWZhbHNlLCBsaXQ9MCwgd2FsbGVkPWZhbHNlIH0pCgpkZXMubWFwKFtbCnh4eHh4eC4ueHh4eHh4Li4ueHh4eHh4eHh4Cnh4eHguLi4uLi54eC4uLi4uLnh4eHh4eHh4Cnh4Lnh4Li4uLi4uLi4uLi4uLnh4eHh4eHh4CnguLi4uLi4uLi4uLi4uLi4uLi4uLnh4eHh4Ci4uLi4uLi4uLi4uLi4uLi4uLi4uLi54eHh4Ci4uLi4uLi4uLi4uLi4uLi4uLi4uLi54eHh4Cnh4Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCnh4eC4uLi4uLi4uLi4uLi4uLi4uLi4uLi54Cnh4eC4uLi4uLi4uLi4uLi4uLi54eHh4eHh4Cnh4eHguLi4uLngueHguLi4uLi4ueHh4eHh4Cnh4eHh4Li4ueHh4eHh4Li4uLnh4eHh4eHh4Cl1dKTsKLS0gRHVuZ2VvbiBEZXNjcmlwdGlvbgpsb2NhbCBwbGFjZSA9IHsgezE0LDA0fSwgezEzLDA3fSB9CmxvY2FsIHBsYWNlaWR4ID0gbWF0aC5yYW5kb20oMSwgI3BsYWNlKTsKCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsMjUsMTApLCAidW5saXQiKQotLSBTdGFpcnMKZGVzLnN0YWlyKCJ1cCIsIDIwLDA1KQotLSBPYmplY3RzCmRlcy5vYmplY3QoeyBpZCA9ICJoZWxtIG9mIGJyaWxsaWFuY2UiLCBjb29yZCA9IHBsYWNlW3BsYWNlaWR4XSwgYnVjPSJibGVzc2VkIiwgc3BlPTAsIG5hbWU9IlRoZSBNaXRyZSBvZiBIb2xpbmVzcyIgfSkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQotLSBSYW5kb20gdHJhcHMKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKLS0gUmFuZG9tIG1vbnN0ZXJzLgpkZXMubW9uc3RlcigiTmFsem9rIixwbGFjZVtwbGFjZWlkeF0pCmRlcy5tb25zdGVyKCJodW1hbiB6b21iaWUiKQpkZXMubW9uc3RlcigiaHVtYW4gem9tYmllIikKZGVzLm1vbnN0ZXIoImh1bWFuIHpvbWJpZSIpCmRlcy5tb25zdGVyKCJodW1hbiB6b21iaWUiKQpkZXMubW9uc3RlcigiaHVtYW4gem9tYmllIikKZGVzLm1vbnN0ZXIoImh1bWFuIHpvbWJpZSIpCmRlcy5tb25zdGVyKCJodW1hbiB6b21iaWUiKQpkZXMubW9uc3RlcigiaHVtYW4gem9tYmllIikKZGVzLm1vbnN0ZXIoImh1bWFuIHpvbWJpZSIpCmRlcy5tb25zdGVyKCJodW1hbiB6b21iaWUiKQpkZXMubW9uc3RlcigiaHVtYW4gem9tYmllIikKZGVzLm1vbnN0ZXIoImh1bWFuIHpvbWJpZSIpCmRlcy5tb25zdGVyKCJodW1hbiB6b21iaWUiKQpkZXMubW9uc3RlcigiaHVtYW4gem9tYmllIikKZGVzLm1vbnN0ZXIoImh1bWFuIHpvbWJpZSIpCmRlcy5tb25zdGVyKCJodW1hbiB6b21iaWUiKQpkZXMubW9uc3RlcigiWiIpCmRlcy5tb25zdGVyKCJaIikKZGVzLm1vbnN0ZXIoIndyYWl0aCIpCmRlcy5tb25zdGVyKCJ3cmFpdGgiKQpkZXMubW9uc3Rlcigid3JhaXRoIikKZGVzLm1vbnN0ZXIoIndyYWl0aCIpCmRlcy5tb25zdGVyKCJ3cmFpdGgiKQpkZXMubW9uc3Rlcigid3JhaXRoIikKZGVzLm1vbnN0ZXIoIndyYWl0aCIpCmRlcy5tb25zdGVyKCJ3cmFpdGgiKQpkZXMubW9uc3RlcigiVyIpCi0tIE5ldEhhY2sgMy43CVJhbmdlci5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4MyAyMDE1LzA1LzI1IDAwOjEzOjAzICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuOSAkCi0tCUNvcHlyaWdodCAoYykgMTk4OSBieSBKZWFuLUNocmlzdG9waGUgQ29sbGV0Ci0tCUNvcHlyaWdodCAoYykgMTk5MSBieSBNLiBTdGVwaGVuc29uCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiICIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIpOwoKZGVzLm1hcChbWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uICAKIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uIAogIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiAgCiAgIC4gICAgIC4uLi4uLi4uLi4uLiAgICAgLi4uLi4uLiAgICAuICAgICAgICAgICAgICAgICAgIC4uLi4uLi4gICAgICAgIC4gICAKICAgLiAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gIC4gICAgICAgLi4uLi4uLi4gICAuLi4uLi4uLi5TLi4gICAgLiAgIAogICAuICAgLi4uLi4uLi4uLi4uICAgIC4gIC4uLi4uLiAgICAgLiAgICAgICAuICAgICAgLiAgICAuLi4uLi4uICAgLi4gICAuICAgCiAgIC4gICAgIC4uLi4uLi4uLiAgICAgLiAgIC4uLi4gICAgICArICAgICAgIC4gLi4uICAuICAgICAgICAgICAgICAgLi4gIC4gICAKICAgLiAgICAgICAgUyAgICAgICAgICAuICAgICAgICAgLi4uLi4uLi4uICAgLlMuICAgIC5TLi4uLi4uLi4uLi4uLi4uICAgLiAgIAogICAuICAuLi4gICAuICAgICAuLi4gIC4gICAgICAgICAuLi4uLi4uLi4gICAgICAgICAgLiAgICAgICAgICAgICAgICAgICAuICAgCiAgIC4gLi4uLi4uLi4gICAgLi4uLi5TLisuLi4uLi4uKy4uLi5cLi4uLisuLi4uLi4uLisuICAgICAgICAgICAgICAgICAgIC4gICAKICAgLiAgLi4uICAgICAgICAgLi4uICAgIFMgICAgICAgLi4uLi4uLi4uICAgICAgICAgICAuLiAgICAgIC4uLi4uICAgICAgLiAgIAogICAuICAgICAgICAgICAgICAgICAgICAuLiAgICAgICAuLi4uLi4uLi4gICAgICAgICAgICAuLiAgICAgIC4uLi4uLiAgICAuICAgCiAgIC4gICAgICAuLi4uLi4uICAgICAuLi4gICAgICAgICAgICArICAgICAgIC4uLi4gICAgLi4uLiAgICAuLi4uLi4uLi4uIC4gICAKICAgLiAuLi4uLi4uLi4uLi4uLiAgLi4gICAgICAgICAgICAgIC4gICAgICAuLi4uLi4gIC4uICAuLi4uLi4uLi4uLi4uICAgLiAgIAogICAuICAgICAuLi4uLi4uLi4uLi4uICAgICAgICAgICAgICAgLiAgICAgLi4uLi4uLi4uLiAgICAgICAgICAuLi4uLi4gICAuICAgCiAgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uICAKIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uIAogIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKXV0pOwotLSBEdW5nZW9uIERlc2NyaXB0aW9uCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMTkpLCAibGl0IikKLS0gU3RhaXJzCmRlcy5zdGFpcigidXAiLCAxOSwxMCkKLS0gTm9uIGRpZ2dhYmxlIHdhbGxzCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMTkpKQotLSBPYmplY3RzCmRlcy5vYmplY3QoeyBpZCA9ICJib3ciLCB4PTM3LCB5PTEwLCBidWM9ImJsZXNzZWQiLCBzcGU9MCwgbmFtZT0iVGhlIExvbmdib3cgb2YgRGlhbmEiIH0pCmRlcy5vYmplY3QoImNoZXN0IiwgMzcsIDEwKQpkZXMub2JqZWN0KHsgY29vcmQgPSB7IDM2LCAwOSB9IH0pCmRlcy5vYmplY3QoeyBjb29yZCA9IHsgMzYsIDEwIH0gfSkKZGVzLm9iamVjdCh7IGNvb3JkID0geyAzNiwgMTEgfSB9KQpkZXMub2JqZWN0KHsgY29vcmQgPSB7IDM3LCAwOSB9IH0pCmRlcy5vYmplY3QoeyBjb29yZCA9IHsgMzcsIDExIH0gfSkKZGVzLm9iamVjdCh7IGNvb3JkID0geyAzOCwgMDkgfSB9KQpkZXMub2JqZWN0KHsgY29vcmQgPSB7IDM4LCAxMCB9IH0pCmRlcy5vYmplY3QoeyBjb29yZCA9IHsgMzgsIDExIH0gfSkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQotLSBSYW5kb20gdHJhcHMKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKLS0gZG9vcnMKZGVzLmRvb3IoImxvY2tlZCIsMTIsMDgpCmRlcy5kb29yKCJjbG9zZWQiLDIyLDEwKQpkZXMuZG9vcigibG9ja2VkIiwyNCwxMCkKZGVzLmRvb3IoImNsb3NlZCIsMjUsMTEpCmRlcy5kb29yKCJjbG9zZWQiLDMyLDEwKQpkZXMuZG9vcigiY2xvc2VkIiwzNywwMykKZGVzLmRvb3IoImNsb3NlZCIsMzcsMDcpCmRlcy5kb29yKCJjbG9zZWQiLDM3LDEzKQpkZXMuZG9vcigiY2xvc2VkIiwzNywxNikKZGVzLmRvb3IoImNsb3NlZCIsNDIsMTApCmRlcy5kb29yKCJsb2NrZWQiLDQ2LDA4KQpkZXMuZG9vcigiY2xvc2VkIiw1MSwxMCkKZGVzLmRvb3IoImxvY2tlZCIsNTMsMDgpCmRlcy5kb29yKCJjbG9zZWQiLDY1LDA1KQotLSBSYW5kb20gbW9uc3RlcnMuCmRlcy5tb25zdGVyKHsgaWQgPSAiU2NvcnBpdXMiLCB4PTM3LCB5PTEwLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZm9yZXN0IGNlbnRhdXIiLCB4PTM2LCB5PTA5LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZm9yZXN0IGNlbnRhdXIiLCB4PTM2LCB5PTEwLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZm9yZXN0IGNlbnRhdXIiLCB4PTM2LCB5PTExLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZm9yZXN0IGNlbnRhdXIiLCB4PTM3LCB5PTA5LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZm9yZXN0IGNlbnRhdXIiLCB4PTM3LCB5PTExLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZm9yZXN0IGNlbnRhdXIiLCB4PTM4LCB5PTA5LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibW91bnRhaW4gY2VudGF1ciIsIHg9MzgsIHk9MTAsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJtb3VudGFpbiBjZW50YXVyIiwgeD0zOCwgeT0xMSwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm1vdW50YWluIGNlbnRhdXIiLCB4PTAyLCB5PTAyLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibW91bnRhaW4gY2VudGF1ciIsIHg9NzEsIHk9MDIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJtb3VudGFpbiBjZW50YXVyIiwgeD0wMiwgeT0xNiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm1vdW50YWluIGNlbnRhdXIiLCB4PTcxLCB5PTE2LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZm9yZXN0IGNlbnRhdXIiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZm9yZXN0IGNlbnRhdXIiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibW91bnRhaW4gY2VudGF1ciIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJtb3VudGFpbiBjZW50YXVyIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkMiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiQyIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJzY29ycGlvbiIsIHg9MDMsIHk9MDIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJzY29ycGlvbiIsIHg9NzIsIHk9MDIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJzY29ycGlvbiIsIHg9MDMsIHk9MTcsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJzY29ycGlvbiIsIHg9NzIsIHk9MTcsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJzY29ycGlvbiIsIHg9NDEsIHk9MTAsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJzY29ycGlvbiIsIHg9MzMsIHk9MDksIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJzY29ycGlvbiIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJzY29ycGlvbiIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJzIiwgcGVhY2VmdWw9MCB9KQoKZGVzLndhbGxpZnkoKQotLSBOZXRIYWNrIDMuNwlSb2d1ZS5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4NCAyMDE1LzA1LzI1IDAwOjEzOjA0ICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTEgJAotLQlDb3B5cmlnaHQgKGMpIDE5OTIgYnkgRGVhbiBMdWljawotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm90ZWxlcG9ydCIpCgotLSAgICAgICAgIDEgICAgICAgICAyICAgICAgICAgMyAgICAgICAgIDQgICAgICAgICA1ICAgICAgICAgNiAgICAgICAgIDcKLS0xMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDUKZGVzLm1hcChbWwotLS0tLSAgICAgIC0tLS0tLS0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58LS0tLS0tLS0tLS0tLS0tLS18CnwuLi58ICAtLS0tLS4uLi4ufC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwuLi4uLi4uLi4uLi4uLi4uLnwKfC4uLi0tLS0uLi58Li4uLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC4uLi4tLS0tLS0tLS0uLi4ufAp8Li0tLS4uLi4uLi0tLS4uLS0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0tLS0tLS0tLS0uLi4uLi4ufC4uLi58CnwuLi4uLi4uLi4uLi4uLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwuLnwuLi58Li4uLS0tLS4uLi4uLi4uLXwKfC4uLi4uLS0tLS0uLi4uLS0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58LS4uLS0uLi18Li4uLi4tLS0tUy0tLS18IAp8LS1TLS0tLi4ufC4uLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC0uLi4uLi4uLi18Li4uLnwuLi4uLi4uLnwgCnwuLi4uLi4uLi4tLS0tLS0tLS0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwtLi4uLn19Li4uLi18Li4ufC4uLnwuLi4ufCAKfC4uLi58Li4uLi5TLi4uLi4ufC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58LS4uLi4ufX0uLi4uLi18Li4tLS4tLS0tLS18IAp8LS0tLS0uLi4uLi0tLi4uLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC0uLi59fX19fX19fS4uLi18Li4uLnwuLi4uLi0tCnwuLi4uLi4uLi4uLi0tLi4uLi0tLS0tLVMtLS0tLS4uLi4uLi4uLi4uLi4uLnwtLi4uLn19fX19fX19Li4uLi18Li4uLi4uLi4uLnwKfC4uLi4uLi4uLi4uLi0tLi4uLi4uLi58Li4ufCB8Li4uLi4uLi4uLi4uLi4tLS4uLi4ufX0ufX0uLi4uLi4uLi0tLS0tLS0tLS1TLQp8Li4uLi4uLi4uLi4uLnwuLi4uLi4uLnwuLi58IHwuLi4uLi4uLi4uLi4uLnwuLi4uLi59fX19fX19fS4uLi4uLnwuLi58Li4uLi58CnxTLS4tLS0uLS0tLi0tLS4tLS0uLS0tfC4uLnwgLS0tLS0tLS0tLS0tLi4uLS0uLi4uLi4uLn19Ln19Li4uLi4tLS4uLS0tLi4uLnwKfC4tLS0uLS0tLi0tLS4tLS0uLVMtLi4tLS0tLSB8Li4uLnwuLi4uLnwuLi4ufC0uLi4ufX19fX19fX0uLi4uLS0tLi5TLnwtLS4ufAp8Li4ufC4uLi4uLi58Li4uLi4uLi4uLnwuLi4tLS0uLi4uLS0tLi4uUy4uLi4ufC0uLi59fX19fX19fS4uLi18LlMuLnwuLi58Li58CnwuLi58Li58Li4uLnwuLi4uLi4uLi4ufC4uLi4uLi4uLi4uLnwuLi0tLi4tLS0tfC0uLi4uLn19Li4uLi4tfC4uLS0tLS4uLi1TLS0KfC4uLnwtLS0uLi4uLS0tLS4uLi4uLi58LS0tLS0gLi4uLi4ufC4uLi0tLXwgICAgfC0uLi4ufX0uLi4uLXwuLi58Li4tLS4tLS4ufAotLS0tLS4uLi4uLS0tLi4uLi4tLS4tLS0uLi4uLS0uLi4tLS0tLS0tLS4ufCAgICAgfC0uLi4uLi4uLi18Li4uLnwuLi4uLi4uLi58CiAgICB8Li4uLi4uLi4uLi4uLnwuLi4uLi4uLi4ufC4uLi4uLi4uLi4uLi5TLi4uICAgfFMtLS0tLS0tfC4uLi4ufC4uLS0tLS0uLnwKICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIC4uLi4uLiAgICAgICAtLS0tLS0tLS0tICAgLS0tLQpdXSk7Ci0tIER1bmdlb24gRGVzY3JpcHRpb24KZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMCwwMCw3NSwyMCksICJsaXQiKQotLSBTdGFpcnMKZGVzLmxldnJlZ2lvbih7IHJlZ2lvbj17MDEsMDAsMTUsMjB9LCByZWdpb25faXNsZXY9MSwgZXhjbHVkZT17MDEsMTgsMDQsMjB9LCB0eXBlPSJzdGFpci11cCIgfSk7Ci0tIERvb3JzCi0tIE5vbiBkaWdnYWJsZSB3YWxscwpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDc1LDIwKSkKLS0gT25lIHRyYXAgdG8ga2VlcCB0aGUgZ25vbWVzIGF0IGJheS4KZGVzLnRyYXAoInNwaWtlZCBwaXQiLDM3LDA3KQotLSBPYmplY3RzCmRlcy5vYmplY3QoeyBpZCA9ICJza2VsZXRvbiBrZXkiLCB4PTM4LCB5PTEwLCBidWM9ImJsZXNzZWQiLCBzcGU9MCwgbmFtZT0iVGhlIE1hc3RlciBLZXkgb2YgVGhpZXZlcnkiIH0pCmRlcy5vYmplY3QoeyBpZCA9ICJ0aW4iLCB4PTI2LCB5PTEyLCBtb250eXBlPSJjaGFtZWxlb24iIH0pCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQotLSBSYW5kb20gdHJhcHMKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tIFJhbmRvbSBtb25zdGVycy4KZGVzLm1vbnN0ZXIoeyBpZCA9ICJNYXN0ZXIgQXNzYXNzaW4iLCB4PTM4LCB5PTEwLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibGVwcmVjaGF1biIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJsZXByZWNoYXVuIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImxlcHJlY2hhdW4iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibGVwcmVjaGF1biIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJsZXByZWNoYXVuIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImxlcHJlY2hhdW4iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibGVwcmVjaGF1biIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJsZXByZWNoYXVuIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImxlcHJlY2hhdW4iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibGVwcmVjaGF1biIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJsZXByZWNoYXVuIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImxlcHJlY2hhdW4iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibGVwcmVjaGF1biIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJsZXByZWNoYXVuIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImxlcHJlY2hhdW4iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibGVwcmVjaGF1biIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJsIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gImwiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZ3VhcmRpYW4gbmFnYSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJndWFyZGlhbiBuYWdhIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImd1YXJkaWFuIG5hZ2EiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZ3VhcmRpYW4gbmFnYSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJndWFyZGlhbiBuYWdhIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImd1YXJkaWFuIG5hZ2EiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZ3VhcmRpYW4gbmFnYSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJndWFyZGlhbiBuYWdhIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIk4iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiTiIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJOIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImNoYW1lbGVvbiIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJjaGFtZWxlb24iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiY2hhbWVsZW9uIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImNoYW1lbGVvbiIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJjaGFtZWxlb24iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic2hhcmsiLCB4PTUxLCB5PTE0LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic2hhcmsiLCB4PTUzLCB5PTA5LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic2hhcmsiLCB4PTU1LCB5PTE1LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic2hhcmsiLCB4PTU4LCB5PTEwLCBwZWFjZWZ1bD0wIH0pCi0tIE5ldEhhY2sgMy43CVNhbXVyYWkuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODMgMjAxNS8wNS8yNSAwMDoxMzowMyAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjExICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxLTkyIGJ5IE0uIFN0ZXBoZW5zb24sIFAuIFdpbm5lcgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm90ZWxlcG9ydCIpOwoKZGVzLm1hcChbWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgICAgCiAgICAgICAuLi4uLi4tLS0tLS0tLS0tLS0tLS0tLS0tLi4uLi4uICAgICAgIAogICAgLi4uLi4uLS0tLS4uLi4uLi4uLi4uLi4uLi4uLS0tLS4uLi4uLiAgICAKICAgLi4uLi0tLS0uLi4uLi0tLS0tLS0tLS0tLS0uLi4uLi0tLS0uLi4uICAgCiAgLi4uLi0tLi4uLi4tLS0tLi4uLi4uLi4uLi4tLS0tLi4uLi4tLS4uLi4gIAogIC4uLnx8Li4uLi0tLS4uLi4tLS0tLS0tLS0uLi4uLS0tLi4uLnx8Li4uICAKICAuLi58Li4uLi0tLi4uLi0tLS4uLi4uLi4tLS0uLi4uLS0uLi4ufC4uLiAgCiAuLi4ufC4uLnx8Li4uLS0tLi4uLS0rLS0uLi4tLS0uLi58fC4uLnwuLi4uIAogLi4uLnwuLi58Li4uLnwuLi4ufC0uLi4tfC4uLi58Li4uLnwuLi58Li4uLiAKIC4uLi58Li4ufC4uLi58Li4uLisuLi4uLisuLi4ufC4uLi58Li4ufC4uLi4gCiAuLi4ufC4uLnwuLi4ufC4uLi58LS4uLi18Li4uLnwuLi4ufC4uLnwuLi4uIAogLi4uLnwuLi58fC4uLi0tLS4uLi0tKy0tLi4uLS0tLi4ufHwuLi58Li4uLiAKICAuLi58Li4uLi0tLi4uLi0tLS4uLi4uLi4tLS0uLi4uLS0uLi4ufC4uLiAgCiAgLi4ufHwuLi4uLS0tLi4uLi0tLS0tLS0tLS4uLi4tLS0uLi4ufHwuLi4gIAogIC4uLi4tLS4uLi4uLS0tLS4uLi4uLi4uLi4uLS0tLS4uLi4uLS0uLi4uICAKICAgLi4uLi0tLS0uLi4uLi0tLS0tLS0tLS0tLS0uLi4uLi0tLS0uLi4uICAgCiAgICAuLi4uLi4tLS0tLi4uLi4uLi4uLi4uLi4uLi4tLS0tLi4uLi4uICAgIAogICAgICAgLi4uLi4uLS0tLS0tLS0tLS0tLS0tLS0tLS4uLi4uLiAgICAgICAKICAgICAgICAgICAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgICAgCl1dKTsKLS0gRHVuZ2VvbiBEZXNjcmlwdGlvbgpsb2NhbCBwbGFjZSA9IHsgezAyLDExfSx7NDIsMDl9IH0KbG9jYWwgcGxhY2VpZHggPSBtYXRoLnJhbmRvbSgxLCAjcGxhY2UpOwoKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMCwwMCw0NCwxOSksICJ1bmxpdCIpCi0tIERvb3JzCmRlcy5kb29yKCJjbG9zZWQiLDE5LDEwKQpkZXMuZG9vcigiY2xvc2VkIiwyMiwwOCkKZGVzLmRvb3IoImNsb3NlZCIsMjIsMTIpCmRlcy5kb29yKCJjbG9zZWQiLDI1LDEwKQotLSBTdGFpcnMKZGVzLnN0YWlyKHsgZGlyID0gInVwIiwgY29vcmQgPSBwbGFjZVtwbGFjZWlkeF0gfSkKCi0tIEhvbGVzIGluIHRoZSBjb25jZW50cmljIHJpbmcgd2FsbHMKbG9jYWwgcGxhY2UgPSB7IHsyMiwxNH0sezMwLDEwfSx7MjIsIDZ9LHsxNCwxMH0gfQpsb2NhbCBwbGFjZWlkeCA9IG1hdGgucmFuZG9tKDEsICNwbGFjZSk7CmRlcy50ZXJyYWluKHBsYWNlW3BsYWNlaWR4XSwgIi4iKQpsb2NhbCBwbGFjZSA9IHsgezIyLCA0fSx7MzUsMTB9LHsyMiwxNn0seyA5LDEwfSB9CmxvY2FsIHBsYWNlaWR4ID0gbWF0aC5yYW5kb20oMSwgI3BsYWNlKTsKZGVzLnRlcnJhaW4ocGxhY2VbcGxhY2VpZHhdLCAiLiIpCmxvY2FsIHBsYWNlID0geyB7MjIsIDJ9LHsyMiwxOH0gfQpsb2NhbCBwbGFjZWlkeCA9IG1hdGgucmFuZG9tKDEsICNwbGFjZSk7CmRlcy50ZXJyYWluKHBsYWNlW3BsYWNlaWR4XSwgIi4iKQoKLS0gTm9uIGRpZ2dhYmxlIHdhbGxzCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDAsMDAsNDQsMTkpKQotLSBPYmplY3RzCmRlcy5vYmplY3QoeyBpZCA9ICJ0c3VydWdpIiwgeD0yMiwgeT0xMCwgYnVjPSJibGVzc2VkIiwgc3BlPTAsIG5hbWU9IlRoZSBUc3VydWdpIG9mIE11cmFtYXNhIiB9KQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCi0tCmRlcy50cmFwKCJib2FyZCIsMjIsMDkpCmRlcy50cmFwKCJib2FyZCIsMjQsMTApCmRlcy50cmFwKCJib2FyZCIsMjIsMTEpCi0tIFJhbmRvbSB0cmFwcwpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQotLSBSYW5kb20gbW9uc3RlcnMuCmRlcy5tb25zdGVyKCJBc2hpa2FnYSBUYWthdWppIiwgMjIsIDEwKQpkZXMubW9uc3Rlcih7IGlkID0gInNhbXVyYWkiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic2FtdXJhaSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJzYW11cmFpIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInNhbXVyYWkiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic2FtdXJhaSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJuaW5qYSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJuaW5qYSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJuaW5qYSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJuaW5qYSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJuaW5qYSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoIndvbGYiKQpkZXMubW9uc3Rlcigid29sZiIpCmRlcy5tb25zdGVyKCJ3b2xmIikKZGVzLm1vbnN0ZXIoIndvbGYiKQpkZXMubW9uc3RlcigiZCIpCmRlcy5tb25zdGVyKCJkIikKZGVzLm1vbnN0ZXIoInN0YWxrZXIiKQpkZXMubW9uc3Rlcigic3RhbGtlciIpCmRlcy5tb25zdGVyKCJzdGFsa2VyIikKZGVzLm1vbnN0ZXIoInN0YWxrZXIiKQpkZXMubW9uc3Rlcigic3RhbGtlciIpCmRlcy5tb25zdGVyKCJzdGFsa2VyIikKZGVzLm1vbnN0ZXIoInN0YWxrZXIiKQpkZXMubW9uc3Rlcigic3RhbGtlciIpCmRlcy5tb25zdGVyKCJzdGFsa2VyIikKLS0gTmV0SGFjayAzLjcJVG91cmlzdC5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4NCAyMDE1LzA1LzI1IDAwOjEzOjA0ICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuOCAkCi0tCUNvcHlyaWdodCAoYykgMTk4OSBieSBKZWFuLUNocmlzdG9waGUgQ29sbGV0Ci0tCUNvcHlyaWdodCAoYykgMTk5MSw5MiBieSBNLiBTdGVwaGVuc29uLCBQLiBXaW5uZXIKLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIik7CgpkZXMubWFwKFtbCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KfC4uLi4uLi4uLnwuLi4uLi4uLi58Li4uLi4uLi4uLnwuLnwgfC4uLi4uLi4uLi4uLi4uLi4ufC4uLi4uLi4ufC4uLi4uLi4ufC4ufAp8Li4uLi4uLi4ufC4uLi4uLi4uLnwuLi4uLi4uLi4ufC4ufCB8Li4uLi0tLS0tLS0tLi4uLi58Li4uLi4uLi58Li4uLi4uLi58Li58CnwtLS0tLS1TLS18LS0rLS0tLS0tLS0tLS0rLS0tLS0tLi58IHwuLi4ufC4uLi4uLnwuLi4uLnwuLi4uLi4uLnwuLi4uLi4uLnwuLnwKfC4uLi4uLi4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwgfC4uLi58Li4uLi4uKy4uLi4uLS0rLS0tLS0tLS0tLS0tLSstLS4ufAp8Li4uLi4uLi4ufC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufCB8Li4uLnwuLi4uLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58CnwtUy0tLS0tUy18Li4uLi4uLS0tLS0tLS0tLS4uLi4uLi58IHwuLi4ufC4uLi4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKfC4ufC4ufC4uLnwuLi4uLi58Li4uLi4uLi58Li4uLi4uLnwgfC4uLi4tLS0tLS0tLS0tLS4uLi4uLi4uLi0tLS0uLi4uLi4uLi4ufAp8Li4rLi4rLi4ufC4uLi4uLnwuLi4uLi4uLnwuLi4uLi4ufCB8Li4uLnwuLi4uLi4uLi58Li4uLi4uLi4ufH19fC4uLi4uLi4uLi58CnwuLnwuLnwuLi58Li4uLi4uKy4uLi4uLi4ufC4uLi4uLi58IHwuLi4ufC4uLi4uLi4uLisuLi4uLi4uLi58fX18Li4uLi4uLi4uLnwKfC4ufC4ufC4uLnwuLi4uLi58Li4uLi4uLi58Li4uLi4uLlMuUy4uLi58Li4uLi4uLi4ufC4uLi4uLi4uLi0tLS0uLi4uLi4uLi4ufAp8LS0tLi4tLS0tfC4uLi4uLnwuLi4uLi4uLnwuLi4uLi4ufCB8Li4uLnwuLi4uLi4uLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi58CnwuLi4uLi4uLi4rLi4uLi4ufCtGLStGLStGfC4uLi4uLi58IHwuLi4uLS0tLS0tLS0tLS0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwKfC0tLS4uLS0tLXwuLi4uLi58Li58Li58Li58Li4uLi4uLnwgfC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0tLS0tLS0tLS0tLS4ufAp8Li58Li58Li4ufC4uLi4uLi0tRi1GLS1GLS0uLi4uLi4ufCB8Li4uLi4uLi4uLi4uLi4uLi4uLi4uLisuLi4uLi4uLi4uLi58Li58CnwuLisuLisuLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi58IHwtLS4tLS0uLi4tLS0tLSstLS0tLS4ufC4uLi4uLi4uLi4uLnwuLnwKfC0tfC4uLS0tLXwtLSstLS0tLS0tLS0tLSstLS0tLS0uLnwgfC4uLi4ufC4uLnwuLi4uLi4uLi58Li58LS0tLS0tLS0tLS0tfC4ufAp8Li4rLi4rLi4ufC4uLi4uLi4uLnwuLi4uLi4uLi4ufC4ufCB8Li4uLi58Li4ufC4uLi4uLi4uLnwuLisuLi4uLi4uLi4uLi58Li58CnwuLnwuLnwuLi58Li4uLi4uLi4ufC4uLi4uLi4uLi58Li58IHwuLi4uLnwuLi58Li4uLi4uLi4ufC4ufC4uLi4uLi4uLi4uLnwuLnwKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpdXSk7Ci0tIER1bmdlb24gRGVzY3JpcHRpb24KZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMCwwMCw3NSwxOSksICJsaXQiKQotLSBUaGUgSW5uCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDEsMDEsMDksMDIpLCAibGl0IikKZGVzLnJlZ2lvbih7IHJlZ2lvbiA9IHswMSwwNCwwOSwwNX0sIGxpdD0xLCB0eXBlID0gImJhcnJhY2tzIiwgZmlsbGVkID0gMSB9KQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAxLDA3LDAyLDEwKSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwNywwNywwOSwxMCksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDEsMTQsMDIsMTUpLCAidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDA3LDE0LDA5LDE1KSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMSwxNywwMiwxOCksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDcsMTcsMDksMTgpLCAidW5saXQiKQotLQpkZXMucmVnaW9uKHsgcmVnaW9uID0gezExLDAxLDE5LDAyfSwgbGl0ID0gMCwgdHlwZSA9ICJiYXJyYWNrcyIsIGZpbGxlZCA9IDEgfSkKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgyMSwwMSwzMCwwMiksICJ1bmxpdCIpCmRlcy5yZWdpb24oeyByZWdpb24gPSB7MTEsMTcsMTksMTh9LCBsaXQgPSAwLCB0eXBlID0gImJhcnJhY2tzIiwgZmlsbGVkID0gMSB9KQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDIxLDE3LDMwLDE4KSwgInVubGl0IikKLS0gUG9saWNlIFN0YXRpb24KZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgxOCwwNywyNSwxMSksICJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDE4LDEzLDE5LDEzKSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgyMSwxMywyMiwxMyksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMjQsMTMsMjUsMTMpLCAidW5saXQiKQotLSBUaGUgdG93biBpdHNlbGYKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg0MiwwMyw0NywwNiksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoNDIsMDgsNTAsMTEpLCAidW5saXQiKQpkZXMucmVnaW9uKHsgcmVnaW9uID0gezM3LDE2LDQxLDE4fSwgbGl0ID0gMCwgdHlwZSA9ICJtb3JndWUiLCBmaWxsZWQgPSAxIH0pCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoNDcsMTYsNTUsMTgpLCAidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDU1LDAxLDYyLDAzKSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg2NCwwMSw3MSwwMyksICJ1bmxpdCIpCmRlcy5yZWdpb24oeyByZWdpb24gPSB7NjAsMTQsNzEsMTV9LCBsaXQgPSAxLCB0eXBlID0gInNob3AiLCBmaWxsZWQgPSAxIH0pCmRlcy5yZWdpb24oeyByZWdpb24gPSB7NjAsMTcsNzEsMTh9LCBsaXQgPSAxLCB0eXBlID0gInNob3AiLCBmaWxsZWQgPSAxIH0pCi0tIE5vbiBkaWdnYWJsZSB3YWxscwpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDc1LDE5KSkKLS0gU3RhaXJzCmRlcy5zdGFpcigidXAiLCA3MCwwOCkKLS0gRG9vcnMKZGVzLmRvb3IoImxvY2tlZCIsMDcsMDMpCmRlcy5kb29yKCJsb2NrZWQiLDAyLDA2KQpkZXMuZG9vcigibG9ja2VkIiwwOCwwNikKZGVzLmRvb3IoImNsb3NlZCIsMDMsMDgpCmRlcy5kb29yKCJjbG9zZWQiLDA2LDA4KQpkZXMuZG9vcigib3BlbiIsMTAsMTIpCmRlcy5kb29yKCJjbG9zZWQiLDAzLDE1KQpkZXMuZG9vcigiY2xvc2VkIiwwNiwxNSkKZGVzLmRvb3IoImNsb3NlZCIsMDMsMTcpCmRlcy5kb29yKCJjbG9zZWQiLDA2LDE3KQpkZXMuZG9vcigiY2xvc2VkIiwxMywwMykKZGVzLmRvb3IoInJhbmRvbSIsMjUsMDMpCmRlcy5kb29yKCJjbG9zZWQiLDEzLDE2KQpkZXMuZG9vcigicmFuZG9tIiwyNSwxNikKZGVzLmRvb3IoImxvY2tlZCIsMTcsMDkpCmRlcy5kb29yKCJsb2NrZWQiLDE4LDEyKQpkZXMuZG9vcigibG9ja2VkIiwyMSwxMikKZGVzLmRvb3IoImxvY2tlZCIsMjQsMTIpCmRlcy5kb29yKCJsb2NrZWQiLDM0LDEwKQpkZXMuZG9vcigibG9ja2VkIiwzNiwxMCkKZGVzLmRvb3IoInJhbmRvbSIsNDgsMDQpCmRlcy5kb29yKCJyYW5kb20iLDU2LDA0KQpkZXMuZG9vcigicmFuZG9tIiw3MCwwNCkKZGVzLmRvb3IoInJhbmRvbSIsNTEsMDkpCmRlcy5kb29yKCJyYW5kb20iLDUxLDE1KQpkZXMuZG9vcigib3BlbiIsNTksMTQpCmRlcy5kb29yKCJvcGVuIiw1OSwxNykKLS0gT2JqZWN0cwpkZXMub2JqZWN0KHsgaWQgPSAiY3JlZGl0IGNhcmQiLCB4PTA0LCB5PTAxLCBidWM9ImJsZXNzZWQiLCBzcGU9MCwgbmFtZT0iVGhlIFBsYXRpbnVtIFllbmRvcmlhbiBFeHByZXNzIENhcmQiIH0pCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKLS0gUmFuZG9tIHRyYXBzCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tIFJhbmRvbSBtb25zdGVycy4KZGVzLm1vbnN0ZXIoeyBpZCA9ICJNYXN0ZXIgb2YgVGhpZXZlcyIsIHg9MDQsIHk9MDEsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3RlcigiZ2lhbnQgc3BpZGVyIikKZGVzLm1vbnN0ZXIoImdpYW50IHNwaWRlciIpCmRlcy5tb25zdGVyKCJnaWFudCBzcGlkZXIiKQpkZXMubW9uc3RlcigiZ2lhbnQgc3BpZGVyIikKZGVzLm1vbnN0ZXIoImdpYW50IHNwaWRlciIpCmRlcy5tb25zdGVyKCJnaWFudCBzcGlkZXIiKQpkZXMubW9uc3RlcigiZ2lhbnQgc3BpZGVyIikKZGVzLm1vbnN0ZXIoImdpYW50IHNwaWRlciIpCmRlcy5tb25zdGVyKCJnaWFudCBzcGlkZXIiKQpkZXMubW9uc3RlcigiZ2lhbnQgc3BpZGVyIikKZGVzLm1vbnN0ZXIoImdpYW50IHNwaWRlciIpCmRlcy5tb25zdGVyKCJnaWFudCBzcGlkZXIiKQpkZXMubW9uc3RlcigiZ2lhbnQgc3BpZGVyIikKZGVzLm1vbnN0ZXIoImdpYW50IHNwaWRlciIpCmRlcy5tb25zdGVyKCJnaWFudCBzcGlkZXIiKQpkZXMubW9uc3RlcigiZ2lhbnQgc3BpZGVyIikKZGVzLm1vbnN0ZXIoInMiKQpkZXMubW9uc3RlcigicyIpCi0tIGxhZGllcyBvZiB0aGUgZXZlbmluZwpkZXMubW9uc3Rlcigic3VjY3VidXMiLCAwMiwgMDgpCmRlcy5tb25zdGVyKCJzdWNjdWJ1cyIsIDA4LCAwOCkKZGVzLm1vbnN0ZXIoImluY3VidXMiLCAwMiwgMTQpCmRlcy5tb25zdGVyKCJpbmN1YnVzIiwgMDgsIDE0KQpkZXMubW9uc3RlcigiaW5jdWJ1cyIsIDAyLCAxNykKZGVzLm1vbnN0ZXIoImluY3VidXMiLCAwOCwgMTcpCi0tIFBvbGljZSBzdGF0aW9uICh3aXRoIGRydW5rZW4gcHJpc29uZXJzKQpkZXMubW9uc3Rlcih7IGlkID0gIktvcCBLYXB0YWluIiwgeD0yNCwgeT0wOSwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiS29wIExpZXV0ZW5hbnQiLCB4PTIwLCB5PTA5LCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJLb3AgTGlldXRlbmFudCIsIHg9MjIsIHk9MTEsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIktvcCBMaWV1dGVuYW50IiwgeD0yMiwgeT0wNywgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiS2V5c3RvbmUgS29wIiwgeD0xOSwgeT0wNywgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiS2V5c3RvbmUgS29wIiwgeD0xOSwgeT0wOCwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiS2V5c3RvbmUgS29wIiwgeD0yMiwgeT0wOSwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiS2V5c3RvbmUgS29wIiwgeD0yNCwgeT0xMSwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiS2V5c3RvbmUgS29wIiwgeD0xOSwgeT0xMSwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKCJwcmlzb25lciIsIDE5LCAxMykKZGVzLm1vbnN0ZXIoInByaXNvbmVyIiwgMjEsIDEzKQpkZXMubW9uc3RlcigicHJpc29uZXIiLCAyNCwgMTMpCi0tCmRlcy5tb25zdGVyKHsgaWQgPSAid2F0Y2htYW4iLCB4PTMzLCB5PTEwLCBwZWFjZWZ1bCA9IDAgfSkKCmRlcy53YWxsaWZ5KCkKLS0gTmV0SGFjayAzLjcJVmFsa3lyaWUuZGVzCSROSERULURhdGU6IDE1NTM4MDcxNzIgMjAxOS8wMy8yOCAyMTowNjoxMiAkICAkTkhEVC1CcmFuY2g6IE5ldEhhY2stMy42LjItYmV0YTAxICQ6JE5IRFQtUmV2aXNpb246IDEuMTUgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEtMiBieSBNLiBTdGVwaGVuc29uCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiTCIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJpY2VkcG9vbHMiLCAibm9mbGlwIikKCmRlcy5sZXZlbF9pbml0KHsgc3R5bGU9Im1pbmVzIiwgZmc9Ii4iLCBiZz0iTCIsIHNtb290aGVkPXRydWUsIGpvaW5lZD10cnVlLCBsaXQ9MSwgd2FsbGVkPWZhbHNlIH0pCgpkZXMubWFwKFtbCnh4eHh4eC4uLi4uLi4uLi4uLi4uLi4uLi4uLnh4eHh4eHh4Cnh4eHh4Li4uLi4uLkxMTExMLkxMTExMLi4uLi4ueHh4eHh4Cnh4eHguLi4uLi5MTExMTExMTExMTExMTEwuLi4uLi54eHh4Cnh4eHguLi4uLkxMTHwtLS0tLS0tLS18TExMLi4uLi54eHh4Cnh4eHguLi4uTEx8LS0uLi4uLi4uLi4tLXxMTC4uLi4ueHh4CnguLi4uLi5MTHwtLi4uTExMTExMTC4uLi18TEwuLi4uLnh4Ci4uLi4uLi5MTHwuLi5MTC4uLi4uTEwuLi58TEwuLi4uLi54Ci4uLi4uLkxMfC0uLkxMLi4uLi4uLkxMLi4tfExMLi4uLi4uCi4uLi4uLkxMfC4uLi4uLi4uLi4uLi4uLi4ufExMLi4uLi4uCi4uLi4uLkxMfC0uLkxMLi4uLi4uLkxMLi4tfExMLi4uLi4uCi4uLi4uLi5MTHwuLi5MTC4uLi4uTEwuLi58TEwuLi4uLi4uCnh4Li4uLi5MTHwtLi4uTExMTExMTC4uLi18TEwuLi4uLi54Cnh4eC4uLi4uTEx8LS0uLi4uLi4uLi4tLXxMTC4uLi4ueHh4Cnh4eHguLi4uLkxMTHwtLS0tLS0tLS18TExMLi4ueHh4eHh4Cnh4eHh4Li4uLi5MTExMTExMTExMTExMTEwuLi54eHh4eHh4Cnh4eHh4eC4uLi4uLkxMTExMLkxMTExMLi4uLi54eHh4eHh4Cnh4eHh4eHh4eC4uLi4uLi4uLi4uLi4uLi4uLnh4eHh4eHh4Cl1dKTsKLS0gRHVuZ2VvbiBEZXNjcmlwdGlvbgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDM0LDE2KSwgImxpdCIpCi0tIFN0YWlycwotLSBOb3RlOiAgVGhlIHVwIHN0YWlycyBhcmUgKmludGVudGlvbmFsbHkqIG9mZiBvZiB0aGUgbWFwLgpkZXMuc3RhaXIoInVwIiwgNDUsMTApCi0tIE5vbiBkaWdnYWJsZSB3YWxscwpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDM0LDE2KSkKLS0gRHJhd2JyaWRnZXM7IG5vcnRoZXJuIG9uZSBvcGVucyBmcm9tIHRoZSBzb3V0aCAocG9ydGN1bGxpcykgdG8gZnVydGhlcgotLSBub3J0aCAobG93ZXJlZCBzcGFuKSwgc291dGhlcm4gb25lIGZyb20gdGhlIG5vcnRoIHRvIGZ1cnRoZXIgc291dGgKZGVzLmRyYXdicmlkZ2UoeyB4PTE3LCB5PTAyLCBkaXI9InNvdXRoIiwgc3RhdGU9InJhbmRvbSIgfSkKaWYgcGVyY2VudCg3NSkgdGhlbgogICBkZXMuZHJhd2JyaWRnZSh7IHg9MTcsIHk9MTQsIGRpcj0ibm9ydGgiLCBzdGF0ZT0ib3BlbiIgfSkKZWxzZQogICBkZXMuZHJhd2JyaWRnZSh7IHg9MTcsIHk9MTQsIGRpcj0ibm9ydGgiLCBzdGF0ZT0icmFuZG9tIiB9KQplbmQKLS0gT2JqZWN0cwpkZXMub2JqZWN0KHsgaWQgPSAiY3J5c3RhbCBiYWxsIiwgeD0xNywgeT0wOCwgYnVjPSJibGVzc2VkIiwgc3BlPTUsIG5hbWU9IlRoZSBPcmIgb2YgRmF0ZSIgfSkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQotLSBUcmFwcwpkZXMudHJhcCgiYm9hcmQiLDEzLDA4KQpkZXMudHJhcCgiYm9hcmQiLDIxLDA4KQotLSBSYW5kb20gdHJhcHMKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiYm9hcmQiKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKLS0gUmFuZG9tIG1vbnN0ZXJzLgpkZXMubW9uc3RlcigiTG9yZCBTdXJ0dXIiLCAxNywgMDgpCmRlcy5tb25zdGVyKCJmaXJlIGFudCIpCmRlcy5tb25zdGVyKCJmaXJlIGFudCIpCmRlcy5tb25zdGVyKCJmaXJlIGFudCIpCmRlcy5tb25zdGVyKCJmaXJlIGFudCIpCmRlcy5tb25zdGVyKCJhIikKZGVzLm1vbnN0ZXIoImEiKQpkZXMubW9uc3Rlcih7IGlkID0gImZpcmUgZ2lhbnQiLCB4PTEwLCB5PTA2LCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJmaXJlIGdpYW50IiwgeD0xMCwgeT0wNywgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZmlyZSBnaWFudCIsIHg9MTAsIHk9MDgsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZpcmUgZ2lhbnQiLCB4PTEwLCB5PTA5LCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJmaXJlIGdpYW50IiwgeD0xMCwgeT0xMCwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZmlyZSBnaWFudCIsIHg9MjQsIHk9MDYsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZpcmUgZ2lhbnQiLCB4PTI0LCB5PTA3LCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJmaXJlIGdpYW50IiwgeD0yNCwgeT0wOCwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZmlyZSBnaWFudCIsIHg9MjQsIHk9MDksIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZpcmUgZ2lhbnQiLCB4PTI0LCB5PTEwLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJmaXJlIGdpYW50IiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZmlyZSBnaWFudCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkgiLCBwZWFjZWZ1bCA9IDAgfSkKCi0tCi0tCVRoZSAiZmlsbCIgbGV2ZWxzIGZvciB0aGUgcXVlc3QuCi0tCi0tCVRoZXNlIGxldmVscyBhcmUgdXNlZCB0byBmaWxsIG91dCBhbnkgbGV2ZWxzIG5vdCBvY2N1cGllZCBieSBzcGVjaWZpYwotLQlsZXZlbHMgYXMgZGVmaW5lZCBhYm92ZS4gImZpbGxhIiBpcyB0aGUgdXBwZXIgZmlsbGVyLCBiZXR3ZWVuIHRoZQotLQlzdGFydCBhbmQgbG9jYXRlIGxldmVscywgYW5kICJmaWxsYiIgdGhlIGxvd2VyIGJldHdlZW4gdGhlIGxvY2F0ZQotLQlhbmQgZ29hbCBsZXZlbHMuCi0tCi0tIE5ldEhhY2sgMy43CVdpemFyZC5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4MyAyMDE1LzA1LzI1IDAwOjEzOjAzICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTEgJAotLQlDb3B5cmlnaHQgKGMpIDE5OTIgYnkgRGF2aWQgQ29ocnMKLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIik7CgpkZXMubWFwKFtbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAtLS0tLS0tLS0tLS0tICAgICAgICAgICAgICAgICAtLS0tLS0tLS0tLS0tICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgIHwuLi4uLi4uLi4uLnwgICAgICAgICAgICAgICAgIHwuLi4uLi4uLi4uLnwgICAgICAgICAgICAgIAogICAgICAgICAgICAtLS0tLS0tfC4uLi4uLi4uLi4uLS0tLS0tLS0tLS0tLS0tLS0tLS4uLi4uLi4uLi4ufCAgICAgICAgICAgICAgCiAgICAgICAgICAgIHwuLi4uLi5TLi4uLi4uLi4uLi58Li58Li58Li58Li58Li58Li58Li4uLi4uLi4uLi58ICAgICAgICAgICAgICAKICAgICAgICAgICAgfC4uLi4uLnwuLi4uLi4uLi4uLnwuLnwuLnwuLnwuLnwuLnwuLnwuLi4uLi4uLi4uLnwgICAgICAgICAgICAgIAogICAgICAgICAgICB8Li4uLi4ufC4uLi4uLi4uLi4uLUYrLUYrLUYrLUYrLUYrLUYrLS4uLi4uLi4uLi4ufCAgICAgICAgICAgICAgCiAgICAgICAgICAgIC0tUy0tLS18Li4uLi4uLi4uLi5TLi4uLi4uLi4uLi4uLi4uLi4rLi4uLi4uLi4uLi58ICAgICAgICAgICAgICAKICAgICAgICAgICAgfC4uLi4uLnwuLi4uLi4uLi4uLi1GKy1GKy1GKy1GKy1GKy1GKy0uLi4uLi4uLi4uLnwgICAgICAgICAgICAgIAogICAgICAgICAgICB8Li4uLi4ufC4uLi4uLi4uLi4ufC4ufC4ufC4ufC4ufC4ufC4ufC4uLi4uLi4uLi4ufCAgICAgICAgICAgICAgCiAgICAgICAgICAgIHwuLi4uLi58Li4uLi4uLi4uLi58Li58Li58Li58Li58Li58Li58Li4uLi4uLi4uLi58ICAgICAgICAgICAgICAKICAgICAgICAgICAgLS0tLS0tLXwuLi4uLi4uLi4uLi0tLS0tLS0tLS0tLS0tLS0tLS0uLi4uLi4uLi4uLnwgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgfC4uLi4uLi4uLi4ufCAgICAgICAgICAgICAgICAgfC4uLi4uLi4uLi4ufCAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAtLS0tLS0tLS0tLS0tICAgICAgICAgICAgICAgICAtLS0tLS0tLS0tLS0tICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIApdXSk7Ci0tIER1bmdlb24gRGVzY3JpcHRpb24KZGVzLnJlZ2lvbih7IHJlZ2lvbj17MTMsMTAsMTgsMTJ9LCBsaXQ9MCwgdHlwZT0idGVtcGxlIiwgZmlsbGVkPTIgfSkKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgxMywwNiwxOCwwOCksICJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDIwLDA0LDMwLDE0KSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgzMiwwNiwzMywwNyksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMzUsMDYsMzYsMDcpLCAidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDM4LDA2LDM5LDA3KSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg0MSwwNiw0MiwwNyksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoNDQsMDYsNDUsMDcpLCAidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDQ3LDA2LDQ4LDA3KSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgzMiwwOSw0OCwwOSksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMzIsMTEsMzMsMTIpLCAidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDM1LDExLDM2LDEyKSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgzOCwxMSwzOSwxMiksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoNDEsMTEsNDIsMTIpLCAidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDQ0LDExLDQ1LDEyKSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg0NywxMSw0OCwxMiksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoNTAsMDQsNjAsMTQpLCAibGl0IikKLS0gRG9vcnMKZGVzLmRvb3IoImxvY2tlZCIsMTksMDYpCmRlcy5kb29yKCJsb2NrZWQiLDE0LDA5KQpkZXMuZG9vcigibG9ja2VkIiwzMSwwOSkKZGVzLmRvb3IoImxvY2tlZCIsMzMsMDgpCmRlcy5kb29yKCJsb2NrZWQiLDM2LDA4KQpkZXMuZG9vcigibG9ja2VkIiwzOSwwOCkKZGVzLmRvb3IoImxvY2tlZCIsNDIsMDgpCmRlcy5kb29yKCJsb2NrZWQiLDQ1LDA4KQpkZXMuZG9vcigibG9ja2VkIiw0OCwwOCkKZGVzLmRvb3IoImxvY2tlZCIsMzMsMTApCmRlcy5kb29yKCJsb2NrZWQiLDM2LDEwKQpkZXMuZG9vcigibG9ja2VkIiwzOSwxMCkKZGVzLmRvb3IoImxvY2tlZCIsNDIsMTApCmRlcy5kb29yKCJsb2NrZWQiLDQ1LDEwKQpkZXMuZG9vcigibG9ja2VkIiw0OCwxMCkKZGVzLmRvb3IoImxvY2tlZCIsNDksMDkpCi0tIFN0YWlycwpkZXMuc3RhaXIoInVwIiwgNTUsMDUpCi0tIE5vbiBkaWdnYWJsZSB3YWxscwpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDc1LDE5KSkKLS0gVGhlIGFsdGFyLiAgVGhpcyBpcyBub3QgYSBzaHJpbmUuCmRlcy5hbHRhcih7IGNvb3JkPXsxNiwxMX0sIGFsaWduZWQ9Im5vbmNvYWxpZ25lZCIsIHR5cGU9ImFsdGFyIiB9KQotLSBPYmplY3RzCmRlcy5vYmplY3QoeyBpZCA9ICJhbXVsZXQgb2YgRVNQIiwgeD0xNiwgeT0xMSwgYnVjPSJibGVzc2VkIiwgc3BlPTAsIG5hbWU9IlRoZSBFeWUgb2YgdGhlIEFldGhpb3BpY2EiIH0pCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKLS0gUmFuZG9tIHRyYXBzCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tIFJhbmRvbSBtb25zdGVycy4KZGVzLm1vbnN0ZXIoIkRhcmsgT25lIiwgMTYsIDExKQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkIiLHJhbmRvbSwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiQiIscmFuZG9tLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJCIixyYW5kb20sIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkIiLHJhbmRvbSwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiQiIscmFuZG9tLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJCIixyYW5kb20sIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkIiLHJhbmRvbSwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiQiIscmFuZG9tLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJCIixyYW5kb20sIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkIiLHJhbmRvbSwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiQiIscmFuZG9tLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJpIixyYW5kb20sIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gImkiLHJhbmRvbSwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiaSIscmFuZG9tLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJpIixyYW5kb20sIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gImkiLHJhbmRvbSwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiaSIscmFuZG9tLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJpIixyYW5kb20sIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3RlcigidmFtcGlyZSBiYXQiKQpkZXMubW9uc3RlcigidmFtcGlyZSBiYXQiKQpkZXMubW9uc3RlcigidmFtcGlyZSBiYXQiKQpkZXMubW9uc3RlcigidmFtcGlyZSBiYXQiKQpkZXMubW9uc3RlcigidmFtcGlyZSBiYXQiKQpkZXMubW9uc3RlcigidmFtcGlyZSBiYXQiKQpkZXMubW9uc3RlcigidmFtcGlyZSBiYXQiKQpkZXMubW9uc3RlcigidmFtcGlyZSBiYXQiKQpkZXMubW9uc3Rlcih7IGNsYXNzID0gImkiLHJhbmRvbSwgcGVhY2VmdWwgPSAwIH0pCi0tIENhcHRpdmUgTW9uc3RlcnMgaW4gdGhlIGR1bmdlb24KZGVzLm1vbnN0ZXIoeyBpZCA9ICJyb2d1ZSIsIHg9MzUsIHk9MDYsIHBlYWNlZnVsPTEsIG5hbWU9IlB1ZyIgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJvd2xiZWFyIiwgeD00NywgeT0wNiwgcGVhY2VmdWw9MSwgYXNsZWVwPTEgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJ3aXphcmQiLCB4PTMyLCB5PTExLCBwZWFjZWZ1bD0xLCBhc2xlZXA9MSwgbmFtZT0iTmV3dCIgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJHcmV5LWVsZiIsIHg9NDQsIHk9MTEsIHBlYWNlZnVsPTEgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJoaWxsIGdpYW50IiwgeD00NywgeT0xMSwgcGVhY2VmdWw9MSwgYXNsZWVwPTEgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJnbm9taXNoIHdpemFyZCIsIHg9MzgsIHk9MDYsIHBlYWNlZnVsPTEgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJwcmlzb25lciIsIHg9MzUsIHk9MTEsIHBlYWNlZnVsPTEgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJwcmlzb25lciIsIHg9NDEsIHk9MTEsIHBlYWNlZnVsPTEsIGFzbGVlcD0xIH0pCi0tIE5ldEhhY2sgMy43CUFyY2guZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjEwICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxIGJ5IE0uIFN0ZXBoZW5zb24KLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KLS0KZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMuc3RhaXIoInVwIikKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMubW9uc3RlcigiUyIpCiAgICAgICAgICAgZW5kCn0pOwoKZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgZGVzLm1vbnN0ZXIoIlMiKQogICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLnRyYXAoKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJTIikKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLnN0YWlyKCJkb3duIikKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMudHJhcCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoIlMiKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJodW1hbiBtdW1teSIpCiAgICAgICAgICAgZW5kCn0pCgpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy50cmFwKCkKICAgICAgICAgICAgICBkZXMubW9uc3RlcigiUyIpCiAgICAgICAgICAgZW5kCn0pCgpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy50cmFwKCkKICAgICAgICAgICAgICBkZXMubW9uc3RlcigiUyIpCiAgICAgICAgICAgZW5kCn0pCgpkZXMucmFuZG9tX2NvcnJpZG9ycygpCi0tIE5ldEhhY2sgMy43CUFyY2guZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjEwICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxIGJ5IE0uIFN0ZXBoZW5zb24KLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KLS0KZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMuc3RhaXIoInVwIikKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMubW9uc3RlcigiTSIpCiAgICAgICAgICAgZW5kCn0pCgpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJNIikKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLnRyYXAoKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJNIikKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLnN0YWlyKCJkb3duIikKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMudHJhcCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoIlMiKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJodW1hbiBtdW1teSIpCiAgICAgICAgICAgZW5kCn0pCgpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy50cmFwKCkKICAgICAgICAgICAgICBkZXMubW9uc3RlcigiUyIpCiAgICAgICAgICAgZW5kCn0pCgpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy50cmFwKCkKICAgICAgICAgICAgICBkZXMubW9uc3RlcigiUyIpCiAgICAgICAgICAgZW5kCn0pCgpkZXMucmFuZG9tX2NvcnJpZG9ycygpCi0tIE5ldEhhY2sgMy43CUJhcmIuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjkgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm9mbGlwIik7CgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlPSJtaW5lcyIsIGZnPSIuIiwgYmc9Ii4iLCBzbW9vdGhlZD10cnVlLCBqb2luZWQ9dHJ1ZSwgbGl0PTAsIHdhbGxlZD1mYWxzZSB9KQoKLS0KZGVzLnN0YWlyKCJ1cCIpCmRlcy5zdGFpcigiZG93biIpCi0tCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKLS0KZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQotLQpkZXMubW9uc3Rlcih7IGlkID0gIm9ncmUiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2dyZSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJPIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInJvY2sgdHJvbGwiLCBwZWFjZWZ1bD0wIH0pCi0tIE5ldEhhY2sgMy43CUJhcmIuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjkgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm9mbGlwIik7CgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlPSJtaW5lcyIsIGZnPSIuIiwgYmc9IiAiLCBzbW9vdGhlZD10cnVlLCBqb2luZWQ9dHJ1ZSwgbGl0PTAsIHdhbGxlZD10cnVlIH0pCgotLQpkZXMuc3RhaXIoInVwIikKZGVzLnN0YWlyKCJkb3duIikKLS0KZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQotLQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tCmRlcy5tb25zdGVyKHsgaWQgPSAib2dyZSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJvZ3JlIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9ncmUiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2dyZSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJvZ3JlIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9ncmUiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2dyZSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJPIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInJvY2sgdHJvbGwiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicm9jayB0cm9sbCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJyb2NrIHRyb2xsIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIlQiLCBwZWFjZWZ1bD0wIH0pCi0tIE5ldEhhY2sgMy43CUNhdmVtYW4uZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODMgMjAxNS8wNS8yNSAwMDoxMzowMyAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjggJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm9mbGlwIik7CgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gIm1pbmVzIiwgZmcgPSAiLiIsIGJnID0gIiAiLCBzbW9vdGhlZD10cnVlLCBqb2luZWQ9dHJ1ZSwgd2FsbGVkPXRydWUgfSkKCi0tCmRlcy5zdGFpcigidXAiKQpkZXMuc3RhaXIoImRvd24iKQotLQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKLS0KZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQotLQpkZXMubW9uc3Rlcih7IGlkID0gImJ1Z2JlYXIiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYnVnYmVhciIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJidWdiZWFyIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImJ1Z2JlYXIiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYnVnYmVhciIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJoIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImhpbGwgZ2lhbnQiLCBwZWFjZWZ1bD0wIH0pCi0tIE5ldEhhY2sgMy43CUNhdmVtYW4uZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODMgMjAxNS8wNS8yNSAwMDoxMzowMyAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjggJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm9mbGlwIik7CgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gIm1pbmVzIiwgZmcgPSAiLiIsIGJnID0gIiAiLCBzbW9vdGhlZD10cnVlLCBqb2luZWQ9dHJ1ZSwgd2FsbGVkPXRydWUgfSkKCi0tCmRlcy5zdGFpcigidXAiKQpkZXMuc3RhaXIoImRvd24iKQotLQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQotLQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tCmRlcy5tb25zdGVyKHsgaWQgPSAiYnVnYmVhciIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJidWdiZWFyIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImJ1Z2JlYXIiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYnVnYmVhciIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJoIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gImgiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiaGlsbCBnaWFudCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJoaWxsIGdpYW50IiwgcGVhY2VmdWw9MCB9KQotLSBOZXRIYWNrIDMuNwlIZWFsZXIuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjEwICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxLCAxOTkzIGJ5IE0uIFN0ZXBoZW5zb24sIFAuIFdpbm5lcgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIlAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm9mbGlwIik7CgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlPSJtaW5lcyIsIGZnPSIuIiwgYmc9IlAiLCBzbW9vdGhlZD1mYWxzZSwgam9pbmVkPXRydWUsIGxpdD0xLCB3YWxsZWQ9ZmFsc2UgfSkKCi0tCmRlcy5zdGFpcigidXAiKQpkZXMuc3RhaXIoImRvd24iKQotLQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCi0tCmRlcy5tb25zdGVyKCJyYWJpZCByYXQiKQpkZXMubW9uc3Rlcih7IGNsYXNzID0gInIiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiciIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoImdpYW50IGVlbCIpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiKQpkZXMubW9uc3RlcigiZWxlY3RyaWMgZWVsIikKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJEIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiRCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJEIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIlMiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiUyIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJTIiwgcGVhY2VmdWw9MCB9KQotLQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tIE5ldEhhY2sgMy43CUhlYWxlci5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4NCAyMDE1LzA1LzI1IDAwOjEzOjA0ICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTAgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEsIDE5OTMgYnkgTS4gU3RlcGhlbnNvbiwgUC4gV2lubmVyCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiUCIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub2ZsaXAiKTsKCmRlcy5sZXZlbF9pbml0KHsgc3R5bGU9Im1pbmVzIiwgZmc9Ii4iLCBiZz0iUCIsIHNtb290aGVkPWZhbHNlLCBqb2luZWQ9dHJ1ZSwgbGl0PTEsIHdhbGxlZD1mYWxzZSB9KQoKLS0KZGVzLnN0YWlyKCJ1cCIpCmRlcy5zdGFpcigiZG93biIpCi0tCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKLS0KZGVzLm1vbnN0ZXIoInJhYmlkIHJhdCIpCmRlcy5tb25zdGVyKCJyYWJpZCByYXQiKQpkZXMubW9uc3Rlcih7IGNsYXNzID0gInIiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiciIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoImdpYW50IGVlbCIpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiKQpkZXMubW9uc3RlcigiZ2lhbnQgZWVsIikKZGVzLm1vbnN0ZXIoImdpYW50IGVlbCIpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiKQpkZXMubW9uc3RlcigiZWxlY3RyaWMgZWVsIikKZGVzLm1vbnN0ZXIoImVsZWN0cmljIGVlbCIpCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiRCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJEIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiRCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJTIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIlMiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiUyIsIHBlYWNlZnVsPTAgfSkKLS0KZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQotLSBOZXRIYWNrIDMuNwlLbmlnaHQuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjkgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEsOTIgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIi4iIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm9mbGlwIik7CgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlPSJtaW5lcyIsIGZnPSIuIiwgYmc9IlAiLCBzbW9vdGhlZD1mYWxzZSwgam9pbmVkPXRydWUsIGxpdD0xLCB3YWxsZWQ9ZmFsc2UgfSkKCi0tCmRlcy5zdGFpcigidXAiKQpkZXMuc3RhaXIoImRvd24iKQotLQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCi0tCmRlcy5tb25zdGVyKHsgaWQgPSAicXVhc2l0IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInF1YXNpdCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJxdWFzaXQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicXVhc2l0IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gImkiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2NocmUgamVsbHkiLCBwZWFjZWZ1bD0wIH0pCi0tCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKLS0gTmV0SGFjayAzLjcJS25pZ2h0LmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzg0IDIwMTUvMDUvMjUgMDA6MTM6MDQgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS45ICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxLDkyIGJ5IE0uIFN0ZXBoZW5zb24KLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIuIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIiwgIm5vZmxpcCIpOwoKZGVzLmxldmVsX2luaXQoeyBzdHlsZT0ibWluZXMiLCBmZz0iLiIsIGJnPSJQIiwgc21vb3RoZWQ9ZmFsc2UsIGpvaW5lZD10cnVlLCBsaXQ9MSwgd2FsbGVkPWZhbHNlIH0pCgotLQpkZXMuc3RhaXIoInVwIikKZGVzLnN0YWlyKCJkb3duIikKLS0KZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQotLQpkZXMubW9uc3Rlcih7IGlkID0gInF1YXNpdCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJxdWFzaXQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicXVhc2l0IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInF1YXNpdCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJpIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9jaHJlIGplbGx5IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9jaHJlIGplbGx5IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9jaHJlIGplbGx5IiwgcGVhY2VmdWw9MCB9KQotLQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tIE5ldEhhY2sgMy43CU1vbmsuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjEyICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxLTIgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQoKLS0KZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMuc3RhaXIoInVwIikKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMubW9uc3Rlcih7IGNsYXNzID0gIkUiLCBwZWFjZWZ1bD0wIH0pCiAgICAgICAgICAgZW5kCn0pCgpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKHsgY2xhc3MgPSAiRSIsIHBlYWNlZnVsPTAgfSkKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLnRyYXAoKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJ4b3JuIikKICAgICAgICAgICAgICBkZXMubW9uc3RlcigiZWFydGggZWxlbWVudGFsIikKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLnN0YWlyKCJkb3duIikKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMudHJhcCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJFIiwgcGVhY2VmdWw9MCB9KQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJlYXJ0aCBlbGVtZW50YWwiKQogICAgICAgICAgIGVuZAp9KQoKZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMudHJhcCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJYIiwgcGVhY2VmdWw9MCB9KQogICAgICAgICAgIGVuZAp9KQoKZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMudHJhcCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoImVhcnRoIGVsZW1lbnRhbCIpCiAgICAgICAgICAgZW5kCn0pCgpkZXMucmFuZG9tX2NvcnJpZG9ycygpCi0tIE5ldEhhY2sgMy43CU1vbmsuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjEyICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxLTIgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQoKLS0KZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMuc3RhaXIoInVwIikKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMubW9uc3Rlcih7IGNsYXNzID0gIlgiLCBwZWFjZWZ1bD0wIH0pCiAgICAgICAgICAgZW5kCn0pCgpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKHsgY2xhc3MgPSAiWCIsIHBlYWNlZnVsPTAgfSkKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLnRyYXAoKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKHsgY2xhc3MgPSAiRSIsIHBlYWNlZnVsPTAgfSkKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLnN0YWlyKCJkb3duIikKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMudHJhcCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJFIiwgcGVhY2VmdWw9MCB9KQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJlYXJ0aCBlbGVtZW50YWwiKQogICAgICAgICAgIGVuZAp9KQoKZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMudHJhcCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJYIiwgcGVhY2VmdWw9MCB9KQogICAgICAgICAgIGVuZAp9KQoKZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMudHJhcCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoImVhcnRoIGVsZW1lbnRhbCIpCiAgICAgICAgICAgZW5kCn0pCgpkZXMucmFuZG9tX2NvcnJpZG9ycygpCi0tIE5ldEhhY2sgMy43CVByaWVzdC5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4NCAyMDE1LzA1LzI1IDAwOjEzOjA0ICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTEgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEtMiBieSBNLiBTdGVwaGVuc29uCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCi0tCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLnN0YWlyKCJ1cCIpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoImh1bWFuIHpvbWJpZSIpCiAgICAgICAgICAgZW5kCn0pCgpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgIGVuZAp9KQoKZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMudHJhcCgpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoImh1bWFuIHpvbWJpZSIpCiAgICAgICAgICAgZW5kCn0pCgpkZXMucm9vbSh7IHR5cGUgPSAibW9yZ3VlIiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMuc3RhaXIoImRvd24iKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy50cmFwKCkKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLnRyYXAoKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJ3cmFpdGgiKQogICAgICAgICAgIGVuZAp9KQoKZGVzLnJvb20oeyB0eXBlID0gIm1vcmd1ZSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLnRyYXAoKQogICAgICAgICAgIGVuZAp9KQoKZGVzLnJhbmRvbV9jb3JyaWRvcnMoKQotLSBOZXRIYWNrIDMuNwlQcmllc3QuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjExICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxLTIgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQotLQoKZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMuc3RhaXIoInVwIikKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMubW9uc3RlcigiaHVtYW4gem9tYmllIikKICAgICAgICAgICAgICBkZXMubW9uc3Rlcigid3JhaXRoIikKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJtb3JndWUiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgIGVuZAp9KQoKZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMudHJhcCgpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoImh1bWFuIHpvbWJpZSIpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoIndyYWl0aCIpCiAgICAgICAgICAgZW5kCn0pCgpkZXMucm9vbSh7IHR5cGUgPSAibW9yZ3VlIiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMuc3RhaXIoImRvd24iKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy50cmFwKCkKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLnRyYXAoKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJodW1hbiB6b21iaWUiKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJ3cmFpdGgiKQogICAgICAgICAgIGVuZAp9KQoKCmRlcy5yb29tKHsgdHlwZSA9ICJtb3JndWUiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy50cmFwKCkKICAgICAgICAgICBlbmQKfSkKCmRlcy5yYW5kb21fY29ycmlkb3JzKCkKLS0gTmV0SGFjayAzLjcJUmFuZ2VyLmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzgzIDIwMTUvMDUvMjUgMDA6MTM6MDMgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS45ICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxIGJ5IE0uIFN0ZXBoZW5zb24KLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIiwgIm5vZmxpcCIpOwoKZGVzLmxldmVsX2luaXQoeyBzdHlsZT0ibWluZXMiLCBmZz0iLiIsIGJnPSJUIiwgc21vb3RoZWQ9dHJ1ZSwgam9pbmVkPXRydWUsIHdhbGxlZD10cnVlIH0pCgotLQpkZXMuc3RhaXIoInVwIikKZGVzLnN0YWlyKCJkb3duIikKLS0KZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCi0tCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKLS0KZGVzLm1vbnN0ZXIoeyBpZCA9ICJtb3VudGFpbiBjZW50YXVyIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm1vdW50YWluIGNlbnRhdXIiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZm9yZXN0IGNlbnRhdXIiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZm9yZXN0IGNlbnRhdXIiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZm9yZXN0IGNlbnRhdXIiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiQyIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJzY29ycGlvbiIsIHBlYWNlZnVsPTAgfSkKLS0gTmV0SGFjayAzLjcJUmFuZ2VyLmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzgzIDIwMTUvMDUvMjUgMDA6MTM6MDMgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS45ICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxIGJ5IE0uIFN0ZXBoZW5zb24KLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIiwgIm5vZmxpcCIpOwoKZGVzLmxldmVsX2luaXQoeyBzdHlsZT0ibWluZXMiLCBmZz0iLiIsIGJnPSIgIiwgc21vb3RoZWQ9dHJ1ZSwgam9pbmVkPXRydWUsIHdhbGxlZD10cnVlIH0pCgotLQpkZXMuc3RhaXIoInVwIikKZGVzLnN0YWlyKCJkb3duIikKLS0KZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQotLQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tCmRlcy5tb25zdGVyKHsgaWQgPSAibW91bnRhaW4gY2VudGF1ciIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJtb3VudGFpbiBjZW50YXVyIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm1vdW50YWluIGNlbnRhdXIiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibW91bnRhaW4gY2VudGF1ciIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJDIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInNjb3JwaW9uIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInNjb3JwaW9uIiwgcGVhY2VmdWw9MCB9KQotLSBOZXRIYWNrIDMuNwlSb2d1ZS5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4NCAyMDE1LzA1LzI1IDAwOjEzOjA0ICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTEgJAotLQlDb3B5cmlnaHQgKGMpIDE5OTIgYnkgRGVhbiBMdWljawotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQotLQpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5zdGFpcigidXAiKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKHsgaWQgPSAibGVwcmVjaGF1biIsIHBlYWNlZnVsPTAgfSkKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoeyBpZCA9ICJsZXByZWNoYXVuIiwgcGVhY2VmdWw9MCB9KQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKHsgaWQgPSAiZ3VhcmRpYW4gbmFnYSIsIHBlYWNlZnVsPTAgfSkKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLnRyYXAoKQogICAgICAgICAgICAgIGRlcy50cmFwKCkKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMubW9uc3Rlcih7IGlkID0gIndhdGVyIG55bXBoIiwgcGVhY2VmdWw9MCB9KQogICAgICAgICAgIGVuZAp9KQoKZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMuc3RhaXIoImRvd24iKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy50cmFwKCkKICAgICAgICAgICAgICBkZXMudHJhcCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJsIiwgcGVhY2VmdWw9MCB9KQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKHsgaWQgPSAiZ3VhcmRpYW4gbmFnYSIsIHBlYWNlZnVsPTAgfSkKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLnRyYXAoKQogICAgICAgICAgICAgIGRlcy50cmFwKCkKICAgICAgICAgICAgICBkZXMubW9uc3Rlcih7IGlkID0gImxlcHJlY2hhdW4iLCBwZWFjZWZ1bD0wIH0pCiAgICAgICAgICAgZW5kCn0pCgpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy50cmFwKCkKICAgICAgICAgICAgICBkZXMudHJhcCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoeyBpZCA9ICJsZXByZWNoYXVuIiwgcGVhY2VmdWw9MCB9KQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgbnltcGgiLCBwZWFjZWZ1bD0wIH0pCiAgICAgICAgICAgZW5kCn0pCgpkZXMucmFuZG9tX2NvcnJpZG9ycygpCi0tIE5ldEhhY2sgMy43CVJvZ3VlLmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzg0IDIwMTUvMDUvMjUgMDA6MTM6MDQgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS4xMSAkCi0tCUNvcHlyaWdodCAoYykgMTk5MiBieSBEZWFuIEx1aWNrCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCi0tCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLnN0YWlyKCJ1cCIpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoeyBpZCA9ICJsZXByZWNoYXVuIiwgcGVhY2VmdWw9MCB9KQogICAgICAgICAgIGVuZAp9KQoKZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMubW9uc3Rlcih7IGlkID0gImxlcHJlY2hhdW4iLCBwZWFjZWZ1bD0wIH0pCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoeyBpZCA9ICJndWFyZGlhbiBuYWdhIiwgcGVhY2VmdWw9MCB9KQogICAgICAgICAgIGVuZAp9KQoKZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMudHJhcCgpCiAgICAgICAgICAgICAgZGVzLnRyYXAoKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgbnltcGgiLCBwZWFjZWZ1bD0wIH0pCiAgICAgICAgICAgZW5kCn0pCgpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5zdGFpcigiZG93biIpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLnRyYXAoKQogICAgICAgICAgICAgIGRlcy50cmFwKCkKICAgICAgICAgICAgICBkZXMubW9uc3Rlcih7IGNsYXNzID0gImwiLCBwZWFjZWZ1bD0wIH0pCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoeyBpZCA9ICJndWFyZGlhbiBuYWdhIiwgcGVhY2VmdWw9MCB9KQogICAgICAgICAgIGVuZAp9KQoKZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMudHJhcCgpCiAgICAgICAgICAgICAgZGVzLnRyYXAoKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKHsgaWQgPSAibGVwcmVjaGF1biIsIHBlYWNlZnVsPTAgfSkKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLnRyYXAoKQogICAgICAgICAgICAgIGRlcy50cmFwKCkKICAgICAgICAgICAgICBkZXMubW9uc3Rlcih7IGlkID0gImxlcHJlY2hhdW4iLCBwZWFjZWZ1bD0wIH0pCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoeyBpZCA9ICJ3YXRlciBueW1waCIsIHBlYWNlZnVsPTAgfSkKICAgICAgICAgICBlbmQKfSkKCmRlcy5yYW5kb21fY29ycmlkb3JzKCkKLS0gTmV0SGFjayAzLjcJU2FtdXJhaS5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4MyAyMDE1LzA1LzI1IDAwOjEzOjAzICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTEgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEtOTIgYnkgTS4gU3RlcGhlbnNvbiwgUC4gV2lubmVyCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiICIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub2ZsaXAiKTsKCmRlcy5sZXZlbF9pbml0KHsgc3R5bGU9Im1pbmVzIiwgZmc9Ii4iLCBiZz0iUCIsIHNtb290aGVkPXRydWUsIGpvaW5lZD10cnVlLCB3YWxsZWQ9dHJ1ZSB9KQoKLS0KZGVzLnN0YWlyKCJ1cCIpCmRlcy5zdGFpcigiZG93biIpCi0tCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCi0tCmRlcy5tb25zdGVyKCJkIikKZGVzLm1vbnN0ZXIoIndvbGYiKQpkZXMubW9uc3Rlcigid29sZiIpCmRlcy5tb25zdGVyKCJ3b2xmIikKZGVzLm1vbnN0ZXIoIndvbGYiKQpkZXMubW9uc3Rlcigid29sZiIpCmRlcy5tb25zdGVyKCJzdGFsa2VyIikKLS0KZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQotLSBOZXRIYWNrIDMuNwlTYW11cmFpLmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzgzIDIwMTUvMDUvMjUgMDA6MTM6MDMgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS4xMSAkCi0tCUNvcHlyaWdodCAoYykgMTk4OSBieSBKZWFuLUNocmlzdG9waGUgQ29sbGV0Ci0tCUNvcHlyaWdodCAoYykgMTk5MS05MiBieSBNLiBTdGVwaGVuc29uLCBQLiBXaW5uZXIKLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIik7CgpkZXMubWFwKFtbCi0tLS0tLS0tLS0tLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0tLS0tLS0tLS0tLQp8Li4uLi4uLi4uLi58ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwuLi4uLi4uLi4uLnwKfC4uLi0tLS0tLi4ufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18Li4uLS0tLS0uLi58CnwuLi58ICAgfC4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC4uLnwgICB8Li4ufAp8Li4uLS0tLS0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0tLS4uLnwKfC4uLi4uLi4uLi4ufC0tUy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1TLS18Li4uLi4uLi4uLi58Ci0tLS0uLi4tLS0tLS0tLS58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58Li0tLS0tLS0tLi4uLS0tLQogICB8Li4ufC4uLi4uLi4uKy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uKy4uLi4uLi4ufC4uLnwgICAKICAgfC4uLnwuLi4uLi4uLisuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLisuLi4uLi4uLnwuLi58ICAgCi0tLS0uLi4tLS0tLS0tLS58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58Li0tLS0tLS0tLi4uLS0tLQp8Li4uLi4uLi4uLi58LS1TLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVMtLXwuLi4uLi4uLi4uLnwKfC4uLi0tLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tLS0uLi58CnwuLi58ICAgfC4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC4uLnwgICB8Li4ufAp8Li4uLS0tLS0uLi58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwuLi4tLS0tLS4uLnwKfC4uLi4uLi4uLi4ufCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8Li4uLi4uLi4uLi58Ci0tLS0tLS0tLS0tLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0tLS0tLS0tLS0tLQpdXSk7CmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsNTksMTUpLCAidW5saXQiKQotLSBEb29ycwpkZXMuZG9vcigiY2xvc2VkIiwxNiwwNykKZGVzLmRvb3IoImNsb3NlZCIsMTYsMDgpCmRlcy5kb29yKCJjbG9zZWQiLDQzLDA3KQpkZXMuZG9vcigiY2xvc2VkIiw0MywwOCkKLS0KZGVzLnN0YWlyKCJ1cCIpCmRlcy5zdGFpcigiZG93biIpCi0tCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCi0tCmRlcy5tb25zdGVyKCJkIikKZGVzLm1vbnN0ZXIoIndvbGYiKQpkZXMubW9uc3Rlcigid29sZiIpCmRlcy5tb25zdGVyKCJ3b2xmIikKZGVzLm1vbnN0ZXIoIndvbGYiKQpkZXMubW9uc3Rlcigic3RhbGtlciIpCmRlcy5tb25zdGVyKCJzdGFsa2VyIikKZGVzLm1vbnN0ZXIoInN0YWxrZXIiKQotLQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpLS0gTmV0SGFjayAzLjcJVG91cmlzdC5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4NCAyMDE1LzA1LzI1IDAwOjEzOjA0ICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuOCAkCi0tCUNvcHlyaWdodCAoYykgMTk4OSBieSBKZWFuLUNocmlzdG9waGUgQ29sbGV0Ci0tCUNvcHlyaWdodCAoYykgMTk5MSw5MiBieSBNLiBTdGVwaGVuc29uLCBQLiBXaW5uZXIKLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIiwgIm5vZmxpcCIpOwoKZGVzLmxldmVsX2luaXQoeyBzdHlsZT0ibWluZXMiLCBmZz0iLiIsIGJnPSIgIiwgc21vb3RoZWQ9dHJ1ZSwgam9pbmVkPXRydWUsIHdhbGxlZD10cnVlIH0pCgotLQpkZXMuc3RhaXIoInVwIikKZGVzLnN0YWlyKCJkb3duIikKLS0KZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCi0tCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKLS0KZGVzLm1vbnN0ZXIoeyBpZCA9ICJzb2xkaWVyIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic29sZGllciIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInNvbGRpZXIiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJzb2xkaWVyIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic29sZGllciIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkgiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJDIiwgcGVhY2VmdWwgPSAwIH0pCi0tIE5ldEhhY2sgMy43CVRvdXJpc3QuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjggJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEsOTIgYnkgTS4gU3RlcGhlbnNvbiwgUC4gV2lubmVyCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiICIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub2ZsaXAiKTsKCmRlcy5sZXZlbF9pbml0KHsgc3R5bGU9Im1pbmVzIiwgZmc9Ii4iLCBiZz0iICIsIHNtb290aGVkPXRydWUsIGpvaW5lZD10cnVlLCB3YWxsZWQ9dHJ1ZSB9KQoKLS0KZGVzLnN0YWlyKCJ1cCIpCmRlcy5zdGFpcigiZG93biIpCi0tCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKLS0KZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQotLQpkZXMubW9uc3Rlcih7IGlkID0gInNvbGRpZXIiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJjYXB0YWluIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiY2FwdGFpbiIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkgiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJIIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiQyIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3RlcigicyIpCi0tIE5ldEhhY2sgMy43CVZhbGt5cmllLmRlcwkkTkhEVC1EYXRlOiAxNTUzODA3MTcyIDIwMTkvMDMvMjggMjE6MDY6MTIgJCAgJE5IRFQtQnJhbmNoOiBOZXRIYWNrLTMuNi4yLWJldGEwMSAkOiROSERULVJldmlzaW9uOiAxLjE1ICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxLTIgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIkkiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAiaWNlZHBvb2xzIiwgIm5vZmxpcCIpCgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlPSJtaW5lcyIsIGZnPSIuIiwgYmc9IkkiLCBzbW9vdGhlZD10cnVlLCBqb2luZWQ9dHJ1ZSwgbGl0PTEsIHdhbGxlZD1mYWxzZSB9KQoKLS0KZGVzLnN0YWlyKCJ1cCIpCmRlcy5zdGFpcigiZG93biIpCi0tCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCi0tCmRlcy5tb25zdGVyKCJmaXJlIGFudCIpCmRlcy5tb25zdGVyKCJmaXJlIGFudCIpCmRlcy5tb25zdGVyKCJmaXJlIGFudCIpCmRlcy5tb25zdGVyKCJmaXJlIGFudCIpCmRlcy5tb25zdGVyKCJmaXJlIGFudCIpCmRlcy5tb25zdGVyKCJhIikKZGVzLm1vbnN0ZXIoeyBpZCA9ICJmaXJlIGdpYW50IiwgcGVhY2VmdWwgPSAwIH0pCi0tCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKLS0gTmV0SGFjayAzLjcJVmFsa3lyaWUuZGVzCSROSERULURhdGU6IDE1NTM4MDcxNzIgMjAxOS8wMy8yOCAyMTowNjoxMiAkICAkTkhEVC1CcmFuY2g6IE5ldEhhY2stMy42LjItYmV0YTAxICQ6JE5IRFQtUmV2aXNpb246IDEuMTUgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEtMiBieSBNLiBTdGVwaGVuc29uCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiTCIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJpY2VkcG9vbHMiLCAibm9mbGlwIikKCmRlcy5sZXZlbF9pbml0KHsgc3R5bGU9Im1pbmVzIiwgZmc9Ii4iLCBiZz0iTCIsIHNtb290aGVkPXRydWUsIGpvaW5lZD10cnVlLCBsaXQ9MSwgd2FsbGVkPWZhbHNlIH0pCgotLQpkZXMuc3RhaXIoInVwIikKZGVzLnN0YWlyKCJkb3duIikKLS0KZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQotLQpkZXMubW9uc3RlcigiZmlyZSBhbnQiKQpkZXMubW9uc3RlcigiZmlyZSBhbnQiKQpkZXMubW9uc3RlcigiZmlyZSBhbnQiKQpkZXMubW9uc3RlcigiYSIpCmRlcy5tb25zdGVyKHsgaWQgPSAiZmlyZSBnaWFudCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZpcmUgZ2lhbnQiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJmaXJlIGdpYW50IiwgcGVhY2VmdWwgPSAwIH0pCi0tCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKLS0gTmV0SGFjayAzLjcJV2l6YXJkLmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzgzIDIwMTUvMDUvMjUgMDA6MTM6MDMgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS4xMSAkCi0tCUNvcHlyaWdodCAoYykgMTk5MiBieSBEYXZpZCBDb2hycwotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQotLQpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5zdGFpcigidXAiKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKHsgY2xhc3MgPSAiaSIsIHBlYWNlZnVsPTAgfSkKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJpIiwgcGVhY2VmdWw9MCB9KQogICAgICAgICAgIGVuZAp9KQoKZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMudHJhcCgpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoInZhbXBpcmUgYmF0IikKICAgICAgICAgICAgICBkZXMubW9uc3RlcigidmFtcGlyZSBiYXQiKQogICAgICAgICAgIGVuZAp9KQoKZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMuc3RhaXIoImRvd24iKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy50cmFwKCkKICAgICAgICAgICAgICBkZXMubW9uc3Rlcih7IGNsYXNzID0gImkiLCBwZWFjZWZ1bD0wIH0pCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoInZhbXBpcmUgYmF0IikKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLnRyYXAoKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKHsgY2xhc3MgPSAiaSIsIHBlYWNlZnVsPTAgfSkKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLnRyYXAoKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJ2YW1waXJlIGJhdCIpCiAgICAgICAgICAgZW5kCn0pCgpkZXMucmFuZG9tX2NvcnJpZG9ycygpCi0tIE5ldEhhY2sgMy43CVdpemFyZC5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4MyAyMDE1LzA1LzI1IDAwOjEzOjAzICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTEgJAotLQlDb3B5cmlnaHQgKGMpIDE5OTIgYnkgRGF2aWQgQ29ocnMKLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KLS0KZGVzLnJvb20oeyB0eXBlID0gIm9yZGluYXJ5IiwKICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICBkZXMuc3RhaXIoInVwIikKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMubW9uc3Rlcih7IGNsYXNzID0gIlgiLCBwZWFjZWZ1bD0wIH0pCiAgICAgICAgICAgZW5kCn0pCgpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKHsgY2xhc3MgPSAiaSIsIHBlYWNlZnVsPTAgfSkKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLm9iamVjdCgpCiAgICAgICAgICAgICAgZGVzLnRyYXAoKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKHsgY2xhc3MgPSAiWCIsIHBlYWNlZnVsPTAgfSkKICAgICAgICAgICBlbmQKfSkKCmRlcy5yb29tKHsgdHlwZSA9ICJvcmRpbmFyeSIsCiAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgZGVzLnN0YWlyKCJkb3duIikKICAgICAgICAgICAgICBkZXMub2JqZWN0KCkKICAgICAgICAgICAgICBkZXMudHJhcCgpCiAgICAgICAgICAgICAgZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJpIiwgcGVhY2VmdWw9MCB9KQogICAgICAgICAgICAgIGRlcy5tb25zdGVyKCJ2YW1waXJlIGJhdCIpCiAgICAgICAgICAgZW5kCn0pCgpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy50cmFwKCkKICAgICAgICAgICAgICBkZXMubW9uc3Rlcih7IGNsYXNzID0gImkiLCBwZWFjZWZ1bD0wIH0pCiAgICAgICAgICAgZW5kCn0pCgpkZXMucm9vbSh7IHR5cGUgPSAib3JkaW5hcnkiLAogICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgIGRlcy5vYmplY3QoKQogICAgICAgICAgICAgIGRlcy50cmFwKCkKICAgICAgICAgICAgICBkZXMubW9uc3RlcigidmFtcGlyZSBiYXQiKQogICAgICAgICAgIGVuZAp9KQoKZGVzLnJhbmRvbV9jb3JyaWRvcnMoKQotLSBOZXRIYWNrIDMuNwlBcmNoLmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzg0IDIwMTUvMDUvMjUgMDA6MTM6MDQgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS4xMCAkCi0tCUNvcHlyaWdodCAoYykgMTk4OSBieSBKZWFuLUNocmlzdG9waGUgQ29sbGV0Ci0tCUNvcHlyaWdodCAoYykgMTk5MSBieSBNLiBTdGVwaGVuc29uCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiICIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJoYXJkZmxvb3IiKQoKZGVzLm1hcChbWwouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwuLi4ufC5TLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC4uLi58LnwufCstLS0tLS0tLS0tLS0tLS0tLS0ufC4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58Li4uLnwufC58LnwuLi4uLi4uLi58Li4uLi4ufC58Li4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwuLi4ufC58LnwufC4uLi4uLi4uLnwuLi4uLi58LnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC0tLSstLnwufC58Li4tLS0uLi4uKy4uLi4uLnwufC4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58Li4uLnwufC58Li0tLXwufC4uLi58Li4uLi4ufC58Li4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwuLi4uUy58LnwuKy4uUy58LS1TLS0tLS1TLS18LnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC4uLi58LnwufC4tLS18LnwuLi4ufC4uLi4uLisufC4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58LS0tKy0ufC58LnwuLi0tLS4uLi58Li0tLS0tLS58Li4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwuLi4ufC58LnwufC4uLi4uLi4uLnwufC4uLi4rLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC4uLi58LnwufC58Li4uLi4uLi4ufCt8Li4uLnwtfC4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58Li4uLnwufC58LS0tLS0tLS0tLS0tKy0tLS0tLS5TLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwuLi4ufC5TLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KXV0pOwotLSBEdW5nZW9uIERlc2NyaXB0aW9uCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMTkpLCAibGl0IikKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MjUsMDQsIDI4LDA3fSwgbGl0PTEsIHR5cGU9InRlbXBsZSIsIGZpbGxlZD0yIH0pCmRlcy5yZWdpb24oeyByZWdpb249ezI1LDA5LCAyOCwxMX0sIGxpdD0wLCB0eXBlPSJ0ZW1wbGUiLCBmaWxsZWQ9MiB9KQpkZXMucmVnaW9uKHsgcmVnaW9uPXsyNSwxMywgMjgsMTZ9LCBsaXQ9MSwgdHlwZT0idGVtcGxlIiwgZmlsbGVkPTIgfSkKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgzMCwwNCwzMCwxNiksICJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDMyLDA0LDMyLDE2KSwgInVubGl0IikKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MzMsMDQsIDUzLDA0fSwgbGl0PTAsIHR5cGU9Im9yZGluYXJ5IiwgaXJyZWd1bGFyPTEgfSkKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgzNiwxMCwzNywxMCksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMzksMDksMzksMTEpLCAidW5saXQiKQpkZXMucmVnaW9uKHsgcmVnaW9uPXszNiwwNiwgNDIsMDh9LCBsaXQ9MCwgdHlwZT0ib3JkaW5hcnkiLCBpcnJlZ3VsYXI9MSB9KQpkZXMucmVnaW9uKHsgcmVnaW9uPXszNiwxMiwgNDIsMTR9LCBsaXQ9MCwgdHlwZT0ib3JkaW5hcnkiLCBpcnJlZ3VsYXI9MSB9KQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDQ2LDA2LDUxLDA5KSwgInVubGl0IikKZGVzLnJlZ2lvbih7IHJlZ2lvbj17NDYsMTEsIDQ5LDExfSwgbGl0PTAsIHR5cGU9Im9yZGluYXJ5IiwgaXJyZWd1bGFyPTEgfSkKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg0OCwxMyw1MSwxNCksICJ1bmxpdCIpCi0tIERvb3JzCmRlcy5kb29yKCJjbG9zZWQiLDMxLDA0KQpkZXMuZG9vcigiY2xvc2VkIiwyOCwwOCkKZGVzLmRvb3IoImxvY2tlZCIsMjksMTApCmRlcy5kb29yKCJjbG9zZWQiLDI4LDEyKQpkZXMuZG9vcigiY2xvc2VkIiwzMSwxNikKZGVzLmRvb3IoImxvY2tlZCIsMzQsMDUpCmRlcy5kb29yKCJsb2NrZWQiLDM1LDEwKQpkZXMuZG9vcigibG9ja2VkIiwzOCwxMCkKZGVzLmRvb3IoImNsb3NlZCIsNDMsMTApCmRlcy5kb29yKCJjbG9zZWQiLDQ1LDA4KQpkZXMuZG9vcigibG9ja2VkIiw0NiwxNCkKZGVzLmRvb3IoImxvY2tlZCIsNDYsMTUpCmRlcy5kb29yKCJsb2NrZWQiLDQ5LDEwKQpkZXMuZG9vcigibG9ja2VkIiw1MiwxMSkKZGVzLmRvb3IoImNsb3NlZCIsNTIsMTMpCmRlcy5kb29yKCJjbG9zZWQiLDU0LDE1KQotLSBTdGFpcnMKZGVzLnN0YWlyKCJ1cCIsIDAzLDE3KQpkZXMuc3RhaXIoImRvd24iLCAzOSwxMCkKLS0gQWx0YXJzIC0gdGhyZWUgdHlwZXMuICBBbGwgYXJlIHVuYXR0ZW5kZWQuCmRlcy5hbHRhcih7IHg9MjYseT0wNSxhbGlnbj1hbGlnblsxXSwgdHlwZT0iYWx0YXIiIH0pCmRlcy5hbHRhcih7IHg9MjYseT0xMCxhbGlnbj1hbGlnblsyXSwgdHlwZT0iYWx0YXIiIH0pCmRlcy5hbHRhcih7IHg9MjYseT0xNSxhbGlnbj1hbGlnblszXSwgdHlwZT0iYWx0YXIiIH0pCi0tIE5vbiBkaWdnYWJsZSB3YWxscwpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDc1LDE5KSkKLS0gT2JqZWN0cwpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQotLSBUcmVhc3VyZT8KZGVzLmVuZ3JhdmluZyh7IHR5cGU9ImVuZ3JhdmUiLCB0ZXh0PSJYIG1hcmtzIHRoZSBzcG90LiIgfSkKZGVzLmVuZ3JhdmluZyh7IHR5cGU9ImVuZ3JhdmUiLCB0ZXh0PSJYIG1hcmtzIHRoZSBzcG90LiIgfSkKZGVzLmVuZ3JhdmluZyh7IHR5cGU9ImVuZ3JhdmUiLCB0ZXh0PSJYIG1hcmtzIHRoZSBzcG90LiIgfSkKZGVzLmVuZ3JhdmluZyh7IHR5cGU9ImVuZ3JhdmUiLCB0ZXh0PSJYIG1hcmtzIHRoZSBzcG90LiIgfSkKLS0gUmFuZG9tIHRyYXBzCmRlcy50cmFwKCJzcGlrZWQgcGl0IiwyNCwwMikKZGVzLnRyYXAoInNwaWtlZCBwaXQiLDM3LDAwKQpkZXMudHJhcCgic3Bpa2VkIHBpdCIsMjMsMDUpCmRlcy50cmFwKCJzcGlrZWQgcGl0IiwyNiwxOSkKZGVzLnRyYXAoInNwaWtlZCBwaXQiLDU1LDEwKQpkZXMudHJhcCgic3Bpa2VkIHBpdCIsNTUsMDgpCmRlcy50cmFwKCJwaXQiLDUxLDAxKQpkZXMudHJhcCgicGl0IiwyMywxOCkKZGVzLnRyYXAoInBpdCIsMzEsMTgpCmRlcy50cmFwKCJwaXQiLDQ4LDE5KQpkZXMudHJhcCgicGl0Iiw1NSwxNSkKZGVzLnRyYXAoIm1hZ2ljIiw2MCwwNCkKZGVzLnRyYXAoInN0YXR1ZSIsNzIsMDcpCmRlcy50cmFwKCJzdGF0dWUiKQpkZXMudHJhcCgic3RhdHVlIikKZGVzLnRyYXAoImFudGkgbWFnaWMiLDY0LDEyKQpkZXMudHJhcCgic2xlZXAgZ2FzIikKZGVzLnRyYXAoInNsZWVwIGdhcyIpCmRlcy50cmFwKCJkYXJ0IikKZGVzLnRyYXAoImRhcnQiKQpkZXMudHJhcCgiZGFydCIpCmRlcy50cmFwKCJyb2xsaW5nIGJvdWxkZXIiLDMyLDEwKQpkZXMudHJhcCgicm9sbGluZyBib3VsZGVyIiw0MCwxNikKLS0gUmFuZG9tIG1vbnN0ZXJzLgpkZXMubW9uc3RlcigiUyIpCmRlcy5tb25zdGVyKCJTIikKZGVzLm1vbnN0ZXIoIlMiKQpkZXMubW9uc3RlcigiUyIpCmRlcy5tb25zdGVyKCJTIikKZGVzLm1vbnN0ZXIoIlMiKQpkZXMubW9uc3RlcigiUyIpCmRlcy5tb25zdGVyKCJTIikKZGVzLm1vbnN0ZXIoIlMiKQpkZXMubW9uc3RlcigiUyIpCmRlcy5tb25zdGVyKCJTIikKZGVzLm1vbnN0ZXIoIlMiKQpkZXMubW9uc3RlcigiUyIpCmRlcy5tb25zdGVyKCJTIikKZGVzLm1vbnN0ZXIoIlMiKQpkZXMubW9uc3RlcigiUyIpCmRlcy5tb25zdGVyKCJTIikKZGVzLm1vbnN0ZXIoIlMiKQpkZXMubW9uc3RlcigiTSIpCmRlcy5tb25zdGVyKCJodW1hbiBtdW1teSIpCmRlcy5tb25zdGVyKCJodW1hbiBtdW1teSIpCmRlcy5tb25zdGVyKCJodW1hbiBtdW1teSIpCmRlcy5tb25zdGVyKCJodW1hbiBtdW1teSIpCmRlcy5tb25zdGVyKCJodW1hbiBtdW1teSIpCmRlcy5tb25zdGVyKCJodW1hbiBtdW1teSIpCmRlcy5tb25zdGVyKCJodW1hbiBtdW1teSIpCmRlcy5tb25zdGVyKCJNIikKLS0gTmV0SGFjayAzLjcJQmFyYi5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4NCAyMDE1LzA1LzI1IDAwOjEzOjA0ICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuOSAkCi0tCUNvcHlyaWdodCAoYykgMTk4OSBieSBKZWFuLUNocmlzdG9waGUgQ29sbGV0Ci0tCUNvcHlyaWdodCAoYykgMTk5MSBieSBNLiBTdGVwaGVuc29uCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiICIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJoYXJkZmxvb3IiKQoKZGVzLm1hcChbWwouLi4uLi4uLi4uUFBQLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAgICAgICAgICAgICAgICAgCi4uLi4uLi4uLi4uUFAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAgIC4uLi4uLi4gICAgICAKLi4uLi4uLi4uLlBQLi4uLi4uLi4uLi4tLS0tLS4uLi4uLi4uLi4tLS0tLS0tLS0tLS0tLS0tLS0gICAgIC4uLi4uLi4uLi4gICAgIAouLi4uLi4uLi4uLlBQLi4uLi4uLi4uLisuLi58Li4uLi4uLi4uLnwuLi4uUy4uLi4uLi4uLi4ufC4uICAuLi4uLi4uLi4uLi4gICAgCi4uLi4uLi4uLi5QUFAuLi4uLi4uLi4ufC4uLnwuLi4uLi4uLi4ufC0tLS0tLi4uLi4uLi4uLi58Li4uICAuLi4uLi4uLi4uLi4uICAKLi4uLi4uLi4uLi5QUFAuLi4uLi4uLi4tLS0tLS4uLi4uLi4uLi4rLi4uLisuLi4uLi4uLi4uLnwuLi4gIC4uLi4uLi4uLi4uLi4gIAouLi4uLi4uLi4uUFBQUFBQUFBQLi4uLi4uLi4uLi4uLi4uLi4uLisuLi4uKy4uLi4uLi4uLi4uUy4uLi4uLi4uLi4uLi4uLi4uICAgCi4uLi4uLi4uUFBQUFBQUFBQUFBQUC4uLi4uLi4uLi0tLS0tLi4ufC0tLS0tLi4uLi4uLi4uLi58Li4uLi4uLi4uLi4uLi4uLiAgICAKLi4uLi4uUFBQUFBQUFBQUFBQUFAuLlAuLi4uLi4uKy4uLnwuLi58Li4uLlMuLi4uLi4uLi4uLnwgICAgICAgICAgLi4uICAgICAgIAouLi4uLlBQUFBQUFAuLi4uLi5QLi5QUFBQLi4uLi58Li4ufC4uLi0tLS0tLS0tLS0tLS0tLS0tLS4uICAgICAgICAgLi4uICAgICAgCi4uLi5QUFBQUFBQLi4uLi4uLi4uUFBQUFBQLi4uLi0tLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uICAgICAgLi4uLi4uLi4gICAKLi4uUFBQUFBQUC4uLi4uLi4uLi5QUFBQUFBQLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgIC4uLi4uLi4uLi4gIAouLi4uUFBQUFBQUC4uLi4uLi4uUFBQUFBQUC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgLi4uLi4uLi4uLiAgCi4uLi4uUFBQUFAuLi4uLi4uLlBQUFBQUFAuLi4uLi4uLi4tLS0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgIC4uLi4uLi4uICAKLi4uLi4uUFBQLi5QUFBQUFBQUFBQUFAuLi4uLi4uLi4uLisuLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAuLi4uLiAgIAouLi4uLi4uLi4uUFBQUFBQUFBQUFAuLi4uLi4uLi4uLi4ufC4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uICAgICAuLi4uICAgCi4uLi4uLi4uLi5QUFBQUFBQUFAuLi4uLi4uLi4uLi4uLi4tLS0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAgLiAgICAKLi4uLi4uLi4uLi4uLi5QUFAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uICAgICAgICAgIAouLi4uLi4uLi4uLi4uLi5QUC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAgCi4uLi4uLi4uLi4uLi4uLi5QUFAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAKXV0pOwotLSBEdW5nZW9uIERlc2NyaXB0aW9uCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMTkpLCAibGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgyNCwwMywyNiwwNCksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMzEsMDgsMzMsMDkpLCAidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDM1LDE0LDM3LDE1KSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgzOSwwMyw1NCwwOCksICJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDU2LDAwLDc1LDA4KSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg2NCwwOSw3NSwxNiksICJ1bmxpdCIpCi0tIERvb3JzCmRlcy5kb29yKCJvcGVuIiwyMywwMykKZGVzLmRvb3IoIm9wZW4iLDMwLDA4KQpkZXMuZG9vcigib3BlbiIsMzQsMTQpCmRlcy5kb29yKCJsb2NrZWQiLDM4LDA1KQpkZXMuZG9vcigibG9ja2VkIiwzOCwwNikKZGVzLmRvb3IoImNsb3NlZCIsNDMsMDMpCmRlcy5kb29yKCJjbG9zZWQiLDQzLDA1KQpkZXMuZG9vcigiY2xvc2VkIiw0MywwNikKZGVzLmRvb3IoImNsb3NlZCIsNDMsMDgpCmRlcy5kb29yKCJsb2NrZWQiLDU1LDA2KQotLSBTdGFpcnMKZGVzLnN0YWlyKCJ1cCIsIDA1LDAyKQpkZXMuc3RhaXIoImRvd24iLCA3MCwxMykKLS0gT2JqZWN0cwpkZXMub2JqZWN0KHsgeCA9IDQyLCB5ID0gMDMgfSkKZGVzLm9iamVjdCh7IHggPSA0MiwgeSA9IDAzIH0pCmRlcy5vYmplY3QoeyB4ID0gNDIsIHkgPSAwMyB9KQpkZXMub2JqZWN0KHsgeCA9IDQxLCB5ID0gMDMgfSkKZGVzLm9iamVjdCh7IHggPSA0MSwgeSA9IDAzIH0pCmRlcy5vYmplY3QoeyB4ID0gNDEsIHkgPSAwMyB9KQpkZXMub2JqZWN0KHsgeCA9IDQxLCB5ID0gMDMgfSkKZGVzLm9iamVjdCh7IHggPSA0MSwgeSA9IDA4IH0pCmRlcy5vYmplY3QoeyB4ID0gNDEsIHkgPSAwOCB9KQpkZXMub2JqZWN0KHsgeCA9IDQyLCB5ID0gMDggfSkKZGVzLm9iamVjdCh7IHggPSA0MiwgeSA9IDA4IH0pCmRlcy5vYmplY3QoeyB4ID0gNDIsIHkgPSAwOCB9KQpkZXMub2JqZWN0KHsgeCA9IDcxLCB5ID0gMTMgfSkKZGVzLm9iamVjdCh7IHggPSA3MSwgeSA9IDEzIH0pCmRlcy5vYmplY3QoeyB4ID0gNzEsIHkgPSAxMyB9KQotLSBSYW5kb20gdHJhcHMKZGVzLnRyYXAoInNwaWtlZCBwaXQiLDEwLDEzKQpkZXMudHJhcCgic3Bpa2VkIHBpdCIsMjEsMDcpCmRlcy50cmFwKCJzcGlrZWQgcGl0Iiw2NywwOCkKZGVzLnRyYXAoInNwaWtlZCBwaXQiLDY4LDA5KQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tIFJhbmRvbSBtb25zdGVycy4KZGVzLm1vbnN0ZXIoeyBpZCA9ICJvZ3JlIiwgeD0xMiwgeT0wOSwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9ncmUiLCB4PTE4LCB5PTExLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2dyZSIsIHg9NDUsIHk9MDUsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJvZ3JlIiwgeD00NSwgeT0wNiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9ncmUiLCB4PTQ3LCB5PTA1LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2dyZSIsIHg9NDYsIHk9MDUsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJvZ3JlIiwgeD01NiwgeT0wMywgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9ncmUiLCB4PTU2LCB5PTA0LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2dyZSIsIHg9NTYsIHk9MDUsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJvZ3JlIiwgeD01NiwgeT0wNiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9ncmUiLCB4PTU3LCB5PTAzLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2dyZSIsIHg9NTcsIHk9MDQsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJvZ3JlIiwgeD01NywgeT0wNSwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9ncmUiLCB4PTU3LCB5PTA2LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2dyZSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJvZ3JlIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm9ncmUiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiTyIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJUIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInJvY2sgdHJvbGwiLCB4PTQ2LCB5PTA2LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicm9jayB0cm9sbCIsIHg9NDcsIHk9MDYsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJyb2NrIHRyb2xsIiwgeD01NiwgeT0wNywgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInJvY2sgdHJvbGwiLCB4PTU3LCB5PTA3LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicm9jayB0cm9sbCIsIHg9NzAsIHk9MTMsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJyb2NrIHRyb2xsIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInJvY2sgdHJvbGwiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiVCIsIHBlYWNlZnVsPTAgfSkKCi0tIE5ldEhhY2sgMy43CUNhdmVtYW4uZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODMgMjAxNS8wNS8yNSAwMDoxMzowMyAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjggJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAiaGFyZGZsb29yIikKCmRlcy5tYXAoW1sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgLi4uLi4uLi4uLi4uLiAgICAgICAgICAgICAgICAgICAgIC4uLi4uLi4uLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgIC4uLi4uLi4uLi4uLi4uLiAgICAgICAgICAgICAgICAgICAuLi4uLi4uLi4uLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIC4uLi4uLi4uLi4uLi4gICAgICAgICAgICAgICAgICAuLi4uLi4uLi4uLi4uLi4gICAgICAgIC4uLi4uLi4uLi4gICAgICAgIAogICAgIC4uLi4uLi4uLi4uICAgICAgICAgICAgICAgICAgICAuLi4uLi4uLi4uLi4uICAgICAgLi4uLi4uLi4uLi4uLi4uICAgICAgCiAgICAgICAgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uICAgLi4uLi4uLi4uLi4uLi4uLi4uICAgICAKICAgICAgICAgLi4uICAgICAgICAgICAgICAgIC4uLi4uLi4uLi4gICAgICAgICAgLi4uIC4uLi4uLi4uLi4uLi4uLi4uLiAgICAgIAogICAgICAgICAgLi4uICAgICAgICAgICAgICAuLi4uLi4uLi4uLi4gICAgICAgICAgQkJCLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgCiAgICAgICAgICAgLi4uICAgICAgICAgICAgICAuLi4uLi4uLi4uICAgICAgICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAKICAgICAgICAgICAgLi4uLi4gICAgICAgICAgICAgICAgIC4uICAgICAgLi4uLi5CLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uICAgIAogIC4uLi4gICAgICAgLi4uLi4uLi4uLi4uLi4uICAgICAgLiAgICAuLi4uLi4uLkIuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgCiAuLi4uLi4gICAgIC4uIC4uLi4uLi4uLi4uLi5TLi4uLi4uLi4uLi4uLi4gICAgICAgICAuLi4uLi4uLi4uLi4uLi4uLi4gICAgICAKICAuLi4uICAgICAuLiAgICAgICAgICAgICAgICAuLi4uLi4uLi4uLiAgICAgICAgICAgICAuLi4uLi4uLi4uLi4uLi4gICAgICAgIAogICAgIC4uICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgCiAgICAgIC4uLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJCLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAKICAgICAgICAgLi4gICAgICAgICAgICAgICAgIC4uICAgICAgICAgICAgICAgICAuLiAgLi4uLi4uLi4uLi4uLi4uICAgICAgICAgIAogICAgICAgICAgLi4gICAuLi4uLi4uICAgICAuLi4uICAuLi4uLiAgLi4uLiAgLi4gICAgIC4uLi4uLi4gICBTICAgICAgICAgICAgCiAgICAgICAgICAgLi4uLi4uLi4uLi4uICAgICAuLi4uLi4uIC4uICAuLi4uLi4uICAgICAgIC4uLi4uICAgIC4uLiAgLi4uLiAgICAKICAgICAgICAgICAgICAgLi4uLi4uLiAgICAgICAuLi4uLiAgIC4uLi4uLiAgICAgICAgICAgICAgICAgICAgICAuLi4uLi4uICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCl1dKTsKLS0gRHVuZ2VvbiBEZXNjcmlwdGlvbgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDc1LDE5KSwgInVubGl0IikKZGVzLnJlZ2lvbih7IHJlZ2lvbj17NTIsMDYsIDczLDE1fSwgbGl0PTEsIHR5cGU9Im9yZGluYXJ5IiwgaXJyZWd1bGFyPTEgfSkKLS0gRG9vcnMKZGVzLmRvb3IoImxvY2tlZCIsMjgsMTEpCi0tIFN0YWlycwpkZXMuc3RhaXIoInVwIiwgMDQsMDMpCmRlcy5zdGFpcigiZG93biIsIDczLDEwKQotLSBOb24gZGlnZ2FibGUgd2FsbHMKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgwMCwwMCw3NSwxOSkpCi0tIE9iamVjdHMKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKLS0gUmFuZG9tIHRyYXBzCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tIFJhbmRvbSBtb25zdGVycy4KZGVzLm1vbnN0ZXIoeyBpZCA9ICJidWdiZWFyIiwgeD0wMiwgeT0xMCwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImJ1Z2JlYXIiLCB4PTAzLCB5PTExLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYnVnYmVhciIsIHg9MDQsIHk9MTIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJidWdiZWFyIiwgeD0wMiwgeT0xMSwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImJ1Z2JlYXIiLCB4PTE2LCB5PTE2LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYnVnYmVhciIsIHg9MTcsIHk9MTcsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJidWdiZWFyIiwgeD0xOCwgeT0xOCwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImJ1Z2JlYXIiLCB4PTE5LCB5PTE2LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYnVnYmVhciIsIHg9MzAsIHk9MDYsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJidWdiZWFyIiwgeD0zMSwgeT0wNywgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImJ1Z2JlYXIiLCB4PTMyLCB5PTA4LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYnVnYmVhciIsIHg9MzMsIHk9MDYsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJidWdiZWFyIiwgeD0zNCwgeT0wNywgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImJ1Z2JlYXIiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiYnVnYmVhciIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJidWdiZWFyIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImJ1Z2JlYXIiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiaCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJIIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImhpbGwgZ2lhbnQiLCB4PTAzLCB5PTEyLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiaGlsbCBnaWFudCIsIHg9MjAsIHk9MTcsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJoaWxsIGdpYW50IiwgeD0zNSwgeT0wOCwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImhpbGwgZ2lhbnQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiaGlsbCBnaWFudCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJoaWxsIGdpYW50IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImhpbGwgZ2lhbnQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiSCIsIHBlYWNlZnVsPTAgfSkKZGVzLndhbGxpZnkoKQoKLS0KLS0JVGhlICJnb2FsIiBsZXZlbCBmb3IgdGhlIHF1ZXN0LgotLQotLQlIZXJlIHlvdSBtZWV0IFRpYW1hdCB5b3VyIG5lbWVzaXMgbW9uc3Rlci4gIFlvdSBoYXZlIHRvCi0tCWRlZmVhdCBUaWFtYXQgaW4gY29tYmF0IHRvIGdhaW4gdGhlIGFydGlmYWN0IHlvdSBoYXZlCi0tCWJlZW4gYXNzaWduZWQgdG8gcmV0cmlldmUuCi0tCi0tIE5ldEhhY2sgMy43CUhlYWxlci5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4NCAyMDE1LzA1LzI1IDAwOjEzOjA0ICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTAgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEsIDE5OTMgYnkgTS4gU3RlcGhlbnNvbiwgUC4gV2lubmVyCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiICIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJoYXJkZmxvb3IiKTsKLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZT0ibWluZXMiLCBmZz0iLiIsIGJnPSJQIiwgc21vb3RoZWQ9dHJ1ZSAsam9pbmVkPXRydWUsIGxpdD0xLCB3YWxsZWQ9ZmFsc2UgfSkKCmRlcy5tYXAoW1sKUFBQUFBQUFBQUFBQUC4uLi4uLi5QUFBQUFBQUFBQUApQUFBQUFBQUC4uLi4uLi4uLi4uLi4uLlBQUFBQUFBQClBQUFAuLi4uLi0tLS0tLS0tLS0tLS0uLi5QUFBQUFAKUFBQUFAuLi4ufC5TLi4uLi4uLi4ufC4uLi5QUFBQUApQUFAuLi4uLi4rLnwuLi4uLi4uLi58Li4uUFBQUFBQClBQUC4uLi4uLisufC4uLi4uLi4uLnwuLlBQUFBQUFAKUFBQUC4uLi4ufC5TLi4uLi4uLi4ufC4uUFBQUFBQUApQUFBQUC4uLi4tLS0tLS0tLS0tLS0tLi4uLlBQUFBQClBQUFBQUFBQLi4uLi4uLi4uLi4uLi4uUFBQUFBQUFAKUFBQUFBQUFBQUFAuLi4uLi4uLlBQUFBQUFBQUFBQUApdXSk7Ci0tIER1bmdlb24gRGVzY3JpcHRpb24KZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMCwwMCwzMCwwOSksICJsaXQiKQpkZXMucmVnaW9uKHsgcmVnaW9uPXsxMiwwMywgMjAsMDZ9LCBsaXQ9MSwgdHlwZT0idGVtcGxlIiwgZmlsbGVkPTEgfSkKLS0gRG9vcnMKZGVzLmRvb3IoImNsb3NlZCIsMDksMDQpCmRlcy5kb29yKCJjbG9zZWQiLDA5LDA1KQpkZXMuZG9vcigibG9ja2VkIiwxMSwwMykKZGVzLmRvb3IoImxvY2tlZCIsMTEsMDYpCi0tIFN0YWlycwpkZXMuc3RhaXIoInVwIiwgMDQsMDQpCmRlcy5zdGFpcigiZG93biIsIDIwLDA2KQotLSBOb24gZGlnZ2FibGUgd2FsbHMKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgxMSwwMiwyMSwwNykpCi0tIEFsdGFyIGluIHRoZSB0ZW1wbGUuCmRlcy5hbHRhcih7IHg9MTMseT0wNSwgYWxpZ249ImNoYW9zIiwgdHlwZT0ic2hyaW5lIiB9KQotLSBPYmplY3RzCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCi0tIFJhbmRvbSB0cmFwcwpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQotLSBSYW5kb20gbW9uc3RlcnMuCmRlcy5tb25zdGVyKCJyYWJpZCByYXQiKQpkZXMubW9uc3RlcigicmFiaWQgcmF0IikKZGVzLm1vbnN0ZXIoInJhYmlkIHJhdCIpCmRlcy5tb25zdGVyKCJyYWJpZCByYXQiKQpkZXMubW9uc3RlcigicmFiaWQgcmF0IikKZGVzLm1vbnN0ZXIoInJhYmlkIHJhdCIpCmRlcy5tb25zdGVyKCJyYWJpZCByYXQiKQpkZXMubW9uc3RlcigicmFiaWQgcmF0IikKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJyIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3RlcigiZ2lhbnQgZWVsIikKZGVzLm1vbnN0ZXIoImdpYW50IGVlbCIpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiKQpkZXMubW9uc3RlcigiZ2lhbnQgZWVsIikKZGVzLm1vbnN0ZXIoImdpYW50IGVlbCIpCmRlcy5tb25zdGVyKCJlbGVjdHJpYyBlZWwiKQpkZXMubW9uc3RlcigiZWxlY3RyaWMgZWVsIikKZGVzLm1vbnN0ZXIoImtyYWtlbiIpCmRlcy5tb25zdGVyKCJzaGFyayIpCmRlcy5tb25zdGVyKCJzaGFyayIpCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiOyIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICI7IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiRCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJEIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiRCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJTIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIlMiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiUyIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJTIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIlMiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiUyIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJTIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIlMiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiUyIsIHBlYWNlZnVsPTAgfSkKLS0gTmV0SGFjayAzLjcJS25pZ2h0LmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzg0IDIwMTUvMDUvMjUgMDA6MTM6MDQgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS45ICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxLDkyIGJ5IE0uIFN0ZXBoZW5zb24KLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIiwgImhhcmRmbG9vciIpCgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlPSJtaW5lcyIsIGZnPSIuIiwgYmc9IlAiLCBzbW9vdGhlZD1mYWxzZSwgam9pbmVkPXRydWUsIGxpdD0xLCB3YWxsZWQ9ZmFsc2UgfSkKCmRlcy5tYXAoW1sKeHh4eHh4eHh4Li4uLi4ueHh4eC4uLi4uLi4uLi4ueHh4eHh4eHh4eAp4eHh4eHh4Li4uLi4uLi4ueHh4Li4uLi4uLi4uLi4uLnh4eHh4eHh4Cnh4eHguLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi54eHh4eHgKeHguLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi54eHh4eAouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi54eHh4Ci4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLngKLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgp4eC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ueHh4Cnh4eHguLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi54eHh4eHgKeHh4eHh4Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi54eHh4eHh4eAp4eHh4eHh4eC4uLi4uLi4uLnh4Li4uLi4uLi4uLnh4eHh4eHh4eHh4Cnh4eHh4eHh4eC4uLi4uLi54eHh4eHguLi4uLnh4eHh4eHh4eHh4eHgKXV0pOwotLSBEdW5nZW9uIERlc2NyaXB0aW9uCi0tIFRoZSBJc2xlIG9mIEdsYXNzIGlzIGEgVG9yIHJpc2luZyBvdXQgb2YgdGhlIHN3YW1wcyBzdXJyb3VuZGluZyBpdC4KZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMCwwMCwzOSwxMSksICJsaXQiKQotLSBUaGUgdG9wIGFyZWEgb2YgdGhlIFRvciBpcyBhIGhvbHkgc2l0ZS4KZGVzLnJlZ2lvbih7IHJlZ2lvbj17MDksMDIsIDI3LDA5fSwgbGl0PTEsIHR5cGU9InRlbXBsZSIsIGZpbGxlZD0yIH0pCi0tIFN0YWlycwpkZXMuc3RhaXIoInVwIiwgMzgsMCkKZGVzLnN0YWlyKCJkb3duIiwgMTgsMDUpCi0tIFRoZSBhbHRhciBhdG9wIHRoZSBUb3IgYW5kIGl0cyBhdHRlbmRhbnQgKGNyZWF0aW5nIGFsdGFyIG1ha2VzIHRoZSBwcmllc3QpLgpkZXMuYWx0YXIoeyB4PTE3LCB5PTA1LCBhbGlnbj0ibmV1dHJhbCIsIHR5cGU9InNocmluZSIgfSkKLS0gT2JqZWN0cwpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQotLSBSYW5kb20gdHJhcHMKLS0gQWxsIG9mIHRoZSBhdmVudWVzIGFyZSBndWFyZGVkIGJ5IG1hZ2ljIGV4Y2VwdCBmb3IgdGhlIEVhc3QuCi0tIFNvdXRoCmRlcy50cmFwKCJtYWdpYyIsMDgsMTEpCmRlcy50cmFwKCJtYWdpYyIsMDksMTEpCmRlcy50cmFwKCJtYWdpYyIsMTAsMTEpCmRlcy50cmFwKCJtYWdpYyIsMTEsMTEpCmRlcy50cmFwKCJtYWdpYyIsMTIsMTEpCmRlcy50cmFwKCJtYWdpYyIsMTMsMTEpCmRlcy50cmFwKCJtYWdpYyIsMTQsMTEpCmRlcy50cmFwKCJtYWdpYyIsMTUsMTEpCmRlcy50cmFwKCJtYWdpYyIsMTYsMTEpCmRlcy50cmFwKCJtYWdpYyIsMjAsMTEpCmRlcy50cmFwKCJtYWdpYyIsMjEsMTEpCmRlcy50cmFwKCJtYWdpYyIsMjIsMTEpCmRlcy50cmFwKCJtYWdpYyIsMjMsMTEpCmRlcy50cmFwKCJtYWdpYyIsMjQsMTEpCmRlcy50cmFwKCJtYWdpYyIsMjUsMTEpCmRlcy50cmFwKCJtYWdpYyIsMjYsMTEpCmRlcy50cmFwKCJtYWdpYyIsMjcsMTEpCmRlcy50cmFwKCJtYWdpYyIsMjgsMTEpCi0tIFdlc3QKZGVzLnRyYXAoIm1hZ2ljIiwwMCwwMykKZGVzLnRyYXAoIm1hZ2ljIiwwMCwwNCkKZGVzLnRyYXAoIm1hZ2ljIiwwMCwwNSkKZGVzLnRyYXAoIm1hZ2ljIiwwMCwwNikKLS0gTm9ydGgKZGVzLnRyYXAoIm1hZ2ljIiwwNiwwMCkKZGVzLnRyYXAoIm1hZ2ljIiwwNywwMCkKZGVzLnRyYXAoIm1hZ2ljIiwwOCwwMCkKZGVzLnRyYXAoIm1hZ2ljIiwwOSwwMCkKZGVzLnRyYXAoIm1hZ2ljIiwxMCwwMCkKZGVzLnRyYXAoIm1hZ2ljIiwxMSwwMCkKZGVzLnRyYXAoIm1hZ2ljIiwxMiwwMCkKZGVzLnRyYXAoIm1hZ2ljIiwxMywwMCkKZGVzLnRyYXAoIm1hZ2ljIiwxNCwwMCkKZGVzLnRyYXAoIm1hZ2ljIiwxOSwwMCkKZGVzLnRyYXAoIm1hZ2ljIiwyMCwwMCkKZGVzLnRyYXAoIm1hZ2ljIiwyMSwwMCkKZGVzLnRyYXAoIm1hZ2ljIiwyMiwwMCkKZGVzLnRyYXAoIm1hZ2ljIiwyMywwMCkKZGVzLnRyYXAoIm1hZ2ljIiwyNCwwMCkKZGVzLnRyYXAoIm1hZ2ljIiwyNSwwMCkKZGVzLnRyYXAoIm1hZ2ljIiwyNiwwMCkKZGVzLnRyYXAoIm1hZ2ljIiwyNywwMCkKZGVzLnRyYXAoIm1hZ2ljIiwyOCwwMCkKZGVzLnRyYXAoIm1hZ2ljIiwyOSwwMCkKZGVzLnRyYXAoIm1hZ2ljIiwzMCwwMCkKZGVzLnRyYXAoIm1hZ2ljIiwzMSwwMCkKZGVzLnRyYXAoIm1hZ2ljIiwzMiwwMCkKLS0gRXZlbiBzbywgdGhlcmUgYXJlIG1hZ2ljICJzaW5raG9sZXMiIGFyb3VuZC4KZGVzLnRyYXAoImFudGkgbWFnaWMiKQpkZXMudHJhcCgiYW50aSBtYWdpYyIpCmRlcy50cmFwKCJhbnRpIG1hZ2ljIikKZGVzLnRyYXAoImFudGkgbWFnaWMiKQpkZXMudHJhcCgiYW50aSBtYWdpYyIpCmRlcy50cmFwKCJhbnRpIG1hZ2ljIikKZGVzLnRyYXAoImFudGkgbWFnaWMiKQotLSBSYW5kb20gbW9uc3RlcnMuCmRlcy5tb25zdGVyKHsgaWQgPSAicXVhc2l0IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInF1YXNpdCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJxdWFzaXQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicXVhc2l0IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInF1YXNpdCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJxdWFzaXQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicXVhc2l0IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInF1YXNpdCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJxdWFzaXQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicXVhc2l0IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInF1YXNpdCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJxdWFzaXQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicXVhc2l0IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInF1YXNpdCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJxdWFzaXQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicXVhc2l0IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInF1YXNpdCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJpIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gImoiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2NocmUgamVsbHkiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2NocmUgamVsbHkiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2NocmUgamVsbHkiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2NocmUgamVsbHkiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2NocmUgamVsbHkiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2NocmUgamVsbHkiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAib2NocmUgamVsbHkiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiaiIsIHBlYWNlZnVsPTAgfSkKLS0gTmV0SGFjayAzLjcJTW9uay5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4NCAyMDE1LzA1LzI1IDAwOjEzOjA0ICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTIgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEtMiBieSBNLiBTdGVwaGVuc29uCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiICIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIpOwoKLS0gICAgICAgICAxICAgICAgICAgMiAgICAgICAgIDMgICAgICAgICA0ICAgICAgICAgNSAgICAgICAgIDYgICAgICAgICA3IAotLTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NQpkZXMubWFwKFtbCiAgICAgICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAgLS0tLS0tLS0KICAgICAgICAgICAtLS0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLSAgICAtLS4uLi4ufAogICAgICAgICAtLS0uLi4tLS0tLS0tLS4uLi4uLi4uLS0tLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tICAgICAtLS0uLi58CiAgICAgICAtLS0uLi4uLi0gICAgICAtLS4uLi4uLi4tICAgIC0tLS0uLi4uLi4uLi4uLi4uLi4uLi4tLS0tICAgICAgICAgLS0uLS0KICAgICAtLS0uLi4uLi0tLS0gICAgICAtLS0tLS0tLS0gICAgICAgLS0uLi4uLi4uLi4uLi4uLi4uLi4tLSAgICAgICAgIC0tLi58IAogICAtLS0uLi4tLS0tLSAgICAgICAgICAgICAgICAgICAgICAgLS0tLS4tLS0tLi4uLi4tLS0tLi4uLi4tLS0gICAgICAtLS4ufHwgCi0tLS0uLi0tLS0gICAgICAgICAgICAgICAgICAgICAgIC0tLS0tLi4tLS0gIHwuLi4tLS0gIHwuLi4uLi4uLS0tICAgLS0uLi58ICAKfC4uLi0tLSAgICAgICAgICAgICAgICAgICAgICAgLS0tLS4uLi4tLS0gICAgfC4tLS0gICAgfC4uLi4uLi4uLi0tIC0tLi4ufHwgIAp8Li4uLSAgICAgICAgICAgICAgICAgICAgICAtLS0tLi4uLi4tLS0gICAgIC0tLS0gICAgICB8Li4uLi4uLi4uLi0tLS4uLi58ICAgCnwuLi4tLS0tICAgICAgICAgICAgICAgIC0tLS0uLi4uLi4tLS0gICAgICAgfCAgICAgICAgIHwuLi58Li4uLi4uLi0uLi4ufHwgICAKfC4uLi4uLi0tLS0tICAgICAgICAgIC0tLS4uLi4uLi4uLi0gICAgICAgICB8ICAgICAtLS0tLS4uLnwuLi4uLi4uLi4uLi58ICAgIAp8Li4uLi4uLi4uLi0tLS0tICAgLS0tLS4uLi4uLi4uLi4uLS0tICAgICAgIC0tLS0tLS0uLi4uLi58fC4uLi4uLi4uLi4ufHwgICAgCnwuLi4uLi4uLi4uLi4uLi0tLS0tLi4uLi4uLi4uLi4uLi4uLi0tLSAgICAgfC4uLi4uLi4uLi4uLnx8fC4uLi4uLi4uLi58ICAgICAKfC1TLS0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0gICB8Li4uLi4uLi4uLi58fCB8Li4uLi4uLi4ufHwgICAgIAp8Li4uLi58Li4uLi4uLi4uLi4uLi4tLS0tLS0uLi4uLi4uLi4uLi4uLS0tLS0uLi4uLi4uLi4ufHwgIHx8Li4uLi4uLi58ICAgICAgCnwuLi4uLnwuLi4uLi4uLi4uLi4uLS0gICAgLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnx8ICAgIHwuLi4uLi4ufHwgICAgICAKfC4uLi4ufC4uLi4uLi4uLi4uLi4tICAgICAgIC0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi0tfCAgICAgfHwuLi4uLi58ICAgICAgIAp8LS0tUy0tLS0tLS0tLi4uLi4uLi0tLS0gICAgICAtLS4uLi4uLi4uLi4uLi4uLi4uLS0tLSAgICAgICAgfC4uLi4ufHwgICAgICAgCnwuLi4uLi4uLi4uLnwuLi4uLi4uLi4uLS0tLS0tLS0uLi4uLi4uLi4uLi4uLi0tLS0tICAgICAgICAgICB8fC4uLi58ICAgICAgICAKfC4uLi4uLi4uLi4ufC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0tLSAgICAgICAgICAgICAgICB8Li4uLnwgICAgICAgIAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gICAgICAgICAgICAgICAgICAgIC0tLS0tLSAgICAgICAgCl1dKTsKLS0gUmFuZG9tIE1vbnN0ZXJzCgotLSBEdW5nZW9uIERlc2NyaXB0aW9uCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMjApLCAibGl0IikKLS0gU3RhaXJzCmRlcy5zdGFpcigidXAiKQpkZXMuc3RhaXIoImRvd24iKQotLSBOb24gZGlnZ2FibGUgd2FsbHMKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgwMCwwMCw3NSwyMCkpCi0tIE9iamVjdHMKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKLS0gUmFuZG9tIHRyYXBzCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tIFJhbmRvbSBtb25zdGVycy4KZGVzLm1vbnN0ZXIoImVhcnRoIGVsZW1lbnRhbCIpCmRlcy5tb25zdGVyKCJlYXJ0aCBlbGVtZW50YWwiKQpkZXMubW9uc3RlcigiZWFydGggZWxlbWVudGFsIikKZGVzLm1vbnN0ZXIoImVhcnRoIGVsZW1lbnRhbCIpCmRlcy5tb25zdGVyKCJlYXJ0aCBlbGVtZW50YWwiKQpkZXMubW9uc3RlcigiZWFydGggZWxlbWVudGFsIikKZGVzLm1vbnN0ZXIoImVhcnRoIGVsZW1lbnRhbCIpCmRlcy5tb25zdGVyKCJlYXJ0aCBlbGVtZW50YWwiKQpkZXMubW9uc3RlcigiZWFydGggZWxlbWVudGFsIikKZGVzLm1vbnN0ZXIoImVhcnRoIGVsZW1lbnRhbCIpCmRlcy5tb25zdGVyKCJlYXJ0aCBlbGVtZW50YWwiKQpkZXMubW9uc3RlcigiZWFydGggZWxlbWVudGFsIikKZGVzLm1vbnN0ZXIoImVhcnRoIGVsZW1lbnRhbCIpCmRlcy5tb25zdGVyKCJlYXJ0aCBlbGVtZW50YWwiKQpkZXMubW9uc3RlcigieG9ybiIpCmRlcy5tb25zdGVyKCJ4b3JuIikKZGVzLm1vbnN0ZXIoInhvcm4iKQpkZXMubW9uc3RlcigieG9ybiIpCmRlcy5tb25zdGVyKCJ4b3JuIikKZGVzLm1vbnN0ZXIoInhvcm4iKQpkZXMubW9uc3RlcigieG9ybiIpCmRlcy5tb25zdGVyKCJ4b3JuIikKZGVzLm1vbnN0ZXIoInhvcm4iKQotLSBOZXRIYWNrIDMuNwlQcmllc3QuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjExICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxLTIgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAiaGFyZGZsb29yIiwgIm5vZmxpcCIpCi0tIFRoaXMgaXMgYSBrbHVkZ2UgdG8gaW5pdCB0aGUgbGV2ZWwgYXMgYSBsaXQgZmllbGQuCmRlcy5sZXZlbF9pbml0KHsgc3R5bGU9Im1pbmVzIiwgZmc9Ii4iLCBiZz0iLiIsIHNtb290aGVkPWZhbHNlLCBqb2luZWQ9ZmFsc2UsIGxpdD0xLCB3YWxsZWQ9ZmFsc2UgfSkKCmRlcy5tYXAoW1sKLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4tLS0tLS0tLS0tKy0tLS0tLS0tLS0uLi4uLi4uLi4KLi4uLi4uLi4uLnwuLi4uLi4uLnwufC4uLi4uLi4ufC4uLi4uLi4uLgouLi4uLi4uLi4ufC4uLi4uLi4ufC58Li4uLi4uLi58Li4uLi4uLi4uCi4uLi4uLi4uLi58LS0tLS4tLS0tLi0tLS0uLS0tLXwuLi4uLi4uLi4KLi4uLi4uLi4uLisuLi4uLi4uLi4uLi4uLi4uLi4uKy4uLi4uLi4uLgouLi4uLi4uLi4uKy4uLi4uLi4uLi4uLi4uLi4uLi4rLi4uLi4uLi4uCi4uLi4uLi4uLi58LS0tLS4tLS0tLi0tLS0uLS0tLXwuLi4uLi4uLi4KLi4uLi4uLi4uLnwuLi4uLi4uLnwufC4uLi4uLi4ufC4uLi4uLi4uLgouLi4uLi4uLi4ufC4uLi4uLi4ufC58Li4uLi4uLi58Li4uLi4uLi4uCi4uLi4uLi4uLi4tLS0tLS0tLS0tKy0tLS0tLS0tLS0uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCl1dKTsKLS0gRHVuZ2VvbiBEZXNjcmlwdGlvbgpkZXMucmVnaW9uKHsgcmVnaW9uPXswMCwwMCwgMDksMTN9LCBsaXQ9MCwgdHlwZT0ibW9yZ3VlIiwgZmlsbGVkPTEgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MDksMDAsIDMwLDAxfSwgbGl0PTAsIHR5cGU9Im1vcmd1ZSIsIGZpbGxlZD0xIH0pCmRlcy5yZWdpb24oeyByZWdpb249ezA5LDEyLCAzMCwxM30sIGxpdD0wLCB0eXBlPSJtb3JndWUiLCBmaWxsZWQ9MSB9KQpkZXMucmVnaW9uKHsgcmVnaW9uPXszMSwwMCwgMzksMTN9LCBsaXQ9MCwgdHlwZT0ibW9yZ3VlIiwgZmlsbGVkPTEgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MTEsMDMsIDI5LDEwfSwgbGl0PTEsIHR5cGU9InRlbXBsZSIsIGZpbGxlZD0xLCBpcnJlZ3VsYXI9MSB9KQotLSBUaGUgYWx0YXIgaW5zaWRlIHRoZSB0ZW1wbGUKZGVzLmFsdGFyKHsgeD0yMCx5PTA3LCBhbGlnbj0ibm9hbGlnbiIsIHR5cGU9InNocmluZSIgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJhbGlnbmVkIHByaWVzdCIsIHg9MjAsIHk9MDcsIGFsaWduPSJub2FsaWduIiwgcGVhY2VmdWwgPSAwIH0pCi0tIERvb3JzCmRlcy5kb29yKCJsb2NrZWQiLDEwLDA2KQpkZXMuZG9vcigibG9ja2VkIiwxMCwwNykKZGVzLmRvb3IoImxvY2tlZCIsMjAsMDIpCmRlcy5kb29yKCJsb2NrZWQiLDIwLDExKQpkZXMuZG9vcigibG9ja2VkIiwzMCwwNikKZGVzLmRvb3IoImxvY2tlZCIsMzAsMDcpCi0tIFN0YWlycwotLSBOb3RlOiAgVGhlIHVwIHN0YWlycyBhcmUgKmludGVudGlvbmFsbHkqIG9mZiBvZiB0aGUgbWFwLgpkZXMuc3RhaXIoInVwIiwgNDMsMDUpCmRlcy5zdGFpcigiZG93biIsIDIwLDA2KQotLSBOb24gZGlnZ2FibGUgd2FsbHMKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgxMCwwMiwzMCwxMykpCi0tIE9iamVjdHMgKGluc2lkZSB0aGUgYW50ZWNoYW1iZXJzKS4KZGVzLm9iamVjdCh7IGNvb3JkID0geyAxNCwgMDMgfSB9KQpkZXMub2JqZWN0KHsgY29vcmQgPSB7IDE1LCAwMyB9IH0pCmRlcy5vYmplY3QoeyBjb29yZCA9IHsgMTYsIDAzIH0gfSkKZGVzLm9iamVjdCh7IGNvb3JkID0geyAxNCwgMTAgfSB9KQpkZXMub2JqZWN0KHsgY29vcmQgPSB7IDE1LCAxMCB9IH0pCmRlcy5vYmplY3QoeyBjb29yZCA9IHsgMTYsIDEwIH0gfSkKZGVzLm9iamVjdCh7IGNvb3JkID0geyAxNywgMTAgfSB9KQpkZXMub2JqZWN0KHsgY29vcmQgPSB7IDI0LCAwMyB9IH0pCmRlcy5vYmplY3QoeyBjb29yZCA9IHsgMjUsIDAzIH0gfSkKZGVzLm9iamVjdCh7IGNvb3JkID0geyAyNiwgMDMgfSB9KQpkZXMub2JqZWN0KHsgY29vcmQgPSB7IDI3LCAwMyB9IH0pCmRlcy5vYmplY3QoeyBjb29yZCA9IHsgMjQsIDEwIH0gfSkKZGVzLm9iamVjdCh7IGNvb3JkID0geyAyNSwgMTAgfSB9KQpkZXMub2JqZWN0KHsgY29vcmQgPSB7IDI2LCAxMCB9IH0pCmRlcy5vYmplY3QoeyBjb29yZCA9IHsgMjcsIDEwIH0gfSkKLS0gUmFuZG9tIHRyYXBzCmRlcy50cmFwKHsgY29vcmQgPSB7IDE1LDA0IH0gfSkKZGVzLnRyYXAoeyBjb29yZCA9IHsgMjUsMDQgfSB9KQpkZXMudHJhcCh7IGNvb3JkID0geyAxNSwwOSB9IH0pCmRlcy50cmFwKHsgY29vcmQgPSB7IDI1LDA5IH0gfSkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tIE5vIHJhbmRvbSBtb25zdGVycyAtIHRoZSBtb3JndWUgZ2VuZXJhdGlvbiB3aWxsIHB1dCB0aGVtIGluLgotLSBOZXRIYWNrIDMuNwlSYW5nZXIuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODMgMjAxNS8wNS8yNSAwMDoxMzowMyAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjkgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAiaGFyZGZsb29yIikKLS0xMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwCmRlcy5tYXAoW1sKICAgICAgICAgICAgICAuLi4uLi4uICAuLi4uLi4uLi4gIC4uLi4uLi4gICAgICAgICAgICAgIAogICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAgLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgCiAgLi4uLiAgICAgICAgLi4uLi4uLiAgICAgICAgICAgICAuLi4uLi4uICAgICAgICAuLi4uICAKLi4uICAgIC4uLi4uICAgICAuICAgICAgIC4uLi4uICAgICAgIC4gICAgIC4uLi4uICAgIC4uLgouICAgLi4uLi4uLi4uLiAuLi4uLiAgLi4uLi4uLi4uLi4gIC4uLi4uIC4uLi4uLi4uLi4gICAuCi4gIC4uICAuLi4uLiAuLi4uLi4uLi4uICAuLi4uLiAgLi4uLi4uLi4uLiAuLi4uLiAgLi4gIC4KLiAgLiAgICAgLiAgICAgLi4uLi4gICAgICAgLiAgICAgICAuLi4uLiAgICAgLiAgICAgLiAgLgouICAuICAgLi4uLi4gICAgICAgICAuLi4uLi4uLi4uLi4uICAgICAgICAgLi4uLi4gICAuICAuCi4gIC4gIC4uLi4uLi4uLi4uLi4uLi4gIC4uLi4uLi4gIC4uLi4uLi4uLi4uLi4uLi4gIC4gIC4KLiAgLiAgIC4uLi4uICAgICAgICAgICAgLi4uLi4uLiAgICAgICAgICAgIC4uLi4uICAgLiAgLgouICAuICAgICAuICAgIC4uLi4uLiAgICAgICAgICAgICAgIC4uLi4uLiAgICAuICAgICAuICAuCi4gIC4gICAgIC4uLi4uLi4uLi4uICAgLi4uLi4uLi4uICAgLi4uLi4uLi4uLi4gICAgIC4gIC4KLiAgLiAgICAgICAgICAuLi4uLi4uLi4uICAgICAgIC4uLi4uLi4uLi4gICAgICAgICAgLiAgLgouICAuLiAgLi4uLi4gICAgIC4gICAgICAgLi4uLi4gICAgICAgLiAgICAgLi4uLi4gIC4uICAuCi4gICAuLi4uLi4uLi4uIC4uLi4uICAuLi4uLi4uLi4uLiAgLi4uLi4gLi4uLi4uLi4uLiAgIC4KLiAgICAgIC4uLi4uIC4uLi4uLi4uLi4gIC4uLi4uICAuLi4uLi4uLi4uIC4uLi4uICAgICAgLgouICAgICAgICAuICAgICAuLi4uLiAgICAgICAuICAgICAgIC4uLi4uICAgICAuICAgICAgICAuCi4uLiAgIC4uLi4uLi4gICAgICAgICAgIC4uLi4uLi4gICAgICAgICAgIC4uLi4uLi4gICAuLi4KICAuLi4uLi4uLi4uLi4uLiAgICAgLi4uLi4uLi4uLi4uLiAgICAgLi4uLi4uLi4uLi4uLi4gIAogICAgICAuLi4uLi4uICAuLi4uLi4uICAuLi4uLi4uICAuLi4uLi4uICAuLi4uLi4uICAgICAgCl1dKTsKLS0gRHVuZ2VvbiBEZXNjcmlwdGlvbgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDU0LDE5KSwgImxpdCIpCi0tIFN0YWlycwpkZXMuc3RhaXIoInVwIiwgMjUsMDUpCmRlcy5zdGFpcigiZG93biIsIDI3LDE4KQotLSBOb24gZGlnZ2FibGUgd2FsbHMKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgwMCwwMCw1NCwxOSkpCi0tIE9iamVjdHMKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQotLSBSYW5kb20gdHJhcHMKZGVzLnRyYXAoInNwaWtlZCBwaXQiKQpkZXMudHJhcCgic3Bpa2VkIHBpdCIpCmRlcy50cmFwKCJ0ZWxlcG9ydCIpCmRlcy50cmFwKCJ0ZWxlcG9ydCIpCmRlcy50cmFwKCJhcnJvdyIpCmRlcy50cmFwKCJhcnJvdyIpCi0tIFJhbmRvbSBtb25zdGVycy4KZGVzLm1vbnN0ZXIoeyBpZCA9ICJ3dW1wdXMiLCB4PTI3LCB5PTE4LCBwZWFjZWZ1bD0wLCBhc2xlZXA9MSB9KQpkZXMubW9uc3Rlcih7IGlkID0gImdpYW50IGJhdCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJnaWFudCBiYXQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZ2lhbnQgYmF0IiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImdpYW50IGJhdCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJmb3Jlc3QgY2VudGF1ciIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJmb3Jlc3QgY2VudGF1ciIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJmb3Jlc3QgY2VudGF1ciIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJmb3Jlc3QgY2VudGF1ciIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJtb3VudGFpbiBjZW50YXVyIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm1vdW50YWluIGNlbnRhdXIiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibW91bnRhaW4gY2VudGF1ciIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJtb3VudGFpbiBjZW50YXVyIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm1vdW50YWluIGNlbnRhdXIiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibW91bnRhaW4gY2VudGF1ciIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJtb3VudGFpbiBjZW50YXVyIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm1vdW50YWluIGNlbnRhdXIiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic2NvcnBpb24iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic2NvcnBpb24iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic2NvcnBpb24iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic2NvcnBpb24iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAicyIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJzIiwgcGVhY2VmdWw9MCB9KQoKLS0gTmV0SGFjayAzLjcJUm9ndWUuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjExICQKLS0JQ29weXJpZ2h0IChjKSAxOTkyIGJ5IERlYW4gTHVpY2sKLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIik7CgotLSAgICAgICAgIDEgICAgICAgICAyICAgICAgICAgMyAgICAgICAgIDQgICAgICAgICA1ICAgICAgICAgNiAgICAgICAgIDcKLS0xMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDUKZGVzLm1hcChbWwogICAgICAgICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgIC0tLS0tLS0tCiAgICAgICAgICAgLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi0gICAgLS0uLi4uLnwKICAgICAgICAgLS0tLi4uLS0tLS0tLS0uLi4uLi4uLi0tLS0tLS0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi0tLSAgICAgLS0tLi4ufAogICAgICAgLS0tLi4uLi4tICAgICAgLS0tLi4uLi4uLSAgICAgLS0tLi4uLi4uLi4uLi4uLi4uLi4uLS0tLSAgICAgICAgIC0tLi0tCiAgICAgLS0tLi4uLi4tLS0tICAgICAgIC0tLS0tLS0tICAgICAgIC0tLi4uLi4uLi4uLi4uLi4uLi4uLS0gICAgICAgICAtLS4ufCAKICAgLS0tLi4uLS0tLS0gICAgICAgICAgICAgICAgICAgICAgIC0tLS0uLS0tLS4uLi4uLS0tLS4uLi4uLS0tICAgICAgLS0uLnx8IAotLS0tLi4tLS0tICAgICAgICAgICAgICAgICAgICAgICAtLS0tLS4uLS0tICB8Li4uLS0tICB8Li4uLi4uLi0tLSAgIC0tLi4ufCAgCnwuLi4tLS0gICAgICAgICAgICAgICAgICAgICAgIC0tLS0uLi4uLS0tICAgIHwuLS0tICAgIHwuLi4uLi4uLi4tLSAtLS4uLnx8ICAKfC4uLi0gICAgICAgICAgICAgICAgICAgICAgLS0tLS4uLi4uLS0tICAgICAtLS0tICAgICAgfC4uLi4uLi4uLi4tLS0uLi4ufCAgIAp8Li4uLS0tLSAgICAgICAgICAgICAgICAtLS0tLi4uLi4uLS0tICAgICAgIHwgICAgICAgICB8Li4ufC4uLi4uLi4tLi4uLnx8ICAgCnwuLi4uLi4tLS0tLSAgICAgICAgICAtLS0uLi4uLi4uLi4tICAgICAgICAgfCAgICAgLS0tLS0uLi58Li4uLi4uLi4uLi4ufCAgICAKfC4uLi4uLi4uLi4tLS0tLSAgIC0tLS0uLi4uLi4uLi4uLi0tLSAgICAgICAtLS0tLS0tLi4uLi4ufHwuLi4uLi4uLi4uLnx8ICAgIAp8Li4uLi4uLi4uLi4uLi4tLS0tLS4uLi4uLi4uLi4uLi4uLi4tLS0gICAgIHwuLi4uLi4uLi4uLi58fHwuLi4uLi4uLi4ufCAgICAgCnwtLS0tLS0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tICAgfC4uLi4uLi4uLi4ufHwgfC4uLi4uLi4uLnx8ICAgICAKfC4uLi4ufC4uLi4uLi4uLi4uLi4uLS0tLS0tLi4uLi4uLi4uLi4uLi0tLS0tLi4uLi4uLi4uLnx8ICB8fC4uLi4uLi4ufCAgICAgIAp8Li4uLi58Li4uLi4uLi4uLi4uLi0tICAgIC0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58fCAgICB8Li4uLi4uLnx8ICAgICAgCnwuLi4uLnwuLi4uLi4uLi4uLi4uLSAgICAgICAtLS0uLi4uLi4uLi4uLi4uLi4uLi4uLi4tLXwgICAgIHx8Li4uLi4ufCAgICAgICAKfC1TLS0tLS0tLS0tLS4uLi4uLi4tLS0tICAgICAgLS0uLi4uLi4uLi4uLi4uLi4uLi0tLS0gICAgICAgIHwuLi4uLnx8ICAgICAgIAp8Li4uLi4uLi4uLi58Li4uLi4uLi4uLi0tLS0tLS0tLi4uLi4uLi4uLi4uLi4tLS0tLSAgICAgICAgICAgfHwuLi4ufCAgICAgICAgCnwuLi4uLi4uLi4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tLS0gICAgICAgICAgICAgICAgfC4uLi58ICAgICAgICAKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAgICAgICAgICAgICAgICAgICAtLS0tLS0gICAgICAgIApdXSk7Ci0tIER1bmdlb24gRGVzY3JpcHRpb24KZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMCwwMCw3NSwyMCksICJsaXQiKQotLSBEb29ycwotLURPT1I6bG9ja2VkfGNsb3NlZHxvcGVuLCh4eCx5eSkKLS0gU3RhaXJzCmRlcy5zdGFpcigidXAiKQpkZXMuc3RhaXIoImRvd24iKQotLSBOb24gZGlnZ2FibGUgd2FsbHMKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgwMCwwMCw3NSwyMCkpCi0tIE9iamVjdHMKZGVzLm9iamVjdCh7IGlkID0gInRlbGVwb3J0YXRpb24iLCB4PTExLCB5PTE4LCBidWM9ImN1cnNlZCIsIHNwZT0wIH0pCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKLS0gUmFuZG9tIHRyYXBzCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tIFJhbmRvbSBtb25zdGVycy4KZGVzLm1vbnN0ZXIoeyBpZCA9ICJsZXByZWNoYXVuIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImxlcHJlY2hhdW4iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibGVwcmVjaGF1biIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJsZXByZWNoYXVuIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImxlcHJlY2hhdW4iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibGVwcmVjaGF1biIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJsZXByZWNoYXVuIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImxlcHJlY2hhdW4iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibGVwcmVjaGF1biIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJsZXByZWNoYXVuIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImxlcHJlY2hhdW4iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibGVwcmVjaGF1biIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJsZXByZWNoYXVuIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImxlcHJlY2hhdW4iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibGVwcmVjaGF1biIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJsZXByZWNoYXVuIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImxlcHJlY2hhdW4iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAibCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJndWFyZGlhbiBuYWdhIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImd1YXJkaWFuIG5hZ2EiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZ3VhcmRpYW4gbmFnYSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJndWFyZGlhbiBuYWdhIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImd1YXJkaWFuIG5hZ2EiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZ3VhcmRpYW4gbmFnYSIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJndWFyZGlhbiBuYWdhIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIk4iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiTiIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJOIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImNoYW1lbGVvbiIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJjaGFtZWxlb24iLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiY2hhbWVsZW9uIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImNoYW1lbGVvbiIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJjaGFtZWxlb24iLCBwZWFjZWZ1bD0wIH0pCi0tIE5ldEhhY2sgMy43CVNhbXVyYWkuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODMgMjAxNS8wNS8yNSAwMDoxMzowMyAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjExICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxLTkyIGJ5IE0uIFN0ZXBoZW5zb24sIFAuIFdpbm5lcgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAiaGFyZGZsb29yIik7CgpkZXMubWFwKFtbCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi0tLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0tLS4uLi4uLi4uCi4uLi4uLi4ufC4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwuLi58Li4uLi4uLi4KLi4uLi4uLi58Li4uLS0tLi59Li4tLSstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rLS0uLn0uLi0tLS4uLnwuLi4uLi4uLgouLi4uLi4uLnwtfC4uLnwuLi4uLnwuLi58Li4uLnwuLi4ufC4uLi58Li4uLnwuLi4ufC58Li4ufC4uLi4ufC4uLnwtfC4uLi4uLi4uCi4uLi4uLi4uLi58Li4uLS0tLS0tLS4uLnwuLi4ufC4uLi58Li4uLnwuLi4ufC4uLi5TLnwuLi4tLS0tLS0tLi4ufC4uLi4uLi4uLi4KLi4uLi4uLi4uLnwtfC4uLi4uLi4uLi0tLS0tLSstLS0tKy0rLS0tLS0tLSstKy0tLS0tLS0tLi4uLi4uLi4ufC18Li4uLi4uLi4uLgouLi4uLi4uLi4uLi58Li4tLS0tLS0tLS58fS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLn18Li0tLS0tLS0tLi58Li4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLnwuLisuLi4uLi4uLisuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLisuLi4uLi4uLisuLnwuLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4ufC4uKy4uLi4uLi4uKy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uKy4uLi4uLi4uKy4ufC4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi58Li4tLS0tLS0tLS58fS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLn18Li0tLS0tLS0tLi58Li4uLi4uLi4uLi4uCi4uLi4uLi4uLi58LXwuLi4uLi4uLi4tLS0tLS0tLSstKy0tLS0tLS0rLSstLS0tKy0tLS0tLS4uLi4uLi4uLnwtfC4uLi4uLi4uLi4KLi4uLi4uLi4uLnwuLi4tLS0tLS0tLi4ufC5TLi4uLnwuLi4ufC4uLi58Li4uLnwuLi4ufC4uLi0tLS0tLS0uLi58Li4uLi4uLi4uLgouLi4uLi4uLnwtfC4uLnwuLi4uLnwuLi58LnwuLi4ufC4uLi58Li4uLnwuLi4ufC4uLi58Li4ufC4uLi4ufC4uLnwtfC4uLi4uLi4uCi4uLi4uLi4ufC4uLi0tLS4ufS4uLS0rLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKy0tLi59Li4tLS0uLi58Li4uLi4uLi4KLi4uLi4uLi58Li4ufC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC4uLnwuLi4uLi4uLgouLi4uLi4uLi0tLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0tLS4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgpdXSk7Ci0tIER1bmdlb24gRGVzY3JpcHRpb24KZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMCwwMCw3NSwxOSksICJsaXQiKQotLSBEb29ycwpkZXMuZG9vcigibG9ja2VkIiwyMiwwNCkKZGVzLmRvb3IoImxvY2tlZCIsMjIsMTUpCmRlcy5kb29yKCJsb2NrZWQiLDUzLDA0KQpkZXMuZG9vcigibG9ja2VkIiw1MywxNSkKZGVzLmRvb3IoImxvY2tlZCIsNDksMDYpCmRlcy5kb29yKCJsb2NrZWQiLDI2LDEzKQpkZXMuZG9vcigibG9ja2VkIiwyOCwwNykKZGVzLmRvb3IoImxvY2tlZCIsMzAsMTIpCmRlcy5kb29yKCJsb2NrZWQiLDMzLDA3KQpkZXMuZG9vcigibG9ja2VkIiwzMiwxMikKZGVzLmRvb3IoImxvY2tlZCIsMzUsMDcpCmRlcy5kb29yKCJsb2NrZWQiLDQwLDEyKQpkZXMuZG9vcigibG9ja2VkIiw0MywwNykKZGVzLmRvb3IoImxvY2tlZCIsNDIsMTIpCmRlcy5kb29yKCJsb2NrZWQiLDQ1LDA3KQpkZXMuZG9vcigibG9ja2VkIiw0NywxMikKZGVzLmRvb3IoImNsb3NlZCIsMTUsMDkpCmRlcy5kb29yKCJjbG9zZWQiLDE1LDEwKQpkZXMuZG9vcigiY2xvc2VkIiwyNCwwOSkKZGVzLmRvb3IoImNsb3NlZCIsMjQsMTApCmRlcy5kb29yKCJjbG9zZWQiLDUxLDA5KQpkZXMuZG9vcigiY2xvc2VkIiw1MSwxMCkKZGVzLmRvb3IoImNsb3NlZCIsNjAsMDkpCmRlcy5kb29yKCJjbG9zZWQiLDYwLDEwKQotLSBTdGFpcnMKZGVzLnN0YWlyKCJ1cCIsIDEwLDEwKQpkZXMuc3RhaXIoImRvd24iLCAyNSwxNCkKLS0gTm9uIGRpZ2dhYmxlIHdhbGxzCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMTkpKQotLSBPYmplY3RzCmRlcy5vYmplY3QoIioiLCAyNSwgMDUpCmRlcy5vYmplY3QoIioiLCAyNiwgMDUpCmRlcy5vYmplY3QoIioiLCAyNywgMDUpCmRlcy5vYmplY3QoIioiLCAyOCwgMDUpCmRlcy5vYmplY3QoIioiLCAyNSwgMDYpCmRlcy5vYmplY3QoIioiLCAyNiwgMDYpCmRlcy5vYmplY3QoIioiLCAyNywgMDYpCmRlcy5vYmplY3QoIioiLCAyOCwgMDYpCi0tCmRlcy5vYmplY3QoIlsiLCA0MCwgMDUpCmRlcy5vYmplY3QoIlsiLCA0MSwgMDUpCmRlcy5vYmplY3QoIlsiLCA0MiwgMDUpCmRlcy5vYmplY3QoIlsiLCA0MywgMDUpCmRlcy5vYmplY3QoIlsiLCA0MCwgMDYpCmRlcy5vYmplY3QoIlsiLCA0MSwgMDYpCmRlcy5vYmplY3QoIlsiLCA0MiwgMDYpCmRlcy5vYmplY3QoIlsiLCA0MywgMDYpCi0tCmRlcy5vYmplY3QoIikiLCAyNywgMTMpCmRlcy5vYmplY3QoIikiLCAyOCwgMTMpCmRlcy5vYmplY3QoIikiLCAyOSwgMTMpCmRlcy5vYmplY3QoIikiLCAzMCwgMTMpCmRlcy5vYmplY3QoIikiLCAyNywgMTQpCmRlcy5vYmplY3QoIikiLCAyOCwgMTQpCmRlcy5vYmplY3QoIikiLCAyOSwgMTQpCmRlcy5vYmplY3QoIikiLCAzMCwgMTQpCi0tCmRlcy5vYmplY3QoIigiLCAzNywgMTMpCmRlcy5vYmplY3QoIigiLCAzOCwgMTMpCmRlcy5vYmplY3QoIigiLCAzOSwgMTMpCmRlcy5vYmplY3QoIigiLCA0MCwgMTMpCmRlcy5vYmplY3QoIigiLCAzNywgMTQpCmRlcy5vYmplY3QoIigiLCAzOCwgMTQpCmRlcy5vYmplY3QoIigiLCAzOSwgMTQpCmRlcy5vYmplY3QoIigiLCA0MCwgMTQpCi0tIFJhbmRvbSB0cmFwcwpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQotLSBSYW5kb20gbW9uc3RlcnMuCmRlcy5tb25zdGVyKHsgaWQgPSAibmluamEiLCB4PTE1LCB5PTA1LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibmluamEiLCB4PTE2LCB5PTA1LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKCJ3b2xmIiwgMTcsIDA1KQpkZXMubW9uc3Rlcigid29sZiIsIDE4LCAwNSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJuaW5qYSIsIHg9MTksIHk9MDUsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoIndvbGYiLCAxNSwgMTQpCmRlcy5tb25zdGVyKCJ3b2xmIiwgMTYsIDE0KQpkZXMubW9uc3Rlcih7IGlkID0gIm5pbmphIiwgeD0xNywgeT0xNCwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm5pbmphIiwgeD0xOCwgeT0xNCwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcigid29sZiIsIDU2LCAwNSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJuaW5qYSIsIHg9NTcsIHk9MDUsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoIndvbGYiLCA1OCwgMDUpCmRlcy5tb25zdGVyKCJ3b2xmIiwgNTksIDA1KQpkZXMubW9uc3Rlcih7IGlkID0gIm5pbmphIiwgeD01NiwgeT0xNCwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcigid29sZiIsIDU3LCAxNCkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJuaW5qYSIsIHg9NTgsIHk9MTQsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoImQiLCA1OSwgMTQpCmRlcy5tb25zdGVyKCJ3b2xmIiwgNjAsIDE0KQpkZXMubW9uc3Rlcigic3RhbGtlciIpCmRlcy5tb25zdGVyKCJzdGFsa2VyIikKZGVzLm1vbnN0ZXIoInN0YWxrZXIiKQpkZXMubW9uc3Rlcigic3RhbGtlciIpCmRlcy5tb25zdGVyKCJzdGFsa2VyIikKZGVzLm1vbnN0ZXIoInN0YWxrZXIiKQpkZXMubW9uc3Rlcigic3RhbGtlciIpCmRlcy5tb25zdGVyKCJzdGFsa2VyIikKZGVzLm1vbnN0ZXIoInN0YWxrZXIiKQotLQkiZ3VhcmRzIiBmb3IgdGhlIGNlbnRyYWwgY291cnR5YXJkLgpkZXMubW9uc3Rlcih7IGlkID0gInNhbXVyYWkiLCB4PTMwLCB5PTA1LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic2FtdXJhaSIsIHg9MzEsIHk9MDUsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJzYW11cmFpIiwgeD0zMiwgeT0wNSwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInNhbXVyYWkiLCB4PTMyLCB5PTE0LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic2FtdXJhaSIsIHg9MzMsIHk9MTQsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJzYW11cmFpIiwgeD0zNCwgeT0xNCwgcGVhY2VmdWw9MCB9KQotLSBOZXRIYWNrIDMuNwlUb3VyaXN0LmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzg0IDIwMTUvMDUvMjUgMDA6MTM6MDQgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS44ICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxLDkyIGJ5IE0uIFN0ZXBoZW5zb24sIFAuIFdpbm5lcgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAiaGFyZGZsb29yIikKZGVzLm1hcChbWwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCnwuLi4ufC4uLi4uLnwuLi4uLi4uLi4ufC4uLi4uLnwuLi4uLi58Li4ufC4uLi58Li4uLi58Li4uLi4ufC4uLi4uLi4uLi4uLi4uLnwKfC4uLi58Li4uLi4ufC58LS0tLS0tfC58Li4uLi4ufC4uLi4uLnwufC58Li4uLnwuLn0uLnwuLi4uLi58LnwtLS0tLS0tLS0tfC4ufAp8Li4uLnwtLSstLS0tLnwuLi4uLi58LnwtUy0tLSt8Ky0tLS0tfC58LlMuLi4ufC4uLi4ufC0tLSstLXwufC4uLi4uLi4uLi4rLi58CnwuLi4ufC4uLi4uLi4ufC4uLi4uLnwufC4uLnwuLi4uLi4uLi58LnwtLS0tLS18Li4uLi4uLi4uLi4uLi58Li4uLi4uLi4uLnwtK3wKfC4uLi4rLi4ufX0uLi4rLi4uLi4ufC58Li4ufC58LS0tLS18LnwuLi4uLi4uLi4uLi4uLnwtLSstLS0tLS0tLS0tLS0tLS0tfC4ufAp8LS0tLXwuLi4uLi4uLnwtLS0tLS18LnwtLS18LnwuLi4uLnwuLi4uLi58LS0tLS0rLXwufC4uLi4uLi58Li4uLi4uLi4uLi58LS18CnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC4uLi4ufC58LS0rLXwuLi4uLi4ufC58Li4uLi4uLnwuLi4uLi4uLi4uLnwuLnwKfC0tLS18Li4uLi58LS0tLS0tLS0tLS0tLXwuLi58LS0rLS18LnwuLi4ufC4uLi4uLi58LnwtLS0tLS0tLS0tLSstLS0tLS0tfC4ufAp8Li4uLisuLi4uLisuLi4uLi4uLi5TLi4ufC4uLi4uLi4uLi4ufC4uLi58LS0tLS0tLXwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58CnwuLi4ufC4uLi4ufC4uLi4uLi4uLnwuLi58LnwtLS0tLS0tLS18Li4uLnwuLi4uLi4uLi58LS0tLS0tLXwufC0tLS0tLS0tLS18LnwKfC4uLi58Li4uLi58LS0tLS0tLS0tfC0tLXwufC4uLi4uLnwuLisuLi4ufC0tLS0tLS18LnwuLi4uLi4ufC4rLi4uLi4uUy5cLnwufAp8Li4uLnwuLi4uLisuLi4uLi4uLi5TLi4ufC58Li4uLi4ufC4ufC4uLi58Li4uLi4uLnwufC4uLi4uLi58LnwuLi4uLi58Li4ufC58CnwtLS0tLS0tfC4ufC4uLi4uLi4uLnwtLS18LnwrLS0tLS0tLS0tLS0tLS0tLS0tLSstfC58Li4uLi4uLisufC0tLS0tLS0tLS18LnwKfC4uLi4uLi4rLi58LS0tLS0tLS0tfC4uLi4uLi4uLnwuLi4uLi4uLi58Li4uLi4uLi4uLnwuLi4uLi4ufC58Li4uLi4uLi4uLnwufAp8Li4uLi4uLnwuLi4uLi4uLi4uLi4uLnwtLSstLXwufC4uLi4uLi4uLnwufC0tLS0rLS0tLS0tLS0tLS18LnwuLi4uLi4uLi4ufC58CnwtLS0tLS0tLS0rLXwtLSstLS0tLXwtfC4uLi4ufC58Li4uLi4uLi4ufC58Li4uLi4uLi58LnwuLi4uLisufC4uLi4uLi4uLi4rLnwKfC4uLi4uLi4uLi4ufC4uLi4uLi4ufC5TLi4uLi58LnwtLS0tKy0tLS18LnwtLS0tLS0tLXwufC4uLi4ufC58LS0tLS0tLS0tLXwufAp8Li4uLi4uLi4uLi58Li4uLi4uLi58LnwuLi4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58Li4uLi58Li4uLi4uLi4uLi4uLi58Ci0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KXV0pOwotLSBEdW5nZW9uIERlc2NyaXB0aW9uCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMTkpLCAibGl0IikKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgwMCwwMCw3NSwxOSkpCi0tCmRlcy5yZWdpb24oeyByZWdpb249ezAxLDAxLCAwNCwwNX0sIGxpdD0wLCB0eXBlPSJtb3JndWUiLCBmaWxsZWQ9MSB9KQpkZXMucmVnaW9uKHsgcmVnaW9uPXsxNSwwMywgMjAsMDV9LCBsaXQ9MSwgdHlwZT0ic2hvcCIsIGZpbGxlZD0xIH0pCmRlcy5yZWdpb24oeyByZWdpb249ezYyLDAzLCA3MSwwNH0sIGxpdD0xLCB0eXBlPSJzaG9wIiwgZmlsbGVkPTEgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MDEsMTcsIDExLDE4fSwgbGl0PTEsIHR5cGU9ImJhcnJhY2tzIiwgZmlsbGVkPTEgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MTIsMDksIDIwLDEwfSwgbGl0PTEsIHR5cGU9ImJhcnJhY2tzIiwgZmlsbGVkPTEgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17NTMsMTEsIDU5LDE0fSwgbGl0PTEsIHR5cGU9InpvbyIsIGZpbGxlZD0xIH0pCmRlcy5yZWdpb24oeyByZWdpb249ezYzLDE0LCA3MiwxNn0sIGxpdD0xLCB0eXBlPSJiYXJyYWNrcyIsIGZpbGxlZD0xIH0pCmRlcy5yZWdpb24oeyByZWdpb249ezMyLDE0LCA0MCwxNn0sIGxpdD0xLCB0eXBlPSJ0ZW1wbGUiLCBmaWxsZWQ9MSB9KQotLQpkZXMucmVnaW9uKHsgcmVnaW9uID0gezA2LDAxLDExLDAyfSwgdHlwZSA9ICJvcmRpbmFyeSIgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbiA9IHsyNCwwMSwyOSwwMn0sIHR5cGUgPSAib3JkaW5hcnkiIH0pCmRlcy5yZWdpb24oeyByZWdpb24gPSB7MzEsMDEsMzYsMDJ9LCB0eXBlID0gIm9yZGluYXJ5IiB9KQpkZXMucmVnaW9uKHsgcmVnaW9uID0gezQyLDAxLDQ1LDAzfSwgdHlwZSA9ICJvcmRpbmFyeSIgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbiA9IHs1MywwMSw1OCwwMn0sIHR5cGUgPSAib3JkaW5hcnkiIH0pCmRlcy5yZWdpb24oeyByZWdpb24gPSB7MjQsMDQsMjYsMDV9LCB0eXBlID0gIm9yZGluYXJ5IiB9KQpkZXMucmVnaW9uKHsgcmVnaW9uID0gezMwLDA2LDM0LDA3fSwgdHlwZSA9ICJvcmRpbmFyeSIgfSkKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg3MywwNSw3NCwwNSksICJ1bmxpdCIpCmRlcy5yZWdpb24oeyByZWdpb24gPSB7MDEsMDksMDQsMTJ9LCB0eXBlID0gIm9yZGluYXJ5IiB9KQpkZXMucmVnaW9uKHsgcmVnaW9uID0gezAxLDE0LDA3LDE1fSwgdHlwZSA9ICJvcmRpbmFyeSIgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbiA9IHsxMiwxMiwyMCwxM30sIHR5cGUgPSAib3JkaW5hcnkiIH0pCmRlcy5yZWdpb24oeyByZWdpb24gPSB7MTMsMTcsMjAsMTh9LCB0eXBlID0gIm9yZGluYXJ5IiB9KQpkZXMucmVnaW9uKHsgcmVnaW9uID0gezIyLDA5LDI0LDEwfSwgdHlwZSA9ICJvcmRpbmFyeSIgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbiA9IHsyMiwxMiwyNCwxMn0sIHR5cGUgPSAib3JkaW5hcnkiIH0pCmRlcy5yZWdpb24oeyByZWdpb24gPSB7MjQsMTYsMjgsMTh9LCB0eXBlID0gIm9yZGluYXJ5IiB9KQpkZXMucmVnaW9uKHsgcmVnaW9uID0gezI4LDExLDMzLDEyfSwgdHlwZSA9ICJvcmRpbmFyeSIgfSkKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgzNSwxMSwzNiwxMiksICJsaXQiKQpkZXMucmVnaW9uKHsgcmVnaW9uID0gezM4LDA4LDQxLDEyfSwgdHlwZSA9ICJvcmRpbmFyeSIgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbiA9IHs0MywwNyw0OSwwOH0sIHR5cGUgPSAib3JkaW5hcnkiIH0pCmRlcy5yZWdpb24oeyByZWdpb24gPSB7NDMsMTIsNDksMTJ9LCB0eXBlID0gIm9yZGluYXJ5IiB9KQpkZXMucmVnaW9uKHsgcmVnaW9uID0gezQ0LDE2LDUxLDE2fSwgdHlwZSA9ICJvcmRpbmFyeSIgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbiA9IHs1MywwNiw1OSwwN30sIHR5cGUgPSAib3JkaW5hcnkiIH0pCmRlcy5yZWdpb24oeyByZWdpb24gPSB7NjEsMDYsNzEsMDd9LCB0eXBlID0gIm9yZGluYXJ5IiB9KQpkZXMucmVnaW9uKHsgcmVnaW9uID0gezU1LDE2LDU5LDE4fSwgdHlwZSA9ICJvcmRpbmFyeSIgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbiA9IHs2MywxMSw2OCwxMn0sIHR5cGUgPSAib3JkaW5hcnkiIH0pCmRlcy5yZWdpb24oeyByZWdpb24gPSB7NzAsMTEsNzIsMTJ9LCB0eXBlID0gIm9yZGluYXJ5IiB9KQotLSBTdGFpcnMKZGVzLnN0YWlyKCJ1cCIsIDEwLDA0KQpkZXMuc3RhaXIoImRvd24iLCA3MywwNSkKLS0gTm9uIGRpZ2dhYmxlIHdhbGxzCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMTkpKQpkZXMuZG9vcigiY2xvc2VkIiwwNSwwNSkKZGVzLmRvb3IoImNsb3NlZCIsMDUsMDkpCmRlcy5kb29yKCJjbG9zZWQiLDA4LDE0KQpkZXMuZG9vcigiY2xvc2VkIiwwOCwwMykKZGVzLmRvb3IoImNsb3NlZCIsMTEsMDkpCmRlcy5kb29yKCJjbG9zZWQiLDExLDEyKQpkZXMuZG9vcigiY2xvc2VkIiwxMCwxNikKZGVzLmRvb3IoImNsb3NlZCIsMTQsMDUpCmRlcy5kb29yKCJjbG9zZWQiLDE1LDE2KQpkZXMuZG9vcigibG9ja2VkIiwyMSwwOSkKZGVzLmRvb3IoImxvY2tlZCIsMjEsMTIpCmRlcy5kb29yKCJjbG9zZWQiLDIzLDE3KQpkZXMuZG9vcigiY2xvc2VkIiwyNSwwMykKZGVzLmRvb3IoImNsb3NlZCIsMjYsMTUpCmRlcy5kb29yKCJjbG9zZWQiLDI5LDAzKQpkZXMuZG9vcigiY2xvc2VkIiwyOCwxMykKZGVzLmRvb3IoImNsb3NlZCIsMzEsMDMpCmRlcy5kb29yKCJjbG9zZWQiLDMyLDA4KQpkZXMuZG9vcigiY2xvc2VkIiwzNywxMSkKZGVzLmRvb3IoImNsb3NlZCIsMzYsMTcpCmRlcy5kb29yKCJsb2NrZWQiLDQxLDAzKQpkZXMuZG9vcigiY2xvc2VkIiw0MCwwNykKZGVzLmRvb3IoImNsb3NlZCIsNDgsMDYpCmRlcy5kb29yKCJjbG9zZWQiLDQ4LDEzKQpkZXMuZG9vcigiY2xvc2VkIiw0OCwxNSkKZGVzLmRvb3IoImNsb3NlZCIsNTYsMDMpCmRlcy5kb29yKCJjbG9zZWQiLDU1LDA1KQpkZXMuZG9vcigiY2xvc2VkIiw3MiwwMykKZGVzLmRvb3IoImxvY2tlZCIsNzQsMDQpCmRlcy5kb29yKCJjbG9zZWQiLDY0LDA4KQpkZXMuZG9vcigiY2xvc2VkIiw2MiwxMSkKZGVzLmRvb3IoImNsb3NlZCIsNjksMTEpCmRlcy5kb29yKCJjbG9zZWQiLDYwLDEzKQpkZXMuZG9vcigiY2xvc2VkIiw2MCwxNikKZGVzLmRvb3IoImNsb3NlZCIsNzMsMTYpCgotLSBPYmplY3RzCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKLS0gVG9pbGV0IHBhcGVyCmRlcy5vYmplY3QoImJsYW5rIHBhcGVyIiwgNzEsIDEyKQpkZXMub2JqZWN0KCJibGFuayBwYXBlciIsIDcxLCAxMikKLS0gUmFuZG9tIHRyYXBzCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tIFJhbmRvbSBtb25zdGVycy4KZGVzLm1vbnN0ZXIoImdpYW50IHNwaWRlciIpCmRlcy5tb25zdGVyKCJnaWFudCBzcGlkZXIiKQpkZXMubW9uc3RlcigiZ2lhbnQgc3BpZGVyIikKZGVzLm1vbnN0ZXIoImdpYW50IHNwaWRlciIpCmRlcy5tb25zdGVyKCJnaWFudCBzcGlkZXIiKQpkZXMubW9uc3RlcigiZ2lhbnQgc3BpZGVyIikKZGVzLm1vbnN0ZXIoImdpYW50IHNwaWRlciIpCmRlcy5tb25zdGVyKCJnaWFudCBzcGlkZXIiKQpkZXMubW9uc3RlcigiZ2lhbnQgc3BpZGVyIikKZGVzLm1vbnN0ZXIoImdpYW50IHNwaWRlciIpCmRlcy5tb25zdGVyKCJnaWFudCBzcGlkZXIiKQpkZXMubW9uc3RlcigiZ2lhbnQgc3BpZGVyIikKZGVzLm1vbnN0ZXIoImdpYW50IHNwaWRlciIpCmRlcy5tb25zdGVyKCJnaWFudCBzcGlkZXIiKQpkZXMubW9uc3RlcigiZ2lhbnQgc3BpZGVyIikKZGVzLm1vbnN0ZXIoImdpYW50IHNwaWRlciIpCmRlcy5tb25zdGVyKCJzIikKZGVzLm1vbnN0ZXIoInMiKQotLSBOZXRIYWNrIDMuNwlWYWxreXJpZS5kZXMJJE5IRFQtRGF0ZTogMTU1MzgwNzE3MiAyMDE5LzAzLzI4IDIxOjA2OjEyICQgICROSERULUJyYW5jaDogTmV0SGFjay0zLjYuMi1iZXRhMDEgJDokTkhEVC1SZXZpc2lvbjogMS4xNSAkCi0tCUNvcHlyaWdodCAoYykgMTk4OSBieSBKZWFuLUNocmlzdG9waGUgQ29sbGV0Ci0tCUNvcHlyaWdodCAoYykgMTk5MS0yIGJ5IE0uIFN0ZXBoZW5zb24KLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIiwgImhhcmRmbG9vciIsICJpY2VkcG9vbHMiLCAibm9mbGlwIikKCmRlcy5sZXZlbF9pbml0KHsgc3R5bGU9Im1pbmVzIiwgZmc9Ii4iLCBiZz0iSSIsIHNtb290aGVkPXRydWUsIGpvaW5lZD1mYWxzZSwgbGl0PTEsIHdhbGxlZD1mYWxzZSB9KQoKZGVzLm1hcChbWwpQUFBQeHh4eCAgICAgICAgICAgICAgICAgICAgICB4eHh4UFBQUFB4ClBMUHh4eCAgICAgICAgICAgICAgICAgICAgICAgICAgeFBQTExMUFAKUFBQICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uICAgIFBQUExMUAp4eCAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICBQUFBQCnggIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gIHh4eHgKICAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICB4eAouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICB4CiAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAKeCAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgeAp4eCAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgIFBQCnhQUFAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uICAgICBQTFAKeFBMTFAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHh4UExMUAp4UFBQUHh4ICAgICAgICAgICAgICAgICAgICAgICAgIHh4eHhQUFBQCl1dKTsKLS0gRHVuZ2VvbiBEZXNjcmlwdGlvbgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDM5LDEyKSwgImxpdCIpCi0tIFN0YWlycwpkZXMuc3RhaXIoInVwIiwgNDgsMTQpCmRlcy5zdGFpcigiZG93biIsIDIwLDA2KQotLSBOb24gZGlnZ2FibGUgd2FsbHMKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgwMCwwMCwzOSwxMikpCi0tIE9iamVjdHMKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKLS0gUmFuZG9tIHRyYXBzCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tIFJhbmRvbSBtb25zdGVycy4KZGVzLm1vbnN0ZXIoImZpcmUgYW50IikKZGVzLm1vbnN0ZXIoImZpcmUgYW50IikKZGVzLm1vbnN0ZXIoImZpcmUgYW50IikKZGVzLm1vbnN0ZXIoImZpcmUgYW50IikKZGVzLm1vbnN0ZXIoImZpcmUgYW50IikKZGVzLm1vbnN0ZXIoImZpcmUgYW50IikKZGVzLm1vbnN0ZXIoImZpcmUgYW50IikKZGVzLm1vbnN0ZXIoImZpcmUgYW50IikKZGVzLm1vbnN0ZXIoImZpcmUgYW50IikKZGVzLm1vbnN0ZXIoImZpcmUgYW50IikKZGVzLm1vbnN0ZXIoImZpcmUgYW50IikKZGVzLm1vbnN0ZXIoImZpcmUgYW50IikKZGVzLm1vbnN0ZXIoImZpcmUgYW50IikKZGVzLm1vbnN0ZXIoImZpcmUgYW50IikKZGVzLm1vbnN0ZXIoImZpcmUgYW50IikKZGVzLm1vbnN0ZXIoImZpcmUgYW50IikKZGVzLm1vbnN0ZXIoImZpcmUgYW50IikKZGVzLm1vbnN0ZXIoImEiKQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkgiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJmaXJlIGdpYW50IiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZmlyZSBnaWFudCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZpcmUgZ2lhbnQiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJmaXJlIGdpYW50IiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAiZmlyZSBnaWFudCIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZpcmUgZ2lhbnQiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJmaXJlIGdpYW50IiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiSCIsIHBlYWNlZnVsID0gMCB9KQoKLS0gTmV0SGFjayAzLjcJV2l6YXJkLmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzgzIDIwMTUvMDUvMjUgMDA6MTM6MDMgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS4xMSAkCi0tCUNvcHlyaWdodCAoYykgMTk5MiBieSBEYXZpZCBDb2hycwotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAiaGFyZGZsb29yIikKCmRlcy5tYXAoW1sKLi4uLi4uLi4uLi4uLiAgICAgICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLiAgICAgICAuLi4uLi4uLi4uLi4ufX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX0uLi4uLi4uCi4uLi4uLi4uLi4uLi4uICAgICAgLi4uLi4uLi4uLi4uLi59Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufS4uLi4uLi4KLi4uLi4uLi4uLi4uLi4gICAgICAuLi4uLi4uLi4uLi4uLn0uLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS59Li4uLi4uLgouLi4uLi4uLi4uLi4uLi4gICAgIC4uLi4uLi4uLkMuLi4ufS58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58Ln0uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLiAgICAuLi4uLi4uLi4uQy4uLi59LnwuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLnwufS4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uICAgIC4uLi4uLi4uLkNDQy4uLn0ufC58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwufC59Li4uLi4uLgouLi4uLi4uLi4uLi4uLi4uICAgLi4uLkMuLi4uQ0NDLi4ufS58LnwuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0ufC58Ln0uLi4uLi4uCi4uLi4uLi5DLi5DLi4uLi4gIC4uLi4uQy4uLi5DQ0MuLi59LnwufC58Li4uLi4uKy4uLi4uLi4rLi4uLi4ufC58LnwufS4uLi4uLi4KLi4uLi4uLi4uLi4uLkMuLkNDLi4uLi5DLi4uLkNDQy4uLn0ufC58LnwuLi4uLi58LS0tLS0tLXwuLi4uLi58LnwufC59Li4uLi4uLgouLi4uLi4uLi4uLi4uLi4uICAgLi4uLkMuLi4uQ0NDLi4ufS58LnwufC4uLi4uLnwuLi4uLi4ufC4uLi4uLnwufC58Ln0uLi4uLi4uCi4uLi4uLkMuLkMuLi4uLiAgICAuLi4uQy4uLi5DQ0MuLi59LnwufC58Li4uLi4ufC0tLS0tLS18Li4uLi4ufC58LnwufS4uLi4uLi4KLi4uLi4uLi4uLi4uQy4uICAgICAuLi5DLi4uLkNDQy4uLn0ufC58LnwuLi4uLi4rLi4uLi4uLisuLi4uLi58LnwufC59Li4uLi4uLgouLi4uLi4uLkMuLi4uLi4gICAgLi4uLkMuLi4uQ0NDLi4ufS58LnwuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0ufC58Ln0uLi4uLi4uCi4uLi5DLi4uLi4uQy4uLiAgICAgLi4uLi4uLi5DQ0MuLi59LnwufC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58LnwufS4uLi4uLi4KLi4uLi4uQy4uQy4uLi4gICAgICAuLi4uLi4uLi5DLi4uLn0ufC4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0ufC59Li4uLi4uLgouLi4uLi4uLi4uLi4uLiAgICAgIC4uLi4uLi4uLkMuLi4ufS58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58Ln0uLi4uLi4uCi4uLi4uLi4uLi4uLi4gICAgICAgLi4uLi4uLi4uLi4uLi59Li0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0ufS4uLi4uLi4KLi4uLi4uLi4uLi4uLiAgICAgICAgLi4uLi4uLi4uLi4uLn0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi59Li4uLi4uLgouLi4uLi4uLi4uLi4uICAgICAgICAuLi4uLi4uLi4uLi4ufX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX0uLi4uLi4uCi4uLi4uLi4uLi4uLi4gICAgICAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KXV0pOwoKZGVzLnJlcGxhY2VfdGVycmFpbih7IHJlZ2lvbiA9IHsgMCwgMCwzMCwyMH0sIGZyb210ZXJyYWluPSIuIiwgdG90ZXJyYWluPSJDIiwgY2hhbmNlPTE1IH0pCmRlcy5yZXBsYWNlX3RlcnJhaW4oeyByZWdpb24gPSB7NjgsIDAsNzUsMjB9LCBmcm9tdGVycmFpbj0iLiIsIHRvdGVycmFpbj0ifSIsIGNoYW5jZT0yNSB9KQpkZXMucmVwbGFjZV90ZXJyYWluKHsgcmVnaW9uID0gezM0LCAxLDY4LDE5fSwgZnJvbXRlcnJhaW49In0iLCB0b3RlcnJhaW49Ii4iLCBjaGFuY2U9MiB9KQoKLS0gRHVuZ2VvbiBEZXNjcmlwdGlvbgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDc1LDIwKSwgImxpdCIpCmRlcy5yZWdpb24oeyByZWdpb249ezM3LDA0LDY1LDE2fSwgbGl0PTAsIHR5cGU9Im9yZGluYXJ5IiwgaXJyZWd1bGFyPTEsCiAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGRlcy5kb29yKHsgc3RhdGU9InNlY3JldCIsIHdhbGw9InJhbmRvbSIgfSkKICAgICAgICAgICAgICAgIGVuZAp9KQpkZXMucmVnaW9uKHsgcmVnaW9uPXszOSwwNiw2MywxNH0sIGxpdD0wLCB0eXBlPSJvcmRpbmFyeSIsIGlycmVndWxhcj0xLAogICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlPSJzZWNyZXQiLCB3YWxsPSJyYW5kb20iIH0pCiAgICAgICAgICAgICBlbmQKfSkKCmRlcy5yZWdpb24oeyByZWdpb249ezQxLDA4LDQ2LDEyfSwgbGl0PTEsIHR5cGU9Im9yZGluYXJ5IiwgaXJyZWd1bGFyPTEsCiAgICAgICAgICAgICBjb250ZW50cyA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvY2FsIHdhbGxzID0geyAibm9ydGgiLCAic291dGgiLCAid2VzdCIgfQogICAgICAgICAgICAgICAgbG9jYWwgd2lkeCA9IG1hdGgucmFuZG9tKDEsICN3YWxscykKICAgICAgICAgICAgICAgIGRlcy5kb29yKHsgc3RhdGU9InNlY3JldCIsIHdhbGw9d2FsbHNbd2lkeF0gfSkKICAgICAgICAgICAgIGVuZAp9KQoKZGVzLnJlZ2lvbih7IHJlZ2lvbj17NTYsMDgsNjEsMTJ9LCBsaXQ9MSwgdHlwZT0ib3JkaW5hcnkiLCBpcnJlZ3VsYXI9MSwKICAgICAgICAgICAgIGNvbnRlbnRzID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgbG9jYWwgd2FsbHMgPSB7ICJub3J0aCIsICJzb3V0aCIsICJlYXN0IiB9CiAgICAgICAgICAgICAgICBsb2NhbCB3aWR4ID0gbWF0aC5yYW5kb20oMSwgI3dhbGxzKQogICAgICAgICAgICAgICAgZGVzLmRvb3IoeyBzdGF0ZT0ic2VjcmV0Iiwgd2FsbD13YWxsc1t3aWR4XSB9KQogICAgICAgICAgICAgZW5kCn0pCgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDQ4LDA4LDU0LDA4KSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg0OCwxMiw1NCwxMiksICJ1bmxpdCIpCgpkZXMucmVnaW9uKHsgcmVnaW9uPXs0OCwxMCw1NCwxMH0sIGxpdD0wLCB0eXBlPSJvcmRpbmFyeSIsIGlycmVndWxhcj0xLAogICAgICAgICAgICAgY29udGVudHMgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBkZXMuZG9vcih7IHN0YXRlPSJzZWNyZXQiLCB3YWxsPSJyYW5kb20iIH0pCiAgICAgICAgICAgICBlbmQKfSkKCi0tIERvb3JzCmRlcy5kb29yKCJsb2NrZWQiLDU1LDA4KQpkZXMuZG9vcigibG9ja2VkIiw1NSwxMikKZGVzLmRvb3IoImxvY2tlZCIsNDcsMDgpCmRlcy5kb29yKCJsb2NrZWQiLDQ3LDEyKQotLSBTdGFpcnMKZGVzLnRlcnJhaW4oezAzLDE3fSwgIi4iKQpkZXMuc3RhaXIoInVwIiwgMDMsMTcpCmRlcy5zdGFpcigiZG93biIsIDQ4LDEwKQotLSBOb24gZGlnZ2FibGUgd2FsbHMKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgwMCwwMCw3NSwyMCkpCi0tIE9iamVjdHMKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKZGVzLm9iamVjdCgpCmRlcy5vYmplY3QoKQpkZXMub2JqZWN0KCkKLS0gUmFuZG9tIHRyYXBzCmRlcy50cmFwKCJzcGlrZWQgcGl0IiwyNCwwMikKZGVzLnRyYXAoInNwaWtlZCBwaXQiLDA3LDEwKQpkZXMudHJhcCgic3Bpa2VkIHBpdCIsMjMsMDUpCmRlcy50cmFwKCJzcGlrZWQgcGl0IiwyNiwxOSkKZGVzLnRyYXAoInNwaWtlZCBwaXQiLDcyLDAyKQpkZXMudHJhcCgic3Bpa2VkIHBpdCIsNzIsMTIpCmRlcy50cmFwKCJmYWxsaW5nIHJvY2siLDQ1LDE2KQpkZXMudHJhcCgiZmFsbGluZyByb2NrIiw2NSwxMykKZGVzLnRyYXAoImZhbGxpbmcgcm9jayIsNTUsMDYpCmRlcy50cmFwKCJmYWxsaW5nIHJvY2siLDM5LDExKQpkZXMudHJhcCgiZmFsbGluZyByb2NrIiw1NywwOSkKZGVzLnRyYXAoIm1hZ2ljIikKZGVzLnRyYXAoInN0YXR1ZSIpCmRlcy50cmFwKCJzdGF0dWUiKQpkZXMudHJhcCgicG9seW1vcnBoIikKZGVzLnRyYXAoImFudGkgbWFnaWMiLDUzLDEwKQpkZXMudHJhcCgic2xlZXAgZ2FzIikKZGVzLnRyYXAoInNsZWVwIGdhcyIpCmRlcy50cmFwKCJkYXJ0IikKZGVzLnRyYXAoImRhcnQiKQpkZXMudHJhcCgiZGFydCIpCi0tIFJhbmRvbSBtb25zdGVycy4KZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJCIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiQiIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkIiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJCIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiQiIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkIiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJCIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiQiIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkIiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJCIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiQiIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkIiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJpIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiaSIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gImkiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJpIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiaSIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gImkiLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJpIiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKCJ2YW1waXJlIGJhdCIpCmRlcy5tb25zdGVyKCJ2YW1waXJlIGJhdCIpCmRlcy5tb25zdGVyKCJ2YW1waXJlIGJhdCIpCmRlcy5tb25zdGVyKCJ2YW1waXJlIGJhdCIpCmRlcy5tb25zdGVyKCJ2YW1waXJlIGJhdCIpCmRlcy5tb25zdGVyKCJ2YW1waXJlIGJhdCIpCmRlcy5tb25zdGVyKCJ2YW1waXJlIGJhdCIpCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiaSIsIHBlYWNlZnVsID0gMCB9KQotLSBOZXRIYWNrIDMuNwlBcmNoLmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzg0IDIwMTUvMDUvMjUgMDA6MTM6MDQgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS4xMCAkCi0tCUNvcHlyaWdodCAoYykgMTk4OSBieSBKZWFuLUNocmlzdG9waGUgQ29sbGV0Ci0tCUNvcHlyaWdodCAoYykgMTk5MSBieSBNLiBTdGVwaGVuc29uCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCi0tCi0tCVRoZSAic3RhcnQiIGxldmVsIGZvciB0aGUgcXVlc3QuCi0tCi0tCUhlcmUgeW91IG1lZXQgeW91ciAoYmVzaWVnZWQpIGNsYXNzIGxlYWRlciwgTG9yZCBDYXJuYXJ2b24KLS0JYW5kIHJlY2VpdmUgeW91ciBxdWVzdCBhc3NpZ25tZW50LgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm90ZWxlcG9ydCIsICJoYXJkZmxvb3IiKQoKZGVzLm1hcChbWwouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4ufX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19Li4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi59LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLX0uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLn18Li5TLi4uLi4uKy4uLi4uLi4uLi4uLi4uLi4uKy4uLi4uLi58fS4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4ufS1TLS0tLS0tLS0tLS0tLS0tKy0tLS0tLS0tLS18Li4uLi4uLnx9Li4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi59fC58Li4uLi4uLi4uLi4uLi4ufC4uLi4uLi4rLnwuLi4uLi4ufH0uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLn18LnwuLi4uLi4uLi4uLi4uLi4tLS0tLS0tLS0uLS0tLS0tLS0tfS4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4ufXwuUy5cLi4uLi4uLi4uLi4uLisuLi4uLi4uLi4uLi4uLi4uLisuLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi59fC58Li4uLi4uLi4uLi4uLi4uLS0tLS0tLS0tLi0tLS0tLS0tLX0uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLn18LnwuLi4uLi4uLi4uLi4uLi58Li4uLi4uLisufC4uLi4uLi58fS4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4ufS1TLS0tLS0tLS0tLS0tLS0tKy0tLS0tLS0tLS18Li4uLi4uLnx9Li4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi59fC4uUy4uLi4uLisuLi4uLi4uLi4uLi4uLi4uLisuLi4uLi4ufH0uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLn0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfS4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4ufX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19Li4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KXV0pOwotLSBEdW5nZW9uIERlc2NyaXB0aW9uCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMTkpLCAibGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgyMiwwNiwyMywwNiksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMjUsMDYsMzAsMDYpLCAidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDMyLDA2LDQ4LDA2KSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg1MCwwNiw1NiwwOCksICJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDQwLDA4LDQ2LDA4KSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgyMiwwOCwyMiwxMiksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMjQsMDgsMzgsMTIpLCAidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDQ4LDA4LDQ4LDA4KSwgImxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoNDAsMTAsNTYsMTApLCAibGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg0OCwxMiw0OCwxMiksICJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDQwLDEyLDQ2LDEyKSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg1MCwxMiw1NiwxNCksICJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDIyLDE0LDIzLDE0KSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgyNSwxNCwzMCwxNCksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMzIsMTQsNDgsMTQpLCAidW5saXQiKQotLSBTdGFpcnMKZGVzLnN0YWlyKCJkb3duIiwgNTUsMDcpCi0tIFBvcnRhbCBhcnJpdmFsIHBvaW50CmRlcy5sZXZyZWdpb24oeyByZWdpb24gPSB7NjMsMDYsNjMsMDZ9LCB0eXBlPSJicmFuY2giIH0pCi0tIERvb3JzCmRlcy5kb29yKCJjbG9zZWQiLDIyLDA3KQpkZXMuZG9vcigiY2xvc2VkIiwzOCwwNykKZGVzLmRvb3IoImxvY2tlZCIsNDcsMDgpCmRlcy5kb29yKCJsb2NrZWQiLDIzLDEwKQpkZXMuZG9vcigibG9ja2VkIiwzOSwxMCkKZGVzLmRvb3IoImxvY2tlZCIsNTcsMTApCmRlcy5kb29yKCJsb2NrZWQiLDQ3LDEyKQpkZXMuZG9vcigiY2xvc2VkIiwyMiwxMykKZGVzLmRvb3IoImNsb3NlZCIsMzgsMTMpCmRlcy5kb29yKCJsb2NrZWQiLDI0LDE0KQpkZXMuZG9vcigiY2xvc2VkIiwzMSwxNCkKZGVzLmRvb3IoImxvY2tlZCIsNDksMTQpCi0tIExvcmQgQ2FybmFydm9uCmRlcy5tb25zdGVyKCJMb3JkIENhcm5hcnZvbiIsIDI1LCAxMCkKLS0gVGhlIHRyZWFzdXJlIG9mIExvcmQgQ2FybmFydm9uCmRlcy5vYmplY3QoImNoZXN0IiwgMjUsIDEwKQotLSBzdHVkZW50IGd1YXJkcyBmb3IgdGhlIGF1ZGllbmNlIGNoYW1iZXIKZGVzLm1vbnN0ZXIoInN0dWRlbnQiLCAyNiwgMDkpCmRlcy5tb25zdGVyKCJzdHVkZW50IiwgMjcsIDA5KQpkZXMubW9uc3Rlcigic3R1ZGVudCIsIDI4LCAwOSkKZGVzLm1vbnN0ZXIoInN0dWRlbnQiLCAyNiwgMTApCmRlcy5tb25zdGVyKCJzdHVkZW50IiwgMjgsIDEwKQpkZXMubW9uc3Rlcigic3R1ZGVudCIsIDI2LCAxMSkKZGVzLm1vbnN0ZXIoInN0dWRlbnQiLCAyNywgMTEpCmRlcy5tb25zdGVyKCJzdHVkZW50IiwgMjgsIDExKQotLSBjaXR5IHdhdGNoIGd1YXJkcyBpbiB0aGUgYW50ZWNoYW1iZXJzCmRlcy5tb25zdGVyKCJ3YXRjaG1hbiIsIDUwLCAwNikKZGVzLm1vbnN0ZXIoIndhdGNobWFuIiwgNTAsIDE0KQotLSBFZWxzIGluIHRoZSBtb2F0CmRlcy5tb25zdGVyKCJnaWFudCBlZWwiLCAyMCwgMTApCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiLCA0NSwgMDQpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiLCAzMywgMTYpCi0tIE5vbiBkaWdnYWJsZSB3YWxscwpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDc1LDE5KSkKLS0gUmFuZG9tIHRyYXBzCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tIE1vbnN0ZXJzIG9uIHNpZWdlIGR1dHkuCmRlcy5tb25zdGVyKCJTIiwgNjAsIDA5KQpkZXMubW9uc3RlcigiTSIsIDYwLCAxMCkKZGVzLm1vbnN0ZXIoIlMiLCA2MCwgMTEpCmRlcy5tb25zdGVyKCJTIiwgNjAsIDEyKQpkZXMubW9uc3RlcigiTSIsIDYwLCAxMykKZGVzLm1vbnN0ZXIoIlMiLCA2MSwgMTApCmRlcy5tb25zdGVyKCJTIiwgNjEsIDExKQpkZXMubW9uc3RlcigiUyIsIDYxLCAxMikKZGVzLm1vbnN0ZXIoIlMiLCAzMCwgMDMpCmRlcy5tb25zdGVyKCJNIiwgMjAsIDE3KQpkZXMubW9uc3RlcigiUyIsIDY3LCAwMikKZGVzLm1vbnN0ZXIoIlMiLCAxMCwgMTkpCi0tIE5ldEhhY2sgMy43CUJhcmIuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjkgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQotLQotLQlUaGUgInN0YXJ0IiBsZXZlbCBmb3IgdGhlIHF1ZXN0LgotLQotLQlIZXJlIHlvdSBtZWV0IHlvdXIgKGJlc2llZ2VkKSBjbGFzcyBsZWFkZXIsIFBlbGlhcywKLS0JYW5kIHJlY2VpdmUgeW91ciBxdWVzdCBhc3NpZ25tZW50LgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm90ZWxlcG9ydCIsICJoYXJkZmxvb3IiKQoKZGVzLm1hcChbWwouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uUFAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uUFAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5QUC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5QUC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLS0tLS0tLS0tLS0tLS0uLi4uLi4tLS0tLS4uLi5QUFAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi58Li4uUy4uLi4uLi4ufC4uLi4uLisuLi58Li4uUFBQLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLnwtLS0tLi4uLi4uLi58Li4uLi4ufC4uLnwuLi4uUFAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4ufC5cLi4uLi4uLi4uLisuLi4uLi4tLS0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi58LS0tLS4uLi4uLi4ufC4uLi4uLi4uLi4uLi4uLlBQLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLnwuLi5TLi4uLi4uLi58Li4uLS0tLS0uLi4uLi4uUFBQLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLS0tLS0tLS0tLS0tLS0uLi4rLi4ufC4uLi4uLlBQUFBQLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwuLi58Li4uLi4uLlBQUC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4tLS0tLS4uLi4uLi0tLS0tLi4uLi4uLS0tLS0uLi4uLi4uLlBQLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLnwuLi4rLi4uLi4ufC4uLisuLi0tKy0tLi4uLi4uLi4uLi4uLlBQLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4ufC4uLnwuLi4uLi58Li4ufC4ufC4uLnwuLi4uLi4uLi4uLi4uLlBQLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4tLS0tLS4uLi4uLi0tLS0tLi58Li4ufC4uLi4uLi4uLi4uLi5QUFBQLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi0tLS0tLi4uLi4uLi4uLi4uUFAuLlBQLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlBQLi4uUFAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5QUC4uLlBQLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlBQLi4uLlBQLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KXV0pOwoKLS0gdGhlIGZvcmVzdCBiZXlvbmQgdGhlIHJpdmVyCmRlcy5yZXBsYWNlX3RlcnJhaW4oeyByZWdpb249ezM3LDAwLCA1OSwxOX0sIGZyb210ZXJyYWluPSIuIiwgdG90ZXJyYWluPSJUIiwgY2hhbmNlPTUgfSkKZGVzLnJlcGxhY2VfdGVycmFpbih7IHJlZ2lvbj17NjAsMDAsIDY0LDE5fSwgZnJvbXRlcnJhaW49Ii4iLCB0b3RlcnJhaW49IlQiLCBjaGFuY2U9MTAgfSkKZGVzLnJlcGxhY2VfdGVycmFpbih7IHJlZ2lvbj17NjUsMDAsIDc1LDE5fSwgZnJvbXRlcnJhaW49Ii4iLCB0b3RlcnJhaW49IlQiLCBjaGFuY2U9MjAgfSkKLS0gZ3VhcmFudGVlIGEgcGF0aCBhbmQgZnJlZSBzcG90IGZvciB0aGUgcG9ydGFsCmRlcy50ZXJyYWluKHNlbGVjdGlvbi5yYW5kbGluZShzZWxlY3Rpb24ubmV3KCksIDM3LDcsIDYyLDAyLCA3KSwgIi4iKQpkZXMudGVycmFpbih7NjIsMDJ9LCAiLiIpCgotLSBEdW5nZW9uIERlc2NyaXB0aW9uCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMTkpLCAibGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwOSwwNSwxMSwwNSksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDksMDcsMTEsMDcpLCAibGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwOSwwOSwxMSwwOSksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMTMsMDUsMjAsMDkpLCAibGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgyOSwwNSwzMSwwNiksICJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDI2LDEwLDI4LDExKSwgImxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDQsMTMsMDYsMTQpLCAibGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgxNSwxMywxNywxNCksICJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDIyLDE0LDI0LDE1KSwgImxpdCIpCi0tIFN0YWlycwpkZXMuc3RhaXIoImRvd24iLCAwOSwwOSkKLS0gUG9ydGFsIGFycml2YWwgcG9pbnQKZGVzLmxldnJlZ2lvbih7IHJlZ2lvbiA9IHs2MiwwMiw2MiwwMn0sIHR5cGU9ImJyYW5jaCIgfSkKLS0gRG9vcnMKZGVzLmRvb3IoImxvY2tlZCIsMTIsMDUpCmRlcy5kb29yKCJsb2NrZWQiLDEyLDA5KQpkZXMuZG9vcigiY2xvc2VkIiwyMSwwNykKZGVzLmRvb3IoIm9wZW4iLDA3LDEzKQpkZXMuZG9vcigib3BlbiIsMTgsMTMpCmRlcy5kb29yKCJvcGVuIiwyMywxMykKZGVzLmRvb3IoIm9wZW4iLDI1LDEwKQpkZXMuZG9vcigib3BlbiIsMjgsMDUpCi0tIEVsZGVyCmRlcy5tb25zdGVyKCJQZWxpYXMiLCAxMCwgMDcpCi0tIFRoZSB0cmVhc3VyZSBvZiBQZWxpYXMKZGVzLm9iamVjdCgiY2hlc3QiLCAwOSwgMDUpCi0tIGNoaWVmdGFpbiBndWFyZHMgZm9yIHRoZSBhdWRpZW5jZSBjaGFtYmVyCmRlcy5tb25zdGVyKCJjaGllZnRhaW4iLCAxMCwgMDUpCmRlcy5tb25zdGVyKCJjaGllZnRhaW4iLCAxMCwgMDkpCmRlcy5tb25zdGVyKCJjaGllZnRhaW4iLCAxMSwgMDUpCmRlcy5tb25zdGVyKCJjaGllZnRhaW4iLCAxMSwgMDkpCmRlcy5tb25zdGVyKCJjaGllZnRhaW4iLCAxNCwgMDUpCmRlcy5tb25zdGVyKCJjaGllZnRhaW4iLCAxNCwgMDkpCmRlcy5tb25zdGVyKCJjaGllZnRhaW4iLCAxNiwgMDUpCmRlcy5tb25zdGVyKCJjaGllZnRhaW4iLCAxNiwgMDkpCi0tIE5vbiBkaWdnYWJsZSB3YWxscwpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDc1LDE5KSkKLS0gT25lIHRyYXAgdG8ga2VlcCB0aGUgb2dyZXMgYXQgYmF5LgpkZXMudHJhcCgic3Bpa2VkIHBpdCIsMzcsMDcpCi0tIEVlbHMgaW4gdGhlIHJpdmVyCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiLCAzNiwgMDEpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiLCAzNywgMDkpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiLCAzOSwgMTUpCi0tIE1vbnN0ZXJzIG9uIHNpZWdlIGR1dHkuCmxvY2FsIG9ncmVsb2NzID0gc2VsZWN0aW9uLmZsb29kZmlsbCgzNyw3KSAmIHNlbGVjdGlvbi5hcmVhKDQwLDAzLCA0NSwyMCkKZm9yIGkgPSAwLCAxMSBkbwogICBsb2NhbCB4LHkgPSBvZ3JlbG9jczpybmRjb29yZCgxKTsKICAgZGVzLm1vbnN0ZXIoeyBpZCA9ICJvZ3JlIiwgY29vcmQ9e3gseX0sIHBlYWNlZnVsPTAgfSkKZW5kCi0tIE5ldEhhY2sgMy43CUNhdmVtYW4uZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODMgMjAxNS8wNS8yNSAwMDoxMzowMyAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjggJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQotLQotLQlUaGUgInN0YXJ0IiBsZXZlbCBmb3IgdGhlIHF1ZXN0LgotLQotLQlIZXJlIHlvdSBtZWV0IHlvdXIgKGJlc2llZ2VkKSBjbGFzcyBsZWFkZXIsIFNoYW1hbiBLYXJub3YKLS0JYW5kIHJlY2VpdmUgeW91ciBxdWVzdCBhc3NpZ25tZW50LgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm90ZWxlcG9ydCIsICJoYXJkZmxvb3IiKQoKZGVzLm1hcChbWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgLi4uLi4uICAgICAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAuLi4gICAgICAgIC4uLi4gIC4uLi4uLiAgICAgICAKIC4uLi4uLiAgICAgICAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgLi4uLi4uLi4gICAgICAgLi4uLiAgICAuLi4uLiAgIAogIC4uQkIgICAgICAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAuLi4uLi4uLi4gICAgICAgICAgICAuLi4uICAuLiAgCiAgICAgLi4gICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgICAgICAgLi4uLi4uLiAgICAgIC4uICAgICAuLi4uICAuLiAKICAgICAuLiAgICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4gICAgICAgICAgICAgICAgICAgICAuLiAgLi4uLi4uLiAgICAuLiAgLi4uIAogICAuLiAgICAgICAgICAgICAgUyAgIEJCICAgICAgICAgICAgICAgIC4uLi4uICAgICAuLi4uLi4uICAgLi4uLiAgICAgIC4uLi4gCiAgICAuLiAgICAgICAgLi4uICAuICAgLi4gICAgICAgICAgICAgICAuLi4uLi4uLiAgLi4gICAgIC4uICAgLi4gICAgICAgLi4uICAKICAgICAuLiAgICAgIC4uLi4uLiAgICAgLi4gICAgICAgICAgICAgLi4uLi4uLi4uLi4uICAgICAgIC4uICAgICAgICAgIC4uLiAgIAogICAgICAgLiAgICAgIC4uLi4gICAgICAgLi4gICAgICAgICAgICAgLi4uLi4uLi4gICAgICAgICAgIC4uICAuLi4uLi4uLi4uLiAgCiAgLi4uICAgLi4gICAgIC4uICAgICAgICAuLi4uLi4uLi4uLi4uICAgICAgICAgICAgICAgICAgLi4uLi4uLi4uLi4uLi4uLi4uLiAKIC4uLi4uICAgLi4uLi4gICAgICAgICAgICAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uICAgICAgLi4uLi4uLi4uLi4gIAogIC4uLi4uQi4uLi4uLi4uLi4uLi4uLi4gICAgICAgICAgICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uICAgCiAgLi4uLi4gICAgIC4gIC4uLi4uLi4uLi4gICAgICAgIC4uLi4gLiAgICAgIC4uLiAgLi4uLi4uLi4uLiAgICAgICAgICAgLi4uICAKICAgLi4uICAgICAuLiAgICAgICAgICAuLi4uLi4uLi4uLi4uICAuLiAgICAuLi4uLi4uLi4uLi4uLi4uLi4uICAgICAgICAuLi4uIAogICAgICAgICAgQkIgICAgICAgLi4gICAuLi4uLi4uLi4gICAgICBCQiAgICAuLi4gIC4uLi4uLi4uLi4gIC4uICAgLi4uICAuLi4gCiAgICAgICAuLi4uLi4gICAgLi4uLi4gIEIgICAgICAgICAgLi4uLi4uLi4gICAgICAgICAuLiAgICAgICAgIC4uIC4uLi4gIC4uLiAKICAgICAuLi4uLi4uLi4uICAuLi4uLi4uLi4uICAgICAgICAgLi4uLi4gLi4uICAgICAgLi4uLi4gICAgICAgIC4uLi4uLi4uICAgIAogICAgICAgLi4gIC4uLiAgICAuICAuLi4uLiAgICAgICAgIC4uLi4gICAgLi4gICAgICAgLi4uICAgICAgICAgICAgLi4gICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKXV0pOwotLSBEdW5nZW9uIERlc2NyaXB0aW9uCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMTkpLCAidW5saXQiKQpkZXMucmVnaW9uKHsgcmVnaW9uPXsxMywwMSwgNDAsMDV9LCBsaXQ9MSwgdHlwZT0idGVtcGxlIiwgZmlsbGVkPTEsIGlycmVndWxhcj0xIH0pCi0tIFRoZSBvY2N1cGllZCByb29tcy4KZGVzLnJlZ2lvbih7IHJlZ2lvbj17MDIsMDEsIDA4LDAzfSwgbGl0PTEsIHR5cGU9Im9yZGluYXJ5IiwgaXJyZWd1bGFyPTEgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MDEsMTEsIDA2LDE0fSwgbGl0PTEsIHR5cGU9Im9yZGluYXJ5IiwgaXJyZWd1bGFyPTEgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MTMsMDgsIDE4LDEwfSwgbGl0PTEsIHR5cGU9Im9yZGluYXJ5IiwgaXJyZWd1bGFyPTEgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MDUsMTcsIDE0LDE4fSwgbGl0PTEsIHR5cGU9Im9yZGluYXJ5IiwgaXJyZWd1bGFyPTEgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MTcsMTYsIDIzLDE4fSwgbGl0PTEsIHR5cGU9Im9yZGluYXJ5IiwgaXJyZWd1bGFyPTEgfSkKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MzUsMTYsIDQ0LDE4fSwgbGl0PTEsIHR5cGU9Im9yZGluYXJ5IiwgaXJyZWd1bGFyPTEgfSkKLS0gU3RhaXJzCmRlcy5zdGFpcigiZG93biIsIDAyLDAzKQotLSBQb3J0YWwgYXJyaXZhbCBwb2ludApkZXMubGV2cmVnaW9uKHsgcmVnaW9uID0gezcxLDA5LDcxLDA5fSwgdHlwZT0iYnJhbmNoIiB9KQotLSBEb29ycwpkZXMuZG9vcigibG9ja2VkIiwxOSwwNikKLS0gVGhlIHRlbXBsZSBhbHRhciAodGhpcyB3aWxsIGZvcmNlIGEgcHJpZXN0KGVzcykgdG8gYmUgY3JlYXRlZCkKZGVzLmFsdGFyKHsgeD0zNix5PTAyLCBhbGlnbj0iY29hbGlnbmVkIiwgdHlwZT0ic2hyaW5lIiB9KQotLSBTaGFtYW4gS2Fybm92CmRlcy5tb25zdGVyKCJTaGFtYW4gS2Fybm92IiwgMzUsIDAyKQotLSBUaGUgdHJlYXN1cmUgb2YgU2hhbWFuIEthcm5vdgpkZXMub2JqZWN0KCJjaGVzdCIsIDM0LCAwMikKLS0gbmVhbmRlcnRoYWwgZ3VhcmRzIGZvciB0aGUgYXVkaWVuY2UgY2hhbWJlcgpkZXMubW9uc3RlcigibmVhbmRlcnRoYWwiLCAyMCwgMDMpCmRlcy5tb25zdGVyKCJuZWFuZGVydGhhbCIsIDIwLCAwMikKZGVzLm1vbnN0ZXIoIm5lYW5kZXJ0aGFsIiwgMjAsIDAxKQpkZXMubW9uc3RlcigibmVhbmRlcnRoYWwiLCAyMSwgMDMpCmRlcy5tb25zdGVyKCJuZWFuZGVydGhhbCIsIDIxLCAwMikKZGVzLm1vbnN0ZXIoIm5lYW5kZXJ0aGFsIiwgMjEsIDAxKQpkZXMubW9uc3RlcigibmVhbmRlcnRoYWwiLCAyMiwgMDEpCmRlcy5tb25zdGVyKCJuZWFuZGVydGhhbCIsIDI2LCAwOSkKLS0gTm9uIGRpZ2dhYmxlIHdhbGxzCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMTkpKQotLSBSYW5kb20gdHJhcHMKZGVzLnRyYXAoInBpdCIsNDcsMTEpCmRlcy50cmFwKCJwaXQiLDU3LDEwKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tIE1vbnN0ZXJzIG9uIHNpZWdlIGR1dHkgKGluIHRoZSBvdXRlciBjYXZlcykuCmRlcy5tb25zdGVyKHsgaWQgPSJidWdiZWFyIiwgeD00NywgeT0wMiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0iYnVnYmVhciIsIHg9NDgsIHk9MDMsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ImJ1Z2JlYXIiLCB4PTQ5LCB5PTA0LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSJidWdiZWFyIiwgeD02NywgeT0wMywgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0iYnVnYmVhciIsIHg9NjksIHk9MDQsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ImJ1Z2JlYXIiLCB4PTUxLCB5PTEzLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSJidWdiZWFyIiwgeD01MywgeT0xNCwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0iYnVnYmVhciIsIHg9NTUsIHk9MTUsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ImJ1Z2JlYXIiLCB4PTYzLCB5PTEwLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSJidWdiZWFyIiwgeD02NSwgeT0wOSwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0iYnVnYmVhciIsIHg9NjcsIHk9MTAsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ImJ1Z2JlYXIiLCB4PTY5LCB5PTExLCBwZWFjZWZ1bD0wIH0pCmRlcy53YWxsaWZ5KCkKLS0gTmV0SGFjayAzLjcJSGVhbGVyLmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzg0IDIwMTUvMDUvMjUgMDA6MTM6MDQgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS4xMCAkCi0tCUNvcHlyaWdodCAoYykgMTk4OSBieSBKZWFuLUNocmlzdG9waGUgQ29sbGV0Ci0tCUNvcHlyaWdodCAoYykgMTk5MSwgMTk5MyBieSBNLiBTdGVwaGVuc29uLCBQLiBXaW5uZXIKLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KLS0KLS0JVGhlICJzdGFydCIgbGV2ZWwgZm9yIHRoZSBxdWVzdC4KLS0KLS0JSGVyZSB5b3UgbWVldCB5b3VyIChiZXNpZWdlZCkgY2xhc3MgbGVhZGVyLCBIaXBwb2NyYXRlcwotLQlhbmQgcmVjZWl2ZSB5b3VyIHF1ZXN0IGFzc2lnbm1lbnQuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiICIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub3RlbGVwb3J0IiwgImhhcmRmbG9vciIpCgpkZXMubWFwKFtbClBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFAKUFBQUC4uLi4uLi4uUFBQUC4uLi4uUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFAuUC4uUFBQUFAuLi4uLi5QUFBQUFBQUApQUFAuLi4uLi4uLi4uUFBQUC4uLlBQUFBQLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlBQUFAuLlBQUFBQLi4uLi4uLi5QUFBQUFBQClBQLi4uLi4uLi4uLi4uUFBQUFBQUFAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5QUFAuLi5QUFBQLi4uLi4uUFBQUFBQUFAKUC4uLi4uUFBQUFBQUFBQUFBQUFBQLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUApQUFBQLi4uLlBQUFBQUFBQUFBQUC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uUFBQUFAuUFBQUFBQUFBQUFBQUFBQClBQUFAuLi4uLi4uLlBQUFBQLi4uLi4uLi4uLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0uLi4uLi4uLlBQLi4uUFBQUFBQUC4uLi4uUFAKUFBQLi4uLi4uLi4uLi4uUFBQUFAuLi4uLS18LnwuLi4uLi5TLi4uLi4uLi4uLlMufC0tLi4uLi5QUFBQLlBQUFBQUFAuLi4uLi4uUApQUFBQLi4uLi4uLi4uLlBQUFBQLi4uLi58LlMufC4uLi4uLi0tLS0tLS0tLS0tfFN8LnwuLi4uLi5QUFBQUFAuUFBQLi4uLi4uLlBQClBQUFBQUC4uLi4uLlBQUFBQUC4uLi4uLnwufC58Li4uLi4ufC4uLnwuLi4uLi58LnwufC4uLi4uUFBQUFBQLi4uUFAuLi4uLi4uUFAKUFBQUFBQUFBQUFBQUFBQUFBQUC4uLi4uKy58LnwuLi4uLi5TLlwuUy4uLi4uLnwufC4rLi4uLi4uUFBQUFBQLlBQUFAuLi4uLi4uUApQUFAuLi5QUFBQUC4uLlBQUFAuLi4uLi58LnwufC4uLi4uLnwuLi58Li4uLi4ufC58LnwuLi4uLi4uUFBQUFBQUFBQUFAuLi4uLlBQClBQLi4uLi5QUFAuLi4uLlBQUC4uLi4uLnwufFN8LS0tLS0tLS0tLS0uLi4uLi58LlMufC4uLi4uLlBQUFBQUFBQUFBQUFBQUFBQUFAKUFBQLi5QUFBQUC4uLlBQUFAuLi4uLi4uLS18LlMuLi4uLi4uLi4uUy4uLi4uLnwufC0tLi4uLi5QUFBQUFBQUFAuLi4uUFBQUFBQUApQUFBQUFBQUFBQUFBQUFBQLi4uLi4uLi4uLi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLi4uLi4uLi4uLlBQUFBQLi4uLi4uLi4uLlBQClBQUFBQUFBQUFBQUFBQUFBQLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlBQUFBQUC4uLi4uLi4uLi4uLlAKUFBQLi4uLi4uLi4uLi4uLlBQUFAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlBQUC4uUFBQUC4uLi4uLi4uLi5QUApQUC4uLi4uLi4uLi4uLi4uLlBQUFBQLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5QUFBQLi4uUFBQUC4uLi4uLi4uUFBQClBQUC4uLi4uLi4uLi4uLi5QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUC4uLi5QUFBQUFAKUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUApdXSk7CgpkZXMucmVwbGFjZV90ZXJyYWluKHsgcmVnaW9uPXswMSwwMSwgNzQsMTh9LCBmcm9tdGVycmFpbj0iUCIsIHRvdGVycmFpbj0iLiIsIGNoYW5jZT0xMCB9KQoKLS0gRHVuZ2VvbiBEZXNjcmlwdGlvbgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDc1LDE5KSwgImxpdCIpCi0tIFN0YWlycwpkZXMuc3RhaXIoImRvd24iLCAzNyw5KQotLSBQb3J0YWwgYXJyaXZhbCBwb2ludApkZXMubGV2cmVnaW9uKHsgcmVnaW9uID0gezA0LDEyLDA0LDEyfSwgdHlwZT0iYnJhbmNoIiB9KQotLSBhbHRhciBmb3IgdGhlIFRlbXBsZQpkZXMuYWx0YXIoeyB4PTMyLHk9MDksYWxpZ249Im5ldXRyYWwiLHR5cGU9ImFsdGFyIiB9KQotLSBEb29ycwpkZXMuZG9vcigibG9ja2VkIiwyNCwxMCkKZGVzLmRvb3IoImNsb3NlZCIsMjYsMDgpCmRlcy5kb29yKCJjbG9zZWQiLDI3LDEyKQpkZXMuZG9vcigibG9ja2VkIiwyOCwxMykKZGVzLmRvb3IoImNsb3NlZCIsMzUsMDcpCmRlcy5kb29yKCJsb2NrZWQiLDM1LDEwKQpkZXMuZG9vcigibG9ja2VkIiwzOSwxMCkKZGVzLmRvb3IoImNsb3NlZCIsMzksMTMpCmRlcy5kb29yKCJsb2NrZWQiLDQ2LDA3KQpkZXMuZG9vcigiY2xvc2VkIiw0NywwOCkKZGVzLmRvb3IoImNsb3NlZCIsNDgsMTIpCmRlcy5kb29yKCJsb2NrZWQiLDUwLDEwKQotLSBIaXBwb2NyYXRlcwpkZXMubW9uc3RlcigiSGlwcG9jcmF0ZXMiLCAzNywgMTApCi0tIFRoZSB0cmVhc3VyZSBvZiBIaXBwb2NyYXRlcwpkZXMub2JqZWN0KCJjaGVzdCIsIDM3LCAxMCkKLS0gaW50ZXJuIGd1YXJkcyBmb3IgdGhlIGF1ZGllbmNlIGNoYW1iZXIKZGVzLm1vbnN0ZXIoImF0dGVuZGFudCIsIDI5LCAwOCkKZGVzLm1vbnN0ZXIoImF0dGVuZGFudCIsIDI5LCAwOSkKZGVzLm1vbnN0ZXIoImF0dGVuZGFudCIsIDI5LCAxMCkKZGVzLm1vbnN0ZXIoImF0dGVuZGFudCIsIDI5LCAxMSkKZGVzLm1vbnN0ZXIoImF0dGVuZGFudCIsIDQwLCAwOSkKZGVzLm1vbnN0ZXIoImF0dGVuZGFudCIsIDQwLCAxMCkKZGVzLm1vbnN0ZXIoImF0dGVuZGFudCIsIDQwLCAxMSkKZGVzLm1vbnN0ZXIoImF0dGVuZGFudCIsIDQwLCAxMykKLS0gTm9uIGRpZ2dhYmxlIHdhbGxzCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMTkpKQotLSBSYW5kb20gdHJhcHMKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKLS0gTW9uc3RlcnMgb24gc2llZ2UgZHV0eS4KZGVzLm1vbnN0ZXIoInJhYmlkIHJhdCIpCmRlcy5tb25zdGVyKCJyYWJpZCByYXQiKQpkZXMubW9uc3RlcigicmFiaWQgcmF0IikKZGVzLm1vbnN0ZXIoInJhYmlkIHJhdCIpCmRlcy5tb25zdGVyKCJyYWJpZCByYXQiKQpkZXMubW9uc3RlcigicmFiaWQgcmF0IikKZGVzLm1vbnN0ZXIoInJhYmlkIHJhdCIpCmRlcy5tb25zdGVyKCJyYWJpZCByYXQiKQpkZXMubW9uc3RlcigicmFiaWQgcmF0IikKZGVzLm1vbnN0ZXIoInJhYmlkIHJhdCIpCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiKQpkZXMubW9uc3Rlcigic2hhcmsiKQpkZXMubW9uc3RlcigiOyIpCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiRCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJEIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkQiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiRCIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJEIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIlMiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiUyIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJTIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIlMiLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiUyIsIHBlYWNlZnVsPTAgfSkKLS0gTmV0SGFjayAzLjcJS25pZ2h0LmRlcwkkTkhEVC1EYXRlOiAxNDMyNTEyNzg0IDIwMTUvMDUvMjUgMDA6MTM6MDQgJCAgJE5IRFQtQnJhbmNoOiBtYXN0ZXIgJDokTkhEVC1SZXZpc2lvbjogMS45ICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxLDkyIGJ5IE0uIFN0ZXBoZW5zb24KLS0gTmV0SGFjayBtYXkgYmUgZnJlZWx5IHJlZGlzdHJpYnV0ZWQuICBTZWUgbGljZW5zZSBmb3IgZGV0YWlscy4KLS0KLS0KLS0JVGhlICJzdGFydCIgbGV2ZWwgZm9yIHRoZSBxdWVzdC4KLS0KLS0JSGVyZSB5b3UgbWVldCB5b3VyIChiZXNpZWdlZCkgY2xhc3MgbGVhZGVyLCBLaW5nIEFydGh1cgotLQlhbmQgcmVjZWl2ZSB5b3VyIHF1ZXN0IGFzc2lnbm1lbnQuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiLiIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub3RlbGVwb3J0IiwgImhhcmRmbG9vciIpCi0tIFRoaXMgaXMgYSBrbHVkZ2UgdG8gaW5pdCB0aGUgbGV2ZWwgYXMgYSBsaXQgZmllbGQuCmRlcy5sZXZlbF9pbml0KHsgc3R5bGU9Im1pbmVzIiwgZmc9Ii4iLCBiZz0iLiIsIHNtb290aGVkPWZhbHNlLCBqb2luZWQ9ZmFsc2UsIGxpdD0xLCB3YWxsZWQ9ZmFsc2UgfSkKCmRlcy5tYXAoW1sKLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi0tLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0tLS4KLnwuLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58Li4ufC4KLi0tfCstLS0tLS0tLS0tLS0tLS0tLS0tKystLS0tLS0tLS0tLS0tLS0tLS0tK3wtLS4KLi4ufC4uLi4uLi4uLi4uLi4uLi4uLi4rLi4rLi4uLi4uLi4uLi4uLi4uLi4uLnwuLi4KLi4ufC58LS0tLS0tLS0tLS0tLS0tLS18Kyt8LS0tLS0tLS0tLS0tLS0tLS18LnwuLi4KLi4ufC58Li4uLi4uLi4uLi4uLi4uLi58Li58Li4uLi4uLi4ufC4uLi4uLi58LnwuLi4KLi4ufC58Li4uXC4uLi4uLi4uLi4uLi4rLi4rLi4uLi4uLi4ufC4uLi4uLi58LnwuLi4KLi4ufC58Li4uLi4uLi4uLi4uLi4uLi4rLi4rLi4uLi4uLi4uKy4uLi4uLi58LnwuLi4KLi4ufC58Li4uLi4uLi4uLi4uLi4uLi58Li58Li4uLi4uLi4ufC4uLi4uLi58LnwuLi4KLi4ufC58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LnwuLi4KLi4ufC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnwuLi4KLi0tfCstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK3wtLS4KLnwuLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58Li4ufC4KLi0tLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0tLS4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KXV0pOwotLSBEdW5nZW9uIERlc2NyaXB0aW9uCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsNDksMTUpLCAibGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwNCwwNCw0NSwxMSksICJ1bmxpdCIpCmRlcy5yZWdpb24oeyByZWdpb249ezA2LDA2LDIyLDA5fSwgbGl0PTEsIHR5cGU9InRocm9uZSIsIGZpbGxlZD0yIH0pCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMjcsMDYsNDMsMDkpLCAibGl0IikKLS0gUG9ydGFsIGFycml2YWwgcG9pbnQKZGVzLmxldnJlZ2lvbih7IHJlZ2lvbiA9IHsyMCwxNCwyMCwxNH0sIHR5cGU9ImJyYW5jaCIgfSkKLS0gU3RhaXJzCmRlcy5zdGFpcigiZG93biIsIDQwLDcpCi0tIERvb3JzCi0tIE91dHNpZGUgRG9vcnMKZGVzLmRvb3IoImxvY2tlZCIsMjQsMDMpCmRlcy5kb29yKCJsb2NrZWQiLDI1LDAzKQotLSBJbnNpZGUgRG9vcnMKZGVzLmRvb3IoImNsb3NlZCIsMjMsMDQpCmRlcy5kb29yKCJjbG9zZWQiLDI2LDA0KQpkZXMuZG9vcigibG9ja2VkIiwyNCwwNSkKZGVzLmRvb3IoImxvY2tlZCIsMjUsMDUpCmRlcy5kb29yKCJjbG9zZWQiLDIzLDA3KQpkZXMuZG9vcigiY2xvc2VkIiwyNiwwNykKZGVzLmRvb3IoImNsb3NlZCIsMjMsMDgpCmRlcy5kb29yKCJjbG9zZWQiLDI2LDA4KQpkZXMuZG9vcigiY2xvc2VkIiwzNiwwOCkKLS0gV2F0Y2hyb29tIERvb3JzCmRlcy5kb29yKCJjbG9zZWQiLDA0LDAzKQpkZXMuZG9vcigiY2xvc2VkIiw0NSwwMykKZGVzLmRvb3IoImNsb3NlZCIsMDQsMTIpCmRlcy5kb29yKCJjbG9zZWQiLDQ1LDEyKQotLSBLaW5nIEFydGh1cgpkZXMubW9uc3RlcigiS2luZyBBcnRodXIiLCAwOSwgMDcpCi0tIFRoZSB0cmVhc3VyZSBvZiBLaW5nIEFydGh1cgpkZXMub2JqZWN0KCJjaGVzdCIsIDA5LCAwNykKLS0ga25pZ2h0IGd1YXJkcyBmb3IgdGhlIHdhdGNocm9vbXMKZGVzLm1vbnN0ZXIoeyBpZCA9ICJrbmlnaHQiLCB4PTA0LCB5PTAyLCBwZWFjZWZ1bCA9IDEgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJrbmlnaHQiLCB4PTA0LCB5PTEzLCBwZWFjZWZ1bCA9IDEgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJrbmlnaHQiLCB4PTQ1LCB5PTAyLCBwZWFjZWZ1bCA9IDEgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJrbmlnaHQiLCB4PTQ1LCB5PTEzLCBwZWFjZWZ1bCA9IDEgfSkKLS0gcGFnZSBndWFyZHMgZm9yIHRoZSBhdWRpZW5jZSBjaGFtYmVyCmRlcy5tb25zdGVyKCJwYWdlIiwgMTYsIDA2KQpkZXMubW9uc3RlcigicGFnZSIsIDE4LCAwNikKZGVzLm1vbnN0ZXIoInBhZ2UiLCAyMCwgMDYpCmRlcy5tb25zdGVyKCJwYWdlIiwgMTYsIDA5KQpkZXMubW9uc3RlcigicGFnZSIsIDE4LCAwOSkKZGVzLm1vbnN0ZXIoInBhZ2UiLCAyMCwgMDkpCi0tIE5vbiBkaWdnYWJsZSB3YWxscwpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDQ5LDE1KSkKLS0gUmFuZG9tIHRyYXBzCmRlcy50cmFwKCJzbGVlcCBnYXMiLDI0LDA0KQpkZXMudHJhcCgic2xlZXAgZ2FzIiwyNSwwNCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQotLSBNb25zdGVycyBvbiBzaWVnZSBkdXR5LgpkZXMubW9uc3Rlcih7IGlkID0gInF1YXNpdCIsIHg9MTQsIHk9MDAsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJxdWFzaXQiLCB4PTE2LCB5PTAwLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicXVhc2l0IiwgeD0xOCwgeT0wMCwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInF1YXNpdCIsIHg9MjAsIHk9MDAsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJxdWFzaXQiLCB4PTIyLCB5PTAwLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicXVhc2l0IiwgeD0yNCwgeT0wMCwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInF1YXNpdCIsIHg9MjYsIHk9MDAsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJxdWFzaXQiLCB4PTI4LCB5PTAwLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicXVhc2l0IiwgeD0zMCwgeT0wMCwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInF1YXNpdCIsIHg9MzIsIHk9MDAsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJxdWFzaXQiLCB4PTM0LCB5PTAwLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAicXVhc2l0IiwgeD0zNiwgeT0wMCwgcGVhY2VmdWw9MCB9KQoKLS0gTmV0SGFjayAzLjcJTW9uay5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4NCAyMDE1LzA1LzI1IDAwOjEzOjA0ICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTIgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEtMiBieSBNLiBTdGVwaGVuc29uCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCi0tCi0tCVRoZSAic3RhcnQiIGxldmVsIGZvciB0aGUgcXVlc3QuCi0tCi0tCUhlcmUgeW91IG1lZXQgeW91ciAoYmVzaWVnZWQpIGNsYXNzIGxlYWRlciwgdGhlIEdyYW5kIE1hc3RlcgotLQlhbmQgcmVjZWl2ZSB5b3VyIHF1ZXN0IGFzc2lnbm1lbnQuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiICIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub3RlbGVwb3J0IiwgImhhcmRmbG9vciIpCgpkZXMubWFwKFtbCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi58Li4uLi4uLi4uLi4uLi4uLnwuLi4uLnwuLi4uLnwuLi4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLnwuLi0tLS0tLS0tLS0tLS4ufC0tKy0tLS0tKy0tLS0tKy0tfC4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4ufC4ufC4uLi4uLi4uLi58Li58Li4uLi4uLi4uLi4uLi4uLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi58Li58Li4uLi4uLi4uLnwuLnwrLS0tKy0tLSstLS0tLSstLXwuLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4tLS0uLnwuLi4uLi4uLi4ufC4uLi4uLnwuLi58Li4ufC4uLi4ufC4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLisuLi4ufC4uLi4uLi4uLi4rLi4uLi4ufC4uLnwuLi58Li4uLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uKy4uLi58Li4uLi4uLi4uLisuLi4uLi58Li4ufC4uLnwuLi4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4tLS0uLnwuLi4uLi4uLi4ufC4uLi4uLnwuLi58Li4ufC4uLi4ufC4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4ufC4ufC4uLi4uLi4uLi58Li58Ky0tLS0tKy0tLSstLS0rLS18Li4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi58Li58Li4uLi4uLi4uLnwuLnwuLi4uLi4uLi4uLi4uLi4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLnwuLi0tLS0tLS0tLS0tLS4ufC0tKy0tLS0tKy0tLS0tKy0tfC4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4ufC4uLi4uLi4uLi4uLi4uLi58Li4uLi58Li4uLi58Li4uLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgpdXSk7Ci0tIER1bmdlb24gRGVzY3JpcHRpb24KZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMCwwMCw3NSwxOSksICJsaXQiKQpkZXMucmVnaW9uKHsgcmVnaW9uPXsyNCwwNiwgMzMsMTN9LCBsaXQ9MSwgdHlwZT0idGVtcGxlIiB9KQoKZGVzLnJlcGxhY2VfdGVycmFpbih7IHJlZ2lvbj17MDAsMDAsIDEwLDE5fSwgZnJvbXRlcnJhaW49Ii4iLCB0b3RlcnJhaW49IlQiLCBjaGFuY2U9MTAgfSkKZGVzLnJlcGxhY2VfdGVycmFpbih7IHJlZ2lvbj17NjUsMDAsIDc1LDE5fSwgZnJvbXRlcnJhaW49Ii4iLCB0b3RlcnJhaW49IlQiLCBjaGFuY2U9MTAgfSkKCmxvY2FsIHNwYWNlbG9jcyA9IHNlbGVjdGlvbi5mbG9vZGZpbGwoMDUsMDQpOwoKLS0gUG9ydGFsIGFycml2YWwgcG9pbnQKZGVzLnRlcnJhaW4oezA1LDA0fSwgIi4iKQpkZXMubGV2cmVnaW9uKHsgcmVnaW9uID0gezA1LDA0LDA1LDA0fSwgdHlwZT0iYnJhbmNoIiB9KQotLSBTdGFpcnMKZGVzLnN0YWlyKCJkb3duIiwgNTIsMDkpCi0tIERvb3JzCmRlcy5kb29yKCJsb2NrZWQiLDE4LDA5KQpkZXMuZG9vcigibG9ja2VkIiwxOCwxMCkKZGVzLmRvb3IoImNsb3NlZCIsMzQsMDkpCmRlcy5kb29yKCJjbG9zZWQiLDM0LDEwKQpkZXMuZG9vcigiY2xvc2VkIiw0MCwwNSkKZGVzLmRvb3IoImNsb3NlZCIsNDYsMDUpCmRlcy5kb29yKCJjbG9zZWQiLDUyLDA1KQpkZXMuZG9vcigibG9ja2VkIiwzOCwwNykKZGVzLmRvb3IoImNsb3NlZCIsNDIsMDcpCmRlcy5kb29yKCJjbG9zZWQiLDQ2LDA3KQpkZXMuZG9vcigiY2xvc2VkIiw1MiwwNykKZGVzLmRvb3IoImxvY2tlZCIsMzgsMTIpCmRlcy5kb29yKCJjbG9zZWQiLDQ0LDEyKQpkZXMuZG9vcigiY2xvc2VkIiw0OCwxMikKZGVzLmRvb3IoImNsb3NlZCIsNTIsMTIpCmRlcy5kb29yKCJjbG9zZWQiLDQwLDE0KQpkZXMuZG9vcigiY2xvc2VkIiw0NiwxNCkKZGVzLmRvb3IoImNsb3NlZCIsNTIsMTQpCi0tIFVuYXR0ZW5kZWQgQWx0YXIgLSB1bmFsaWduZWQgZHVlIHRvIGNvbmZsaWN0IC0gcGxheWVyIG11c3QgYWxpZ24gaXQuCmRlcy5hbHRhcih7IHg9MjgseT0wOSwgYWxpZ249Im5vYWxpZ24iLCB0eXBlPSJhbHRhciIgfSkKLS0gVGhlIEdyYW5kIE1hc3RlcgpkZXMubW9uc3RlcigiR3JhbmQgTWFzdGVyIiwgMjgsIDEwKQotLSBObyB0cmVhc3VyZSBjaGVzdCEKLS0gZ3VhcmRzIGZvciB0aGUgYXVkaWVuY2UgY2hhbWJlcgpkZXMubW9uc3RlcigiYWJib3QiLCAzMiwgMDcpCmRlcy5tb25zdGVyKCJhYmJvdCIsIDMyLCAwOCkKZGVzLm1vbnN0ZXIoImFiYm90IiwgMzIsIDExKQpkZXMubW9uc3RlcigiYWJib3QiLCAzMiwgMTIpCmRlcy5tb25zdGVyKCJhYmJvdCIsIDMzLCAwNykKZGVzLm1vbnN0ZXIoImFiYm90IiwgMzMsIDA4KQpkZXMubW9uc3RlcigiYWJib3QiLCAzMywgMTEpCmRlcy5tb25zdGVyKCJhYmJvdCIsIDMzLCAxMikKLS0gTm9uIGRpZ2dhYmxlIHdhbGxzCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMTgsMDMsNTUsMTYpKQotLSBSYW5kb20gdHJhcHMKZm9yIGkgPSAxLCAyIGRvCiAgIGxvY2FsIHgseSA9IHNwYWNlbG9jczpybmRjb29yZCgxKTsKICAgZGVzLnRyYXAoImRhcnQiLHgseSkKZW5kCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKLS0gTW9uc3RlcnMgb24gc2llZ2UgZHV0eS4KZm9yIGkgPSAxLCA4IGRvCiAgIGxvY2FsIHgseSA9IHNwYWNlbG9jczpybmRjb29yZCgxKTsKICAgZGVzLm1vbnN0ZXIoImVhcnRoIGVsZW1lbnRhbCIsIHgsIHkpCmVuZApmb3IgaSA9IDEsIDQgZG8KICAgbG9jYWwgeCx5ID0gc3BhY2Vsb2NzOnJuZGNvb3JkKDEpOwogICBkZXMubW9uc3RlcigieG9ybiIsIHgsIHkpCmVuZAotLSBOZXRIYWNrIDMuNwlQcmllc3QuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjExICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxLTIgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQotLQotLQlUaGUgInN0YXJ0IiBsZXZlbCBmb3IgdGhlIHF1ZXN0LgotLQotLQlIZXJlIHlvdSBtZWV0IHlvdXIgKGJlc2llZ2VkKSBjbGFzcyBsZWFkZXIsIEhpZ2ggUHJpZXN0Ci0tCWFuZCByZWNlaXZlIHlvdXIgcXVlc3QgYXNzaWdubWVudC4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIiwgIm5vdGVsZXBvcnQiLCAiaGFyZGZsb29yIikKCmRlcy5tYXAoW1sKLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLnwuLi4uLi4uLi4uLi4uLi4ufC4uLi4ufC4uLi4ufC4uLi4ufC4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4ufC4uLS0tLS0tLS0tLS0tLi58LS0rLS0tLS0rLS0tLS0rLS18Li4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi58Li58Li4uLi4uLi4uLnwuLnwuLi4uLi4uLi4uLi4uLi4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLnwuLnwuLi4uLi4uLi4ufC4ufCstLS0rLS0tKy0tLS0tKy0tfC4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi0tLS4ufC4uLi4uLi4uLi58Li4uLi4ufC4uLnwuLi58Li4uLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uKy4uLi58Li4uLi4uLi4uLisuLi4uLi58Li4ufC4uLnwuLi4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4rLi4uLnwuLi4uLi4uLi4uKy4uLi4uLnwuLi58Li4ufC4uLi4ufC4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi0tLS4ufC4uLi4uLi4uLi58Li4uLi4ufC4uLnwuLi58Li4uLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi58Li58Li4uLi4uLi4uLnwuLnwrLS0tLS0rLS0tKy0tLSstLXwuLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLnwuLnwuLi4uLi4uLi4ufC4ufC4uLi4uLi4uLi4uLi4uLi4ufC4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4ufC4uLS0tLS0tLS0tLS0tLi58LS0rLS0tLS0rLS0tLS0rLS18Li4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi58Li4uLi4uLi4uLi4uLi4uLnwuLi4uLnwuLi4uLnwuLi4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCl1dKTsKLS0gRHVuZ2VvbiBEZXNjcmlwdGlvbgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDc1LDE5KSwgImxpdCIpCmRlcy5yZWdpb24oeyByZWdpb249ezI0LDA2LCAzMywxM30sIGxpdD0xLCB0eXBlPSJ0ZW1wbGUiLCBmaWxsZWQ9MiB9KQoKZGVzLnJlcGxhY2VfdGVycmFpbih7IHJlZ2lvbj17MDAsMDAsIDEwLDE5fSwgZnJvbXRlcnJhaW49Ii4iLCB0b3RlcnJhaW49IlQiLCBjaGFuY2U9MTAgfSkKZGVzLnJlcGxhY2VfdGVycmFpbih7IHJlZ2lvbj17NjUsMDAsIDc1LDE5fSwgZnJvbXRlcnJhaW49Ii4iLCB0b3RlcnJhaW49IlQiLCBjaGFuY2U9MTAgfSkKZGVzLnRlcnJhaW4oezA1LDA0fSwgIi4iKQoKbG9jYWwgc3BhY2Vsb2NzID0gc2VsZWN0aW9uLmZsb29kZmlsbCgwNSwwNCk7CgotLSBQb3J0YWwgYXJyaXZhbCBwb2ludApkZXMubGV2cmVnaW9uKHsgcmVnaW9uID0gezA1LDA0LDA1LDA0fSwgdHlwZT0iYnJhbmNoIiB9KQotLSBTdGFpcnMKZGVzLnN0YWlyKCJkb3duIiwgNTIsMDkpCi0tIERvb3JzCmRlcy5kb29yKCJsb2NrZWQiLDE4LDA5KQpkZXMuZG9vcigibG9ja2VkIiwxOCwxMCkKZGVzLmRvb3IoImNsb3NlZCIsMzQsMDkpCmRlcy5kb29yKCJjbG9zZWQiLDM0LDEwKQpkZXMuZG9vcigiY2xvc2VkIiw0MCwwNSkKZGVzLmRvb3IoImNsb3NlZCIsNDYsMDUpCmRlcy5kb29yKCJjbG9zZWQiLDUyLDA1KQpkZXMuZG9vcigibG9ja2VkIiwzOCwwNykKZGVzLmRvb3IoImNsb3NlZCIsNDIsMDcpCmRlcy5kb29yKCJjbG9zZWQiLDQ2LDA3KQpkZXMuZG9vcigiY2xvc2VkIiw1MiwwNykKZGVzLmRvb3IoImxvY2tlZCIsMzgsMTIpCmRlcy5kb29yKCJjbG9zZWQiLDQ0LDEyKQpkZXMuZG9vcigiY2xvc2VkIiw0OCwxMikKZGVzLmRvb3IoImNsb3NlZCIsNTIsMTIpCmRlcy5kb29yKCJjbG9zZWQiLDQwLDE0KQpkZXMuZG9vcigiY2xvc2VkIiw0NiwxNCkKZGVzLmRvb3IoImNsb3NlZCIsNTIsMTQpCi0tIFVuYXR0ZW5kZWQgQWx0YXIgLSB1bmFsaWduZWQgZHVlIHRvIGNvbmZsaWN0IC0gcGxheWVyIG11c3QgYWxpZ24gaXQuCmRlcy5hbHRhcih7IHg9MjgsIHk9MDksIGFsaWduPSJub2FsaWduIiwgdHlwZT0iYWx0YXIiIH0pCi0tIEhpZ2ggUHJpZXN0CmRlcy5tb25zdGVyKCJBcmNoIFByaWVzdCIsIDI4LCAxMCkKLS0gVGhlIHRyZWFzdXJlIG9mIEhpZ2ggUHJpZXN0CmRlcy5vYmplY3QoImNoZXN0IiwgMjcsIDEwKQotLSBrbmlnaHQgZ3VhcmRzIGZvciB0aGUgYXVkaWVuY2UgY2hhbWJlcgpkZXMubW9uc3RlcigiYWNvbHl0ZSIsIDMyLCAwNykKZGVzLm1vbnN0ZXIoImFjb2x5dGUiLCAzMiwgMDgpCmRlcy5tb25zdGVyKCJhY29seXRlIiwgMzIsIDExKQpkZXMubW9uc3RlcigiYWNvbHl0ZSIsIDMyLCAxMikKZGVzLm1vbnN0ZXIoImFjb2x5dGUiLCAzMywgMDcpCmRlcy5tb25zdGVyKCJhY29seXRlIiwgMzMsIDA4KQpkZXMubW9uc3RlcigiYWNvbHl0ZSIsIDMzLCAxMSkKZGVzLm1vbnN0ZXIoImFjb2x5dGUiLCAzMywgMTIpCi0tIE5vbiBkaWdnYWJsZSB3YWxscwpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDE4LDAzLDU1LDE2KSkKLS0gUmFuZG9tIHRyYXBzCmZvciBpID0gMSwgMiBkbwogICBsb2NhbCB4LHkgPSBzcGFjZWxvY3M6cm5kY29vcmQoMSk7CiAgIGRlcy50cmFwKCJkYXJ0Iix4LHkpCmVuZApkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tIE1vbnN0ZXJzIG9uIHNpZWdlIGR1dHkuCmZvciBpID0gMSwgMTIgZG8KICAgbG9jYWwgeCx5ID0gc3BhY2Vsb2NzOnJuZGNvb3JkKDEpOwogICBkZXMubW9uc3RlcigiaHVtYW4gem9tYmllIiwgeCwgeSk7CmVuZAotLSBOZXRIYWNrIDMuNwlSYW5nZXIuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODMgMjAxNS8wNS8yNSAwMDoxMzowMyAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjkgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQotLQotLQlUaGUgInN0YXJ0IiBsZXZlbCBmb3IgdGhlIHF1ZXN0LgotLQotLQlIZXJlIHlvdSBtZWV0IHlvdXIgKGJlc2llZ2VkKSBjbGFzcyBsZWFkZXIsIE9yaW9uLAotLQlhbmQgcmVjZWl2ZSB5b3VyIHF1ZXN0IGFzc2lnbm1lbnQuCi0tCmRlcy5sZXZlbF9pbml0KHsgc3R5bGUgPSAic29saWRmaWxsIiwgZmcgPSAiLiIgfSk7CgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub3RlbGVwb3J0IiwgImhhcmRmbG9vciIsICJhcmJvcmVhbCIpCgpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlPSJtaW5lcyIsIGZnPSIuIiwgYmc9Ii4iLCBzbW9vdGhlZD10cnVlLCBqb2luZWQ9dHJ1ZSwgbGl0PTEsIHdhbGxlZD1mYWxzZSB9KQpkZXMucmVwbGFjZV90ZXJyYWluKHsgcmVnaW9uPXswMCwwMCwgNzYsMTl9LCBmcm9tdGVycmFpbj0iLiIsIHRvdGVycmFpbj0iVCIsIGNoYW5jZT01IH0pCi0tMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MApkZXMubWFwKHsgaGFsaWduID0gImxlZnQiLCB2YWxpZ24gPSAiY2VudGVyIiwgbWFwID0gW1sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHgKICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gIHgKICAuLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uICAKIC4uICAuLi4uLi4uLi4uLi4uLi5GLi4uLi4uLi4uLi4uLi4uICAuLiAKIC4gIC4uICAgICAgICAgICAgIC5GLiAgICAgICAgICAgICAuLiAgLiAKIC4gLi4gIC4uLi4uLi4uLi4uLi5GLi4uLi4uLi4uLi4uLiAgLi4gLiAKIC4gLiAgLi4gICAgICAgICAgICAgICAgICAgICAgICAgLi4gIC4gLiAKIC4gLiAuLiAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gIC4uIC4uLiAKIC4gLiAuICAuLiAgICAgICAgICAgICAgICAgICAgIC4uICAuICAgICAKIC4uLiAuIC4uICAufC4uLi4uLi4uLi4uLi4uLi4uLi4uLiAuLi4uLi4KIEZGRiAuIC4gIC4uUy4uLi4uLi4uLi4uLi4uLi4uLiAgICAgICAgICAKIC4uLiAuIC4uICAufC4uLi4uLi4uLi4uLi4uLi4uICAuLi4uIC4uLiAKIC4gLiAuICAuLiAgICAgICAgICAgICAgICAgICAgIC4uICAuIC4gLiAKIC4gLiAuLiAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gIC4uIC4gLiAKIC4gLiAgLi4gICAgICAgICAgICAgICAgICAgICAgICAgLi4gIC4gLiAKIC4gLi4gIC4uLi4uLi4uLi4uLi5GLi4uLi4uLi4uLi4uLiAgLi4gLiAKIC4gIC4uICAgICAgICAgICAgIC5GLiAgICAgICAgICAgICAuLiAgLiAKIC4uICAuLi4uLi4uLi4uLi4uLi5GLi4uLi4uLi4uLi4uLi4uICAuLiAKICAuLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uICAKICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gIHgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHgKXV0gfSk7Ci0tIER1bmdlb24gRGVzY3JpcHRpb24KZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMCwwMCw0MCwyMCksICJsaXQiKQotLSBTdGFpcnMKZGVzLnN0YWlyKCJkb3duIiwgMTAsMTApCi0tIFBvcnRhbCBhcnJpdmFsIHBvaW50OyBqdXN0IGFib3V0IGFueXdoZXJlIG9uIHRoZSByaWdodCBoYW5kIHNpZGUgb2YgdGhlIG1hcApkZXMubGV2cmVnaW9uKHsgcmVnaW9uID0gezUxLDIsNzcsMTh9LCByZWdpb25faXNsZXYgPSAxLCB0eXBlPSJicmFuY2giIH0pCi0tIE9yaW9uCmRlcy5tb25zdGVyKCJPcmlvbiIsIDIwLCAxMCkKLS0gVGhlIHRyZWFzdXJlIG9mIE9yaW9uCmRlcy5vYmplY3QoImNoZXN0IiwgMjAsIDEwKQotLSBHdWFyZHMgZm9yIHRoZSBhdWRpZW5jZSBjaGFtYmVyCmRlcy5tb25zdGVyKCJodW50ZXIiLCAxOSwgMDkpCmRlcy5tb25zdGVyKCJodW50ZXIiLCAyMCwgMDkpCmRlcy5tb25zdGVyKCJodW50ZXIiLCAyMSwgMDkpCmRlcy5tb25zdGVyKCJodW50ZXIiLCAxOSwgMTApCmRlcy5tb25zdGVyKCJodW50ZXIiLCAyMSwgMTApCmRlcy5tb25zdGVyKCJodW50ZXIiLCAxOSwgMTEpCmRlcy5tb25zdGVyKCJodW50ZXIiLCAyMCwgMTEpCmRlcy5tb25zdGVyKCJodW50ZXIiLCAyMSwgMTEpCi0tIE5vbiBkaWdnYWJsZSB3YWxscwpkZXMubm9uX2RpZ2dhYmxlKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDQwLDIwKSkKLS0gVHJhcHMKZGVzLnRyYXAoImFycm93IiwzMCwwOSkKZGVzLnRyYXAoImFycm93IiwzMCwxMCkKZGVzLnRyYXAoInBpdCIsNDAsMDkpCmRlcy50cmFwKCJzcGlrZWQgcGl0IikKZGVzLnRyYXAoImJlYXIiKQpkZXMudHJhcCgiYmVhciIpCi0tIE1vbnN0ZXJzIG9uIHNpZWdlIGR1dHkuCmRlcy5tb25zdGVyKHsgaWQgPSAibWlub3RhdXIiLCB4PTMzLCB5PTA5LCBwZWFjZWZ1bD0wLCBhc2xlZXA9MSB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvcmVzdCBjZW50YXVyIiwgeD0xOSwgeT0wMywgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvcmVzdCBjZW50YXVyIiwgeD0xOSwgeT0wNCwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvcmVzdCBjZW50YXVyIiwgeD0xOSwgeT0wNSwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvcmVzdCBjZW50YXVyIiwgeD0yMSwgeT0wMywgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvcmVzdCBjZW50YXVyIiwgeD0yMSwgeT0wNCwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvcmVzdCBjZW50YXVyIiwgeD0yMSwgeT0wNSwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvcmVzdCBjZW50YXVyIiwgeD0wMSwgeT0wOSwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvcmVzdCBjZW50YXVyIiwgeD0wMiwgeT0wOSwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvcmVzdCBjZW50YXVyIiwgeD0wMywgeT0wOSwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvcmVzdCBjZW50YXVyIiwgeD0wMSwgeT0xMSwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvcmVzdCBjZW50YXVyIiwgeD0wMiwgeT0xMSwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvcmVzdCBjZW50YXVyIiwgeD0wMywgeT0xMSwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvcmVzdCBjZW50YXVyIiwgeD0xOSwgeT0xNSwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvcmVzdCBjZW50YXVyIiwgeD0xOSwgeT0xNiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvcmVzdCBjZW50YXVyIiwgeD0xOSwgeT0xNywgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvcmVzdCBjZW50YXVyIiwgeD0yMSwgeT0xNSwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvcmVzdCBjZW50YXVyIiwgeD0yMSwgeT0xNiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImZvcmVzdCBjZW50YXVyIiwgeD0yMSwgeT0xNywgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInBsYWlucyBjZW50YXVyIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInBsYWlucyBjZW50YXVyIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInBsYWlucyBjZW50YXVyIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInBsYWlucyBjZW50YXVyIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInBsYWlucyBjZW50YXVyIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInBsYWlucyBjZW50YXVyIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInNjb3JwaW9uIiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gInNjb3JwaW9uIiwgcGVhY2VmdWw9MCB9KQotLSBOZXRIYWNrIDMuNwlSb2d1ZS5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4NCAyMDE1LzA1LzI1IDAwOjEzOjA0ICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTEgJAotLQlDb3B5cmlnaHQgKGMpIDE5OTIgYnkgRGVhbiBMdWljawotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQotLQotLQlUaGUgInN0YXJ0IiBsZXZlbCBmb3IgdGhlIHF1ZXN0LgotLQotLQlIZXJlIHlvdSBtZWV0IHlvdXIgKGJlc2llZ2VkKSBjbGFzcyBsZWFkZXIsIE1hc3RlciBvZiBUaGlldmVzCi0tCWFuZCByZWNlaXZlIHlvdXIgcXVlc3QgYXNzaWdubWVudC4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIiwgIm5vdGVsZXBvcnQiLCAiaGFyZGZsb29yIiwgIm5vbW1hcCIpCgotLSAgICAgICAgIDEgICAgICAgICAyICAgICAgICAgMyAgICAgICAgIDQgICAgICAgICA1ICAgICAgICAgNiAgICAgICAgIDcKLS0xMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDUKZGVzLm1hcChbWwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0uLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCnwuLi4uLnwufHwuLi4uLi4uLi4ufC4uLi58Li4uLi4ufC58Li4uLi4uLi4ufC4uLi4uLi4rLi4uLi4uLi4uLi4uLS0tLi4uLi4uLnwKfC4uLi4ufC4uKy4uLi4uLi4uLi4rLi4uLi0tLS4uLi5TLnwuLi4tUy0tLS0tLi0tLS0tLnwuLi4uLi4uLi4uLi4rLisuLi4uLi4ufAp8Li4uLi4rLnx8Li4uLi4uLi4tLS0uLi4uLi58Li4uLnwufC4uLnwuLi4uLnwufC4uLnwuLS0tLi4uLi4tLS0tLS0uLS0tLS0tLS18CnwtLS0tLXwuLS0tLS0tLXwuLnwuLi4uLi4uLi0tLS0tLS4tLS0tLS4uLi4ufC4tLS4ufC4uLi0tLS0tLS0uLi4uLi4uLi4uLi4uLnwKfC4uLi4ufC4uLi4uLi4uLS0tLS0tKy0tLS0tLS4uLi4uLi4uLi4rLi4uLi58Li4tLVMtLS0uLi4uLi4uLi4tLS0tLS0uLS0tLS0uLgp8Li4uLi58Li0tLS0tLS4uLi4uLi4uLi4uLi4uLi0tLS0tLn19Li0tLS0tLS0tLnwuLi4uLS0tLS0tLS4tLS0uLi4ufC4rLi4uLS18CnwuLi0rLS0ufC4uLi58LS0tLS0uLS0tLS0tLS0ufC4uLnwuLi4uLisuLi4uLnwufC4uLi58Li4uLi4rLisuLi4uLi58Li0tLi4uLnwKfC4ufC4uLi58Li4uLnwuLi4uKy58Li4uLi4ufC58Li4uLS0tLS0ufC4uLi4ufC4tLS4uLnwuLi4uLnwufC4uLi4uLnwuLnwuLi4ufAp8Li58Li0tLS0tUy0tLS0uLi58LisuLi4uLS0tLS0uLi58Li4ufC4tLS0tLi58Li58Li0tLS4uLi4tLS4tLS1TLS0tLS0ufC0tLS18CnwuLnwufC4uLi4uLi4ufC4uLi0tLS0tLS58LlMuLi4uLnwuLi58Li4uLi0tLS0tLisufC4uLi4uLnwuLnwuLi4uLi4ufC58Li4uLnwKfC0tLS4tLS0tLS0tLi58Li4ufC4uLi58LnwufC4uLi4ufC4uLi0tLS0ufC4uLnwufC0tLS4uLi4ufC58LS4uLi4uLi58Li0tLS4ufAouLi4uLi4uLi4uLnwuLlMuLi58Li4uLi0tLS4tLS0tUy0tLS0uLnwuLi58Li4uKy58Li4tLS0tLS0tLi0tLSstLi4uLnwuLi4tLSt8CnwtLS0tLS0tLS0uLS0tLS0tLS0tLi4ufC4uLi4uLnwuLi4uUy4ufC4tLS0uLi58LnwuLnwuLi4uLi4uLi4uLi0tLS0uLS0tLi4uLnwKfC4uLi4uLi4ufC4uLi4uLi4uLnwuLi4rLi0tLS0tLS4uLi58LS0tLi0tLS4uLnwuLS0rLS4tLS0tLi0tLS0uLi4ufC4rLi4uLS0rfAp8Li4uLi4uLi58Li0tLSstLS0ufC0tLS0uLS0uLi4uLi4uLnwuLi4uLi4tLS0tLS4uLi4uLnwuLnwuLnwuLS0rLS58Li1TLS58Li58CnwuLi4uLi4uLnwufC4uLi4ufC4uLi4uLi4uLS0tLS0tLS0tLS4tLS0tLi4uLi4uLi0tLS4tLS4ufC0ufC4uLi58Li0tLS0tLnwuLnwKfC0tLS0uLi4uKy58Li4uLi4tLS0tKy0tLS4uLi4uLi4uLi4uLnwuLnwtLS0tLS0tLS4rLnwuLi5TUy58Li4uLnwuLi4uLi4ufC4ufAp8Li4uLS0rLS0tLS0uLi4uLnwuLi4uLi58Li0tLS0tLS0tLS0tLS4uLi4uLi4uLi4uLi0tLS4uLnx8Li0tLS0tLSstLSstLS0tLi58CnwuLi4uLi4uLi4uUy4uLi4ufC4uLi4uLnwufC4uLi4uLi4uLi5TLi4uLi4uLi4uLi4ufC4uLi4ufHwuLi58Li4uLi58Li4uLnwuLnwKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpdXSk7Ci0tIER1bmdlb24gRGVzY3JpcHRpb24KLS1SRUdJT046KDAwLDAwLDc1LDIwKSxsaXQsIm9yZGluYXJ5IgoKbG9jYWwgc3RyZWV0cyA9IHNlbGVjdGlvbi5mbG9vZGZpbGwoMCwxMikKCi0tIFRoZSBkb3duIHN0YWlycyBpcyBhdCBvbmUgb2YgdGhlIDQgImV4aXRzIi4gIFRoZSBvdGhlcnMgYXJlIG1pbWljcywKLS0gbWltaWNpbmcgc3RhaXJ3ZWxscy4KbG9jYWwgcGxhY2UgPSB7IHszMywwfSwgezAsMTJ9LCB7MjUsMjB9LCB7NzUsMDV9IH0Kc2h1ZmZsZShwbGFjZSkKCmRlcy5zdGFpcih7IGRpciA9ICJkb3duIiwgY29vcmQgPSBwbGFjZVsxXSB9KQpkZXMubW9uc3Rlcih7IGlkID0gImdpYW50IG1pbWljIiwgY29vcmQgPSBwbGFjZVsyXSwgYXBwZWFyX2FzID0gInRlcjpzdGFpcmNhc2UgZG93biIgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJsYXJnZSBtaW1pYyIsIGNvb3JkID0gcGxhY2VbM10sIGFwcGVhcl9hcyA9ICJ0ZXI6c3RhaXJjYXNlIGRvd24iIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAic21hbGwgbWltaWMiLCBjb29yZCA9IHBsYWNlWzRdLCBhcHBlYXJfYXMgPSAidGVyOnN0YWlyY2FzZSBkb3duIiB9KQotLSBQb3J0YWwgYXJyaXZhbCBwb2ludApkZXMubGV2cmVnaW9uKHsgcmVnaW9uID0gezE5LDA5LDE5LDA5fSwgdHlwZT0iYnJhbmNoIiB9KQotLSBEb29ycyAoc2VjcmV0KQotLURPT1I6bG9ja2VkfGNsb3NlZHxvcGVuLCh4eCx5eSkKZGVzLmRvb3IoImxvY2tlZCIsIDMyLCAyKQpkZXMuZG9vcigibG9ja2VkIiwgNjMsIDkpCmRlcy5kb29yKCJsb2NrZWQiLCAyNywxMCkKZGVzLmRvb3IoImxvY2tlZCIsIDMxLDEyKQpkZXMuZG9vcigibG9ja2VkIiwgMzUsMTMpCmRlcy5kb29yKCJsb2NrZWQiLCA2OSwxNSkKZGVzLmRvb3IoImxvY2tlZCIsIDU2LDE3KQpkZXMuZG9vcigibG9ja2VkIiwgNTcsMTcpCmRlcy5kb29yKCJsb2NrZWQiLCAxMSwxOSkKZGVzLmRvb3IoImxvY2tlZCIsIDM3LDE5KQpkZXMuZG9vcigibG9ja2VkIiwgMzksIDIpCmRlcy5kb29yKCJsb2NrZWQiLCA0OSwgNSkKZGVzLmRvb3IoImxvY2tlZCIsIDEwLCA5KQpkZXMuZG9vcigibG9ja2VkIiwgMTQsMTIpCi0tIERvb3JzIChyZWd1bGFyKQpkZXMuZG9vcigiY2xvc2VkIiwgNTIsIDEpCmRlcy5kb29yKCJjbG9zZWQiLCAgOSwgMikKZGVzLmRvb3IoImNsb3NlZCIsIDIwLCAyKQpkZXMuZG9vcigiY2xvc2VkIiwgNjUsIDIpCmRlcy5kb29yKCJjbG9zZWQiLCA2NywgMikKZGVzLmRvb3IoImNsb3NlZCIsICA2LCAzKQpkZXMuZG9vcigiY2xvc2VkIiwgMjEsIDUpCmRlcy5kb29yKCJjbG9zZWQiLCAzOCwgNSkKZGVzLmRvb3IoImNsb3NlZCIsIDY5LCA2KQpkZXMuZG9vcigiY2xvc2VkIiwgIDQsIDcpCmRlcy5kb29yKCJjbG9zZWQiLCAzOSwgNykKZGVzLmRvb3IoImNsb3NlZCIsIDU4LCA3KQpkZXMuZG9vcigiY2xvc2VkIiwgNjAsIDcpCmRlcy5kb29yKCJjbG9zZWQiLCAxOCwgOCkKZGVzLmRvb3IoImNsb3NlZCIsIDIwLCA5KQpkZXMuZG9vcigiY2xvc2VkIiwgNDgsMTApCmRlcy5kb29yKCJjbG9zZWQiLCA0NiwxMikKZGVzLmRvb3IoImNsb3NlZCIsIDYyLDEyKQpkZXMuZG9vcigiY2xvc2VkIiwgNzQsMTIpCmRlcy5kb29yKCJjbG9zZWQiLCAyMywxNCkKZGVzLmRvb3IoImNsb3NlZCIsIDIzLDE0KQpkZXMuZG9vcigiY2xvc2VkIiwgNTAsMTQpCmRlcy5kb29yKCJjbG9zZWQiLCA2OCwxNCkKZGVzLmRvb3IoImNsb3NlZCIsIDc0LDE0KQpkZXMuZG9vcigiY2xvc2VkIiwgMTQsMTUpCmRlcy5kb29yKCJjbG9zZWQiLCA2MywxNSkKZGVzLmRvb3IoImNsb3NlZCIsICA5LDE3KQpkZXMuZG9vcigiY2xvc2VkIiwgMjEsMTcpCmRlcy5kb29yKCJjbG9zZWQiLCA1MCwxNykKZGVzLmRvb3IoImNsb3NlZCIsICA2LDE4KQpkZXMuZG9vcigiY2xvc2VkIiwgNjUsMTgpCmRlcy5kb29yKCJjbG9zZWQiLCA2OCwxOCkKLS0gTWFzdGVyIG9mIFRoaWV2ZXMKZGVzLm1vbnN0ZXIoIk1hc3RlciBvZiBUaGlldmVzIiwgMzYsIDExKQotLSBUaGUgdHJlYXN1cmUgb2YgTWFzdGVyIG9mIFRoaWV2ZXMKZGVzLm9iamVjdCgiY2hlc3QiLCAzNiwgMTEpCi0tIHRodWcgZ3VhcmRzLCByb29tICMxCmRlcy5tb25zdGVyKCJ0aHVnIiwgMjgsIDEwKQpkZXMubW9uc3RlcigidGh1ZyIsIDI5LCAxMSkKZGVzLm1vbnN0ZXIoInRodWciLCAzMCwgMDkpCmRlcy5tb25zdGVyKCJ0aHVnIiwgMzEsIDA3KQotLSB0aHVnIGd1YXJkcywgcm9vbSAjMgpkZXMubW9uc3RlcigidGh1ZyIsIDMxLCAxMykKZGVzLm1vbnN0ZXIoInRodWciLCAzMywgMTQpCmRlcy5tb25zdGVyKCJ0aHVnIiwgMzAsIDE1KQotLXRodWcgZ3VhcmRzLCByb29tICMzCmRlcy5tb25zdGVyKCJ0aHVnIiwgMzUsIDA5KQpkZXMubW9uc3RlcigidGh1ZyIsIDM2LCAxMykKLS0gTm9uIGRpZ2dhYmxlIHdhbGxzCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMjApKQotLSBSYW5kb20gdHJhcHMKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQotLQotLSBNb25zdGVycyB0byBnZXQgaW4gdGhlIHdheS4KLS0KLS0gV2VzdCBleGl0CmRlcy5tb25zdGVyKHsgaWQgPSAibGVwcmVjaGF1biIsIHg9MDEsIHk9MTIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJ3YXRlciBueW1waCIsIHg9MDIsIHk9MTIsIHBlYWNlZnVsPTAgfSkKLS0gTm9ydGggZXhpdApkZXMubW9uc3Rlcih7IGlkID0gIndhdGVyIG55bXBoIiwgeD0zMywgeT0wMSwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImxlcHJlY2hhdW4iLCB4PTMzLCB5PTAyLCBwZWFjZWZ1bD0wIH0pCi0tIEVhc3QgZXhpdApkZXMubW9uc3Rlcih7IGlkID0gIndhdGVyIG55bXBoIiwgeD03NCwgeT0wNSwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gImxlcHJlY2hhdW4iLCB4PTc0LCB5PTA0LCBwZWFjZWZ1bD0wIH0pCi0tIFNvdXRoIGV4aXQKZGVzLm1vbnN0ZXIoeyBpZCA9ICJsZXByZWNoYXVuIiwgeD0yNSwgeT0xOSwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIndhdGVyIG55bXBoIiwgeD0yNSwgeT0xOCwgcGVhY2VmdWw9MCB9KQotLSBXYW5kZXJpbmcgdGhlIHN0cmVldHMuCmZvciBpPTEsNCArIG1hdGgucmFuZG9tKDEgLSAxLDEqMykgIGRvCiAgIGRlcy5tb25zdGVyKHsgaWQgPSAid2F0ZXIgbnltcGgiLCBjb29yZCA9IHtzdHJlZXRzOnJuZGNvb3JkKDEpfSwgcGVhY2VmdWw9MCB9KQogICBkZXMubW9uc3Rlcih7IGlkID0gImxlcHJlY2hhdW4iLCBjb29yZCA9IHtzdHJlZXRzOnJuZGNvb3JkKDEpfSwgcGVhY2VmdWw9MCB9KQplbmQKZm9yIGk9MSw3ICsgbWF0aC5yYW5kb20oMSAtIDEsMSozKSAgZG8KICAgZGVzLm1vbnN0ZXIoeyBpZCA9ICJjaGFtZWxlb24iLCBjb29yZCA9IHtzdHJlZXRzOnJuZGNvb3JkKDEpfSwgcGVhY2VmdWw9MCB9KQplbmQKLS0gTmV0SGFjayAzLjcJU2FtdXJhaS5kZXMJJE5IRFQtRGF0ZTogMTQzMjUxMjc4MyAyMDE1LzA1LzI1IDAwOjEzOjAzICQgICROSERULUJyYW5jaDogbWFzdGVyICQ6JE5IRFQtUmV2aXNpb246IDEuMTEgJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEtOTIgYnkgTS4gU3RlcGhlbnNvbiwgUC4gV2lubmVyCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCi0tCi0tCVRoZSAic3RhcnQiIGxldmVsIGZvciB0aGUgcXVlc3QuCi0tCi0tCUhlcmUgeW91IG1lZXQgeW91ciAoYmVzaWVnZWQpIGNsYXNzIGxlYWRlciwgTG9yZCBTYXRvCi0tCWFuZCByZWNlaXZlIHlvdXIgcXVlc3QgYXNzaWdubWVudC4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIiwgIm5vdGVsZXBvcnQiLCAiaGFyZGZsb29yIikKCmRlcy5tYXAoW1sKLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5QUC4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5QUC4uLi4uLi4uLi4uCi4uLi4uLi4uLi4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0uLi5QUFAuLi4uLi4uLi4KLi4uLi4uLi4uLnwuLi4uLi58Li4uLi4uLi4ufC4uLnwuLi4uLi4uLi4uLi4uLnwuLi58Li4uLi4uLi4ufC4uLi5QUFBQUC4uLi4uLgouLi4uLi4uLi4gfC4uLi4uLnwuLi4uLi4uLi5TLi4ufC4uLi4uLi4uLi4uLi4ufC4uLlMuLi4uLi4uLi58Li4uLi5QUFBQLi4uLi4uCi4uLi4uLi4uLi58Li4uLi4ufC4uLi4uLi4uLnwtLS18Li4uLi4uLi4uLi4uLi58LS0tfC4uLi4uLi4uLnwuLi4uLlBQUC4uLi4uLi4KLi4uLi4uLi4uLisuLi4uLi58Li4uLi4uLi4uKy4uLi0tLS0tLS0rKy0tLS0tLS0uLi4rLi4uLi4uLi4ufC4uLi4uLlBQLi4uLi4uLgouLi4uLi4uLi4uKy4uLi4uLnwuLi4uLi4uLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLnwuLi4uLi4uLi58Li4uLi4uUFAuLi4uLi4uCi4uLi4uLi4uLiB8Li4uLi4uLS0tLS0tLS0tLS0tLS0tLS0tLS0tKystLS0tLS0tLS0tLS0tLS0tLS0tLXwuLi4uLi4uLlBQLi4uLi4KLi4uLi4uLi4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC4uLi4uLi4uLlBQLi4uLgouLi4uLi4uLi4ufC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58Li4uLi4uLi4uLi5QUC4uCi4uLi4uLi4uLi4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLi4uLS0tLS0tLXwuLi4uLi4uLi4uLi5QUC4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufC4uLi4uLi4uLi4uLi4uLi4ufC4uLi4uLi4uLi4uLi5QUAouLi4uLi4uLi4uLi4uLiAuLi4uLi4uLi4uLi4uLi4uLiAuLi4uLi4uLi58Li4uLi4uLi4uLi4uLi4uLi58Li4uLi4uLi4uLi4uLi5QCi4uLi4uLi4uLi4uLi4gfSAuLi4uLi4uLi4uLi4uLi4gfSAuLi4uLi4uLnwuLi4uLi4uLi4uLi4uLi4uLnwuLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4gLi4uLi4uLi5QUC4uLi4uLi4gLi4uLi4uLi4ufC4uLi4uLi4uLi4uLi4uLi4ufC4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLi5QUFAuLi4uLi4uLi4uLi4uLi4uLi58Li4uLi4uLi4uLi4uLi4uLi58Li4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5QUC4uLi4uLi4uLi4uLi4uLi4uLi0tLS0tLS0tLS0tLS0tLS0tLS0uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCl1dKTsKLS0gRHVuZ2VvbiBEZXNjcmlwdGlvbgpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDAwLDAwLDc1LDE5KSwgImxpdCIpCmRlcy5yZWdpb24oeyByZWdpb249ezE4LDAzLCAyNiwwN30sIGxpdD0xLCB0eXBlPSJ0aHJvbmUiLCBmaWxsZWQ9MiB9KQotLSBQb3J0YWwgYXJyaXZhbCB6b25lCmRlcy5sZXZyZWdpb24oeyByZWdpb24gPSB7NjIsMTIsNzAsMTd9LCB0eXBlPSJicmFuY2giIH0pCi0tIFN0YWlycwpkZXMuc3RhaXIoImRvd24iLCAyOSwwNCkKLS0gRG9vcnMKZGVzLmRvb3IoImxvY2tlZCIsMTAsMDYpCmRlcy5kb29yKCJsb2NrZWQiLDEwLDA3KQpkZXMuZG9vcigiY2xvc2VkIiwyNywwNCkKZGVzLmRvb3IoImNsb3NlZCIsMjcsMDYpCmRlcy5kb29yKCJjbG9zZWQiLDM4LDA2KQpkZXMuZG9vcigibG9ja2VkIiwzOCwwOCkKZGVzLmRvb3IoImNsb3NlZCIsMzksMDYpCmRlcy5kb29yKCJsb2NrZWQiLDM5LDA4KQpkZXMuZG9vcigiY2xvc2VkIiw1MCwwNCkKZGVzLmRvb3IoImNsb3NlZCIsNTAsMDYpCi0tIExvcmQgU2F0bwpkZXMubW9uc3RlcigiTG9yZCBTYXRvIiwgMjAsIDA0KQotLSBUaGUgdHJlYXN1cmUgb2YgTG9yZCBTYXRvCmRlcy5vYmplY3QoImNoZXN0IiwgMjAsIDA0KQotLSByb3NoaSBndWFyZHMgZm9yIHRoZSBhdWRpZW5jZSBjaGFtYmVyCmRlcy5tb25zdGVyKCJyb3NoaSIsIDE4LCAwNCkKZGVzLm1vbnN0ZXIoInJvc2hpIiwgMTgsIDA1KQpkZXMubW9uc3Rlcigicm9zaGkiLCAxOCwgMDYpCmRlcy5tb25zdGVyKCJyb3NoaSIsIDE4LCAwNykKZGVzLm1vbnN0ZXIoInJvc2hpIiwgMjYsIDA0KQpkZXMubW9uc3Rlcigicm9zaGkiLCAyNiwgMDUpCmRlcy5tb25zdGVyKCJyb3NoaSIsIDI2LCAwNikKZGVzLm1vbnN0ZXIoInJvc2hpIiwgMjYsIDA3KQotLSBOb24gZGlnZ2FibGUgd2FsbHMKZGVzLm5vbl9kaWdnYWJsZShzZWxlY3Rpb24uYXJlYSgwMCwwMCw3NSwxOSkpCi0tIFJhbmRvbSB0cmFwcwpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQotLSBNb25zdGVycyBvbiBzaWVnZSBkdXR5LgpkZXMubW9uc3Rlcih7IGlkID0gIm5pbmphIiwgeD02NCwgeT0wMCwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcigid29sZiIsIDY1LCAwMSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJuaW5qYSIsIHg9NjcsIHk9MDIsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJuaW5qYSIsIHg9NjksIHk9MDUsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJuaW5qYSIsIHg9NjksIHk9MDYsIHBlYWNlZnVsPTAgfSkKZGVzLm1vbnN0ZXIoIndvbGYiLCA2OSwgMDcpCmRlcy5tb25zdGVyKHsgaWQgPSAibmluamEiLCB4PTcwLCB5PTA2LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibmluamEiLCB4PTcwLCB5PTA3LCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKHsgaWQgPSAibmluamEiLCB4PTcyLCB5PTAxLCBwZWFjZWZ1bD0wIH0pCmRlcy5tb25zdGVyKCJ3b2xmIiwgNzUsIDA5KQpkZXMubW9uc3Rlcih7IGlkID0gIm5pbmphIiwgeD03MywgeT0wNSwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcih7IGlkID0gIm5pbmphIiwgeD02OCwgeT0wMiwgcGVhY2VmdWw9MCB9KQpkZXMubW9uc3Rlcigic3RhbGtlciIpCi0tIE5ldEhhY2sgMy43CVRvdXJpc3QuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODQgMjAxNS8wNS8yNSAwMDoxMzowNCAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjggJAotLQlDb3B5cmlnaHQgKGMpIDE5ODkgYnkgSmVhbi1DaHJpc3RvcGhlIENvbGxldAotLQlDb3B5cmlnaHQgKGMpIDE5OTEsOTIgYnkgTS4gU3RlcGhlbnNvbiwgUC4gV2lubmVyCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCi0tCi0tCVRoZSAic3RhcnQiIGxldmVsIGZvciB0aGUgcXVlc3QuCi0tCi0tCUhlcmUgeW91IG1lZXQgeW91ciAoYmVzaWVnZWQpIGNsYXNzIGxlYWRlciwgVHdvZmxvd2VyCi0tCWFuZCByZWNlaXZlIHlvdXIgcXVlc3QgYXNzaWdubWVudC4KLS0KZGVzLmxldmVsX2luaXQoeyBzdHlsZSA9ICJzb2xpZGZpbGwiLCBmZyA9ICIgIiB9KTsKCmRlcy5sZXZlbF9mbGFncygibWF6ZWxldmVsIiwgIm5vdGVsZXBvcnQiLCAiaGFyZGZsb29yIikKZGVzLm1hcChbWwouLi4uLi4ufX0uLi4uLS0tLS0tLS0tLi4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLi4uCi4uLi4uLi4ufX0uLi58Li4uLi4uLnwuLnwuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS4uLnwuLi4KLi4uLi4uLi4ufX0uLnwuLi4uLi4ufC4ufC58Li4uLi4ufC4uLi4uLnwuLi4uLi4uLi4uLi4ufC4uLi4uLnwuLi4uLi58Li4ufC4uLgouLi4uLi4uLi4ufX0ufC4uLi4uLi58Li58LnwuLi4uLi4rLi4uLi4uKy4uLi4uLi4uLi4uLi4rLi4uLi4uKy4uXC4uLnwuLi58Li4uCi4uLi4uLi4uLi4ufX19Li4uLi4uLi4uLnwufC4uLi4uLnwuLi4uLi58Li4uLi4uLi4uLi4uLnwuLi4uLi58Li4uLi4ufC4uLnwuLi4KLi4uLi4uLi4uLi4uLn19Li4uLi4uLi4ufC58LS0tLVMtfC0tUy0tLXxTLS0tLS0tLS0tLVMtfC0tLVMtLXwtLS0tLS18Li4ufC4uLgouLi4uLi4uLi4uLi4uLn19fS4uLi4uLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi58Li4uCi4uLi4uLi4uLi4uLi4uLi59fX0uLi4uLi0tLS1TLS0tLS0tKystLVMtLS0tLS0tLS0tUy0tLS0tLS0tLS1TLS0tLS0tLS0tLS0uLi4KLi4uLi4uLi4uLi4uLi4uLi4ufX0uLi4uLi4uLi4uLiAgICAuLiAgICAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4tLS0tLS0tLi4uLi4ufX19fS4uLi4uLi4ufX19fS4ufX19fS4ufX19fS4ufX19fS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLnwuLi4uLnwuLi4uLi4ufX19fX19Li59fX19ICAgLi4gICB9fX19Li59fX19Li59fX0uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4ufC4uLi4uKy4uLi4uLi4uLi4ufX19fX19Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4ufX19Li59fX19Li59fX0uLn19fS4uLgouLi4uLi58Li4uLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLn19fX0uLn19fS4ufX19fS59fX19Ci4uLi4uLi0tLS0tLS0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4tLS0tLS0tLi4uLi4uLS0tLS0tLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLnwuLi4uLnwuLi4uLi58Li4uLi58Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4ufC4uLi4uKy4uLi4uLisuLi4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi58Li4uLi58Li4uLi4ufC4uLi4ufC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi0tLS0tLS0uLi4uLi4tLS0tLS0tLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KXV0pOwotLSBEdW5nZW9uIERlc2NyaXB0aW9uCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMTkpLCAibGl0IikKZGVzLnJlZ2lvbih7IHJlZ2lvbj17MTQsMDEsIDIwLDAzfSwgbGl0PTAsIHR5cGU9Im1vcmd1ZSIsIGZpbGxlZD0xIH0pCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMDcsMTAsMTEsMTIpLCAidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDA0LDE2LDA4LDE4KSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgxNywxNiwyMSwxOCksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoMjcsMDIsMzIsMDQpLCAidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDM0LDAyLDM5LDA0KSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg0MSwwMiw1MywwNCksICJ1bmxpdCIpCmRlcy5yZWdpb24oc2VsZWN0aW9uLmFyZWEoNTUsMDIsNjAsMDQpLCAidW5saXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDYyLDAyLDY3LDA0KSwgImxpdCIpCi0tIFN0YWlycwpkZXMuc3RhaXIoImRvd24iLCA2NiwwMykKLS0gUG9ydGFsIGFycml2YWwgcG9pbnQKZGVzLmxldnJlZ2lvbih7IHJlZ2lvbiA9IHs2OCwxNCw2OCwxNH0sIHR5cGU9ImJyYW5jaCIgfSkKLS0gTm9uIGRpZ2dhYmxlIHdhbGxzCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMTkpKQotLSBEb29ycwpkZXMuZG9vcigibG9ja2VkIiwzMSwwNSkKZGVzLmRvb3IoImxvY2tlZCIsMzYsMDUpCmRlcy5kb29yKCJsb2NrZWQiLDQxLDA1KQpkZXMuZG9vcigibG9ja2VkIiw1MiwwNSkKZGVzLmRvb3IoImxvY2tlZCIsNTgsMDUpCmRlcy5kb29yKCJsb2NrZWQiLDI4LDA3KQpkZXMuZG9vcigibG9ja2VkIiwzOSwwNykKZGVzLmRvb3IoImxvY2tlZCIsNTAsMDcpCmRlcy5kb29yKCJsb2NrZWQiLDYxLDA3KQpkZXMuZG9vcigiY2xvc2VkIiwzMywwMykKZGVzLmRvb3IoImNsb3NlZCIsNDAsMDMpCmRlcy5kb29yKCJjbG9zZWQiLDU0LDAzKQpkZXMuZG9vcigiY2xvc2VkIiw2MSwwMykKZGVzLmRvb3IoIm9wZW4iLDEyLDExKQpkZXMuZG9vcigib3BlbiIsMDksMTcpCmRlcy5kb29yKCJvcGVuIiwxNiwxNykKZGVzLmRvb3IoImxvY2tlZCIsMzUsMDcpCmRlcy5kb29yKCJsb2NrZWQiLDM2LDA3KQotLSBNb25zdGVycyBvbiBzaWVnZSBkdXR5LgpkZXMubW9uc3RlcigiZ2lhbnQgc3BpZGVyIikKZGVzLm1vbnN0ZXIoImdpYW50IHNwaWRlciIpCmRlcy5tb25zdGVyKCJnaWFudCBzcGlkZXIiKQpkZXMubW9uc3RlcigiZ2lhbnQgc3BpZGVyIikKZGVzLm1vbnN0ZXIoImdpYW50IHNwaWRlciIpCmRlcy5tb25zdGVyKCJnaWFudCBzcGlkZXIiKQpkZXMubW9uc3RlcigiZ2lhbnQgc3BpZGVyIikKZGVzLm1vbnN0ZXIoImdpYW50IHNwaWRlciIpCmRlcy5tb25zdGVyKCJnaWFudCBzcGlkZXIiKQpkZXMubW9uc3RlcigiZ2lhbnQgc3BpZGVyIikKZGVzLm1vbnN0ZXIoImdpYW50IHNwaWRlciIpCmRlcy5tb25zdGVyKCJnaWFudCBzcGlkZXIiKQpkZXMubW9uc3RlcigicyIpCmRlcy5tb25zdGVyKCJzIikKZGVzLm1vbnN0ZXIoImZvcmVzdCBjZW50YXVyIikKZGVzLm1vbnN0ZXIoImZvcmVzdCBjZW50YXVyIikKZGVzLm1vbnN0ZXIoImZvcmVzdCBjZW50YXVyIikKZGVzLm1vbnN0ZXIoImZvcmVzdCBjZW50YXVyIikKZGVzLm1vbnN0ZXIoImZvcmVzdCBjZW50YXVyIikKZGVzLm1vbnN0ZXIoImZvcmVzdCBjZW50YXVyIikKZGVzLm1vbnN0ZXIoImZvcmVzdCBjZW50YXVyIikKZGVzLm1vbnN0ZXIoImZvcmVzdCBjZW50YXVyIikKZGVzLm1vbnN0ZXIoIkMiKQotLSBUd29mbG93ZXIKZGVzLm1vbnN0ZXIoIlR3b2Zsb3dlciIsIDY0LCAwMykKLS0gVGhlIHRyZWFzdXJlIG9mIFR3b2Zsb3dlcgpkZXMub2JqZWN0KCJjaGVzdCIsIDY0LCAwMykKLS0gZ3VpZGVzIGZvciB0aGUgYXVkaWVuY2UgY2hhbWJlcgpkZXMubW9uc3RlcigiZ3VpZGUiLCAyOSwgMDMpCmRlcy5tb25zdGVyKCJndWlkZSIsIDMyLCAwNCkKZGVzLm1vbnN0ZXIoImd1aWRlIiwgMzUsIDAyKQpkZXMubW9uc3RlcigiZ3VpZGUiLCAzOCwgMDMpCmRlcy5tb25zdGVyKCJndWlkZSIsIDQ1LCAwMykKZGVzLm1vbnN0ZXIoImd1aWRlIiwgNDgsIDAyKQpkZXMubW9uc3RlcigiZ3VpZGUiLCA0OSwgMDQpCmRlcy5tb25zdGVyKCJndWlkZSIsIDUxLCAwMykKZGVzLm1vbnN0ZXIoImd1aWRlIiwgNTcsIDAzKQpkZXMubW9uc3RlcigiZ3VpZGUiLCA2MiwgMDQpCmRlcy5tb25zdGVyKCJndWlkZSIsIDY2LCAwNCkKLS0gcGF0aCBndWFyZHMKZGVzLm1vbnN0ZXIoIndhdGNobWFuIiwgMzUsIDA4KQpkZXMubW9uc3Rlcigid2F0Y2htYW4iLCAzNiwgMDgpCi0tIHJpdmVyIG1vbnN0ZXJzCmRlcy5tb25zdGVyKCJnaWFudCBlZWwiLCA2MiwgMTIpCmRlcy5tb25zdGVyKCJwaXJhbmhhIiwgNDcsIDEwKQpkZXMubW9uc3RlcigicGlyYW5oYSIsIDI5LCAxMSkKZGVzLm1vbnN0ZXIoImtyYWtlbiIsIDM0LCAwOSkKZGVzLm1vbnN0ZXIoImtyYWtlbiIsIDM3LCAwOSkKLS0gUmFuZG9tIHRyYXBzCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCi0tIE5ldEhhY2sgMy43CVZhbGt5cmllLmRlcwkkTkhEVC1EYXRlOiAxNTUzODA3MTcyIDIwMTkvMDMvMjggMjE6MDY6MTIgJCAgJE5IRFQtQnJhbmNoOiBOZXRIYWNrLTMuNi4yLWJldGEwMSAkOiROSERULVJldmlzaW9uOiAxLjE1ICQKLS0JQ29weXJpZ2h0IChjKSAxOTg5IGJ5IEplYW4tQ2hyaXN0b3BoZSBDb2xsZXQKLS0JQ29weXJpZ2h0IChjKSAxOTkxLTIgYnkgTS4gU3RlcGhlbnNvbgotLSBOZXRIYWNrIG1heSBiZSBmcmVlbHkgcmVkaXN0cmlidXRlZC4gIFNlZSBsaWNlbnNlIGZvciBkZXRhaWxzLgotLQotLQotLQlUaGUgInN0YXJ0IiBsZXZlbCBmb3IgdGhlIHF1ZXN0LgotLQotLQlIZXJlIHlvdSBtZWV0IHlvdXIgKGJlc2llZ2VkKSBjbGFzcyBsZWFkZXIsIHRoZSBOb3JuLAotLQlhbmQgcmVjZWl2ZSB5b3VyIHF1ZXN0IGFzc2lnbm1lbnQuCi0tCgpkZXMubGV2ZWxfZmxhZ3MoIm1hemVsZXZlbCIsICJub3RlbGVwb3J0IiwgImhhcmRmbG9vciIsICJpY2VkcG9vbHMiKQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIkkiIH0pCgpsb2NhbCBwb29scyA9IHNlbGVjdGlvbi5uZXcoKQotLSByYW5kb20gbG9jYXRpb25zCmZvciBpID0gMSwxMyBkbwogICBwb29sczpzZXQoKTsKZW5kCi0tIHNvbWUgYmlnZ2VyIG9uZXMKcG9vbHMgPSBwb29scyB8IHNlbGVjdGlvbi5ncm93KHNlbGVjdGlvbi5zZXQoc2VsZWN0aW9uLm5ldygpKSwgIndlc3QiKQpwb29scyA9IHBvb2xzIHwgc2VsZWN0aW9uLmdyb3coc2VsZWN0aW9uLnNldChzZWxlY3Rpb24ubmV3KCkpLCAibm9ydGgiKQpwb29scyA9IHBvb2xzIHwgc2VsZWN0aW9uLmdyb3coc2VsZWN0aW9uLnNldChzZWxlY3Rpb24ubmV3KCkpLCAicmFuZG9tIikKCi0tIExhdmEgcG9vbHMgc3Vycm91bmRlZCBieSB3YXRlcgpkZXMudGVycmFpbihwb29sczpjbG9uZSgpOmdyb3coImFsbCIpLCAiUCIpCmRlcy50ZXJyYWluKHBvb2xzLCAiTCIpCgpkZXMubWFwKFtbCnh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHgKeHh4eHh4eHh4eHh4eHh4eHguLnh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eC4uLnh4eHh4eHh4eHh4eHh4eHh4eHh4eAp4eHh4eHh4eHh4eHh4eHh4Li54eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHguLnsuLnh4eHh4eHh4eHh4eHh4eHh4eHh4Cnh4eHh4eHh4eHh4eHh4eC4ueHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHguLi4uLnh4eHh4eHh4eHh4eHh4eHh4eHgKeHh4eHh4eHh4eHh4eHguLnh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHgueHh4eHh4eHh4eHh4eHh4eHh4eAp4eHh4eHh4eHh4eHh4Li54eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eC54eHh4eHh4eHh4eHh4eHh4eHh4Cnh4eHh4eHh4eHh4eC4ueHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHguLnh4eHh4eHh4eHh4eHh4eHh4eHgKeHh4eHh4eHguLi4uLnh4eHh4eHh4eHh4eHh8LS0tLS0tLS0tLS0tLS0tLXx4eHh4eHh4eHh4eC54eHh4eHh4eHh4eHh4eHh4eHh4eAp4eHh4eHh4Li54eHguLi54eHh4eHh4eHh4eHwuLi4uLi4uLi4uLi4uLi4ufHh4eHh4eHh4eHguLnh4eHh4eHh4eHh4eHh4eHh4eHh4Cnh4eHh4eC4ueHh4eHh4Li4uLi4ueHh4eHgufC4uLi4uLi4uLi4uLi4uLi58Lnh4eHh4eHh4eC54eHh4eHh4eHh4eHh4eHh4eHh4eHgKeHh4eHguLnh4eHh4eHh4eHh4eC4uLi4uLi4rLi4uLi4uLi4uLi4uLi4uLisuLi54eHh4eHh4Lnh4eHh4eHh4eHh4eHh4eHh4eHh4eAp4eHh4Li54eHh4eHh4eHguLi4uLnh4eHh4LnwuLi4uLi4uLi4uLi4uLi4ufC54Li4ueHh4eHgueHh4eHh4eHh4eHh4eHh4eHh4eHh4Cnh4eC4ueHh4eHh4eHh4Li54eHh4eHh4eHh4fC4uLi4uLi4uLi4uLi4uLi58eHh4eC4uLi4uLi54eHh4eHh4eHh4eHh4eHh4eHh4eHgKeHh4eC4ueHh4eHh4eC4ueHh4eHh4eHh4eHh8LS0tLS0tLS0tLS0tLS0tLXx4eHh4eHh4eHh4Li4ueHh4eHh4eHh4eHh4eHh4eHh4eAp4eHh4eHguLnh4eHguLnh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eC4uLnh4eHh4eHh4eHh4eHh4eHh4Cnh4eHh4eHguLi4uLi54eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHguLi54eHh4eHh4eHh4eHh4eHgKeHh4eHh4eHh4Li4ueHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4Li4ueC4uLi4uLnh4eHh4eAp4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eC4uLi4uLi4uLnh4eHh4Cnh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eC4uLi4uLi54eHh4eHgKeHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eApdXSk7Ci0tIER1bmdlb24gRGVzY3JpcHRpb24KZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMCwwMCw3NSwxOSksICJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDI3LDA4LDQyLDEyKSwgImxpdCIpCi0tIFBvcnRhbCBhcnJpdmFsIHBvaW50CmRlcy5sZXZyZWdpb24oeyByZWdpb24gPSB7NjYsMTcsNjYsMTd9LCB0eXBlPSJicmFuY2giIH0pCi0tIFN0YWlycwpkZXMuc3RhaXIoImRvd24iLCAxOCwwMSkKZGVzLmZlYXR1cmUoImZvdW50YWluIiwgNTMsMDIpCi0tIERvb3JzCmRlcy5kb29yKCJsb2NrZWQiLDI2LDEwKQpkZXMuZG9vcigibG9ja2VkIiw0MywxMCkKLS0gTm9ybgpkZXMubW9uc3RlcigiTm9ybiIsIDM1LCAxMCkKLS0gVGhlIHRyZWFzdXJlIG9mIHRoZSBOb3JuCmRlcy5vYmplY3QoImNoZXN0IiwgMzYsIDEwKQotLSB2YWxreXJpZSBndWFyZHMgZm9yIHRoZSBhdWRpZW5jZSBjaGFtYmVyCmRlcy5tb25zdGVyKCJ3YXJyaW9yIiwgMjcsIDA4KQpkZXMubW9uc3Rlcigid2FycmlvciIsIDI3LCAwOSkKZGVzLm1vbnN0ZXIoIndhcnJpb3IiLCAyNywgMTEpCmRlcy5tb25zdGVyKCJ3YXJyaW9yIiwgMjcsIDEyKQpkZXMubW9uc3Rlcigid2FycmlvciIsIDQyLCAwOCkKZGVzLm1vbnN0ZXIoIndhcnJpb3IiLCA0MiwgMDkpCmRlcy5tb25zdGVyKCJ3YXJyaW9yIiwgNDIsIDExKQpkZXMubW9uc3Rlcigid2FycmlvciIsIDQyLCAxMikKLS0gTm9uIGRpZ2dhYmxlIHdhbGxzCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMjYsMDcsNDMsMTMpKQotLSBSYW5kb20gdHJhcHMKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJmaXJlIikKZGVzLnRyYXAoImZpcmUiKQpkZXMudHJhcCgiZmlyZSIpCmRlcy50cmFwKCJmaXJlIikKLS0gTW9uc3RlcnMgb24gc2llZ2UgZHV0eS4KZGVzLm1vbnN0ZXIoImZpcmUgYW50IiwgMDQsIDEyKQpkZXMubW9uc3RlcigiZmlyZSBhbnQiLCAwOCwgMDgpCmRlcy5tb25zdGVyKCJmaXJlIGFudCIsIDE0LCAwNCkKZGVzLm1vbnN0ZXIoImZpcmUgYW50IiwgMTcsIDExKQpkZXMubW9uc3RlcigiZmlyZSBhbnQiLCAyNCwgMTApCmRlcy5tb25zdGVyKCJmaXJlIGFudCIsIDQ1LCAxMCkKZGVzLm1vbnN0ZXIoImZpcmUgYW50IiwgNTQsIDAyKQpkZXMubW9uc3RlcigiZmlyZSBhbnQiLCA1NSwgMDcpCmRlcy5tb25zdGVyKCJmaXJlIGFudCIsIDU4LCAxNCkKZGVzLm1vbnN0ZXIoImZpcmUgYW50IiwgNjMsIDE3KQpkZXMubW9uc3Rlcih7IGlkID0gImZpcmUgZ2lhbnQiLCB4PTE4LCB5PTAxLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBpZCA9ICJmaXJlIGdpYW50IiwgeD0xMCwgeT0xNiwgcGVhY2VmdWwgPSAwIH0pCgotLSBOZXRIYWNrIDMuNwlXaXphcmQuZGVzCSROSERULURhdGU6IDE0MzI1MTI3ODMgMjAxNS8wNS8yNSAwMDoxMzowMyAkICAkTkhEVC1CcmFuY2g6IG1hc3RlciAkOiROSERULVJldmlzaW9uOiAxLjExICQKLS0JQ29weXJpZ2h0IChjKSAxOTkyIGJ5IERhdmlkIENvaHJzCi0tIE5ldEhhY2sgbWF5IGJlIGZyZWVseSByZWRpc3RyaWJ1dGVkLiAgU2VlIGxpY2Vuc2UgZm9yIGRldGFpbHMuCi0tCi0tCi0tCVRoZSAic3RhcnQiIGxldmVsIGZvciB0aGUgcXVlc3QuCi0tCi0tCUhlcmUgeW91IG1lZXQgeW91ciAoYmVzaWVnZWQpIGNsYXNzIGxlYWRlciwgTmVmZXJldCB0aGUgR3JlZW4KLS0JYW5kIHJlY2VpdmUgeW91ciBxdWVzdCBhc3NpZ25tZW50LgotLQpkZXMubGV2ZWxfaW5pdCh7IHN0eWxlID0gInNvbGlkZmlsbCIsIGZnID0gIiAiIH0pOwoKZGVzLmxldmVsX2ZsYWdzKCJtYXplbGV2ZWwiLCAibm90ZWxlcG9ydCIsICJoYXJkZmxvb3IiKQoKZGVzLm1hcChbWwouLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLkMuLi4uQ0MuQy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLkMuLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi4uLkNDQy4uLi4uLi4uLi4uLi4uLi4uLi4uLkNDQy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLkNDLi4uLi4uLi4tLS0tLS0tLS0tLS4uLi4uLi5DLkMuLi5DLi4uQy4uLi5DLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi5DLi4uLi4tLS0tLS0tLS0tLS0tLS0tLS0tLS0uLi5DLi5DLi5DLi5DLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uQy4uQy4uLi0tLS0tLS4uLi5cLi4uLi0tLS0tLS4uLi5DLi4uLi5DLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uLkMuLi58fC4uLi58Li4uLi4uLi4ufC4uLi58fC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi5DLi4uLnx8Li4uLnwuLi4uLi4uLi4rLi4uLnx8Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLkMuLi58fC0tLSstLS4uLi4uLi4uLnwuLi4ufHx8Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgouLi4uLi5DLi4uLnx8Li4uLi4uLi4uLi4uLi4ufC0tUy0tfHwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uLi4uLi4ufHwtLSstLXwrKy0tLS18LS0tfC4ufC5TUy4uLi4uLi4uLi5DLi4uLi4uQy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi4uLi4uLi5DLi58fC4uLi4ufC4ufC4uLnwuLi58LS18Lnx8Li5DQy4uQy4uLi4uQy4uLi4uLi4uLi5DLi4uLi4uLi4uLi4uLi4uLgouLi4uLi4uQy4uLnx8Li4uLi58Li58Li0tfC58LnwuLi4ufHwuLi4uLi4uLi4uLi4uLi4uLkMuLkMuLi4uLi4uLi4uLi4uLi4uLi4uCi4uLi4uQy4uLi4uLnx8Li4uLnwuLnwuLi4uLnwufC4tLXx8Li5DLi5DLi4uLi4uLi4uLkMuLi4uLi4uLi4uLn19fS4uLi4uLi4uLi4KLi4uLi4uQy5DLi4ufHwuLi4ufC4uLS0tLS0ufC4uLi4ufHwuLi5DLkMuQy4uLi4uLi4uLi4uLi4uQy4uLi59fX19fX0uLi4uLi4uLgouLi4uLi4uLi5DLi4uLS0tLS0tLi4uLi4uLi58LS0tLS0tLi4uLkMuLkMuLi4uLkMuLkNDLkMuLi4uLi59fX19fX19fX19fS4uLi4uCi4uLi4uLi4uLkNDLi4tLS0tLS0tLS0tLS0tLS0tLS0tLS0uLi5DLkMuLkMuLi4uLkNDQ0NDLkMuLi4uLi4ufX19fX19fX0uLi4uLi4KLi4uLi4uLi4uQy4uLi4uLi4uLS0tLS0tLS0tLS0uLi4uLi4uLi4uQy5DLi4uLi4uLkNDQy4uLi4uLi4uLn19fX19fX19fS4uLi4uLgouLi4uLi4uLi4uQy5DLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLkMuLi4uLi4uLi4uLi5DLi4uLi4uLi4uLi59fX19fS4uLi4uLi4uCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5DQ0MuQy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KXV0pOwoKLS0gZmlyc3QgZG8gY2xvdWQgZXZlcnl3aGVyZQpkZXMucmVwbGFjZV90ZXJyYWluKHsgcmVnaW9uPXswLDAsIDc1LDE5fSwgZnJvbXRlcnJhaW49Ii4iLCB0b3RlcnJhaW49IkMiLCBjaGFuY2U9MTAgfSkKLS0gdGhlbiByZXBsYWNlIGNsb3VkcyBpbnNpZGUgdGhlIHRvd2VyIGJhY2sgdG8gZmxvb3IKZGVzLnJlcGxhY2VfdGVycmFpbih7IHJlZ2lvbj17MTMsNSwgMzMsMTV9LCBmcm9tdGVycmFpbj0iQyIsIHRvdGVycmFpbj0iLiIsIGNoYW5jZT0xMDAgfSkKCi0tIER1bmdlb24gRGVzY3JpcHRpb24KZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgwMCwwMCw3NSwxOSksICJsaXQiKQpkZXMucmVnaW9uKHNlbGVjdGlvbi5hcmVhKDM1LDAwLDQ5LDAzKSwgInVubGl0IikKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSg0MywxMiw0OSwxNiksICJ1bmxpdCIpCmRlcy5yZWdpb24oeyByZWdpb249ezE5LDExLDMzLDE1fSwgbGl0PTAsIHR5cGU9Im9yZGluYXJ5IiwgaXJyZWd1bGFyPTEgfSkKZGVzLnJlZ2lvbihzZWxlY3Rpb24uYXJlYSgzMCwxMCwzMSwxMCksICJ1bmxpdCIpCi0tIFN0YWlycwpkZXMuc3RhaXIoImRvd24iLCAzMCwxMCkKLS0gUG9ydGFsIGFycml2YWwgcG9pbnQKZGVzLnRlcnJhaW4oezYzLDA2fSwgIi4iKQpkZXMubGV2cmVnaW9uKHsgcmVnaW9uID0gezYzLDA2LDYzLDA2fSwgdHlwZT0iYnJhbmNoIiB9KQotLSBEb29ycwpkZXMuZG9vcigiY2xvc2VkIiwzMSwwOSkKZGVzLmRvb3IoImNsb3NlZCIsMTYsMDgpCmRlcy5kb29yKCJjbG9zZWQiLDI4LDA3KQpkZXMuZG9vcigibG9ja2VkIiwzNCwxMCkKZGVzLmRvb3IoImxvY2tlZCIsMzUsMTApCmRlcy5kb29yKCJjbG9zZWQiLDE1LDEwKQpkZXMuZG9vcigibG9ja2VkIiwxOSwxMCkKZGVzLmRvb3IoImxvY2tlZCIsMjAsMTApCi0tIE5lZmVyZXQgdGhlIEdyZWVuLCB0aGUgcXVlc3QgbGVhZGVyCmRlcy5tb25zdGVyKCJOZWZlcmV0IHRoZSBHcmVlbiIsIDIzLCAwNSkKLS0gVGhlIHRyZWFzdXJlIG9mIHRoZSBxdWVzdCBsZWFkZXIKZGVzLm9iamVjdCgiY2hlc3QiLCAyNCwgMDUpCi0tIGFwcHJlbnRpY2UgZ3VhcmRzIGZvciB0aGUgYXVkaWVuY2UgY2hhbWJlcgpkZXMubW9uc3RlcigiYXBwcmVudGljZSIsIDMwLCAwNykKZGVzLm1vbnN0ZXIoImFwcHJlbnRpY2UiLCAyNCwgMDYpCmRlcy5tb25zdGVyKCJhcHByZW50aWNlIiwgMTUsIDA2KQpkZXMubW9uc3RlcigiYXBwcmVudGljZSIsIDE1LCAxMikKZGVzLm1vbnN0ZXIoImFwcHJlbnRpY2UiLCAyNiwgMTEpCmRlcy5tb25zdGVyKCJhcHByZW50aWNlIiwgMjcsIDExKQpkZXMubW9uc3RlcigiYXBwcmVudGljZSIsIDE5LCAwOSkKZGVzLm1vbnN0ZXIoImFwcHJlbnRpY2UiLCAyMCwgMDkpCi0tIEVlbHMgaW4gdGhlIHBvbmQKZGVzLm1vbnN0ZXIoImdpYW50IGVlbCIsIDYyLCAxNCkKZGVzLm1vbnN0ZXIoImdpYW50IGVlbCIsIDY5LCAxNSkKZGVzLm1vbnN0ZXIoImdpYW50IGVlbCIsIDY3LCAxNykKLS0gTm9uIGRpZ2dhYmxlIHdhbGxzCmRlcy5ub25fZGlnZ2FibGUoc2VsZWN0aW9uLmFyZWEoMDAsMDAsNzUsMTkpKQotLSBSYW5kb20gdHJhcHMKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKZGVzLnRyYXAoKQpkZXMudHJhcCgpCmRlcy50cmFwKCkKLS0gTW9uc3RlcnMgb24gc2llZ2UgZHV0eS4KZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJCIiwgeD02MCwgeT0wOSwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiVyIsIHg9NjAsIHk9MTAsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkIiLCB4PTYwLCB5PTExLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJCIiwgeD02MCwgeT0xMiwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiaSIsIHg9NjAsIHk9MTMsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkIiLCB4PTYxLCB5PTEwLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJCIiwgeD02MSwgeT0xMSwgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiQiIsIHg9NjEsIHk9MTIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkIiLCB4PTM1LCB5PTAzLCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJpIiwgeD0zNSwgeT0xNywgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiQiIsIHg9MzYsIHk9MTcsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkIiLCB4PTM0LCB5PTE2LCBwZWFjZWZ1bCA9IDAgfSkKZGVzLm1vbnN0ZXIoeyBjbGFzcyA9ICJpIiwgeD0zNCwgeT0xNywgcGVhY2VmdWwgPSAwIH0pCmRlcy5tb25zdGVyKHsgY2xhc3MgPSAiVyIsIHg9NjcsIHk9MDIsIHBlYWNlZnVsID0gMCB9KQpkZXMubW9uc3Rlcih7IGNsYXNzID0gIkIiLCB4PTEwLCB5PTE5LCBwZWFjZWZ1bCA9IDAgfSkKIwlUaGlzIGRhdGEgZmlsZSBpcyBnZW5lcmF0ZWQgYnkgJ21ha2VkZWZzJy4gIERvIG5vdCBlZGl0LiAKZnBxbQprd2lqfyFxbHp5bHIKZmtlZmQhcm1vfXgKZmxxCmpraGR1cyJ0bX5md21mCmZrZWZkIWFra3tzbWVreApma2VmZCFxaH13CmxjY29/dQpxdmF6f2VjZ3xpbQp1e3Zpfm9td2llc3d3KGJkegpjY3dhfGhxbwpjZ2xnfGVndgpva2NgZGxjdm0KZGR2bXV1awpsY3ZhdApzbXAod3N3ZgpjbWtjZ25waQpsY3d8dXMiaGFzaWdqCnJqZWx/dgppbWhnd3NjaQprZ3d8dXMKYHZwZ2JvZ30Kcm5haWpua2AKamtoZHVzInBnfWB2awpgb2Vyf28Kc21mZ2QKY2NwfHxkb2FreApzam1mf3drdn1jCmljdnhpCm1ra2Y9ZW1jCnNjcCVxb3YKWDBPKHJ0ZQpgbGN6aSFvZXp5YGFsYQpgcGdgPXFnYGl+dQpjbnFtcmhwYCh/ZyJsaWBxa2ptY3IKYmN2bHJuY3ZsMGZtaG19CmV3Z3wwdWN0bTBmbWhtfQpla2Vvf29jaGRpIW9rfnlvZSRvYmhmJGplZgpkdG1kMG50YXp8bnBgCm9nc3t3c21xeDB1cGtkfApva2picSFybXpxdWckcn9sYG1tMHNtZmdkCm5hcGliaGxhKHRzY2NnfgpmbWpyfyFoa31ib2NoYWN1Cm1jYyh9bmx3fHVzCm1tZWYwcmplensKcW13e3VycWFsMHZjYm58ZCJten9vCnFtcWRkc3tjbXlydgpydnFudmRmJHpxYmFrZ34hcnF4YGR2Cndrb2F+Zgp2Z2Eod3NnYWYwY25ranJoZwp2Z3ZtYG1jcHFgdHEKaWNjKH9nImZnfGVram8KY25lZnNsY2pvdQpzY2NhfmYiam1iZQpycmFkfGhsYyhyZGcKbWNqbDBuYXBnYHRxCmdwa28wcXBtZnNkCnFrY2ljdHEKXlFhZXlmbXZvf28KYm1qfnVvdm1nfmRndgptY3ZvdSFvbWtibmBlfApyb2VkfCFvYW9xY2NwCnRgYXp4dG5vCnVtYn1iamd9CipGcWx8ZHsKcmp2YX5qa2pvMHdra2R1dQpyamVkfG51JGd+ZApycmxtYmhhZWQwYm1zCmRuYWtkc2tnKHdocGVudmQKcnZhaX0hZnZpd25sCm5vamFydHEKcm5tZnt4CmxjfGdkYHd2Cm5hcGl4ZGZ2Z34KZXdqb3VubCRrf3NnCnB3ZWR1CmltaGR/dmN9CmZwcW0KQmp2YWN1b2V7PXVwYW0wbG1qe2RkcAptd2djMHJ3Z2N1cwpxY3djcW1mCmNwa299bmtgCmVtdmZyZGN3fApAbGdhdW92JEVlbXZtJVh0Z2AoVHNjY2d+CipHcmF8IUtjb2kKc2NwfHxkcWppe2QKaGFhKH1ubHd8dXMKcWplZmRubwpwd2Vvd2AKYHNxaWRucApmcG1udmhsCmRvcQpqZ3d8YmRuCnlndmdzCndnan1jIWRocWRzY3QKYnBhbWBobGMoc25ransKaXtgenEKcmt2bX4KamtoZHVzImZ9fm97CnNtYG1+dSJrbjB0bHF7ZWBuJHt5e2cKdmd2bT1zY2ZqeXUKKlFpZ3tkeyRKdWBwCk13Y29xZmcKd2NpeHlza2coZ2B2YXp9ZG5rZgpEbHAKdWNqb3xkInB6dWQKb2tnY3VtcmFsdQp2a2NvfGQKdmptfHUhcGVqcmh2CnJsZXp7CnF3d2B9aC90fXxte3EKcm9xenYKdXBtanJtZwpKbm1md25sCkNtdm8KRHVrYwpVbXBnYm4KbmppfQp4bXFlcQpve2VpY3QKLEVrbGpobmhpCipJbWZ3IUlrZncKZGN2fHhwd2VjdSFgYWljdQpIbHJhdApVZ3ZleW9jcGdiCmNta2V1cwpFY2htewpsa2d6f3Jha3h5YiJ3eHFiZyRufGRncApTY3Jtfm53dyhSdGVmZHF1dmF6MENnZXtkIW1iKERzY2VkCm1nZXx4ZHB9JWdobGNtdCFjcmFxbwp1Z2FmcWZnJGVldWNqfDBva2picSF2cXpkbWcKcmNpfWJgayR6cWNgbXwKYGN2bGZgcG8KPENxbGJkeyRBWQp2a3BreCFma2tkbnAKbmxhJXV4Z2Aof29nKWB/c2xhbDBnbn1hfmYidH1icW5hKGBkbXRkdSFnZXx1cwoqQGV6fmR7JHx4ZCJgYX5ucWV9YgoqT2t6d252bApXbXZkf28KcHdhe2RobGMocmRjd3wKUXBhbHF1bXYKbG1wYHVzL21mPW1jcwpxcGVxeW9lJGVxb3ZtewpjZ2h9d2Aic2BxbWcKYmpta3tkbApibWFkcWJjanx4CnJ2ZXo9b213bXQhb2tkdQptd2pvdmhxbApybmt/MG1tdmFjCnJnZShzdGFxZXJkcAp1Y3RtZ25waQpta2NtYgp3Z2hnc2hwZXhkbnAKYm12eGVtZ2p8MHFtdnh/aHFhCnB3a2N7YApxbXBnfwptZ2lleW9lCmVqa2R1CnZtaHh1c3ZtZndkcApkbnNtdHNrcHtzaWcKcmlyaXRkcAoqTGF7Y2hnCnVjcHJ1bXVxen0KZWNsfQplcGt4cmRjdgp2a2hsMGljY295cgprY2djcW1tdG0KZ259YX5mInRhdwppa3R4f2JjaXhlcgppa3R4f2ZwbW52CmpnaHh5ZApiY3Bncm1ndGljCnFqa21+aHoKYG90YHlyYGVtfmAKY21xZnNobGModXhnCmdua2lkaGxjKH5ucWEKdmNqbHVza2pvMGR7YQpjd2JudXMia351c2RoZ2cKZWNqb3xobGMoYG5ranx1cwp2Y2hjeW9lJGx5cmkkbGJodGEKZ25raWRobGMoYG5ranwKc2djbWghZ2pveW9nCm9ncHtgbWtwCnZrb2EKcWdhegpCTUZHXAp2a3ZtMHJqZXp7CmNtbHpydGUKbGNqbHVtYHFvCnJhbHp/ZGZtZnJ0ZQppZ217dW9gcW8KYmNnZ3Rkb2tmCnJhdml3CipBdmdnIVYqKEJuYGt8CmJqYXtjIXJlf34KYmpra39tY3BtMHF3YGx5b2UKbm1mZHViaXcKdWd2enFibXB8cSF1ZXpiaG12CmlnZXpjZApzbWtlcmAKbGtqYXF1d3ZtMGNubWVgCmV3d3wwcnJha3sKZmN+bXJuCmZwZXEwZm1rCmxjY2Z1dWtnKH1ubGt4f21nCmdrdntkIWFlfHVmbXZxMHFndnh1dXdlZDBsbXBhf28iYG1maGFhCmNrYyh0dG9mKH9jaGFrZAoqTmt6dCFAdmFkaHFsCnFjdnx5Ym5hKH1gbApqa3B8dW8idHp/cnJha2RobGMoYm5ga3wKZndtZHxkb2F8CnJtaGF0dHEKbmBhZGVyCmVram9yYHYKY21obDBnY2dtCmNtcXtkc210YHVlbWoKbWtjaWR0cGEKc2dmfWMKZWtqY2VyCmBya3tkc210YHUhZWtkdWwKd21ofWB1d2t9YyFjaXh1c3FlZnQKKkBrajB1amEocW9ldnEwZ25rf3VzCipRcHp/b2UkSnFlCipPZW95YmNoKERzZ3JnYgpyb2Vje2RsCmxraWV/dWoKbmxhJWdobGNtdCFmYX95b2VhbDBydmVqPWNjcApIbHJhY2hgaG0wUWtqYzBUbG1rf3NsCkdufWF+ZiJXeHFmamF8ZGgiSWd+cnZhegp1anZtdSxqYWl0ZGYkZX9vaWFxCipHaChAbm5oZzBFa2VqfG4KbWtwfHxkImN6dWRsJGVxbwp2Z21veHVnYChTbm90aX5obWooU3RgYQouYCt8cXNmCmxjamp1YHB0YXcKY21qe3FoL29hZHVnagp1a2ElZGl3aH0KKkZrZX8saXFmCm1ta2d/bm1rZ39ubWtnfmYiZ2lkCm97ZWYwYmNwCmJnbWR5b2Uka3F1CmNjd219ZGxwKHNgdgpsbWpnYmBraChzYHYKdXBtbGVlZwpucGd9YyFha3t9aGFxewp4Z2FjCnB3fWRkaXdobwpGcGFpZGRwJEB1bW4kSnVgcXAKKlRhZnRucCRndiFbbXJxc2YKKlFtb310bGAKbWd2ZnFkY2ooeHhmdmkKKktucXIKKkVoZ39zeiRefG5zCipAaGdiaiJwYHUhbXZrCnRsbWt/c2wkeHVmY3d9YyFpbXxkZGwKZGxgbWJsY2oKdmtjYGQhcXF4YmRvZWt5cnYKe2d2b3xobGMKZHpte2RkbHBhcW0iZWZ3cnYKZ2tjZXVvdiRndiF7a31iIWtpaXdobGV8eW5sCmduZXt4IW1iKHlvcW1veHUKZmprfHkKd2d2ZXlia2t9YyFpamF0CmxnYXh8ZAp2bWlqfGQKZ3Blb3dtZwpydmVhfm1nd3swcnZhbXwhcGV8CmxtZ2Mwc21obQpibmt/fgpsa2ltCnFnYGx8ZHAKaWNjb3xkcApmbmtpZGhsYyh1eGcKZ25xe3ghZWtkdWwKbGN2fGlzImt6cwpsbXZ8cXMia3pzCmBhbWwwY25rbwpgYXF8dSFgaGdyCmBwbWkwZG5hZXVvdmVkCmBubWljaGxjKGBza2F7ZApgbm1vfmRmJHhxc2N3YWRkCmBubW9+ZGYkeHFzc3FtZApgbm1vfmRmJHhibmFwZ2IKY2NmcTBjY2hjaSFmdml3bmwKY2NmcTBjbnFtYyFmdml3bmwKY2NmcTBiY3Zhc2B2cXp1CmNjZnEwYnBra3hkdgpjY2ZxMGZwZWF+eCJgenFmbWoKY2NmcTBjbWpvMHZtdmUKY2NmcTBtbWpvMHZtdmwKY2NmcTBxY3Zpcm1nJH9/c28KY2N2bnVlImBtZmhuCmNnYXowdmtjYGQKY21rejB2a2NgZApjcGV/fngiaWd8ZQpzY3JtMHJybWx1cwpibnFtMGZtaG19CmN3d3wwd212fHV5CmRwdmlkYCJhZHVsZ2p8cW0KZG5le2RoYSRtdW0KZG5ha2RzbWdpYmVra29iYG8kbXVtCmdrdih1bWdpbX51Y2gKdWt2bTBkbmFldW92ZWQKZ25lZXlvZWsoY3FqYXp1CmdjaGRxYnskb39tZ2kKZ3BtcmpkZiRrdW92ZX1iCmdtdm1jdSJnbX51Z3Zuf21mCmdrYXpzZGxhe2MhcXRgdXNnCmdwa3tkZGYkb3lgbHAKZmd2YXF1cG1rMHJsZWN1CmZsZXwwYGxwCmZrZWZkIWBlfHgKZnBlZmQhYGFtZG1nCmZwYWlkZHAke35gaWEKZnBtZnQhYHFvCmZrZWZkIW9lZnduCmZua3tjeCJjZ3xkbwpmbGtldSFuZX1iZGNwbQpmbGtldSFmcWV9eApmbWthdXMia2dqZApmcGFtfiFxaGF0ZApmd2V6dGhjaih+YGFsZwppZ2hkMGltcWZ0IXJxZgppa2NgMHF3dmFjdQppY216fmR2JGx1d2toCmhhYShkc21zbXwKamtoZHVzImZtdXUKZ2dlfHhkcCRvf21naQptbXFmd2Qic2dibApsbXFmZGBraih8eG90YApxY2NtYiFla2R1bApxa2EodmhnamwKcXBreHh4bmVrZGhhJH9/c28Kcm1nYzBsbWhtCnNtY311IXJtbWJiZ3YKcmdhe3F2a2pvMHJybG1iZApya2lhfGQiaWF9aGEKbG1obHlkcCRpfnUKcnZlYX4hdGt6ZGR6CnJha2Z1IWVtaX51CnRvZnp1bW5lKHh0bm8Kd2NpeHlzZyRlcWJnCndndmpxbSJuaXJjZ3Z/f2JpCnZjcG1iIW5hZX9vCnZjcG1iIW9hZH9vCnZram91ZSJjenl7eGhxCnhnaGR/diJzYXdpdgojCVRoaXMgZGF0YSBmaWxlIGlzIGdlbmVyYXRlZCBieSAnbWFrZWRlZnMnLiAgRG8gbm90IGVkaXQuIAowMDAwMmIyOAphYmJvdAowLDExCmFjCmFybW9yKgphcm1vdXIqCnN1aXQgb3IgcGllY2Ugb2YgYXJtb3IKNjgwLDE5CmFjbHlzCmFrbHlzCnRob25nZWQgY2x1YgoxNTE3LDQKfmFnYXRlIHJpbmcKYWdhdGUqCjE3NDUsOQphbGVheAoyMjQ4LDIKKmFsdGFyCm9mZmVyKgpzYWNyaWZpYyoKMjMzNiwxNAphbWF0ZXJhc3Ugb21pa2FtaQoyODQyLDYKYW1iZXIqCjMxNDEsNQoqYW1uZXNpYQptYXVkCjM0MjgsMTkKfmFtdWxldCBvZiB5ZW5kb3IKfmFtdWxldCBvZiByZXN0ZnVsIHNsZWVwCiphbXVsZXQKYW11bGV0IG9mICoKYW11bGV0IHZlcnN1cyAqCjQwMTIsMTQKYW11bGV0IG9mIHllbmRvcgo0NjMxLDYKYW5nZWwqCjQ5NjYsMTIKYW5ncnkgZ29kKgo1NjU4LDYKYW5odXIKNTgwNCw3CmFua2gtbW9ycG9yawo2MjI4LDkKYW5zaGFyCjY3MjIsNQphbnQKKiBhbnQKNzAxNSw0CmFudQo3MjIzLDUKYXBlCmFwZWxpa2UgY3JlYXR1cmUKKiBhcGUKNzQ4NywxNAphcHBsZQo4MjQ5LDYKYXJjaGVvbG9nKgoqIGFyY2hlb2xvZ2lzdAo4NTQxLDE4CmFyY2hvbgo5NDI1LDQKYXJpb2NoCjk2MTQsNQoqYXJyb3cKOTg3NywxNQphc2hpa2FnYSB0YWthdWppCjEwMzc0LDkKYXNtb2RldXMKMTA4NzMsMTYKYXRoYW1lCjExNjQ1LDUKYXRoZW4qCjExODk3LDQKYXhlCjEyMTMxLDE1CmF4b2xvdGwKMTI1NTksMQpiYWcKYmFnIG9mICoKc2FjawoxMjU5MiwxNgpiKmx6ZWJ1YgoxMzQ4NSw3CmJhbHJvZwoxMzg4MSw5CmJhbHVjaGl0aGVyaXVtCnRpdGFub3RoZXJlCjE0Mzg1LDkKYmFuYW5hCjE0ODk0LDE4CmJhbnNoZWUKMTU3NDYsNgpiYXJiYXJpYW4KKiBiYXJiYXJpYW4KMTYwOTQsMTIKfipjb21iYXQKfip3b21iYXQKKmJhdApiYXQgb3IgYmlyZAoxNjczOCw5CmJlYXIqdHJhcAoxNzIzMywxNQoqYmVlCjE4MTY4LDYKKmJlZXRsZQoxODQ3MCw5CmJlbGwgb2Ygb3BlbmluZwoxODg4MCwxNApibGluZGZvbGQKMTkzOTYsMTEKYmxpbmQgaW8KMjAwNDEsOQoqIGJsb2IKb296ZQoqIG9vemUKKnB1ZGRpbmcKKiBzbGltZQoyMDU1OSwxNwpibHVlIGplbGx5CnNwb3R0ZWQgamVsbHkKMjE1MjksNwpib25lIGRldmlsCjIxOTU0LDIKYm9vayBvZiB0aGUgZGVhZApjYW5kZWxhYnJ1bSoKKmNhbmRsZQoyMjA3MCw5CmJvb21lcmFuZwoyMjUyNywxMQp+KmphY2sqYm9vdCoKKmJvb3QqCjIzMTkwLDEwCipib296ZQpwb3Rpb24gb2Ygc2xlZXBpbmcKMjM3NjMsMTMKYm91bGRlcgoyNDUxMywxNgp+Kmxvbmdib3cgb2YgZGlhbmEKYm93CiogYm93CjI1NDE4LDE0CmJyaWdpdAoyNjE0NywxMQp+c3Rvcm1icmluZ2VyCipicm9hZHN3b3JkCjI2NzY2LDUKYnVnYmVhcgoyNjkwNSw0CmJ1Z2xlCjI3MDk2LDkKYnVsbHdoaXAKMjczODcsNAoqY2FtYXh0bGkKMjc1NTksNwpjYW1lbG90KgoyNzk2MywxMQpjYW5keSBiYXIKMjg1OTMsMTgKY2Fycm90CjI5NjY5LDEzCnMqZCpnKnIqIGNhdAozMDQwMCwxNQoqY2F0CipmZWxpbmUKa2l0dGVuCjMxMzU0LDExCmNhdmUqbWFuCmh1bWFuIGNhdmUqbWFuCjMxOTI3LDEzCmR3YXIqIGNhdmUqbWFuCmdub20qIGNhdmUqbWFuCjMyNjQ1LDE1CipjZW50YXVyCjMzMzAzLDE3CmNlbnRpcGVkZQozNDMwNiwxMQpjZXJiZXJ1cwprZXJiZXJvcwozNDg3Myw3CmNoYW1lbGVvbgozNTI3OCwxMgpjaGFybypuCjM1OTQ1LDcKY2hlc3QKbGFyZ2UgYm94CjM2MzMxLDE5CmNoaWgqc3VuZyp0enUKMzc0MjgsOApjaHJvbWF0aWMgZHJhZ29uCnRpYW1hdAozNzg2NiwyCmNpdHJpbmUqCjM3OTQ0LDEKY2xheSBnb2xlbQozODAwNywxMwpjbGVhdmVyCjM4NjkxLDUKfmVsdmVuIGNsb2FrCn5vaWxza2luIGNsb2FrCipjbG9hayoKMzg5NjcsMTIKY2xvdWQqCjM5Njg0LDcKY29icmEKMzk5NTQsMTYKYypja2F0cmljZQo0MDgzNCwyMwoqY29pbgp+Y3JlZXBpbmcgY29pbnMKKmNvaW5zCnpvcmttaWQqCjQyMDQ0LDUKY29tYmF0CmZpZ2h0CmZyYWNhcwptZWxlZQpzcGF0CnNxdWFiYmxlCnRpZmYKNDIzMTUsOApjb3BlCiogY29wZQo0MjcyOSw1CmNvcm51dGhhdW0KNDI5NzEsMTkKY291YXRsCjQzOTIyLDEKY295b3RlCjQzOTgwLDIKY3JhbSoKNDQwNzYsNgpjcmVhbSBwaWUKNDQ0MTksNwoqY3JvY29kaWxlCjQ0NzcxLDE3CmNyb2VzdXMKa3JvaXNvcwpjcmVvc290ZQo0NTM0Nyw4CmNyb20KNDU3ODcsOQpjcm9zc2JvdyoKNDYyNzAsNQpjcnlzdGFsIGJhbGwKNDY0ODAsNQpjdXJzZSoKNDY3NTAsMTIKY3duKm4KNDczNTAsOApjeWNsb3BzCjQ3ODEzLDMxCn5zdGluZwoqZGFnZ2VyCjQ5MDY4LDEwCmRhcmsgb25lCjQ5NDcyLDgKZGFydCoKNDk5MTAsMTMKZGVtb2dvcmdvbgo1MDQ4NCwxMQpkZW1vbgptYWpvciBkZW1vbgo1MTA0MSw5CmRpYW1vbmQKNTE1NTUsMjAKZGlsaXRoaXVtKgo1MjY2NCwyMQpkaW5nbwo1MzkyMCw1CmRpc2VuY2hhbnRlcgo1NDE0NywyCmRpc3BhdGVyCjU0MjIzLDgKZGlzcGxhY2VyIGJlYXN0CjU0NjQ4LDUKZGppbm4qCjU0OTMyLDgKfmhhY2hpCn5zbGFzaGVyCn5zaXJpdXMKKmRvZwpwdXAqCipjYW5pbmUKNTU0MjAsNgp+dHJhcCpkb29yCn4qc3BlbGxib29rKgoqZG9vcgpkb29yd2F5CjU1NzQ0LDExCmRvcHBlbGdhbmdlcgo1NjE5NywyNwoqZHJhZ29uCip4b3RoCjU3NDA3LDE4CipkcmFnb24qc2NhbGUqCjU4NDE2LDkKKmRydW0qCjU4ODY3LDcKZHVuY2UqCjU5MjM3LDgKZHVuZ2VvbioKNTk2NDksMTcKfmR3YXJmID8/bSoKZHdhcmYqCjYwMzczLDIxCmVhcmVuZGlsCmVsd2luZwo2MTYxNCwxNQplZWwKZ2lhbnQgZWVsCjYyNTIwLDkKZWdnCjYzMDE0LDcKZWxiZXJldGgKNjMzOTcsMjAKZWxlY3RyaWMgZWVsCjY0MTQwLDUKKmVsZW1lbnRhbAo2NDQzMSw1Cn5odW1hbiBvciBlbGYqCn5lbGYgPz9tKgoqZWxmKgplbHZlbmtpbmcKNjQ3MzQsMTkKZWx2ZW4gY2xvYWsKNjU3OTYsMTAKZW1lcmFsZAo2NjM1MSwxOAplbmdyYXYqCkEuUyoKNjY4MTYsMjEKKmVwaWRhdXJ1cwo2Nzc1MSw5CmVyaW55cwplcmlueWVzCjY4MjUxLDIKZXR0aW4KNjgzNzgsMgpleGNhbGlidXIKNjg1MDMsMTQKZXhwZW5zaXZlIGNhbWVyYQo2OTI5OCwxMQpleWUgb2YgdGhlIGFldGhpb3BpY2EKNjk5MzAsOApleWVzIG9mIHRoZSBvdmVyd29ybGQKNzAzNjMsNgpmZWRvcmEKNzA3MjMsNQpmaWd1cmluZSoKNzA5NjksMTEKZmlyZSB0cmFwCjcxNTg5LDEyCmYqIGJyYW5kCjcyMTUyLDEwCmZsZXNoIGdvbGVtCjcyNDQzLDIxCmZsaW50Kgo3MzU5MCwxMApmbG9hdGluZyBleWUKNzM4ODMsNwoqZmx1dGUKNzQyODIsNQpmb2cqIGNsb3VkCjc0NDgwLDgKKmZvb2QqCjc0NjI4LDkKZm91bnRhaW4KNzUxNTIsMTUKZm94Cjc1NjUxLDExCipmdW5nKgo3NjIxOCwyMQoqZ2FyZ295bGUKNzczOTQsMTQKKmdhcmxpYwo3ODE0MCwyMApnZWhlbm4qCipoP25ub20KaGVsbAo3OTI4MCw5CmdlbGF0aW5vdXMgY3ViZQo3OTgxNywxMAoqZ2VtCmdlbSBvciByb2NrCjgwMzU5LDQKZ2VuZXRpYyBlbmdpbmVlcgo4MDUzNSw1Cmdlcnlvbgo4MDgyMywyNAoqZ2hvc3QKdmFsbGV5IG9mICpkZWEqCjgxOTE0LDEwCmdob3VsCjgyNDg2LDE2CipnaWFudApnaWFudCBodW1hbm9pZAo4MzM5MSw2Cn5nbm9tZSA/P20qCmdub21lKgpnbm9taXNoIHdpemFyZAo4Mzc0MiwyOApnb2JsaW4KODUyMzksMTAKZ29kCmdvZGRlc3MKODU3NzAsMTMKZ29sZApnb2xkIHBpZWNlCjg2NTU4LDkKZ29sZCBnb2xlbQo4NzAyNSwxMAp+Zmxlc2ggZ29sZW0KfmdvbGQgZ29sZW0KfnN0cmF3IGdvbGVtCn53b29kIGdvbGVtCn5jbGF5IGdvbGVtCipnb2xlbQo4NzU5MSwxOApncmF2ZQo4ODYxMCw1CmdyYXlzd2FuZGlyCjg4ODE1LDYKKmdyZWFzZQo4OTE3MywzCmdyZW1saW4KODkzMTIsMTQKZ3JpZCBidWcKODk5NzQsMTQKZ3VueW9raQo5MDY4NCwyCmhhY2hpCjkwNzk1LDgKKmhhcnAKOTEyNzMsMjIKaGF3YWlpYW4qc2hpcnQKOTI0ODYsOQpoZWFsZXIKKiBoZWFsZXIKYXR0ZW5kYW50CmRvY3RvcgpwaHlzaWNpYW4KOTMwMTksMjAKaGVhcnQgb2YgYWhyaW1hbgo5NDE1NCwxOQpoZWxsIGhvdW5kKgo5NTI3NSwxNQpoZXJtZXMKOTYxNDcsMTUKaGV6cm91Cjk3MDU5LDMKaGlwcG9jcmF0ZXMKOTcyMDIsMTEKaG9iYml0Cjk3ODAwLDEwCmhvYmdvYmxpbgo5ODM5MiwyMwpob2x5IHdhdGVyCjk5NjM5LDIyCmhvbSpuY3VsdXMKMTAwNzY5LDEzCipob29rCjEwMTQyOCw5Cn51bmljb3JuIGhvcm4KKmhvcm4KMTAxOTA4LDkKaG9ybiBvZiBwbGVudHkKY29ybnVjb3BpYQoxMDIyOTksMTEKaG9ybmVkIGRldmlsCmJhcmJlZCBkZXZpbAoxMDI3NzksMgp+aG9yc2VtKgoqaG9yc2UKMTAyODY4LDgKKmhvcnNlbSoKcmlkZXIqCmRlYXRoCmZhbWluZQpwZXN0aWxlbmNlCndhcgpodW5nZXIKMTAzMzMzLDI2Cmh1YW4qdGkKMTA0NzIyLDUKaHUqaCpldG8qbAptaW5pb24gb2YgaHVoZXRvdGwKMTA1MDI0LDYKaHVtYW5vaWQKMTA1MzYwLDUKaHVtYW4KY2hpZWZ0YWluCmd1YXJkCm5pbmphCm51cnNlCnJvbmluCnN0dWRlbnQKd2Fycmlvcgoqd2F0Y2gqCmh1bWFuIG9yIGVsZioKMTA1NjIyLDcKaHVudGVyCjEwNjAyNyw5CmljZSBkZXZpbAoxMDYzNzYsNAppZGVmaXgKMTA2NTc5LDgKaW1wCmltcCBvciBtaW5vciBkZW1vbgoxMDcwMTMsMTMKaW5jdWJ1cwpzdWNjdWJ1cwoxMDc2NjMsNAoqaW5zZWN0CippbnNlY3RzCjEwNzg3MiwyMQoqaXJvbiBiYWxsCippcm9uIGNoYWluCjEwODk2MiwxMQppcm9uIGJhcnMKMTA5NTQ0LDkKaXNodGFyCjEwOTgyMSw3Cmlzc2VrCjExMDE4OCwxMwppemNoYWsKMTEwOTM4LDE5CmphYmJlcndvY2sKdm9ycGFsKgoxMTIxMjgsMjAKamFjaW50aCoKMTEyNzQ4LDkKamFja2FsCjExMzAxNSwxMwoqamFjaypib290KgoxMTM3MzksNwpqYWRlKgoxMTQxNjEsMTAKamFndWFyCjExNDczNSw0CmplbGx5ZmlzaAoxMTQ5NTYsNQpqdWlibGV4Cmp1YmlsZXgKMTE1MTM4LDYKaz9yYXRpb24KMTE1NDgwLDkKa2FidXRvCjExNTk1NCwxOQprYXRhbmEKMTE3MDk4LDMKa2VscCoKKmZyb25kCjExNzI2NSwxMwpraS1yaW4KMTE4MDA1LDQKa2luZyBhcnRodXIKKmFydGh1cgoxMTgyMjQsMjMKa25pZmUKc3RpbGV0dG8KMTE5NDI1LDE1CmtuaWdodAoqIGtuaWdodAoxMjAwMjUsOQp+a29ib2xkID8/bSoKKmtvYm9sZCoKMTIwMzc1LDUKKmtvcCoKMTIwNjQ0LDI4CmtvcwoxMjIzMDEsNgprb3RvCjEyMjYxNiwxCmtyYWtlbgoxMjI2MzQsOAoqbGFkeQpvZmZsZXIKMTIzMDkyLDMwCipsYW1wCjEyNDQwNSwxNQpsYW5jZQoxMjUwOTcsMTMKbGFuZCBtaW5lCjEyNTg3MSw1CipsYW50ZXJuCjEyNjEzNiw0CmxhdmEKKiBsYXZhCjEyNjMyMSwyMwpsZWFzaAoxMjc2NzksOQpsZW1iYXMqCjEyODIxMSwxOApsZW11cmUKbGFydmFlCjEyOTIzNCwxMApsZW9jcm90dGEKbGV1Km90dGEKMTI5ODIwLDcKbGVwcmVjaGF1bgoxMzAyMDgsMTgKKmxpY2gKMTMxMjA5LDE4CmxpY2hlbgoxMzIzMzIsNwp+KiBvZiBsaWdodAoqIGxpZ2h0CmxpZ2h0CjEzMjY5MSwzCmdlY2tvCmlndWFuYQpsaXphcmQKMTMyODE3LDkKbG9raQoxMzMzNDQsMTQKKmxvbmdib3cgb2YgZGlhbmEKMTM0MTQ2LDIKbG9va2luZyBnbGFzcwptaXJyb3IKMTM0MjgzLDEzCmxvcmQgY2FybmFydm9uCjEzNDczMyw4CmxvcmQgc2F0bwoxMzUxOTUsMwpsb3JkIHN1cnQqCjEzNTM3Myw5Cmx1Y2sKYmFkIGx1Y2sKMTM1ODU0LDEzCmx1ZyoKMTM2NDg2LDgKbHVya2VyKgoxMzY5NTksMwpseWNhbnRocm9wZQp3ZXJlKgpodW1hbiB3ZXJlKgoqd2VyZQoxMzcxMTUsMTcKbHlueAoxMzgxMDgsNgp+KnNjZXB0cmUgb2YgbWlnaHQKbWFjZQpzY2VwdHJlCjEzODQzMCw3Cm1hZ2ljIG1hcmtlcgoxMzg4MTksMgptYWdpYyBtaXJyb3Igb2YgbWVybGluCjEzODg5NywxNQptYWdpY2JhbmUKMTM5NTY3LDIKbWFpbCBkKmVtb24KMTM5NjU2LDIKbWEqYW5uYW4qCjEzOTc0Niw3Cm1hbmVzCjE0MDExMSwxMQptYXJkdWsKMTQwNjE5LDEwCm1hcmlsaXRoCjE0MTE4NSw1Cm1hcnMKMTQxNDM3LDcKbWFydGlhbCBhcnRzCnVuYXJtZWQgY29tYmF0CmJhcmUqaGFuZGVkIGNvbWJhdAoxNDE4MzQsNgptYXN0ZXIgYXNzYXNzaW4KMTQyMTc1LDE5Cm1hc3RlciBrZXkgb2YgdGhpZXZlcnkKMTQzMDc4LDUKbWFzdGVyIG9mIHRoaWV2ZXMKMTQzMzY5LDExCm1hc3RvZG9uCjE0Mzk5Myw1CiptYXR0b2NrCjE0NDIzMyw3Cm1lYXQqCmh1Z2UgY2h1bmsgb2YgbWVhdAoxNDQ2MTksNQptZWR1c2EKcGVyc2V1cwoxNDQ3ODgsMjIKbWVsb24KMTQ1OTgxLDEwCm1lcmN1cnkKMTQ2NTEyLDMKKm1pbWljCjE0NjY2Nyw2CiptaW5kIGZsYXllcgoxNDcwMTEsNgptaW5lKgpnbm9taXNoIG1pbmVzCjE0NzM0NSwxMgptaW5vdGF1cgoxNDgwNjIsOQptaXQqcmEqCjE0ODU1OSwxNQoqbWl0aHJpbCoKMTQ5NDA2LDYKKm1pdHJlIG9mIGhvbGluZXNzCjE0OTc0MSw0Cm1qb2xsbmlyCjE0OTk4NywxNAptb2cKMTUwODI3LDIKfnNsaW1lIG1vbGQKKm1vbGQKMTUwOTQzLDYKbW9sP2NoCjE1MTI3NiwxNgptb25rCiogbW9uawpncmFuZCBtYXN0ZXIKbWFzdGVyIGthZW4KMTUyMTEyLDM4Cm1vbmtleQoxNTM5MTUsMTUKbW9ybmluZyBzdGFyCjE1NDgxNywxNAptdW1hayoKMTU1NjAxLDgKKm11bW15CjE1NjA1NywxNAptdW1teSB3cmFwcGluZwoxNTY3OTksMTUKKm5hZ2EqCipuYWphKgoxNTc2MzksNApuYWdpbmF0YQoxNTc4ODAsMTkKbmFsZmVzaG5lZQoxNTg4MzksMgpuYWx6b2sKMTU4OTU3LDcKbmVhbmRlcnRoYWwqCjE1OTM2MCwzCm5lZmVyZXQKbmVmZXJldCB0aGUgZ3JlZW4KMTU5NTM5LDcKbmV3dAoxNTk5NDksMTMKbmluamEtdG8KMTYwMzkyLDEKKm5vcm4KMTYwNDE2LDEzCm51bmNoYWt1CjE2MTE2NSwxMwoqbnltcGgKbmFpYWQKMTYxODc1LDI0Cm9ic2lkaWFuKgoxNjMxNjcsMTAKb2RpbgoxNjM3NTMsMjIKb2dyZSoKMTY0OTcyLDE2Cm9pbHNraW4gY2xvYWsKMTY1ODcxLDkKb2lsc2tpbiBzYWNrCjE2NjM4Niw5Cm9sb2ctaGFpCjE2Njg3NywxMwpvcmFjbGUKZGVscGhpCnAqdGhpYQoxNjc2NzEsOQpvcmFuZ2UKcGVhcgoxNjgxNTAsMTEKKm9yYiBvZiBkZXRlY3Rpb24KMTY4Nzc1LDQKKm9yYiBvZiBmYXRlCjE2ODk5Miw3CmdvYmxpbiBraW5nCm9yY3Jpc3QKMTY5MzkyLDkKb3JjdXMKMTY5ODk0LDMKfm9yYyA/P20qCn5vcmNpc2ggYmFyYmFyaWFuCn5vcmNpc2ggcmFuZ2VyCn5vcmNpc2ggcm9ndWUKfm9yY2lzaCB3aXphcmQKb3JjKgoqIG9yYwp1cnVrKmhhaQoxNzAwNzEsMTUKb3Jpb24Kc2lyaXVzCjE3MDkxMywxOQpvc2FrdQoxNzE4NzUsMQpvd2xiZWFyCjE3MTkyMSw2CnBhZ2UKMTcyMjM0LDUKKnBhbGwKMTcyNDk1LDYKcGFudGhlcgoxNzI4MTYsOQoqcGFwZXIKMTczMTM4LDEzCnBlbGlhcwoxNzM5MTksMTgKcGljaypheCoKYnJvYWQgcGljawoxNzQ5MjMsNQoqcGllcmNlcgoxNzUxMDYsOApwaXJhbmhhCjE3NTUxMyw4CnBpdApzcGlrZWQgcGl0CjE3NTkzMSwxMApwaXQgZmllbmQKMTc2NTEwLDQKcGxhdGludW0geWVuZG9yaWFuIGV4cHJlc3MgY2FyZAoxNzY2OTcsNwpwbGF5ZXIKcGxheSogc3R5bGUKdXNlcgoxNzcwODcsMTIKcG9sZWFybQoqIHBvbGVhcm0KcGFydGlzYW4KcmFuc2V1cgpzcGV0dW0KZ2xhaXZlCmhhbGJlcmQKYmFyZGljaGUKYW5nbGVkIHBvbGVheGUKbG9uZyBwb2xlYXhlCnZvdWxnZQpwb2xlIGNsZWF2ZXIKZmF1Y2hhcmQKcG9sZSBzaWNrbGUKZ3Vpc2FybWUKYmlsbC1ndWlzYXJtZQpsdWNlcm4gaGFtbWVyCmJlYyBkZSBjb3JiaW4KMTc3NDI4LDYKcG9seW1vcnBoIHRyYXAKMTc3ODEwLDEwCnBvbnkKMTc4Mzk2LDE0Cipwb3J0YWwKMTc5MDI5LDYKdHJpZGVudApwb3NlaWRvKm4KMTc5MzcxLDE3Cn4qc2xlZXBpbmcKfipib296ZQoqcG90aW9uKgoxODAyOTYsMjUKcHJheSoKMTgxNDg2LDQKcHJpZXN0KgoqIHByaWVzdCoKYWNvbHl0ZQoxODE2NjQsMTYKcGFkZGxlIGNhY3R1cwoxODI2MTQsNgpwcmlzb25lcgoxODI5NDMsMTUKcHRhaAoxODMzMDEsOQoqcHVycGxlIHdvcm0KMTgzNzc4LDYKcHlyb2xpc2sKMTg0MTA5LDEzCnB5dGhvbgoxODQ4NjQsMTIKcXVhZHJ1cGVkCjE4NTQ2NCw1CnF1YW50dW0gbWVjaGFuaWMKMTg1NzU1LDE3CnF1YXNpdAoxODY2MzUsMgoqcXVlc3QKMTg2NzU1LDEzCnF1ZXR6YWxjb2F0bAoxODc0OTAsMTMKcXVpdCoKMTg4Mjc5LDgKcmFpamluCnJhaWRlbgoxODg2NjAsOApyYW5nZXIKKiByYW5nZXIKMTg5MTE2LDE0CnJhdAoqIHJhdAoxODk5NDMsMTQKcmF2ZW4KMTkwNjA4LDcKfippbnZpc2liaWxpdHkKcmluZwoqIHJpbmcKcmluZyBvZiAqCjE5MTAxNiw5CnJpbmcgb2YgaW52aXNpYmlsaXR5CjE5MTQ0OCwxOApyb2JlCjE5MjUxNiwxMQpyb2NrCjE5MzEwNywyMQpyb2NrIG1vbGUKMTk0MzE1LDYKcm9kZW50KgoxOTQ2NTcsNQpyb2d1ZQoqIHJvZ3VlCjE5NDkyMSwxMQpyb290CmR3YXJ2ZW4gcm9vdAoxOTU1NDMsMjEKcm9zaGkKMTk2NjAzLDcKcm90aGUKMTk2OTY1LDMKKnJveWFsIGplbGx5CjE5NzEwNywxNApydWJ5CnNhcHBoaXJlCjE5NzY3OCw3CnJ1c3QgbW9uc3RlcgoxOTgwNjEsMwpydXN0IG1vbnN0ZXIgb3IgZGlzZW5jaGFudGVyCjE5ODE5OSwyCipzYWJlcgoqc2FicmUKMTk4MzA5LDE0CnNhZGRsZQoxOTg3MTcsOQpzYWtlCjE5ODk4NSwxCnNhbGFtYW5kZXIKMTk5MDA2LDcKc2FtdXJhaQoqIHNhbXVyYWkKMTk5MzU3LDExCnNhbmRlc3RpbgoyMDAwMjAsMzEKc2FzcXVhdGNoCjIwMTM1OSwxOApzY2FscGVsCjIwMjQzOCw1CipzY2VwdHJlIG9mIG1pZ2h0CjIwMjcyMSw2CnNjaW1pdGFyCjIwMzAyMyw1CnNjb3JwaW8qCjIwMzI3OCw1CnNjb3JwaXVzCjIwMzU1Miw2CipzY3JvbGwKc2Nyb2xsICoKMjAzOTA3LDE4CnNldApzZXRoCjIwNDcxMSwxMwpzaGFkKgoyMDU0NjAsNApzaGFtYW4ga2Fybm92CjIwNTY1MywzCnNoYW4qbGFpKmNoaW5nCjIwNTgwOCw1CnNoYXJrCjIwNjA2NiwxNQpzaGl0bwoyMDY4MjksMQpzaG9wa2VlcGVyCjIwNjg1NywyNApzaHJpZWtlcgoyMDgxNjQsNwp0aHJvd2luZyBzdGFyCnNodXJpa2VuCjIwODU2MSw3CnNrZWxldG9uCjIwODk3Miw0CnNsYXNoZXIKMjA5MjE1LDE3CipzbGVlcAoyMTAxOTMsNQpzbGltZSBtb2xkCjIxMDM2MCw4CnNsaW5nCjIxMDgwNCwxMQoqc25ha2UKc2VycGVudAp3YXRlciBtb2NjYXNpbgpwaXQgdmlwZXIKMjExMzQxLDI0CnNuaWNrZXJzbmVlCjIxMjczOSw2CnNva29iYW4KMjEyOTYxLDEyCipzb2xkaWVyCnNlcmdlYW50CmxpZXV0ZW5hbnQKY2FwdGFpbgoyMTM1OTksOAoqc3BlYXIKamF2ZWxpbgoyMTQwNTksMTgKKnNwZWxsYm9vayoKMjE1MDkyLDE2CipzcGlkZXIKMjE1OTc2LDExCipzcG9yZQoqc3BoZXJlCjIxNjQxMSw0CnNxdWVha3kgYm9hcmQKMjE2NTkxLDgKfiphZXNjdWxhcGl1cwoqc3RhZmYKMjE3MDA3LDE4CipzdGFmZiBvZiBhZXNjdWxhcGl1cwoyMTgwOTUsNQpzdGFpcioKMjE4MzY2LDIwCn5zdGF0dWUgdHJhcApzdGF0dWUqCjIxOTQwNCwxNwpzdGluZwoyMjA0MTgsMTIKc3Rvcm1icmluZ2VyCjIyMTAzOCwxNgoqc3RyYW5nZSBvYmplY3QKMjIxOTM5LDYKc3RyYXcgZ29sZW0KMjIyMjM0LDExCnN1bnN3b3JkCjIyMjg2Miw0CnN1c2FubypvCjIyMjk5Nyw2CnRhbmtvCjIyMzMwMiwxCnRlbmd1CjIyMzM2MCw3CnRob3RoCjIyMzc1NCwxOQp0aG90aCphbW9uCjIyNDgxMiw1Cip0aHJvbmUKMjI1MDY0LDE2CnRodWcKMjI1NzI5LDkKdGlnZXIKMjI2MjQzLDEyCnRpbgp0aW4gb2YgKgp0aW5uaW5nIGtpdAoyMjY3NDEsOAp0aW4gb3BlbmVyCjIyNzA3NywyMAp0aXRhbgoyMjgwMDgsMTEKdG9wYXoKMjI4NjAyLDEwCnRvdWNoKnN0b25lCjIyOTE4MywyCnRvdXJpc3QKKiB0b3VyaXN0CjIyOTI1NSwxOAp0b3dlbAp3ZXQgdG93ZWwKbW9pc3QgdG93ZWwKMjMwMjE4LDE5Cip0b3dlcgoqdG93ZXIgb2YgZGFya25lc3MKMjMxMjg4LDcKdHJhcCpkb29yCjIzMTY5Niw4CnRyYXBwZXIKdHJhcHBlciBvciBsdXJrZXIgYWJvdmUKMjMyMTUyLDUKdHJlZQoyMzI0NTUsMTMKdHJpcGUKdHJpcGUgcmF0aW9uCjIzMjg4NSwxMAp+d2F0ZXIgdHJvbGwKKnRyb2xsCjIzMzQ3NywxNQoqdHN1cnVnaSBvZiBtdXJhbWFzYQoyMzQzMDAsNQp+Km11cmFtYXNhCnRzdXJ1Z2kKMjM0NjA1LDYKfipzcGVsbGJvb2sKdHVycXVvaXNlKgoyMzQ5MTQsMTAKdHdvZmxvd2VyCmd1aWRlCjIzNTQyMCwyMwp0eXIKMjM2NDM1LDE0CipodWxrCjIzNzI0NCw1Cip1bmljb3JuCnVuaWNvcm4gaG9ybgoyMzc1MTQsMjYKdW5yZWNvbm5vaXRlcmVkCjIzODkzMSwyCnZhbGt5cmllCiogdmFsa3lyaWUKMjM5MDI4LDEyCnZhbXBpcmUKfnZhbXBpcmUgYmF0CnZhbXBpcmUgbG9yZAoyMzk2NzIsMjAKdmVudXMKMjQwNjk3LDExCnZsYWQqCjI0MTMwNyw5Cip2b3J0ZXgKdm9ydGljZXMKMjQxODUyLDUKdnJvY2sKMjQyMTQ1LDQKd2FraXphc2hpCjI0MjMzOSwxMAp+KnNsZWVwCndhbmQgKgoqd2FuZAoyNDI4OTAsMTAKd2FyZwoyNDM0NjcsMTcKfm1qb2xsbmlyCndhcipoYW1tZXIKMjQ0MzE1LDEzCndhdGVyCjI0NTA2NywxMAp3YXRlciBkZW1vbgoyNDUzNTksMjIKd2F0ZXIgdHJvbGwKMjQ2NTQxLDE0CndlYXBvbgoyNDczMzQsMgp3ZWIKMjQ3NDM5LDMKd2hpc3RsZQoyNDc1NDMsMTQKKndpZ2h0CjI0ODEyNyw5Cndpbgp3aW5uZXIKd2lubmluZwoyNDg2MjEsNgp+Z25vbWlzaCB3aXphcmQKd2l6YXJkCiogd2l6YXJkCmFwcHJlbnRpY2UKMjQ4OTIxLDgKd2l6YXJkIG9mIHllbmRvcgoyNDkzODIsMTAKd29sZgoqd29sZgoqd29sZiBjdWIKMjQ5OTYyLDUKKndvbGZzYmFuZQoyNTAyMTUsOQp3b29kIGdvbGVtCjI1MDY4NCwxOQp3b29kY2h1Y2sKMjUxMjY0LDEzCip3b3JtCmxvbmcgd29ybSB0YWlsCndvcm0gdG9vdGgKY3J5c2tuaWZlCjI1MTg5NSw2CndyYWl0aApuYXpndWwKMjUyMjI3LDE3Cip3dW1wdXMKMjUzMTkzLDExCnhhbgoyNTM3MTQsMTIKeG9ybgoyNTQzMzksNQp5YQoyNTQ2MDQsMgp5ZWVub2dodQoyNTQ3MTUsNQp5ZXRpCjI1NDk4MCwxNQoqeXVnYWtlCjI1NTg1MSwzCnl1bWkKMjU2MDM2LDQKKnpvbWJpKgoyNTYyNDUsNQp6cnV0eQoyNTY0ODksMgouCjI1NjU4MiwwCglGb3IgaXQgaGFkIGJlZW4gbG9uZyBhcHBhcmVudCB0byBDb3VudCBMYW5kdWxmIHRoYXQgbm90aGluZwoJY291bGQgYmUgZG9uZSB3aXRoIGhpcyBzZXZlbnRoIHNvbiBUaG9tYXMsIGV4Y2VwdCB0byBtYWtlIGhpbQoJYW4gQWJib3Qgb3Igc29tZXRoaW5nIG9mIHRoYXQga2luZC4gIEJvcm4gaW4gMTIyNiwgaGUgaGFkIGZyb20KCWNoaWxkaG9vZCBhIG15c3RlcmlvdXMgb2JqZWN0aW9uIHRvIGJlY29taW5nIGEgcHJlZGF0b3J5IGVhZ2xlLAoJb3IgZXZlbiB0byB0YWtpbmcgYW4gb3JkaW5hcnkgaW50ZXJlc3QgaW4gZmFsY29ucnkgb3IgdGlsdGluZwoJb3IgYW55IG90aGVyIGdlbnRsZW1hbmx5IHB1cnN1aXRzLiAgSGUgd2FzIGEgbGFyZ2UgYW5kIGhlYXZ5IGFuZAoJcXVpZXQgYm95LCBhbmQgcGhlbm9tZW5hbGx5IHNpbGVudCwgc2NhcmNlbHkgb3BlbmluZyBoaXMgbW91dGgKCWV4Y2VwdCB0byBzYXkgc3VkZGVubHkgdG8gaGlzIHNjaG9vbG1hc3RlciBpbiBhbiBleHBsb3NpdmUKCW1hbm5lciwgIldoYXQgaXMgR29kPyIgIFRoZSBhbnN3ZXIgaXMgbm90IHJlY29yZGVkIGJ1dCBpdCBpcwoJcHJvYmFibGUgdGhhdCB0aGUgYXNrZXIgd2VudCBvbiB3b3JyeWluZyBvdXQgYW5zd2VycyBmb3IgaGltc2VsZi4KCQlbIFRoZSBSdW5hd2F5IEFiYm90LCBieSBHLiBLLiBDaGVzdGVydG9uIF0KCSJUaGUgbGFzdCBzcG90IG9uIHRoZSBzY2hvb2wgam91c3RpbmcgdGVhbSBjYW1lIGRvd24gdG8gYW5vdGhlcgoJYm95IGFuZCBtZS4gIEhlIHdhcyBwb29yLCBhbmQgaGlzIG9ubHkgYXJtb3Igd2FzIGEgYmxhbmtldCBoaXMKCW1vdGhlciBoYWQgbWFkZSBoaW0gZnJvbSBoZXIgaGFpci4gIEksIG9uIHRoZSBvdGhlciBoYW5kLCBoYWQKCWEgYnJhbmQgbmV3IHN1aXQgb2YgY2hhaW4gbWFpbC4gIEp1c3QgYmVmb3JlIG91ciBqb3VzdCwgSSBhc2tlZAoJaGltIHdoYXQgaGUnZCBkbyBpZiBoZSBtYWRlIHRoZSB0ZWFtLiAgKEkgd2FzIGhvcGluZyB0byBiZSBtb3JlCglwb3B1bGFyIHdpdGggdGhlIGxhZGllcy4pICBIZSBzYWlkIGhlIHdvdWxkIGJlIGFibGUgdG8gc2F2ZSB0aGUKCXRvd24gZnJvbSBkcmFnb25zIGFuZCBiZSBhYmxlIHRvIGFmZm9yZCBzb21lIHdhdGVyIGZvciBoaXMgMjAKCWJyb3RoZXJzIGFuZCBzaXN0ZXJzLgoKCVdlbGwsIGEgc2Vuc2Ugb2YgY29tcGFzc2lvbiBjYW1lIG92ZXIgbWUuICBJIGluc2lzdGVkIHdlIHN3YXAKCWFybW9yLiAgSGUgd2FzIGZvcmNlZCB0byBhY2NlcHQsIGFzIGl0IHdvdWxkIGhhdmUgYmVlbiBhbgoJaW5zdWx0IG5vdCB0byBkbyBzby4KCglPbiB0aGUgYmF0dGxlZmllbGQsIHdlIGNoYXJnZWQgYXQgZWFjaCBvdGhlciBhbmQgd2UgYm90aCBjb25uZWN0ZWQKCXdpdGggb3VyIGxhbmNlcy4KCglMeWluZyB0aGVyZSBvbiB0aGUgbXVkIG1vcnRhbGx5IHdvdW5kZWQsIEkgbGVhcm5lZCB3aGF0IHRydWUgYXJtb3IKCWNsYXNzIHdhcyB0aGF0IGRheS4iCgkJWyBXaGVuIEhlbHAgQ29sbGlkZXMsIGJ5IEouIEQuIEJlcnJ5IF0KCUEgc2hvcnQgc3R1ZGRlZCBvciBzcGlrZWQgY2x1YiBhdHRhY2hlZCB0byBhIGNvcmQgYWxsb3dpbmcKCWl0IHRvIGJlIGRyYXduIGJhY2sgdG8gdGhlIHdpZWxkZXIgYWZ0ZXIgaGF2aW5nIGJlZW4gdGhyb3duLgoJSXQgc2hvdWxkIG5vdCBiZSBjb25mdXNlZCB3aXRoIHRoZSBhdGxhdGwsIHdoaWNoIGlzIGEgZGV2aWNlCgl1c2VkIHRvIHRocm93IHNwZWFycyBmb3IgbG9uZ2VyIGRpc3RhbmNlcy4KCVRyYW5zbHVjZW50LCBjcnlwdG9jcnlzdGFsbGluZSB2YXJpZXR5IG9mIHF1YXJ0eiBhbmQgYSBzdWJ2YXJpZXR5CglvZiBjaGFsY2Vkb255LiAgQWdhdGVzIGFyZSBpZGVudGljYWwgaW4gY2hlbWljYWwgc3RydWN0dXJlIHRvCglqYXNwZXIsIGZsaW50LCBjaGVydCwgcGV0cmlmaWVkIHdvb2QsIGFuZCB0aWdlcidzLWV5ZSwgYW5kIGFyZQoJb2Z0ZW4gZm91bmQgaW4gYXNzb2NpYXRpb24gd2l0aCBvcGFsLiAgVGhlIGNvbG9yZnVsLCBiYW5kZWQgcm9ja3MKCWFyZSB1c2VkIGFzIGEgc2VtaXByZWNpb3VzIGdlbXN0b25lIGFuZCBpbiB0aGUgbWFudWZhY3R1cmUgb2YKCWdyaW5kaW5nIGVxdWlwbWVudC4gIEFuIGFnYXRlJ3MgYmFuZGluZyBmb3JtcyBhcyBzaWxpY2EgZnJvbQoJc29sdXRpb24gaXMgc2xvd2x5IGRlcG9zaXRlZCBpbnRvIGNhdml0aWVzIGFuZCB2ZWlucyBpbiBvbGRlcgoJcm9jay4KCQlbIFRoZSBDb2x1bWJpYSBFbmN5Y2xvcGVkaWEsIFNpeHRoIEVkaXRpb24gXQoJU2FpZCB0byBiZSBhIGRvcHBlbGdhbmdlciBzZW50IHRvIGluZmxpY3QgZGl2aW5lIHB1bmlzaG1lbnQKCWZvciBhbGlnbm1lbnQgdmlvbGF0aW9ucy4KCUFsdGFycyBhcmUgb2YgdGhyZWUgdHlwZXM6CgkxLiAgSW4gVGVtcGxlcy4gIFRoZXNlIGFyZSBmb3IgU2FjcmlmaWNlcyBbLi4uXS4gIFRoZSBzdG9uZQoJdG9wIHdpbGwgaGF2ZSBncm9vdmVzIGZvciBibG9vZCwgYW5kIHRoZSB3aG9sZSB3aWxsIGJlIGNvdmVyZWQKCXdpdGggX2RyeSBicm93biBzdGFpbnMgb2YgYSB0cm91Ymxpbmcga2luZF8gZnJvbSBmb3JtZXIKCVNhY3JpZmljZXMuCgkgIFsgVGhlIFRvdWdoIEd1aWRlIHRvIEZhbnRhc3lsYW5kLCBieSBEaWFuYSBXeW5uZSBKb25lcyBdCgoJVG8gZXZlcnkgbWFuIHVwb24gdGhpcyBlYXJ0aAoJRGVhdGggY29tZXRoIHNvb24gb3IgbGF0ZTsKCUFuZCBob3cgY2FuIG1hbiBkaWUgYmV0dGVyCglUaGFuIGZhY2luZyBmZWFyZnVsIG9kZHMKCUZvciB0aGUgYXNoZXMgb2YgaGlzIGZhdGhlcnMKCUFuZCB0aGUgdGVtcGxlcyBvZiBoaXMgZ29kcz8KCQlbIExheXMgb2YgQW5jaWVudCBSb21lLCBieSBUaG9tYXMgQi4gTWFjYXVsYXkgXQoJVGhlIFNoaW50byBzdW4gZ29kZGVzcywgQW1hdGVyYXN1IE9taWthbWkgaXMgdGhlIGNlbnRyYWwKCWZpZ3VyZSBvZiBTaGludG9pc20gYW5kIHRoZSBhbmNlc3RyYWwgZGVpdHkgb2YgdGhlIGltcGVyaWFsCglob3VzZS4gIE9uZSBvZiB0aGUgZGF1Z2h0ZXJzIG9mIHRoZSBwcmltb3JkaWFsIGdvZCBJemFuYWdpCglhbmQgc2FpZCB0byBiZSBoaXMgZmF2b3VyaXRlIG9mZnNwcmluZywgc2hlIHdhcyBib3JuIGZyb20KCWhpcyBsZWZ0IGV5ZS4KCQlbIEVuY3ljbG9wZWRpYSBvZiBHb2RzLCBieSBNaWNoYWVsIEpvcmRhbiBdCgkiVHJlZSBzYXAsIiBXdSBleHBsYWluZWQsICJvZnRlbiBmbG93cyBvdmVyIGluc2VjdHMgYW5kIHRyYXBzCgl0aGVtLiAgVGhlIGluc2VjdHMgYXJlIHRoZW4gcGVyZmVjdGx5IHByZXNlcnZlZCB3aXRoaW4gdGhlCglmb3NzaWwuICBPbmUgZmluZHMgYWxsIGtpbmRzIG9mIGluc2VjdHMgaW4gYW1iZXIgLSBpbmNsdWRpbmcKCWJpdGluZyBpbnNlY3RzIHRoYXQgaGF2ZSBzdWNrZWQgYmxvb2QgZnJvbSBsYXJnZXIgYW5pbWFscy4iCgkJWyBKdXJhc3NpYyBQYXJrLCBieSBNaWNoYWVsIENyaWNodG9uIF0KCUdldCB0aGVlIGhlbmNlLCBub3IgY29tZSBhZ2FpbiwKCU1peCBub3QgbWVtb3J5IHdpdGggZG91YnQsCglQYXNzLCB0aG91IGRlYXRobGlrZSB0eXBlIG9mIHBhaW4sCglQYXNzIGFuZCBjZWFzZSB0byBtb3ZlIGFib3V0IQoJJ1RpcyB0aGUgYmxvdCB1cG9uIHRoZSBicmFpbgoJVGhhdCB3aWxsIHNob3cgaXRzZWxmIHdpdGhvdXQuCgkJLi4uCglGb3IsIE1hdWQsIHNvIHRlbmRlciBhbmQgdHJ1ZSwKCUFzIGxvbmcgYXMgbXkgbGlmZSBlbmR1cmVzCglJIGZlZWwgSSBzaGFsbCBvd2UgeW91IGEgZGVidCwKCVRoYXQgSSBuZXZlciBjYW4gaG9wZSB0byBwYXk7CglBbmQgaWYgZXZlciBJIHNob3VsZCBmb3JnZXQKCVRoYXQgSSBvd2UgdGhpcyBkZWJ0IHRvIHlvdQoJQW5kIGZvciB5b3VyIHN3ZWV0IHNha2UgdG8geW91cnM7CglPIHRoZW4sIHdoYXQgdGhlbiBzaGFsbCBJIHNheT8gLQoJSWYgZXZlciBJIHNob3VsZCBmb3JnZXQsCglNYXkgR29kIG1ha2UgbWUgbW9yZSB3cmV0Y2hlZAoJVGhhbiBldmVyIEkgaGF2ZSBiZWVuIHlldCEKCQlbIE1hdWQsIEFuZCBPdGhlciBQb2VtcyBieSBBbGZyZWQsIExvcmQgVGVubnlzb24gXQoJIlRoZSBjb21wbGV0ZSBBbXVsZXQgY2FuIGtlZXAgb2ZmIGFsbCB0aGUgdGhpbmdzIHRoYXQgbWFrZQoJcGVvcGxlIHVuaGFwcHkgLS0gamVhbG91c3ksIGJhZCB0ZW1wZXIsIHByaWRlLCBkaXNhZ3JlZWFibGVuZXNzLAoJZ3JlZWRpbmVzcywgc2VsZmlzaG5lc3MsIGxhemluZXNzLiAgRXZpbCBzcGlyaXRzLCBwZW9wbGUgY2FsbGVkCgl0aGVtIHdoZW4gdGhlIEFtdWxldCB3YXMgbWFkZS4gIERvbid0IHlvdSB0aGluayBpdCB3b3VsZCBiZSBuaWNlCgl0byBoYXZlIGl0PyIKCSJWZXJ5LCIgc2FpZCB0aGUgY2hpbGRyZW4sIHF1aXRlIHdpdGhvdXQgZW50aHVzaWFzbS4KCSJBbmQgaXQgY2FuIGdpdmUgeW91IHN0cmVuZ3RoIGFuZCBjb3VyYWdlLiIKCSJUaGF0J3MgYmV0dGVyLCIgc2FpZCBDeXJpbC4KCSJBbmQgdmlydHVlLiIKCSJJIHN1cHBvc2UgaXQncyBuaWNlIHRvIGhhdmUgdGhhdCwiIHNhaWQgSmFuZSwgYnV0IG5vdCB3aXRoIG11Y2gKCWludGVyZXN0LgoJIkFuZCBpdCBjYW4gZ2l2ZSB5b3UgeW91ciBoZWFydCdzIGRlc2lyZS4iCgkiTm93IHlvdSdyZSB0YWxraW5nLCIgc2FpZCBSb2JlcnQuCgkJWyBUaGUgU3Rvcnkgb2YgdGhlIEFtdWxldCwgYnkgRWRpdGggTmVzYml0IF0KCVRoaXMgbXlzdGVyaW91cyB0YWxpc21hbiBpcyB0aGUgb2JqZWN0IG9mIHlvdXIgcXVlc3QuICBJdCBpcwoJc2FpZCB0byBwb3NzZXNzIHBvd2VycyB3aGljaCBtZXJlIG1vcnRhbHMgY2FuIHNjYXJjZWx5Cgljb21wcmVoZW5kLCBsZXQgYWxvbmUgdXRpbGl6ZS4gIFRoZSBnb2RzIHdpbGwgZ3JhbnQgdGhlIGdpZnQgb2YKCWltbW9ydGFsaXR5IHRvIHRoZSBhZHZlbnR1cmVyIHdobyBjYW4gZGVsaXZlciBpdCBmcm9tIHRoZQoJZGVwdGhzIG9mIE1vbG9jaCdzIFNhbmN0dW0gYW5kIG9mZmVyIGl0IG9uIHRoZSBhcHByb3ByaWF0ZSBoaWdoCglhbHRhciBvbiB0aGUgQXN0cmFsIFBsYW5lLgoJSGUgYW5zd2VyZWQgYW5kIHNhaWQgdW50byB0aGVtLCBoZSB0aGF0IHNvd2V0aCB0aGUgZ29vZCBzZWVkCglpcyB0aGUgU29uIG9mIG1hbjsgdGhlIGZpZWxkIGlzIHRoZSB3b3JsZCwgYW5kIHRoZSBnb29kIHNlZWQKCWFyZSB0aGUgY2hpbGRyZW4gb2YgdGhlIGtpbmdkb207IGJ1dCB0aGUgd2VlZHMgYXJlIHRoZQoJY2hpbGRyZW4gb2YgdGhlIHdpY2tlZCBvbmU7IHRoZSBlbmVteSB0aGF0IHNvd2VkIHRoZW0gaXMgdGhlCglkZXZpbDsgdGhlIGhhcnZlc3QgaXMgdGhlIGVuZCBvZiB0aGUgd29ybGQ7IGFuZCB0aGUgcmVhcGVycwoJYXJlIHRoZSBhbmdlbHMuICBBcyB0aGVyZWZvcmUgdGhlIHdlZWRzIGFyZSBnYXRoZXJlZCBhbmQKCWJ1cm5lZCBpbiB0aGUgZmlyZTsgc28gc2hhbGwgaXQgYmUgaW4gdGhlIGVuZCBvZiB0aGlzIHdvcmxkLgoJWy4uLl0gIFNvIHNoYWxsIGl0IGJlIGF0IHRoZSBlbmQgb2YgdGhlIHdvcmxkOyB0aGUgYW5nZWxzCglzaGFsbCBjb21lIGZvcnRoLCBhbmQgc2V2ZXIgdGhlIHdpY2tlZCBmcm9tIGFtb25nIHRoZSBqdXN0LAoJYW5kIHNoYWxsIGNhc3QgdGhlbSBpbnRvIHRoZSBmdXJuYWNlIG9mIGZpcmU7IHRoZXJlIHNoYWxsIGJlCgl3YWlsaW5nIGFuZCBnbmFzaGluZyBvZiB0ZWV0aC4KCQlbIFRoZSBHb3NwZWwgQWNjb3JkaW5nIHRvIE1hdHRoZXcsIDEzOjM3LTQyLCA0OS01MCBdCglDb2xkIHdpbmQgYmxvd3MuCglUaGUgZ29kcyBsb29rIGRvd24gaW4gYW5nZXIgb24gdGhpcyBwb29yIGNoaWxkLgoKCVdoeSBzbyB1bmZvcmdpdmluZz8KCUFuZCB3aHkgc28gY29sZD8KCQlbIEJyaWRnZSBvZiBTaWdocywgYnkgUm9iaW4gVHJvd2VyIF0KCUFuIEVneXB0aWFuIGdvZCBvZiB3YXIgYW5kIGEgZ3JlYXQgaHVudGVyLCBmZXcgZ29kcyBjYW4gbWF0Y2gKCWhpcyBmdXJ5LiAgVW5saWtlIG1hbnkgZ29kcyBvZiB3YXIsIGhlIGlzIGEgZm9yY2UgZm9yIGdvb2QuCglUaGUgd3JhdGggb2YgQW5odXIgaXMgc2xvdyB0byBjb21lLCBidXQgaXQgaXMgaW5lc2NhcGFibGUKCW9uY2UgZWFybmVkLiAgQW5odXIgaXMgYSBtaWdodHkgZmlndXJlIHdpdGggZm91ciBhcm1zLiAgSGUKCWlzIG9mdGVuIHNlZW4gd2l0aCBhIHBvd2VyZnVsIGxhbmNlIHRoYXQgcmVxdWlyZXMgYm90aCBvZgoJaGlzIHJpZ2h0IGFybXMgdG8gd2llbGQgYW5kIHdoaWNoIGlzIHRpcHBlZCB3aXRoIGEgZnJhZ21lbnQKCW9mIHRoZSBzdW4uICBIZSBpcyBtYXJyaWVkIHRvIE1laHV0LCBhIGxpb24taGVhZGVkIGdvZGRlc3MuCglUaGUgdHdpbiBjaXR5IG9mIEFua2gtTW9ycG9yaywgZm9yZW1vc3Qgb2YgYWxsIHRoZSBjaXRpZXMKCWJvdW5kaW5nIHRoZSBDaXJjbGUgU2VhLCB3YXMgYXMgYSBtYXR0ZXIgb2YgY291cnNlIHRoZSBob21lCglvZiBhIGxhcmdlIG51bWJlciBvZiBnYW5ncywgdGhpZXZlcycgZ3VpbGRzLCBzeW5kaWNhdGVzIGFuZAoJc2ltaWxhciBvcmdhbmlzYXRpb25zLiAgVGhpcyB3YXMgb25lIG9mIHRoZSByZWFzb25zIGZvciBpdHMKCXdlYWx0aC4gIE1vc3Qgb2YgdGhlIGh1bWJsZXIgZm9sayBvbiB0aGUgd2lkZGVyc2hpbiBzaWRlIG9mCgl0aGUgcml2ZXIsIGluIE1vcnBvcmsncyBtYXp5IGFsbGV5cywgc3VwcGxlbWVudGVkIHRoZWlyCgltZWFncmUgaW5jb21lcyBieSBmaWxsaW5nIHNvbWUgc21hbGwgcm9sZSBmb3Igb25lIG9yIG90aGVyCglvZiB0aGUgY29tcGV0aW5nIGdhbmdzLgoJICAgIFsgVGhlIENvbG91ciBvZiBNYWdpYywgYnkgVGVycnkgUHJhdGNoZXR0IF0KCUEgcHJpbW9yZGlhbCBCYWJ5bG9uaWFuLUFra2FkaWFuIGRlaXR5LCBBbnNoYXIgaXMgbWVudGlvbmVkCglpbiB0aGUgQmFieWxvbmlhbiBjcmVhdGlvbiBlcGljIF9FbnVtYSBFbGlzaF8gYXMgb25lIG9mIGEKCXBhaXIgb2Ygb2Zmc3ByaW5nICh3aXRoIEtpc2hhcikgb2YgTGFobXUgYW5kIExhaGFtdS4gIEFuc2hhcgoJaXMgbGlua2VkIHdpdGggaGVhdmVuIHdoaWxlIEtpc2hhciBpcyBpZGVudGlmaWVkIHdpdGggZWFydGguCgkgICAgWyBFbmN5Y2xvcGVkaWEgb2YgR29kcywgYnkgTWljaGFlbCBKb3JkYW4gXQoJVGhpcyBnaWFudCB2YXJpZXR5IG9mIHRoZSBvcmRpbmFyeSBhbnQgd2lsbCBmaWdodCBqdXN0IGFzCglmaWVyY2VseSBhcyBpdHMgc21hbGwsIGRpc3RhbnQgY291c2luLiAgVmFyaW91cyB2YXJpZXRpZXMKCWV4aXN0LCBhbmQgdGhleSBhcmUga25vd24gYW5kIGZlYXJlZCBmb3IgdGhlaXIgcmVsZW50bGVzcwoJcGVyc2VjdXRpb24gb2YgdGhlaXIgdmljdGltcy4KCUFudSB3YXMgdGhlIEJhYnlsb25pYW4gZ29kIG9mIHRoZSBoZWF2ZW5zLCB0aGUgbW9uYXJjaCBvZgoJdGhlIG5vcnRoIHN0YXIuICBIZSB3YXMgdGhlIG9sZGVzdCBvZiB0aGUgQmFieWxvbmlhbiBnb2RzLAoJdGhlIGZhdGhlciBvZiBhbGwgZ29kcywgYW5kIHRoZSBydWxlciBvZiBoZWF2ZW4gYW5kIGRlc3RpbnkuCglBbnUgZmVhdHVyZXMgc3Ryb25nbHkgaW4gdGhlIF9hdGlrdV8gZmVzdGl2YWwgaW4KCUJhYnlsb24sIFVydWsgYW5kIG90aGVyIGNpdGllcy4KCVRoZSBtb3N0IGhpZ2hseSBldm9sdmVkIG9mIGFsbCB0aGUgcHJpbWF0ZXMsIGFzIHNob3duIGJ5CglhbGwgdGhlaXIgYW5hdG9taWNhbCBjaGFyYWN0ZXJzIGFuZCBwYXJ0aWN1bGFybHkgdGhlCglkZXZlbG9wbWVudCBvZiB0aGUgYnJhaW4uICBCb3RoIGFyYm9yZWFsIGFuZCB0ZXJyZXN0cmlhbCwKCXRoZSBhcGVzIGhhdmUgdGhlIGZvcmVsaW1icyBtdWNoIGJldHRlciBkZXZlbG9wZWQgdGhhbgoJdGhlIGhpbmQgbGltYnMuICBUYWlsIGVudGlyZWx5IGFic2VudC4gIEdyb3d0aCBpcyBzbG93CglhbmQgc2V4dWFsIG1hdHVyaXR5IHJlYWNoZWQgYXQgcXVpdGUgYW4gYWR2YW5jZWQgYWdlLgoJICBbIEEgRmllbGQgR3VpZGUgdG8gdGhlIExhcmdlciBNYW1tYWxzIG9mIEFmcmljYSBieSBEb3JzdCBdCgoJQWxkbyB0aGUgZ29yaWxsYSBoYWQgYSBwbGFuLiAgSXQgd2FzIGEgZ29vZCBwbGFuLiAgSXQgd2FzCglyaWdodC4gIEhlIGtuZXcgaXQuICBIZSBzbWFja2VkIGhpcyBsaXBzIGluIGFudGljaXBhdGlvbiBhcwoJaGUgdGhvdWdodCBvZiBpdC4gIFllcy4gIEFwZXMgc2hvdWxkIGJlIHN0cm9uZy4gIEFwZXMgc2hvdWxkCgliZSBtYXN0ZXJzLiAgQXBlcyBzaG91bGQgYmUgcHJvdWQuICBBcGVzIHNob3VsZCBtYWtlIHRoZQoJRWFydGggc2hha2Ugd2hlbiB0aGV5IHdhbGtlZC4gIEFwZXMgc2hvdWxkIF9ydWxlXyB0aGUgRWFydGguCgkgIFsgQmF0dGxlIGZvciB0aGUgUGxhbmV0IG9mIHRoZSBBcGVzLCBieSBEYXZpZCBHZXJyb2xkIF0KCU5FV1RPTklBTiwgYWRqLiAgUGVydGFpbmluZyB0byBhIHBoaWxvc29waHkgb2YgdGhlIHVuaXZlcnNlCglpbnZlbnRlZCBieSBOZXd0b24sIHdobyBkaXNjb3ZlcmVkIHRoYXQgYW4gYXBwbGUgd2lsbCBmYWxsCgl0byB0aGUgZ3JvdW5kLCBidXQgd2FzIHVuYWJsZSB0byBzYXkgd2h5LiAgSGlzIHN1Y2Nlc3NvcnMKCWFuZCBkaXNjaXBsZXMgaGF2ZSBhZHZhbmNlZCBzbyBmYXIgYXMgdG8gYmUgYWJsZSB0byBzYXkKCXdoZW4uCgkJWyBUaGUgRGV2aWwncyBEaWN0aW9uYXJ5LCBieSBBbWJyb3NlIEJpZXJjZSBdCglBcmNoZW9sb2d5IGlzIHRoZSBzZWFyY2ggZm9yIGZhY3QsIG5vdCB0cnV0aC4gWy4uLl0KCVNvIGZvcmdldCBhbnkgaWRlYXMgeW91J3ZlIGdvdCBhYm91dCBsb3N0IGNpdGllcywgZXhvdGljIHRyYXZlbCwKCWFuZCBkaWdnaW5nIHVwIHRoZSB3b3JsZC4gV2UgZG8gbm90IGZvbGxvdyBtYXBzIHRvIGJ1cmllZAoJdHJlYXN1cmUsIGFuZCBYIG5ldmVyLCBldmVyLCBtYXJrcyB0aGUgc3BvdC4KCQlbIEluZGlhbmEgSm9uZXMgYW5kIHRoZSBMYXN0IENydXNhZGUgXQoKCSJJIGNhbm5vdCBiZSBoYXZpbmcgd2l0aCBhcmNoZW9sb2dpY2FsIGV4Y2F2YXRpb25zLCBteXNlbGYsIgoJSSBzYWlkLiAgIlRoZSBmZWxsb3dzIHdobyBkaWcgdGhlbSBvbmx5IGV2ZXIgZmluZCB0aW55IHdhbGxzCglhbmQgYSBmZXcgYml0cyBvZiBicm9rZW4gcG90dGVyeSwgYW5kIHRoZW4gdGhleSBnZXQgYWxsCglleGNpdGVkIGFuZCBzd2VhciB0aGF0IHRoZXkgaGF2ZSBqdXN0IG1hZGUgdGhlIG1vc3QKCWltcG9ydGFudCBkaXNjb3Zlcnkgb2YgdGhlIGNlbnR1cnksIHRoZSBydWlucyBvZiBhIG1pbGUtaGlnaAoJZ29sZC1jb3ZlcmVkIHRlbXBsZSB0byBGcm9nbW9yZSB0aGUgR29kIG9mIEJpa2UtU2FkZGxlCglGaXh0dXJlcyBvciBzb21lIHN1Y2guIgoJIkkgdGhpbmsgeW91IHdpbGwgZmluZCwiIHNhaWQgTXIgUnVuZSwgInRoYXQgdGhleSBkbyB0aGlzCglpbiBvcmRlciB0byBzZWN1cmUgZnVydGhlciBnb3Zlcm5tZW50IGZ1bmRpbmcgZm9yIHRoZWlyCglkaWdnaW5ncyBhbmQgc28gcmVtYWluIGluIGVtcGxveW1lbnQuIgoJIlRoYXQgaXMgYSByYXRoZXIgY3luaWNhbCB2aWV3LCIgSSBzYWlkLgoJCVsgdGhlIGJyaWdodG9ub21pY29uLCBieSBSb2JlcnQgUmFua2luIF0KCUFyY2hvbnMgYXJlIHRoZSBwcmVkb21pbmFudCBpbmhhYml0YW50cyBvZiB0aGUgaGVhdmVucy4KCUhvd2V2ZXIgdW51c3VhbCB0aGVpciBhcHBlYXJhbmNlLCB0aGV5IGFyZSBub3QgZ2VuZXJhbGx5CglldmlsLiAgVGhleSBhcmUgYmVpbmdzIGF0IHBlYWNlIHdpdGggdGhlbXNlbHZlcyBhbmQgdGhlaXIKCXN1cnJvdW5kaW5ncy4KCUFyaW9jaCwgdGhlIHBhdHJvbiBkZW1vbiBvZiBFbHJpYydzIGFuY2VzdG9yczsgb25lIG9mIHRoZSBtb3N0Cglwb3dlcmZ1bCBvZiBhbGwgdGhlIER1a2VzIG9mIEhlbGwsIHdobyB3YXMgY2FsbGVkIEtuaWdodCBvZgoJdGhlIFN3b3JkcywgTG9yZCBvZiB0aGUgU2V2ZW4gRGFya3MsIExvcmQgb2YgdGhlIEhpZ2hlciBIZWxsCglhbmQgbWFueSBtb3JlIG5hbWVzIGJlc2lkZXMuCgkJWyBFbHJpYyBvZiBNZWxuaWJvbmUsIGJ5IE1pY2hhZWwgTW9vcmNvY2sgXQoJSSBzaG90IGFuIGFycm93IGludG8gdGhlIGFpciwKCUl0IGZlbGwgdG8gZWFydGgsIEkga25ldyBub3Qgd2hlcmU7CglGb3IsIHNvIHN3aWZ0bHkgaXQgZmxldywgdGhlIHNpZ2h0CglDb3VsZCBub3QgZm9sbG93IGl0IGluIGl0cyBmbGlnaHQuCgoJSSBicmVhdGhlZCBhIHNvbmcgaW50byB0aGUgYWlyLAoJSXQgZmVsbCB0byBlYXJ0aCwgSSBrbmV3IG5vdCB3aGVyZTsKCUZvciB3aG8gaGFzIHNpZ2h0IHNvIGtlZW4gYW5kIHN0cm9uZwoJVGhhdCBpdCBjYW4gZm9sbG93IHRoZSBmbGlnaHQgb2Ygc29uZz8KCglMb25nLCBsb25nIGFmdGVyd2FyZCwgaW4gYW4gb2FrCglJIGZvdW5kIHRoZSBhcnJvdyBzdGlsbCB1bmJyb2tlOwoJQW5kIHRoZSBzb25nLCBmcm9tIGJlZ2lubmluZyB0byBlbmQsCglJIGZvdW5kIGFnYWluIGluIHRoZSBoZWFydCBvZiBhIGZyaWVuZC4KCSAgWyBUaGUgQXJyb3cgYW5kIHRoZSBTb25nLCBieSBIZW5yeSBXYWRzd29ydGggTG9uZ2ZlbGxvdyBdCglBc2hpa2FnYSBUYWthdWppIHdhcyBhIGRhaW15byBvZiB0aGUgTWluYW1vdG8gY2xhbiB3aG8KCWpvaW5lZCBmb3JjZXMgd2l0aCB0aGUgR28tRGFpZ28gdG8gZGVmZWF0IHRoZSBIb2pvIGFybWllcy4KCUxhdGVyIHdoZW4gR28tRGFpZ28gYXR0ZW1wdGVkIHRvIHJlZHVjZSB0aGUgcG93ZXJzIG9mIHRoZQoJc2FtdXJhaSBjbGFucyBoZSByZWJlbGxlZCBhZ2FpbnN0IGhpbS4gIEhlIGRlZmVhdGVkIEdvLQoJRGFpZ28gYW5kIGVzdGFibGlzaGVkIHRoZSBlbXBlcm9yIEtvbXlvIG9uIHRoZSB0aHJvbmUuCglHby1EYWlnbyBldmVudHVhbGx5IGVzY2FwZWQgYW5kIGVzdGFibGlzaGVkIGFub3RoZXIKCWdvdmVybm1lbnQgaW4gdGhlIHRvd24gb2YgWW9zaGluby4gIFRoaXMgcGVyaW9kIG9mIGR1YWwKCWdvdmVybm1lbnRzIHdhcyBrbm93biBhcyB0aGUgTmFtYm9rdWNoby4KCSAgWyBTYW11cmFpIC0gVGhlIFN0b3J5IG9mIGEgV2FycmlvciBUcmFkaXRpb24sIGJ5IENvb2sgXQoJSXQgaXMgc2FpZCB0aGF0IEFzbW9kZXVzIGlzIHRoZSBvdmVybG9yZCBvdmVyIGFsbCBvZiBoZWxsLgoJSGlzIGFwcGVhcmFuY2UsIHVubGlrZSBtYW55IG90aGVyIGRlbW9ucyBhbmQgZGV2aWxzLCBpcwoJaHVtYW4gYXBhcnQgZnJvbSBoaXMgaG9ybnMgYW5kIHRhaWwuICBIZSBjYW4gZnJlZXplIGZsZXNoCgl3aXRoIGEgdG91Y2guCgkJW10KCglUaGUgZXZpbCBkZW1vbiB3aG8gYXBwZWFycyBpbiB0aGUgQXBvY3J5cGhhbCBib29rIG9mIF9Ub2JpdF8KCWFuZCBpcyBkZXJpdmVkIGZyb20gdGhlIFBlcnNpYW4gX0Flc2htYV8uICBJbiBfVG9iaXRfIEFzbW9kZXVzCglmYWxscyBpbiBsb3ZlIHdpdGggU2FyYSwgZGF1Z2h0ZXIgb2YgUmFndWVsLCBhbmQgY2F1c2VzIHRoZQoJZGVhdGggb2Ygc2V2ZW4gaHVzYmFuZHMgaW4gc3VjY2Vzc2lvbiwgZWFjaCBvbiBoaXMgYnJpZGFsIG5pZ2h0LgoJSGUgd2FzIGZpbmFsbHkgZHJpdmVuIGZyb20gRWd5cHQgdGhyb3VnaCBhIGNoYXJtIG1hZGUgYnkgVG9iaWFzCglvZiB0aGUgaGVhcnQgYW5kIGxpdmVyIG9mIGEgZmlzaCBidXJuZWQgb24gcGVyZnVtZWQgYXNoZXMsIGFzCglkZXNjcmliZWQgYnkgTWlsdG9uIGluIF9QYXJhZGlzZSBMb3N0XyAoSVYsIDE2Ny03MSkuICBIZW5jZQoJQXNtb2RldXMgb2Z0ZW4gZmlndXJlcyBhcyB0aGUgc3Bpcml0IG9mIG1hdHJpbW9uaWFsIGplYWxvdXN5CglvciB1bmhhcHBpbmVzcy4KCQlbIEJyZXdlcidzIENvbmNpc2UgRGljdGlvbmFyeSBvZiBQaHJhc2UgYW5kIEZhYmxlIF0KCVRoZSBjb25zZWNyYXRlZCByaXR1YWwga25pZmUgb2YgYSBXaWNjYW4gaW5pdGlhdGUgKG9uZSBvZgoJZm91ciBiYXNpYyB0b29scywgdG9nZXRoZXIgd2l0aCB0aGUgd2FuZCwgY2hhbGljZSBhbmQKCXBlbnRhY2xlKS4gIFRyYWRpdGlvbmFsbHksIHRoZSBhdGhhbWUgaXMgYSBkb3VibGUtZWRnZWQsCglibGFjay1oYW5kbGVkLCBjcm9zcy1oaWx0ZWQgZGFnZ2VyIG9mIGJldHdlZW4gc2l4IGFuZAoJZWlnaHRlZW4gaW5jaGVzIGxlbmd0aC4KCUF0aGVuZSB3YXMgdGhlIG9mZnNwcmluZyBvZiBaZXVzLCBhbmQgd2l0aG91dCBhIG1vdGhlci4gIFNoZQoJc3ByYW5nIGZvcnRoIGZyb20gaGlzIGhlYWQgY29tcGxldGVseSBhcm1lZC4gIEhlciBmYXZvdXJpdGUKCWJpcmQgd2FzIHRoZSBvd2wsIGFuZCB0aGUgcGxhbnQgc2FjcmVkIHRvIGhlciBpcyB0aGUgb2xpdmUuCgkgICAgWyBCdWxmaW5jaCdzIE15dGhvbG9neSwgYnkgVGhvbWFzIEJ1bGZpbmNoIF0KCSJGb3IgZXYncnkgc2lsdmVyIHJpbmdpbmcgYmxvdywKCUNpdGllcyBhbmQgcGFsYWNlcyBzaGFsbCBncm93ISIKCgkiQml0ZSBkZWVwIGFuZCB3aWRlLCBPIEF4ZSwgdGhlIHRyZWUsCglUZWxsIHdpZGVyIHByb3BoZWNpZXMgdG8gbWUuIgoKCSJXaGVuIHJ1c3QgaGF0aCBnbmF3J2QgbWUgZGVlcCBhbmQgcmVkLAoJQSBuYXRpb24gc3Ryb25nIHNoYWxsIGxpZnQgaGlzIGhlYWQuCgoJIkhpcyBjcm93biB0aGUgdmVyeSBIZWF2J25zIHNoYWxsIHNtaXRlLAoJQWVvbnMgc2hhbGwgYnVpbGQgaGltIGluIGhpcyBtaWdodC4iCgoJIkJpdGUgZGVlcCBhbmQgd2lkZSwgTyBBeGUsIHRoZSB0cmVlOwoJQnJpZ2h0IFNlZXIsIGhlbHAgb24gdGh5IHByb3BoZWN5ISIKCQlbIE1hbGNvbG0ncyBLYXRpZSwgYnkgSXNhYmVsbGEgVmFsYW5jZXkgQ3Jhd2ZvcmQgXQoJQSBtdW5kYW5lIHNhbGFtYW5kZXIsIGhhcm1sZXNzLgoJIk5vdywgdGhpcyB0aGlyZCBoYW5ka2VyY2hpZWYsIiBNZWluIEhlcnIgcHJvY2VlZGVkLCAiaGFzIGFsc28KCWZvdXIgZWRnZXMsIHdoaWNoIHlvdSBjYW4gdHJhY2UgY29udGludW91c2x5IHJvdW5kIGFuZCByb3VuZDoKCWFsbCB5b3UgbmVlZCBkbyBpcyB0byBqb2luIGl0cyBmb3VyIGVkZ2VzIHRvIHRoZSBmb3VyIGVkZ2VzIG9mCgl0aGUgb3BlbmluZy4gIFRoZSBQdXJzZSBpcyB0aGVuIGNvbXBsZXRlLCBhbmQgaXRzIG91dGVyCglzdXJmYWNlLS0iCgkiSSBzZWUhIiBMYWR5IE11cmllbCBlYWdlcmx5IGludGVycnVwdGVkLiAgIkl0cyBvdXRlciBzdXJmYWNlCgl3aWxsIGJlIGNvbnRpbnVvdXMgd2l0aCBpdHMgaW5uZXIgc3VyZmFjZSEgIEJ1dCBpdCB3aWxsIHRha2UKCXRpbWUuIEknbGwgc2V3IGl0IHVwIGFmdGVyIHRlYS4iICBTaGUgbGFpZCBhc2lkZSB0aGUgYmFnLCBhbmQKCXJlc3VtZWQgaGVyIGN1cCBvZiB0ZWEuICAiQnV0IHdoeSBkbyB5b3UgY2FsbCBpdCBGb3J0dW5hdHVzJ3MKCVB1cnNlLCBNZWluIEhlcnI/IgoJVGhlIGRlYXIgb2xkIG1hbiBiZWFtZWQgdXBvbiBoZXIsIHdpdGggYSBqb2xseSBzbWlsZSwgbG9va2luZwoJbW9yZSBleGFjdGx5IGxpa2UgdGhlIFByb2Zlc3NvciB0aGFuIGV2ZXIuICAiRG9uJ3QgeW91IHNlZSwKCW15IGNoaWxkLS1JIHNob3VsZCBzYXkgTWlsYWRpPyAgV2hhdGV2ZXIgaXMgaW5zaWRlIHRoYXQgUHVyc2UsCglpcyBvdXRzaWRlIGl0OyBhbmQgd2hhdGV2ZXIgaXMgb3V0c2lkZSBpdCwgaXMgaW5zaWRlIGl0LiAgU28KCXlvdSBoYXZlIGFsbCB0aGUgd2VhbHRoIG9mIHRoZSB3b3JsZCBpbiB0aGF0IGxlZXRsZSBQdXJzZSEiCgkJWyBTeWx2aWUgYW5kIEJydW5vIENvbmNsdWRlZCwgYnkgTGV3aXMgQ2Fycm9sbCBdCglUaGUgImxvcmQgb2YgdGhlIGZsaWVzIiBpcyBhIHRyYW5zbGF0aW9uIG9mIHRoZSBIZWJyZXcKCUJhJ2FsemV2dXYgKEJlZWx6ZWJ1YiBpbiBHcmVlaykuICBJdCBoYXMgYmVlbiBzdWdnZXN0ZWQgdGhhdAoJaXQgd2FzIGEgbWlzdHJhbnNsYXRpb24gb2YgYSBtaXN0cmFuc2xpdGVyYXRlZCB3b3JkIHdoaWNoCglnYXZlIHVzIHRoaXMgcHVuZ2VudCBhbmQgc3VnZ2VzdGl2ZSBuYW1lIG9mIHRoZSBEZXZpbCwgYQoJZGV2aWwgd2hvc2UgbmFtZSBzdWdnZXN0cyB0aGF0IGhlIGlzIGRldm90ZWQgdG8gZGVjYXksCglkZXN0cnVjdGlvbiwgZGVtb3JhbGl6YXRpb24sIGh5c3RlcmlhIGFuZCBwYW5pYy4uLgoJCVsgTm90ZXMgb24gX0xvcmQgb2YgdGhlIEZsaWVzXywgYnkgRS4gTC4gRXBzdGVpbiBdCgkuLi4gIEl0IGNhbWUgdG8gdGhlIGVkZ2Ugb2YgdGhlIGZpcmUgYW5kIHRoZSBsaWdodCBmYWRlZCBhcwoJaWYgYSBjbG91ZCBoYWQgYmVudCBvdmVyIGl0LiAgVGhlbiB3aXRoIGEgcnVzaCBpdCBsZWFwZWQKCXRoZSBmaXNzdXJlLiAgVGhlIGZsYW1lcyByb2FyZWQgdXAgdG8gZ3JlZXQgaXQsIGFuZCB3cmVhdGhlZAoJYWJvdXQgaXQ7IGFuZCBhIGJsYWNrIHNtb2tlIHN3aXJsZWQgaW4gdGhlIGFpci4gIEl0cyBzdHJlYW1pbmcKCW1hbmUga2luZGxlZCwgYW5kIGJsYXplZCBiZWhpbmQgaXQuICBJbiBpdHMgcmlnaHQgaGFuZAoJd2FzIGEgYmxhZGUgbGlrZSBhIHN0YWJiaW5nIHRvbmd1ZSBvZiBmaXJlOyBpbiBpdHMgbGVmdCBpdAoJaGVsZCBhIHdoaXAgb2YgbWFueSB0aG9uZ3MuCgknQWksIGFpIScgd2FpbGVkIExlZ29sYXMuICAnQSBCYWxyb2chICBBIEJhbHJvZyBpcyBjb21lIScKCQkgICBbIFRoZSBGZWxsb3dzaGlwIG9mIHRoZSBSaW5nLCBieSBKLlIuUi4gVG9sa2llbiBdCglFeHRpbmN0IHJoaW5vcyBpbmNsdWRlIGEgdmFyaWV0eSBvZiBmb3JtcywgdGhlIG1vc3QKCXNwZWN0YWN1bGFyIGJlaW5nIF9CYWx1Y2hpdGhlcml1bV8gZnJvbSB0aGUgT2xpZ29jZW5lIG9mCglBc2lhLCB3aGljaCBpcyB0aGUgbGFyZ2VzdCBrbm93biBsYW5kIG1hbW1hbC4gIEl0cyBib2R5LCAxOAoJZmVldCBoaWdoIGF0IHRoZSBzaG91bGRlciBhbmQgY2FycmllZCBvbiBtYXNzaXZlIGxpbWJzLAoJYWxsb3dlZCB0aGUgNC1mb290LWxvbmcgaGVhZCB0byBicm93c2Ugb24gdGhlIGhpZ2hlciBicmFuY2hlcwoJb2YgdHJlZXMuICBUaG91Z2ggbm90IGFzIGVub3Jtb3VzLCB0aGUgdGl0YW5vdGhlcmVzIG9mIHRoZQoJZWFybHkgVGVydGlhcnkgd2VyZSBhbHNvIGxhcmdlIHBlcmlzc29kYWN0eWxzLCBfQnJvbnRvdGhlcml1bV8KCW9mIHRoZSBPbGlnb2NlbmUgYmVpbmcgOCBmZWV0IGhpZ2ggYXQgdGhlIHNob3VsZGVyLgoJCVsgUHJlaGlzdG9yaWMgQW5pbWFscywgYnkgQmFycnkgQ294IF0KCUhlIHRvb2sgYW5vdGhlciBzdGVwIGFuZCBzaGUgY29ja2VkIGhlciByaWdodCB3cmlzdCBpbgoJdmljaW91c2x5LiAgU2hlIGhlYXJkIHRoZSBzcHJpbmcgY2xpY2suICBXZWlnaHQgc2xhcHBlZCBpbnRvCgloZXIgaGFuZC4KCSJIZXJlISIgc2hlIHNocmlla2VkIGh5c3RlcmljYWxseSwgYW5kIGJyb3VnaHQgaGVyIGFybSB1cCBpbgoJYSBoYXJkIHN3ZWVwLCBtZWFuaW5nIHRvIGd1dCBoaW0sIGxlYXZpbmcgaGltIHRvIGJsdW5kZXIKCWFyb3VuZCB0aGUgcm9vbSB3aXRoIGhpcyBpbnRlc3RpbmVzIGhhbmdpbmcgb3V0IGluIHN0ZWFtaW5nCglsb29wcy4gIEluc3RlYWQgaGUgcm9hcmVkIGxhdWdodGVyLCBoYW5kcyBvbiBoaXMgaGlwcywKCWZsYW1pbmcgZmFjZSBjb2NrZWQgYmFjaywgc3F1ZWV6aW5nIGFuZCBjb250b3J0aW5nIHdpdGggZ3JlYXQKCWdvb2QgaHVtb3IuCgkiT2gsIG15IGRlYXIhIiBoZSBjcmllZCwgYW5kIHdlbnQgb2ZmIGludG8gYW5vdGhlciBnYWxlIG9mCglsYXVnaHRlci4KCVNoZSBsb29rZWQgc3R1cGlkbHkgZG93biBhdCBoZXIgaGFuZC4gIEl0IGhlbGQgYSBmaXJtIHllbGxvdwoJYmFuYW5hIHdpdGggYSBibHVlIGFuZCB3aGl0ZSBDaGlxdWl0YSBzdGlja2VyIG9uIGl0LiAgU2hlCglkcm9wcGVkIGl0LCBob3JyaWZpZWQsIHRvIHRoZSBjYXJwZXQsIHdoZXJlIGl0IGJlY2FtZSBhCglzaWNrbHkgeWVsbG93IGdyaW4sIG1pbWluZyBGbGFnZydzIG93bi4KCSJZb3UnbGwgdGVsbCwiIGhlIHdoaXNwZXJlZC4gICJPaCB5ZXMgaW5kZWVkIHlvdSB3aWxsLiIKCUFuZCBEYXluYSBrbmV3IGhlIHdhcyByaWdodC4KCQlbIFRoZSBTdGFuZCwgYnkgU3RlcGhlbiBLaW5nIF0KCUluIElyaXNoIGZvbGtsb3JlIGFuZCB0aGF0IG9mIHRoZSBXZXN0ZXJuIEhpZ2hsYW5kcyBvZiBTY290bGFuZCwKCWEgZmVtYWxlIGZhaXJ5IHdobyBhbm5vdW5jZXMgaGVyIHByZXNlbmNlIGJ5IHNocmlla2luZyBhbmQKCXdhaWxpbmcgdW5kZXIgdGhlIHdpbmRvd3Mgb2YgYSBob3VzZSB3aGVuIG9uZSBvZiBpdHMgb2NjdXBhbnRzCglpcyBhd2FpdGluZyBkZWF0aC4gIFRoZSB3b3JkIGlzIGEgcGhvbmV0aWMgc3BlbGxpbmcgb2YgdGhlCglJcmlzaCBfYmVhbnNpZGhlXywgYSB3b21hbiBvZiB0aGUgZmFpcmllcy4KCQlbIEJyZXdlcidzIENvbmNpc2UgRGljdGlvbmFyeSBvZiBQaHJhc2UgYW5kIEZhYmxlIF0KCVRoZXkgZHJlc3NlZCBhbGlrZSAtLSBpbiBidWNrc2tpbiBib290cywgbGVhdGhlcm4gYnJlZWtzIGFuZAoJZGVlcnNraW4gc2hpcnRzLCB3aXRoIGJyb2FkIGdpcmRsZXMgdGhhdCBoZWxkIGF4ZXMgYW5kIHNob3J0Cglzd29yZHM7IGFuZCB0aGV5IHdlcmUgYWxsIGdhdW50IGFuZCBzY2FycmVkIGFuZCBoYXJkLWV5ZWQ7CglzaW5ld3kgYW5kIHRhY2l0dXJuLgoJVGhleSB3ZXJlIHdpbGQgbWVuLCBvZiBhIHNvcnQsIHlldCB0aGVyZSB3YXMgc3RpbGwgYSB3aWRlCglndWxmIGJldHdlZW4gdGhlbSBhbmQgdGhlIENpbW1lcmlhbi4gIFRoZXkgd2VyZSBzb25zIG9mCgljaXZpbGl6YXRpb24sIHJldmVydGVkIHRvIGEgc2VtaS1iYXJiYXJpc20uICBIZSB3YXMgYQoJYmFyYmFyaWFuIG9mIGEgdGhvdXNhbmQgZ2VuZXJhdGlvbnMgb2YgYmFyYmFyaWFucy4gIFRoZXkgaGFkCglhY3F1aXJlZCBzdGVhbHRoIGFuZCBjcmFmdCwgYnV0IGhlIGhhZCBiZWVuIGJvcm4gdG8gdGhlc2UKCXRoaW5ncy4gIEhlIGV4Y2VsbGVkIHRoZW0gZXZlbiBpbiBsaXRoZSBlY29ub215IG9mIG1vdGlvbi4KCVRoZXkgd2VyZSB3b2x2ZXMsIGJ1dCBoZSB3YXMgYSB0aWdlci4KCQlbIENvbmFuIC0gVGhlIFdhcnJpb3IsIGJ5IFJvYmVydCBFLiBIb3dhcmQgXQoJQSBiYXQsIGZsaXR0aW5nIGluIHRoZSBkYXJrbmVzcyBvdXRzaWRlLCB0b29rIHRoZSB3cm9uZyB0dXJuCglhcyBpdCBtYWRlIGl0cyBuaWdodGx5IHJvdW5kcyBhbmQgY2FtZSBpbiB0aHJvdWdoIHRoZSB3aW5kb3cKCXdoaWNoIGhhZCBiZWVuIGxlZnQgaGVhbHRoZnVsbHkgb3Blbi4gIEl0IHRoZW4gcHJvY2VlZGVkIHRvCgljaXJjbGUgdGhlIHJvb20gaW4gdGhlIGFpbWxlc3MgZmF0LWhlYWRlZCBmYXNoaW9uIGhhYml0dWFsCgl3aXRoIGJhdHMsIHdobyBhcmUgbm90b3Jpb3VzbHkgYW1vbmcgdGhlIGxlc3MgaW50ZWxsZWN0dWFsbHkKCWdpZnRlZCBvZiBHb2QncyBjcmVhdHVyZXMuICBTaG93IG1lIGEgYmF0LCBzYXlzIHRoZSBvbGQKCXByb3ZlcmIsIGFuZCBJIHdpbGwgc2hvdyB5b3Ugc29tZXRoaW5nIHRoYXQgb3VnaHQgdG8gYmUgaW4KCXNvbWUga2luZCBvZiBhIGhvbWUuCgkJWyBBIFBlbGljYW4gYXQgQmxhbmRpbmdzLCBieSBQLiBHLiBXb2RlaG91c2UgXQoJUHJvYmFibHkgbW9zdCBjb21tb25seSBhc3NvY2lhdGVkIHdpdGggdHJhcHBpbmcsIHRoZSBsZWdob2xkCgl0cmFwIGlzIGEgcmF0aGVyIHNpbXBsZSBtZWNoYW5pY2FsIHRyYXAuICBJdCBpcyBtYWRlIHVwIG9mIHR3bwoJamF3cywgYSBzcHJpbmcgb2Ygc29tZSBzb3J0LCBhbmQgYSB0cmlnZ2VyIGluIHRoZSBtaWRkbGUuICBXaGVuCgl0aGUgYW5pbWFsIHN0ZXBzIG9uIHRoZSB0cmlnZ2VyIHRoZSB0cmFwIGNsb3NlcyBhcm91bmQgdGhlIGxlZywKCWhvbGRpbmcgdGhlIGFuaW1hbCBpbiBwbGFjZS4gIFVzdWFsbHkgc29tZSBraW5kIG9mIGx1cmUgaXMgdXNlZAoJdG8gcG9zaXRpb24gdGhlIGFuaW1hbCwgb3IgdGhlIHRyYXAgaXMgc2V0IG9uIGFuIGFuaW1hbCB0cmFpbC4KCVRyYWRpdGlvbmFsbHksIGxlZ2hvbGQgdHJhcHMgaGFkIHRpZ2h0bHkgY2xvc2luZyAidGVldGgiIHRvIG1ha2UKCXN1cmUgdGhlIGFuaW1hbCBzdGF5ZWQgaW4gcGxhY2UuICBUaGUgdGVldGggYWxzbyBtYWRlIHN1cmUgdGhlCglhbmltYWwgY291bGQgbm90IG1vdmUgdGhlIGxlZyBpbiB0aGUgdHJhcCBhbmQgcnVpbiB0aGVpciBmdXIuCglIb3dldmVyLCB0aGlzIHJlc3VsdGVkIGluIG1hbnkgYW5pbWFscyBnbmF3aW5nIG9mZiBsZWdzIGluIG9yZGVyCgl0byBlc2NhcGUuICBNb3JlIG1vZGVybiB0cmFwcyBoYXZlIGEgZ2FwIGNhbGxlZCBhbiAib2Zmc2V0IGphdyIKCWFuZCB3b3JrIG1vcmUgbGlrZSBhIGhhbmRjdWZmLiAgVGhleSBncmlwIGFib3ZlIHRoZSBwYXcsIG1ha2luZwoJc3VyZSB0aGUgYW5pbWFsIGNhbm5vdCBwdWxsIG91dCBidXQgZG9lcyBub3QgZGVzdHJveSB0aGUgbGVnLgoJVGhpcyBhbHNvIGFsbG93cyB0aGUgdHJhcHBlciB0byByZWxlYXNlIHVud2FudGVkIGNhdGNoZXMuCgkJWyBXaWtpcGVkaWEsIHRoZSBmcmVlIGVuY3ljbG9wZWRpYSBdCglUaGlzIGdpYW50IHZhcmlldHkgb2YgaXRzIHVzZWZ1bCBub3JtYWwgY291c2luIG5vcm1hbGx5CglhcHBlYXJzIGluIHNtYWxsIGdyb3VwcywgbG9va2luZyBmb3IgcmF3IG1hdGVyaWFsIHRvIHByb2R1Y2UKCXRoZSByb3lhbCBqZWxseSBuZWVkZWQgdG8gZmVlZCB0aGVpciBxdWVlbi4gIE9uIHJhcmUKCW9jY2FzaW9ucywgb25lIG1heSBzdHVtYmxlIHVwb24gYSBiZWUtaGl2ZSwgaW4gd2hpY2ggdGhlCglxdWVlbiBiZWUgaXMgYmVpbmcgd2VsbCBwcm92aWRlZCBmb3IsIGFuZCBndWFyZGVkIGFnYWluc3QKCWludHJ1ZGVycy4KCVsgVGhlIENyZWF0b3IgXSBoYXMgYW4gaW5vcmRpbmF0ZSBmb25kbmVzcyBmb3IgYmVldGxlcy4KCQlbIGF0dHJpYnV0ZWQgdG8gYmlvbG9naXN0IEouQi5TLiBIYWxkYW5lIF0KCglUaGUgY29tbW9uIG5hbWUgZm9yIHRoZSBpbnNlY3RzIHdpdGggd2luZ3Mgc2hhcGVkIGxpa2UKCXNoaWVsZHMgKF9Db2xlb3B0ZXJhXyksIG9uZSBvZiB0aGUgdGVuIHN1Yi1zcGVjaWVzIGludG8KCXdoaWNoIHRoZSBpbnNlY3RzIGFyZSBkaXZpZGVkLiAgVGhleSBhcmUgY2hhcmFjdGVyaXplZCBieQoJdGhlIHNoaWVsZHMgKHRoZSBmcm9udCBwYWlyIG9mIHdpbmdzKSB1bmRlciB3aGljaCB0aGUgYmFjawoJd2luZ3MgYXJlIGZvbGRlZC4KCQlbIFZhbiBEYWxlJ3MgR3Jvb3QgV29vcmRlbmJvZWsgZGVyIE5lZGVybGFuZHNlIFRhYWwgXQoJIkEgYmVsbCwgYm9vayBhbmQgY2FuZGxlIGpvYi4iCglUaGUgQnVyc2FyIHNpZ2hlZC4gICJXZSB0cmllZCB0aGF0LCBBcmNoY2hhbmNlbGxvci4iCglUaGUgQXJjaGNoYW5jZWxsb3IgbGVhbmVkIHRvd2FyZHMgaGltLgoJIkVoPyIgaGUgc2FpZC4KCSJJIF9zYWlkXywgd2UgdHJpZWQgdGhhdCBBcmNoY2hhbmNlbGxvciwiIHNhaWQgdGhlIEJ1cnNhciBsb3VkbHksCglkaXJlY3RpbmcgaGlzIHZvaWNlIGF0IHRoZSBvbGQgbWFuJ3MgZWFyLiAgIkFmdGVyIGRpbm5lciwgeW91CglyZW1lbWJlcj8gIFdlIHVzZWQgSHVtcHRlbXBlcidzIF9OYW1lcyBvZiB0aGUgQW50c18gYW5kIHJhbmcgT2xkCglUb20uIioKCSJEaWQgd2UsIGluZGVlZC4gIFdvcmtlZCwgZGlkIGl0PyIKCSJfTm9fLCBBcmNoY2hhbmNlbGxvci4iCgoJKiBPbGQgVG9tIHdhcyB0aGUgc2luZ2xlIGNyYWNrZWQgYnJvbnplIGJlbGwgaW4gdGhlIFVuaXZlcnNpdHkKCWJlbGwgdG93ZXIuCgkJWyBFcmljLCBieSBUZXJyeSBQcmF0Y2hldHQgXQoJVGhlIGJsaW5kZm9sZGluZyB3YXMgcGVyZm9ybWVkIGJ5IGJpbmRpbmcgYSBwaWVjZSBvZiB0aGUKCXllbGxvd2lzaCBsaW5lbiB3aGVyZW9mIHRob3NlIG9mIHRoZSBBbWFoYWdnZXIgd2hvIGNvbmRlc2NlbmRlZAoJdG8gd2VhciBhbnl0aGluZyBpbiBwYXJ0aWN1bGFyIG1hZGUgdGhlaXIgZHJlc3NlcyB0aWdodGx5IHJvdW5kCgl0aGUgZXllcy4gIFRoaXMgbGluZW4gSSBhZnRlcndhcmRzIGRpc2NvdmVyZWQgd2FzIHRha2VuIGZyb20gdGhlCgl0b21icywgYW5kIHdhcyBub3QsIGFzIEkgaGFkIGZpcnN0IHN1cHBvc2VkLCBvZiBuYXRpdmUKCW1hbnVmYWN0dXJlLiAgVGhlIGJhbmRhZ2Ugd2FzIHRoZW4ga25vdHRlZCBhdCB0aGUgYmFjayBvZiB0aGUKCWhlYWQsIGFuZCBmaW5hbGx5IGJyb3VnaHQgZG93biBhZ2FpbiBhbmQgdGhlIGVuZHMgYm91bmQgdW5kZXIKCXRoZSBjaGluIHRvIHByZXZlbnQgaXRzIHNsaXBwaW5nLiAgVXN0YW5lIHdhcywgYnkgdGhlIHdheSwgYWxzbwoJYmxpbmRmb2xkZWQsIEkgZG8gbm90IGtub3cgd2h5LCB1bmxlc3MgaXQgd2FzIGZyb20gZmVhciB0aGF0IHNoZQoJc2hvdWxkIGltcGFydCB0aGUgc2VjcmV0cyBvZiB0aGUgcm91dGUgdG8gdXMuCgkJWyBTaGUsIGJ5IEguIFJpZGVyIEhhZ2dhcmQgXQoJT24gdGhpcyBwYXJ0aWN1bGFyIGRheSBCbGluZCBJbywgYnkgZGludCBvZiBjb25zdGFudCB2aWdpbGFuY2UKCXRoZSBjaGllZiBvZiB0aGUgZ29kcywgc2F0IHdpdGggaGlzIGNoaW4gb24gaGlzIGhhbmQKCWFuZCBsb29rZWQgYXQgdGhlIGdhbWluZyBib2FyZCBvbiB0aGUgcmVkIG1hcmJsZSB0YWJsZSBpbgoJZnJvbnQgb2YgaGltLiAgQmxpbmQgSW8gaGFkIGdvdCBoaXMgbmFtZSBiZWNhdXNlLCB3aGVyZSBoaXMKCWV5ZSBzb2NrZXRzIHNob3VsZCBoYXZlIGJlZW4sIHRoZXJlIHdlcmUgbm90aGluZyBidXQgdHdvCglhcmVhcyBvZiBibGFuayBza2luLiAgSGlzIGV5ZXMsIG9mIHdoaWNoIGhlIGhhZCBhbiBpbXByZXNzaXZlbHkKCWxhcmdlIG51bWJlciwgbGVkIGEgc2VtaS1pbmRlcGVuZGVudCBsaWZlIG9mIHRoZWlyCglvd24uICBTZXZlcmFsIHdlcmUgY3VycmVudGx5IGhvdmVyaW5nIGFib3ZlIHRoZSB0YWJsZS4KCSAgICBbIFRoZSBDb2xvdXIgb2YgTWFnaWMsIGJ5IFRlcnJ5IFByYXRjaGV0dCBdCglUaGVzZSBnaWFudCBhbW9lYm9pZCBjcmVhdHVyZXMgbG9vayBsaWtlIG5vdGhpbmcgbW9yZSB0aGFuCglwdWRkbGVzIG9mIHNsaW1lLCBidXQgdGhleSBib3RoIGxpdmUgYW5kIG1vdmUsIGZlZWRpbmcgb24KCW1ldGFsIG9yIHdvb2QgYXMgd2VsbCBhcyB0aGUgb2NjYXNpb25hbCBkdW5nZW9uIGV4cGxvcmVyIHRvCglzdXBwbGVtZW50IHRoZWlyIGRpZXQuCgoJQnV0IHdlIHdlcmUgbm90IG9uIGEgc3RhdGlvbiBwbGF0Zm9ybS4gIFdlIHdlcmUgb24gdGhlIHRyYWNrIGFoZWFkCglhcyB0aGUgbmlnaHRtYXJlLCBwbGFzdGljIGNvbHVtbiBvZiBmZXRpZCBibGFjayBpcmlkZXNjZW5jZSBvb3plZAoJdGlnaHRseSBvbndhcmQgdGhyb3VnaCBpdHMgZmlmdGVlbi1mb290IHNpbnVzLCBnYXRoZXJpbmcgdW5ob2x5CglzcGVlZCBhbmQgZHJpdmluZyBiZWZvcmUgaXQgYSBzcGlyYWwsIHJlLXRoaWNrZW5pbmcgY2xvdWQgb2YgdGhlCglwYWxsaWQgYWJ5c3MgdmFwb3IuICBJdCB3YXMgYSB0ZXJyaWJsZSwgaW5kZXNjcmliYWJsZSB0aGluZyB2YXN0ZXIKCXRoYW4gYW55IHN1YndheSB0cmFpbiAtLSBhIHNoYXBlbGVzcyBjb25nZXJpZXMgb2YgcHJvdG9wbGFzbWljCglidWJibGVzLCBmYWludGx5IHNlbGYtbHVtaW5vdXMsIGFuZCB3aXRoIG15cmlhZHMgb2YgdGVtcG9yYXJ5IGV5ZXMKCWZvcm1pbmcgYW5kIHVuZm9ybWluZyBhcyBwdXN0dWxlcyBvZiBncmVlbmlzaCBsaWdodCBhbGwgb3ZlciB0aGUKCXR1bm5lbC1maWxsaW5nIGZyb250IHRoYXQgYm9yZSBkb3duIHVwb24gdXMsIGNydXNoaW5nIHRoZSBmcmFudGljCglwZW5ndWlucyBhbmQgc2xpdGhlcmluZyBvdmVyIHRoZSBnbGlzdGVuaW5nIGZsb29yIHRoYXQgaXQgYW5kIGl0cwoJa2luZCBoYWQgc3dlcHQgc28gZXZpbGx5IGZyZWUgb2YgYWxsIGxpdHRlci4KCQlbIEF0IHRoZSBNb3VudGFpbnMgb2YgTWFkbmVzcywgYnkgSC5QLiBMb3ZlY3JhZnQgXQoJSSdkIHBsYW5uZWQgaG93IHRvIHByZXZlbnQgdGhlIGxvY2sgZnJvbSBzZWFsaW5nIGJlaGluZCBtZTsgaXQKCXJlcXVpcmVkIGEgdGVtcG9yYXJ5IHNhY3JpZmljZSwgbm90IGNsZXZlcm5lc3MuICBJIHVzZWQgdGhlIGRvb3IKCWl0c2VsZiB0byBoZWxwIG1lIGN1dCBvZmYgYSBwb3J0aW9uIG9mIG15IGJvZHksIGFmdGVyIHNodW50aW5nIGFsbAoJbWVtb3J5IGZyb20gdGhlIHBpZWNlIHRvIGJlIGFiYW5kb25lZC4gIFRoZSBwaWVjZSwgbG9va2luZwoJaW5leHByZXNzaWJseSBkZWFyIGFuZCBmb3Jsb3JuIGZvciBhIGJpdCBvZiBibHVlIGplbGx5LCB3b3VsZAoJZm9yY2Ugb3BlbiB0aGUgb3V0ZXIgZG9vciB1bnRpbCBJIHJldHVybmVkIGFuZCByZWpvaW5lZCBpdC4KCQlbIEJlaG9sZGVyJ3MgRXllLCBieSBKdWxpZSBFLiBDemVybmVkYSBdCglCb25lIGRldmlscyBhdHRhY2sgd2l0aCB3ZWFwb25zIGFuZCB3aXRoIGEgZ3JlYXQgaG9va2VkIHRhaWwKCXdoaWNoIGNhdXNlcyBhIGxvc3Mgb2Ygc3RyZW5ndGggdG8gdGhvc2UgdGhleSBzdGluZy4KCUZhdXN0dXM6IENvbWUgb24gTWVwaGlzdG9waGVsZXMuICBXaGF0IHNoYWxsIHdlIGRvPwoJTWVwaGlzdG9waGVsZXM6IE5heSwgSSBrbm93IG5vdC4gIFdlIHNoYWxsIGJlIGN1cnNlZCB3aXRoIGJlbGwsCglib29rLCBhbmQgY2FuZGxlLgoJRmF1c3R1czogSG93PyAgQmVsbCwgYm9vaywgYW5kIGNhbmRsZSwgY2FuZGxlLCBib29rLCBhbmQgYmVsbCwKCUZvcndhcmQgYW5kIGJhY2t3YXJkLCB0byBjdXJzZSBGYXVzdHVzIHRvIGhlbGwuCglBbm9uIHlvdSBzaGFsbCBoZWFyIGEgaG9nIGdydW50LCBhIGNhbGYgYmxlYXQsIGFuZCBhbiBhc3MgYnJheSwKCUJlY2F1c2UgaXQgaXMgU2FpbnQgUGV0ZXIncyBob2x5IGRheS4KCShFbnRlciBhbGwgdGhlIEZyaWFycyB0byBzaW5nIHRoZSBkaXJnZSkKCQlbIERvY3RvciBGYXVzdHVzIGFuZCBPdGhlciBQbGF5cywgYnkgQ2hyaXN0b3BoZXIgTWFybG93ZSBdCglSaW5jZXdpbmQgcHVsbGVkIGhpbXNlbGYgdXAgYW5kIHRob3VnaHQgYWJvdXQgcmVhY2hpbmcgZm9yIGhpcwoJc3RpY2suICBBbmQgdGhlbiBoZSB0aG91Z2h0IGFnYWluLiAgVGhlIG1hbiBoYWQgYSBjb3VwbGUgb2Ygc3BlYXJzCglzdHVjayBpbiB0aGUgZ3JvdW5kLCBhbmQgcGVvcGxlIGhlcmUgd2VyZSBnb29kIGF0IHNwZWFycywgYmVjYXVzZQoJaWYgeW91IGRpZG4ndCBnZXQgZWZmaWNpZW50IGF0IGhpdHRpbmcgdGhlIHRoaW5ncyB0aGF0IG1vdmVkIGZhc3QKCXlvdSBoYWQgdG8gZWF0IHRoZSB0aGluZ3MgdGhhdCBtb3ZlZCBzbG93bHkuICBIZSB3YXMgYWxzbyBob2xkaW5nCglhIGJvb21lcmFuZywgYW5kIGl0IHdhc24ndCBvbmUgb2YgdGhvc2UgdG95IG9uZXMgdGhhdCBjYW1lIGJhY2suCglUaGlzIHdhcyBvbmUgb2YgdGhlIGJpZywgaGVhdnksIGdlbnRseSBjdXJ2ZWQgc29ydCB0aGF0IGRpZG4ndAoJY29tZSBiYWNrIGJlY2F1c2UgaXQgd2FzIHN0aWNraW5nIGluIHNvbWV0aGluZydzIHJpYmNhZ2UuICBZb3UKCWNvdWxkIGxhdWdoIGF0IHRoZSBpZGVhIG9mIHdvb2RlbiB3ZWFwb25zIHVudGlsIHlvdSBzYXcgdGhlIGtpbmQKCW9mIHdvb2QgdGhhdCBncmV3IGhlcmUuCgkJWyBUaGUgTGFzdCBDb250aW5lbnQsIGJ5IFRlcnJ5IFByYXRjaGV0dCBdCglJbiBGYW50YXN5bGFuZCB0aGVzZSBhcmUgcmVtYXJrYWJsZSBpbiB0aGF0IHRoZXkgc2VsZG9tIG9yCgluZXZlciB3ZWFyIG91dCBhbmQgYXJlIHN1aXRhYmxlIGZvciByaWRpbmcgb3Igd2Fsa2luZyBpbgoJd2l0aG91dCB0aGUgbmVlZCBvZiBTb2Nrcy4gIEJvb3RzIG5ldmVyIHBpbmNoLCBydWIsIG9yIGdldAoJc3RvbmVzIGluIHRoZW07IG5vciBkbyBuYWlscyBzdGljayB1cHdhcmRzIGludG8gdGhlIGZlZXQgZnJvbQoJdGhlIHNvbGVzLiAgVGhleSBhcmUgY3VzdG9tYXJpbHkgbWlkLWNhbGYgbGVuZ3RoIG9yIGtuZWUtaGlnaCwKCXNsaXAgb24gYW5kIG9mZiBlYXNpbHkgYW5kIG5ldmVyIHNtZWxsIG9mIGZlZXQuICBVbmZvcnR1bmF0ZWx5LAoJdGhlIGZvcm11bGEgZm9yIG1ha2luZyB0aGlzIHNwbGVuZGlkIGZvb3R3ZWFyIGlzIGEgY2xvc2VseQoJZ3VhcmRlZCBzZWNyZXQsIHBvc3NpYmx5IGRlcml2ZWQgZnJvbSBub25odW1hbnMgKHNlZSBEd2FyZnMsCglFbHZlcywgYW5kIEdub21lcykuCgkgIFsgVGhlIFRvdWdoIEd1aWRlIHRvIEZhbnRhc3lsYW5kLCBieSBEaWFuYSBXeW5uZSBKb25lcyBdCglPbiB3YWtpbmcsIGhlIGZvdW5kIGhpbXNlbGYgb24gdGhlIGdyZWVuIGtub2xsIHdoZW5jZSBoZSBoYWQKCWZpcnN0IHNlZW4gdGhlIG9sZCBtYW4gb2YgdGhlIGdsZW4uICBIZSBydWJiZWQgaGlzIGV5ZXMgLS0gaXQKCXdhcyBhIGJyaWdodCBzdW5ueSBtb3JuaW5nLiAgVGhlIGJpcmRzIHdlcmUgaG9wcGluZyBhbmQKCXR3aXR0ZXJpbmcgYW1vbmcgdGhlIGJ1c2hlcywgYW5kIHRoZSBlYWdsZSB3YXMgd2hlZWxpbmcgYWxvZnQsCglhbmQgYnJlYXN0aW5nIHRoZSBwdXJlIG1vdW50YWluIGJyZWV6ZS4gICJTdXJlbHksIiB0aG91Z2h0IFJpcCwKCSJJIGhhdmUgbm90IHNsZXB0IGhlcmUgYWxsIG5pZ2h0LiIgIEhlIHJlY2FsbGVkIHRoZSBvY2N1cnJlbmNlcwoJYmVmb3JlIGhlIGZlbGwgYXNsZWVwLiAgVGhlIHN0cmFuZ2UgbWFuIHdpdGggYSBrZWcgb2YgbGlxdW9yIC0tCgl0aGUgbW91bnRhaW4gcmF2aW5lIC0tIHRoZSB3aWxkIHJldHJlYXQgYW1vbmcgdGhlIHJvY2tzIC0tIHRoZQoJd29lLWJlZ29uZSBwYXJ0eSBhdCBuaW5lcGlucyAtLSB0aGUgZmxhZ29uIC0tICJPaCEgdGhhdCBmbGFnb24hCgl0aGF0IHdpY2tlZCBmbGFnb24hIiB0aG91Z2h0IFJpcCAtLSAid2hhdCBleGN1c2Ugc2hhbGwgSSBtYWtlCgl0byBEYW1lIFZhbiBXaW5rbGUhIgoJCVsgUmlwIFZhbiBXaW5rbGUsIGEgUG9zdGh1bW91cyBXcml0aW5nCgkJICBvZiBEaWVkcmljaCBLbmlja2VyYm9ja2VyLCBieSBXYXNoaW5ndG9uIElydmluZyBdCglJIHdvcmtlZCB0aGUgbGV2ZXIgd2VsbCB1bmRlciwgYW5kIHN0cmV0Y2hlZCBteSBiYWNrOyB0aGUgZW5kCglvZiB0aGUgc3RvbmUgcm9zZSB1cCwgYW5kIEkga2lja2VkIHRoZSBmdWxjcnVtIHVuZGVyLiAgVGhlbiwKCXdoZW4gSSB3YXMgZ29pbmcgdG8gYmVhciBkb3duLCBJIHJlbWVtYmVyZWQgdGhlcmUgd2FzCglzb21ldGhpbmcgdG8gZ2V0IG91dCBmcm9tIGJlbG93OyB3aGVuIEkgbGV0IGdvIG9mIHRoZSBsZXZlciwKCXRoZSBzdG9uZSB3b3VsZCBmYWxsIGFnYWluLiAgSSBzYXQgZG93biB0byB0aGluaywgb24gdGhlIHJvb3QKCW9mIHRoZSBvYWsgdHJlZTsgYW5kLCBzZWVpbmcgaXQgc3RhbmQgYWJvdXQgdGhlIGdyb3VuZCwgSSBzYXcKCW15IHdheS4gIEl0IHdhcyBsdWNreSBJIGhhZCBicm91Z2h0IGEgbG9uZ2VyIGxldmVyLiAgSXQgd291bGQKCWp1c3QgcmVhY2ggdG8gd2VkZ2UgdW5kZXIgdGhlIG9hayByb290LgoJQmVhcmluZyBpdCBkb3duIHNvIGZhciB3b3VsZCBoYXZlIGJlZW4gZWFzeSBmb3IgYSBoZWF2eSBtYW4sCglidXQgd2FzIGEgaGFyZCBmaWdodCBmb3IgbWUuICBCdXQgdGhpcyB0aW1lIEkgbWVhbnQgdG8gZG8gaXQKCWlmIGl0IGtpbGxlZCBtZSwgYmVjYXVzZSBJIGtuZXcgaXQgY291bGQgYmUgZG9uZS4gIFR3aWNlIEkKCWdvdCBpdCBuZWFybHkgdGhlcmUsIGFuZCB0d2ljZSB0aGUgd2VpZ2h0IGJvcmUgaXQgdXAgYWdhaW47CglidXQgd2hlbiBJIGZsdW5nIG15c2VsZiBvbiBpdCB0aGUgdGhpcmQgdGltZSwgSSBoZWFyZCBpbiBteQoJZWFycyB0aGUgc2VhLXNvdW5kIG9mIFBvc2VpZG9uLiAgVGhlbiBJIGtuZXcgdGhpcyB0aW1lIEkKCXdvdWxkIGRvIGl0OyBhbmQgc28gSSBkaWQuCgkJWyBUaGUgS2luZyBNdXN0IERpZSwgYnkgTWFyeSBSZW5hdWx0IF0KCSJTdGFuZCB0byBpdCwgbXkgaGVhcnRzIG9mIGdvbGQsIiBzYWlkIHRoZSBvbGQgYm93bWFuIGFzIGhlCglwYXNzZWQgZnJvbSBrbm90IHRvIGtub3QuICAiQnkgbXkgaGlsdCEgd2UgYXJlIGluIGx1Y2sgdGhpcwoJam91cm5leS4gIEJlYXIgaW4gbWluZCB0aGUgb2xkIHNheWluZyBvZiB0aGUgQ29tcGFueS4iCgkiV2hhdCBpcyB0aGF0LCBBeWx3YXJkPyIgY3JpZWQgc2V2ZXJhbCwgbGVhbmluZyBvbiB0aGVpciBib3dzCglhbmQgbGF1Z2hpbmcgYXQgaGltLgoJIidUaXMgdGhlIG1hc3Rlci1ib3d5ZXIncyByZWRlOiAnRXZlcnkgYm93IHdlbGwgYmVudC4gIEV2ZXJ5CglzaGFmdCB3ZWxsIHNlbnQuICBFdmVyeSBzdGF2ZSB3ZWxsIG5vY2tlZC4gIEV2ZXJ5IHN0cmluZyB3ZWxsCglsb2NrZWQuJyAgVGhlcmUsIHdpdGggdGhhdCBqaW5nbGUgaW4gaGlzIGhlYWQsIGEgYnJhY2VyIG9uCgloaXMgbGVmdCBoYW5kLCBhIHNob290aW5nIGdsb3ZlIG9uIGhpcyByaWdodCwgYW5kIGEKCWZhcnRoaW5nJ3Mtd29ydGggb2Ygd2F4IGluIGhpcyBnaXJkbGUsIHdoYXQgbW9yZSBkb3RoIGEKCWJvd21hbiBuZWVkPyIKCSJJdCB3b3VsZCBub3QgYmUgYW1pc3MsIiBzYWlkIEhvcmRsZSBKb2huLCAiaWYgdW5kZXIgaGlzCglnaXJkbGUgaGUgaGFkIGZvdXIgZmFydGhpbmdzJy13b3J0aCBvZiB3aW5lLiIKCQlbIFRoZSBXaGl0ZSBDb21wYW55LCBieSBTaXIgQXJ0aHVyIENvbmFuIERveWxlIF0KCUJyaWdpdCAoQnJpZ2lkLCBCcmlkZSwgQmFuZmlsZSksIHdoaWNoIG1lYW5zIHRoZSBFeGFsdGVkIE9uZSwKCXdhcyB0aGUgQ2VsdGljIChjb250aW5lbnRhbCBFdXJvcGVhbiBhbmQgSXJpc2gpIGZlcnRpbGl0eQoJZ29kZGVzcy4gIFNoZSB3YXMgb3JpZ2luYWxseSBjZWxlYnJhdGVkIG9uIEZlYnJ1YXJ5IGZpcnN0IGluCgl0aGUgZmVzdGl2YWwgb2YgSW1ib2xjLCB3aGljaCBjb2luY2lkZWQgd2l0aCB0aGUgYmVnaW5uaW5nCglvZiBsYWN0YXRpb24gaW4gZXdlcyBhbmQgd2FzIHJlZ2FyZGVkIGluIFNjb3RsYW5kIGFzIHRoZSBkYXRlCglvbiB3aGljaCBCcmlnaXQgZGVwb3NlZCB0aGUgYmx1ZS1mYWNlZCBoYWcgb2Ygd2ludGVyLiAgVGhlCglDaHJpc3RpYW4gY2FsZW5kYXIgYWRvcHRlZCB0aGUgc2FtZSBkYXRlIGZvciB0aGUgRmVhc3Qgb2YgU3QuCglCcmlnaXQuICBUaGVyZSBpcyBubyByZWNvcmQgdGhhdCBhIENocmlzdGlhbiBzYWludCBldmVyCglhY3R1YWxseSBleGlzdGVkLCBidXQgaW4gSXJpc2ggbXl0aG9sb2d5IHNoZSBiZWNhbWUgdGhlCgltaWR3aWZlIHRvIHRoZSBWaXJnaW4gTWFyeS4KCQlbIEVuY3ljbG9wZWRpYSBvZiBHb2RzLCBieSBNaWNoYWVsIEpvcmRhbiBdCglCcmluZyBtZSBteSBicm9hZHN3b3JkCglBbmQgY2xlYXIgdW5kZXJzdGFuZGluZy4KCUJyaW5nIG1lIG15IGNyb3NzIG9mIGdvbGQsCglBcyBhIHRhbGlzbWFuLgoJCVsgIkJyb2Fkc3dvcmQiIChyZWZyYWluKSBieSBJYW4gQW5kZXJzb24gXQoJQnVnYmVhcnMgYXJlIHJlbGF0aXZlcyBvZiBnb2JsaW5zLCBhbHRob3VnaCB0aGV5IHRlbmQgdG8gYmUKCWxhcmdlciBhbmQgbW9yZSBoYWlyeS4gIFRoZXkgYXJlIGFnZ3Jlc3NpdmUgY2Fybml2b3JlcyBhbmQKCXNvbWV0aW1lcyBraWxsIGp1c3QgZm9yIHRoZSB0cmVhc3VyZSB0aGVpciB2aWN0aW1zIG1heSBiZQoJY2FycnlpbmcuCgknSSByZWFkIHlvdSBieSB5b3VyIGJ1Z2xlIGhvcm4KCUFuZCBieSB5b3VyIHBhbGZyZXkgZ29vZCwKCUkgcmVhZCB5b3UgZm9yIGEgUmFuZ2VyIHN3b3JuCglUbyBrZWVwIHRoZSBLaW5nJ3MgZ3JlZW4td29vZC4nCgknQSBSYW5nZXIsIExhZHksIHdpbmRzIGhpcyBob3JuLAoJQW5kICd0aXMgYXQgcGVlcCBvZiBsaWdodDsKCUhpcyBibGFzdCBpcyBoZWFyZCBhdCBtZXJyeSBtb3JuLAoJQW5kIG1pbmUgYXQgZGVhZCBvZiBuaWdodC4nCgkJWyBCcmlnbmFsbCBCYW5rcywgYnkgU2lyIFdhbHRlciBTY290dCBdCgkiR29vZCwiIGhlIHNhaWQgYW5kLCB1bmJlbGlldmFibHksIHNtaWxlZCBhdCBtZSwgYSBzbWlyayBsaWtlCglhIHJvdW5kIG9mIHJvdHRlZCBjaGVlc2UuICAiV2hhdCBkaWQgeW91ciBrZWVwZXIgdXNlIG9uIHlvdT8KCUEgYnVsbHdoaXA/IgoJCVsgTWVsdXNpbmUsIGJ5IFNhcmFoIE1vbmV0dGUgXQoJQSBjbGFzc2ljYWwgTWVzb2FtZXJpY2FuIEF6dGVjIGdvZCwgYWxzbyBrbm93biBhcyBNaXhjb2F0bC0KCUNhbWF4dGxpICh0aGUgQ2xvdWQgU2VycGVudCksIENhbWF4dGxpIGlzIHRoZSBnb2Qgb2Ygd2FyLiAgSGUKCWlzIGFsc28gYSBkZWl0eSBvZiBodW50aW5nIGFuZCBmaXJlIHdobyByZWNlaXZlZCBodW1hbgoJc2FjcmlmaWNlIG9mIGNhcHR1cmVkIHByaXNvbmVycy4gIEFjY29yZGluZyB0byB0cmFkaXRpb24sIHRoZQoJc3VuIGdvZCBUZXpjYXRsaXBvY2EgdHJhbnNmb3JtZWQgaGltc2VsZiBpbnRvIE1peGNvYXRsLUNhbWF4dGxpCgl0byBtYWtlIGZpcmUgYnkgdHdpcmxpbmcgdGhlIHNhY3JlZCBmaXJlIHN0aWNrcy4KCQlbIEVuY3ljbG9wZWRpYSBvZiBHb2RzLCBieSBNaWNoYWVsIEpvcmRhbiBdCglUaGUgc2VhdCBvZiBBcnRodXIncyBwb3dlciBpbiBtZWRpZXZhbCByb21hbmNlLiAgVGhlIG5hbWUgaXMKCW9mIHVua25vd24gb3JpZ2luIGFuZCByZWZlcnMgdG8gdGhlIGNhc3RsZSBidXQgYWxzbyBpbmNsdWRlcwoJdGhlIHN1cnJvdW5kaW5nIHRvd24uICAuLi4gIENhbWVsb3QgYXBwZWFycywgbW9zdCBzaWduaWZpY2FudGx5LAoJYXMgYSBwZXJzb25hbCBjYXBpdGFsIGFzIG9wcG9zZWQgdG8gYSBwZXJtYW5lbnQgb3IgbmF0aW9uYWwKCW9uZS4gIEl0IGlzIEFydGh1cidzIGFuZCBBcnRodXIncyBhbG9uZS4gIFRoZXJlIGFyZSBubyBwcmV2aW91cwoJbG9yZHMgYW5kIEFydGh1cidzIHN1Y2Nlc3NvciwgQ29uc3RhbnRpbmUsIGRvZXMgbm90IHRha2UgdXAKCXJlc2lkZW5jZSB0aGVyZS4gIENhbWVsb3QgaXMgYWN0dWFsbHkgc2FpZCB0byBoYXZlIGJlZW4KCWRlbW9saXNoZWQgYWZ0ZXIgQXJ0aHVyIGFuZCBMYW5jZWxvdCB3ZXJlIGdvbmUgYnkgTWFyay4gIEZhemlvCglkZWdsaSBVYmVydGksIHRoZSBJdGFsaWFuIHBvZXQsIGNsYWltcyB0byBoYXZlIHNlZW4gdGhlIHJ1aW5zCglpbiB0aGUgMTR0aCBjZW50dXJ5LgoJCVsgRW5jeWNsb3BlZGlhIE15dGhpY2EsIGVkLiBNLkYuIExpbmRlbWFucyBdCglPbmx5IG9uY2UgYSB5ZWFyLCBvbiBoaXMgYmlydGhkYXksIGRpZCBDaGFybGllIEJ1Y2tldCBldmVyCglnZXQgdG8gdGFzdGUgYSBiaXQgb2YgY2hvY29sYXRlLiAgVGhlIHdob2xlIGZhbWlseSBzYXZlZCB1cAoJdGhlaXIgbW9uZXkgZm9yIHRoYXQgc3BlY2lhbCBvY2Nhc2lvbiwgYW5kIHdoZW4gdGhlIGdyZWF0CglkYXkgYXJyaXZlZCwgQ2hhcmxpZSB3YXMgYWx3YXlzIHByZXNlbnRlZCB3aXRoIG9uZSBzbWFsbAoJY2hvY29sYXRlIGJhciB0byBlYXQgYWxsIGJ5IGhpbXNlbGYuICBBbmQgZWFjaCB0aW1lIGhlCglyZWNlaXZlZCBpdCwgb24gdGhvc2UgbWFydmVsb3VzIGJpcnRoZGF5IG1vcm5pbmdzLCBoZSB3b3VsZAoJcGxhY2UgaXQgY2FyZWZ1bGx5IGluIGEgc21hbGwgd29vZGVuIGJveCB0aGF0IGhlIG93bmVkLCBhbmQKCXRyZWFzdXJlIGl0IGFzIHRob3VnaCBpdCB3ZXJlIGEgYmFyIG9mIHNvbGlkIGdvbGQ7IGFuZCBmb3IKCXRoZSBuZXh0IGZldyBkYXlzLCBoZSB3b3VsZCBhbGxvdyBoaW1zZWxmIG9ubHkgdG8gbG9vayBhdCBpdCwKCWJ1dCBuZXZlciB0byB0b3VjaCBpdC4gIFRoZW4gYXQgbGFzdCwgd2hlbiBoZSBjb3VsZCBzdGFuZCBpdAoJbm8gbG9uZ2VyLCBoZSB3b3VsZCBwZWVsIGJhY2sgYSB0aW55IGJpdCBvZiB0aGUgcGFwZXIKCXdyYXBwaW5nIGF0IG9uZSBjb3JuZXIgdG8gZXhwb3NlIGEgdGlueSBiaXQgb2YgY2hvY29sYXRlLCBhbmQKCXRoZW4gaGUgd291bGQgdGFrZSBhIHRpbnkgbmliYmxlIC0ganVzdCBlbm91Z2ggdG8gYWxsb3cgdGhlCglsb3ZlbHkgc3dlZXQgdGFzdGUgdG8gc3ByZWFkIG91dCBzbG93bHkgb3ZlciBoaXMgdG9uZ3VlLiAgVGhlCgluZXh0IGRheSwgaGUgd291bGQgdGFrZSBhbm90aGVyIHRpbnkgbmliYmxlLCBhbmQgc28gb24sIGFuZAoJc28gb24uICBBbmQgaW4gdGhpcyB3YXksIENoYXJsaWUgd291bGQgbWFrZSBoaXMgdGVuLWNlbnQgYmFyCglvZiBiaXJ0aGRheSBjaG9jb2xhdGUgbGFzdCBoaW0gZm9yIG1vcmUgdGhhbiBhIG1vbnRoLgoJCVsgQ2hhcmxpZSBhbmQgdGhlIENob2NvbGF0ZSBGYWN0b3J5LCBieSBSb2FsZCBEYWhsIF0KCUluIFdvcmxkIFdhciBJSSwgQnJpdGFpbidzIGFpciBtaW5pc3RyeSBzcHJlYWQgdGhlIHdvcmQgdGhhdAoJYSBkaWV0IG9mIHRoZXNlIHZlZ2V0YWJsZXMgaGVscGVkIHBpbG90cyBzZWUgTmF6aSBib21iZXJzCglhdHRhY2tpbmcgYXQgbmlnaHQuICBUaGF0IHdhcyBhIGxpZSBpbnRlbmRlZCB0byBjb3ZlciB0aGUgcmVhbAoJbWF0dGVyIG9mIHdoYXQgd2FzIHVuZGVycGlubmluZyB0aGUgUm95YWwgQWlyIEZvcmNlJ3Mgc3VjY2Vzc2VzOgoJQWlyYm9ybmUgSW50ZXJjZXB0aW9uIFJhZGFyLCBhbHNvIGtub3duIGFzIEFJLiAuLi4gQnJpdGlzaAoJSW50ZWxsaWdlbmNlIGRpZG4ndCB3YW50IHRoZSBHZXJtYW5zIHRvIGZpbmQgb3V0IGFib3V0IHRoZQoJc3VwZXJpb3IgbmV3IHRlY2hub2xvZ3kgaGVscGluZyBwcm90ZWN0IHRoZSBuYXRpb24sIHNvIHRoZXkKCWNyZWF0ZWQgYSBydW1vciB0byBhZmZvcmQgYSBzb21ld2hhdCBwbGF1c2libGUtc291bmRpbmcKCWV4cGxhbmF0aW9uIGZvciB0aGUgc3VkZGVuIGluY3JlYXNlIGluIGJvbWJlcnMgYmVpbmcgc2hvdCBkb3duLgoJLi4uIFRoZSBkaXNpbmZvcm1hdGlvbiB3YXMgc28gcGVyc3Vhc2l2ZSB0aGF0IHRoZSBFbmdsaXNoIHB1YmxpYwoJdG9vayB0byBlYXRpbmcgY2Fycm90cyB0byBoZWxwIHRoZW0gZmluZCB0aGVpciB3YXkgZHVyaW5nIHRoZQoJYmxhY2tvdXRzLgoJCVsgVXJiYW4gTGVnZW5kcyBSZWZlcmVuY2UgUGFnZXMgXQoJSW1hZ2luZSBhIHNlYWxlZCBjb250YWluZXIsIHNvIHBlcmZlY3RseSBjb25zdHJ1Y3RlZCB0aGF0IG5vCglwaHlzaWNhbCBpbmZsdWVuY2UgY2FuIHBhc3MgZWl0aGVyIGlud2FyZHMgb3Igb3V0d2FyZHMgYWNyb3NzIGl0cwoJd2FsbHMuICBJbWFnaW5lIHRoYXQgaW5zaWRlIHRoZSBjb250YWluZXIgaXMgYSBjYXQsIGFuZCBhbHNvIGEKCWRldmljZSB0aGF0IGNhbiBiZSB0cmlnZ2VyZWQgYnkgc29tZSBxdWFudHVtIGV2ZW50LiAgSWYgdGhhdCBldmVudAoJdGFrZXMgcGxhY2UsIHRoZW4gdGhlIGRldmljZSBzbWFzaGVzIGEgcGhpYWwgY29udGFpbmluZyBjeWFuaWRlIGFuZAoJdGhlIGNhdCBpcyBraWxsZWQuICBJZiB0aGUgZXZlbnQgZG9lcyBub3QgdGFrZSBwbGFjZSwgdGhlIGNhdCBsaXZlcwoJb24uICBJbiBTY2hyb2VkaW5nZXIncyBvcmlnaW5hbCB2ZXJzaW9uLCB0aGUgcXVhbnR1bSBldmVudCB3YXMgdGhlCglkZWNheSBvZiBhIHJhZGlvYWN0aXZlIGF0b20uICAuLi4gIFRvIHRoZSBvdXRzaWRlIG9ic2VydmVyLCB0aGUgY2F0CglpcyBpbmRlZWQgaW4gYSBsaW5lYXIgY29tYmluYXRpb24gb2YgYmVpbmcgYWxpdmUgYW5kIGRlYWQsIGFuZCBvbmx5Cgl3aGVuIHRoZSBjb250YWluZXIgaXMgZmluYWxseSBvcGVuZWQgd291bGQgdGhlIGNhdCdzIHN0YXRlIHZlY3RvcgoJY29sbGFwc2UgaW50byBvbmUgb3IgdGhlIG90aGVyLiAgT24gdGhlIG90aGVyIGhhbmQsIHRvIGEgKHN1aXRhYmx5Cglwcm90ZWN0ZWQpIG9ic2VydmVyIGluc2lkZSB0aGUgY29udGFpbmVyLCB0aGUgY2F0J3Mgc3RhdGUtdmVjdG9yCgl3b3VsZCBoYXZlIGNvbGxhcHNlZCBtdWNoIGVhcmxpZXIsIGFuZCB0aGUgb3V0c2lkZSBvYnNlcnZlcidzCglsaW5lYXIgY29tYmluYXRpb24gaGFzIG5vIHJlbGV2YW5jZS4KCQlbIFRoZSBFbXBlcm9yJ3MgTmV3IE1pbmQsIGJ5IFJvZ2VyIFBlbnJvc2UgXQoJV2VsbC1rbm93biBxdWFkcnVwZWQgZG9tZXN0aWMgYW5pbWFsIGZyb20gdGhlIGZhbWlseSBvZgoJcHJlZGF0b3J5IGZlbGluZXMgKF9GZWxpcyBvY2hyZWF0YSBkb21lc3RpY2FfKSwgd2l0aCBhIHRoaWNrLAoJc29mdCBwZWx0OyBvZnRlbiBrZXB0IGFzIGEgcGV0LiAgVmFyaW91cyBmb2xrbG9yZXMgaGF2ZSB0aGUKCWNhdCBhc3NvY2lhdGVkIHdpdGggbWFnaWMgYW5kIHRoZSBnb2RzIG9mIGFuY2llbnQgRWd5cHQuCgoJU28gVWx0aGFyIHdlbnQgdG8gc2xlZXAgaW4gdmFpbiBhbmdlcjsgYW5kIHdoZW4gdGhlIHBlb3BsZQoJYXdha2VuZWQgYXQgZGF3biAtIGJlaG9sZCEgIEV2ZXJ5IGNhdCB3YXMgYmFjayBhdCBoaXMKCWFjY3VzdG9tZWQgaGVhcnRoISAgTGFyZ2UgYW5kIHNtYWxsLCBibGFjaywgZ3JleSwgc3RyaXBlZCwKCXllbGxvdyBhbmQgd2hpdGUsIG5vbmUgd2FzIG1pc3NpbmcuICBWZXJ5IHNsZWVrIGFuZCBmYXQgZGlkCgl0aGUgY2F0cyBhcHBlYXIsIGFuZCBzb25vcm91cyB3aXRoIHB1cnJpbmcgY29udGVudC4KCQlbIFRoZSBDYXRzIG9mIFVsdGhhciwgYnkgSC5QLiBMb3ZlY3JhZnQgXQoJTm93IGl0IHdhcyBsaWdodCBlbm91Z2ggdG8gbGVhdmUuICBNb29uLVdhdGNoZXIgcGlja2VkIHVwCgl0aGUgc2hyaXZlbGVkIGNvcnBzZSBhbmQgZHJhZ2dlZCBpdCBhZnRlciBoaW0gYXMgaGUgYmVudAoJdW5kZXIgdGhlIGxvdyBvdmVyaGFuZyBvZiB0aGUgY2F2ZS4gIE9uY2Ugb3V0c2lkZSwgaGUKCXRocmV3IHRoZSBib2R5IG92ZXIgaGlzIHNob3VsZGVyIGFuZCBzdG9vZCB1cHJpZ2h0IC0gdGhlCglvbmx5IGFuaW1hbCBpbiBhbGwgdGhpcyB3b3JsZCBhYmxlIHRvIGRvIHNvLgoJQW1vbmcgaGlzIGtpbmQsIE1vb24tV2F0Y2hlciB3YXMgYWxtb3N0IGEgZ2lhbnQuICBIZSB3YXMKCW5lYXJseSBmaXZlIGZlZXQgaGlnaCwgYW5kIHRob3VnaCBiYWRseSB1bmRlcm5vdXJpc2hlZAoJd2VpZ2hlZCBvdmVyIGEgaHVuZHJlZCBwb3VuZHMuICBIaXMgaGFpcnksIG11c2N1bGFyIGJvZHkKCXdhcyBoYWxmd2F5IGJldHdlZW4gYXBlIGFuZCBtYW4sIGJ1dCBoaXMgaGVhZCB3YXMgYWxyZWFkeQoJbXVjaCBuZWFyZXIgdG8gbWFuIHRoYW4gYXBlLiAgVGhlIGZvcmVoZWFkIHdhcyBsb3csIGFuZAoJdGhlcmUgd2VyZSByaWRnZXMgb3ZlciB0aGUgZXllIHNvY2tldHMsIHlldCBoZSB1bm1pc3Rha2FibHkKCWhlbGQgaW4gaGlzIGdlbmVzIHRoZSBwcm9taXNlIG9mIGh1bWFuaXR5LgoJCVsgMjAwMTogQSBTcGFjZSBPZHlzc2V5LCBieSBBcnRodXIgQy4gQ2xhcmtlIF0KCSdUd2FzIGluIGEgbGFuZCB1bmtlbXB0IG9mIGxpZmUncyByZWQgZGF3bjsKCVdoZXJlIGluIGhpcyBzYW5kZWQgY2F2ZSBoZSBkd2VsdCBhbG9uZTsKCVNsZWVwaW5nIGJ5IGRheSwgb3Igc29tZXRpbWVzIHdvcmtlZCB1cG9uCglIaXMgZmxpbnQtaGVhZCBhcnJvd3MgYW5kIGhpcyBrbml2ZXMgb2Ygc3RvbmU7CglCeSBuaWdodCBzdG9sZSBmb3J0aCBhbmQgc2xldyB0aGUgc2F2YWdlIGJvYXIsCglTbyB0aGF0IGhlIGxvb21lZCBhIGh1bnRlciBvZiBsb3VkIGZhbWUsCglBbmQgbWFueSBhIHNraW4gb2Ygd29sZiBhbmQgd2lsZC1jYXQgd29yZSwKCUFuZCBjb3VudGVkIG1hbnkgYSBmbGludC1oZWFkIHRvIGhpcyBuYW1lOwoJV2hlcmVmb3JlIGhlIHdhbGtlZCB0aGUgZW52eSBvZiB0aGUgYmFuZCwKCUhhdGVkIGFuZCBmZWFyZWQsIGJ1dCBtYXRjaGxlc3MgaW4gaGlzIHNraWxsLgoJVGlsbCBsbyEgb25lIG5pZ2h0IGRlZXAgaW4gdGhhdCBzaGFnZ3kgbGFuZCwKCUhlIHRyYWNrZWQgYSB5ZWFybGluZyBiZWFyIGFuZCBtYWRlIGhpcyBraWxsOwoJVGhlbiBvdmVyLXdvcm4gaGUgcmVzdGVkIGJ5IGEgc3RyZWFtLAoJQW5kIHNhbmsgaW50byBhIHNsZWVwIHRvbyBkZWVwIGZvciBkcmVhbS4KCQlbIFRoZSBEcmVhbWVyLCBieSBSb2JlcnQgU2VydmljZSBdCglPZiBhbGwgdGhlIG1vbnN0ZXJzIHB1dCB0b2dldGhlciBieSB0aGUgR3JlZWsgaW1hZ2luYXRpb24KCXRoZSBDZW50YXVycyAoS2VudGF1cm9pKSBjb25zdGl0dXRlZCBhIGNsYXNzIGluIHRoZW1zZWx2ZXMuCglEZXNwaXRlIGEgc3Ryb25nIHN0cmVhayBvZiBzZW5zdWFsaXR5LCBpbiB0aGVpciBtYWtlLXVwLAoJdGhlaXIgbm9ybWFsIGJlaGF2aW91ciB3YXMgbW9yYWwsIGFuZCB0aGV5IHRvb2sgYSBraW5kbHkKCXRob3VnaHQgb2YgbWFuJ3Mgd2VsZmFyZS4gIFRoZSBhdHRlbXB0ZWQgb3V0cmFnZSBvZiBOZXNzb3Mgb24KCURlaWFuZWlyYSwgYW5kIHRoYXQgb2YgdGhlIHdob2xlIHRyaWJlIG9mIENlbnRhdXJzIG9uIHRoZQoJTGFwaXRoIHdvbWVuLCBhcmUgbW9yZSB0aGFuIG9mZnNldCBieSB0aGUgaG9zcGl0YWxpdHkgb2YKCVBob2xvcyBhbmQgYnkgdGhlIHdpc2RvbSBvZiBDaGVpcm9uLCBwaHlzaWNpYW4sIHByb3BoZXQsCglseXJpc3QsIGFuZCB0aGUgaW5zdHJ1Y3RvciBvZiBBY2hpbGxlcy4gIEZ1cnRoZXIsIHRoZQoJQ2VudGF1cnMgd2VyZSBwZWN1bGlhciBpbiB0aGF0IHRoZWlyIG5hdHVyZSwgd2hpY2ggdW5pdGVkIHRoZQoJYm9keSBvZiBhIGhvcnNlIHdpdGggdGhlIHRydW5rIGFuZCBoZWFkIG9mIGEgbWFuLCBpbnZvbHZlZAoJYW4gdW50aGlua2FibGUgZHVwbGljYXRpb24gb2Ygdml0YWwgb3JnYW5zIGFuZCBpbXBvcnRhbnQKCW1lbWJlcnMuICBTbyBncm90ZXNxdWUgYSBjb21iaW5hdGlvbiBzZWVtcyBhbG1vc3QgdW4tR3JlZWsuCglUaGVzZSBzdHJhbmdlIGNyZWF0dXJlcyB3ZXJlIHNhaWQgdG8gbGl2ZSBpbiB0aGUgY2F2ZXMgYW5kCgljbGVmdHMgb2YgdGhlIG1vdW50YWlucywgbXl0aHMgYXNzb2NpYXRpbmcgdGhlbSBlc3BlY2lhbGx5Cgl3aXRoIHRoZSBoaWxscyBvZiBUaGVzc2FseSBhbmQgdGhlIHJhbmdlIG9mIEVyeW1hbnRob3MuCgkJICAgICBbIE15dGhvbG9neSBvZiBhbGwgcmFjZXMsIFZvbC4gMSwgcHAuIDI3MC0yNzEgXQoJSSBvYnNlcnZlZCBoZXJlLCB3aGF0IEkgaGFkIG9mdGVuIHNlZW4gYmVmb3JlLCB0aGF0IGNlcnRhaW4KCWRpc3RyaWN0cyBhYm91bmQgaW4gY2VudGlwZWRlcy4gIEhlcmUgdGhleSBoYXZlIGxpZ2h0CglyZWRkaXNoIGJvZGllcyBhbmQgYmx1ZSBsZWdzOyBncmVhdCBteXJpYXBlZGVzIGFyZSBzZWVuCgljcmF3bGluZyBldmVyeSB3aGVyZS4gIEFsdGhvdWdoIHRoZXkgZG8gbm8gaGFybSwgdGhleSBleGNpdGUKCWluIG1hbiBhIGZlZWxpbmcgb2YgbG9hdGhpbmcuICBQZXJoYXBzIG91ciBhcHBlYXJhbmNlCglwcm9kdWNlcyBhIHNpbWlsYXIgZmVlbGluZyBpbiB0aGUgZWxlcGhhbnQgYW5kIG90aGVyIGxhcmdlCglhbmltYWxzLiAgV2hlcmUgdGhleSBoYXZlIGJlZW4gbXVjaCBkaXN0dXJiZWQsIHRoZXkKCWNlcnRhaW5seSBsb29rIHVwb24gdXMgd2l0aCBncmVhdCBkaXN0cnVzdCwgYXMgdGhlIGhvcnJpZAoJYmlwZWQgdGhhdCBydWlucyB0aGVpciBwZWFjZS4KCQlbIFRyYXZlbHMgYW5kIFJlc2VhcmNoZXMgaW4gU291dGggQWZyaWNhLAoJCQlieSBEci4gRGF2aWQgTGl2aW5nc3RvbmUgXQoJQ2VyYmVydXMsIChvciBLZXJiZXJvcyBpbiBHcmVlayksIHdhcyB0aGUgdGhyZWUtaGVhZGVkIGRvZwoJdGhhdCBndWFyZGVkIHRoZSBHYXRlcyBvZiBIZWxsLiAgSGUgYWxsb3dlZCBhbnkgZGVhZCB0byBlbnRlciwKCWFuZCBsaWtld2lzZSBwcmV2ZW50ZWQgdGhlbSBhbGwgZnJvbSBldmVyIGxlYXZpbmcuICBIZSB3YXMKCWJlc3RlZCBvbmx5IHR3aWNlOiAgb25jZSB3aGVuIE9ycGhldXMgcHV0IGhpbSB0byBzbGVlcCBieQoJcGxheWluZyBiZXdpdGNoaW5nIG11c2ljIG9uIGhpcyBseXJlLCBhbmQgdGhlIG90aGVyIHRpbWUgd2hlbgoJSGVyY3VsZXMgY29uZnJvbnRlZCBoaW0gYW5kIHRvb2sgaGltIHRvIHRoZSB3b3JsZCBvZiB0aGUKCWxpdmluZyAoYXMgaGlzIHR3ZWxmdGggYW5kIGxhc3QgbGFib3IpLgoJQSBzbWFsbCBsaXphcmQgcGVyY2hlZCBvbiBhIGJyb3duIHN0b25lLiAgRmVlbGluZyB0aHJlYXRlbmVkIGJ5Cgl0aGUgYXBwcm9hY2ggb2YgaHVtYW4gYmVpbmdzIGFsb25nIHRoZSBwYXRoLCBpdCBtZXRhbW9ycGhvc2VkCglpbnRvIGEgc3RpbmdyYXkgYmVldGxlLCB0aGVuIGludG8gYSBzdGVuY2gtcHVmZmVyLCB0aGVuIGludG8gYQoJZmllcnkgc2FsYW1hbmRlci4KCUJpbmsgc21pbGVkLiAgVGhlc2UgY29udmVyc2lvbnMgd2VyZW4ndCByZWFsLiAgSXQgaGFkIGFzc3VtZWQKCXRoZSBmb3JtcyBvZiBvYm5veGlvdXMgbGl0dGxlIG1vbnN0ZXJzLCBidXQgbm90IHRoZWlyIGVzc2VuY2UuCglJdCBjb3VsZCBub3Qgc3RpbmcsIHN0aW5rIG9yIGJ1cm4uICBJdCB3YXMgYSBjaGFtZWxlb24sIHVzaW5nCglpdHMgbWFnaWMgdG8gbWltaWMgY3JlYXR1cmVzIG9mIGdlbnVpbmUgdGhyZWF0LgoJWWV0IGFzIGl0IHNoaWZ0ZWQgaW50byB0aGUgZm9ybSBvZiBhIGJhc2lsaXNrIGl0IGdsYXJlZCBhdCBoaW0KCXdpdGggc3VjaCBmZXJvY2l0eSB0aGF0IEJpbmsncyBtaXJ0aCBhYmF0ZWQuICBJZiBpdHMgbWFsaWNlCgljb3VsZCBzdHJpa2UgaGltLCBoZSB3b3VsZCBiZSBob3JyaWJseSBkZWFkLgoJCVsgQSBTcGVsbCBmb3IgQ2hhbWVsZW9uLCBieSBQaWVycyBBbnRob255IF0KCVdoZW4gYW4gYW5jaWVudCBHcmVlayBkaWVkLCBoaXMgc291bCB3ZW50IHRvIHRoZSBuZXRoZXIgd29ybGQ6Cgl0aGUgSGFkZXMuICBUbyByZWFjaCB0aGUgbmV0aGVyIHdvcmxkLCB0aGUgc291bHMgaGFkIHRvIGNyb3NzCgl0aGUgcml2ZXIgU3R5eCwgdGhlIHJpdmVyIHRoYXQgc2VwYXJhdGVkIHRoZSBsaXZpbmcgZnJvbSB0aGUKCWRlYWQuICBUaGUgU3R5eCBjb3VsZCBiZSBjcm9zc2VkIGJ5IGZlcnJ5LCB3aG9zZSBzaGFiYnkgZmVycnktCgltYW4sIGFkdmFuY2VkIGluIGFnZSwgd2FzIGNhbGxlZCBDaGFyb24uICBUaGUgZGVjZWFzZWQncyBuZXh0LQoJb2Yta2luIHdvdWxkIHBsYWNlIGEgY29pbiB1bmRlciBoaXMgdG9uZ3VlLCB0byBwYXkgdGhlIGZlcnJ5LQoJbWFuLgoJRGFudGVzIHJhcGlkbHkgY2xlYXJlZCBhd2F5IHRoZSBlYXJ0aCBhcm91bmQgdGhlIGNoZXN0LiAgU29vbgoJdGhlIGNlbnRlciBsb2NrIGFwcGVhcmVkLCB0aGVuIHRoZSBoYW5kbGVzIGF0IGVhY2ggZW5kLCBhbGwKCWRlbGljYXRlbHkgd3JvdWdodCBpbiB0aGUgbWFubmVyIG9mIHRoYXQgcGVyaW9kIHdoZW4gYXJ0IG1hZGUKCXByZWNpb3VzIGV2ZW4gdGhlIGJhc2VzdCBvZiBtZXRhbHMuICBIZSB0b29rIHRoZSBjaGVzdCBieSB0aGUKCXR3byBoYW5kbGVzIGFuZCB0cmllZCB0byBsaWZ0IGl0LCBidXQgaXQgd2FzIGltcG9zc2libGUuICBIZQoJdHJpZWQgdG8gb3BlbiBpdDsgaXQgd2FzIGxvY2tlZC4gIEhlIGluc2VydGVkIHRoZSBzaGFycCBlbmQKCW9mIGhpcyBwaWNrYXhlIGJldHdlZW4gdGhlIGNoZXN0IGFuZCB0aGUgbGlkIGFuZCBwdXNoZWQgZG93bgoJb24gdGhlIGhhbmRsZS4gIFRoZSBsaWQgY3JlYWtlZCwgdGhlbiBmbGV3IG9wZW4uCglEYW50ZXMgd2FzIHNlaXplZCB3aXRoIGEgc29ydCBvZiBnaWRkeSBmZXZlci4gIEhlIGNvY2tlZCBoaXMKCWd1biBhbmQgcGxhY2VkIGl0IGJlc2lkZSBoaW0uICBUaGVuIGhlIGNsb3NlZCBoaXMgZXllcyBsaWtlCglhIGNoaWxkLCBvcGVuZWQgdGhlbSBhbmQgc3Rvb2QgZHVtYmZvdW5kZWQuCglUaGUgY2hlc3Qgd2FzIGRpdmlkZWQgaW50byB0aHJlZSBjb21wYXJ0bWVudHMuICBJbiB0aGUgZmlyc3QKCXdlcmUgc2hpbmluZyBnb2xkIGNvaW5zLiAgSW4gdGhlIHNlY29uZCwgdW5wb2xpc2hlZCBnb2xkCglpbmdvdHMgcGFja2VkIGluIG9yZGVybHkgc3RhY2tzLiAgRnJvbSB0aGUgdGhpcmQgY29tcGFydG1lbnQsCgl3aGljaCB3YXMgaGFsZiBmdWxsLCBEYW50ZXMgcGlja2VkIHVwIGhhbmRmdWxzIG9mIGRpYW1vbmRzLAoJcGVhcmxzIGFuZCBydWJpZXMuICBBcyB0aGV5IGZlbGwgdGhyb3VnaCBoaXMgZmluZ2VycyBpbiBhCglnbGl0dGVyaW5nIGNhc2NhZGUsIHRoZXkgZ2F2ZSBmb3J0aCB0aGUgc291bmQgb2YgaGFpbCBiZWF0aW5nCglhZ2FpbnN0IHRoZSB3aW5kb3dwYW5lcy4KCQlbIFRoZSBDb3VudCBvZiBNb250ZSBDcmlzdG8sIGJ5IEFsZXhhbmRyZSBEdW1hcyBdCglBIGNoYXJhY3RlciBpbiBDaGluZXNlIG15dGhvbG9neSBub3RlZCBmb3IgYnJpbmdpbmcgYWJvdXQgdGhlCgllbmQgb2YgYSB0ZXJyaWJsZSBkcm91Z2h0IHdoaWNoIHRocmVhdGVuZWQgdGhlIHN1cnZpdmFsIG9mCgl0aGUgcGVvcGxlLiAgSGUgYWNoaWV2ZWQgdGhpcyBieSBtZWFucyBvZiBzcHJpbmtsaW5nIHRoZQoJZWFydGggd2l0aCB3YXRlciBmcm9tIGEgYm93bCwgdXNpbmcgdGhlIGJyYW5jaCBvZiBhIHRyZWUgdG8KCWRvIHNvLiAgSGUgYmVjYW1lIHRoZSBoZWF2ZW5seSBjb250cm9sbGVyIG9mIHRoZSByYWluLCBhbmQKCWxpdmVkIHdpdGggb3RoZXIgY2VsZXN0aWFsIGJlaW5ncyBpbiB0aGVpciBwYXJhZGlzZSBvbiBNb3VudAoJS3VubHVuLgoJICBbIFRoZSBJbGx1c3RyYXRlZCBXaG8ncyBXaG8gSW4gTXl0aG9sb2d5LCBieSBNaWNoYWVsIFNlbmlvciBdCglUaWFtYXQgaXMgc2FpZCB0byBiZSB0aGUgbW90aGVyIG9mIGV2aWwgZHJhZ29ua2luZC4gIFNoZSBpcwoJZXh0cmVtZWx5IHZhaW4uCglBIHBhbGUgeWVsbG93IHZhcmlldHkgb2YgY3J5c3RhbGxpbmUgcXVhcnR6IHJlc2VtYmxpbmcgdG9wYXouCglJdCB3YXMgYSB3YXJtIHNwcmluZyBuaWdodCB3aGVuIGEgZmlzdCBrbm9ja2VkIGF0IHRoZSBkb29yIHNvCgloYXJkIHRoYXQgdGhlIGhpbmdlcyBiZW50LgoJQSBtYW4gb3BlbmVkIGl0IGFuZCBwZWVyZWQgb3V0IGludG8gdGhlIHN0cmVldC4gVGhlcmUgd2FzCgltaXN0IGNvbWluZyBvZmYgdGhlIHJpdmVyIGFuZCBpdCB3YXMgYSBjbG91ZHkgbmlnaHQuIEhlIG1pZ2h0CglhcyB3ZWxsIGhhdmUgdHJpZWQgdG8gc2VlIHRocm91Z2ggd2hpdGUgdmVsdmV0LgoJQnV0IGhlIHRob3VnaHQgYWZ0ZXJ3YXJkcyB0aGF0IHRoZXJlIGhhZCBiZWVuIHNoYXBlcyBvdXQKCXRoZXJlLCBqdXN0IGJleW9uZCB0aGUgbGlnaHQgc3BpbGxpbmcgb3V0IGludG8gdGhlIHJvYWQuIEEKCWxvdCBvZiBzaGFwZXMsIHdhdGNoaW5nIGhpbSBjYXJlZnVsbHkuIEhlIHRob3VnaHQgbWF5YmUKCXRoZXJlJ2QgYmVlbiB2ZXJ5IGZhaW50IHBvaW50cyBvZiBsaWdodC4uLgoJVGhlcmUgd2FzIG5vIG1pc3Rha2luZyB0aGUgc2hhcGUgcmlnaHQgaW4gZnJvbnQgb2YgaGltLAoJdGhvdWdoLiBJdCB3YXMgYmlnIGFuZCBkYXJrIHJlZCBhbmQgbG9va2VkIGxpa2UgYSBjaGlsZCdzCgljbGF5IG1vZGVsIG9mIGEgbWFuLiBJdHMgZXllcyB3ZXJlIHR3byBlbWJlcnMuCgkJWyBGZWV0IG9mIENsYXksIGJ5IFRlcnJ5IFByYXRjaGV0dCBdCglIaXRoZXIgY2FtZSBDb25hbiwgdGhlIENpbW1lcmlhbiwgYmxhY2staGFpcmVkLCBzdWxsZW4tZXllZCwKCXN3b3JkIGluIGhhbmQsIGEgdGhpZWYsIGEgcmVhdmVyLCBhIHNsYXllciwgd2l0aCBnaWdhbnRpYwoJbWVsYW5jaG9saWVzIGFuZCBnaWdhbnRpYyBtaXJ0aCwgdG8gdHJlYWQgdGhlIGpld2VsZWQKCXRocm9uZXMgb2YgdGhlIEVhcnRoIHVuZGVyIGhpcyBzYW5kYWxsZWQgZmVldC4KCQlbIFRoZSBQaG9lbml4IG9uIHRoZSBTd29yZCwgYnkgUm9iZXJ0IEUuIEhvd2FyZCBdCglDbG9ha3MgYXJlIHRoZSB1bml2ZXJzYWwgb3V0ZXIgZ2FyYiBvZiBldmVyeW9uZSB3aG8gaXMgbm90IGEKCUJhcmJhcmlhbi4gIEl0IGlzIGhhcmQgdG8gc2VlIHdoeS4gIFRoZXkgYXJlIG9wZW4gaW4gZnJvbnQKCWFuZCByZXF1aXJlIHlvdSBhdCBtb3N0IHRpbWVzIHRvIHVzZSBvbmUgaGFuZCB0byBob2xkIHRoZW0KCXNodXQuICBPbiBob3JzZWJhY2sgdGhleSBsZWF2ZSB0aGUgc2hpcnQtc2xlZXZlZCBhcm1zIGFuZAoJbW9zdCBvZiB0aGUgdG9yc28gZXhwb3NlZCB0byB3aW5kIGFuZCBXZWF0aGVyLiAgVGhlIE9NVHMKCVsgT2ZmaWNpYWwgTWFuYWdlbWVudCBUZXJtcyBdIGZvciBDbG9ha3Mgd2VsbCBleHByZXNzIHRoZWlyCglkaWZmaWN1bHRpZXMuICBUaGV5IGFyZSBjb25zdGFudGx5IF9zd2lybGluZyBhbmQgZHJpcHBpbmdfCglhbmQgYmVjb21pbmcgX2hlYXZ5IHdpdGggd2F0ZXJfIGluIHJhaW55IFdlYXRoZXIsIF9lbnRhbmdsaW5nCgl3aXRoIHRyZWVzXyBvciBfc3dvcmRzXywgb3IgbmVlZGluZyB0byBiZSBfcHVsbGVkIGNsb3NlCglhcm91bmQgaGVyL2hpcyBzaGl2ZXJpbmcgYm9keV8uICBUaGlzIHNlZW1zIHRvIHN1Z2dlc3QgdGhleQoJYXJlIGxlc3MgdGhhbiBwcmFjdGljYWwgZm9yIGFueW9uZSBvbiBhbiBhcmR1b3VzIFRvdXIuCgkgIFsgVGhlIFRvdWdoIEd1aWRlIHRvIEZhbnRhc3lsYW5kLCBieSBEaWFuYSBXeW5uZSBKb25lcyBdCglJIHdhbmRlcmVkIGxvbmVseSBhcyBhIGNsb3VkCglUaGF0IGZsb2F0cyBvbiBoaWdoIG8nZXIgdmFsZXMgYW5kIGhpbGxzLAoJV2hlbiBhbGwgYXQgb25jZSBJIHNhdyBhIGNyb3dkLAoJQSBob3N0LCBvZiBnb2xkZW4gZGFmZm9kaWxzOwoJQmVzaWRlIHRoZSBsYWtlLCBiZW5lYXRoIHRoZSB0cmVlcywKCUZsdXR0ZXJpbmcgYW5kIGRhbmNpbmcgaW4gdGhlIGJyZWV6ZS4KCQlbIEkgV2FuZGVyZWQgTG9uZWx5IGFzIGEgQ2xvdWQsIGJ5IFdpbGxpYW0gV29yZHN3b3J0aCBdCglEYXJ6ZWUgYW5kIGhpcyB3aWZlIG9ubHkgY293ZXJlZCBkb3duIGluIHRoZSBuZXN0IHdpdGhvdXQKCWFuc3dlcmluZywgZm9yIGZyb20gdGhlIHRoaWNrIGdyYXNzIGF0IHRoZSBmb290IG9mIHRoZSBidXNoCgl0aGVyZSBjYW1lIGEgbG93IGhpc3MgLS0gYSBob3JyaWQgY29sZCBzb3VuZCB0aGF0IG1hZGUKCVJpa2tpLXRpa2tpIGp1bXAgYmFjayB0d28gY2xlYXIgZmVldC4gIFRoZW4gaW5jaCBieSBpbmNoIG91dCBvZgoJdGhlIGdyYXNzIHJvc2UgdXAgdGhlIGhlYWQgYW5kIHNwcmVhZCBob29kIG9mIE5hZywgdGhlIGJpZwoJYmxhY2sgY29icmEsIGFuZCBoZSB3YXMgZml2ZSBmZWV0IGxvbmcgZnJvbSB0b25ndWUgdG8gdGFpbC4KCVdoZW4gaGUgaGFkIGxpZnRlZCBvbmUtdGhpcmQgb2YgaGltc2VsZiBjbGVhciBvZiB0aGUgZ3JvdW5kLAoJaGUgc3RheWVkIGJhbGFuY2luZyB0byBhbmQgZnJvIGV4YWN0bHkgYXMgYSBkYW5kZWxpb24tdHVmdAoJYmFsYW5jZXMgaW4gdGhlIHdpbmQsIGFuZCBoZSBsb29rZWQgYXQgUmlra2ktdGlra2kgd2l0aCB0aGUKCXdpY2tlZCBzbmFrZSdzIGV5ZXMgdGhhdCBuZXZlciBjaGFuZ2UgdGhlaXIgZXhwcmVzc2lvbiwKCXdoYXRldmVyIHRoZSBzbmFrZSBtYXkgYmUgdGhpbmtpbmcgb2YuCgknV2hvIGlzIE5hZz8nIHNhaWQgaGUuICAnX0lfIGFtIE5hZy4gIFRoZSBncmVhdCBHb2QgQnJhaG0gcHV0CgloaXMgbWFyayB1cG9uIGFsbCBvdXIgcGVvcGxlLCB3aGVuIHRoZSBmaXJzdCBjb2JyYSBzcHJlYWQgaGlzCglob29kIHRvIGtlZXAgdGhlIHN1biBvZmYgQnJhaG0gYXMgaGUgc2xlcHQuICBMb29rLCBhbmQgYmUKCWFmcmFpZCEnCgkJWyBSaWtraS10aWtraS10YXZpLCBieSBSdWR5YXJkIEtpcGxpbmcgXQoJT25jZSBpbiBhIGdyZWF0IHdoaWxlLCB3aGVuIHRoZSBwb3NpdGlvbnMgb2YgdGhlIHN0YXJzIGFyZQoJanVzdCByaWdodCwgYSBzZXZlbi15ZWFyLW9sZCByb29zdGVyIHdpbGwgbGF5IGFuIGVnZy4gIFRoZW4sCglhbG9uZyB3aWxsIGNvbWUgYSBzbmFrZSwgdG8gY29pbCBhcm91bmQgdGhlIGVnZywgb3IgYSB0b2FkLAoJdG8gc3F1YXQgdXBvbiB0aGUgZWdnLCBrZWVwaW5nIGl0IHdhcm0gYW5kIGhlbHBpbmcgaXQgdG8KCWhhdGNoLiAgV2hlbiBpdCBoYXRjaGVzLCBvdXQgY29tZXMgYSBjcmVhdHVyZSBjYWxsZWQgYmFzaWxpc2ssCglvciBjb2NrYXRyaWNlLCB0aGUgbW9zdCBkZWFkbHkgb2YgYWxsIGNyZWF0dXJlcy4gIEEgc2luZ2xlCglnbGFuY2UgZnJvbSBpdHMgeWVsbG93LCBwaWVyY2luZyB0b2FkJ3MgZXllcyB3aWxsIGtpbGwgYm90aAoJbWFuIGFuZCBiZWFzdC4gIEl0cyBwb3dlciBvZiBkZXN0cnVjdGlvbiBpcyBzYWlkIHRvIGJlIHNvCglncmVhdCB0aGF0IHNvbWV0aW1lcyBzaW1wbHkgdG8gaGVhciBpdHMgaGlzcyBjYW4gcHJvdmUgZmF0YWwuCglJdHMgYnJlYXRoIGlzIHNvIHZlbm9tb3VzIHRoYXQgaXQgY2F1c2VzIGFsbCB2ZWdldGF0aW9uCgl0byB3aXRoZXIuCgoJVGhlcmUgaXMsIGhvd2V2ZXIsIG9uZSBjcmVhdHVyZSB3aGljaCBjYW4gd2l0aHN0YW5kIHRoZQoJYmFzaWxpc2sncyBkZWFkbHkgZ2F6ZSwgYW5kIHRoaXMgaXMgdGhlIHdlYXNlbC4gIE5vIG9uZSBrbm93cwoJd2h5IHRoaXMgaXMgc28sIGJ1dCBhbHRob3VnaCB0aGUgZmllcmNlIHdlYXNlbCBjYW4gc2xheSB0aGUKCWJhc2lsaXNrLCBpdCB3aWxsIGl0c2VsZiBiZSBraWxsZWQgaW4gdGhlIHN0cnVnZ2xlLiAgUGVyaGFwcwoJdGhlIHdlYXNlbCBrbm93cyB0aGUgYmFzaWxpc2sncyBmYXRhbCB3ZWFrbmVzczogIGlmIGl0IGV2ZXIKCXNlZXMgaXRzIG93biByZWZsZWN0aW9uIGluIGEgbWlycm9yIGl0IHdpbGwgcGVyaXNoIGluc3RhbnRseS4KCUJ1dCBldmVuIGEgZGVhZCBiYXNpbGlzayBpcyBkYW5nZXJvdXMsIGZvciBpdCBpcyBzYWlkIHRoYXQKCW1lcmVseSB0b3VjaGluZyBpdHMgbGlmZWxlc3MgYm9keSBjYW4gY2F1c2UgYSBwZXJzb24gdG8KCXNpY2tlbiBhbmQgZGllLgoJICBbIE15dGhpY2FsIEJlYXN0cyBieSBEZWlyZHJlIEhlYWRvbiAoVGhlIExlcHJlY2hhdW4gTGlicmFyeSkKCSAgICAgIGFuZCBvdGhlciBzb3VyY2VzIF0KCVRoZSBjb2luIGJlYXJzIHRoZSBsaWtlbmVzcyBvZiBCZWx3aXQgdGhlIEZsYXQsIGFsb25nIHdpdGggdGhlCglpbnNjcmlwdGlvbnMsICJPbmUgWm9ya21pZCwiIGFuZCAiNjk5IEdVRSBbIEdyZWF0IFVuZGVyZ3JvdW5kCglFbXBpcmUgXS4iICBPbiB0aGUgb3RoZXIgc2lkZSwgdGhlIGNvaW4gZGVwaWN0cyBFZ3JldGggQ2FzdGxlLAoJYW5kIHNheXMgIkluIEZyb2JzIFdlIFRydXN0IiBpbiBzZXZlcmFsIGxhbmd1YWdlcy4KCQlbIFpvcmsgWmVybywgYnkgSW5mb2NvbSBdCglbU2NlbmU6IE1yLiBNb29uIGFuZCBHaWxiZXJ0IGVudGVyIHRhdmVybiBhbmQgZGlzY292ZXIgbWFueQoJY29ycHNlcyBzdHJld24gYWJvdXQgdGhlIHBsYWNlOyBCbGluZCBQZXcgaXMgc29sZSBzdXJ2aXZvci5dCglCbGluZCBQZXc6ICBFdmVuaW5nLiAgU291bmRlZCBhcyB0aG91Z2ggdGhlcmUgaGFzIGJlZW4gYSBiaXQKCSAgICAgICAgICAgIG9mIGEgc3F1YWJibGUuCgkgTXIuIE1vb246ICBTcXVhYmJsZT8gIFRoZXkncmUgYWxsIGRlYWQuCglCbGluZCBQZXc6ICBPaC4gIE11c3QgaGF2ZSBiZWVuIG1vcmUgb2YgYSB0aWZmIHRoZW4uCgkJWyBZZWxsb3diZWFyZCwgZGlyZWN0ZWQgYnkgTWVsIERhbXNraSwgc2NyZWVucGxheQoJCSAgYnkgR3JhaGFtIENoYXBtYW4sIFBldGVyIENvb2ssIEJlcm5hcmQgTWNLZW5uYSBdCglUaGUgY29wZSBpcyBhIGxpdHVyZ2ljYWwgdmVzdG1lbnQgd2hpY2ggbWF5IGJlIHdvcm4gYnkgYW55CglyYW5rIG9mIHRoZSBjbGVyZ3kuICBDb3BlcyBhcmUgbWFkZSBpbiBhbGwgbGl0dXJnaWNhbCBjb2xvdXJzLAoJYW5kIGFyZSBsaWtlIGEgdmVyeSBsb25nIG1hbnRsZSBvciBjbG9haywgZmFzdGVuZWQgYXQgdGhlIGJyZWFzdAoJYnkgYSBjbGFzcC4KCQlbIFdpa2lwZWRpYSwgdGhlIGZyZWUgZW5jeWNsb3BlZGlhIF0KCUhlIHdhcyBkcmVzc2VkIGluIGEgZmxvd2luZyBnb3duIHdpdGggZnVyIHRpcHBldHMgd2hpY2ggaGFkCgl0aGUgc2lnbnMgb2YgdGhlIHpvZGlhYyBlbWJyb2lkZXJlZCBvdmVyIGl0LCB3aXRoIHZhcmlvdXMKCWNhYmFsaXN0aWMgc2lnbnMsIHN1Y2ggYXMgdHJpYW5nbGVzIHdpdGggZXllcyBpbiB0aGVtLCBxdWVlcgoJY3Jvc3NlcywgbGVhdmVzIG9mIHRyZWVzLCBib25lcyBvZiBiaXJkcyBhbmQgYW5pbWFscywgYW5kIGEKCXBsYW5ldGFyaXVtIHdob3NlIHN0YXJzIHNob25lIGxpa2UgYml0cyBvZiBsb29raW5nLWdsYXNzIHdpdGgKCXRoZSBzdW4gb24gdGhlbS4gIEhlIGhhZCBhIHBvaW50ZWQgaGF0IGxpa2UgYSBkdW5jZSdzIGNhcCwgb3IKCWxpa2UgdGhlIGhlYWRnZWFyIHdvcm4gYnkgbGFkaWVzIG9mIHRoYXQgdGltZSwgZXhjZXB0IHRoYXQKCXRoZSBsYWRpZXMgd2VyZSBhY2N1c3RvbWVkIHRvIGhhdmUgYSBiaXQgb2YgdmVpbCBmbG9hdGluZwoJZnJvbSB0aGUgdG9wIG9mIGl0LgoJCQlbIFRoZSBPbmNlIGFuZCBGdXR1cmUgS2luZywgYnkgVC5ILiBXaGl0ZSBdCgoJCSJBIHdpemFyZCEiIERvb2xleSBleGNsYWltZWQsIGFzdG91bmRlZC4KCQkiQXQgeW91ciBzZXJ2aWNlLCBzaXJzLCIgc2FpZCB0aGUgd2l6YXJkLiAgIkhvdwoJcGVyY2VwdGl2ZSBvZiB5b3UgdG8gbm90aWNlLiAgSSBzdXBwb3NlIG15IGhhdCByYXRoZXIgZ2l2ZXMgbWUKCWF3YXkuICBTb21ldGhpbmcgb2YgYSBiZWFjb24sIEkgZG9uJ3QgZG91YnQuIiAgSGlzIGhhdCB3YXMKCXByZXR0eSBtdWNoIHRoYXQsIHRhbGwgYW5kIGNvbmUtc2hhcGVkIHdpdGggc3RhcnMgYW5kIGNyZXNjZW50Cgltb29ucyBhbGwgb3ZlciBpdC4gIEFsbCBpbiBhbGwsIGl0IGNvdWxkbid0IGhhdmUgYmVlbiBtb3JlCgl3aXphcmRpc2guCgkJCVsgVGhlIEVsZmluIFNoaXAsIEphbWVzIFAuIEJsYXlsb2NrIF0KCUEgbXl0aGljYWwgZmVhdGhlcmVkIHNlcnBlbnQuICBUaGUgY291YXRsIGFyZSB2ZXJ5IHJhcmUuCglUaGlzIGNhcm5pdm9yZSBpcyBrbm93biBmb3IgaXRzIHZvcmFjaW91cyBhcHBldGl0ZSBhbmQKCWluZmxhdGVkIHZpZXcgb2YgaXRzIG93biBpbnRlbGxpZ2VuY2UuCglJZiB5b3Ugd2FudCB0byBrbm93IHdoYXQgY3JhbSBpcywgSSBjYW4gb25seSBzYXkgdGhhdCBJIGRvbid0Cglrbm93IHRoZSByZWNpcGU7IGJ1dCBpdCBpcyBiaXNjdWl0aXNoLCBrZWVwcyBnb29kIGluZGVmaW5pdGVseSwKCWlzIHN1cHBvc2VkIHRvIGJlIHN1c3RhaW5pbmcsIGFuZCBpcyBjZXJ0YWlubHkgbm90IGVudGVydGFpbmluZywKCWJlaW5nIGluIGZhY3QgdmVyeSB1bmludGVyZXN0aW5nIGV4Y2VwdCBhcyBhIGNoZXdpbmcKCWV4ZXJjaXNlLiAgSXQgd2FzIG1hZGUgYnkgdGhlIExha2UtbWVuIGZvciBsb25nIGpvdXJuZXlzLgoJCVsgVGhlIEhvYmJpdCwgYnkgSi5SLlIuIFRvbGtpZW4gXQoJCUdyZWdvciBzdGFyZWQgYXQgdGhlIHBhc3RyeSB0cmF5LCBhbmQgc2lnaGVkLiAgIkkgc3VwcG9zZQoJaXQgd291bGQgZGlzdHVyYiB0aGUgZ3VhcmRzIGlmIEkgdHJpZWQgdG8gc2hvdmUgYSBjcmVhbSB0b3J0ZSB1cAoJeW91ciBub3NlLiIKCQkiRGVlcGx5LiAgWW91IHNob3VsZCBoYXZlIGRvbmUgaXQgd2hlbiB3ZSB3ZXJlIGVpZ2h0IGFuZAoJdHdlbHZlLCB5b3UgY291bGQgaGF2ZSBnb3R0ZW4gYXdheSB3aXRoIGl0IHRoZW4uICBUaGUgY3JlYW0gcGllCglvZiBqdXN0aWNlIGZsaWVzIG9uZSB3YXksIiBNaWxlcyBzbmlja2VyZWQuCgkJWyBUaGUgVm9yIEdhbWUsIGJ5IExvaXMgTWNNYXN0ZXIgQnVqb2xkIF0KCUEgYmlnIGFuaW1hbCB3aXRoIHRoZSBhcHBlYXJhbmNlIG9mIGEgbGl6YXJkLCBjb25zdGl0dXRpbmcKCWFuIG9yZGVyIG9mIHRoZSByZXB0aWxlcyAoX0xvcmljYXRhXyBvciBfQ3JvY29keWxpYV8pLCB0aGUKCWNyb2NvZGlsZSBpcyBhIGxhcmdlLCBkYW5nZXJvdXMgcHJlZGF0b3IgbmF0aXZlIHRvIHRyb3BpY2FsCglhbmQgc3VidHJvcGljYWwgY2xpbWVzLiAgSXQgc3BlbmRzIG1vc3Qgb2YgaXRzIHRpbWUgaW4gbGFyZ2UKCWJvZGllcyBvZiB3YXRlci4KCQlbXQoKCUhvdyBkb3RoIHRoZSBsaXR0bGUgY3JvY29kaWxlCgkgICAgSW1wcm92ZSBoaXMgc2hpbmluZyB0YWlsLAoJQW5kIHBvdXIgdGhlIHdhdGVycyBvZiB0aGUgTmlsZQoJICAgIE9uIGV2ZXJ5IGdvbGRlbiBzY2FsZSEKCglIb3cgY2hlZXJmdWxseSBoZSBzZWVtcyB0byBncmluCgkgICAgSG93IG5lYXRseSBzcHJlYWRzIGhpcyBjbGF3cywKCUFuZCB3ZWxjb21lcyBsaXR0bGUgZmlzaGVzIGluLAoJICAgIFdpdGggZ2VudGx5IHNtaWxpbmcgamF3cyEKCQlbIEhvdyBEb3RoIFRoZSBMaXR0bGUgQ3JvY29kaWxlLCBieSBMZXdpcyBDYXJyb2xsIF0KCUNyb2VzdXMgKGluIEdyZWVrOiBLcm9pc29zKSwgdGhlIHdlYWx0aHkgbGFzdCBraW5nIG9mIEx5ZGlhOwoJaGlzIGVtcGlyZSB3YXMgZGVzdHJveWVkIHdoZW4gaGUgYXR0YWNrZWQgQ3lydXMgaW4gNTQ5LCBhZnRlcgoJdGhlIE9yYWNsZSBvZiBEZWxwaGkgKHEudi4pIGhhZCB0b2xkIGhpbTogICJpZiB5b3UgYXR0YWNrIHRoZQoJUGVyc2lhbnMsIHlvdSB3aWxsIGRlc3Ryb3kgYSBtaWdodHkgZW1waXJlIi4gIEhlcm9kb3R1cwoJcmVsYXRlcyBvZiBoaXMgbGVnZW5kYXJ5IGNvbnZlcnNhdGlvbiB3aXRoIFNvbG9uIG9mIEF0aGVucywKCXdobyBpbXByZXNzZWQgdXBvbiBoaW0gdGhhdCBiZWluZyByaWNoIGRvZXMgbm90IGltcGx5IGJlaW5nCgloYXBweSBhbmQgdGhhdCBubyBvbmUgc2hvdWxkIGJlIGNvbnNpZGVyZWQgZm9ydHVuYXRlIGJlZm9yZQoJaGlzIGRlYXRoLgoJV2FyaWx5IENvbmFuIHNjYW5uZWQgaGlzIHN1cnJvdW5kaW5ncywgYWxsIG9mIGhpcyBzZW5zZXMgYWxlcnQKCWZvciBzaWducyBvZiBwb3NzaWJsZSBkYW5nZXIuICBPZmYgaW4gdGhlIGRpc3RhbmNlLCBoZSBjb3VsZAoJc2VlIHRoZSBmYW1pbGlhciBzaGFwZXMgb2YgdGhlIENhbXAgb2YgdGhlIER1YWxpIHRyaWJlLgoJU3VkZGVubHksIHRoZSBoYWlycyBvbiBoaXMgbmVjayBzdGFuZCBvbiBlbmQgYXMgaGUgZGV0ZWN0cyB0aGUKCWF1cmEgb2YgZXZpbCBtYWdpYyBpbiB0aGUgYWlyLiAgV2l0aG91dCB0aG91Z2h0LCBoZSByZWFkaWVzCgloaXMgd2VhcG9uLCBhbmQgbXV0dGVycyB1bmRlciBoaXMgYnJlYXRoOgoJIkJ5IENyb20sIHRoZXJlIHdpbGwgYmUgYmxvb2Qgc3BpbHQgdG9kYXkuIgoJICAgIFsgQ29uYW4gdGhlIEF2ZW5nZXIgYnkgUm9iZXJ0IEUuIEhvd2FyZCwgQmpvcm4gTnliZXJnLAoJCWFuZCBMLiBTcHJhZ3VlIGRlIENhbXAgXQoJIkdvZCBzYXZlIHRoZWUsIGFuY2llbnQgTWFyaW5lciEKCUZyb20gdGhlIGZpZW5kcywgdGhhdCBwbGFndWUgdGhlZSB0aHVzISAtCglXaHkgbG9vaydzdCB0aG91IHNvPyIgLSBXaXRoIG15IGNyb3NzLWJvdwoJSSBzaG90IHRoZSBBbGJhdHJvc3MuCgkgIFsgVGhlIFJpbWUgb2YgdGhlIEFuY2llbnQgTWFyaW5lciwgYnkgU2FtdWVsIFRheWxvciBDb2xlcmlkZ2UgXQoJWW91IGxvb2sgaW50byBvbmUgb2YgdGhlc2UgYW5kIHNlZSBfdmFwb3VycyBzd2lybGluZyBsaWtlCgljbG91ZHNfLiAgVGhlc2Ugc2hvcnRseSBjbGVhciBhd2F5IHRvIHNob3cgYSBzb3J0IG9mIHZpZGVvCgl3aXRob3V0IHNvdW5kIG9mIHNvbWV0aGluZyB0aGF0IGlzIGdvaW5nIHRvIGhhcHBlbiB0byB5b3UKCXNvb24uICBJdCBpcyBzZWxkb20gZ29vZCBuZXdzLgoJICBbIFRoZSBUb3VnaCBHdWlkZSB0byBGYW50YXN5bGFuZCwgYnkgRGlhbmEgV3lubmUgSm9uZXMgXQoJQ3Vyc2VzIGFyZSBsb25nc3RhbmRpbmcgaWxsLXdpc2hpbmdzIHdoaWNoLCBpbiBGYW50YXN5bGFuZCwKCW9mdGVuIG1hbmlmZXN0IGFzIHNlbWlzZW50aWVudC4gIFRoZXkgaGF2ZSB0byBiZSBicm9rZW4gb3IKCWRpc3BlbGxlZC4gIFRoZSBtZXRob2QgdmFyaWVzIGFjY29yZGluZyB0byB0aGUgdHlwZSBhbmQKCW9yaWdpbiBvZiB0aGUgQ3Vyc2U6CglbLi4uXQoJNC4gIEN1cnNlcyBvbiBSaW5ncyBhbmQgU3dvcmRzLiAgWW91IGhhdmUgcHJvYmxlbXMuICBSaW5ncwoJaGF2ZSB0byBiZSByZXR1cm5lZCB3aGVuY2UgdGhleSBjYW1lLCBwcmVmZXJhYmx5IGF0IG92ZXIgYQoJdGhvdXNhbmQgZGVncmVlcyBGYWhyZW5oZWl0LCBhbmQgdGhlIEN1cnNlIG1lYW5zIHlvdSB3b24ndAoJd2FudCB0byBkbyB0aGlzLiAgU3dvcmRzIHVzdWFsbHkgcmVzaXN0IGFsbCBhdHRlbXB0cyB0bwoJcmFpc2UgdGhlaXIgQ3Vyc2VzLiAgWW91ciBiZXN0IHNvdXJjZSBpcyB0byBoaWRlIHRoZSBTd29yZAoJb3IgZ2l2ZSBpdCB0byBzb21lb25lIHlvdSBkaXNsaWtlLgoJICBbIFRoZSBUb3VnaCBHdWlkZSB0byBGYW50YXN5bGFuZCwgYnkgRGlhbmEgV3lubmUgSm9uZXMgXQoJQSBwYWNrIG9mIHNub3ctd2hpdGUsIHJlZC1lYXJlZCBzcGVjdHJhbCBob3VuZHMgd2hpY2gKCXNvbWV0aW1lcyB0b29rIHBhcnQgaW4gdGhlIGtpZG5hcHBpbmdzIGFuZCByYWlkcyB0aGUKCWluaGFiaXRhbnRzIG9mIHRoZSB1bmRlcndvcmxkIHNvbWV0aW1lcyBtYWtlIG9uIHRoaXMgd29ybGQKCSh0aGUgV2lsZCBIdW50KS4gIFRoZXkgYXJlIGFzc29jaWF0ZWQgaW4gV2FsZXMgd2l0aCB0aGUgc291bmRzCglvZiBtaWdyYXRpbmcgd2lsZCBnZWVzZSwgYW5kIGFyZSBzYWlkIHRvIGJlIGxlYWRpbmcgdGhlIHNvdWxzCglvZiB0aGUgZGFtbmVkIHRvIGhlbGwuICBUaGUgcGhhbnRvbSBjaGFzZSBpcyB1c3VhbGx5IGhlYXJkIG9yCglzZWVuIGluIG1pZHdpbnRlciBhbmQgaXMgYWNjb21wYW5pZWQgYnkgYSBob3dsaW5nIHdpbmQuCgkJWyBFbmN5Y2xvcGVkaWEgTXl0aGljYSwgZWQuIE0uRi4gTGluZGVtYW5zIF0KCUFuZCBhZnRlciBoZSBoYWQgbWlsa2VkIGhpcyBjYXR0bGUgc3dpZnRseSwKCWhlIGFnYWluIHRvb2sgaG9sZCBvZiB0d28gb2YgbXkgbWVuCglhbmQgaGFkIHRoZW0gYXMgaGlzIHN1cHBlci4KCVRoZW4gSSB3ZW50LCB3aXRoIGEgdHViIG9mIHJlZCB3aW5lLAoJdG8gc3RhbmQgYmVmb3JlIHRoZSBDeWNsb3BzLCBzYXlpbmc6CgkiQSBkcm9wIG9mIHdpbmUgYWZ0ZXIgYWxsIHRoaXMgaHVtYW4gbWVhdCwKCXNvIHlvdSBjYW4gdGFzdGUgdGhlIGRlbGljaW91cyB3aW5lCgl0aGF0IGlzIHN0b3JlZCBpbiBvdXIgc2hpcCwgQ3ljbG9wcy4iCglIZSB0b29rIHRoZSB0dWIgYW5kIGVtcHRpZWQgaXQuCglIZSBhcHByZWNpYXRlZCB0aGUgcHJpY2VsZXNzIHdpbmUgdGhhdCBtdWNoCgl0aGF0IGhlIHByb21wdGx5IGFza2VkIG1lIGZvciBhIHNlY29uZCB0dWIuCgkiR2l2ZSBpdCIsIGhlIHNhaWQsICJhbmQgZ2l2ZSBtZSB5b3VyIG5hbWUgYXMgd2VsbCIuCgkJCS4uLgoJVGhyaWNlIEkgZmlsbGVkIHRoZSB0dWIsCglhbmQgYWZ0ZXIgdGhlIHdpbmUgaGFkIGNsb3VkZWQgaGlzIG1pbmQsCglJIHNhaWQgdG8gaGltLCBpbiBhIHRvbmUgYXMgc3dlZXQgYXMgaG9uZXk6CgkiWW91IGhhdmUgYXNrZWQgbXkgbmFtZSwgQ3ljbG9wcz8gIFdlbGwsCglteSBuYW1lIGlzIHZlcnkgd2VsbCBrbm93bi4gIEknbGwgZ2l2ZSBpdCB0byB5b3UsCglpZiB5b3UgZ2l2ZSBtZSB0aGUgZ2lmdCB5b3UgcHJvbWlzZWQgbWUgYXMgYSBndWVzdC4KCU15IG5hbWUgaXMgTm9ib2R5LiAgQWxsIGNhbGwgbWUgdGh1czoKCW15IGZhdGhlciBhbmQgbXkgbW90aGVyIGFuZCBteSBmcmllbmRzLiIKCVJ1dGhsZXNzbHkgaGUgYW5zd2VyZWQgdG8gdGhpczoKCSJOb2JvZHksIEkgd2lsbCBlYXQgeW91IGxhc3Qgb2YgYWxsOwoJeW91ciBob3N0IG9mIGZyaWVuZHMgd2lsbCBjb21wbGV0ZWx5IHByZWNlZGUgeW91LgoJVGhhdCB3aWxsIGJlIG15IHByZXNlbnQgdG8geW91LCBteSBmcmllbmQuIgoJQW5kIGFmdGVyIHRoZXNlIHdvcmRzIGhlIGZlbGwgZG93biBiYWNrd2FyZHMsCglyZXN0cmFpbmVkIGJ5IHRoZSBhbGwtcmVzdHJhaW5lciBIdXBub3MuCglIaXMgbW9uc3Ryb3VzIG5lY2sgc2xpZCBpbnRvIHRoZSBkdXN0OwoJdGhlIHJlZCB3aW5lIHNxdWlydGVkIGZyb20gaGlzIHRocm9hdDsKCXRoZSBkcnVuayB2b21pdGVkIGx1bXBzIG9mIGh1bWFuIGZsZXNoLgoJCVsgVGhlIE9keXNzZXksIChjaGFwdGVyIEVwc2lsb24pLCBieSBIb21lciBdCglJcyB0aGlzIGEgZGFnZ2VyIHdoaWNoIEkgc2VlIGJlZm9yZSBtZSwKCVRoZSBoYW5kbGUgdG93YXJkIG15IGhhbmQ/IENvbWUsIGxldCBtZSBjbHV0Y2ggdGhlZS4KCUkgaGF2ZSB0aGVlIG5vdCwgYW5kIHlldCBJIHNlZSB0aGVlIHN0aWxsLgoJQXJ0IHRob3Ugbm90LCBmYXRhbCB2aXNpb24sIHNlbnNpYmxlCglUbyBmZWVsaW5nIGFzIHRvIHNpZ2h0PyBvciBhcnQgdGhvdSBidXQKCUEgZGFnZ2VyIG9mIHRoZSBtaW5kLCBhIGZhbHNlIGNyZWF0aW9uLAoJUHJvY2VlZGluZyBmcm9tIHRoZSBoZWF0LW9wcHJlc3NlZCBicmFpbj8KCUkgc2VlIHRoZWUgeWV0LCBpbiBmb3JtIGFzIHBhbHBhYmxlCglBcyB0aGlzIHdoaWNoIG5vdyBJIGRyYXcuCgkJWyBNYWNiZXRoLCBieSBXaWxsaWFtIFNoYWtlc3BlYXJlIF0KCS4uLiBCdXQgaGUgcnVsZWQgcmF0aGVyIGJ5IGZvcmNlIGFuZCBmZWFyLCBpZiB0aGV5IG1pZ2h0CglhdmFpbDsgYW5kIHRob3NlIHdobyBwZXJjZWl2ZWQgaGlzIHNoYWRvdyBzcHJlYWRpbmcgb3ZlciB0aGUKCXdvcmxkIGNhbGxlZCBoaW0gdGhlIERhcmsgTG9yZCBhbmQgbmFtZWQgaGltIHRoZSBFbmVteTsgYW5kCgloZSBnYXRoZXJlZCBhZ2FpbiB1bmRlciBoaXMgZ292ZXJubWVudCBhbGwgdGhlIGV2aWwgdGhpbmdzIG9mCgl0aGUgZGF5cyBvZiBNb3Jnb3RoIHRoYXQgcmVtYWluZWQgb24gZWFydGggb3IgYmVuZWF0aCBpdCwKCWFuZCB0aGUgT3JjcyB3ZXJlIGF0IGhpcyBjb21tYW5kIGFuZCBtdWx0aXBsaWVkIGxpa2UgZmxpZXMuCglUaHVzIHRoZSBCbGFjayBZZWFycyBiZWdhbiAuLi4KCQlbIFRoZSBTaWxtYXJpbGxpb24sIGJ5IEouUi5SLiBUb2xraWVuIF0KCURhcnRzIGFyZSBtaXNzaWxlIHdlYXBvbnMsIGRlc2lnbmVkIHRvIGZseSBzdWNoIHRoYXQgYSBzaGFycCwKCW9mdGVuIHdlaWdodGVkIHBvaW50IHdpbGwgc3RyaWtlIGZpcnN0LiAgVGhleSBjYW4gYmUKCWRpc3Rpbmd1aXNoZWQgZnJvbSBqYXZlbGlucyBieSBmbGV0Y2hpbmcgKGkuZS4sIGZlYXRoZXJzIG9uCgl0aGUgdGFpbCkgYW5kIGEgc2hhZnQgdGhhdCBpcyBzaG9ydGVyIGFuZC9vciBtb3JlIGZsZXhpYmxlLAoJYW5kIGZyb20gYXJyb3dzIGJ5IHRoZSBmYWN0IHRoYXQgdGhleSBhcmUgbm90IG9mIHRoZSByaWdodAoJbGVuZ3RoIHRvIHVzZSB3aXRoIGEgbm9ybWFsIGJvdy4KCQlbIFdpa2lwZWRpYSwgdGhlIGZyZWUgZW5jeWNsb3BlZGlhIF0KCglBZ2FpbnN0IG15IGZvZSBJIGh1cmxlZCBhIG11cmRlcm91cyBkYXJ0LgoJSGUgY2F1Z2h0IGl0IGluIGhpcyBoYW5kIC0tIEkgaGVhcmQgaGltIGxhdWdoIC0tCglJIHNhdyB0aGUgdGhpbmcgdGhhdCBzaG91bGQgaGF2ZSBwaWVyY2VkIGhpcyBoZWFydAoJVHVybiB0byBhIGdvbGRlbiBzdGFmZi4KCQlbIEdpZnRzLCBieSBNYXJ5IENvbGVyaWRnZSBdCglBIHRlcnJpYmxlIGRlaXR5LCB3aG9zZSB2ZXJ5IG5hbWUgd2FzIGNhcGFibGUgb2YgcHJvZHVjaW5nIHRoZQoJbW9zdCBob3JyaWJsZSBlZmZlY3RzLiAgSGUgaXMgZmlyc3QgbWVudGlvbmVkIGJ5IHRoZSA0dGgtY2VudHVyeQoJQ2hyaXN0aWFuIHdyaXRlciwgTGFjdGFudGl1cywgd2hvIGluIGRvaW5nIHNvIGJyb2tlIHdpdGggdGhlCglzdXBlcnN0aXRpb24gdGhhdCB0aGUgdmVyeSByZWZlcmVuY2UgdG8gRGVtb2dvcmdvbiBieSBuYW1lCglicm91Z2h0IGRlYXRoIGFuZCBkaXNhc3Rlci4KCQlbIEJyZXdlcidzIENvbmNpc2UgRGljdGlvbmFyeSBvZiBQaHJhc2UgYW5kIEZhYmxlIF0KCglEZW1vZ29yZ29uLCB0aGUgcHJpbmNlIG9mIGRlbW9ucywgd2FsbG93cyBpbiBmaWx0aCBhbmQgY2FuCglzcHJlYWQgYSBxdWlja2x5IGZhdGFsIGlsbG5lc3MgdG8gaGlzIHZpY3RpbXMgd2hpbGUgcmVuZGluZwoJdGhlbS4gIEhlIGlzIGEgbWlnaHR5IHNwZWxsY2FzdGVyLCBhbmQgaGUgY2FuIGRyYWluIHRoZSBsaWZlCglvZiBtb3J0YWxzIHdpdGggYSB0b3VjaCBvZiBoaXMgdGFpbC4KCUl0IGlzIG9mdGVuIHZlcnkgaGFyZCB0byBkaXNjb3ZlciB3aGF0IGFueSBnaXZlbiBEZW1vbiBsb29rcwoJbGlrZSwgYXBhcnQgZnJvbSBhIGdlbmVyYWwgaW1wcmVzc2lvbiBvZiBsYXJnZSBzaXplLCBodWdlCglmYW5ncywgc3RhcmluZyBleWVzLCBtYW55IGxpbWJzLCBhbmQgYW4gb2RkIGNvbG9yOyBidXQgYWxsCglhY2NvdW50cyBhZ3JlZSB0aGF0IERlbW9ucyBhcmUgdmVyeSBwb3dlcmZ1bCwgdmVyeSBNYWdpYyAoaW4KCWEgbm9uaHVtYW4gbWFubmVyKSwgYW5kIG1hZGUgb2Ygc29tZSBzdWJzdGFuY2UgdGhhdCBjYW4gc3F1ZWV6ZQoJdGhyb3VnaCBhIGtleWhvbGUgeWV0IG5vdCBiZSBwaWVyY2VkIHdpdGggYSBTd29yZC4gIFRoaXMgbWFrZXMKCXRoZW0gZGlmZmljdWx0IHRvIGRlYWwgd2l0aCwgZXZlbiBvbiB0aGUgcmFyZSBvY2Nhc2lvbnMgd2hlbgoJdGhleSBhcmUgZnJpZW5kbHkuCgkgIFsgVGhlIFRvdWdoIEd1aWRlIHRvIEZhbnRhc3lsYW5kLCBieSBEaWFuYSBXeW5uZSBKb25lcyBdCglUaGUgaGFyZGVzdCBrbm93biBtaW5lcmFsICh3aXRoIGEgaGFyZG5lc3Mgb2YgMTAgb24gTW9ocycgc2NhbGUpLgoJSXQgaXMgYW4gYWxsb3Ryb3BpYyBmb3JtIG9mIHB1cmUgY2FyYm9uIHRoYXQgaGFzIGNyeXN0YWxsaXplZCBpbgoJdGhlIGN1YmljIHN5c3RlbSwgdXN1YWxseSBhcyBvY3RhaGVkcmEgb3IgY3ViZXMsIHVuZGVyIGdyZWF0CglwcmVzc3VyZS4KCQlbIEEgQ29uY2lzZSBEaWN0aW9uYXJ5IG9mIFBoeXNpY3MgXQoKCVRoZSBkaWFtb25kLCBfYWRhbWFzXyBvciBfZHlhbWFzXywgaXMgYSB0cmFuc3BhcmVudCBzdG9uZSwgbGlrZQoJY3J5c3RhbCwgYnV0IGhhdmluZyB0aGUgY29sb3VyIG9mIHBvbGlzaGVkIGlyb24sIGJ1dCBpdCBjYW5ub3QKCWJlIGRlc3Ryb3llZCBieSBpcm9uLCBmaXJlIG9yIGFueSBvdGhlciBtZWFucywgdW5sZXNzIGl0IGlzCglwbGFjZWQgaW4gdGhlIGhvdCBibG9vZCBvZiBhIGdvYXQ7IHdpdGggc2hhcnAgcGllY2VzIG9mIGRpYW1vbmQKCW90aGVyIHN0b25lcyBhcmUgZW5ncmF2ZWQgYW5kIHBvbGlzaGVkLiAgSXQgaXMgbm8gZ3JlYXRlciB0aGFuCglhIHNtYWxsIG51dC4gIFRoZXJlIGFyZSBzaXgga2luZHMsIGhvd2V2ZXIgQWRhbWFudCBhdHRyYWN0cwoJbWV0YWw7IGl0IGV4cGVscyB2ZW5vbTsgaXQgcHJvZHVjZXMgYW1iZXIgKGFuZCBpcyBlZmZpY2FjaW91cwoJYWdhaW5zdCBlbXB0eSBmZWFycyBhbmQgZm9yIHRob3NlIHJlc2lzdGluZyBzcGVsbHMpLiAgSXQgaXMKCWZvdW5kIGluIEluZGlhLCBpbiBHcmVlY2UgYW5kIGluIEN5cHJ1cywgd2hlcmUgbWFnaWNpYW5zIG1ha2UKCXVzZSBvZiBpdC4gIEl0IGdpdmVzIHlvdSBjb3VyYWdlOyBpdCBhdmVydHMgYXBwYXJpdGlvbnM7IGl0CglyZW1vdmVzIGFuZ2VyIGFuZCBxdWFycmVsczsgaXQgaGVhbHMgdGhlIG1hZDsgaXQgZGVmZW5kcyB5b3UKCWZyb20geW91ciBlbmVtaWVzLiAgSXQgc2hvdWxkIGJlIHNldCBpbiBnb2xkIG9yIHNpbHZlciBhbmQgd29ybgoJb24gdGhlIGxlZnQgYXJtLiAgSXQgaXMgbGlrZXdpc2UgZm91bmQgaW4gQXJhYmlhLgoJIAlbIFRoZSBBYmVyZGVlbiBCZXN0aWFyeSwgdHJhbnNsYXRlZCBieSBDb2xpbiBNY0xhcmVuIF0KCVRoZSBtb3N0IGZhbW91cyBhbmQgdGhlIGZpcnN0IHRvIGJlIG5hbWVkIG9mIHRoZSBpbWFnaW5hcnkKCSJtaW5lcmFscyIgb2YgU3RhciBUcmVrIGlzIGRpbGl0aGl1bS4gLi4uIEJlY2F1c2Ugb2YgdGhpcwoJbWluZXJhbCdzIGNlbnRyYWwgcm9sZSBpbiB0aGUgc3RvcnlsaW5lLCBhIHdob2xlIG15dGhvbG9neQoJc3Vycm91bmRzIGl0LiAgSXQgaXMsIGhvd2V2ZXIsIGEgbmF0dXJhbGx5IG9jY3VycmluZyBzdWJzdGFuY2UKCXdpdGhpbiB0aGUgbXl0aG9sb2d5LCBhcyB0aGVyZSBhcmUgdmFyaW91cyBlcGlzb2RlcyB0aGF0CgltYWtlIHJlZmVyZW5jZSB0byB0aGUgbWluaW5nIG9mIGRpbGl0aGl1bSBkZXBvc2l0cy4gLi4uCglUaGlzIG5hbWUgaXRzZWxmIGlzIGltYWdpbmFyeSBhbmQgZ2l2ZXMgbm8gcmVhbCBpbmZvcm1hdGlvbiBvbgoJdGhlIHN0cnVjdHVyZSBvciBtYWtlLXVwIG9mIHRoaXMgc3Vic3RhbmNlIG90aGVyIHRoYW4gdGhhdCB0aGlzCgl2ZXJzaW9uIG9mIHRoZSBuYW1lIGltcGxpZXMgYSBsaXRoaXVtIGFuZCBpcm9uLWJlYXJpbmcKCWFsdW1pbm9zaWxpY2F0ZSBvZiBzb21lIHNvcnQuICBUaGF0IHNhaWQsIHRoZSByZWFsIG1pbmVyYWwgdGhhdAoJbW9zdCBjbG9zZWx5IG1hdGNoZXMgdGhlIGRlc2NyaXB0aXZlIGVsZW1lbnRzIG9mIHRoaXMgbmFtZSBpcwoJZmVycm9ob2xtcXVpc3RpdGUgd2hpY2ggaXMgYSBkaWxpdGhpdW0gdHJpZmVycm9kaWFsbG9zaWxpY2F0ZS4KCUlmIG9uZSBnb2VzIG9uIHRoZSBwcmVtaXNlIHRoYXQgbmF0dXJlIGZvbGxvd3MgY2VydGFpbiBnZW5lcmFsCglub3JtcywgdGhlbiBvbmUgY291bGQgZXh0cmFwb2xhdGUgdGhhdCBkaWxpdGhpdW0gbWlnaHQgaGF2ZSBhCglzaW1pbGFyIG51bWJlciBvZiBzaWxpY29uIGF0b21zIGluIGl0cyBzdHJ1Y3R1cmUuCglLZWVwaW5nIHNldmVuIChpLmUuIGhlcHRvKSBmZXJyb3VzIGlyb25zIGFuZCBiYWxhbmNpbmcgdGhlCglveHlnZW5zIHdvdWxkIGdpdmUgYSB0aGVvcmV0aWNhbCBmb3JtdWxhIG9mIExpMkZlN0FsMlNpOE8yNy4KCUEgbWluZXJhbCB3aXRoIHRoaXMgY29tcG9zaXRpb24gY291bGQgdGhlb3JldGljYWxseSBleGlzdCwKCWFsdGhvdWdoIGl0IGlzIGRvdWJ0ZnVsIHRoYXQgaXQgd291bGQgcG9zc2VzcyB0aGUgbW9yZSBmYW50YXN0aWMKCXByb3BlcnRpZXMgYXNjcmliZWQgdG8gZGlsaXRoaXVtLgoJCVsgVGhlIE1pbmVyYWxvZ3kgb2YgU3RhciBUcmVrLCBieSBKZWZmcmV5IGRlIEZvdXJlc3RpZXIgXQoJQSB3b2xmbGlrZSB3aWxkIGRvZywgQ2FuaXMgZGluZ28sIG9mIEF1c3RyYWxpYSwgaGF2aW5nIGEKCXJlZGRpc2gtIG9yIHllbGxvd2lzaC1icm93biBjb2F0LCBiZWxpZXZlZCB0byBoYXZlIGJlZW4KCWludHJvZHVjZWQgYnkgdGhlIGFib3JpZ2luZXMuCgkJWyBXZWJzdGVyJ3MgRW5jeWNsb3BlZGljIFVuYWJyaWRnZWQgRGljdGlvbmFyeQoJCSAgICBvZiB0aGUgRW5nbGlzaCBMYW5ndWFnZSBdCglBc2sgbm90LCB3aGF0IHlvdXIgbWFnaWMgY2FuIGRvIHRvIGl0LiAgQXNrIHdoYXQgaXQgY2FuIGRvCgl0byB5b3VyIG1hZ2ljLgoJVGhlIFJvbWFuIHJ1bGVyIG9mIHRoZSB1bmRlcndvcmxkIGFuZCBmb3J0dW5lLCBzaW1pbGFyIHRvIHRoZQoJR3JlZWsgSGFkZXMuICBFdmVyeSBodW5kcmVkIHllYXJzLCB0aGUgTHVkaSBUYXJlbnRpbmkgd2VyZQoJY2VsZWJyYXRlZCBpbiBoaXMgaG9ub3IuICBUaGUgR2F1bHMgcmVnYXJkZWQgRGlzIFBhdGVyIGFzCgl0aGVpciBhbmNlc3Rvci4gIFRoZSBuYW1lIGlzIGEgY29udHJhY3Rpb24gb2YgdGhlIExhdGluIERpdmVzLAoJInRoZSB3ZWFsdGh5IiwgRGl2ZXMgUGF0ZXIsICJ0aGUgd2VhbHRoeSBmYXRoZXIiLCBvciAiRmF0ZXIKCVdlYWx0aCIuICBJdCByZWZlcnMgdG8gdGhlIHdlYWx0aCBvZiBwcmVjaW91cyBzdG9uZSBiZWxvdyB0aGUKCWVhcnRoLgoJCVsgRW5jeWNsb3BlZGlhIE15dGhpY2EsIGVkLiBNLkYuIExpbmRlbWFucyBdCglUaGlzIHN0cmFuZ2UgY3JlYXR1cmUgYXBwZWFycyB0byBiZSBtdXRhbnQgZm9ybSBvZiBwdW1hIChha2EKCWNvdWdhciBvciBtb3VudGFpbiBsaW9uKSB3aGljaCBsaXZlcyBpbiB1bmRlcmdyb3VuZCBzZXR0aW5ncwoJcmF0aGVyIHRoYW4gb3V0ZG9vciB3aWxkZXJuZXNzLiAgSXQgaXMgY2FwYWJsZSBvZiBleGNoYW5naW5nCglwb3NpdGlvbnMgd2l0aCBwZW9wbGUgb3IgY3JlYXR1cmVzIGluIGl0cyBwYXRoIGFuZCBpcyBub3QKCWZvb2xlZCBieSBkaXNwbGFjZWQgaW1hZ2VzIG9mIG90aGVycy4KCVRoZSBkamlubiBhcmUgZ2VuaWVzIGZyb20gdGhlIGVsZW1lbnRhbCBwbGFuZSBvZiBBaXIuICBUaGVyZSwKCWFtb25nIHRoZWlyIGtpbmQsIHRoZXkgaGF2ZSB0aGVpciBvd24gc29jaWV0aWVzLiAgVGhleSBhcmUKCXNvbWV0aW1lcyBlbmNvdW50ZXJlZCBvbiBlYXJ0aCBhbmQgbWF5IGV2ZW4gYmUgc3VtbW9uZWQgaGVyZQoJdG8gcGVyZm9ybSBzb21lIHNlcnZpY2UgZm9yIHBvd2VyZnVsIHdpemFyZHMuICBUaGUgd2l6YXJkcwoJb2Z0ZW4gbGVhdmUgdGhlbSBhYm91dCBmb3IgbGF0ZXIgc2VydmljZSwgc2FmZWx5IHR1Y2tlZCBhd2F5CglpbiBhIGZsYXNrIG9yIGxhbXAuICBPbmNlIGluIGEgd2hpbGUsIHN1Y2ggYSB0b29sIGlzIGZvdW5kIGJ5CglhIGx1Y2t5IHJvZ3VlLCBhbmQgc29tZSBkamlubiBhcmUga25vd24gdG8gYmUgc28gZ3JhdGVmdWwKCXdoZW4gcmVsZWFzZWQgdGhhdCB0aGV5IG1pZ2h0IGdyYW50IHRoZWlyIHJlc2N1ZXIgYSB3aXNoLgoJQSBkb21lc3RpYyBhbmltYWwsIHRoZSBfdGFtZSBkb2dfIChfQ2FuaXMgZmFtaWxpYXJpc18pLCBvZgoJd2hpY2ggbnVtZXJvdXMgYnJlZWRzIGV4aXN0LiAgVGhlIG1hbGUgaXMgY2FsbGVkIGEgZG9nLAoJd2hpbGUgdGhlIGZlbWFsZSBpcyBjYWxsZWQgYSBiaXRjaC4gIEJlY2F1c2Ugb2YgaXRzIGtub3duCglsb3lhbHR5IHRvIG1hbiBhbmQgZ2VudGxlbmVzcyB3aXRoIGNoaWxkcmVuLCBpdCBpcyB0aGUKCXdvcmxkJ3MgbW9zdCBwb3B1bGFyIGRvbWVzdGljIGFuaW1hbC4gIEl0IGNhbiBlYXNpbHkgYmUKCXRyYWluZWQgdG8gcGVyZm9ybSB2YXJpb3VzIHRhc2tzLgoJVGhyb3VnaCBtZSB5b3UgcGFzcyBpbnRvIHRoZSBjaXR5IG9mIHdvZToKCVRocm91Z2ggbWUgeW91IHBhc3MgaW50byBldGVybmFsIHBhaW46CglUaHJvdWdoIG1lIGFtb25nIHRoZSBwZW9wbGUgbG9zdCBmb3IgYXllLgoJSnVzdGljZSB0aGUgZm91bmRlciBvZiBteSBmYWJyaWMgbW92J2Q6CglUbyByZWFyIG1lIHdhcyB0aGUgdGFzayBvZiBwb3dlciBkaXZpbmUsCglTdXByZW1lc3Qgd2lzZG9tLCBhbmQgcHJpbWV2YWwgbG92ZS4KCUJlZm9yZSBtZSB0aGluZ3MgY3JlYXRlIHdlcmUgbm9uZSwgc2F2ZSB0aGluZ3MKCUV0ZXJuYWwsIGFuZCBldGVybmFsIEkgZW5kdXJlLgoJQWxsIGhvcGUgYWJhbmRvbiB5ZSB3aG8gZW50ZXIgaGVyZS4KCQlbIFRoZSBJbmZlcm5vLCBmcm9tIFRoZSBEaXZpbmUgQ29tZWR5IG9mIERhbnRlCgkJCUFsaWdoaWVyaSwgdHJhbnNsYXRlZCBieSBILkYuIENhcnkgXQoJIlRoZW4gd2UgY2FuIG9ubHkgZ2l2ZSB0aGFua3MgdGhhdCB0aGlzIGlzIEFudGFyY3RpY2EsIHdoZXJlCgl0aGVyZSBpcyBub3Qgb25lLCBzaW5nbGUsIHNvbGl0YXJ5LCBsaXZpbmcgdGhpbmcgZm9yIGl0IHRvCglpbWl0YXRlLCBleGNlcHQgdGhlc2UgYW5pbWFscyBpbiBjYW1wLiIKCgkiVXMsIiBCbGFpciBnaWdnbGVkLiAiSXQgY2FuIGltaXRhdGUgdXMuIERvZ3MgY2FuJ3QgbWFrZSBmb3VyCglodW5kcmVkIG1pbGVzIHRvIHRoZSBzZWE7IHRoZXJlJ3Mgbm8gZm9vZC4gVGhlcmUgYXJlbid0IGFueQoJc2t1YSBndWxscyB0byBpbWl0YXRlIGF0IHRoaXMgc2Vhc29uLiBUaGVyZSBhcmVuJ3QgYW55CglwZW5ndWlucyB0aGlzIGZhciBpbmxhbmQuIFRoZXJlJ3Mgbm90aGluZyB0aGF0IGNhbiByZWFjaCB0aGUKCXNlYSBmcm9tIHRoaXMgcG9pbnQgLSBleGNlcHQgdXMuIFdlJ3ZlIGdvdCBicmFpbnMuIFdlIGNhbiBkbwoJaXQuIERvbid0IHlvdSBzZWUgLSBpdCdzIGdvdCB0byBpbWl0YXRlIHVzIC0gaXQncyBnb3QgdG8gYmUgb25lCglvZiB1cyAtIHRoYXQncyB0aGUgb25seSB3YXkgaXQgY2FuIGZseSBhbiBhaXJwbGFuZSAtIGZseSBhIHBsYW5lCglmb3IgdHdvIGhvdXJzLCBhbmQgcnVsZSAtIGJlIC0gYWxsIEVhcnRoJ3MgaW5oYWJpdGFudHMuIEEgd29ybGQKCWZvciB0aGUgdGFraW5nIC0gaWYgaXQgaW1pdGF0ZXMgdXMhCgkJWyBXaG8gR29lcyBUaGVyZT8sIGJ5IEpvaG4gVy4gQ2FtcGJlbGwgXQoKCVhhbmRlcjogTGV0IGdvISAgSSBoYXZlIHRvIGtpbGwgdGhlIGRlbW9uIGJvdCEKCVhhbmRlciBEb3VibGUgKGdyYWJiaW5nIHRoZSBndW4pOiBBbnlhLCBnZXQgb3V0IG9mIHRoZSB3YXkuCglCdWZmeTogWGFuZGVyIQoJWGFuZGVyIERvdWJsZTogVGhhdCdzIGFsbCByaWdodCwgQnVmZnkuICBJIGhhdmUgaGltLgoJWGFuZGVyOiBObywgQnVmZnksIEknbSBtZS4gIEhlbHAgbWUhCglBbnlhOiBNeSBndW4sIGhlJ3MgZ290IG15IGd1bi4KCVJpbGV5OiBZb3Ugb3duIGEgZ3VuPwoJQnVmZnk6IFhhbmRlciwgZ3VuIGhvbGRpbmcgWGFuZGVyLCBnaXZlIGl0IHRvIG1lLgoJQW55YTogQnVmZnksIHdoaWNoIG9uZSdzIHJlYWw/CglYYW5kZXI6IEkgYW0uCglYYW5kZXIgRG91YmxlOiBObywgX0lfIGFtLgoJICAgIFsgQnVmZnkgdGhlIFZhbXBpcmUgU2xheWVyLCBFcGlzb2RlIDUuMDMsICJUaGUgUmVwbGFjZW1lbnQiIF0KCUluIHRoZSBXZXN0IHRoZSBkcmFnb24gd2FzIHRoZSBuYXR1cmFsIGVuZW15IG9mIG1hbi4gIEFsdGhvdWdoCglwcmVmZXJyaW5nIHRvIGxpdmUgaW4gYmxlYWsgYW5kIGRlc29sYXRlIHJlZ2lvbnMsIHdoZW5ldmVyIGl0Cgl3YXMgc2VlbiBhbW9uZyBtZW4gaXQgbGVmdCBpbiBpdHMgd2FrZSBhIHRyYWlsIG9mIGRlc3RydWN0aW9uCglhbmQgZGlzZWFzZS4gIFlldCBhbnkgYXR0ZW1wdCB0byBzbGF5IHRoaXMgYmVhc3Qgd2FzIGEgcGVyaWxvdXMKCXVuZGVydGFraW5nLiAgRm9yIHRoZSBkcmFnb24ncyBhc3NhaWxhbnQgaGFkIHRvIGNvbnRlbmQKCW5vdCBvbmx5IHdpdGggY2xvdWRzIG9mIHN1bHBodXJvdXMgZnVtZXMgcG91cmluZyBmcm9tIGl0cyBmaXJlCglicmVhdGhpbmcgbm9zdHJpbHMsIGJ1dCBhbHNvIHdpdGggdGhlIHRocmFzaGluZ3Mgb2YgaXRzIHRhaWwsCgl0aGUgbW9zdCBkZWFkbHkgcGFydCBvZiBpdHMgc2VycGVudC1saWtlIGJvZHkuCgkgIFsgTXl0aGljYWwgQmVhc3RzIGJ5IERlaXJkcmUgSGVhZG9uIChUaGUgTGVwcmVjaGF1biBMaWJyYXJ5KSBdCgoJIk9uZSB3aG9tIHRoZSBkcmFnb25zIHdpbGwgc3BlYWsgd2l0aCwiIGhlIHNhaWQsICJ0aGF0IGlzIGEKCWRyYWdvbmxvcmQsIG9yIGF0IGxlYXN0IHRoYXQgaXMgdGhlIGNlbnRlciBvZiB0aGUgbWF0dGVyLiAgSXQncwoJbm90IGEgdHJpY2sgb2YgbWFzdGVyaW5nIHRoZSBkcmFnb25zLCBhcyBtb3N0IHBlb3BsZSB0aGluay4KCURyYWdvbnMgaGF2ZSBubyBtYXN0ZXJzLiAgVGhlIHF1ZXN0aW9uIGlzIGFsd2F5cyB0aGUgc2FtZSwgd2l0aAoJYSBkcmFnb246ICB3aWxsIGhlIHRhbGsgdG8geW91IG9yIHdpbGwgaGUgZWF0IHlvdT8gIElmIHlvdSBjYW4KCWNvdW50IHVwb24gaGlzIGRvaW5nIHRoZSBmb3JtZXIsIGFuZCBub3QgZG9pbmcgdGhlIGxhdHRlciwgd2h5Cgl0aGVuIHlvdSdyZSBhIGRyYWdvbmxvcmQuIgoJCVsgVGhlIFRvbWJzIG9mIEF0dWFuLCBieSBVcnN1bGEgSy4gTGUgR3VpbiBdCglTdGVwaGVuIGhhZCBhcmd1ZWQsIGFuZCB0aGUgZXhwZXJ0IGFybW9yZXIgaGFkIGdydWRnaW5nbHkKCWFkbWl0dGVkLCB0aGF0IGRyYWdvbnNjYWxlIHNoaWVsZCBvciBhcm1vciwgcHJvdmlkZWQgaXQgcHJvdmVkCglmZWFzaWJsZSB0byBtYWtlIGF0IGFsbCwgb3VnaHQgdG8gb2ZmZXIgc29tZSByZWFsLCBwcmFjdGljYWwKCWFkdmFudGFnZXMgb3ZlciBhbnkgbWV0YWwgYnJlYXN0cGxhdGUgb3Igc2hpZWxkIC0tIGdyYW0gZm9yCglncmFtIG9mIHdlaWdodCwgc3VjaCBhIGRlZmVuc2Ugd291bGQgcHJvYmFibHkgYmUgYSBsb3QKCXRvdWdoZXIgYW5kIG1vcmUgcHJvdGVjdGl2ZSB0aGFuIGFueSBodW1hbiBzbWl0aHMgY291bGQKCW1ha2Ugb2Ygc3RlZWwuCgkJWyBUaGUgTGFzdCBCb29rIG9mIFN3b3JkczogU2hpZWxkYnJlYWtlcidzIFN0b3J5LAoJCQlieSBGcmVkIFNhYmVyaGFnZW4gXQoJTWFueSB0cmF2ZWxlcnMgaGF2ZSBzZWVuIHRoZSBkcnVtcyBvZiB0aGUgZ3JlYXQgYXBlcywgYW5kCglzb21lIGhhdmUgaGVhcmQgdGhlIHNvdW5kcyBvZiB0aGVpciBiZWF0aW5nIGFuZCB0aGUgbm9pc2Ugb2YKCXRoZSB3aWxkLCB3ZWlyZCByZXZlbHJ5IG9mIHRoZXNlIGZpcnN0IGxvcmRzIG9mIHRoZSBqdW5nbGUsCglidXQgVGFyemFuLCBMb3JkIEdyZXlzdG9rZSwgaXMsIGRvdWJ0bGVzcywgdGhlIG9ubHkgaHVtYW4KCWJlaW5nIHdobyBldmVyIGpvaW5lZCBpbiB0aGUgZmllcmNlLCBtYWQsIGludG94aWNhdGluZyByZXZlbAoJb2YgdGhlIER1bS1EdW0uCgkJWyBUYXJ6YW4gb2YgdGhlIEFwZXMsIGJ5IEVkZ2FyIFJpY2UgQnVycm91Z2hzIF0KCUEgZHVuY2UgY2FwLCBhbHNvIHZhcmlvdXNseSBrbm93biBhcyBhIGR1bmNlIGhhdCwgZHVuY2UncwoJY2FwLCBvciBkdW5jZSdzIGhhdCwgaXMgYSB0YWxsIGNvbmljYWwgaGF0LiAgSW4gcG9wdWxhcgoJY3VsdHVyZSwgaXQgaXMgdHlwaWNhbGx5IG1hZGUgb2YgcGFwZXIgYW5kIG9mdGVuIG1hcmtlZCB3aXRoCglhIEQsIGFuZCBnaXZlbiB0byBzY2hvb2xjaGlsZHJlbiB0byB3ZWFyIGFzIHB1bmlzaG1lbnQgZm9yCgliZWluZyBzdHVwaWQgb3IgbGF6eS4gIFdoaWxlIHRoaXMgaXMgbm93IGEgcmFyZSBwcmFjdGljZSwKCWl0IGlzIGZyZXF1ZW50bHkgZGVwaWN0ZWQgaW4gcG9wdWxhciBjdWx0dXJlIHN1Y2ggYXMKCWNoaWxkcmVuJ3MgY2FydG9vbnMuCgkJWyBXaWtpcGVkaWEsIHRoZSBmcmVlIGVuY3ljbG9wZWRpYSBdCglBdCBvbmNlIGFzIGZhciBhcyBBbmdlbHMga2VubiBoZSB2aWV3cwoJVGhlIGRpc21hbCBTaXR1YXRpb24gd2FzdGUgYW5kIHdpbGRlLAoJQSBEdW5nZW9uIGhvcnJpYmxlLCBvbiBhbGwgc2lkZXMgcm91bmQKCUFzIG9uZSBncmVhdCBGdXJuYWNlIGZsYW0nZCwgeWV0IGZyb20gdGhvc2UgZmxhbWVzCglObyBsaWdodCwgYnV0IHJhdGhlciBkYXJrbmVzcyB2aXNpYmxlCglTZXJ2J2Qgb25seSB0byBkaXNjb3ZlciBzaWdodHMgb2Ygd29lLAoJUmVnaW9ucyBvZiBzb3Jyb3csIGRvbGVmdWwgc2hhZGVzLCB3aGVyZSBwZWFjZQoJQW5kIHJlc3QgY2FuIG5ldmVyIGR3ZWxsLCBob3BlIG5ldmVyIGNvbWVzCglUaGF0IGNvbWVzIHRvIGFsbDsgYnV0IHRvcnR1cmUgd2l0aG91dCBlbmQKCVN0aWxsIHVyZ2VzLCBhbmQgYSBmaWVyeSBEZWx1Z2UsIGZlZAoJV2l0aCBldmVyLWJ1cm5pbmcgU3VscGh1ciB1bmNvbnN1bSdkOgoJU3VjaCBwbGFjZSBFdGVybmFsIEp1c3RpY2UgaGFkIHByZXBhcidkCglGb3IgdGhvc2UgcmViZWxsaW91cywgaGVyZSB0aGVpciBQcmlzb24gb3JkYWluJ2QKCUluIHV0dGVyIGRhcmtuZXNzLCBhbmQgdGhlaXIgcG9ydGlvbiBzZXQKCUFzIGZhciByZW1vdidkIGZyb20gR29kIGFuZCBsaWdodCBvZiBIZWF2J24KCUFzIGZyb20gdGhlIENlbnRlciB0aHJpY2UgdG8gdGgnIHV0bW9zdCBQb2xlLgoJCVsgUGFyYWRpc2UgTG9zdCwgYnkgSm9obiBNaWx0b24gXQoJRHdhcmZzIGhhdmUgZmFjZXMgbGlrZSBtZW4gKHVnbHkgbWVuLCB3aXRoIHdyaW5rbGVkLCBsZWF0aGVyeQoJc2tpbnMpLCBidXQgYXJlIGdlbmVyYWxseSBlaXRoZXIgZmxhdC1mb290ZWQsIGR1Y2stZm9vdGVkLCBvcgoJaGF2ZSBmZWV0IHBvaW50aW5nIGJhY2t3YXJkcy4gIFRoZXkgYXJlIG9mIHRoZSBlYXJ0aCwgZWFydGh5LAoJbGl2aW5nIGluIHRoZSBkYXJrZXN0IG9mIGNhdmVybnMgYW5kIHZlbnR1cmluZyBmb3J0aCBvbmx5Cgl3aXRoIHRoZSBjbG9ha3MgYnkgd2hpY2ggdGhleSBjYW4gbWFrZSB0aGVtc2VsdmVzIGludmlzaWJsZSwKCWFuZCBvdGhlcnMgZGlzZ3Vpc2VkIGFzIHRvYWRzLiAgTWluZXJzIG9mdGVuIGNvbWUgYWNyb3NzIHRoZW0sCglhbmQgc29tZXRpbWVzIGVzdGFibGlzaCByZWFzb25hYmx5IGNsb3NlIHJlbGF0aW9ucyB3aXRoIHRoZW0uCgkuLi4gVGhlIG1pbmVycyBvZiBDb3Jud2FsbCB3ZXJlIGFsd2F5cyBkZWxpZ2h0ZWQgdG8gaGVhciBhCglidWNjYSBidXNpbHkgbWluaW5nIGF3YXksIGZvciBhbGwgZHdhcmZzIGhhdmUgYW4gaW5mYWxsaWJsZQoJbm9zZSBmb3IgcHJlY2lvdXMgbWV0YWxzLgoJQW1vbmcgb3RoZXIgdGhpbmdzLCBkd2FyZnMgYXJlIHJpZ2h0bHkgdmFsdWVkIGZvciB0aGVpciBza2lsbAoJYXMgYmxhY2tzbWl0aHMgYW5kIGpld2VsbGVyczogdGhleSBtYWRlIE9kaW4gaGlzIGZhbW91cyBzcGVhcgoJR3VuZ25pciwgYW5kIFRob3IgaGlzIGhhbW1lcjsgZm9yIEZyZXlhIHRoZXkgZGVzaWduZWQgYQoJbWFnbmlmaWNlbnQgbmVja2xhY2UsIGFuZCBmb3IgRnJleSBhIGdvbGRlbiBib2FyLiAgQW5kIGluIHRoZWlyCglzcGFyZSB0aW1lIHRoZXkgYXJlIGV4Y2VsbGVudCBiYWtlcnMuICBJcm9uaWNhbGx5LCBkZXNwaXRlCgl0aGVpciBvZGQgZmVldCwgdGhleSBhcmUgcGFydGljdWxhcmx5IGZvbmQgb2YgZGFuY2luZy4gIFRoZXkKCWNhbiBhbHNvIHNlZSBpbnRvIHRoZSBmdXR1cmUsIGFuZCBjb25zZXF1ZW50bHkgYXJlIGV4Y2VsbGVudAoJbWV0ZW9yb2xvZ2lzdHMuICBUaGV5IGNhbiBiZSBmcmVlIHdpdGggcHJlc2VudHMgdG8gcGVvcGxlCgl0aGV5IGxpa2UsIGFuZCBhIGR3YXJ2aXNoIGdpZnQgaXMgbGlrZWx5IHRvIHR1cm4gdG8gZ29sZCBpbgoJdGhlIGhhbmQuICBCdXQgb24gdGhlIHdob2xlIHRoZXkgYXJlIGEgc25hcHBpc2ggbG90LgoJICAgIFsgVGhlIEltbW9ydGFscywgYnkgRGVyZWsgYW5kIEp1bGlhIFBhcmtlciBdCglJbiBhZnRlciBkYXlzLCB3aGVuIGJlY2F1c2Ugb2YgdGhlIHRyaXVtcGggb2YgTW9yZ290aCBFbHZlcyBhbmQKCU1lbiBiZWNhbWUgZXN0cmFuZ2VkLCBhcyBoZSBtb3N0IHdpc2hlZCwgdGhvc2Ugb2YgdGhlIEVsdmVuLXJhY2UKCXRoYXQgbGl2ZWQgc3RpbGwgaW4gTWlkZGxlLWVhcnRoIHdhbmVkIGFuZCBmYWRlZCwgYW5kIE1lbiB1c3VycGVkCgl0aGUgc3VubGlnaHQuICBUaGVuIHRoZSBRdWVuZGkgd2FuZGVyZWQgaW4gdGhlIGxvbmVseSBwbGFjZXMgb2YgdGhlCglncmVhdCBsYW5kcyBhbmQgdGhlIGlzbGVzLCBhbmQgdG9vayB0byB0aGUgbW9vbmxpZ2h0IGFuZCB0aGUKCXN0YXJsaWdodCwgYW5kIHRvIHRoZSB3b29kcyBhbmQgdGhlIGNhdmVzLCBiZWNvbWluZyBhcyBzaGFkb3dzCglhbmQgbWVtb3JpZXMsIHNhdmUgdGhvc2Ugd2hvIGV2ZXIgYW5kIGFub24gc2V0IHNhaWwgaW50byB0aGUgV2VzdAoJYW5kIHZhbmlzaGVkIGZyb20gTWlkZGxlLWVhcnRoLiAgQnV0IGluIHRoZSBkYXduIG9mIHllYXJzIEVsdmVzCglhbmQgTWVuIHdlcmUgYWxsaWVzIGFuZCBoZWxkIHRoZW1zZWx2ZXMgYWtpbiwgYW5kIHRoZXJlIHdlcmUgc29tZQoJYW1vbmcgTWVuIHRoYXQgbGVhcm5lZCB0aGUgd2lzZG9tIG9mIHRoZSBFbGRhciwgYW5kIGJlY2FtZSBncmVhdAoJYW5kIHZhbGlhbnQgYW1vbmcgdGhlIGNhcHRhaW5zIG9mIHRoZSBOb2xkb3IuICBBbmQgaW4gdGhlIGdsb3J5CglhbmQgYmVhdXR5IG9mIHRoZSBFbHZlcywgYW5kIGluIHRoZWlyIGZhdGUsIGZ1bGwgc2hhcmUgaGFkIHRoZQoJb2Zmc3ByaW5nIG9mIGVsZiBhbmQgbW9ydGFsLCBFYXJlbmRpbCwgYW5kIEVsd2luZywgYW5kIEVscm9uZAoJdGhlaXIgY2hpbGQuCgkJWyBUaGUgU2lsbWFyaWxsaW9uLCBieSBKLlIuUi4gVG9sa2llbiBdCglUaGUgYmVoYXZpb3VyIG9mIGVlbHMgaW4gZnJlc2ggd2F0ZXIgZXh0ZW5kcyB0aGUgYWlyIG9mCglteXN0ZXJ5IHN1cnJvdW5kaW5nIHRoZW0uICBUaGV5IG1vdmUgZnJlZWx5IGludG8gbXVkZHksIHNpbHR5Cglib3R0b21zIG9mIGxha2VzLCBseWluZyBidXJpZWQgaW4gdGhlIGRheWxpZ2h0IGhvdXJzIGluIHN1bW1lci4KCVsuLi5dICBFZWxzIGFyZSB2b3JhY2lvdXMgY2Fybml2b3JlcywgZmVlZGluZyBtYWlubHkgYXQKCW5pZ2h0IGFuZCBjb25zdW1pbmcgYSB3aWRlIHZhcmlldHkgb2YgZmlzaGVzIGFuZCBpbnZlcnRlYnJhdGUKCWNyZWF0dXJlcy4gIENvbnRyYXJ5IHRvIGVhcmxpZXIgdGhpbmtpbmcsIGVlbHMgc2VlayBsaXZpbmcKCXJhdGhlciB0aGFuIGRlYWQgY3JlYXR1cmVzIGFuZCBhcmUgbm90IGhhYml0dWFsIGVhdGVycyBvZgoJY2Fycmlvbi4KCSAgICBbIEZyZXNod2F0ZXIgRmlzaGVzIG9mIENhbmFkYSwgYnkgU2NvdHQgYW5kIENyb3NzbWFuIF0KCUJ1dCBJIGFza2VkIHdoeSBub3Qga2VlcCBpdCBhbmQgbGV0IHRoZSBoZW4gc2l0IG9uIGl0IHRpbGwgaXQKCWhhdGNoZWQsIGFuZCB0aGVuIHdlIGNvdWxkIHNlZSB3aGF0IHdvdWxkIGNvbWUgb3V0IG9mIGl0LgoJIk5vdGhpbmcgZ29vZCwgSSdtIGNlcnRhaW4gb2YgdGhhdCwiIE1vbSBzYWlkLiAgIkl0IHdvdWxkCglwcm9iYWJseSBiZSBzb21ldGhpbmcgaG9ycmlibGUuICBCdXQganVzdCByZW1lbWJlciwgaWYgaXQncyBhCgljcm9jb2RpbGUgb3IgYSBkcmFnb24gb3Igc29tZXRoaW5nIGxpa2UgdGhhdCwgSSB3b24ndCBoYXZlIGl0CglpbiBteSBob3VzZSBmb3Igb25lIG1pbnV0ZS4iCgkJWyBUaGUgRW5vcm1vdXMgRWdnLCBieSBPbGl2ZXIgQnV0dGVyd29ydGggXQoJLi4uIEV2ZW4gYXMgdGhleSBzdGVwcGVkIG92ZXIgdGhlIHRocmVzaG9sZCBhIHNpbmdsZSBjbGVhcgoJdm9pY2Ugcm9zZSBpbiBzb25nLgoKCQlBIEVsYmVyZXRoIEdpbHRob25pZWwsCgkJc2lsaXZyZW4gcGVubmEgbWlyaWVsCgkJbyBtZW5lbCBhZ2xhciBlbGVuYXRoIQoJCU5hLWNoYWVyZWQgcGFsYW4tZGlyaWVsCgkJbyBnYWxhZGhyZW1taW4gZW5ub3JhdGgsCgkJRmFudWlsb3MsIGxlIGxpbm5hdGhvbgoJCW5lZiBhZWFyLCBzaSBuZWYgYWVhcm9uIQoKCUZyb2RvIGhhbHRlZCBmb3IgYSBtb21lbnQsIGxvb2tpbmcgYmFjay4gIEVscm9uZCB3YXMgaW4gaGlzCgljaGFpciBhbmQgdGhlIGZpcmUgd2FzIG9uIGhpcyBmYWNlIGxpa2Ugc3VtbWVyLWxpZ2h0IHVwb24gdGhlCgl0cmVlcy4gIE5lYXIgaGltIHNhdCB0aGUgTGFkeSBBcndlbi4gIFsuLi5dCglIZSBzdG9vZCBzdGlsbCBlbmNoYW50ZWQsIHdoaWxlIHRoZSBzd2VldCBzeWxsYWJsZXMgb2YgdGhlCgllbHZpc2ggc29uZyBmZWxsIGxpa2UgY2xlYXIgamV3ZWxzIG9mIGJsZW5kZWQgd29yZCBhbmQgbWVsb2R5LgoJIkl0IGlzIGEgc29uZyB0byBFbGJlcmV0aCwiIHNhaWQgQmlsYm8uICAiVGhleSB3aWxsIHNpbmcgdGhhdCwKCWFuZCBvdGhlciBzb25ncyBvZiB0aGUgQmxlc3NlZCBSZWFsbSwgbWFueSB0aW1lcyB0b25pZ2h0LgoJQ29tZSBvbiEiCgkgICBbIFRoZSBGZWxsb3dzaGlwIG9mIHRoZSBSaW5nLCBieSBKLlIuUi4gVG9sa2llbiBdCglTb3V0aC1BbWVyaWNhbiBmaXNoIChfR3ltbm90dXMgZWxlY3RyaWN1c18pLCBsaXZpbmcgaW4gZnJlc2gKCXdhdGVyLiAgU2hhcGVkIGxpa2UgYSBzZXJwZW50LCBpdCBjYW4gZ3JvdyB1cCB0byAyIG1ldHJlcy4KCVRoaXMgZWVsIGlzIGtub3duIGZvciBpdHMgZWxlY3RyaWNhbCBvcmdhbiB3aGljaCBlbmFibGVzIGl0Cgl0byBwYXJhbHlzZSBjcmVhdHVyZXMgdXAgdG8gdGhlIHNpemUgb2YgYSBob3JzZS4KCSAgIFsgVmFuIERhbGUncyBHcm9vdCBXb29yZGVuYm9layBkZXIgTmVkZXJsYW5kc2UgVGFhbCBdCglFbGVtZW50YWxzIGFyZSBtYW5pZmVzdGF0aW9ucyBvZiB0aGUgYmFzaWMgbmF0dXJlIG9mIHRoZQoJdW5pdmVyc2UuICBUaGVyZSBhcmUgZm91ciBrbm93biBmb3JtcyBvZiBlbGVtZW50YWxzOiAgYWlyLCBmaXJlLAoJd2F0ZXIsIGFuZCBlYXJ0aC4gIFNvbWUgbXlzdGljcyBoYXZlIHBvc3R1bGF0ZWQgdGhlIG5lY2Vzc2l0eQoJZm9yIGEgZmlmdGggdHlwZSwgdGhlIHNwaXJpdCBlbGVtZW50YWwsIGJ1dCBub25lIGhhdmUgZXZlcgoJYmVlbiBlbmNvdW50ZXJlZCwgYXQgbGVhc3Qgb24gdGhpcyBwbGFuZSBvZiBleGlzdGVuY2UuCglUaGUgRWx2ZXMgc2F0IHJvdW5kIHRoZSBmaXJlIHVwb24gdGhlIGdyYXNzIG9yIHVwb24gdGhlIHNhd24KCXJpbmdzIG9mIG9sZCB0cnVua3MuICBTb21lIHdlbnQgdG8gYW5kIGZybyBiZWFyaW5nIGN1cHMgYW5kCglwb3VyaW5nIGRyaW5rczsgb3RoZXJzIGJyb3VnaHQgZm9vZCBvbiBoZWFwZWQgcGxhdGVzIGFuZAoJZGlzaGVzLgoJIlRoaXMgaXMgcG9vciBmYXJlLCIgdGhleSBzYWlkIHRvIHRoZSBob2JiaXRzOyAiZm9yIHdlIGFyZQoJbG9kZ2luZyBpbiB0aGUgZ3JlZW53b29kIGZhciBmcm9tIG91ciBoYWxscy4gIElmIGV2ZXIgeW91IGFyZQoJb3VyIGd1ZXN0cyBhdCBob21lLCB3ZSB3aWxsIHRyZWF0IHlvdSBiZXR0ZXIuIgoJIkl0IHNlZW1zIHRvIG1lIGdvb2QgZW5vdWdoIGZvciBhIGJpcnRoZGF5LXBhcnR5LCIgc2FpZCBGcm9kby4KCVBpcHBpbiBhZnRlcndhcmRzIHJlY2FsbGVkIGxpdHRsZSBvZiBlaXRoZXIgZm9vZCBvciBkcmluaywgZm9yCgloaXMgbWluZCB3YXMgZmlsbGVkIHdpdGggdGhlIGxpZ2h0IHVwb24gdGhlIGVsZi1mYWNlcywgYW5kIHRoZQoJc291bmQgb2Ygdm9pY2VzIHNvIHZhcmlvdXMgYW5kIHNvIGJlYXV0aWZ1bCB0aGF0IGhlIGZlbHQgaW4gYQoJd2FraW5nIGRyZWFtLiAgWy4uLl0KCVNhbSBjb3VsZCBuZXZlciBkZXNjcmliZSBpbiB3b3Jkcywgbm9yIHBpY3R1cmUgY2xlYXJseSB0bwoJaGltc2VsZiwgd2hhdCBoZSBmZWx0IG9yIHRob3VnaHQgdGhhdCBuaWdodCwgdGhvdWdoIGl0IHJlbWFpbmVkCglpbiBoaXMgbWVtb3J5IGFzIG9uZSBvZiB0aGUgY2hpZWYgZXZlbnRzIG9mIGhpcyBsaWZlLiAgVGhlCgluZWFyZXN0IGhlIGV2ZXIgZ290IHdhcyB0byBzYXk6ICJXZWxsLCBzaXIsIGlmIEkgY291bGQgZ3JvdwoJYXBwbGVzIGxpa2UgdGhhdCwgSSB3b3VsZCBjYWxsIG15c2VsZiBhIGdhcmRlbmVyLiAgQnV0IGl0IHdhcwoJdGhlIHNpbmdpbmcgdGhhdCB3ZW50IHRvIG15IGhlYXJ0LCBpZiB5b3Uga25vdyB3aGF0IEkgbWVhbi4iCgkgICBbIFRoZSBGZWxsb3dzaGlwIG9mIHRoZSBSaW5nLCBieSBKLlIuUi4gVG9sa2llbiBdCglUaGUgRWx2ZXMgbmV4dCB1bndyYXBwZWQgYW5kIGdhdmUgdG8gZWFjaCBvZiB0aGUgQ29tcGFueSB0aGUKCWNsb3RoZXMgdGhleSBoYWQgYnJvdWdodC4gIEZvciBlYWNoIHRoZXkgaGFkIHByb3ZpZGVkIGEgaG9vZAoJYW5kIGNsb2FrLCBtYWRlIGFjY29yZGluZyB0byBoaXMgc2l6ZSwgb2YgdGhlIGxpZ2h0IGJ1dCB3YXJtCglzaWxrZW4gc3R1ZmYgdGhhdCB0aGUgR2FsYWRyaW0gd292ZS4gIEl0IHdhcyBoYXJkIHRvIHNheSBvZgoJd2hhdCBjb2xvdXIgdGhleSB3ZXJlOiBncmV5IHdpdGggdGhlIGh1ZSBvZiB0d2lsaWdodCB1bmRlcgoJdGhlIHRyZWVzIHRoZXkgc2VlbWVkIHRvIGJlOyBhbmQgeWV0IGlmIHRoZXkgd2VyZSBtb3ZlZCwgb3IKCXNldCBpbiBhbm90aGVyIGxpZ2h0LCB0aGV5IHdlcmUgZ3JlZW4gYXMgc2hhZG93ZWQgbGVhdmVzLCBvcgoJYnJvd24gYXMgZmFsbG93IGZpZWxkcyBieSBuaWdodCwgZHVzay1zaWx2ZXIgYXMgd2F0ZXIgdW5kZXIKCXRoZSBzdGFycy4KCQlbIFRoZSBGZWxsb3dzaGlwIG9mIHRoZSBSaW5nLCBieSBKLlIuUi4gVG9sa2llbiBdCgknUHV0IG9mZiB0aGF0IG1hc2sgb2YgYnVybmluZyBnb2xkCglXaXRoIGVtZXJhbGQgZXllcy4nCgknTyBubywgbXkgZGVhciwgeW91IG1ha2Ugc28gYm9sZAoJVG8gZmluZCBpZiBoZWFydHMgYmUgd2lsZCBhbmQgd2lzZSwKCUFuZCB5ZXQgbm90IGNvbGQuJwoKCSdJIHdvdWxkIGJ1dCBmaW5kIHdoYXQncyB0aGVyZSB0byBmaW5kLAoJTG92ZSBvciBkZWNlaXQuJwoJJ0l0IHdhcyB0aGUgbWFzayBlbmdhZ2VkIHlvdXIgbWluZCwKCUFuZCBhZnRlciBzZXQgeW91ciBoZWFydCB0byBiZWF0LAoJTm90IHdoYXQncyBiZWhpbmQuJwoKCSdCdXQgbGVzdCB5b3UgYXJlIG15IGVuZW15LAoJSSBtdXN0IGVucXVpcmUuJwoJJ08gbm8sIG15IGRlYXIsIGxldCBhbGwgdGhhdCBiZTsKCVdoYXQgbWF0dGVyLCBzbyB0aGVyZSBpcyBidXQgZmlyZQoJSW4geW91LCBpbiBtZT8nCgkJWyBUaGUgTWFzaywgYnkgVy5CLiBZZWF0cyBdCglQcmVzZW50bHkgd2UgcmVhY2hlZCBhIHBsYWNlIHdoZXJlIHRoZSBiZWFjaCBuYXJyb3dlZDsgdGhlIHNlYQoJYWxtb3N0IGNhbWUgdXAgdG8gdGhlIGZvb3Qgb2YgdGhlIGNsaWZmcywgbGVhdmluZyBhIHBhc3NhZ2Ugbm8KCXdpZGVyIHRoYW4gYSBjb3VwbGUgb2YgeWFyZHMuICBCZXR3ZWVuIHR3byBwcm9qZWN0aW5nIHJvY2tzIHdlCgljYXVnaHQgc2lnaHQgb2YgdGhlIGVudHJhbmNlIHRvIGEgZGFyayB0dW5uZWwuCglUaGVyZSwgb24gYSBzbGFiIG9mIGdyYW5pdGUsIGFwcGVhcmVkIHR3byBteXN0ZXJpb3VzIGxldHRlcnMsCgloYWxmIGVhdGVuIGF3YXkgYnkgdGltZSAtLSB0aGUgdHdvIGluaXRpYWxzIG9mIHRoZSBib2xkLAoJYWR2ZW50dXJvdXMgdHJhdmVsbGVyOgoKCQkJQS5TLgoKCSdBLlMuLCcgY3JpZWQgbXkgdW5jbGUuICdBcm5lIFNha251c3NlbW0hIEFybmUgU2FrbnVzc2VtbSBhZ2FpbiEnCgoJWy4uLl0gYXQgdGhlIHNpZ2h0IG9mIHRob3NlIHR3byBsZXR0ZXJzLCBjYXJ2ZWQgdGhlcmUgdGhyZWUKCWh1bmRyZWQgeWVhcnMgYmVmb3JlLCBJIHN0b29kIGluIHV0dGVyIHN0dXBlZmFjdGlvbi4gIE5vdAoJb25seSB3YXMgdGhlIHNpZ25hdHVyZSBvZiB0aGUgbGVhcm5lZCBhbGNoZW1pc3QgbGVnaWJsZSBvbgoJdGhlIHJvY2ssIGJ1dCBJIGhlbGQgaW4gbXkgaGFuZCB0aGUgZGFnZ2VyIHdoaWNoIGhhZCB0cmFjZWQgaXQuCglXaXRob3V0IHNob3dpbmcgdGhlIG1vc3QgYXBwYWxsaW5nIGJhZCBmYWl0aCwgSSBjb3VsZCBubyBsb25nZXIKCWRvdWJ0IHRoZSBleGlzdGVuY2Ugb2YgdGhlIHRyYXZlbGxlciBhbmQgdGhlIHJlYWxpdHkgb2YgaGlzCglqb3VybmV5LgoJCVsgSm91cm5leSB0byB0aGUgQ2VudHJlIG9mIHRoZSBFYXJ0aCwgYnkgSnVsZXMgVmVybmUsCgkJICB0cmFuc2xhdGVkIGJ5IFJvYmVydCBCYWxkaWNrIF0KCVRoZSBhc2NsZXBpZWlvbiBhdCBFcGlkYXVydXMgd2FzIHRoZSBtb3N0IGNlbGVicmF0ZWQgaGVhbGluZwoJY2VudGVyIG9mIHRoZSBDbGFzc2ljYWwgd29ybGQsIHRoZSBwbGFjZSB3aGVyZSBpbGwgcGVvcGxlIHdlbnQKCWluIHRoZSBob3BlIG9mIGJlaW5nIGN1cmVkLiAgVG8gZmluZCBvdXQgdGhlIHJpZ2h0IGN1cmUgZm9yCgl0aGVpciBhaWxtZW50cywgdGhleSBzcGVudCBhIG5pZ2h0IGluIHRoZSBlbmtvaW1pdGlyaWEsIGEgYmlnCglzbGVlcGluZyBoYWxsLiAgSW4gdGhlaXIgZHJlYW1zLCB0aGUgZ29kIGhpbXNlbGYgKEFzY2xlcGl1cykKCXdvdWxkIGFkdmlzZSB0aGVtIHdoYXQgdGhleSBoYWQgdG8gZG8gdG8gcmVnYWluIHRoZWlyIGhlYWx0aC4KCVRoZXJlIGFyZSBhbHNvIG1pbmVyYWwgc3ByaW5ncyBpbiB0aGUgdmljaW5pdHkgd2hpY2ggbWF5IGhhdmUKCWJlZW4gdXNlZCBpbiBoZWFsaW5nLgoJCVsgV2lraXBlZGlhLCB0aGUgZnJlZSBlbmN5Y2xvcGVkaWEgXQoJVGhlc2UgZmVtYWxlLXNlZW1pbmcgZGV2aWxzIG5hbWVkIGFmdGVyIHRoZSBGdXJpZXMgb2YgbXl0aG9sb2d5CglhdHRhY2sgaGFuZCB0byBoYW5kIGFuZCBwb2lzb24gdGhlaXIgdW53YXJ5IHZpY3RpbXMgYXMgd2VsbC4KCVRoZSB0d28taGVhZGVkIGdpYW50LCBvciBldHRpbiwgaXMgYSB2aWNpb3VzIGFuZCB1bnByZWRpY3RhYmxlCglodW50ZXIgdGhhdCBzdGFsa3MgYnkgbmlnaHQgYW5kIGVhdHMgYW55IG1lYXQgaXQgY2FuIGNhdGNoLgoJQXQgZmlyc3Qgb25seSBpdHMgdGlwIHdhcyB2aXNpYmxlLCBidXQgdGhlbiBpdCByb3NlLCBzdHJhaWdodCwKCXByb3VkLCBhbGwgdGhhdCB3YXMgbm9ibGUgYW5kIGdyZWF0IGFuZCB3b25kcm91cy4gIFRoZSB0aXAgb2YKCXRoZSBibGFkZSBwb2ludGVkIHRvd2FyZCB0aGUgbW9vbiwgYXMgaWYgaXQgd291bGQgY2xlYXZlIGl0CglpbiB0d28uICBUaGUgYmxhZGUgaXRzZWxmIGdsZWFtZWQgbGlrZSBhIGJlYWNvbiBpbiB0aGUgbmlnaHQuCglUaGVyZSB3YXMgbm8gbGlnaHQgc291cmNlIGZvciB0aGUgc3dvcmQgdG8gYmUgcmVmbGVjdGluZwoJZnJvbSwgZm9yIHRoZSBtb29uIGhhZCBkYXJ0ZWQgYmVoaW5kIGEgY2xvdWQgaW4gZmVhci4gIFRoZQoJc3dvcmQgd2FzIGdsb3dpbmcgZnJvbSB0aGUgaW50ZW5zaXR5IG9mIGl0cyBzdHJlbmd0aCBhbmQKCXBvd2VyIGFuZCBrbm93bGVkZ2UgdGhhdCBpdCB3YXMganVzdGljZSBpbmNhcm5hdGUsIGFuZCB0aGF0CglhZnRlciBhIHNsdW1iZXIgb2YgdW5jb3VudGVkIHllYXJzIGl0cyB0aW1lIGhhZCBhZ2FpbiBjb21lLgoJQWZ0ZXIgdGhlIGJsYWRlIGJyb2tlIHRoZSBzdXJmYWNlLCB0aGUgaGlsdCB3YXMgdmlzaWJsZSwgYW5kCglob2xkaW5nIHRoZSBzd29yZCB3YXMgYSBzaW5nbGUgc3Ryb25nLCB5ZXQgZmVtaW5pbmUgaGFuZCwKCXdlYXJpbmcgc2V2ZXJhbCByaW5ncyB0aGF0IGJvcmUgamV3ZWxzIHNwYXJrbGluZyB3aXRoIHRoZQoJYmx1ZS1ncmVlbiBjb2xvciBvZiB0aGUgb2NlYW4uCgkJWyBLbmlnaHQgTGlmZSwgYnkgUGV0ZXIgRGF2aWQgXQoJVGhlcmUgd2FzIGEgdGltZSB3aGVuIFJpbmNld2luZCBoYWQgcXVpdGUgbGlrZWQgdGhlIGljb25vc2NvcGUuCglIZSBiZWxpZXZlZCwgYWdhaW5zdCBhbGwgZXhwZXJpZW5jZSwgdGhhdCB0aGUgd29ybGQgd2FzCglmdW5kYW1lbnRhbGx5IHVuZGVyc3RhbmRhYmxlLCBhbmQgdGhhdCBpZiBoZSBjb3VsZCBvbmx5IGVxdWlwCgloaW1zZWxmIHdpdGggdGhlIHJpZ2h0IG1lbnRhbCB0b29sYm94IGhlIGNvdWxkIHRha2UgdGhlIGJhY2sgb2ZmCglhbmQgc2VlIGhvdyBpdCB3b3JrZWQuICBIZSB3YXMsIG9mIGNvdXJzZSwgZGVhZCB3cm9uZy4gIFRoZQoJaWNvbm9zY29wZSBkaWRuJ3QgdGFrZSBwaWN0dXJlcyBieSBsZXR0aW5nIGxpZ2h0IGZhbGwgb250bwoJc3BlY2lhbGx5IHRyZWF0ZWQgcGFwZXIsIGFzIGhlIGhhZCBzdXJtaXNlZCwgYnV0IGJ5IHRoZSBmYXIKCXNpbXBsZXIgbWV0aG9kIG9mIGltcHJpc29uaW5nIGEgc21hbGwgZGVtb24gd2l0aCBhIGdvb2QgZXllIGZvcgoJY29sb3VyIGFuZCBhIHNwZWVkeSBoYW5kIHdpdGggYSBwYWludGJydXNoLiAgSGUgaGFkIGJlZW4gdmVyeQoJdXBzZXQgdG8gZmluZCB0aGF0IG91dC4KCQlbIFRoZSBMaWdodCBGYW50YXN0aWMsIGJ5IFRlcnJ5IFByYXRjaGV0dCBdCglUaGlzIGlzIGEgcG93ZXJmdWwgYW11bGV0IG9mIEVTUC4gIEluIGFkZGl0aW9uIHRvIGl0cyBzdGFuZGFyZAoJcG93ZXJzLCBpdCByZWdlbmVyYXRlcyB0aGUgZW5lcmd5IG9mIGFueW9uZSB3aG8gY2FycmllcwoJaXQsIGFsbG93aW5nIHRoZW0gdG8gY2FzdCBzcGVsbHMgbW9yZSBvZnRlbi4gIEl0IGFsc28gcmVkdWNlcwoJYW55IHNwZWxsIGRhbWFnZSB0byB0aGUgcGVyc29uIHdobyBjYXJyaWVzIGl0IGJ5IGhhbGYsIGFuZAoJcHJvdGVjdHMgZnJvbSBtYWdpYyBtaXNzaWxlcy4gIEZpbmFsbHksIHdoZW4gaW52b2tlZCBpdCBoYXMKCXRoZSBwb3dlciB0byBpbnN0YW50bHkgb3BlbiBhIHBvcnRhbCB0byBhbnkgb3RoZXIgYXJlYSBvZiB0aGUKCWR1bmdlb24sIGFsbG93aW5nIGl0cyBpbnZva2VyIHRvIHRyYXZlbCBxdWlja2x5IGJldHdlZW4KCWFyZWFzLgoJVGhlIEV5ZXMgb2YgdGhlIE92ZXJ3b3JsZCBpcyBhIHJhdGhlciBvYnNjdXJlIGFydGlmYWN0LgoJVGhlc2UgbWFnaWNhbCBsZW5zZXMgcHVzaCB0aGUgd2VhcmVyJ3MgdmlldyBzZW5zZSBpbnRvIHRoZQoJIm92ZXJ3b3JsZCIgLS0gYW5vdGhlciBuYW1lIGZvciBhIHNlZ21lbnQgb2YgdGhlIEFzdHJhbCBQbGFuZS4KCVVzdWFsbHksIHRoZXJlIGlzIG5vdGhpbmcgdG8gYmUgc2Vlbi4gIEhvd2V2ZXIsIHRoZSB3ZWFyZXIKCWlzIGFsc28gYWJsZSB0byBsb29rIGJhY2sgYW5kIHNlZSB0aGUgYXJlYSBhcm91bmQgaGVyc2VsZiwKCW11Y2ggbGlrZSBsb29raW5nIG9uIGEgbWFwLiAgV2h5IGFueW9uZSB3b3VsZCB3YW50IHRvIC4uLgoJU29tZSBoYXRzIGNhbiBvbmx5IGJlIHdvcm4gaWYgeW91J3JlIHdpbGxpbmcgdG8gYmUgamF1bnR5LCB0byBzZXQKCXRoZW0gYXQgYW4gYW5nbGUgYW5kIHRvIHdhbGsgYmVuZWF0aCB0aGVtIHdpdGggYSBzcHJpbmcgaW4geW91cgoJc3RyaWRlIGFzIGlmIHlvdSdyZSBvbmx5IGEgc3RlcCBhd2F5IGZyb20gZGFuY2luZy4gIFRoZXkgZGVtYW5kIGEKCWxvdCBvZiB5b3UuCgkJWyBBbmFuc2kgQm95cywgYnkgTmVpbCBHYWltYW4gXQoJVGhlbiBpdCBhcHBlYXJlZCBpbiBQYXJpcyBhdCBqdXN0IGFib3V0IHRoZSB0aW1lIHRoYXQgUGFyaXMKCXdhcyBmdWxsIG9mIENhcmxpc3RzIHdobyBoYWQgdG8gZ2V0IG91dCBvZiBTcGFpbi4gIE9uZSBvZgoJdGhlbSBtdXN0IGhhdmUgYnJvdWdodCBpdCB3aXRoIGhpbSwgYnV0LCB3aG9ldmVyIGhlIHdhcywgaXQncwoJbGlrZWx5IGhlIGtuZXcgbm90aGluZyBhYm91dCBpdHMgcmVhbCB2YWx1ZS4gIEl0IGhhZCBiZWVuIC0tCglubyBkb3VidCBhcyBhIHByZWNhdXRpb24gZHVyaW5nIHRoZSBDYXJsaXN0IHRyb3VibGUgaW4gU3BhaW4KCS0tIHBhaW50ZWQgb3IgZW5hbWVsZWQgb3ZlciB0byBsb29rIGxpa2Ugbm90aGluZyBtb3JlIHRoYW4gYQoJZmFpcmx5IGludGVyZXN0aW5nIGJsYWNrIHN0YXR1ZXR0ZS4gIEFuZCBpbiB0aGF0IGRpc2d1aXNlLAoJc2lyLCBpdCB3YXMsIHlvdSBtaWdodCBzYXksIGtpY2tlZCBhcm91bmQgUGFyaXMgZm9yIHNldmVudHkKCXllYXJzIGJ5IHByaXZhdGUgb3duZXJzIGFuZCBkZWFsZXJzIHRvbyBzdHVwaWQgdG8gc2VlIHdoYXQKCWl0IHdhcyB1bmRlciB0aGUgc2tpbi4KCQlbIFRoZSBNYWx0ZXNlIEZhbGNvbiwgYnkgRGFzaGllbGwgSGFtbWV0dCBdCgknTGV0IGhpbSBiZSBmb3IgYSB3aGlsZSwnIHNhaWQgQ29oZW4uICAnSSByZWNrb24gdGhlIGZpc2gKCWRpc2FncmVlZCB3aXRoIGhpbS4nCgknRG9uJ3Qgc2VlIHdoeSwnIHNhaWQgVHJ1Y2tsZS4gICdJIHB1bGxlZCBoaW0gb3V0IGJlZm9yZSBpdCdkCgloYXJkbHkgY2hld2VkIGhpbS4gIEFuZCBoZSBtdXN0J3ZlIGRyaWVkIG91dCBuaWNlbHkgaW4gdGhhdAoJY29ycmlkb3IuICBZb3Uga25vdywgdGhlIG9uZSB3aGVyZSB0aGUgZmxhbWVzIHNob3QgdXAgb3V0IG9mCgl0aGUgZmxvb3IgdW5leHBlY3RlZGx5LicKCSdJIHJlY2tvbiBvdXIgYmFyZCB3YXNuJ3QgZXhwZWN0aW5nIGZsYW1lcyB0byBzaG9vdCBvdXQgb2YKCXRoZSBmbG9vciB1bmV4cGVjdGVkbHksJyBzYWlkIENvaGVuLgoJVHJ1Y2tsZSBzaHJ1Z2dlZCB0aGVhdHJpY2FsbHkuICAnX1dlbGxfLCBpZiB5b3UncmUgbm90IGdvaW5nCgl0byBleHBlY3QgdW5leHBlY3RlZCBmbGFtZXMsIHdoYXQncyB0aGUgcG9pbnQgb2YgZ29pbmcKCV9hbnl3aGVyZV8/JwoJCVsgVGhlIExhc3QgSGVybywgYnkgVGVycnkgUHJhdGNoZXR0IF0KCVNvbWUgc2F5IHRoZSB3b3JsZCB3aWxsIGVuZCBpbiBmaXJlLAoJU29tZSBzYXkgaW4gaWNlLgoJRnJvbSB3aGF0IEkndmUgdGFzdGVkIG9mIGRlc2lyZQoJSSBob2xkIHdpdGggdGhvc2Ugd2hvIGZhdm9yIGZpcmUuCglCdXQgaWYgaXQgaGFkIHRvIHBlcmlzaCB0d2ljZSwKCUkgdGhpbmsgSSBrbm93IGVub3VnaCBvZiBoYXRlCglUbyBzYXkgdGhhdCBmb3IgZGVzdHJ1Y3Rpb24gaWNlCglJcyBhbHNvIGdyZWF0CglBbmQgd291bGQgc3VmZmljZS4KCQlbIEZpcmUgYW5kIEljZSwgYnkgUm9iZXJ0IEZyb3N0IF0KCVdpdGggYW4gYW54aWV0eSB0aGF0IGFsbW9zdCBhbW91bnRlZCB0byBhZ29ueSwgSSBjb2xsZWN0ZWQKCXRoZSBpbnN0cnVtZW50cyBvZiBsaWZlIGFyb3VuZCBtZSwgdGhhdCBJIG1pZ2h0IGluZnVzZSBhIHNwYXJrCglvZiBiZWluZyBpbnRvIHRoZSBsaWZlbGVzcyB0aGluZyB0aGF0IGxheSBhdCBteSBmZWV0LiAgSXQgd2FzCglhbHJlYWR5IG9uZSBpbiB0aGUgbW9ybmluZzsgdGhlIHJhaW4gcGF0dGVyZWQgZGlzbWFsbHkgYWdhaW5zdAoJdGhlIHBhbmVzLCBhbmQgbXkgY2FuZGxlIHdhcyBuZWFybHkgYnVybnQgb3V0LCB3aGVuLCBieSB0aGUKCWdsaW1tZXIgb2YgdGhlIGhhbGYtZXh0aW5ndWlzaGVkIGxpZ2h0LCBJIHNhdyB0aGUgZHVsbCB5ZWxsb3cKCWV5ZSBvZiB0aGUgY3JlYXR1cmUgb3BlbjsgaXQgYnJlYXRoZWQgaGFyZCwgYW5kIGEgY29udnVsc2l2ZQoJbW90aW9uIGFnaXRhdGVkIGl0cyBsaW1icy4KCglIb3cgY2FuIEkgZGVzY3JpYmUgbXkgZW1vdGlvbnMgYXQgdGhpcyBjYXRhc3Ryb3BoZSwgb3IgaG93CglkZWxpbmVhdGUgdGhlIHdyZXRjaCB3aG9tIHdpdGggc3VjaCBpbmZpbml0ZSBwYWlucyBhbmQgY2FyZSBJCgloYWQgZW5kZWF2b3VyZWQgdG8gZm9ybT8gIEhpcyBsaW1icyB3ZXJlIGluIHByb3BvcnRpb24sIGFuZCBJCgloYWQgc2VsZWN0ZWQgaGlzIGZlYXR1cmVzIGFzIGJlYXV0aWZ1bC4gIEJlYXV0aWZ1bCEtLUdyZWF0IEdvZCEKCUhpcyB5ZWxsb3cgc2tpbiBzY2FyY2VseSBjb3ZlcmVkIHRoZSB3b3JrIG9mIG11c2NsZXMgYW5kCglhcnRlcmllcyBiZW5lYXRoOyBoaXMgaGFpciB3YXMgb2YgYSBsdXN0cm91cyBibGFjaywgYW5kCglmbG93aW5nOyBoaXMgdGVldGggb2YgYSBwZWFybHkgd2hpdGVuZXNzOyBidXQgdGhlc2UgbHV4dXJpYW5jZXMKCW9ubHkgZm9ybWVkIGEgbW9yZSBob3JyaWQgY29udHJhc3Qgd2l0aCBoaXMgd2F0ZXJ5IGV5ZXMsIHRoYXQKCXNlZW1lZCBhbG1vc3Qgb2YgdGhlIHNhbWUgY29sb3VyIGFzIHRoZSBkdW4gd2hpdGUgc29ja2V0cyBpbgoJd2hpY2ggdGhleSB3ZXJlIHNldCwgaGlzIHNocml2ZWxsZWQgY29tcGxleGlvbiBhbmQgc3RyYWlnaHQKCWJsYWNrIGxpcHMuCgkJWyBGcmFua2Vuc3RlaW4sIGJ5IE1hcnkgV29sbHN0b25lY3JhZnQgU2hlbGxleSBdCglBbiBlbWVyYWxkIGlzIGFzIGdyZWVuIGFzIGdyYXNzOwoJQSBydWJ5IHJlZCBhcyBibG9vZDsKCUEgc2FwcGhpcmUgc2hpbmVzIGFzIGJsdWUgYXMgaGVhdmVuOwoJQSBmbGludCBsaWVzIGluIHRoZSBtdWQuCgoJQSBkaWFtb25kIGlzIGEgYnJpbGxpYW50IHN0b25lLAoJVG8gY2F0Y2ggdGhlIHdvcmxkJ3MgZGVzaXJlOwoJQW4gb3BhbCBob2xkcyBhIGZpZXJ5IHNwYXJrOwoJQnV0IGEgZmxpbnQgaG9sZHMgZmlyZS4KCQlbIFByZWNpb3VzIFN0b25lcywgYnkgQ2hyaXN0aW5hIEdpb3JnaW5hIFJvc3NldHRpIF0KCUZsb2F0aW5nIGV5ZXMsIG5vdCBzdXJwcmlzaW5nbHksIGFyZSBsYXJnZSwgZmxvYXRpbmcgZXllYmFsbHMKCXdoaWNoIGRyaWZ0IGFib3V0IHRoZSBkdW5nZW9uLiAgVGhvdWdoIG5vdCBkYW5nZXJvdXMgaW4gYW5kCglvZiB0aGVtc2VsdmVzLCB0aGVpciBwb3dlciB0byBwYXJhbHlzZSB0aG9zZSB3aG8gZ2F6ZSBhdAoJdGhlaXIgbGFyZ2UgZXllIGluIGNvbWJhdCBpcyB3aWRlbHkgZmVhcmVkLiAgTWFueSBhcmUgdGhlCgl0YWxlcyBvZiB0aG9zZSB3aG8gc3RydWNrIGEgZmxvYXRpbmcgZXllLCB3ZXJlIHBhcmFseXNlZCBieQoJaXRzIG15c3RpYyBwb3dlcnMsIGFuZCB0aGVuIG5pYmJsZWQgdG8gZGVhdGggYnkgc29tZSBvdGhlcgoJY3JlYXR1cmUgdGhhdCBsdXJrZWQgYXJvdW5kIG5lYXJieS4KCVdpdGggdGhpcyB0aG91IGNhbnN0IGRvIG1pZ2h0eSBkZWVkcwoJQW5kIGNoYW5nZSBtZW4ncyBwYXNzaW9ucyBmb3IgdGh5IG5lZWRzOgoJQSBtYW4ncyBkZXNwYWlyIHdpdGggam95IGFsbGF5LAoJVHVybiBiYWNoZWxvcnMgb2xkIHRvIGxvdmVycyBnYXkuCgkJWyBUaGUgTWFnaWMgRmx1dGUsIGJ5IFdvbGZnYW5nIEFtYWRldXMgTW96YXJ0IF0KCVRoZSBmb2cgY29tZXMKCW9uIGxpdHRsZSBjYXQgZmVldC4KCglJdCBzaXRzIGxvb2tpbmcKCW92ZXIgaGFyYm9yIGFuZCBjaXR5CglvbiBzaWxlbnQgaGF1bmNoZXMKCWFuZCB0aGVuIG1vdmVzIG9uLgoJICAgICBbIEZvZywgYnkgQ2FybCBTYW5kYnVyZyBdCglUaGUgbGl0dGxlIGdpcmwgc3Rvb2Qgb24gdGlwLXRvZSBhbmQgcGlja2VkIG9uZSBvZiB0aGUgbmljZXN0CglhbmQgYmlnZ2VzdCBsdW5jaC1ib3hlcywgYW5kIHRoZW4gc2hlIHNhdCBkb3duIHVwb24gdGhlIGdyb3VuZAoJYW5kIGVhZ2VybHkgb3BlbmVkIGl0LiAgSW5zaWRlIHNoZSBmb3VuZCwgbmljZWx5IHdyYXBwZWQgaW4KCXdoaXRlIHBhcGVycywgYSBoYW0gc2FuZHdpY2gsIGEgcGllY2Ugb2Ygc3BvbmdlLWNha2UsIGEgcGlja2xlLAoJYSBzbGljZSBvZiBuZXcgY2hlZXNlIGFuZCBhbiBhcHBsZS4gIEVhY2ggdGhpbmcgaGFkIGEgc2VwYXJhdGUKCXN0ZW0sIGFuZCBzbyBoYWQgdG8gYmUgcGlja2VkIG9mZiB0aGUgc2lkZSBvZiB0aGUgYm94OyBidXQKCURvcm90aHkgZm91bmQgdGhlbSBhbGwgdG8gYmUgZGVsaWNpb3VzLCBhbmQgc2hlIGF0ZSBldmVyeSBiaXQKCW9mIGx1bmNoZW9uIGluIHRoZSBib3ggYmVmb3JlIHNoZSBoYWQgZmluaXNoZWQuCgkJWyBPem1hIG9mIE96LCBieSBMLiBGcmFuayBCYXVtIF0KCVJlc3QhIFRoaXMgbGl0dGxlIEZvdW50YWluIHJ1bnMKCVRodXMgZm9yIGF5ZTogLS0gSXQgbmV2ZXIgc3RheXMKCUZvciB0aGUgbG9vayBvZiBzdW1tZXIgc3VucywKCU5vciB0aGUgY29sZCBvZiB3aW50ZXIgZGF5cy4KCVdob3NlJ2VyIHNoYWxsIHdhbmRlciBuZWFyLAoJV2hlbiB0aGUgU3lyaWFuIGhlYXQgaXMgd29yc3QsCglMZXQgaGltIGhpdGhlciBjb21lLCBub3IgZmVhcgoJTGVzdCBoZSBtYXkgbm90IHNsYWtlIGhpcyB0aGlyc3Q6CglIZSB3aWxsIGZpbmQgdGhpcyBsaXR0bGUgcml2ZXIKCVJ1bm5pbmcgc3RpbGwsIGFzIGJyaWdodCBhcyBldmVyLgoJTGV0IGhpbSBkcmluaywgYW5kIG9ud2FyZCBoaWUsCglCZWFyaW5nIGJ1dCBpbiB0aG91Z2h0LCB0aGF0IEksCglFcm90YXMsIGJhZGUgdGhlIE5haWFkIGZhbGwsCglBbmQgdGhhbmsgdGhlIGdyZWF0IGdvZCBQYW4gZm9yIGFsbCEKCQlbIEZvciBhIEZvdW50YWluLCBieSBCcnlhbiBXYWxsZXIgUHJvY3RlciBdCglPbmUgaG90IHN1bW1lcidzIGRheSBhIEZveCB3YXMgc3Ryb2xsaW5nIHRocm91Z2ggYW4gb3JjaGFyZAoJdGlsbCBoZSBjYW1lIHRvIGEgYnVuY2ggb2YgR3JhcGVzIGp1c3QgcmlwZW5pbmcgb24gYSB2aW5lCgl3aGljaCBoYWQgYmVlbiB0cmFpbmVkIG92ZXIgYSBsb2Z0eSBicmFuY2guICJKdXN0IHRoZSB0aGluZwoJdG8gcXVlbmNoIG15IHRoaXJzdCwiIHF1b3RoIGhlLiBEcmF3aW5nIGJhY2sgYSBmZXcgcGFjZXMsIGhlCgl0b29rIGEgcnVuIGFuZCBhIGp1bXAsIGFuZCBqdXN0IG1pc3NlZCB0aGUgYnVuY2guIFR1cm5pbmcKCXJvdW5kIGFnYWluIHdpdGggYSBPbmUsIFR3bywgVGhyZWUsIGhlIGp1bXBlZCB1cCwgYnV0IHdpdGgKCW5vIGdyZWF0ZXIgc3VjY2Vzcy4gQWdhaW4gYW5kIGFnYWluIGhlIHRyaWVkIGFmdGVyIHRoZQoJdGVtcHRpbmcgbW9yc2VsLCBidXQgYXQgbGFzdCBoYWQgdG8gZ2l2ZSBpdCB1cCwgYW5kIHdhbGtlZAoJYXdheSB3aXRoIGhpcyBub3NlIGluIHRoZSBhaXIsIHNheWluZzogIkkgYW0gc3VyZSB0aGV5IGFyZQoJc291ci4iCgkJWyBBZXNvcCdzIEZhYmxlcyBdCglGdW5naSwgZGl2aXNpb24gb2Ygc2ltcGxlIHBsYW50cyB0aGF0IGxhY2sgY2hsb3JvcGh5bGwsIHRydWUKCXN0ZW1zLCByb290cywgYW5kIGxlYXZlcy4gIFVubGlrZSBhbGdhZSwgZnVuZ2kgY2Fubm90CglwaG90b3N5bnRoZXNpemUsIGFuZCBsaXZlIGFzIHBhcmFzaXRlcyBvciBzYXByb3BoeXRlcy4gIFRoZQoJZGl2aXNpb24gY29tcHJpc2VzIHRoZSBzbGltZSBtb2xkcyBhbmQgdHJ1ZSBmdW5naS4gIFRydWUKCWZ1bmdpIGFyZSBtdWx0aWNlbGx1bGFyICh3aXRoIHRoZSBleGNlcHRpb24gb2YgeWVhc3RzKTsgdGhlCglib2R5IG9mIG1vc3QgdHJ1ZSBmdW5naSBjb25zaXN0cyBvZiBzbGVuZGVyIGNvdHRvbnkKCWZpbGFtZW50cywgb3IgaHlwaGFlLiAgQWxsIGZ1bmdpIGFyZSBjYXBhYmxlIG9mIGFzZXh1YWwKCXJlcHJvZHVjdGlvbiBieSBjZWxsIGRpdmlzaW9uLCBidWRkaW5nLCBmcmFnbWVudGF0aW9uLCBvcgoJc3BvcmVzLiAgVGhvc2UgdGhhdCByZXByb2R1Y2Ugc2V4dWFsbHkgYWx0ZXJuYXRlIGEgc2V4dWFsCglnZW5lcmF0aW9uIChnYW1ldG9waHl0ZSkgd2l0aCBhIHNwb3JlLXByb2R1Y2luZyBvbmUuICBUaGUKCWZvdXIgY2xhc3NlcyBvZiB0cnVlIGZ1bmdpIGFyZSB0aGUgYWxnYWVsaWtlIGZ1bmdpIChlLmcuLAoJYmxhY2sgYnJlYWQgbW9sZCBhbmQgZG93bnkgbWlsZGV3KSwgc2FjIGZ1bmdpIChlLmcuLCB5ZWFzdHMsCglwb3dkZXJ5IG1pbGRld3MsIHRydWZmbGVzLCBhbmQgYmx1ZSBhbmQgZ3JlZW4gbW9sZHMgc3VjaCBhcwoJUGVuaWNpbGxpdW0pLCBiYXNpZGl1bSBmdW5naSAoZS5nLiwgbXVzaHJvb21zIGFuZCBwdWZmYmFsbHMpCglhbmQgaW1wZXJmZWN0IGZ1bmdpIChlLmcuLCBzcGVjaWVzIHRoYXQgY2F1c2UgYXRobGV0ZSdzIGZvb3QKCWFuZCByaW5nd29ybSkuICBGdW5naSBoZWxwIGRlY29tcG9zZSBvcmdhbmljIG1hdHRlciAoaW1wb3J0YW50CglpbiBzb2lsIHJlbmV3YWwpOyBhcmUgdmFsdWFibGUgYXMgYSBzb3VyY2Ugb2YgYW50aWJpb3RpY3MsCgl2aXRhbWlucywgYW5kIHZhcmlvdXMgY2hlbWljYWxzOyBhbmQgZm9yIHRoZWlyIHJvbGUgaW4KCWZlcm1lbnRhdGlvbiwgZS5nLiwgaW4gYnJlYWQgYW5kIGFsY29ob2xpYyBiZXZlcmFnZQoJcHJvZHVjdGlvbi4KCQlbIFRoZSBDb25jaXNlIENvbHVtYmlhIEVuY3ljbG9wZWRpYSBdCglBbmQgc28gaXQgY2FtZSB0byBwYXNzIHRoYXQgd2hpbGUgTWFuIHJ1bGVkIG9uIEVhcnRoLCB0aGUKCWdhcmdveWxlcyB3YWl0ZWQsIGx1cmtpbmcsIGhpZGRlbiBmcm9tIHRoZSBsaWdodC4gIFJlYm9ybgoJZXZlcnkgNjAwIHllYXJzIGluIE1hbidzIHJlY2tvbmluZyBvZiB0aW1lLCB0aGUgZ2FyZ295bGVzCglqb2luZWQgYmF0dGxlIGFnYWluc3QgTWFuIHRvIGdhaW4gZG9taW5pb24gb3ZlciB0aGUgRWFydGguCgoJSW4gZWFjaCBjb21pbmcsIHRoZSBnYXJnb3lsZXMgd2VyZSBuZWFybHkgZGVzdHJveWVkIGJ5IE1lbgoJd2hvIGZsb3VyaXNoZWQgaW4gZ3JlYXRlciBudW1iZXJzLiAgTm93IGl0IGhhcyBiZWVuIHNvIG1hbnkKCWh1bmRyZWRzIG9mIHllYXJzIHRoYXQgaXQgc2VlbXMgdGhlIGFuY2llbnQgc3RhdHVlcyBhbmQKCXBhaW50aW5ncyBvZiBnYXJnb3lsZXMgYXJlIGp1c3QgcHJvZHVjdHMgb2YgTWFuJ3MKCWltYWdpbmF0aW9uLiAgSW4gdGhpcyB5ZWFyLCB3aXRoIE1hbidzIHRob3VnaHRzIHR1cm5lZCB0b3dhcmQKCXRoZSBtYW55IGlsbHMgaGUgaGFzIGJyb3VnaHQgYW1vbmcgaGltc2VsZiwgTWFuIGhhcyBmb3Jnb3R0ZW4KCWhpcyBtb3N0IGFuY2llbnQgYWR2ZXJzYXJ5LCB0aGUgZ2FyZ295bGVzLgoJCVsgRXhjZXJwdCBmcm9tIHRoZSBvcGVuaW5nIG5hcnJhdGlvbiB0byB0aGUgbW92aWUKCQkgICAgX0dhcmdveWxlc18sIHdyaXR0ZW4gYnkgU3RlcGhlbiBhbmQgRWxpbm9yIEthcnBmIF0KCTEgTm92ZW1iZXIgLSBBbGwgZGF5IGxvbmcgd2UgaGF2ZSB0cmF2ZWxsZWQsIGFuZCBhdCBhIGdvb2QKCXNwZWVkLiAgVGhlIGhvcnNlcyBzZWVtIHRvIGtub3cgdGhhdCB0aGV5IGFyZSBiZWluZyBraW5kbHkKCXRyZWF0ZWQsIGZvciB0aGV5IGdvIHdpbGxpbmdseSB0aGVpciBmdWxsIHN0YWdlIGF0IGJlc3QKCXNwZWVkLiAgV2UgaGF2ZSBub3cgaGFkIHNvIG1hbnkgY2hhbmdlcyBhbmQgZmluZCB0aGUgc2FtZQoJdGhpbmcgc28gY29uc3RhbnRseSB0aGF0IHdlIGFyZSBlbmNvdXJhZ2VkIHRvIHRoaW5rIHRoYXQgdGhlCglqb3VybmV5IHdpbGwgYmUgYW4gZWFzeSBvbmUuICBEci4gVmFuIEhlbHNpbmcgaXMgbGFjb25pYywgaGUKCXRlbGxzIHRoZSBmYXJtZXJzIHRoYXQgaGUgaXMgaHVycnlpbmcgdG8gQmlzdHJpdHosIGFuZCBwYXlzCgl0aGVtIHdlbGwgdG8gbWFrZSB0aGUgZXhjaGFuZ2Ugb2YgaG9yc2VzLiAgV2UgZ2V0IGhvdCBzb3VwLAoJb3IgY29mZmVlLCBvciB0ZWEsIGFuZCBvZmYgd2UgZ28uICBJdCBpcyBhIGxvdmVseSBjb3VudHJ5LgoJRnVsbCBvZiBiZWF1dGllcyBvZiBhbGwgaW1hZ2luYWJsZSBraW5kcywgYW5kIHRoZSBwZW9wbGUgYXJlCglicmF2ZSwgYW5kIHN0cm9uZywgYW5kIHNpbXBsZSwgYW5kIHNlZW0gZnVsbCBvZiBuaWNlCglxdWFsaXRpZXMuICBUaGV5IGFyZSB2ZXJ5LCB2ZXJ5IHN1cGVyc3RpdGlvdXMuICBJbiB0aGUgZmlyc3QKCWhvdXNlIHdoZXJlIHdlIHN0b3BwZWQsIHdoZW4gdGhlIHdvbWFuIHdobyBzZXJ2ZWQgdXMgc2F3IHRoZQoJc2NhciBvbiBteSBmb3JlaGVhZCwgc2hlIGNyb3NzZWQgaGVyc2VsZiBhbmQgcHV0IG91dCB0d28KCWZpbmdlcnMgdG93YXJkcyBtZSwgdG8ga2VlcCBvZmYgdGhlIGV2aWwgZXllLiAgSSBiZWxpZXZlIHRoZXkKCXdlbnQgdG8gdGhlIHRyb3VibGUgb2YgcHV0dGluZyBhbiBleHRyYSBhbW91bnQgb2YgZ2FybGljIGludG8KCW91ciBmb29kLCBhbmQgSSBjYW4ndCBhYmlkZSBnYXJsaWMuICBFdmVyIHNpbmNlIHRoZW4gSSBoYXZlCgl0YWtlbiBjYXJlIG5vdCB0byB0YWtlIG9mZiBteSBoYXQgb3IgdmVpbCwgYW5kIHNvIGhhdmUKCWVzY2FwZWQgdGhlaXIgc3VzcGljaW9ucy4KCQlbIERyYWN1bGEsIGJ5IEJyYW0gU3Rva2VyIF0KCSJQbGFjZSBvZiBUb3JtZW50LiIgIFRoZSBWYWxsZXkgb2YgSGlubm9tLCBzb3V0aC13ZXN0IG9mCglKZXJ1c2FsZW0sIHdoZXJlIFNvbG9tb24sIGtpbmcgb2YgSXNyYWVsLCBidWlsdCAiYSBoaWdoIHBsYWNlIiwKCW9yIHBsYWNlIG9mIHdvcnNoaXAsIGZvciB0aGUgZ29kcyBDaGVtb3NoIGFuZCBNb2xvY2guICBUaGUKCXZhbGxleSBjYW1lIHRvIGJlIHJlZ2FyZGVkIGFzIGEgcGxhY2Ugb2YgYWJvbWluYXRpb24gYmVjYXVzZQoJc29tZSBvZiB0aGUgSXNyYWVsaXRlcyBzYWNyaWZpY2VkIHRoZWlyIGNoaWxkcmVuIHRvIE1vbG9jaAoJdGhlcmUuICBJbiBhIGxhdGVyIHBlcmlvZCBpdCB3YXMgbWFkZSBhIHJlZnVzZSBkdW1wIGFuZAoJcGVycGV0dWFsIGZpcmVzIHdlcmUgbWFpbnRhaW5lZCB0aGVyZSB0byBwcmV2ZW50IHBlc3RpbGVuY2UuCglUaHVzLCBpbiB0aGUgTmV3IFRlc3RhbWVudCwgR2VoZW5uYSBiZWNhbWUgc3lub255bW91cyB3aXRoIGhlbGwuCgkJWyBFbmN5Y2xvcGVkaWEgTXl0aGljYSwgZWQuIE0uRi4gTGluZGVtYW5zIF0KCURlc3BpdGUgaXRzIHBvcHVsYXJpdHkgKG9yIHBlcmhhcHMgYmVjYXVzZSBvZiBpdCksIHRoZQoJZ2VsYXRpbm91cyBjdWJlIGlzIGFsc28gd2lkZWx5IGtub3duIGFzIG9uZSBvZiB0aGUgc2lsbGllcgoJcm9sZS1wbGF5aW5nIG1vbnN0ZXJzLiAgSXQgaXMgc29tZXRoaW5nIG9mIGEgY29tbWVudGFyeSBvbiB0aGUKCXViaXF1aXR5IG9mIHRyZWFzdXJlLWxhZGVuIGR1bmdlb25zIGluIHRoZSBEdW5nZW9ucyAmIERyYWdvbnMKCXVuaXZlcnNlLCBhcyB0aGUgY3ViZSBpcyBhIGNyZWF0dXJlIHNwZWNpZmljYWxseSBhZGFwdGVkIHRvIGEKCWR1bmdlb24gZWNvc3lzdGVtLiAgMTAgZmVldCB0byB0aGUgc2lkZSwgaXQgdHJhdmVscyB0aHJvdWdoCglzdGFuZGFyZCAxMC1mb290IGJ5IDEwLWZvb3QgZHVuZ2VvbiBjb3JyaWRvcnMsIGNsZWFuaW5nIHVwCglkZWJyaXMgYW5kIHJlZGlzdHJpYnV0aW5nIHRyZWFzdXJlIGJ5IGV4Y3JldGluZyBpbmRpZ2VzdGlibGUKCW1ldGFsIGl0ZW1zLgoJCVsgV2lraXBlZGlhLCB0aGUgZnJlZSBlbmN5Y2xvcGVkaWEgXQoJVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBmYWxzZSBtZW1vcmllcyBhbmQgdHJ1ZSBvbmVzIGlzIHRoZQoJc2FtZSBhcyBmb3IgamV3ZWxzOiAgaXQgaXMgYWx3YXlzIHRoZSBmYWxzZSBvbmVzIHRoYXQgbG9vayB0aGUKCW1vc3QgcmVhbCwgdGhlIG1vc3QgYnJpbGxpYW50LgoJCVsgU2FsdmFkb3IgRGFsaSBdCglUaGVzZSB2ZXJ5IG9kZCBwZW9wbGUgaGF2ZSBtYXN0ZXJlZCB0aGUgYWJpbGl0eSB0byBpbnNlcnQgZ2VuZQoJc2VxdWVuY2VzIGZyb20gb25lIG9yZ2FuaXNtIGludG8gYW5vdGhlciwgdXN1YWxseSB0cmlnZ2VyaW5nCglpbW1lZGlhdGUgbXV0YXRpb25zIGluIHRoZSBzdWJqZWN0LiAgRmFyIGZyb20gbmVlZGluZyBhbgoJZWxhYm9yYXRlIGxhYm9yYXRvcnkgdG8gYWNjb21wbGlzaCBzdWNoIGFib21pbmF0aW9ucywgYSBtZXJlCgl0b3VjaCBzZWVtcyB0byBiZSBhbGwgdGhhdCBpcyBuZWNlc3NhcnkuCglGb3J0aHdpdGggdGhhdCBpbWFnZSB2aWxlIG9mIGZyYXVkIGFwcGVhcidkLAoJSGlzIGhlYWQgYW5kIHVwcGVyIHBhcnQgZXhwb3MnZCBvbiBsYW5kLAoJQnV0IGxhaWQgbm90IG9uIHRoZSBzaG9yZSBoaXMgYmVzdGlhbCB0cmFpbi4KCUhpcyBmYWNlIHRoZSBzZW1ibGFuY2Ugb2YgYSBqdXN0IG1hbidzIHdvcmUsCglTbyBraW5kIGFuZCBncmFjaW91cyB3YXMgaXRzIG91dHdhcmQgY2hlZXI7CglUaGUgcmVzdCB3YXMgc2VycGVudCBhbGw6IHR3byBzaGFnZ3kgY2xhd3MKCVJlYWNoJ2QgdG8gdGhlIGFybXBpdHMsIGFuZCB0aGUgYmFjayBhbmQgYnJlYXN0LAoJQW5kIGVpdGhlciBzaWRlLCB3ZXJlIHBhaW50ZWQgbydlciB3aXRoIG5vZGVzCglBbmQgb3JiaXRzLiAgQ29sb3VycyB2YXJpZWdhdGVkIG1vcmUKCU5vciBUdXJrcyBub3IgVGFydGFycyBlJ2VyIG9uIGNsb3RoIG9mIHN0YXRlCglXaXRoIGludGVyY2hhbmdlYWJsZSBlbWJyb2lkZXJ5IHdvdmUsCglOb3Igc3ByZWFkIEFyYWNobmUgbydlciBoZXIgY3VyaW91cyBsb29tLgoJQXMgb2Z0dGltZXMgYSBsaWdodCBza2lmZiwgbW9vcidkIHRvIHRoZSBzaG9yZSwKCVN0YW5kcyBwYXJ0IGluIHdhdGVyLCBwYXJ0IHVwb24gdGhlIGxhbmQ7CglPciwgYXMgd2hlcmUgZHdlbGxzIHRoZSBncmVlZHkgR2VybWFuIGJvb3IsCglUaGUgYmVhdmVyIHNldHRsZXMgd2F0Y2hpbmcgZm9yIGhpcyBwcmV5OwoJU28gb24gdGhlIHJpbSwgdGhhdCBmZW5jJ2QgdGhlIHNhbmQgd2l0aCByb2NrLAoJU2F0IHBlcmNoJ2QgdGhlIGZpZW5kIG9mIGV2aWwuICBJbiB0aGUgdm9pZAoJR2xhbmNpbmcsIGhpcyB0YWlsIHVwdHVybidkIGl0cyB2ZW5vbW91cyBmb3JrLAoJV2l0aCBzdGluZyBsaWtlIHNjb3JwaW9uJ3MgYXJtJ2QuICBUaGVuIHRodXMgbXkgZ3VpZGU6CgkiTm93IG5lZWQgb3VyIHdheSBtdXN0IHR1cm4gZmV3IHN0ZXBzIGFwYXJ0LAoJRmFyIGFzIHRvIHRoYXQgaWxsIGJlYXN0LCB3aG8gY291Y2hlcyB0aGVyZS4iCgkJWyBUaGUgSW5mZXJubywgZnJvbSBUaGUgRGl2aW5lIENvbWVkeSBvZiBEYW50ZQoJCQlBbGlnaGllcmksIHRyYW5zbGF0ZWQgYnkgSC5GLiBDYXJ5IF0KCUFuZCBub3cgdGhlIHNvdWxzIG9mIHRoZSBkZWFkIHdobyBoYWQgZ29uZSBiZWxvdyBjYW1lIHN3YXJtaW5nCgl1cCBmcm9tIEVyZWJ1cyAtLSBmcmVzaCBicmlkZXMsIHVubWFycmllZCB5b3V0aHMsIG9sZCBtZW4KCXdpdGggbGlmZSdzIGxvbmcgc3VmZmVyaW5nIGJlaGluZCB0aGVtLCB0ZW5kZXIgeW91bmcgZ2lybHMKCXN0aWxsIG51cnNpbmcgdGhpcyBmaXJzdCBhbmd1aXNoIGluIHRoZWlyIGhlYXJ0cywgYW5kIGEgZ3JlYXQKCXRocm9uZyBvZiB3YXJyaW9ycyBraWxsZWQgaW4gYmF0dGxlLCB0aGVpciBzcGVhci13b3VuZHMgZ2FwaW5nCgl5ZXQgYW5kIGFsbCB0aGVpciBhcm1vdXIgc3RhaW5lZCB3aXRoIGJsb29kLiAgRnJvbSB0aGlzCgltdWx0aXR1ZGUgb2Ygc291bHMsIGFzIHRoZXkgZmx1dHRlcmVkIHRvIGFuZCBmcm8gYnkgdGhlCgl0cmVuY2gsIHRoZXJlIGNhbWUgYSBtb2FuaW5nIHRoYXQgd2FzIGhvcnJpYmxlIHRvIGhlYXIuCglQYW5pYyBkcmFpbmVkIHRoZSBibG9vZCBmcm9tIG15IGNoZWVrcy4KCSAgICAgWyBUaGUgT2R5c3NleSwgKGNoYXB0ZXIgTGFtYmRhKSwgYnkgSG9tZXIgXQoJVGhlIGZvcmNlcyBvZiB0aGUgZ2xvb20ga25vdyBlYWNoIG90aGVyLCBhbmQgYXJlIHN0cmFuZ2VseQoJYmFsYW5jZWQgYnkgZWFjaCBvdGhlci4gIFRlZXRoIGFuZCBjbGF3cyBmZWFyIHdoYXQgdGhleSBjYW5ub3QKCWdyYXNwLiAgQmxvb2QtZHJpbmtpbmcgYmVzdGlhbGl0eSwgdm9yYWNpb3VzIGFwcGV0aXRlcywgaHVuZ2VyCglpbiBzZWFyY2ggb2YgcHJleSwgdGhlIGFybWVkIGluc3RpbmN0cyBvZiBuYWlscyBhbmQgamF3cyB3aGljaAoJaGF2ZSBmb3Igc291cmNlIGFuZCBhaW0gdGhlIGJlbGx5LCBnbGFyZSBhbmQgc21lbGwgb3V0Cgl1bmVhc2lseSB0aGUgaW1wYXNzaXZlIHNwZWN0cmFsIGZvcm1zIHN0cmF5aW5nIGJlbmVhdGggYQoJc2hyb3VkLCBlcmVjdCBpbiBpdHMgdmFndWUgYW5kIHNodWRkZXJpbmcgcm9iZSwgYW5kIHdoaWNoIHNlZW0KCXRvIHRoZW0gdG8gbGl2ZSB3aXRoIGEgZGVhZCBhbmQgdGVycmlibGUgbGlmZS4gIFRoZXNlCglicnV0YWxpdGllcywgd2hpY2ggYXJlIG9ubHkgbWF0dGVyLCBlbnRlcnRhaW4gYSBjb25mdXNlZCBmZWFyCglvZiBoYXZpbmcgdG8gZGVhbCB3aXRoIHRoZSBpbW1lbnNlIG9ic2N1cml0eSBjb25kZW5zZWQgaW50byBhbgoJdW5rbm93biBiZWluZy4gIEEgYmxhY2sgZmlndXJlIGJhcnJpbmcgdGhlIHdheSBzdG9wcyB0aGUgd2lsZAoJYmVhc3Qgc2hvcnQuICBUaGF0IHdoaWNoIGVtZXJnZXMgZnJvbSB0aGUgY2VtZXRlcnkgaW50aW1pZGF0ZXMKCWFuZCBkaXNjb25jZXJ0cyB0aGF0IHdoaWNoIGVtZXJnZXMgZnJvbSB0aGUgY2F2ZTsgdGhlCglmZXJvY2lvdXMgZmVhciB0aGUgc2luaXN0ZXI7IHdvbHZlcyByZWNvaWwgd2hlbiB0aGV5IGVuY291bnRlcgoJYSBnaG91bC4KCQlbIExlcyBNaXNlcmFibGVzLCBieSBWaWN0b3IgSHVnbyBdCglHaWFudHMgaGF2ZSBhbHdheXMgd2Fsa2VkIHRoZSBlYXJ0aCwgdGhvdWdoIHRoZXkgYXJlIHJhcmUgaW4KCXRoZXNlIHRpbWVzLiAgVGhleSByYW5nZSBpbiBzaXplIGZyb20gbGl0dGxlIG92ZXIgbmluZSBmZWV0Cgl0byBhIHRvd2VyaW5nIHR3ZW50eSBmZWV0IG9yIG1vcmUuICBUaGUgbGFyZ2VyIG9uZXMgdXNlIGh1Z2UKCWJvdWxkZXJzIGFzIHdlYXBvbnMsIGh1cmxpbmcgdGhlbSBvdmVyIGxhcmdlIGRpc3RhbmNlcy4gIEFsbAoJdHlwZXMgb2YgZ2lhbnRzIHNoYXJlIGEgbG92ZSBmb3IgbWVuIC0gcm9hc3RlZCwgYm9pbGVkLCBvcgoJZnJpZWQuICBUaGVpciB0YWJsZSBtYW5uZXJzIGFyZSBsZWdlbmRhcnkuCgkuLi4gIEFuZCB0aGVuIGEgZ25vbWUgY2FtZSBieSwgY2FycnlpbmcgYSBidW5kbGUsIGFuIG9sZAoJZmVsbG93IHRocmVlIHRpbWVzIGFzIGxhcmdlIGFzIGFuIGltcCBhbmQgd2VhcmluZyBjbG90aGVzIG9mCglhIHNvcnQsIGVzcGVjaWFsbHkgYSBoYXQuICBBbmQgaGUgd2FzIGNsZWFybHkganVzdCBhcyBmcmlnaHRlbmVkCglhcyB0aGUgaW1wcyB0aG91Z2ggaGUgY291bGQgbm90IGdvIHNvIGZhc3QuICBSYW1vbiBBbG9uem8KCXNhdyB0aGF0IHRoZXJlIG11c3QgYmUgc29tZSBncmVhdCB0cm91YmxlIHRoYXQgd2FzIHZleGluZwoJbWFnaWNhbCB0aGluZ3M7IGFuZCwgc2luY2UgZ25vbWVzIHNwZWFrIHRoZSBsYW5ndWFnZSBvZiBtZW4sIGFuZAoJd2lsbCBhbnN3ZXIgaWYgc3Bva2VuIHRvIGdlbnRseSwgaGUgcmFpc2VkIGhpcyBoYXQsIGFuZCBhc2tlZAoJb2YgdGhlIGdub21lIGhpcyBuYW1lLiAgVGhlIGdub21lIGRpZCBub3Qgc3RvcCBoaXMgaGFzdHkKCXNodWZmbGUgYSBtb21lbnQgYXMgaGUgYW5zd2VyZWQgJ0FsYXJhYmEnIGFuZCBncmFiYmVkIHRoZSByaW0KCW9mIGhpcyBoYXQgYnV0IGZvcmdvdCB0byBkb2ZmIGl0LgoJJ1doYXQgaXMgdGhlIHRyb3VibGUsIEFsYXJhYmE/JyAgc2FpZCBSYW1vbiBBbG9uem8uCgknV2hpdGUgbWFnaWMuICBSdW4hJyAgc2FpZCB0aGUgZ25vbWUgLi4KCQlbIFRoZSBDaGFyd29tYW4ncyBTaGFkb3csIGJ5IExvcmQgRHVuc2FueSBdCgoJIk11Z2dsZXMgaGF2ZSBnYXJkZW4gZ25vbWVzLCB0b28sIHlvdSBrbm93LCIgSGFycnkgdG9sZCBSb24gYXMKCXRoZXkgY3Jvc3NlZCB0aGUgbGF3bi4KCSJZZWFoLCBJJ3ZlIHNlZW4gdGhvc2UgdGhpbmdzIHRoZXkgdGhpbmsgYXJlIGdub21lcywiIHNhaWQgUm9uLAoJYmVudCBkb3VibGUgd2l0aCBoaXMgaGVhZCBpbiBhIHBlb255IGJ1c2gsICJsaWtlIGZhdCBsaXR0bGUKCVNhbnRhIENsYXVzZXMgd2l0aCBmaXNoaW5nIHJvZHMuLi4iCglUaGVyZSB3YXMgYSB2aW9sZW50IHNjdWZmbGluZyBub2lzZSwgdGhlIHBlb255IGJ1c2ggc2h1ZGRlcmVkLAoJYW5kIFJvbiBzdHJhaWdodGVuZWQgdXAuICAiVGhpcyBpcyBhIGdub21lLCIgaGUgc2FpZCBncmltbHkuCgkiR2Vyb2ZmIG1lISBHZXJyb2ZmIG1lISIgc3F1ZWFsZWQgdGhlIGdub21lLgoJSXQgd2FzIGNlcnRhaW5seSBub3RoaW5nIGxpa2UgU2FudGEgQ2xhdXMuICBJdCB3YXMgc21hbGwgYW5kCglsZWF0aGVyeSBsb29raW5nLCB3aXRoIGEgbGFyZ2UsIGtub2JieSwgYmFsZCBoZWFkIGV4YWN0bHkgbGlrZQoJYSBwb3RhdG8uICBSb24gaGVsZCBpdCBhdCBhcm0ncyBsZW5ndGggYXMgaXQga2lja2VkIG91dCBhdCBoaW0KCXdpdGggaXRzIGhvcm55IGxpdHRsZSBmZWV0OyBoZSBncmFzcGVkIGl0IGFyb3VuZCB0aGUgYW5rbGVzCglhbmQgdHVybmVkIGl0IHVwc2lkZSBkb3duLgoJICBbIEhhcnJ5IFBvdHRlciBhbmQgdGhlIENoYW1iZXIgb2YgU2VjcmV0cywgYnkgSi4gSy4gUm93bGluZyBdCglOb3cgZ29ibGlucyBhcmUgY3J1ZWwsIHdpY2tlZCwgYW5kIGJhZC1oZWFydGVkLiAgVGhleSBtYWtlCglubyBiZWF1dGlmdWwgdGhpbmdzLCBidXQgdGhleSBtYWtlIG1hbnkgY2xldmVyIG9uZXMuICBUaGV5CgljYW4gdHVubmVsIGFuZCBtaW5lIGFzIHdlbGwgYXMgYW55IGJ1dCB0aGUgbW9zdCBza2lsbGVkCglkd2FydmVzLCB3aGVuIHRoZXkgdGFrZSB0aGUgdHJvdWJsZSwgdGhvdWdoIHRoZXkgYXJlIHVzdWFsbHkKCXVudGlkeSBhbmQgZGlydHkuICBIYW1tZXJzLCBheGVzLCBzd29yZHMsIGRhZ2dlcnMsIHBpY2theGVzLAoJdG9uZ3MsIGFuZCBhbHNvIGluc3RydW1lbnRzIG9mIHRvcnR1cmUsIHRoZXkgbWFrZSB2ZXJ5IHdlbGwsCglvciBnZXQgb3RoZXIgcGVvcGxlIHRvIG1ha2UgdG8gdGhlaXIgZGVzaWduLCBwcmlzb25lcnMgYW5kCglzbGF2ZXMgdGhhdCBoYXZlIHRvIHdvcmsgdGlsbCB0aGV5IGRpZSBmb3Igd2FudCBvZiBhaXIgYW5kCglsaWdodC4KCSAgICAgWyBUaGUgSG9iYml0LCBieSBKLlIuUi4gVG9sa2llbiBdCglHb2RkZXNzZXMgYW5kIEdvZHMgb3BlcmF0ZSBpbiBvbmVzLCB0aHJlZXNvbWVzLCBvciB3aG9sZQoJcGFudGhlb25zIG9mIG5pbmUgb3IgbW9yZSAoc2VlIFJlbGlnaW9uKS4gIE1vc3Qgb2YgdGhlbSBjbGFpbQoJdG8gaGF2ZSBtYWRlIHRoZSB3b3JsZCwgYW5kIHRoaXMgaXMgaW5kZWVkIGEgbGlrZWx5IGNsYWltIGluCgl0aGUgY2FzZSBvZiB0aHJlZXNvbWVzIG9yIHBhbnRoZW9uczogIEZhbnRhc3lsYW5kIGRvZXMgaGF2ZQoJdGhlIGFpciBvZiBoYXZpbmcgYmVlbiBtYWRlIGJ5IGEgY29tbWl0dGVlLiAgQnV0IGFsbCBHb2RkZXNzZXMKCWFuZCBHb2RzLCB3aGV0aGVyIHRoZXkgc2F5IHRoZXkgbWFkZSB0aGUgd29ybGQgb3Igbm90LCBoYXZlCgl2ZXJ5IGRldGFpbGVkIHNob3J0LXRlcm0gcGxhbnMgZm9yIGl0IHdoaWNoIHRoZXkgYXJlIGRldGVybWluZWQKCXRvIGNhcnJ5IG91dC4gIENvbnNlcXVlbnRseSB0aGV5IHRlbmQgdG8gcHVzaCBwZW9wbGUgaW50byB0aGUKCXJlcXVpcmVkIGFjdGlvbnMgYnkgdGhlIHVzZSBvZiBjb2luY2lkZW5jZSBvciBQcm9waGVjeSwgb3IganVzdAoJYnkgbmFycm93aW5nIGRvd24geW91ciBhdmFpbGFibGUgY2hvaWNlcyBvZiB3aGF0IHRvIGRvIG5leHQ6CglpZiBhIGRlaXR5IGlzIHB1c2hpbmcgeW91LCB0aGluZ3Mgd2lsbCBnbyBtaXNlcmFibHkgYmFkbHkgdW50aWwKCXRoZXJlIGlzIG9ubHkgb25lIGNob2ljZSBsZWZ0IHRvIHlvdS4KCSAgWyBUaGUgVG91Z2ggR3VpZGUgdG8gRmFudGFzeWxhbmQsIGJ5IERpYW5hIFd5bm5lIEpvbmVzIF0KCUEgbWV0YWwgb2YgY2hhcmFjdGVyaXN0aWMgeWVsbG93IGNvbG91ciwgdGhlIG1vc3QgcHJlY2lvdXMKCW1ldGFsIHVzZWQgYXMgYSBjb21tb24gY29tbWVyY2lhbCBtZWRpdW0gb2YgZXhjaGFuZ2UuICBTeW1ib2wsCglBdTsgYXQuIG5vLiA3OTsgYXQuIHd0LiAxOTcuMi4gIEl0IGlzIHRoZSBtb3N0IG1hbGxlYWJsZQoJYW5kIGR1Y3RpbGUgb2YgYWxsIG1ldGFscywgYW5kIHZlcnkgaGVhdnkgKHNwLiBnci4sIDE5LjMpLgoJSXQgaXMgcXVpdGUgdW5hbHRlcmFibGUgYnkgaGVhdCwgbW9pc3R1cmUsIGFuZCBtb3N0Cgljb3Jyb3NpdmUgYWdlbnRzLCBhbmQgdGhlcmVmb3JlIHdlbGwgc3VpdGVkIGZvciBpdHMgdXNlIGluCgljb2luIGFuZCBqZXdlbHJ5LgoJICAgICBbIFdlYnN0ZXIncyBOZXcgSW50ZXJuYXRpb25hbCBEaWN0aW9uYXJ5CgkJICBvZiB0aGUgRW5nbGlzaCBMYW5ndWFnZSwgU2Vjb25kIEVkaXRpb24gXQoJVGhlIGJlbGxvd3MgaGUgc2V0IGF3YXkgZnJvbSB0aGUgZmlyZSwgYW5kIGdhdGhlcmVkIGFsbCB0aGUgdG9vbHMKCXdoZXJld2l0aCBoZSB3cm91Z2h0IGludG8gYSBzaWx2ZXIgY2hlc3Q7IGFuZCB3aXRoIGEgc3BvbmdlIHdpcGVkCgloZSBoaXMgZmFjZSBhbmQgaGlzIHR3byBoYW5kcyB3aXRoYWwsIGFuZCBoaXMgbWlnaHR5IG5lY2sgYW5kCglzaGFnZ3kgYnJlYXN0LCBhbmQgcHV0IHVwb24gaGltIGEgdHVuaWMsIGFuZCBncmFzcGVkIGEgc3RvdXQgc3RhZmYsCglhbmQgd2VudCBmb3J0aCBoYWx0aW5nOyBidXQgdGhlcmUgbW92ZWQgc3dpZnRseSB0byBzdXBwb3J0IHRoZWlyCglsb3JkIGhhbmRtYWlkZW5zIHdyb3VnaHQgb2YgZ29sZCBpbiB0aGUgc2VtYmxhbmNlIG9mIGxpdmluZyBtYWlkcy4KCUluIHRoZW0gaXMgdW5kZXJzdGFuZGluZyBpbiB0aGVpciBoZWFydHMsIGFuZCBpbiB0aGVtIHNwZWVjaCBhbmQKCXN0cmVuZ3RoLCBhbmQgdGhleSBrbm93IGN1bm5pbmcgaGFuZGl3b3JrIGJ5IGdpZnQgb2YgdGhlIGltbW9ydGFsCglnb2RzLgoJCVsgVGhlIElsaWFkLCBieSBIb21lciBdCgkiVGhlIG9yaWdpbmFsIHN0b3J5IGhhcmtzIGJhY2ssIHNvIHRoZXkgc2F5LCB0byB0aGUgc2l4dGVlbnRoCgljZW50dXJ5LiAgVXNpbmcgbG9uZy1sb3N0IGZvcm11bGFzIGZyb20gdGhlIEthYmJhbGEsIGEgcmFiYmkgaXMKCXNhaWQgdG8gaGF2ZSBtYWRlIGFuIGFydGlmaWNpYWwgbWFuIC0tIHRoZSBzby1jYWxsZWQgR29sZW0gLS0gdG8KCWhlbHAgcmluZyB0aGUgYmVsbHMgaW4gdGhlIFN5bmFnb2d1ZSBhbmQgZm9yIGFsbCBraW5kcyBvZiBvdGhlcgoJbWVuaWFsIHdvcmsuCgkiQnV0IGhlIGhhZG4ndCBtYWRlIGEgZnVsbCBtYW4sIGFuZCBpdCB3YXMgYW5pbWF0ZWQgYnkgc29tZSBzb3J0CglvZiB2ZWdldGFibGUgaGFsZi1saWZlLiAgV2hhdCBsaWZlIGl0IGhhZCwgdG9vLCBzbyB0aGUgc3RvcnkKCXJ1bnMsIHdhcyBvbmx5IGRlcml2ZWQgZnJvbSB0aGUgbWFnaWMgY2hhcm0gcGxhY2VkIGJlaGluZCBpdHMKCXRlZXRoIGVhY2ggZGF5LCB0aGF0IGRyZXcgZG93biB0byBpdHNlbGYgd2hhdCB3YXMga25vd24gYXMgdGhlCglgZnJlZSBzaWRlcmVhbCBzdHJlbmd0aCBvZiB0aGUgdW5pdmVyc2UuJwoJIk9uZSBldmVuaW5nLCBiZWZvcmUgZXZlbmluZyBwcmF5ZXJzLCB0aGUgcmFiYmkgZm9yZ290IHRvIHRha2UKCXRoZSBjaGFybSBvdXQgb2YgdGhlIEdvbGVtJ3MgbW91dGgsIGFuZCBpdCBmZWxsIGludG8gYSBmcmVuenkuCglJdCByYWdlZCB0aHJvdWdoIHRoZSBkYXJrIHN0cmVldHMsIHNtYXNoaW5nIGV2ZXJ5dGhpbmcgaW4gaXRzCglwYXRoLCB1bnRpbCB0aGUgcmFiYmkgY2F1Z2h0IHVwIHdpdGggaXQsIHJlbW92ZWQgdGhlIGNoYXJtLCBhbmQKCWRlc3Ryb3llZCBpdC4gIFRoZW4gdGhlIEdvbGVtIGNvbGxhcHNlZCwgbGlmZWxlc3MuICBBbGwgdGhhdCB3YXMKCWxlZnQgb2YgaXQgd2FzIGEgc21hbGwgY2xheSBpbWFnZSwgd2hpY2ggeW91IGNhbiBzdGlsbCBzZWUgaW4KCXRoZSBPbGQgU3luYWdvZ3VlLiIgLi4uCgkgICAgWyBUaGUgR29sZW0sIGJ5IEd1c3RhdiBNZXlyaW5rIF0KCSJXaG8nZCBjYXJlIHRvIGRpZyAnZW0sIiBzYWlkIHRoZSBvbGQsIG9sZCBtYW4sCgkiVGhvc2Ugc2l4IGZlZXQgbWFya2VkIGluIGNoYWxrPwoJTXVjaCBJIHRhbGssIG1vcmUgSSB3YWxrOwoJVGltZSBJIHdlcmUgYnVyaWVkLCIgc2FpZCB0aGUgb2xkLCBvbGQgbWFuLgoJCVsgVGhyZWUgU29uZ3MgdG8gdGhlIFNhbWUgVHVuZSwgYnkgVy5CLiBZZWF0cyBdCglXaHkgaGFkIEkgYmVlbiB3ZWFyaW5nIEdyYXlzd2FuZGlyPyAgV291bGQgYW5vdGhlciB3ZWFwb24gaGF2ZQoJYWZmZWN0ZWQgYSBMb2dydXMtZ2hvc3QgYXMgc3Ryb25nbHk/ICBIYWQgaXQgcmVhbGx5IGJlZW4gbXkKCWZhdGhlciwgdGhlbiwgd2hvIGhhZCBicm91Z2h0IG1lIGhlcmU/ICBBbmQgaGFkIGhlIGZlbHQgSSBtaWdodAoJbmVlZCB0aGUgZXh0cmEgZWRnZSBoaXMgd2VhcG9uIGNvdWxkIHByb3ZpZGU/ICBJIHdhbnRlZCB0bwoJdGhpbmsgc28sIHRvIGJlbGlldmUgdGhhdCBoZSBoYWQgYmVlbiBtb3JlIHRoYW4gYSBQYXR0ZXJuLWdob3N0LgoJCVsgS25pZ2h0IG9mIFNoYWRvd3MsIGJ5IFJvZ2VyIFplbGF6bnkgXQoJQU5PSU5ULCB2LnQuICBUbyBncmVhc2UgYSBraW5nIG9yIG90aGVyIGdyZWF0IGZ1bmN0aW9uYXJ5CglhbHJlYWR5IHN1ZmZpY2llbnRseSBzbGlwcGVyeS4KCQlbIFRoZSBEZXZpbCdzIERpY3Rpb25hcnksIGJ5IEFtYnJvc2UgQmllcmNlIF0KCVRoZSBncmVtbGluIGlzIGEgaGlnaGx5IGludGVsbGlnZW50IGFuZCBjb21wbGV0ZWx5IGV2aWwKCWNyZWF0dXJlLiAgSXQgbGl2ZXMgdG8gdG9ybWVudCBvdGhlciBjcmVhdHVyZXMgYW5kIHdpbGwgZ28KCXRvIGdyZWF0IGxlbmd0aHMgdG8gaW5mbGljdCBwYWluIG9yIGNhdXNlIGluanVyeS4KCQlbXQoKCVN1ZGRlbmx5LCBXaWxzb24gdGhvdWdodCBhYm91dCB3YXIsIGFib3V0IHRoZSBuZXdzcGFwZXIKCXN0b3JpZXMgd2hpY2ggcmVjb3VudGVkIHRoZSBhbGxlZ2VkIGV4aXN0ZW5jZSBvZiBjcmVhdHVyZXMgaW4KCXRoZSBza3kgd2hvIHBsYWd1ZWQgdGhlIEFsbGllZCBwaWxvdHMgaW4gdGhlaXIgZHV0aWVzLiAgVGhleQoJY2FsbGVkIHRoZW0gZ3JlbWxpbnMsIGhlIHJlbWVtYmVyZWQuICBXZXJlIHRoZXJlLCBhY3R1YWxseSwKCXN1Y2ggYmVpbmdzPyAgRGlkIHRoZXksIHRydWx5LCBleGlzdCB1cCBoZXJlLCBuZXZlciBmYWxsaW5nLAoJcmlkaW5nIG9uIHRoZSB3aW5kLCBhcHBhcmVudGx5IG9mIGJ1bGsgYW5kIHdlaWdodCwgeWV0CglpbXBlcnZpb3VzIHRvIGdyYXZpdHk/CglIZSB3YXMgdGhpbmtpbmcgdGhhdCB3aGVuIHRoZSBtYW4gYXBwZWFyZWQgYWdhaW4uCgkJWyBOaWdodG1hcmUgYXQgMjAsMDAwIEZlZXQsIGJ5IFJpY2hhcmQgTWF0aGVzb24gXQoJVGhlc2UgZWxlY3Ryb25pY2FsbHkgYmFzZWQgY3JlYXR1cmVzIGFyZSBub3QgbmF0aXZlIHRvIHRoaXMKCXVuaXZlcnNlLiAgVGhleSBhcHBlYXIgdG8gY29tZSBmcm9tIGEgd29ybGQgd2hvc2UgbGF3cyBvZgoJbW90aW9uIGFyZSByYWRpY2FsbHkgZGlmZmVyZW50IGZyb20gb3Vycy4KCSAgICBbXQoKCVRyb24gbG9va2VkIHRvIGhpcyBtYXRlIGFuZCBwaWxvdC4gICJJJ20gZ29pbmcgdG8gY2hlY2sgb24KCXRoZSBiZWFtIGNvbm5lY3Rpb24sIFlvcmkuICBZb3UgdHdvIGNhbiBrZWVwIGEgd2F0Y2ggb3V0IGZvcgoJZ3JpZCBidWdzLiIgIFRyb24gcGFjZWQgZm9yd2FyZCBhbG9uZyB0aGUgc2xlbmRlciBjYXR3YWxrCgl0aGF0IHN0aWxsIHNlZW1lZCBhd2Z1bGx5IGluc3Vic3RhbnRpYWwgdG8gRmx5bm4sIHRob3VnaCBoZQoJa25ldyBpdCB0byBiZSBhbWF6aW5nbHkgc3R1cmR5LiAgSGUgZ2F6ZWQgYWZ0ZXIgVHJvbiwgYXNraW5nCgloaW1zZWxmIHdoYXQgaW4gdGhlIHdvcmxkIGEgZ3JpZCBidWcgd2FzLCBhbmQgaG9waW5nIHRoYXQgdGhlCgliZWFtIGNvbm5lY3Rpb24gLS0gdG8gd2hpY2ggaGUnZCBnaXZlbiBubyB0aG91Z2h0IHdoYXRzb2V2ZXIKCXVudGlsIHRoaXMgbW9tZW50IC0tIHdhcyBoZWFsdGh5IGFuZCBzb3VuZC4iCgkgICAgWyBUcm9uLCBub3ZlbCBieSBCcmlhbiBEYWxleSwgc3RvcnkgYnkgU3RldmVuIExpc2JlcmdlciBdCglUaGUgc2FtdXJhaSdzIGxhc3QgbWVhbCBiZWZvcmUgYmF0dGxlLiAgSXQgd2FzIHVzdWFsbHkgbWFkZQoJdXAgb2YgY29va2VkIGNoZXN0bnV0cywgZHJpZWQgc2Vhd2VlZCwgYW5kIHNha2UuCglIYWNoaSB3YXMgYSBkb2cgdGhhdCB3ZW50IHdpdGggaGlzIG1hc3RlciwgYSBwcm9mZXNzb3IsIHRvCgl0aGUgU2hpYnV5YSB0cmFpbiBzdGF0aW9uIGV2ZXJ5IG1vcm5pbmcuICBJbiB0aGUgYWZ0ZXJub29uLAoJd2hlbiBoaXMgbWFzdGVyIHdhcyB0byByZXR1cm4gZnJvbSB3b3JrIEhhY2hpIHdvdWxkIGJlIHRoZXJlCgl3YWl0aW5nLiAgT25lIGRheSBoaXMgbWFzdGVyIGRpZWQgYXQgdGhlIG9mZmljZSwgYW5kIGRpZCBub3QKCXJldHVybi4gIEZvciBvdmVyIHRlbiB5ZWFycyBIYWNoaSByZXR1cm5lZCB0byB0aGUgc3RhdGlvbgoJZXZlcnkgYWZ0ZXJub29uIHRvIHdhaXQgZm9yIGhpcyBtYXN0ZXIuICBXaGVuIEhhY2hpIGRpZWQgYQoJc3RhdHVlIHdhcyBlcmVjdGVkIG9uIHRoZSBzdGF0aW9uIHBsYXRmb3JtIGluIGhpcyBob25vci4gIEl0CglpcyBzYWlkIHRvIGJyaW5nIHlvdSBsdWNrIGlmIHlvdSB0b3VjaCBoaXMgc3RhdHVlLgoJQSB0cmlhbmd1bGFyIHN0cmluZ2VkIGluc3RydW1lbnQsIG9mdGVuIE1hZ2ljLiAgRXZlbiB3aGVuIG5vdAoJTWFnaWMsIGEgSGFycCBpcyBzdXJwcmlzaW5nbHkgcG9ydGFibGUgYW5kIHRvdWdoIGFuZCBjYW4gYmUKCWNhcnJpZWQgZXZlcnl3aGVyZSBvbiB0aGUgYmFjayBvZiB0aGUgQmFyZCBvciBIYXJwZXIgaW4gYWxsCgl3ZWF0aGVycy4gIEEgSGFycCBzZWxkb20gZ29lcyBvdXQgb2YgdHVuZSBhbmQgbmV2ZXIgd2FycHMuCglJdHMgc3RyaW5ncyBicmVhayBvbmx5IGluIHZlcnkgcmFyZSBpbnN0YW5jZXMsIHVzdWFsbHkKCWJlY2F1c2UgdGhlIEhhcnBlciBpcyBzdWxraW5nIG9yIGNyb3NzZWQgaW4gbG92ZS4gIFRoaXMgaXMKCWp1c3QgYXMgd2VsbCBhcyBubyBvbmUgc2VlbXMgdG8gbWFrZSBvciBzZWxsIHNwYXJlIHN0cmluZ3MuCgkgIFsgVGhlIFRvdWdoIEd1aWRlIHRvIEZhbnRhc3lsYW5kLCBieSBEaWFuYSBXeW5uZSBKb25lcyBdCgoJQWZ0ZXIgYnJlYWtmYXN0IHdhcyBvdmVyLCB0aGUgb2dyZSBjYWxsZWQgb3V0OiAiV2lmZSwgd2lmZSwKCWJyaW5nIG1lIG15IGdvbGRlbiBoYXJwLiIgIFNvIHNoZSBicm91Z2h0IGl0IGFuZCBwdXQgaXQgb24KCXRoZSB0YWJsZSBiZWZvcmUgaGltLiAgVGhlbiBoZSBzYWlkOiAiU2luZyEiIGFuZCB0aGUgZ29sZGVuCgloYXJwIHNhbmcgbW9zdCBiZWF1dGlmdWxseS4gIEFuZCBpdCB3ZW50IG9uIHNpbmdpbmcgdGlsbCB0aGUKCW9ncmUgZmVsbCBhc2xlZXAsIGFuZCBjb21tZW5jZWQgdG8gc25vcmUgbGlrZSB0aHVuZGVyLgoJVGhlbiBKYWNrIGxpZnRlZCB1cCB0aGUgY29wcGVyLWxpZCB2ZXJ5IHF1aWV0bHkgYW5kIGdvdCBkb3duCglsaWtlIGEgbW91c2UgYW5kIGNyZXB0IG9uIGhhbmRzIGFuZCBrbmVlcyB0aWxsIGhlIGNhbWUgdG8gdGhlCgl0YWJsZSwgd2hlbiB1cCBoZSBjcmF3bGVkLCBjYXVnaHQgaG9sZCBvZiB0aGUgZ29sZGVuIGhhcnAgYW5kCglkYXNoZWQgd2l0aCBpdCB0b3dhcmRzIHRoZSBkb29yLiAgQnV0IHRoZSBoYXJwIGNhbGxlZCBvdXQKCXF1aXRlIGxvdWQ6ICJNYXN0ZXIhICBNYXN0ZXIhIiBhbmQgdGhlIG9ncmUgd29rZSB1cCBqdXN0IGluCgl0aW1lIHRvIHNlZSBKYWNrIHJ1bm5pbmcgb2ZmIHdpdGggaGlzIGhhcnAuCgkJWyBKYWNrIGFuZCB0aGUgQmVhbnN0YWxrLCBmcm9tIEVuZ2xpc2ggRmFpcnkgVGFsZXMsCgkJICBieSBKb3NlcGggSmFjb2JzIF0KCSdPbmUgb2YgdGhlIHRoaW5ncyBoZSBjYW4ndCBkbywgaGUgY2FuJ3QgcmlkZSBhIGhvcnNlLCcgaGUKCXNhaWQuICBUaGVuIGhlIHN0aWZmZW5lZCBhcyBpZiBzYW5kYmFnZ2VkIGJ5IGEgc3VkZGVuCglyZWNvbGxlY3Rpb24sIGdhdmUgYSBzbWFsbCB5ZWxwIG9mIHRlcnJvciBhbmQgZGFzaGVkIGludG8KCXRoZSBnbG9vbS4gIFdoZW4gaGUgcmV0dXJuZWQsIHRoZSBiZWluZyBjYWxsZWQgVHdvZmxvd2VyIHdhcwoJaGFuZ2luZyBsaW1wbHkgb3ZlciBoaXMgc2hvdWxkZXIuICBJdCB3YXMgc21hbGwgYW5kIHNraW5ueSwKCWFuZCBkcmVzc2VkIHZlcnkgb2RkbHkgaW4gYSBwYWlyIG9mIGtuZWUtbGVuZ3RoIGJyaXRjaGVzIGFuZAoJYSBzaGlydCBpbiBzdWNoIGEgdmlvbGVudCBhbmQgdml2aWQgY29uZmxpY3Qgb2YgY29sb3VycyB0aGF0Cgl0aGUgV2Vhc2VsJ3MgZmFzdGlkaW91cyBleWUgd2FzIG9mZmVuZGVkIGV2ZW4gaW4gdGhlIGhhbGYtbGlnaHQuCgkJWyBUaGUgQ29sb3VyIG9mIE1hZ2ljLCBieSBUZXJyeSBQcmF0Y2hldHQgXQoJSSBzd2VhciBieSBBcG9sbG8gdGhlIHBoeXNpY2lhbiwgYW5kIEFlc2N1bGFwaXVzLCBhbmQgSGVhbHRoLAoJYW5kIEFsbC1oZWFsLCBhbmQgYWxsIHRoZSBnb2RzIGFuZCBnb2RkZXNzZXMsIHRoYXQsIGFjY29yZGluZwoJdG8gbXkgYWJpbGl0eSBhbmQganVkZ21lbnQsIEkgd2lsbCBrZWVwIHRoaXMgT2F0aCBhbmQgdGhpcwoJc3RpcHVsYXRpb24gLS0gdG8gcmVja29uIGhpbSB3aG8gdGF1Z2h0IG1lIHRoaXMgQXJ0IGVxdWFsbHkgZGVhcgoJdG8gbWUgYXMgbXkgcGFyZW50cywgdG8gc2hhcmUgbXkgc3Vic3RhbmNlIHdpdGggaGltLCBhbmQgcmVsaWV2ZQoJaGlzIG5lY2Vzc2l0aWVzIGlmIHJlcXVpcmVkOyB0byBsb29rIHVwb24gaGlzIG9mZnNwcmluZyBpbiB0aGUKCXNhbWUgZm9vdGluZyBhcyBteSBvd24gYnJvdGhlcnMsIGFuZCB0byB0ZWFjaCB0aGVtIHRoaXMgYXJ0LCBpZgoJdGhleSBzaGFsbCB3aXNoIHRvIGxlYXJuIGl0LCB3aXRob3V0IGZlZSBvciBzdGlwdWxhdGlvbjsgYW5kCgl0aGF0IGJ5IHByZWNlcHQsIGxlY3R1cmUsIGFuZCBldmVyeSBvdGhlciBtb2RlIG9mIGluc3RydWN0aW9uLAoJSSB3aWxsIGltcGFydCBhIGtub3dsZWRnZSBvZiB0aGUgQXJ0IHRvIG15IG93biBzb25zLCBhbmQgdGhvc2UKCW9mIG15IHRlYWNoZXJzLCBhbmQgdG8gZGlzY2lwbGVzIGJvdW5kIGJ5IGEgc3RpcHVsYXRpb24gYW5kIG9hdGgKCWFjY29yZGluZyB0byB0aGUgbGF3IG9mIG1lZGljaW5lLCBidXQgdG8gbm9uZSBvdGhlcnMuICBJIHdpbGwKCWZvbGxvdyB0aGF0IHN5c3RlbSBvZiByZWdpbWVuIHdoaWNoLCBhY2NvcmRpbmcgdG8gbXkgYWJpbGl0eSBhbmQKCWp1ZGdtZW50LCBJIGNvbnNpZGVyIGZvciB0aGUgYmVuZWZpdCBvZiBteSBwYXRpZW50cywgYW5kIGFic3RhaW4KCWZyb20gd2hhdGV2ZXIgaXMgZGVsZXRlcmlvdXMgYW5kIG1pc2NoaWV2b3VzLiAgWy4uLl0KCQlbIEhpcHBvY3JhdGVzJyBPYXRoLCB0cmFuc2xhdGVkIGJ5IEZyYW5jaXMgQWRhbXMgXQoKCVBIWVNJQ0lBTiwgbi4gIE9uZSB1cG9uIHdob20gd2Ugc2V0IG91ciBob3BlcyB3aGVuIGlsbCBhbmQgb3VyCglkb2dzIHdoZW4gd2VsbC4KCQlbIFRoZSBEZXZpbCdzIERpY3Rpb25hcnksIGJ5IEFtYnJvc2UgQmllcmNlIF0KCVRoZSBvdGhlciB0aHJlZSBkcmV3IGluIHRoZWlyIGJyZWF0aCBzaGFycGx5LCBhbmQgdGhlIGRhcmssCglwb3dlcmZ1bCBtYW4gd2hvIHN0b29kIGF0IHRoZSBoZWFkIG9mIHRoZSBzYXJjb3BoYWd1cyB3aGlzcGVyZWQ6CgkiVGhlIEhlYXJ0IG9mIEFocmltYW4hIiAgVGhlIG90aGVyIGxpZnRlZCBhIHF1aWNrIGhhbmQKCWZvciBzaWxlbmNlLiAgU29tZXdoZXJlIGEgZG9nIGJlZ2FuIGhvd2xpbmcgZG9sZWZ1bGx5LCBhbmQgYQoJc3RlYWx0aHkgc3RlcCBwYWRkZWQgb3V0c2lkZSB0aGUgYmFycmVkIGFuZCBib2x0ZWQgZG9vci4gLi4uCglCdXQgbm9uZSBsb29rZWQgYXNpZGUgZnJvbSB0aGUgbXVtbXkgY2FzZSBvdmVyIHdoaWNoIHRoZSBtYW4KCWluIHRoZSBlcm1pbmUtdHJpbW1lZCByb2JlIHdhcyBub3cgbW92aW5nIHRoZSBncmVhdCBmbGFtaW5nCglqZXdlbCwgd2hpbGUgaGUgbXV0dGVyZWQgYW4gaW5jYW50YXRpb24gdGhhdCB3YXMgb2xkIHdoZW4KCUF0bGFudGlzIHNhbmsuICBUaGUgZ2xhcmUgb2YgdGhlIGdlbSBkYXp6bGVkIHRoZWlyIGV5ZXMsIHNvCgl0aGF0IHRoZXkgY291bGQgbm90IGJlIHN1cmUgd2hhdCB0aGV5IHNhdzsgYnV0IHdpdGggYQoJc3BsaW50ZXJpbmcgY3Jhc2gsIHRoZSBjYXJ2ZW4gbGlkIG9mIHRoZSBzYXJjb3BoYWd1cyBidXJzdAoJb3V0d2FyZCBhcyBpZiBmcm9tIHNvbWUgaXJyZXNpc3RpYmxlIHByZXNzdXJlIGFwcGxpZWQgZnJvbQoJd2l0aGluIGFuZCB0aGUgZm91ciBtZW4sIGJlbmRpbmcgZWFnZXJseSBmb3J3YXJkLCBzYXcgdGhlCglvY2N1cGFudCAtLSBhIGh1ZGRsZWQsIHdpdGhlcmVkLCB3aXplbmVkIHNoYXBlLCB3aXRoIGRyaWVkCglicm93biBsaW1icyBsaWtlIGRlYWQgd29vZCBzaG93aW5nIHRocm91Z2ggbW9sZGVyaW5nIGJhbmRhZ2VzLgoJIkJyaW5nIHRoYXQgdGhpbmcgYmFjaz8iIG11dHRlcmVkIHRoZSBzbWFsbCBkYXJrIG1hbiB3aG8KCXN0b29kIG9uIHRoZSByaWdodCwgd2l0aCBhIHNob3J0LCBzYXJkb25pYyBsYXVnaC4gICJJdCBpcwoJcmVhZHkgdG8gY3J1bWJsZSBhdCBhIHRvdWNoLiAgV2UgYXJlIGZvb2xzIC0tLSIKCQlbIENvbmFuIFRoZSBDb25xdWVyb3IsIGJ5IFJvYmVydCBFLiBIb3dhcmQgXQoJQnV0IHN1ZGRlbmx5IHRoZXkgc3RhcnRlZCBmb3J3YXJkIGluIGEgcmlnaWQsIGZpeGVkIHN0YXJlLAoJYW5kIGhpcyBsaXBzIHBhcnRlZCBpbiBhbWF6ZW1lbnQuICBBdCB0aGUgc2FtZSBpbnN0YW50IExlc3RyYWRlCglnYXZlIGEgeWVsbCBvZiB0ZXJyb3IgYW5kIHRocmV3IGhpbXNlbGYgZmFjZSBkb3dud2FyZCB1cG9uIHRoZQoJZ3JvdW5kLiAgSSBzcHJhbmcgdG8gbXkgZmVldCwgbXkgaW5lcnQgaGFuZCBncmFzcGluZyBteSBwaXN0b2wsCglteSBtaW5kIHBhcmFseXplZCBieSB0aGUgZHJlYWRmdWwgc2hhcGUgd2hpY2ggaGFkIHNwcnVuZyBvdXQKCXVwb24gdXMgZnJvbSB0aGUgc2hhZG93cyBvZiB0aGUgZm9nLiAgQSBob3VuZCBpdCB3YXMsIGFuCgllbm9ybW91cyBjb2FsLWJsYWNrIGhvdW5kLCBidXQgbm90IHN1Y2ggYSBob3VuZCBhcyBtb3J0YWwgZXllcwoJaGF2ZSBldmVyIHNlZW4uICBGaXJlIGJ1cnN0IGZyb20gaXRzIG9wZW4gbW91dGgsIGl0cyBleWVzCglnbG93ZWQgd2l0aCBhIHNtb3VsZGVyaW5nIGdsYXJlLCBpdHMgbXV6emxlIGFuZCBoYWNrbGVzIGFuZAoJZGV3bGFwIHdlcmUgb3V0bGluZWQgaW4gZmxpY2tlcmluZyBmbGFtZS4gIE5ldmVyIGluIHRoZQoJZGVsaXJpb3VzIGRyZWFtIG9mIGEgZGlzb3JkZXJlZCBicmFpbiBjb3VsZCBhbnl0aGluZyBtb3JlCglzYXZhZ2UsIG1vcmUgYXBwYWxsaW5nLCBtb3JlIGhlbGxpc2ggYmUgY29uY2VpdmVkIHRoYW4gdGhhdAoJZGFyayBmb3JtIGFuZCBzYXZhZ2UgZmFjZSB3aGljaCBicm9rZSB1cG9uIHVzIG91dCBvZiB0aGUgd2FsbAoJb2YgZm9nLgoJICBbIFRoZSBIb3VuZCBvZiB0aGUgQmFza2VydmlsbGVzLCBieSBTaXIgQXJ0aHVyIENvbmFuIERveWxlLiBdCglNZXNzZW5nZXIgYW5kIGhlcmFsZCBvZiB0aGUgT2x5bXBpYW5zLiAgQmVpbmcgcmVxdWlyZWQgdG8gZG8KCWEgZ3JlYXQgZGVhbCBvZiB0cmF2ZWxsaW5nIGFuZCBzcGVha2luZyBpbiBwdWJsaWMsIGhlIGJlY2FtZQoJdGhlIGdvZCBvZiBlbG9xdWVuY2UsIHRyYXZlbGxlcnMsIG1lcmNoYW50cywgYW5kIHRoaWV2ZXMuICBIZQoJd2FzIG9uZSBvZiB0aGUgbW9zdCBlbmVyZ2V0aWMgb2YgdGhlIEdyZWVrIGdvZHMsIGEKCU1hY2hpYXZlbGxpYW4gY2hhcmFjdGVyIGZ1bGwgb2YgdHJpY2tlcnkgYW5kIHNleHVhbCB2aWdvdXIuCglMaWtlIG90aGVyIEdyZWVrIGdvZHMsIGhlIGlzIGVuZG93ZWQgd2l0aCBub3QtaW5jb25zaWRlcmFibGUKCXNleHVhbCBwcm93ZXNzIHdoaWNoIGhlIGRpcmVjdHMgdG93YXJkcyBjb3VudHJ5c2lkZSBueW1waHMuCglIZSBpcyBhIGdvZCBvZiBib3VuZGFyaWVzLCBndWFyZGlhbiBvZiBncmF2ZXMgYW5kIHBhdHJvbiBkZWl0eQoJb2Ygc2hlcGhlcmRzLiAgSGUgaXMgdXN1YWxseSBkZXBpY3RlZCBhcyBhIGhhbmRzb21lIHlvdW5nCgltYW4gd2VhcmluZyB3aW5nZWQgZ29sZGVuIHNhbmRhbHMgYW5kIGhvbGRpbmcgYSBtYWdpY2FsCgloZXJhbGQncyBzdGFmZiBjb25zaXN0aW5nIG9mIGludGVydHdpbmVkIHNlcnBlbnRzLCB0aGUKCWtlcnlrZWlvbi4gIEhlIGlzIHJlcHV0ZWRseSB0aGUgb25seSBiZWluZyBhYmxlIHRvIGZpbmQgaGlzIHdheQoJdG8gdGhlIHVuZGVyd29ybGQgZmVycnkgb2YgQ2hhcm9uIGFuZCBiYWNrIGFnYWluLiAgSGUgaXMgc2FpZAoJdG8gaGF2ZSBpbnZlbnRlZCwgYW1vbmcgb3RoZXIgdGhpbmdzLCB0aGUgbHlyZSwgUGFuJ3MgUGlwZXMsCgludW1iZXJzLCB0aGUgYWxwaGFiZXQsIHdlaWdodHMgYW5kIG1lYXN1cmVzLCBhbmQgc2FjcmlmaWNpbmcuCgkiSGV6cm91IiBpcyB0aGUgY29tbW9uIG5hbWUgZm9yIHRoZSB0eXBlIElJIGRlbW9uLiAgSXQgaXMKCWFtb25nIHRoZSB3ZWFrZXIgb2YgZGVtb25zLCBidXQgc3RpbGwgcXVpdGUgZm9ybWlkYWJsZSwKCW1vc3RseSBkdWUgdG8gdGhlIHN0ZW5jaC4KCUdyZWVrIHBoeXNpY2lhbiwgcmVjb2duaXplZCBhcyB0aGUgZmF0aGVyIG9mIG1lZGljaW5lLiAgSGUKCWlzIGJlbGlldmVkIHRvIGhhdmUgYmVlbiBib3JuIG9uIHRoZSBpc2xhbmQgb2YgQ29zLCB0byBoYXZlCglzdHVkaWVkIHVuZGVyIGhpcyBmYXRoZXIsIGEgcGh5c2ljaWFuLCB0byBoYXZlIHRyYXZlbGVkIGZvcgoJc29tZSB0aW1lLCBwZXJoYXBzIHN0dWR5aW5nIGluIEF0aGVucywgYW5kIHRvIGhhdmUgdGhlbgoJcmV0dXJuZWQgdG8gcHJhY3RpY2UsIHRlYWNoLCBhbmQgd3JpdGUgYXQgQ29zLiAgVGhlCglIaXBwb2NyYXRpYyBvciBDb2FuIHNjaG9vbCB0aGF0IGZvcm1lZCBhcm91bmQgaGltIHdhcyBvZgoJZW5vcm1vdXMgaW1wb3J0YW5jZSBpbiBzZXBhcmF0aW5nIG1lZGljaW5lIGZyb20gc3VwZXJzdGl0aW9uCglhbmQgcGhpbG9zb3BoaWMgc3BlY3VsYXRpb24sIHBsYWNpbmcgaXQgb24gYSBzdHJpY3RseQoJc2NpZW50aWZpYyBwbGFuZSBiYXNlZCBvbiBvYmplY3RpdmUgb2JzZXJ2YXRpb24gYW5kIGNyaXRpY2FsCglkZWR1Y3RpdmUgcmVhc29uaW5nLgoJCVsgVGhlIENvbHVtYmlhIEVuY3ljbG9wZWRpYSwgU2l4dGggRWRpdGlvbiBdCglIb2JiaXRzIGFyZSBhbiB1bm9idHJ1c2l2ZSBidXQgdmVyeSBhbmNpZW50IHBlb3BsZSwgbW9yZQoJbnVtZXJvdXMgZm9ybWVybHkgdGhhbiB0aGV5IGFyZSB0b2RheTsgZm9yIHRoZXkgbG92ZSBwZWFjZQoJYW5kIHF1aWV0IGFuZCBnb29kIHRpbGxlZCBlYXJ0aDogIGEgd2VsbC1vcmRlcmVkIGFuZCB3ZWxsLQoJZmFybWVkIGNvdW50cnlzaWRlIHdhcyB0aGVpciBmYXZvdXJpdGUgaGF1bnQuICBUaGV5IGRvIG5vdAoJYW5kIGRpZCBub3QgdW5kZXJzdGFuZCBvciBsaWtlIG1hY2hpbmVzIG1vcmUgY29tcGxpY2F0ZWQKCXRoYW4gYSBmb3JnZS1iZWxsb3dzLCBhIHdhdGVyLW1pbGwsIG9yIGEgaGFuZGxvb20sIGFsdGhvdWdoCgl0aGV5IHdlcmUgc2tpbGxmdWwgd2l0aCB0b29scy4gIEV2ZW4gaW4gYW5jaWVudCBkYXlzIHRoZXkKCXdlcmUsIGFzIGEgcnVsZSwgc2h5IG9mICJ0aGUgQmlnIEZvbGsiLCBhcyB0aGV5IGNhbGwgdXMsIGFuZAoJbm93IHRoZXkgYXZvaWQgdXMgd2l0aCBkaXNtYXkgYW5kIGFyZSBiZWNvbWluZyBoYXJkIHRvIGZpbmQuCgkJWyBUaGUgRmVsbG93c2hpcCBvZiB0aGUgUmluZywgYnkgSi5SLlIuIFRvbGtpZW4gXQoJSG9iZ29ibGluLiAgVXNlZCBieSB0aGUgUHVyaXRhbnMgYW5kIGluIGxhdGVyIHRpbWVzIGZvcgoJd2lja2VkIGdvYmxpbiBzcGlyaXRzLCBhcyBpbiBCdW55YW4ncyAiSG9iZ29ibGluIG5vciBmb3VsCglmcmllbmQiLCBidXQgaXRzIG1vcmUgY29ycmVjdCB1c2UgaXMgZm9yIHRoZSBmcmllbmRseSBzcGlyaXRzCglvZiB0aGUgYnJvd25pZSB0eXBlLiAgSW4gIkEgbWlkc3VtbWVyIG5pZ2h0J3MgZHJlYW0iIGEKCWZhaXJ5IHNheXMgdG8gU2hha2VzcGVhcmUncyBQdWNrOgoJCVRob3NlIHRoYXQgSG9iZ29ibGluIGNhbGwgeW91LCBhbmQgc3dlZXQgUHVjaywKCQlZb3UgZG8gdGhlaXIgd29yaywgYW5kIHRoZXkgc2hhbGwgaGF2ZSBnb29kIGx1Y2s6CgkJQXJlIHlvdSBub3QgaGU/CglhbmQgb2J2aW91c2x5IFB1Y2sgd291bGQgbm90IHdpc2ggdG8gYmUgY2FsbGVkIGEgaG9iZ29ibGluCglpZiB0aGF0IHdhcyBhbiBpbGwtb21lbmVkIHdvcmQuCglIb2Jnb2JsaW5zIGFyZSBvbiB0aGUgd2hvbGUsIGdvb2QtaHVtb3VyZWQgYW5kIHJlYWR5IHRvIGJlCgloZWxwZnVsLCBidXQgZm9uZCBvZiBwcmFjdGljYWwgam9raW5nLCBhbmQgbGlrZSBtb3N0IG9mIHRoZQoJZmFpcmllcyByYXRoZXIgbmFzdHkgcGVvcGxlIHRvIGFubm95LiAgQm9nZ2FydHMgaG92ZXIgb24gdGhlCgl2ZXJnZSBvZiBob2Jnb2JsaW5kb20uICBCb2dsZXMgYXJlIGp1c3Qgb3ZlciB0aGUgZWRnZS4KCU9uZSBIb2IgbWVudGlvbmVkIGJ5IEhlbmRlcnNvbiwgd2FzIEhvYiBIZWFkbGVzcyB3aG8gaGF1bnRlZAoJdGhlIHJvYWQgYmV0d2VlbiBIdXJ3b3J0aCBhbmQgTmVhc2hhbSwgYnV0IGNvdWxkIG5vdCBjcm9zcwoJdGhlIGxpdHRsZSByaXZlciBLZW50LCB3aGljaCBmbG93ZWQgaW50byB0aGUgVGVzcy4gIEhlIHdhcwoJZXhvcmNpc2VkIGFuZCBsYWlkIHVuZGVyIGEgbGFyZ2Ugc3RvbmUgYnkgdGhlIHJvYWRzaWRlIGZvcgoJbmluZXR5LW5pbmUgeWVhcnMgYW5kIGEgZGF5LiAgSWYgYW55b25lIHdhcyBzbyB1bndhcnkgYXMgdG8KCXNpdCBvbiB0aGF0IHN0b25lLCBoZSB3b3VsZCBiZSB1bmFibGUgdG8gcXVpdCBpdCBmb3IgZXZlci4KCVRoZSBuaW5ldHktbmluZSB5ZWFycyBpcyBuZWFybHkgdXAsIHNvIHRyb3VibGUgbWF5IHNvb24gYmUKCWhlYXJkIG9mIG9uIHRoZSByb2FkIGJldHdlZW4gSHVyd29ydGggYW5kIE5lYXNoYW0uCgkJWyBBIERpY3Rpb25hcnkgb2YgRmFpcmllcywgYnkgS2F0aGFyaW5lIEJyaWdncyBdCgkiV2Ugd2FudCBhIHdvcmQgd2l0aCB5b3UsIiBzYWlkIExpZ3VyIChpbiBhIHRvbmUgb2Ygdm9pY2UKCWludGVuZGVkIHRvIGltcGx5IHRoYXQgIndvcmQiIHdhcyBzeW5vbnltb3VzIHdpdGggImhvcnJpZmljYWxseQoJcGFpbmZ1bCBldGVybml0eSIpLCBhbmQgdGhlIHNxdWF0IGRlbW9uIHB1c2hlZCBvcGVuIHRoZSBvZmZpY2UKCWRvb3IuCglUaGUgYnVja2V0IHRlZXRlcmVkLCB0aGVuIGZlbGwgbmVhdGx5IG9uIExpZ3VyJ3MgaGVhZC4KCURyb3AgYSBsdW1wIG9mIHNvZGl1bSBpbiB3YXRlci4gIFdhdGNoIGl0IGZsYW1lIGFuZCBidXJuIGFuZAoJc3BpbiBhcm91bmQgY3JhemlseSwgZmxhcmluZyBhbmQgc3B1dHRlcmluZy4gIFRoaXMgd2FzIGxpa2UKCXRoYXQsIGp1c3QgbmFzdGllci4KCVRoZSBkZW1vbiBwZWVsZWQgYW5kIGZsYXJlZCBhbmQgZmxpY2tlcmVkLiAgT2lseSBicm93biBzbW9rZQoJb296ZWQgZnJvbSBpdCwgYW5kIGl0IHNjcmVhbWVkIGFuZCBpdCBzY3JlYW1lZCBhbmQgaXQgc2NyZWFtZWQuCglUaGVuIGl0IGNydW1wbGVkLCBmb2xkZWQgaW4gb24gaXRzZWxmLCBhbmQgd2hhdCB3YXMgbGVmdCBsYXkKCWdsaXN0ZW5pbmcgb24gdGhlIGJ1cm50IGFuZCBibGFja2VuZWQgY2lyY2xlIG9mIGNhcnBldCwgbG9va2luZwoJbGlrZSBhIGhhbmRmdWwgb2YgbWFzaGVkIHNsdWdzLgoJIkhpLCIgc2FpZCBDcm93bGV5IHRvIEhhc3R1ciwgd2hvIGhhZCBiZWVuIHdhbGtpbmcgYmVoaW5kIExpZ3VyLAoJYW5kIGhhZCB1bmZvcnR1bmF0ZWx5IG5vdCBiZWVuIHNvIG11Y2ggYXMgc3BsYXNoZWQuCglUaGVyZSBhcmUgc29tZSB0aGluZ3MgdGhhdCBhcmUgdW50aGlua2FibGU7IHRoZXJlIGFyZSBzb21lCglkZXB0aHMgdGhhdCBub3QgZXZlbiBkZW1vbnMgd291bGQgYmVsaWV2ZSBvdGhlciBkZW1vbnMgd291bGQKCXN0b29wIHRvLgoJIi4gLiAuIEhvbHkgd2F0ZXIuICBZb3UgYmFzdGFyZCwiIHNhaWQgSGFzdHVyLiAgIllvdSBjb21wbGV0ZQoJX2Jhc3RhcmRfLiAgSGUgaGFkbid0IG5ldmVyIGRvbmUgbm90aGluZyB0byBfeW91Xy4iCgkiWWV0LCIgY29ycmVjdGVkIENyb3dsZXkuCgkJWyBHb29kIE9tZW5zLCBieSBOZWlsIEdhaW1hbiBhbmQgVGVycnkgUHJhdGNoZXR0IF0KCUEgaG9tdW5jdWx1cyBpcyBhIGNyZWF0dXJlIHN1bW1vbmVkIGJ5IGEgbWFnZSB0byBwZXJmb3JtIHNvbWUKCXBhcnRpY3VsYXIgdGFzay4gIFRoZXkgYXJlIHBhcnRpY3VsYXJseSBnb29kIGF0IHNweWluZy4gIFRoZXkKCWFyZSBzbWFsbGlzaCBjcmVhdHVyZXMsIGJ1dCB2ZXJ5IGFnaWxlLiAgVGhleSBjYW4gcHV0IHRoZWlyCgl2aWN0aW1zIHRvIHNsZWVwIHdpdGggYSB2ZW5vbW91cyBiaXRlLCBidXQgZHVlIHRvIHRoZWlyIHNpemUsCgl0aGUgZWZmZWN0IGRvZXMgbm90IGxhc3QgbG9uZyBvbiBodW1hbnMuCgoJIlRvdGhhcGlzIGN1dCBoaW0gb2ZmLiAgJ0JlIHN0aWxsIGFuZCBoZWFya2VuLiAgWW91IHdpbGwgdHJhdmVsCglhYm9hcmQgdGhlIHNhY3JlZCB3aW5nYm9hdC4gIE9mIGl0IHlvdSBtYXkgbm90IGhhdmUgaGVhcmQ7IGJ1dAoJaXQgd2lsbCBiZWFyIHlvdSB0aGl0aGVyIGluIGEgbmlnaHQgYW5kIGEgZGF5IGFuZCBhIG5pZ2h0LgoJV2l0aCB5b3Ugd2lsbCBnbyBhIGhvbXVuY3VsdXMgdGhhdCBjYW4gcmVsYXkgeW91ciB3b3JkcyB0byBtZSwKCWFuZCBtaW5lIHRvIHlvdSwgYWNyb3NzIHRoZSBsZWFndWVzIGJldHdlZW4gYXQgdGhlIHNwZWVkIG9mCgl0aG91Z2h0LiciCgkJWyBDb25hbiB0aGUgUmViZWwsIGJ5IFBvdWwgQW5kZXJzb24gXQoJQnV0IGFzIGZvciBRdWVlcXVlZyAtLSB3aHksIFF1ZWVxdWVnIHNhdCB0aGVyZSBhbW9uZyB0aGVtIC0tCglhdCB0aGUgaGVhZCBvZiB0aGUgdGFibGUsIHRvbywgaXQgc28gY2hhbmNlZDsgYXMgY29vbCBhcyBhbgoJaWNpY2xlLiAgVG8gYmUgc3VyZSBJIGNhbm5vdCBzYXkgbXVjaCBmb3IgaGlzIGJyZWVkaW5nLiAgSGlzCglncmVhdGVzdCBhZG1pcmVyIGNvdWxkIG5vdCBoYXZlIGNvcmRpYWxseSBqdXN0aWZpZWQgaGlzCglicmluZ2luZyBoaXMgaGFycG9vbiBpbnRvIGJyZWFrZmFzdCB3aXRoIGhpbSwgYW5kIHVzaW5nIGl0Cgl0aGVyZSB3aXRob3V0IGNlcmVtb255OyByZWFjaGluZyBvdmVyIHRoZSB0YWJsZSB3aXRoIGl0LCB0bwoJdGhlIGltbWluZW50IGplb3BhcmR5IG9mIG1hbnkgaGVhZHMsIGFuZCBncmFwcGxpbmcgdGhlCgliZWVmc3RlYWtzIHRvd2FyZHMgaGltLgoJCVsgTW9ieSBEaWNrLCBieSBIZXJtYW4gTWVsdmlsbGUgXQoJUm9sYW5kIGhhdGggc2V0IHRoZSBPbGlmYW50IHRvIGhpcyBtb3V0aCwKCUhlIGdyYXNwcyBpdCB3ZWxsLCBhbmQgd2l0aCBncmVhdCB2aXJ0dWUgc291bmRzLgoJSGlnaCBhcmUgdGhvc2UgcGVha3MsIGFmYXIgaXQgcmluZ3MgYW5kIGxvdWQsCglUaGlydHkgZ3JlYXQgbGVhZ3VlcyB0aGV5IGhlYXIgaXRzIGVjaG9lcyBtb3VudC4KCVNvIENoYXJsZXMgaGVhcmQsIGFuZCBhbGwgaGlzIGNvbXJhZGVzIHJvdW5kOwoJVGhlbiBzYWlkIHRoYXQgS2luZzogIkJhdHRsZSB0aGV5IGRvLCBvdXIgY291bnRzISIKCUFuZCBHdWVuZWx1biBhbnN3ZXJlZCwgY29udHJhcmlvdXM6CgkiVGhhdCB3ZXJlIGEgbGllLCBpbiBhbnkgb3RoZXIgbW91dGguIgoJCVsgVGhlIFNvbmcgb2YgUm9sYW5kIF0KCVRoZSBpbmZhbnQgWmV1cyB3YXMgZmVkIHdpdGggZ29hdCdzIG1pbGsgYnkgQW1hbHRoZWEsCglkYXVnaHRlciBvZiBNZWxpc3NldXMsIEtpbmcgb2YgQ3JldGUuICBaZXVzLCBpbiBncmF0aXR1ZGUsCglicm9rZSBvZmYgb25lIG9mIHRoZSBnb2F0J3MgaG9ybnMsIGFuZCBnYXZlIGl0IHRvIEFtYWx0aGVhLAoJcHJvbWlzaW5nIHRoYXQgdGhlIHBvc3Nlc3NvciBzaG91bGQgYWx3YXlzIGhhdmUgaW4gYWJ1bmRhbmNlCglldmVyeXRoaW5nIGRlc2lyZWQuCgkJWyBCcmV3ZXIncyBDb25jaXNlIERpY3Rpb25hcnkgb2YgUGhyYXNlIGFuZCBGYWJsZSBdCgoJV2hlbiBBbWFsdGhlYSdzIGhvcm4KCU8nZXIgaGlsbCBhbmQgZGFsZSB0aGUgcm9zZS1jcm93bmVkIGZsb3JhIHBvdXJzLAoJQW5kIHNjYXR0ZXJzIGNvcm4gYW5kIHdpbmUsIGFuZCBmcnVpdHMgYW5kIGZsb3dlcnMuCgkJWyBPcyBMdXNpYWRhcywgYnkgTHVpcyBWYXogZGUgQ2Ftb2VzIF0KCVRoZXNlIGRldmlscyBsYWNrIGFueSByZWFsIHNwZWNpYWwgYWJpbGl0aWVzLCB0aG91Z2ggdGhleQoJYXJlIHF1aXRlIGRpZmZpY3VsdCB0byBraWxsLgoJS2luZyBSaWNoYXJkIElJSTogQSBob3JzZSEgYSBob3JzZSEgbXkga2luZ2RvbSBmb3IgYSBob3JzZSEKCUNhdGVzYnk6IFdpdGhkcmF3LCBteSBsb3JkOyBJJ2xsIGhlbHAgeW91IHRvIGEgaG9yc2UuCglLaW5nIFJpY2hhcmQgSUlJOiBTbGF2ZSwgSSBoYXZlIHNldCBteSBsaWZlIHVwb24gYSBjYXN0LAoJICAgICAgICAgICAgICAgICAgQW5kIEkgd2lsbCBzdGFuZCB0aGUgaGF6YXJkIG9mIHRoZSBkaWU6CgkgICAgICAgICAgICAgICAgICBJIHRoaW5rIHRoZXJlIGJlIHNpeCBSaWNobW9uZHMgaW4gdGhlIGZpZWxkOwoJICAgICAgICAgICAgICAgICAgRml2ZSBoYXZlIEkgc2xhaW4gdG8tZGF5IGluc3RlYWQgb2YgaGltLgoJICAgICAgICAgICAgICAgICAgQSBob3JzZSEgYSBob3JzZSEgbXkga2luZ2RvbSBmb3IgYSBob3JzZSEKCQlbIEtpbmcgUmljaGFyZCBJSUksIGJ5IFdpbGxpYW0gU2hha2VzcGVhcmUgXQoJW1Blc3RpbGVuY2U6XSBBbmQgSSBzYXcgd2hlbiB0aGUgTGFtYiBvcGVuZWQgb25lIG9mIHRoZSBzZWFscywKCWFuZCBJIGhlYXJkLCBhcyBpdCB3ZXJlIHRoZSBub2lzZSBvZiB0aHVuZGVyLCBvbmUgb2YgdGhlIGZvdXIKCWJlYXN0cyBzYXlpbmcsIENvbWUgYW5kIHNlZS4gIEFuZCBJIHNhdywgYW5kIGJlaG9sZCBhIHdoaXRlCglob3JzZTogYW5kIGhlIHRoYXQgc2F0IG9uIGhpbSBoYWQgYSBib3c7IGFuZCBhIGNyb3duIHdhcyBnaXZlbgoJdW50byBoaW06IGFuZCBoZSB3ZW50IGZvcnRoIGNvbnF1ZXJpbmcsIGFuZCB0byBjb25xdWVyLgoKCVtXYXI6XSBBbmQgd2hlbiBoZSBoYWQgb3BlbmVkIHRoZSBzZWNvbmQgc2VhbCwgSSBoZWFyZCB0aGUKCXNlY29uZCBiZWFzdCBzYXksIENvbWUgYW5kIHNlZS4gIEFuZCB0aGVyZSB3ZW50IG91dCBhbm90aGVyCglob3JzZSB0aGF0IHdhcyByZWQ6IGFuZCBwb3dlciB3YXMgZ2l2ZW4gdG8gaGltIHRoYXQgc2F0IHRoZXJlb24KCXRvIHRha2UgcGVhY2UgZnJvbSB0aGUgZWFydGgsIGFuZCB0aGF0IHRoZXkgc2hvdWxkIGtpbGwgb25lCglhbm90aGVyOiBhbmQgdGhlcmUgd2FzIGdpdmVuIHVudG8gaGltIGEgZ3JlYXQgc3dvcmQuCgoJW0ZhbWluZTpdIEFuZCB3aGVuIGhlIGhhZCBvcGVuZWQgdGhlIHRoaXJkIHNlYWwsIEkgaGVhcmQgdGhlCgl0aGlyZCBiZWFzdCBzYXksIENvbWUgYW5kIHNlZS4gIEFuZCBJIGJlaGVsZCwgYW5kIGxvIGEgYmxhY2sKCWhvcnNlOyBhbmQgaGUgdGhhdCBzYXQgb24gaGltIGhhZCBhIHBhaXIgb2YgYmFsYW5jZXMgaW4gaGlzCgloYW5kLiAgQW5kIEkgaGVhcmQgYSB2b2ljZSBpbiB0aGUgbWlkc3Qgb2YgdGhlIGZvdXIgYmVhc3RzIHNheSwKCUEgbWVhc3VyZSBvZiB3aGVhdCBmb3IgYSBwZW5ueSwgYW5kIHRocmVlIG1lYXN1cmVzIG9mIGJhcmxleQoJZm9yIGEgcGVubnk7IGFuZCBzZWUgdGhvdSBodXJ0IG5vdCB0aGUgb2lsIGFuZCB0aGUgd2luZS4KCglbRGVhdGg6XSBBbmQgd2hlbiBoZSBoYWQgb3BlbmVkIHRoZSBmb3VydGggc2VhbCwgSSBoZWFyZCB0aGUKCXZvaWNlIG9mIHRoZSBmb3VydGggYmVhc3Qgc2F5LCBDb21lIGFuZCBzZWUuICBBbmQgSSBsb29rZWQsIGFuZAoJYmVob2xkIGEgcGFsZSBob3JzZTogYW5kIGhpcyBuYW1lIHRoYXQgc2F0IG9uIGhpbSB3YXMgRGVhdGgsCglhbmQgSGVsbCBmb2xsb3dlZCB3aXRoIGhpbS4gIEFuZCBwb3dlciB3YXMgZ2l2ZW4gdW50byB0aGVtIG92ZXIKCXRoZSBmb3VydGggcGFydCBvZiB0aGUgZWFydGgsIHRvIGtpbGwgd2l0aCBzd29yZCwgYW5kIHdpdGgKCWh1bmdlciwgYW5kIHdpdGggZGVhdGgsIGFuZCB3aXRoIHRoZSBiZWFzdHMgb2YgdGhlIGVhcnRoLgoJCVsgUmV2ZWxhdGlvbnMgb2YgSm9obiwgNjoxLTggXQoJVGhlIGZpcnN0IG9mIGZpdmUgbXl0aGljYWwgQ2hpbmVzZSBlbXBlcm9ycywgSHVhbiBUaSBpcyBrbm93bgoJYXMgdGhlIHllbGxvdyBlbXBlcm9yLiAgSGUgcnVsZXMgdGhlIF9tb3ZpbmdfIGhlYXZlbnMsIGFzCglvcHBvc2VkIHRvIHRoZSBfZGFya18gaGVhdmVucy4gIEhlIGlzIGFuIGludmVudG9yLCBzYWlkIHRvCgloYXZlIGdpdmVuIG1hbmtpbmQgYW1vbmcgb3RoZXIgdGhpbmdzLCB0aGUgd2hlZWwsIGFybW91ciwgYW5kCgl0aGUgY29tcGFzcy4gIEhlIGlzIHRoZSBnb2Qgb2YgZm9ydHVuZSB0ZWxsaW5nIGFuZCB3YXIuCglIdWVodWV0b3RsLCBvciBIdWhldG90bCwgd2hpY2ggbWVhbnMgT2xkIEdvZCwgd2FzIHRoZSBBenRlYwoJKGNsYXNzaWNhbCBNZXNvYW1lcmljYW4pIGdvZCBvZiBmaXJlLiAgSGUgaXMgZ2VuZXJhbGx5Cglhc3NvY2lhdGVkIHdpdGggcGF0ZXJuYWxpc20gYW5kIG9uZSBvZiB0aGUgZ3JvdXAgY2xhc3NlZAoJYXMgdGhlIFhpdWh0ZWN1aHRsaSBjb21wbGV4LiAgSGUgaXMga25vd24gdG8gc2VuZCBoaXMKCW1pbmlvbnMgdG8gd3JlYWsgaGF2b2MgdXBvbiBvcmRpbmFyeSBodW1hbnMuCgkgICAgIFsgYWZ0ZXIgdGhlIEVuY3ljbG9wZWRpYSBvZiBHb2RzLCBieSBNaWNoYWVsIEpvcmRhbiBdCglIdW1hbm9pZHMgYXJlIGFsbCBhcHByb3hpbWF0ZWx5IHRoZSBzaXplIG9mIGEgaHVtYW4sIGFuZCBtYXkKCWJlIG1pc3Rha2VuIGZvciBvbmUgYXQgYSBkaXN0YW5jZS4gIFRoZXkgYXJlIHVzdWFsbHkgb2YgYQoJdHJpYmFsIG5hdHVyZSwgYW5kIHdpbGwgZmllcmNlbHkgZGVmZW5kIHRoZWlyIGxhaXJzLiAgVXN1YWxseQoJaG9zdGlsZSwgdGhleSBtYXkgZXZlbiBiYW5kIHRvZ2V0aGVyIHRvIHJhaWQgYW5kIHBpbGxhZ2UKCWh1bWFuIHNldHRsZW1lbnRzLgoJVGhlc2Ugc3RyYW5nZSBjcmVhdHVyZXMgbGl2ZSBtb3N0bHkgb24gdGhlIHN1cmZhY2Ugb2YgdGhlCgllYXJ0aCwgZ2F0aGVyaW5nIHRvZ2V0aGVyIGluIHNvY2lldGllcyBvZiB2YXJpb3VzIGZvcm1zLCBidXQKCW9jY2FzaW9uYWxseSBhIHN0cmF5IHdpbGwgZGVzY2VuZCBpbnRvIHRoZSBkZXB0aHMgYW5kIGNvbW1pdAoJbWF5aGVtIGFtb25nIHRoZSBkdW5nZW9uIHJlc2lkZW50cyB3aG8sIG5hdHVyYWxseSwgb2Z0ZW4KCXJlc2VudCB0aGUgaW50cnVzaW9uIG9mIHN1Y2ggYmVhc3RzLiAgVGhleSBhcmUgY2FwYWJsZSBvZgoJdXNpbmcgd2VhcG9ucyBhbmQgbWFnaWMsIGFuZCBpdCBpcyBldmVuIHJ1bW9yZWQgdGhhdCB0aGUKCVdpemFyZCBvZiBZZW5kb3IgaXMgYSBtZW1iZXIgb2YgdGhpcyBzcGVjaWVzLgoJV2hhdCBvZiB0aGUgaHVudGluZywgaHVudGVyIGJvbGQ/CglCcm90aGVyLCB0aGUgd2F0Y2ggd2FzIGxvbmcgYW5kIGNvbGQuCglXaGF0IG9mIHRoZSBxdWFycnkgeWUgd2VudCB0byBraWxsPwoJQnJvdGhlciwgaGUgY3JvcHMgaW4gdGhlIGp1bmdsZSBzdGlsbC4KCVdoZXJlIGlzIHRoZSBwb3dlciB0aGF0IG1hZGUgeW91ciBwcmlkZT8KCUJyb3RoZXIsIGl0IGViYnMgZnJvbSBteSBmbGFuayBhbmQgc2lkZS4KCVdoZXJlIGlzIHRoZSBoYXN0ZSB0aGF0IHllIGh1cnJ5IGJ5PwoJQnJvdGhlciwgSSBnbyB0byBteSBsYWlyIHRvIGRpZS4KCQlbIFRoZSBKdW5nbGUgQm9vaywgYnkgUnVkeWFyZCBLaXBsaW5nIF0KCUljZSBkZXZpbHMgYXJlIGxhcmdlIHNlbWktaW5zZWN0b2lkIGNyZWF0dXJlcywgd2hvIGFyZQoJZXF1YWxseSBhdCBob21lIGluIHRoZSBmaXJlcyBvZiBIZWxsIGFuZCB0aGUgY29sZCBvZiBMaW1ibywKCWFuZCB3aG8gY2FuIGNhdXNlIHRoZSB0cmF2ZWxsZXIgdG8gZmVlbCB0aGUgbGF0dGVyIHdpdGgganVzdAoJYSB0b3VjaCBvZiB0aGVpciB0YWlsLgoJQW5vdGhlciBjbGV2ZXIgdHJhbnNsYXRpb24gW29mIHRoZSBfQXN0ZXJpeF8gY2hhcmFjdGVyIG5hbWVzXQoJaXMgdGhhdCBvZiBJZGVmaXguICBBbiBfaWRlZSBmaXhlXyBpcyBhICJmaXhlZCBpZGVhIiwgaS5lLgoJYW4gb2JzZXNzaW9uLCBhIGRvZ21hLiAgVGhlIHRyYW5zbGF0aW9uLCBEb2dtYXRpeCwgbWFuYWdlcyB0bwoJY29uc2VydmUgdGhlICJmaXhlZCBpZGVhIiBtZWFuaW5nIGFuZCBhbHNvIGluY2x1ZGUgdGhlIHN5bGxhYmxlCglkb2cgLS0gcGVyZmVjdCwgZ2l2ZW4gdGhhdCB0aGUgY2hhcmFjdGVyIGlzIGEgZG9nIHdobyBoYXMgdmVyeQoJc3Ryb25nIHZpZXdzIG9uIHRoZSBlbnZpcm9ubWVudCAoaGUgaG93bHMgd2hlbmV2ZXIgaGUgc2VlcyBhbgoJdXByb290ZWQgdHJlZSkuCgkJWyBXaWtpcGVkaWEsIHRoZSBmcmVlIGVuY3ljbG9wZWRpYSBdCgkgLi4uIGltcHMgLi4uIGxpdHRsZSBjcmVhdHVyZXMgb2YgdHdvIGZlZXQgaGlnaCB0aGF0IGNvdWxkCglnYW1ib2wgYW5kIGp1bXAgcHJvZGlnaW91c2x5OyAuLi4KCQlbIFRoZSBDaGFyd29tYW4ncyBTaGFkb3csIGJ5IExvcmQgRHVuc2FueSBdCgoJQW4gJ2ltcCcgaXMgYW4gb2ZmLXNob290IG9yIGN1dHRpbmcuICBUaHVzIGFuICd5bXAgdHJlZScgd2FzCglhIGdyYWZ0ZWQgdHJlZSwgb3Igb25lIGdyb3duIGZyb20gYSBjdXR0aW5nLCBub3QgZnJvbSBzZWVkLgoJJ0ltcCcgcHJvcGVybHkgbWVhbnMgYSBzbWFsbCBkZXZpbCwgYW4gb2ZmLXNob290IG9mIFNhdGFuLAoJYnV0IHRoZSBkaXN0aW5jdGlvbiBiZXR3ZWVuIGdvYmxpbnMgb3IgYm9nbGVzIGFuZCBpbXBzIGZyb20KCWhlbGwgaXMgaGFyZCB0byBtYWtlLCBhbmQgbWFueSBpbiB0aGUgQ2VsdGljIGNvdW50cmllcyBhcwoJd2VsbCBhcyB0aGUgRW5nbGlzaCBQdXJpdGFucyByZWdhcmRlZCBhbGwgZmFpcmllcyBhcyBkZXZpbHMuCglUaGUgZmFpcmllcyBvZiB0cmFkaXRpb24gb2Z0ZW4gaG92ZXIgdW5lYXNpbHkgYmV0d2VlbiB0aGUKCWdob3N0bHkgYW5kIHRoZSBkaWFib2xpYyBzdGF0ZS4KCQlbIEEgRGljdGlvbmFyeSBvZiBGYWlyaWVzLCBieSBLYXRoYXJpbmUgQnJpZ2dzIF0KCVRoZSBpbmN1YnVzIGFuZCBzdWNjdWJ1cyBhcmUgbWFsZSBhbmQgZmVtYWxlIHZlcnNpb25zIG9mIHRoZQoJc2FtZSBkZW1vbiwgb25lIHdobyBsaWVzIHdpdGggYSBodW1hbiBmb3IgaXRzIG93biBwdXJwb3NlcywKCXVzdWFsbHkgdG8gdGhlIGRldHJpbWVudCBvZiB0aGUgbW9ydGFscyB3aG8gYXJlIHVud2lzZSBpbgoJdGhlaXIgZGVhbGluZ3Mgd2l0aCB0aGVtLgoJQSBtaW51dGUgaW52ZXJ0ZWJyYXRlIGFuaW1hbDsgb25lIG9mIHRoZSBjbGFzcyBfSW5zZWN0YV8uCglUaGUgdHJ1ZSBpbnNlY3RzIG9yIGhleGFwb2RzIGhhdmUgdGhlIGJvZHkgZGl2aWRlZCBpbnRvIGEKCWhlYWQsIGEgdGhvcmF4IG9mIDMgc2VnbWVudHMsIGVhY2ggb2Ygd2hpY2ggYmVhcnMgYSBwYWlyIG9mCglsZWdzLCBhbmQgYW4gYWJkb21lbiBvZiA3IHRvIDExIHNlZ21lbnRzLCBhbmQgaW4gZGV2ZWxvcG1lbnQKCXVzdWFsbHkgcGFzcyB0aHJvdWdoIGEgbWV0YW1vcnBob3Npcy4gIFRoZXJlIGFyZSB1c3VhbGx5IDIKCXBhaXJzIG9mIHdpbmdzLCBzb21ldGltZXMgb25lIHBhaXIgb3Igbm9uZS4KCQlbIFdlYnN0ZXIncyBDb21wcmVoZW5zaXZlIEludGVybmF0aW9uYWwgRGljdGlvbmFyeQoJCSAgb2YgdGhlIEVuZ2xpc2ggTGFuZ3VhZ2UgXQoKCUVsc2UsIGlmIHRob3UgcmVmdXNlIHRvIGxldCBteSBwZW9wbGUgZ28sIGJlaG9sZCwgdG8gbW9ycm93Cgl3aWxsIEkgYnJpbmcgdGhlIGxvY3VzdHMgaW50byB0aHkgY29hc3Q6CglBbmQgdGhleSBzaGFsbCBjb3ZlciB0aGUgZmFjZSBvZiB0aGUgZWFydGgsIHRoYXQgb25lIGNhbm5vdAoJYmUgYWJsZSB0byBzZWUgdGhlIGVhcnRoOiAgYW5kIHRoZXkgc2hhbGwgZWF0IHRoZSByZXNpZHVlIG9mCgl0aGF0IHdoaWNoIGlzIGVzY2FwZWQsIHdoaWNoIHJlbWFpbmV0aCB1bnRvIHlvdSBmcm9tIHRoZSBoYWlsLAoJYW5kIHNoYWxsIGVhdCBldmVyeSB0cmVlIHdoaWNoIGdyb3dldGggZm9yIHlvdSBvdXQgb2YgdGhlIGZpZWxkOgoJQW5kIHRoZXkgc2hhbGwgZmlsbCB0aHkgaG91c2VzLCBhbmQgdGhlIGhvdXNlcyBvZiBhbGwgdGh5CglzZXJ2YW50cywgYW5kIHRoZSBob3VzZXMgb2YgYWxsIHRoZSBFZ3lwdGlhbnM7IHdoaWNoIG5laXRoZXIKCXRoeSBmYXRoZXJzLCBub3IgdGh5IGZhdGhlcnMnIGZhdGhlcnMgaGF2ZSBzZWVuLCBzaW5jZSB0aGUgZGF5Cgl0aGF0IHRoZXkgd2VyZSB1cG9uIHRoZSBlYXJ0aCB1bnRvIHRoaXMgZGF5LiAgQW5kIGhlIHR1cm5lZAoJaGltc2VsZiwgYW5kIHdlbnQgb3V0IGZyb20gUGhhcmFvaC4KCQlbIEV4b2R1cywgMTA6NC02IF0KCSJZb3UgYXJlIGZldHRlcmVkLCAiIHNhaWQgU2Nyb29nZSwgdHJlbWJsaW5nLiAgIlRlbGwgbWUgd2h5PyIKCSJJIHdlYXIgdGhlIGNoYWluIEkgZm9yZ2VkIGluIGxpZmUsIiByZXBsaWVkIHRoZSBHaG9zdC4gICJJCgltYWRlIGl0IGxpbmsgYnkgbGluaywgYW5kIHlhcmQgYnkgeWFyZDsgSSBnaXJkZWQgaXQgb24gb2YgbXkKCW93biBmcmVlIHdpbGwsIGFuZCBvZiBteSBvd24gZnJlZSB3aWxsIEkgd29yZSBpdC4gIElzIGl0cwoJcGF0dGVybiBzdHJhbmdlIHRvIHlvdT8iCglTY3Jvb2dlIHRyZW1ibGVkIG1vcmUgYW5kIG1vcmUuCgkiT3Igd291bGQgeW91IGtub3csIiBwdXJzdWVkIHRoZSBHaG9zdCwgInRoZSB3ZWlnaHQgYW5kCglsZW5ndGggb2YgdGhlIHN0cm9uZyBjb2lsIHlvdSBiZWFyIHlvdXJzZWxmPyAgSXQgd2FzIGZ1bGwgYXMKCWhlYXZ5IGFuZCBhcyBsb25nIGFzIHRoaXMsIHNldmVuIENocmlzdG1hcyBFdmVzIGFnby4gIFlvdQoJaGF2ZSBsYWJvdXJlZCBvbiBpdCwgc2luY2UuICBJdCBpcyBhIHBvbmRlcm91cyBjaGFpbiEiCgkJWyBBIENocmlzdG1hcyBDYXJvbCwgYnkgQ2hhcmxlcyBEaWNrZW5zIF0KCVN0b25lIHdhbGxzIGRvIG5vdCBhIHByaXNvbiBtYWtlLAoJICBOb3IgaXJvbiBiYXJzIGEgY2FnZTsKCU1pbmRzIGlubm9jZW50IGFuZCBxdWlldCB0YWtlCgkgIFRoYXQgZm9yIGFuIGhlcm1pdGFnZTsKCUlmIEkgaGF2ZSBmcmVlZG9tIGluIG15IGxvdmUsCgkgIEFuZCBpbiBteSBzb3VsIGFtIGZyZWUsCglBbmdlbHMgYWxvbmUgdGhhdCBzb2FyIGFib3ZlCgkgIEVuam95IHN1Y2ggbGliZXJ0eS4KCQlbIFRvIEFsdGhlYSBmcm9tIFByaXNvbiwgYnkgUmljaGFyZCBMb3ZlbGFjZSBdCglJc2h0YXIgKHRoZSBzdGFyIG9mIGhlYXZlbikgaXMgdGhlIE1lc29wb3RhbWlhbiBnb2RkZXNzIG9mCglmZXJ0aWxpdHkgYW5kIHdhci4gIFNoZSBpcyB1c3VhbGx5IGRlcGljdGVkIHdpdGggd2luZ3MgYW5kCgl3ZWFwb24gY2FzZXMgYXQgaGVyIHNob3VsZGVycywgY2FycnlpbmcgYSBjZXJlbW9uaWFsIGRvdWJsZS0KCWhlYWRlZCBtYWNlLXNjaW1pdGFyIGVtYmVsbGlzaGVkIHdpdGggbGlvbiBoZWFkcywgZnJlcXVlbnRseQoJYmVpbmcgYWNjb21wYW5pZWQgYnkgYSBsaW9uLiAgU2hlIGlzIHN5bWJvbGl6ZWQgYnkgYW4gZWlnaHQtCglwb2ludGVkIHN0YXIuCgkJWyBFbmN5Y2xvcGVkaWEgb2YgR29kcywgYnkgTWljaGFlbCBKb3JkYW4gXQoJTm93IElzc2VrIG9mIHRoZSBKdWcsIHdob20gRmFmaHJkIGNob3NlIHRvIHNlcnZlLCB3YXMgb25jZQoJb2YgdGhlIG1vc3QgbG93bHkgYW5kIHVuc3VjY2Vzc2Z1bCBvZiB0aGUgZ29kcywgZ29kbGV0cwoJcmF0aGVyLCBpbiBMYW5raG1hci4gIEhlIGhhZCBkd2VsdCB0aGVyZSBmb3IgYWJvdXQgdGhpcnRlZW4KCXllYXJzLCBkdXJpbmcgd2hpY2ggdGltZSBoZSBoYWQgdHJhdmVsZWQgb25seSB0d28gc3F1YXJlcyB1cAoJdGhlIFN0cmVldCBvZiB0aGUgR29kcyBhbmQgd2FzIG5vdyBiYWNrIGFnYWluLCByZWFkeSBmb3IKCW9ibGl2aW9uLiAgSGUgaXMgbm90IHRvIGJlIGNvbmZ1c2VkIHdpdGggSXNzZWsgdGhlIEFybWxlc3MsCglJc3NlayBvZiB0aGUgQnVybnQgTGVncywgRmxheWVkIElzc2VrLCBvciBhbnkgb3RoZXIgb2YgdGhlCgludW1lcm91cyBhbmQgY29sb3JmdWxseSBtdXRpbGF0ZWQgZGl2aW5pdGllcyBvZiB0aGF0IG5hbWUuCglJbmRlZWQsIGhpcyB1bnBvcHVsYXJpdHkgbWF5IGhhdmUgYmVlbiBkdWUgaW4gcGFydCB0byB0aGUKCWZhY3QgdGhhdCB0aGUgbWFubmVyIG9mIGhpcyBkZWF0aCAtLSByYWNraW5nIC0tIHdhcyBub3QKCWRlZW1lZCBwYXJ0aWN1bGFybHkgc3BlY3RhY3VsYXIuIC4uLiBIb3dldmVyLCBhZnRlciBGYWZocmQKCWJlY2FtZSBoaXMgYWNvbHl0ZSwgdGhpbmdzIHNvbWVob3cgYmVnYW4gdG8gY2hhbmdlLgoJCVsgU3dvcmRzIEluIFRoZSBNaXN0LCBieSBGcml0eiBMZWliZXIgXQoJVGhlIHNob3BrZWVwZXIgb2YgdGhlIGxpZ2h0aW5nIHNob3AgaW4gdGhlIHRvd24gbGV2ZWwgb2YgdGhlCglnbm9taXNoIG1pbmVzIGlzIGEgdHJpYnV0ZSB0byBJemNoYWsgTWlsbGVyLCBhIGZvdW5kaW5nIG1lbWJlcgoJb2YgdGhlIE5ldEhhY2sgZGV2ZWxvcG1lbnQgdGVhbSBhbmQgYSBwZXJzb25hbCBmcmllbmQgb2YgYSBsYXJnZQoJbnVtYmVyIG9mIHVzLiAgSXpjaGFrIGNvbnRyaWJ1dGVkIGdyZWF0bHkgdG8gdGhlIGdhbWUsIGNvZGluZyBhCglsYXJnZSBhbW91bnQgb2YgdGhlIHNob3BrZWVwIGxvZ2ljIChoZW5jZSB0aGUgbmF0dXJlIG9mIHRoZSB0cmlidXRlKQoJYXMgd2VsbCBhcyBhIGdvb2QgcGFydCBvZiB0aGUgYWxpZ25tZW50IHN5c3RlbSwgdGhlIHByYXllciBjb2RlIGFuZAoJdGhlIHJld3JpdGUgb2YgImhlbGwiIGluIHRoZSAzLjEgcmVsZWFzZS4gIEl6Y2hhayB3YXMgYSBwcm9mZXNzb3IKCW9mIFBoaWxvc29waHksIHdobyB0YXVnaHQgYXQgbWFueSByZXNwZWN0ZWQgaW5zdGl0dXRpb25zLCBpbmNsdWRpbmcKCU1JVCBhbmQgU3RhbmZvcmQsIGFuZCB3aG8gYWxzbyB3b3JrZWQsIGZvciBhIHBlcmlvZCBvZiB0aW1lLCBhdAoJWGVyb3ggUEFSQy4gIEl6Y2hhayB3YXMgdGhlIGZpcnN0ICJsaWJyYXJpYW4iIG9mIHRoZSBOZXRIYWNrIHByb2plY3QsCglhbmQgd2FzIGEgZm91bmRpbmcgbWVtYmVyIG9mIHRoZSBEZXZUZWFtLCBqb2luaW5nIGluIDE5ODYgd2hpbGUgaGUKCXdhcyB3b3JraW5nIGF0IHRoZSBVbml2ZXJzaXR5IG9mIFBlbm5zeWx2YW5pYSAoaGVuY2Ugb3VyIGZvcm1lcgoJbWFpbGluZyBsaXN0IGFkZHJlc3MpLiAgVW50aWwgdGhlIDMuMS4zIHJlbGVhc2UsIEl6Y2hhayBjYXJlZnVsbHkKCWtlcHQgYWxsIG9mIHRoZSBjb2RlIHN5bmNocm9uaXplZCBhbmQgYXJiaXRyYXRlZCBkaXNwdXRlcyBiZXR3ZWVuCgltZW1iZXJzIG9mIHRoZSBkZXZlbG9wbWVudCB0ZWFtcy4gIEl6Y2hhayBNaWxsZXIgcGFzc2VkIGF3YXkgYXQgdGhlCglhZ2Ugb2YgNTgsIGluIHRoZSBlYXJseSBtb3JuaW5nIGhvdXJzIG9mIEFwcmlsIDEsIDE5OTQgZnJvbQoJY29tcGxpY2F0aW9ucyBkdWUgdG8gY2FuY2VyLiAgV2UgdGhlbiBkZWRpY2F0ZWQgTmV0SGFjayAzLjIgaW4gaGlzCgltZW1vcnkuCgkJCVsgTWlrZSBTdGVwaGVuc29uLCBmb3IgdGhlIE5ldEhhY2sgRGV2VGVhbSBdCgkiQmV3YXJlIHRoZSBKYWJiZXJ3b2NrLCBteSBzb24hCgkgIFRoZSBqYXdzIHRoYXQgYml0ZSwgdGhlIGNsYXdzIHRoYXQgY2F0Y2ghCglCZXdhcmUgdGhlIEp1Ymp1YiBiaXJkLCBhbmQgc2h1bgoJICBUaGUgZnJ1bWlvdXMgQmFuZGVyc25hdGNoISIKCglIZSB0b29rIGhpcyB2b3JwYWwgc3dvcmQgaW4gaGFuZDsKCSAgTG9uZyB0aW1lIHRoZSBtYW54b21lIGZvZSBoZSBzb3VnaHQgLS0KCVNvIHJlc3RlZCBoZSBieSB0aGUgVHVtdHVtIHRyZWUsCgkgIEFuZCBzdG9vZCBhd2hpbGUgaW4gdGhvdWdodC4KCglBbmQsIGFzIGluIHVmZmlzaCB0aG91Z2h0IGhlIHN0b29kLAoJICBUaGUgSmFiYmVyd29jaywgd2l0aCBleWVzIG9mIGZsYW1lLAoJQ2FtZSB3aGlmZmxpbmcgdGhyb3VnaCB0aGUgdHVsZ2V5IHdvb2QsCgkgIEFuZCBidXJibGVkIGFzIGl0IGNhbWUhCgoJT25lLCB0d28hIE9uZSwgdHdvISBBbmQgdGhyb3VnaCBhbmQgdGhyb3VnaAoJICBUaGUgdm9ycGFsIGJsYWRlIHdlbnQgc25pY2tlci1zbmFjayEKCUhlIGxlZnQgaXQgZGVhZCwgYW5kIHdpdGggaXRzIGhlYWQKCSAgSGUgd2VudCBnYWx1bXBoaW5nIGJhY2suCgkJCQlbIEphYmJlcndvY2t5LCBieSBMZXdpcyBDYXJyb2xsIF0KCVN3ZWV0IGluIHRoZSByb3VnaCB3ZWF0aGVyCgkgIFRoZSB2b2ljZSBvZiB0aGUgdHVydGxlLWRvdmUKCSdCZWF1dGlmdWwgYWx0b2dldGhlcgoJICBJcyBteSBMb3ZlLgoJICBIaXMgSGFuZHMgYXJlIG9wZW4gc3ByZWFkIGZvciBsb3ZlCglBbmQgZnVsbCBvZiBqYWNpbnRoIHN0b25lcwoJICBBcyB0aGUgYXBwbGUtdHJlZSBhbW9uZyB0cmVlcyBvZiB0aGUgZ3JvdmUKCUlzIEhlIGFtb25nIHRoZSBzb25zLicKCQlbIFRoZSBCZWxvdmVkLCBieSBNYXkgUHJvYnluIF0KCUluIEFzaWF0aWMgZm9sa3RhbGUsIGphY2thbCBwcm92aWRlcyBmb3IgdGhlIGxpb247IGhlIHNjYXJlcwoJdXAgZ2FtZSwgd2hpY2ggdGhlIGxpb24ga2lsbHMgYW5kIGVhdHMsIGFuZCByZWNlaXZlcyB3aGF0IGlzCglsZWZ0IGFzIHJld2FyZC4gIEluIHN0b3JpZXMgZnJvbSBub3J0aGVybiBJbmRpYSBoZSBpcwoJc29tZXRpbWVzIHRlcm1lZCAibWluaXN0ZXIgdG8gdGhlIGtpbmcsIiBpLmUuIHRvIHRoZSBsaW9uLgoJRnJvbSB0aGUgbGVnZW5kIHRoYXQgaGUgZG9lcyBub3Qga2lsbCBoaXMgb3duIGZvb2QgaGFzIGFyaXNlbgoJdGhlIGxlZ2VuZCBvZiBoaXMgY293YXJkaWNlLiAgSmFja2FsJ3MgaGVhcnQgbXVzdCBuZXZlciBiZQoJZWF0ZW4sIGZvciBpbnN0YW5jZSwgaW4gdGhlIGJlbGllZiBvZiBwZW9wbGVzIGluZGlnZW5vdXMgdG8KCXRoZSByZWdpb25zIHdoZXJlIHRoZSBqYWNrYWwgYWJvdW5kcy4gLi4uIEluIEhhdXNhIE5lZ3JvCglmb2xrdGFsZSBKYWNrYWwgcGxheXMgdGhlIHJvbGUgb2Ygc2FnYWNpb3VzIGp1ZGdlIGFuZCBpcwoJY2FsbGVkICJPIExlYXJuZWQgT25lIG9mIHRoZSBGb3Jlc3QuIiAgVGhlIEJ1c2htZW4gc2F5IHRoYXQKCUphY2thbCBnb2VzIGFyb3VuZCBiZWhhdmluZyB0aGUgd2F5IGhlIGRvZXMgImJlY2F1c2UgaGUgaXMKCUphY2thbCIuCgkJWyBGdW5rICYgV2FnbmFsbHMgU3RhbmRhcmQgRGljdGlvbmFyeSBvZiBGb2xrbG9yZSBdCglBIGxhcmdlIGJvb3QgZXh0ZW5kaW5nIG92ZXIgdGhlIGtuZWUsIGFjdGluZyBhcyBwcm90ZWN0aXZlCglhcm1vdXIgZm9yIHRoZSBsZWcsIHdvcm4gYnkgdHJvb3BlcnMgaW4gdGhlIDE3dGggYW5kIDE4dGgKCWNlbnR1cmllcyBhbmQgbGF0ZXIuICBJdCBpcyBzdGlsbCB0aGUgdHlwZSBvZiBib290IHdvcm4gYnkKCXRoZSBIb3VzZWhvbGQgQ2F2YWxyeSBhbmQgd2FzIGFkb3B0ZWQgYnkgZmlzaGVybWVuIGFuZCBvdGhlcnMKCWJlZm9yZSB0aGUgYWR2ZW50IG9mIGd1bSBib290cy4gIEZpZ3VyYXRpdmVseSwgX3RvIGJlIHVuZGVyIHRoZQoJamFjay1ib290XyBpcyB0byBiZSBjb250cm9sbGVkIGJ5IGEgYnJ1dGFsIG1pbGl0YXJ5IHJlZ2ltZS4KCQlbIEJyZXdlcidzIENvbmNpc2UgRGljdGlvbmFyeSBvZiBQaHJhc2UgYW5kIEZhYmxlIF0KCU5vdGhpbmcgZ3JldyBhbW9uZyB0aGUgcnVpbnMgb2YgdGhlIGNpdHkuICBUaGUgc3RyZWV0cyB3ZXJlCglicm9rZW4gYW5kIHRoZSB3YWxscyBvZiB0aGUgaG91c2VzIGhhZCBmYWxsZW4sIGJ1dCB0aGVyZSB3ZXJlCglubyB3ZWVkcyBmbG93ZXJpbmcgaW4gdGhlIGNyYWNrcyBhbmQgaXQgc2VlbWVkIHRoYXQgdGhlIGNpdHkKCWhhZCBidXQgcmVjZW50bHkgYmVlbiBicm91Z2h0IGRvd24gYnkgYW4gZWFydGhxdWFrZS4gIE9ubHkKCW9uZSB0aGluZyBzdGlsbCBzdG9vZCBpbnRhY3QsIHRvd2VyaW5nIG92ZXIgdGhlIHJ1aW5zLiAgSXQKCXdhcyBhIGdpZ2FudGljIHN0YXR1ZSBvZiB3aGl0ZSwgZ3JheSBhbmQgZ3JlZW4gamFkZSAtIHRoZQoJc3RhdHVlIG9mIGEgbmFrZWQgeW91dGggd2l0aCBhIGZhY2Ugb2YgYWxtb3N0IGZlbWluaW5lIGJlYXV0eQoJdGhhdCB0dXJuZWQgc2lnaHRsZXNzIGV5ZXMgdG93YXJkIHRoZSBub3J0aC4KCSJUaGUgZXllcyEiIER1a2UgQXZhbiBBc3RyYW4gc2FpZC4gICJUaGV5J3JlIGdvbmUhIgoJCVsgVGhlIEphZGUgTWFuJ3MgRXllcywgYnkgTWljaGFlbCBNb29yY29jayBdCglMYXJnZSwgZmxlc2gtZWF0aW5nIGFuaW1hbCBvZiB0aGUgY2F0IGZhbWlseSwgb2YgQ2VudHJhbCBhbmQKCVNvdXRoIEFtZXJpY2EuICBUaGlzIGZlbGluZSBwcmVkYXRvciAoX1BhbnRoZXJhIG9uY2FfKSBpcwoJc29tZXRpbWVzIGluY29ycmVjdGx5IGNhbGxlZCBhIHBhbnRoZXIuCgkgICAgWyBWYW4gRGFsZSdzIEdyb290IFdvb3JkZW5ib2VrIGRlciBOZWRlcmxhbmRzZSBUYWFsIF0KCUkgZG8gbm90IGNhcmUgdG8gc2hhcmUgdGhlIHNlYXMKCVdpdGggamVsbHlmaXNoZXMgc3VjaCBhcyB0aGVzZTsKCVBhcnRpY3VsYXJseSBQb3J0dWd1ZXNlLgoJICBbIExpbmVzIG9uIE1lZXRpbmcgYSBQb3J0dWd1ZXNlIE1hbi1vJy13YXIgd2hpbGUgQmF0aGluZywKCSAgICAgIGJ5IE1pY2hhZWwgRmxhbmRlcnMgXQoJTGl0dGxlIGlzIGtub3duIGFib3V0IHRoZSBGYWNlbGVzcyBMb3JkLCBldmVuIHRoZSBjb3JyZWN0CglzcGVsbGluZyBvZiBoaXMgbmFtZS4gIEhlIGRvZXMgbm90IGhhdmUgYSBwaHlzaWNhbCBmb3JtIGFzCgl3ZSBrbm93IGl0LCBhbmQgdGhvc2Ugd2hvIGhhdmUgcGVlcmVkIGludG8gaGlzIHJlYWxtIGNsYWltCgloZSBpcyBhIHNsaW1lLWxpa2UgY3JlYXR1cmUgd2hvIHN3YWxsb3dzIG90aGVyIGNyZWF0dXJlcwoJYWxpdmUsIHNwaXRzIGFjaWRpYyBzZWNyZXRpb25zLCBhbmQgY2F1c2VzIGRpc2Vhc2UgaW4gaGlzCgl2aWN0aW1zIHdoaWNoIGNhbiBiZSBhbG1vc3QgaW5zdGFudGx5IGZhdGFsLgoJVGhlIEsgcmF0aW9uIHdhcyB0aGUgWyBRdWFydGVybWFzdGVyIFN1YnNpc3RlbmNlIFJlc2VhcmNoCglhbmQgRGV2ZWxvcG1lbnQgTGFib3JhdG9yeSdzIF0gYW5zd2VyIHRvIHRoZSBkZW1hbmQgZm9yIGFuCglpbmRpdmlkdWFsLCBlYXN5LXRvLWNhcnJ5IHJhdGlvbiB0aGF0IGNvdWxkIGJlIHVzZWQgaW4KCWFzc2F1bHQgYW5kIGNvbWJhdCBvcGVyYXRpb25zLiAgSXQgd2FzIG5vdGVkIGZvciBjb21wYWN0bmVzcwoJYW5kIHN1cGVyaW9yIHBhY2thZ2luZyBhbmQgd2FzIGFja25vd2xlZGdlZCBhcyB0aGUgcmF0aW9uCgl0aGF0IHByb3ZpZGVkIHRoZSBncmVhdGVzdCB2YXJpZXR5IG9mIG51dHJpdGlvbmFsbHkgYmFsYW5jZWQKCWNvbXBvbmVudHMgd2l0aGluIHRoZSBzbWFsbGVzdCBzcGFjZS4KCQlbIFNwZWNpYWwgUmF0aW9ucyBmb3IgdGhlIEFybWVkIEZvcmNlcywgMTk0Ni01MywKCQkgIGJ5IEZyYW56IEEuIEtvZWhsZXIgXQoJVGhlIGthYnV0byBpcyB0aGUgaGVsbWV0IHdvcm4gYnkgdGhlIHNhbXVyYWkuICBJdCB3YXMKCWNoYXJhY3Rlcml6ZWQgYnkgYSBwcm9taW5lbnQgYmVha2VkIGZyb250IHdoaWNoIGp1dHRlZCBvdXQgb3ZlcgoJdGhlIGJyb3cgdG8gcHJvdGVjdCB0aGUgd2VhcmVyJ3MgZmFjZTsgYSBmZWF0dXJlIHRoYXQgZ2l2ZXMKCXJpc2UgdG8gdGhlaXIgbW9kZXJuIEphcGFuZXNlIG5hbWUgb2YgJ3Nob2tha3UgdHN1a2kga2FidXRvJwoJKGJhdHRlcmluZy1yYW0gaGVsbWV0KS4gIFRoZWlyIG1haW4gY29uc3RydWN0aW9uYWwgZWxlbWVudAoJd2FzIGFuIG92YWwgcGxhdGUsIHRoZSBzaG9rYWt1IGJvLCBzbGlnaHRseSBkb21lZCBmb3IgdGhlCgloZWFkIHdpdGggYSBuYXJyb3cgcHJvbG9uZ2F0aW9uIGluIGZyb250IHRoYXQgY3VydmVkIGZvcndhcmRzCglhbmQgZG93bndhcmRzIHdoZXJlIGl0IGRldmVsb3BlZCBhIHByb25vdW5jZWQgY2VudHJhbAoJZm9sZC4gIFR3byBob3Jpem9udGFsIHN0cmlwcyBlbmNpcmNsaW5nIHRoZSBoZWFkIHdlcmUgcml2ZXRlZAoJdG8gdGhpcyBmcm9udGFsIHN0cmlwOiAgdGhlIGxvd2VyIG9uZSwgdGhlIGtvc2hpbWFraSAoaGlwCgl3cmFwKSwgZm9ybWVkIHRoZSBsb3dlciBlZGdlIG9mIHRoZSBoZWxtZXQgYm93bDsgdGhlIG90aGVyLAoJdGhlIGRvIG1ha2kgKGJvZHkgd3JhcCksIHdhcyBzZXQgYXQgYWJvdXQgdGhlIGxldmVsIG9mIHRoZQoJdGVtcGxlcy4gIEZpbGxpbmcgdGhlIGdhcHMgYmV0d2VlbiB0aGVzZSBzdHJpcHMgYW5kIHRoZSBzaG9rYWt1CglibyB3ZXJlIHNtYWxsIHBsYXRlcywgc29tZXRpbWVzIHRyaWFuZ3VsYXIgYnV0IG1vcmUgY29tbW9ubHkKCXJlY3Rhbmd1bGFyIGluIHNoYXBlLiAgQmVjYXVzZSB0aGUgZnJvbnQgcHJvamVjdGVkIHNvCglmYXIgZnJvbSB0aGUgaGVhZCwgdGhlIHRyaWFuZ3VsYXIgZ2FwIGJlbmVhdGggd2FzIGZpbGxlZCBieQoJYSBzbWFsbCBwbGF0ZSwgdGhlIHNob3NoYWt1IHRlaSBpdGEsIHdob3NlIHJlYXIgZWRnZSBiZW50Cglkb3dud2FyZHMgaW50byBhIGZsYW5nZSB0aGF0IHJlc3RlZCBhZ2FpbnN0IHRoZSBmb3JlaGVhZC4KCSAgIFsgQXJtcyAmIEFybW91ciBvZiB0aGUgU2FtdXJhaSwgYnkgQm90dG9tbGV5ICYgSG9wc29uIF0KCVRoZSBrYXRhbmEgaXMgYSBsb25nLCBzaW5nbGUtZWRnZWQgc2FtdXJhaSBzd29yZCB3aXRoIGEKCXNsaWdodGx5IGN1cnZlZCBibGFkZS4gIEl0cyBsb25nIGhhbmRsZSBpcyBkZXNpZ25lZCB0byBhbGxvdwoJaXQgdG8gYmUgd2llbGRlZCB3aXRoIGVpdGhlciBvbmUgb3IgdHdvIGhhbmRzLgoJSSBub3RpY2VkIHRoYXQgYWxsIHRoZSBwbGFudHMgd2VyZSBhdHRhY2hlZCB0byB0aGUgc29pbCBieQoJYW4gYWxtb3N0IGltcGVyY2VwdGlibGUgYm9uZC4gIERldm9pZCBvZiByb290cywgdGhleSBzZWVtZWQKCW5vdCB0byByZXF1aXJlIGFueSBub3VyaXNobWVudCBmcm9tIHNhbmQsIHNvaWwsIG9yIHBlYmJsZS4KCUFsbCB0aGV5IHJlcXVpcmVkIHdhcyBhIHBvaW50IG9mIHN1cHBvcnQgLS0gbm90aGluZyBlbHNlLgoJVGhlc2UgcGxhbnRzIGFyZSBzZWxmLXByb3BhZ2F0ZWQsIGFuZCB0aGVpciBleGlzdGVuY2UgZGVwZW5kcwoJZW50aXJlbHkgb24gdGhlIHdhdGVyIHRoYXQgc3VwcG9ydHMgYW5kIG5vdXJpc2hlcyB0aGVtLgoJTW9zdCBvZiB0aGVtIGRvIG5vdCBzcHJvdXQgbGVhdmVzLCBidXQgc3Byb3V0IGJsYWRlcyBvZgoJdmFyaW91cyB3aGltc2ljYWwgc2hhcGVzLCBhbmQgdGhlaXIgY29sb3JzIGFyZSBsaW1pdGVkIHRvCglwaW5rLCBjYXJtaW5lLCBncmVlbiwgb2xpdmUsIGZhd24sIGFuZCBicm93bi4gIEkgaGFkIHRoZQoJb3Bwb3J0dW5pdHkgdG8gb2JzZXJ2ZSBvbmNlIG1vcmUgLS0gbm90IHRoZSBkcmllZCBzcGVjaW1lbnMKCUkgaGFkIHN0dWRpZWQgb24gdGhlIF9OYXV0aWx1c18gLS0gYnV0IHRoZSBmcmVzaCwgbGl2aW5nCglzcGVjaW1lbnMgaW4gdGhlaXIgbmF0aXZlIHNldHRpbmcuCgkJWyAyMCwwMDAgTGVhZ3VlcyBVbmRlciB0aGUgU2VhLCBieSBKdWxlcyBWZXJuZSBdCglUaGUga2ktcmluIGlzIGEgc3RyYW5nZS1sb29raW5nIGZseWluZyBjcmVhdHVyZS4gIEl0IGhhcwoJc2NhbGVzLCBhIG1hbmUgbGlrZSBhIGxpb24sIGEgdGFpbCwgaG9vdmVzLCBhbmQgYSBob3JuLiAgSXQKCWlzIGJyaWdodGx5IGNvbG9yZWQsIGFuZCBjYW4gdXN1YWxseSBiZSBmb3VuZCBmbHlpbmcgaW4gdGhlCglza3kgbG9va2luZyBmb3IgZ29vZCBkZWVkcyB0byByZXdhcmQuCglFY3RvciB0b29rIGJvdGggaGlzIHNvbnMgdG8gdGhlIGNodXJjaCBiZWZvcmUgd2hpY2ggdGhlCglhbnZpbCBoYWQgYmVlbiBwbGFjZWQuICBUaGVyZSwgc3RhbmRpbmcgYmVmb3JlIHRoZSBhbnZpbCwgaGUKCWNvbW1hbmRlZCBLYXk6ICAiUHV0IHRoZSBzd29yZCBiYWNrIGludG8gdGhlIHN0ZWVsIGlmIHlvdQoJcmVhbGx5IHRoaW5rIHRoZSB0aHJvbmUgaXMgeW91cnMhIiAgQnV0IHRoZSBzd29yZCBnbGFuY2VkCglvZmYgdGhlIHN0ZWVsLiAgIk5vdyBpdCBpcyB5b3VyIHR1cm4iLCBFY3RvciBzYWlkIGZhY2luZwoJQXJ0aHVyLgoJVGhlIHlvdW5nIG1hbiBsaWZ0ZWQgdGhlIHN3b3JkIGFuZCB0aHJ1c3Qgd2l0aCBib3RoIGFybXM7IHRoZQoJYmxhZGUgd2hpenplZCB0aHJvdWdoIHRoZSBhaXIgd2l0aCBhIGZsYXNoIGFuZCBkcmlsbGVkIHRoZQoJbWV0YWwgYXMgaWYgaXQgd2VyZSBtZXJlIGJ1dHRlci4gIEVjdG9yIGFuZCBLYXkgZHJvcHBlZCB0bwoJdGhlaXIga25lZXMgYmVmb3JlIEFydGh1ci4KCSJXaHksIGZhdGhlciBhbmQgYnJvdGhlciwgZG8geW91IGJvdyBiZWZvcmUgbWU/IiwgQXJ0aHVyIGFza2VkCgl3aXRoIHdvbmRlciBpbiBoaXMgdm9pY2UuCgkiQmVjYXVzZSBub3cgSSBrbm93IGZvciBzdXJlIHRoYXQgeW91IGFyZSB0aGUga2luZywgbm90IG9ubHkKCWJ5IGJpcnRoIGJ1dCBhbHNvIGJ5IGxhdyIsIEVjdG9yIHNhaWQuICAiWW91IGFyZSBubyBzb24gb2YKCW1pbmUgbm9yIGFyZSB5b3UgS2F5J3MgYnJvdGhlci4gIEltbWVkaWF0ZWx5IGFmdGVyIHlvdXIgYmlydGgsCglNZXJsaW4gdGhlIFdpc2UgYnJvdWdodCB5b3UgdG8gbWUgdG8gYmUgcmFpc2VkIHNhZmVseS4gIEFuZAoJdGhvdWdoIGl0IHdhcyBtZSB0aGF0IG5hbWVkIHlvdSBBcnRodXIgd2hlbiB5b3Ugd2VyZSBiYXB0aXplZCwKCXlvdSBhcmUgcmVhbGx5IHRoZSBzb24gb2YgYnJhdmUga2luZyBVdGhlciBQZW5kcmFnb24gYW5kIHF1ZWVuCglJZ3JhaW5lLi4uIgoJQW5kIGFmdGVyIHRoZXNlIHdvcmRzLCB0aGUgbG9yZCByb3NlIGFuZCB3ZW50IHRvIHNlZSB0aGUgYXJjaC0KCWJpc2hvcCB0byBpbXBhcnQgdG8gaGltIHdoYXQgaGFkIHBhc3NlZC4KCSAgIFsgVmFuIEdvdWRlbiBUaWpkZW4gWmluZ2VuIGRlIEhhcnBlbiwgYnkgVmxhZGltaXIgSHVscGFjaCwKCQlFbWFudWVsIEZyeW50YSwgYW5kIFZhY2thdiBDaWJ1bGEgXQoJUG9zc2libHkgcGVyY2VpdmluZyBhbiBleHByZXNzaW9uIG9mIGR1Ymlvc2l0eSBvbiB0aGVpcgoJZmFjZXMsIHRoZSBnbG9iZXRyb3R0ZXIgd2VudCBvbiBhZGhlcmluZyB0byBoaXMgYWR2ZW50dXJlcy4KCgktLSBBbmQgSSBzZWVuIGEgbWFuIGtpbGxlZCBpbiBUcmllc3RlIGJ5IGFuIEl0YWxpYW4gY2hhcC4KCUtuaWZlIGluIGhpcyBiYWNrLiAgS25pZmUgbGlrZSB0aGF0LgoKCVdoaWxzdCBzcGVha2luZyBoZSBwcm9kdWNlZCBhIGRhbmdlcm91cyBsb29raW5nIGNsYXNwIGtuaWZlLAoJcXVpdGUgaW4ga2VlcGluZyB3aXRoIGhpcyBjaGFyYWN0ZXIsIGFuZCBoZWxkIGl0IGluIHRoZQoJc3RyaWtpbmcgcG9zaXRpb24uCgoJLS0gSW4gYSBrbm9ja2luZ3Nob3AgaXQgd2FzIGNvdW50IG9mIGEgdHJ5b24gYmV0d2VlbiB0d28KCXNtdWdnbGVycy4gIEZlbGxvdyBoaWQgYmVoaW5kIGEgZG9vciwgY29tZSB1cCBiZWhpbmQgaGltLgoJTGlrZSB0aGF0LiAgUHJlcGFyZSB0byBtZWV0IHlvdXIgR29kLCBzYXlzIGhlLiAgQ2h1Y2shICBJdAoJd2VudCBpbnRvIGhpcyBiYWNrIHVwIHRvIHRoZSBidXR0LgoJCVsgVWx5c3NlcywgYnkgSmFtZXMgSm95Y2UgXQoJSGVyZSBsaWVzIHRoZSBub2JsZSBmZWFybGVzcyBrbmlnaHQsCglXaG9zZSB2YWxvdXIgcm9zZSB0byBzdWNoIGEgaGVpZ2h0OwoJV2hlbiBEZWF0aCBhdCBsYXN0IGhhZCBzdHJ1Y2sgaGltIGRvd24sCglIaXMgd2FzIHRoZSB2aWN0b3J5IGFuZCByZW5vd24uCglIZSByZWNrJ2QgdGhlIHdvcmxkIG9mIGxpdHRsZSBwcml6ZSwKCUFuZCB3YXMgYSBidWdiZWFyIGluIG1lbidzIGV5ZXM7CglCdXQgaGFkIHRoZSBmb3J0dW5lIGluIGhpcyBhZ2UKCVRvIGxpdmUgYSBmb29sIGFuZCBkaWUgYSBzYWdlLgoJICBbIERvbiBRdWl4b3RlIG9mIExhIE1hbmNoYSwgYnkgTWlxdWVsIGRlIENlcnZhbnRlcyBTYWF2ZWRyYSBdCglUaGUgcmFjZSBvZiBrb2JvbGRzIGFyZSByZXB1dGVkIHRvIGJlIGFuIGFydGlmaWNpYWwgY3JlYXRpb24KCW9mIGEgbWFzdGVyIHdpemFyZCAoZGVtaS1nb2Q/KS4gIFRoZXkgYXJlIGFib3V0IDMnIHRhbGwgd2l0aAoJYSB2YWd1ZWx5IGRvZy1saWtlIGZhY2UuICBUaGV5IGJlYXIgYSB2aW9sZW50IGRpc2xpa2Ugb2YgdGhlCglFbHZlbiByYWNlLCBhbmQgd2lsbCBnbyBvdXQgb2YgdGhlaXIgd2F5IHRvIGNhdXNlIHRyb3VibGUKCWZvciBFbHZlcyBhdCBhbnkgdGltZS4KCVRoZSBLb3BzIGFyZSBhIGJyaWxsaWFudCBjb25jZXB0LiAgVG8gdGFrZSBhIGdhZ2dsZSBvZiBpbmVwdAoJcG9saWNlbWVuIGFuZCBkaXNwbGF5IHRoZW0gb3ZlciBhbmQgb3ZlciBhZ2FpbiBpbiBhIHNlcmllcyBvZgoJcmlvdG91c2x5IGZ1bm55IHBoeXNpY2FsIHB1bmlzaG1lbnRzIHBsYXlzIGVxdWFsbHkgd2VsbCB0byB0aGUKCXBlYW51dCBnYWxsZXJ5IGFuZCB0aGUgZXhwZW5zaXZlIGJveCBzZWF0cy4gIFBlb3BsZSBoYXRlIGNvcHMuCglFdmVuIHBlb3BsZSB3aG8gaGF2ZSBuZXZlciBoYWQgYW55dGhpbmcgdG8gZG8gd2l0aCBjb3BzIGhhdGUKCXRoZW0uICBPZiBjb3Vyc2UsIHdlIGNvdW50IG9uIHRoZW0gdG8ga2VlcCBvcmRlciBhbmQgdG8gcHJvdGVjdAoJdXMgd2hlbiB3ZSBuZWVkIHByb3RlY3RpbmcsIGFuZCB3ZSBsb3ZlIHRoZW0gb24gdGVsZXZpc2lvbiBzaG93cwoJaW4gd2hpY2ggdGhleSBoYXZlIG5lcnZlcyBvZiBzdGVlbCBhbmQgaGVhcnRzIG9mIGdvbGQsIGJ1dCBpbgoJdGhlIGFic3RyYWN0LCBhcyBhIG5hdGlvbiwgY29sbGVjdGl2ZWx5IHdlIGhhdGUgdGhlbS4gIFRoZXkgYXJlCgl0b28gbXVjaCBsaWtlIGhpZ2ggc2Nob29sIHByaW5jaXBhbHMuICBXZSdyZSB2ZXJ5IGhhcHB5IHRvIHNlZQoJdGhlaXIgcGFudHMgZmFsbCBkb3duLCBhbmQgdGhleSBsb29rIGdvb2QgdG8gdXMgd2l0aCBwaWUgb24KCXRoZWlyIGZhY2VzLiAgVGhlIEtleXN0b25lIEtvcHMgdHVybiB1cC0tYW5kIHRoZXkgZ2V0IHB1bmlzaGVkCglmb3IgaXQsIGFzIHRoZXkgY3Jhc2ggaW50byBlYWNoIG90aGVyLCBmYWxsIGRvd24sIGFuZCBzdWZmZXIKCWluZGlnbml0eSBhZnRlciBpbmRpZ25pdHkuICBIZXJlIGlzIHB1cmUgbW92aWUgc2F0aXNmYWN0aW9uLgoKCVRoZSBLb3BzIGFyZSB2ZXJ5IHNraWxsZnVsbHkgcHJlc2VudGVkLiAgVGhlIGNvbWljIG9yaWdpbmFsaXR5CglhbmQgdGltaW5nIGluIG9uZSBvZiB0aGVpciBjaGFzZSBzY2VuZXMgcmVxdWlyZXMgaW1hZ2luYXRpb24KCXRvIHRoaW5rIHVwLCB0YWxlbnQgdG8gZXhlY3V0ZSwgdW5kZXJzdGFuZGluZyBvZiB0aGUgbWVkaXVtLAoJYW5kLCBvZiBjb3Vyc2UsIHJhdyBjb3VyYWdlIHRvIHBlcmZvcm0uICBUaGUgS29wcyBhcmUgbWFkbWVuCglwcmVzZW50ZWQgYXMgaW5jb21wZXRlbnRzLCBhbmQgdGhleSdyZSBtYWRtZW4gcnVzaGluZyBhcm91bmQKCWluIG1vZGVybiBtYWNoaW5lcy4gIFdoYXQncyBtb3JlLCB0aGUgbWFjaGluZXMgdGhleSB3ZXJlIG9wZXJhdGluZwoJaW4gdGhlaXIgcm91dGluZXMgd2VyZSBuZXdseSBpbnZlbnRlZCBhbmQgbm90IHlldCBleHBlcmllbmNlZAoJYnkgdGhlIGF2ZXJhZ2UgbW92aWVnb2VyLiAgKEluIHRoZSBlYXJseSBkYXlzIG9mIGF1dG9tb2JpbGVzLAoJaXQgd2FzIHJlcG9ydGVkIHRoYXQgdGhlcmUgd2VyZSBvbmx5IHR3byBjYXJzIHJlZ2lzdGVyZWQgaW4gYWxsCglvZiBLYW5zYXMgQ2l0eSwgYW5kIHRoZXkgcmFuIGludG8gZWFjaCBvdGhlci4gIFRoZXJlIGlzIGJvdGgKCXBvZXRyeSBhbmQgcGhpbG9zb3BoeSBpbiB0aGlzIGZhY3QsIGJ1dCBtb3N0IG9mIGFsbCwgdGhlcmUgaXMKCWh1bW9yLiAgU2VubmV0dCBnb3QgdGhlIGh1bW9yLikKCQlbIFNpbGVudCBTdGFycywgYnkgSmVhbmluZSBCYXNpbmdlciBdCgkiSSBhbSBub3QgYSBjb3dhcmQhIiBoZSBjcmllZC4gICJJJ2xsIGRhcmUgVGhpZXZlcycgSG91c2UKCWFuZCBmZXRjaCB5b3UgS3JvdmFzJyBoZWFkIGFuZCB0b3NzIGl0IHdpdGggYmxvb2QgYS1kcmlwIGF0CglWbGFuYSdzIGZlZXQuICBJIHN3ZWFyIHRoYXQsIHdpdG5lc3MgbWUsIEtvcyB0aGUgZ29kIG9mCglkb29tcywgYnkgdGhlIGJyb3duIGJvbmVzIG9mIE5hbGdyb24gbXkgZmF0aGVyIGFuZCBieSBoaXMKCXN3b3JkIEdyYXl3YW5kIGhlcmUgYXQgbXkgc2lkZSEiCgkgICBbIFN3b3JkcyBhbmQgRGV2aWx0cnksIGJ5IEZyaXR6IExlaWJlciBdCglBIEphcGFuZXNlIGhhcnAuCglPdXQgZnJvbSB0aGUgd2F0ZXIgYSBsb25nIHNpbnVvdXMgdGVudGFjbGUgaGFkIGNyYXdsZWQ7IGl0Cgl3YXMgcGFsZS1ncmVlbiBhbmQgbHVtaW5vdXMgYW5kIHdldC4gIEl0cyBmaW5nZXJlZCBlbmQgaGFkCglob2xkIG9mIEZyb2RvJ3MgZm9vdCwgYW5kIHdhcyBkcmFnZ2luZyBoaW0gaW50byB0aGUgd2F0ZXIuCglTYW0gb24gaGlzIGtuZWVzIHdhcyBub3cgc2xhc2hpbmcgYXQgaXQgd2l0aCBhIGtuaWZlLiAgVGhlCglhcm0gbGV0IGdvIG9mIEZyb2RvLCBhbmQgU2FtIHB1bGxlZCBoaW0gYXdheSwgY3J5aW5nIG91dAoJZm9yIGhlbHAuICBUd2VudHkgb3RoZXIgYXJtcyBjYW1lIHJpcHBsaW5nIG91dC4gIFRoZSBkYXJrCgl3YXRlciBib2lsZWQsIGFuZCB0aGVyZSB3YXMgYSBoaWRlb3VzIHN0ZW5jaC4KCSAgIFsgVGhlIEZlbGxvd3NoaXAgb2YgdGhlIFJpbmcsIGJ5IEouUi5SLiBUb2xraWVuIF0KCUJsaW5kIElvIHRvb2sgdXAgdGhlIGRpY2UtYm94LCB3aGljaCB3YXMgYSBza3VsbCB3aG9zZSB2YXJpb3VzCglvcmlmaWNlcyBoYWQgYmVlbiBzdG9wcGVyZWQgd2l0aCBydWJpZXMsIGFuZCB3aXRoIHNldmVyYWwgb2YKCWhpcyBleWVzIG9uIHRoZSBMYWR5IGhlIHJvbGxlZCB0aHJlZSBmaXZlcy4gIFNoZSBzbWlsZWQuICBUaGlzCgl3YXMgdGhlIG5hdHVyZSBvZiB0aGUgTGFkeSdzIGV5ZXM6ICB0aGV5IHdlcmUgYnJpZ2h0IGdyZWVuLAoJbGFja2luZyBpcmlzIG9yIHB1cGlsLCBhbmQgdGhleSBnbG93ZWQgZnJvbSB3aXRoaW4uCgoJVGhlIHJvb20gd2FzIHNpbGVudCBhcyBzaGUgc2NyYWJibGVkIGluIGhlciBib3ggb2YgcGllY2VzIGFuZCwKCWZyb20gdGhlIHZlcnkgYm90dG9tLCBwcm9kdWNlZCBhIGNvdXBsZSB0aGF0IHNoZSBzZXQgZG93biBvbgoJdGhlIGJvYXJkIHdpdGggdHdvIGRlY2lzaXZlIGNsaWNrcy4gIFRoZSByZXN0IG9mIHRoZSBwbGF5ZXJzLAoJYXMgb25lIEdvZCwgY3JhbmVkIGZvcndhcmQgdG8gcGVlciBhdCB0aGVtLgoKCSJBIHdlbmVnYWRlIHdpZmZhcmQgYW5kIGZvbWUgZm9ydCBvZiBjbGVyaywiIHNhaWQgT2ZmbGVyIHRoZQoJQ3JvY29kaWxlIEdvZCwgaGluZGVyZWQgYXMgdXN1YWwgYnkgaGlzIHR1c2tzLiAgIldlbGwsCgl3ZWFsbHkhIiAgV2l0aCBvbmUgY2xhdyBoZSBwdXNoZWQgYSBwaWxlIG9mIGJvbmUtd2hpdGUgdG9rZW5zCglpbnRvIHRoZSBjZW50cmUgb2YgdGhlIHRhYmxlLgoKCVRoZSBMYWR5IG5vZGRlZCBzbGlnaHRseS4gIFNoZSBwaWNrZWQgdXAgdGhlIGRpY2UtY3VwIGFuZCBoZWxkCglpdCBhcyBzdGVhZHkgYXMgYSByb2NrLCB5ZXQgYWxsIHRoZSBHb2RzIGNvdWxkIGhlYXIgdGhlIHRocmVlCgljdWJlcyByYXR0bGluZyBhYm91dCBpbnNpZGUuICBBbmQgdGhlbiBzaGUgc2VudCB0aGVtIGJvdW5jaW5nCglhY3Jvc3MgdGhlIHRhYmxlLgoKCUEgc2l4LiAgQSB0aHJlZS4gIEEgZml2ZS4KCglTb21ldGhpbmcgd2FzIGhhcHBlbmluZyB0byB0aGUgZml2ZSwgaG93ZXZlci4gIEJhdHRlcmVkIGJ5IHRoZQoJY2hhbmNlIGNvbGxpc2lvbiBvZiBzZXZlcmFsIGJpbGxpb24gbW9sZWN1bGVzLCB0aGUgZGllIGZsaXBwZWQKCW9udG8gYSBwb2ludCwgc3B1biBnZW50bHkgYW5kIGNhbWUgZG93biBhIHNldmVuLiAgQmxpbmQgSW8KCXBpY2tlZCB1cCB0aGUgY3ViZSBhbmQgY291bnRlZCB0aGUgc2lkZXMuCgoJIkNvbWUgX29uXywiIGhlIHNhaWQgd2VhcmlseSwgIlBsYXkgZmFpci4iCgkJWyBUaGUgQ29sb3VyIG9mIE1hZ2ljLCBieSBUZXJyeSBQcmF0Y2hldHQgXQoJV2hlbiBoZSBjYW1lIHRvIGhpbXNlbGYgaGUgdG9sZCBoaXMgbW90aGVyIHdoYXQgaGFkIHBhc3NlZCwKCWFuZCBzaG93ZWQgaGVyIHRoZSBsYW1wIGFuZCB0aGUgZnJ1aXRzIGhlIGhhZCBnYXRoZXJlZCBpbiB0aGUKCWdhcmRlbiwgd2hpY2ggd2VyZSBpbiByZWFsaXR5IHByZWNpb3VzIHN0b25lcy4gIEhlIHRoZW4gYXNrZWQKCWZvciBzb21lIGZvb2QuCgoJIkFsYXMhIGNoaWxkLCIgc2hlIHNhaWQsICJJIGhhdmUgbm90aGluZyBpbiB0aGUgaG91c2UsIGJ1dCBJCgloYXZlIHNwdW4gYSBsaXR0bGUgY290dG9uIGFuZCB3aWxsIGdvIGFuZCBzZWxsIGl0LiIKCglBbGFkZGluIGJhZGUgaGVyIGtlZXAgaGVyIGNvdHRvbiwgZm9yIGhlIHdvdWxkIHNlbGwgdGhlIGxhbXAKCWluc3RlYWQuICBBcyBpdCB3YXMgdmVyeSBkaXJ0eSBzaGUgYmVnYW4gdG8gcnViIGl0LCB0aGF0IGl0CgltaWdodCBmZXRjaCBhIGhpZ2hlciBwcmljZS4gIEluc3RhbnRseSBhIGhpZGVvdXMgZ2VuaWUKCWFwcGVhcmVkLCBhbmQgYXNrZWQgd2hhdCBzaGUgd291bGQgaGF2ZS4gIFNoZSBmYWludGVkIGF3YXksCglidXQgQWxhZGRpbiwgc25hdGNoaW5nIHRoZSBsYW1wLCBzYWlkIGJvbGRseToKCSJGZXRjaCBtZSBzb21ldGhpbmcgdG8gZWF0ISIKCQlbIEFsYWRkaW4sIGZyb20gVGhlIEFyYWJpYW4gTmlnaHRzLCBieSBBbmRyZXcgTGFuZyBdCglXaXRoIHRoaXMgdGhlIHdpbmQgaW5jcmVhc2VkLCBhbmQgdGhlIG1pbGwgc2FpbHMgYmVnYW4gdG8gdHVybgoJYWJvdXQ7IHdoaWNoIERvbiBRdWl4b3RlIGVzcHlpbmcsIHNhaWQsICdBbHRob3VnaCB0aG91IG1vdmVzdAoJbW9yZSBhcm1zIHRoYW4gdGhlIGdpYW50IEJyaWFyZXVzIHRob3Ugc2hhbHQgc3Rvb3AgdG8gbWUuJwoJQW5kLCBhZnRlciBzYXlpbmcgdGhpcywgYW5kIGNvbW1lbmRpbmcgaGltc2VsZiBtb3N0IGRldm91dGx5Cgl0byBoaXMgTGFkeSBEdWxjaW5lYSwgZGVzaXJpbmcgaGVyIHRvIHN1Y2NvciBoaW0gaW4gdGhhdCB0cmFuY2UsCgljb3ZlcmluZyBoaW1zZWxmIHdlbGwgd2l0aCBoaXMgYnVja2xlciwgYW5kIHNldHRpbmcgaGlzIGxhbmNlCglvbiBoaXMgcmVzdCwgaGUgc3B1cnJlZCBvbiBSb3ppbmFudGUsIGFuZCBlbmNvdW50ZXJlZCB3aXRoIHRoZQoJZmlyc3QgbWlsbCB0aGF0IHdhcyBiZWZvcmUgaGltLCBhbmQsIHN0cmlraW5nIGhpcyBsYW5jZSBpbnRvCgl0aGUgc2FpbCwgdGhlIHdpbmQgc3d1bmcgaXQgYWJvdXQgd2l0aCBzdWNoIGZ1cnksIHRoYXQgaXQgYnJva2UKCWhpcyBsYW5jZSBpbnRvIHNoaXZlcnMsIGNhcnJ5aW5nIGhpbSBhbmQgaGlzIGhvcnNlIGFmdGVyIGl0LAoJYW5kIGZpbmFsbHkgdHVtYmxlZCBoaW0gYSBnb29kIHdheSBvZmYgZnJvbSBpdCBvbiB0aGUgZmllbGQgaW4KCWV2aWwgcGxpZ2h0LgoJICBbIERvbiBRdWl4b3RlIG9mIExhIE1hbmNoYSwgYnkgTWlxdWVsIGRlIENlcnZhbnRlcyBTYWF2ZWRyYSBdCglZb3VyIGhlYXJ0IGlzIGludGFjdCwgeW91ciBicmFpbiBpcyBub3QgYmFkbHkgZGFtYWdlZCwgYnV0IHRoZSByZXN0CglvZiB5b3VyIGluanVyaWVzIGFyZSBjb21wYXJhYmxlIHRvIHN0ZXBwaW5nIG9uIGEgbGFuZCBtaW5lLiAgWW91J2QKCW5ldmVyIHdhbGsgYWdhaW4sIGFuZCB5b3UnZCBiZSBpbiBncmVhdCBwYWluLiAgWW91IHdvdWxkIGNvbWUgdG8KCXdpc2ggeW91IGhhZCBub3Qgc3Vydml2ZWQuCgkJWyBTdGVlbCBCZWFjaCwgYnkgSm9obiBWYXJsZXkgXQoJV2hpbGUgcHJldGVuZGluZyB0byBiZSBhIGZhbmN5IHNhZmV0eSBsYW1wLCBpdCBpcyBpbiBmYWN0CgliYXR0ZXJ5IHBvd2VyZWQuICBBIGRpc2NyZWV0IGxpdHRsZSBzd2l0Y2ggaXMgbWFya2VkICJvbi9vZmYiCglpbiBlbGFib3JhdGUgbGV0dGVyaW5nLgoJCVsgQWR2ZW50dXJlIDc3MCwgYnkgTWlrZSBBcm5hdXRvdiBdCglZb3UgYXJlIG9uIHRoZSBlZGdlIG9mIGEgYnJlYXRoLXRha2luZyB2aWV3LiAgRmFyIGJlbG93IHlvdQoJaXMgYW4gYWN0aXZlIHZvbGNhbm8sIGZyb20gd2hpY2ggZ3JlYXQgZ291dHMgb2YgbW9sdGVuIGxhdmEKCWNvbWUgc3VyZ2luZyBvdXQsIGNhc2NhZGluZyBiYWNrIGRvd24gaW50byB0aGUgZGVwdGhzLiAgVGhlCglnbG93aW5nIHJvY2sgZmlsbHMgdGhlIGZhcnRoZXN0IHJlYWNoZXMgb2YgdGhlIGNhdmVybiB3aXRoIGEKCWJsb29kLXJlZCBnbGFyZSwgZ2l2aW5nIGV2ZXJ5dGhpbmcgYW4gZWVyaWUsIG1hY2FicmUgYXBwZWFyYW5jZS4KCVRoZSBhaXIgaXMgZmlsbGVkIHdpdGggZmxpY2tlcmluZyBzcGFya3Mgb2YgYXNoIGFuZCBhIGhlYXZ5CglzbWVsbCBvZiBicmltc3RvbmUuICBUaGUgd2FsbHMgYXJlIGhvdCB0byB0aGUgdG91Y2gsIGFuZCB0aGUKCXRodW5kZXJpbmcgb2YgdGhlIHZvbGNhbm8gZHJvd25zIG91dCBhbGwgb3RoZXIgc291bmRzLgoJRW1iZWRkZWQgaW4gdGhlIGphZ2dlZCByb29mIGZhciBvdmVyaGVhZCBhcmUgbXlyaWFkIHR3aXN0ZWQKCWZvcm1hdGlvbnMgY29tcG9zZWQgb2YgcHVyZSB3aGl0ZSBhbGFiYXN0ZXIsIHdoaWNoIHNjYXR0ZXIgdGhlCgltdXJreSBsaWdodCBpbnRvIHNpbmlzdGVyIGFwcGFyaXRpb25zIHVwb24gdGhlIHdhbGxzLiAgVG8gb25lCglzaWRlIGlzIGEgZGVlcCBnb3JnZSwgZmlsbGVkIHdpdGggYSBiaXphcnJlIGNoYW9zIG9mIHRvcnR1cmVkCglyb2NrIHdoaWNoIHNlZW1zIHRvIGhhdmUgYmVlbiBjcmFmdGVkIGJ5IHRoZSBkZXZpbCBoaW1zZWxmLgoJQW4gaW1tZW5zZSByaXZlciBvZiBmaXJlIGNyYXNoZXMgb3V0IGZyb20gdGhlIGRlcHRocyBvZiB0aGUKCXZvbGNhbm8sIGJ1cm5zIGl0cyB3YXkgdGhyb3VnaCB0aGUgZ29yZ2UsIGFuZCBwbHVtbWV0cyBpbnRvIGEKCWJvdHRvbWxlc3MgcGl0IGZhciBvZmYgdG8geW91ciBsZWZ0LiAgVG8gdGhlIHJpZ2h0LCBhbiBpbW1lbnNlCglnZXlzZXIgb2YgYmxpc3RlcmluZyBzdGVhbSBlcnVwdHMgY29udGludW91c2x5IGZyb20gYSBiYXJyZW4KCWlzbGFuZCBpbiB0aGUgY2VudGVyIG9mIGEgc3VsZnVyb3VzIGxha2UsIHdoaWNoIGJ1YmJsZXMKCW9taW5vdXNseS4gIFRoZSBmYXIgcmlnaHQgd2FsbCBpcyBhZmxhbWUgd2l0aCBhbiBpbmNhbmRlc2NlbmNlCglvZiBpdHMgb3duLCB3aGljaCBsZW5kcyBhbiBhZGRpdGlvbmFsIGluZmVybmFsIHNwbGVuZG9yIHRvIHRoZQoJYWxyZWFkeSBoZWxsaXNoIHNjZW5lLiAgQSBkYXJrLCBmb3Jib2RpbmcgcGFzc2FnZSBleGl0cyB0byB0aGUKCXNvdXRoLgoJCVsgQWR2ZW50dXJlLCBieSBXaWxsIENyb3d0aGVyIGFuZCBEb24gV29vZHMuIF0KCVRoZXkgaGFkIHNwbGVuZGlkIGhlYWRzLCBmaW5lIHNob3VsZGVycywgc3Ryb25nIGxlZ3MsIGFuZAoJc3RyYWlnaHQgdGFpbHMuICBUaGUgc3BvdHMgb24gdGhlaXIgYm9kaWVzIHdlcmUgamV0LWJsYWNrIGFuZAoJbW9zdGx5IHRoZSBzaXplIG9mIGEgdHdvLXNoaWxsaW5nIHBpZWNlOyB0aGV5IGhhZCBzbWFsbGVyCglzcG90cyBvbiB0aGVpciBoZWFkcywgbGVncywgYW5kIHRhaWxzLiAgVGhlaXIgbm9zZXMgYW5kIGV5ZS0KCXJpbXMgd2VyZSBibGFjay4gIE1pc3NpcyBoYWQgYSBtb3N0IHdpbm5pbmcgZXhwcmVzc2lvbi4KCVBvbmdvLCB0aG91Z2ggYSBkb2cgYm9ybiB0byBjb21tYW5kLCBoYWQgYSB0d2lua2xlIGluIGhpcwoJZXllLiAgVGhleSB3YWxrZWQgc2lkZSBieSBzaWRlIHdpdGggZ3JlYXQgZGlnbml0eSwgb25seQoJcHV0dGluZyB0aGUgRGVhcmx5cyBvbiB0aGUgbGVhc2ggdG8gbGVhZCB0aGVtIG92ZXIgY3Jvc3NpbmdzLgoJCVsgVGhlIEh1bmRyZWQgYW5kIE9uZSBEYWxtYXRpYW5zLCBieSBEb2RpZSBTbWl0aCBdCglJbiB0aGUgbW9ybmluZywgYXMgdGhleSB3ZXJlIGJlZ2lubmluZyB0byBwYWNrIHRoZWlyIHNsZW5kZXIKCWdvb2RzLCBFbHZlcyB0aGF0IGNvdWxkIHNwZWFrIHRoZWlyIHRvbmd1ZSBjYW1lIHRvIHRoZW0gYW5kCglicm91Z2h0IHRoZW0gbWFueSBnaWZ0cyBvZiBmb29kIGFuZCBjbG90aGluZyBmb3IgdGhlaXIKCWpvdXJuZXkuICBUaGUgZm9vZCB3YXMgbW9zdGx5IGluIHRoZSBmb3JtIG9mIHZlcnkgdGhpbiBjYWtlcywKCW1hZGUgb2YgYSBtZWFsIHRoYXQgd2FzIGJha2VkIGEgbGlnaHQgYnJvd24gb24gdGhlIG91dHNpZGUsCglhbmQgaW5zaWRlIHdhcyB0aGUgY29sb3VyIG9mIGNyZWFtLiAgR2ltbGkgdG9vayB1cCBvbmUgb2YgdGhlCgljYWtlcyBhbmQgbG9va2VkIGF0IGl0IHdpdGggYSBkb3VidGZ1bCBleWUuCgknQ3JhbSwnIGhlIHNhaWQgdW5kZXIgaGlzIGJyZWF0aCwgYXMgaGUgYnJva2Ugb2ZmIGEgY3Jpc3AKCWNvcm5lciBhbmQgbmliYmxlZCBhdCBpdC4gIEhpcyBleHByZXNzaW9uIHF1aWNrbHkgY2hhbmdlZCwKCWFuZCBoZSBhdGUgYWxsIHRoZSByZXN0IG9mIHRoZSBjYWtlIHdpdGggcmVsaXNoLgoJJ05vIG1vcmUsIG5vIG1vcmUhJyBjcmllZCB0aGUgRWx2ZXMgbGF1Z2hpbmcuICAnWW91IGhhdmUKCWVhdGVuIGVub3VnaCBhbHJlYWR5IGZvciBhIGxvbmcgZGF5J3MgbWFyY2guJwoJJ0kgdGhvdWdodCBpdCB3YXMgb25seSBhIGtpbmQgb2YgY3JhbSwgc3VjaCBhcyB0aGUgRGFsZW1lbgoJbWFrZSBmb3Igam91cm5leXMgaW4gdGhlIHdpbGQsJyBzYWlkIHRoZSBEd2FyZi4KCSdTbyBpdCBpcywnIHRoZXkgYW5zd2VyZWQuICAnQnV0IHdlIGNhbGwgaXQgbGVtYmFzIG9yCgl3YXlicmVhZCwgYW5kIGl0IGlzIG1vcmUgc3RyZW5ndGhlbmluZyB0aGFuIGFueSBmb29kcyBtYWRlIGJ5CglNZW4sIGFuZCBpdCBpcyBtb3JlIHBsZWFzYW50IHRoYW4gY3JhbSwgYnkgYWxsIGFjY291bnRzLicKCQlbIFRoZSBGZWxsb3dzaGlwIG9mIHRoZSBSaW5nLCBieSBKLlIuUi4gVG9sa2llbiBdCglUaGUgTGFydmFlIChMZW11cmVzKSBhcmUgUm9tYW4gc3Bpcml0cyBvZiBkZWNlYXNlZCBmYW1pbHkKCW1lbWJlcnMuICBUaGVzZSBtYWxpZ25hbnQgc3Bpcml0cyBkd2VsbCB0aHJvdWdob3V0IHRoZSBob3VzZQoJYW5kIGZyaWdodGVuIHRoZSBpbmhhYml0YW50cy4gIFBlb3BsZSB0cmllZCB0byByZWNvbmNpbGUgb3IKCWF2ZXJ0IHRoZSBMYXJ2YWUgd2l0aCBzdHJhbmdlIGNlcmVtb25pZXMgd2hpY2ggdG9vayBwbGFjZSBvbgoJTWF5IDksIDExLCBhbmQgMTM7IHRoaXMgd2FzIGNhbGxlZCB0aGUgIkZlYXN0IG9mIHRoZSBMZW11cmVzIi4KCVRoZSBtYXN0ZXIgb2YgdGhlIGhvdXNlIHVzdWFsbHkgcGVyZm9ybWVkIHRoZXNlIGNlcmVtb25pZXMsCgllaXRoZXIgYnkgb2ZmZXJpbmcgYmxhY2sgYmVhbnMgdG8gdGhlIHNwaXJpdHMgb3IgY2hhc2luZyB0aGVtCglhd2F5IGJ5IG1ha2luZyBhIGxvdCBvZiBub2lzZS4gIFRoZWlyIGNvdW50ZXJwYXJ0cyBhcmUgdGhlCglMYXJlcywgZnJpZW5kbHkgYW5kIGJlbmVmaWNlbnQgaG91c2Ugc3Bpcml0cy4KCQlbIEVuY3ljbG9wZWRpYSBNeXRoaWNhLCBlZC4gTS5GLiBMaW5kZW1hbnMgXQoJLi4uIHRoZSBsZXVjcm9jb3R0YSwgYSB3aWxkIGJlYXN0IG9mIGV4dHJhb3JkaW5hcnkgc3dpZnRuZXNzLAoJdGhlIHNpemUgb2YgdGhlIHdpbGQgYXNzLCB3aXRoIHRoZSBsZWdzIG9mIGEgU3RhZywgdGhlIG5lY2ssCgl0YWlsLCBhbmQgYnJlYXN0IG9mIGEgbGlvbiwgdGhlIGhlYWQgb2YgYSBiYWRnZXIsIGEgY2xvdmVuCglob29mLCB0aGUgbW91dGggc2xpdCB1cCBhcyBmYXIgYXMgdGhlIGVhcnMsIGFuZCBvbmUgY29udGludW91cwoJYm9uZSBpbnN0ZWFkIG9mIHRlZXRoOyBpdCBpcyBzYWlkLCB0b28sIHRoYXQgdGhpcyBhbmltYWwgY2FuCglpbWl0YXRlIHRoZSBodW1hbiB2b2ljZS4KCQlbIEN1cmlvdXMgQ3JlYXR1cmVzIGluIFpvb2xvZ3ksIGJ5IEpvaG4gQXNodG9uIF0KCVRoZSBJcmlzaCBMZXByZWNoYXVuIGlzIHRoZSBGYWVyaWVzJyBzaG9lbWFrZXIgYW5kIGlzIGtub3duCgl1bmRlciB2YXJpb3VzIG5hbWVzIGluIGRpZmZlcmVudCBwYXJ0cyBvZiBJcmVsYW5kOgoJQ2x1cmljYXVuZSBpbiBDb3JrLCBMdXJpY2FuIGluIEtlcnJ5LCBMdXJpa2VlbiBpbiBLaWxkYXJlCglhbmQgTHVyaWdhZGF1biBpbiBUaXBwZXJhcnkuICBBbHRob3VnaCBoZSB3b3JrcyBmb3IgdGhlCglGYWVyaWVzLCB0aGUgTGVwcmVjaGF1biBpcyBub3Qgb2YgdGhlIHNhbWUgc3BlY2llcy4gIEhlIGlzCglzbWFsbCwgaGFzIGRhcmsgc2tpbiBhbmQgd2VhcnMgc3RyYW5nZSBjbG90aGVzLiAgSGlzIG5hdHVyZQoJaGFzIHNvbWV0aGluZyBvZiB0aGUgbWFuaWMtZGVwcmVzc2l2ZSBhYm91dCBpdDogIGZpcnN0IGhlCglpcyBxdWl0ZSBoYXBweSwgd2hpc3RsaW5nIG1lcnJpbHkgYXMgaGUgbmFpbHMgYSBzb2xlIG9uIHRvIGEKCXNob2U7IGEgZmV3IG1pbnV0ZXMgbGF0ZXIsIGhlIGlzIHN1bGxlbiBhbmQgbW9yb3NlLCBkcnVuawoJb24gaGlzIGhvbWUtbWFkZSBoZWF0aGVyIGFsZS4gIFRoZSBMZXByZWNoYXVuJ3MgdHdvIGdyZWF0Cglsb3ZlcyBhcmUgdG9iYWNjbyBhbmQgd2hpc2tleSwgYW5kIGhlIGlzIGEgZmlyc3QtcmF0ZSBjb24tbWFuLAoJaW1wb3NzaWJsZSB0byBvdXQtZm94LiAgTm8gb25lLCBubyBtYXR0ZXIgaG93IGNsZXZlciwgaGFzIGV2ZXIKCW1hbmFnZWQgdG8gY2hlYXQgaGltIG91dCBvZiBoaXMgaGlkZGVuIHBvdCBvZiBnb2xkIG9yIGhpcwoJbWFnaWMgc2hpbGxpbmcuICBBdCB0aGUgbGFzdCBtaW51dGUgaGUgYWx3YXlzIHRoaW5rcyBvZiBzb21lCgl3YXkgdG8gZGl2ZXJ0IGhpcyBjYXB0b3IncyBhdHRlbnRpb24gYW5kIHZhbmlzaGVzIGluIHRoZQoJdHdpbmtsaW5nIG9mIGFuIGV5ZS4KCQlbIEEgRmllbGQgR3VpZGUgdG8gdGhlIExpdHRsZSBQZW9wbGUKCQkgICAgYnkgTmFuY3kgQXJyb3dzbWl0aCAmIEdlb3JnZSBNb29yc2UgXQoJQnV0IG9uIGl0cyBoZWVscyBlcmUgdGhlIHN1bnNldCBmYWRlZCwgdGhlcmUgY2FtZSBhIHNlY29uZAoJYXBwYXJpdGlvbiwgc3RyaWRpbmcgd2l0aCBpbmNyZWRpYmxlIHN0cmlkZXMgYW5kIGhhbHRpbmcgd2hlbgoJaXQgbG9vbWVkIGFsbW9zdCB1cG9uIG1lIGluIHRoZSByZWQgdHdpbGlnaHQtdGhlIG1vbnN0cm91cyBtdW1teQoJb2Ygc29tZSBhbmNpZW50IGtpbmcgc3RpbGwgY3Jvd25lZCB3aXRoIHVudGFybmlzaGVkIGdvbGQgYnV0Cgl0dXJuaW5nIHRvIG15IGdhemUgYSB2aXNhZ2UgdGhhdCBtb3JlIHRoYW4gdGltZSBvciB0aGUgd29ybSBoYWQKCXdhc3RlZC4gQnJva2VuIHN3YXRoaW5ncyBmbGFwcGVkIGFib3V0IHRoZSBza2VsZXRvbiBsZWdzLCBhbmQKCWFib3ZlIHRoZSBjcm93biB0aGF0IHdhcyBzZXQgd2l0aCBzYXBwaGlyZXMgYW5kIG9yYW5nZSBydWJpZXMsIGEKCWJsYWNrIHNvbWV0aGluZyBzd2F5ZWQgYW5kIG5vZGRlZCBob3JyaWJseTsgYnV0LCBmb3IgYW4gaW5zdGFudCwKCUkgZGlkIG5vdCBkcmVhbSB3aGF0IGl0IHdhcy4gIFRoZW4sIGluIGl0cyBtaWRkbGUsIHR3byBvYmxpcXVlCglhbmQgc2NhcmxldCBleWVzIG9wZW5lZCBhbmQgZ2xvd2VkIGxpa2UgaGVsbGlzaCBjb2FscywgYW5kIHR3bwoJb3BoaWRpYW4gZmFuZ3MgZ2xpdHRlcmVkIGluIGFuIGFwZS1saWtlIG1vdXRoLiAgQSBzcXVhdCwgZnVybGVzcywKCXNoYXBlbGVzcyBoZWFkIG9uIGEgbmVjayBvZiBkaXNwcm9wb3J0aW9uYXRlIGV4dGVudCBsZWFuZWQKCXVuc3BlYWthYmx5IGRvd24gYW5kIHdoaXNwZXJlZCBpbiB0aGUgbXVtbXkncyBlYXIuIFRoZW4sIHdpdGgKCW9uZSBzdHJpZGUsIHRoZSB0aXRhbmljIGxpY2ggdG9vayBoYWxmIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHVzLAoJYW5kIGZyb20gb3V0IHRoZSBmb2xkcyBvZiB0aGUgdGF0dGVyZWQgc2VyZS1jbG90aCBhIGdhdW50IGFybQoJYXJvc2UsIGFuZCBmbGVzaGxlc3MsIHRhbG9uZWQgZmluZ2VycyBsYWRlbiB3aXRoIGdsb3dlcmluZyBnZW1zLAoJcmVhY2hlZCBvdXQgYW5kIGZ1bWJsZWQgZm9yIG15IHRocm9hdCAuIC4gLgoJCVsgVGhlIEFib21pbmF0aW9ucyBvZiBZb25kbywgYnkgQ2xhcmsgQXNodG9uIFNtaXRoIF0KCVRoZSBjaGFtYmVyIHdhcyBvZiB1bmhld24gcm9jaywgcm91bmQsIGFzIG5lYXIgYXMgbWlnaHQKCWJlLCBlaWdodGVlbiBvciB0d2VudHkgZmVldCBhY3Jvc3MsIGFuZCBnYXkgd2l0aCByaWNoCgl2YXJpZXR5IG9mIGZlcm4gYW5kIG1vc3MgYW5kIGxpY2hlbi4gIFRoZSBmZXJuIHdhcyBpbgoJaXRzIHdpbnRlciBzdGlsbCwgb3IgY29pbGluZyBmb3IgdGhlIHNwcmluZy10aWRlOyBidXQKCW1vc3Mgd2FzIGluIGFidW5kYW50IGxpZmUsIHNvbWUgZmVhdGhlcmluZywgYW5kIHNvbWUKCWdvYmxldGVkLCBhbmQgc29tZSB3aXRoIGZyaW5nZSBvZiByZWQgdG8gaXQuCgkJWyBMb3JuYSBEb29uZSwgYnkgUi5ELiBCbGFja21vcmUgXQoJU3RyYW5nZSBjcmVhdHVyZXMgZm9ybWVkIGZyb20gZW5lcmd5IHJhdGhlciB0aGFuIG1hdHRlciwKCWxpZ2h0cyBhcmUgZ2l2ZW4gdG8gc2VsZi1kZXN0cnVjdGl2ZSBiZWhhdmlvciB3aGVuIGJhdHRsaW5nCglmb2VzLgoJTGl6YXJkcywgc25ha2VzIGFuZCB0aGUgYnVycm93aW5nIGFtcGhpc2JhZW5pZHMgbWFrZSB1cCB0aGUKCW9yZGVyIFNxdWFtYXRhLCBtZWFuaW5nIHRoZSBzY2FseSBvbmVzLiAgVGhlIGVsb25nYXRlLCBzbGltLAoJbG9uZy10YWlsZWQgYm9kaWVzIG9mIGxpemFyZHMgaGF2ZSBiZWNvbWUgbW9kaWZpZWQgdG8gZW5hYmxlCgl0aGVtIHRvIGxpdmUgaW4gYSB3aWRlIHJhbmdlIG9mIGhhYml0YXRzLiAgTGl6YXJkcyBjYW4gYmUKCWV4cGVydCBidXJyb3dlcnMsIHJ1bm5lcnMsIHN3aW1tZXJzIGFuZCBjbGltYmVycywgYW5kIGEgZmV3CgljYW4gbWFuYWdlIGNydWRlLCBzaG9ydC1kaXN0YW5jZSBnbGlkaW5nIG9uIHJpYi1zdXBwb3J0ZWQKCSJ3aW5ncyIuICBNb3N0IGFyZSBjYXJuaXZvcmVzLCBmZWVkaW5nIG9uIGludmVydGVicmF0ZSBhbmQKCXNtYWxsIHZlcnRlYnJhdGUgcHJleSwgYnV0IG90aGVycyBmZWVkIG9uIHZlZ2V0YXRpb24uCgkJWyBNYWNtaWxsYW4gSWxsdXN0cmF0ZWQgQW5pbWFsIEVuY3ljbG9wZWRpYSBdCglMb2tpLCBvciBMb3B0LCBpcyBkZXNjcmliZWQgaW4gU25vcnJpJ3MgX0VkZGFfIGFzIGJlaW5nCgkicGxlYXNpbmcgYW5kIGhhbmRzb21lIGluIGFwcGVhcmFuY2UsIGV2aWwgaW4gY2hhcmFjdGVyLCBhbmQKCXZlcnkgY2FwcmljaW91cyBpbiBiZWhhdmlvdXIiLiAgSGUgaXMgdGhlIHNvbiBvZiB0aGUgZ2lhbnQKCUZhcmJhdXRpIGFuZCBvZiBMYXVmZXkuCglMb2tpIGlzIHRoZSBOb3JzZSBnb2Qgb2YgY3VubmluZywgZXZpbCwgdGhpZXZlcywgYW5kIGZpcmUuCglIZSBoYXRlZCB0aGUgb3RoZXIgZ29kcyBhbmQgd2FudGVkIHRvIHJ1aW4gdGhlbSBhbmQgb3ZlcnRocm93Cgl0aGUgdW5pdmVyc2UuICBIZSBjb21taXR0ZWQgbWFueSBtdXJkZXJzLiAgQXMgYSB0aGllZiwgaGUKCXN0b2xlIEZyZXlqYSdzIG5lY2tsYWNlLCBUaG9yJ3MgYmVsdCBhbmQgZ2F1bnRsZXRzIG9mIHBvd2VyLAoJYW5kIHRoZSBhcHBsZXMgb2YgeW91dGguICBBYmxlIHRvIHNoYXBlY2hhbmdlIGF0IHdpbGwsIGhlIGlzCglzYWlkIHRvIGhhdmUgaW1wZXJzb25hdGVkIGF0IHZhcmlvdXMgdGltZXMgYSBtYXJlLCBmbGVhLCBmbHksCglmYWxjb24sIHNlYWwsIGFuZCBhbiBvbGQgY3JvbmUuICBBcyBhIG1hcmUgaGUgZ2F2ZSBiaXJ0aCB0bwoJT2RpbidzIGhvcnNlIFNsZWlwbmlyLiAgSGUgYWxzbyBhbGxlZ2VkbHkgc2lyZWQgdGhlIHNlcnBlbnQKCU1pZGdhcmQsIHRoZSBtaXN0cmVzcyBvZiB0aGUgbmV0aGVyd29ybGQsIEhlbCwgYW5kIHRoZSB3b2xmCglGZW5yaXIsIHdobyB3aWxsIGRldm91ciB0aGUgc3VuIGF0IFJhZ25hcm9rLgoJVGhpcyBsZWdlbmRhcnkgYm93IGdyYW50cyBFU1Agd2hlbiBjYXJyaWVkIGFuZCBjYW4gcmVmbGVjdCBtYWdpY2FsCglhdHRhY2tzIHdoZW4gd2llbGRlZC4gIFdoZW4gaW52b2tlZCBpdCBwcm92aWRlcyBhIHN1cHBseSBvZiBhcnJvd3MuCglCdXQgYXMgU25vdyBXaGl0ZSBncmV3LCBzaGUgYmVjYW1lIG1vcmUgYW5kIG1vcmUgYmVhdXRpZnVsLAoJYW5kIGJ5IHRoZSB0aW1lIHNoZSB3YXMgc2V2ZW4geWVhcnMgb2xkIHNoZSB3YXMgYXMgYmVhdXRpZnVsCglhcyB0aGUgZGF5IGFuZCBtb3JlIGJlYXV0aWZ1bCB0aGFuIHRoZSBxdWVlbiBoZXJzZWxmLiAgT25lCglkYXkgd2hlbiB0aGUgcXVlZW4gc2FpZCB0byBoZXIgbWlycm9yOgoKCQkiTWlycm9yLCBNaXJyb3IsIGhlcmUgSSBzdGFuZC4KCQlXaG8gaXMgdGhlIGZhaXJlc3QgaW4gdGhlIGxhbmQ/IiAtCgoJdGhlIG1pcnJvciByZXBsaWVkOgoKCQkiWW91LCBPIFF1ZWVuLCBhcmUgdGhlIGZhaXJlc3QgaGVyZSwKCQlCdXQgU25vdyBXaGl0ZSBpcyBhIHRob3VzYW5kIHRpbWVzIG1vcmUgZmFpci4iCgkJWyBTbm93IFdoaXRlLCBieSBKYWtvYiBhbmQgV2lsaGVsbSBHcmltbSBdCglMb3JkIENhcm5hcnZvbiB3YXMgYSBwZXJzb25hbGl0eSB3aG8gY291bGQgaGF2ZSBiZWVuIHByb2R1Y2VkCglub3doZXJlIGJ1dCBpbiBFbmdsYW5kLCBhIG1peHR1cmUgb2Ygc3BvcnRzbWFuIGFuZCBjb2xsZWN0b3IsCglnZW50bGVtYW4gYW5kIHdvcmxkIHRyYXZlbGVyLCBhIHJlYWxpc3QgaW4gYWN0aW9uIGFuZCBhCglyb21hbnRpYyBpbiBmZWVsaW5nLiAgLi4uICBJbiAxOTAzIGhlIHdlbnQgZm9yIHRoZSBmaXJzdCB0aW1lCgl0byBFZ3lwdCBpbiBzZWFyY2ggb2YgYSBtaWxkIGNsaW1hdGUgYW5kIHdoaWxlIHRoZXJlIHZpc2l0ZWQKCXRoZSBleGNhdmF0aW9uIHNpdGVzIG9mIHNldmVyYWwgYXJjaGFlb2xvZ2ljYWwgZXhwZWRpdGlvbnMuCgkuLi4gIEluIDE5MDYgaGUgYmVnYW4gaGlzIG93biBleGNhdmF0aW9ucy4KCQlbIEdvZHMsIEdyYXZlcywgYW5kIFNjaG9sYXJzLCBieSBDLiBXLiBDZXJhbSBdCglMb3JkIFNhdG8gd2FzIHRoZSBmYW1pbHkgaGVhZCBvZiB0aGUgVGFybyBDbGFuLCBhbmQgYSBtaWdodHkKCWRhaW15by4gIEhlIGlzIGEgbG95YWwgc2VydmFudCBvZiB0aGUgRW1wZXJvciwgYW5kIHdpbGwgZG8KCWV2ZXJ5dGhpbmcgaW4gaGlzIHBvd2VyIHRvIGZ1cnRoZXIgdGhlIGltcGVyaWFsIGNhdXNlLgoJWWV0IGZpcnN0IHdhcyB0aGUgd29ybGQgaW4gdGhlIHNvdXRoZXJuIHJlZ2lvbiwgd2hpY2ggd2FzCgluYW1lZCBNdXNwZWxsOyBpdCBpcyBsaWdodCBhbmQgaG90OyB0aGF0IHJlZ2lvbiBpcyBnbG93aW5nCglhbmQgYnVybmluZywgYW5kIGltcGFzc2FibGUgdG8gc3VjaCBhcyBhcmUgb3V0bGFuZGVycyBhbmQKCWhhdmUgbm90IHRoZWlyIGhvbGRpbmdzIHRoZXJlLiAgSGUgd2hvIHNpdHMgdGhlcmUgYXQgdGhlCglsYW5kJ3MtZW5kLCB0byBkZWZlbmQgdGhlIGxhbmQsIGlzIGNhbGxlZCBTdXJ0cjsgaGUgYnJhbmRpc2hlcwoJYSBmbGFtaW5nIHN3b3JkLCBhbmQgYXQgdGhlIGVuZCBvZiB0aGUgd29ybGQgaGUgc2hhbGwgZ28gZm9ydGgKCWFuZCBoYXJyeSwgYW5kIG92ZXJjb21lIGFsbCB0aGUgZ29kcywgYW5kIGJ1cm4gYWxsIHRoZQoJd29ybGQgd2l0aCBmaXJlLgoJCQlbIFRoZSBQcm9zZSBFZGRhLCBieSBTbm9ycmkgU3R1cmx1c29uIF0KCSJbLi4uXSAgV2UnbGwgc3VjY2VlZCBhbmQgeW91J2xsIGdldCBhbGwgdGhlIGZvcnR1bmUgeW91IGNhbWUKCXNlZWtpbmcuIgoJSmFjayBzaG9vayBoaXMgaGVhZCBkaXNtYWxseS4gICJZb3UnbGwgYmUgYmV0dGVyIG9mZiB3aXRob3V0CgltZSwiIGhlIHNhaWQuICAiSSdtIG5vdGhpbmcgYnV0IGJhZCBsdWNrLiAgSXQncyBiZWNhdXNlIEknbQoJY3Vyc2VkLiAgQSBmYXJtZXIgSSBtZXQgb24gdGhlIHdheSB0byB0aGUgY2l0eSBjdXJzZWQgbWUuICBIZQoJc2FpZCwgJ0kgY3Vyc2UgeW91IEphY2suICBNYXkgeW91IG5ldmVyIGtub3cgd2VhbHRoLiAgTWF5IGFsbAoJdGhhdCB5b3Ugd2lzaCBmb3IgYmUgZGVuaWVkIHlvdS4nIgoJIldoYXQgYSBob3JyaWQgbWFuLCIgc2FpZCBFZGRpZS4gICJXaHkgZGlkIGhlIGN1cnNlIHlvdSBsaWtlCgl0aGF0PyIKCUphY2sgc2hydWdnZWQgWy4uLl0uICAiQmFkIGdyYWNlLCBJIHN1cHBvc2UuICBKdXN0IGJlY2F1c2UgSQoJc2hvdCBvZmYgaGlzIGVhciBhbmQgbWFkZSBoaW0ganVtcCBpbnRvIGEgcGl0IGZ1bGwgb2Ygc3Bpa2VzLiIKCQlbIHRoZSBob2xsb3cgY2hvY29sYXRlIGJ1bm5pZXMgb2YgdGhlIGFwb2NhbHlwc2UsCgkJICAgIGJ5IFJvYmVydCBSYW5raW4gXQoJTHVnaCwgb3IgTHVnLCB3YXMgdGhlIHN1biBnb2Qgb2YgdGhlIElyaXNoIENlbHRzLiAgT25lIG9mIGhpcwoJd2VhcG9ucyB3YXMgYSByb2Qtc2xpbmcgd2hpY2ggd29yc2hpcHBlcnMgc29tZXRpbWVzIHNhdyBpbgoJdGhlIHNreSBhcyBhIHJhaW5ib3cuICBBcyBhIHRyaWJhbCBnb2QsIGhlIHdhcyBwYXJ0aWN1bGFybHkKCXNraWxsZWQgaW4gdGhlIHVzZSBvZiBoaXMgbWFzc2l2ZSwgaW52aW5jaWJsZSBzcGVhciwgd2hpY2gKCWZvdWdodCBvbiBpdHMgb3duIGFjY29yZC4gIE9uZSBvZiBoaXMgZXBpdGhldHMgaXMgX2xhbWZoYWRhXwoJKG9mIHRoZSBsb25nIGFybSkuICBIZSB3YXMgYSB5b3VuZyBhbmQgYXBwYXJlbnRseSBtb3JlCglhdHRyYWN0aXZlIGRlaXR5IHRoYW4gRGFnZGEsIHRoZSBmYXRoZXIgb2YgdGhlIGdvZHMuICBCZWluZwoJYWJsZSB0byBzaGFwZXNoaWZ0LCBoaXMgbmFtZSB0cmFuc2xhdGVzIGFzIGx5bnguCglUaGVzZSBkdW5nZW9uIHNjYXZlbmdlcnMgYXJlIHZlcnkgYWRlcHQgYXQgYmxlbmRpbmcgaW50byB0aGUKCXN1cnJvdW5kaW5nIHdhbGxzIGFuZCBjZWlsaW5ncyBvZiB0aGUgZHVuZ2VvbiBkdWUgdG8gdGhlCglzdG9uZS1saWtlIGNvbG9yaW5nIG9mIHRoZWlyIHNraW4uCglJbiAxNTczLCB0aGUgUGFybGlhbWVudCBvZiBEb2xlIHB1Ymxpc2hlZCBhIGRlY3JlZSwgcGVybWl0dGluZwoJdGhlIGluaGFiaXRhbnRzIG9mIHRoZSBGcmFuY2hlLUNvbXRlIHRvIHB1cnN1ZSBhbmQga2lsbCBhCgl3ZXJlLXdvbGYgb3IgbG91cC1nYXJvdSwgd2hpY2ggaW5mZXN0ZWQgdGhhdCBwcm92aW5jZSwKCSJub3R3aXRoc3RhbmRpbmcgdGhlIGV4aXN0aW5nIGxhd3MgY29uY2VybmluZyB0aGUgY2hhc2UuIgoJVGhlIHBlb3BsZSB3ZXJlIGVtcG93ZXJlZCB0byAiYXNzZW1ibGUgd2l0aCBqYXZlbGlucywKCWhhbGJlcmRzLCBwaWtlcywgYXJxdWVidXNlcyBhbmQgY2x1YnMsIHRvIGh1bnQgYW5kIHB1cnN1ZSB0aGUKCXNhaWQgd2VyZS13b2xmIGluIGFsbCBwbGFjZXMgd2hlcmUgdGhleSBjb3VsZCBmaW5kIGl0LCBhbmQgdG8KCXRha2UsIGJ1cm4sIGFuZCBraWxsIGl0LCB3aXRob3V0IGluY3VycmluZyBhbnkgZmluZSBvciBvdGhlcgoJcGVuYWx0eS4iICBUaGUgaHVudCBzZWVtcyB0byBoYXZlIGJlZW4gc3VjY2Vzc2Z1bCwgaWYgd2UgbWF5CglqdWRnZSBmcm9tIHRoZSBmYWN0IHRoYXQgdGhlIHNhbWUgdHJpYnVuYWwgaW4gdGhlIGZvbGxvd2luZwoJeWVhciBjb25kZW1uZWQgdG8gYmUgYnVybmVkIGEgbWFuIG5hbWVkIEdpbGVzIEdhcm5pZXIsIHdobwoJcmFuIG9uIGFsbCBmb3VycyBpbiB0aGUgZm9yZXN0IGFuZCBmaWVsZHMgYW5kIGRldm91cmVkIGxpdHRsZQoJY2hpbGRyZW4sICJldmVuIG9uIEZyaWRheS4iICBUaGUgcG9vciBseWNhbnRocm9wZSwgaXQgYXBwZWFycywKCWhhZCBhcyBzbGlnaHQgcmVzcGVjdCBmb3IgZWNjbGVzaWFzdGljYWwgZmVhc3RzIGFzIHRoZSBGcmVuY2gKCXBpZywgd2hpY2ggd2FzIG5vdCByZXN0cmFpbmVkIGJ5IGFueSBmZWVsaW5nIG9mIHBpZXR5IGZyb20KCWVhdGluZyBpbmZhbnRzIG9uIGEgZmFzdCBkYXkuCgkJWyBUaGUgSGlzdG9yeSBvZiBWYW1waXJlcywgYnkgRHVkbGV5IFdyaWdodCBdCglUbyBkcmVhbSBvZiBzZWVpbmcgYSBseW54LCBlbmVtaWVzIGFyZSB1bmRlcm1pbmluZyB5b3VyCglidXNpbmVzcyBhbmQgZGlzcnVwdGluZyB5b3VyIGhvbWUgYWZmYWlycy4gIEZvciBhIHdvbWFuLAoJdGhpcyBkcmVhbSBpbmRpY2F0ZXMgdGhhdCBzaGUgaGFzIGEgd2FyeSB3b21hbiByaXZhbGluZyBoZXIKCWluIHRoZSBhZmZlY3Rpb25zIG9mIGhlciBsb3Zlci4gSWYgc2hlIGtpbGxzIHRoZSBseW54LCBzaGUKCXdpbGwgb3ZlcmNvbWUgaGVyIHJpdmFsLgoJCVsgMTAsMDAwIERyZWFtcyBJbnRlcnByZXRlZCwgYnkgR3VzdGF2dXMgSGluZG1hbiBNaWxsZXIgXQoJT3JpZ2luYWxseSBhIGNsdWIgYXJtZWQgd2l0aCBpcm9uLCBhbmQgdXNlZCBpbiB3YXI7IG5vdyBhIHN0YWZmCglvZiBvZmZpY2UgcGVydGFpbmluZyB0byBjZXJ0YWluIGRpZ25pdGFyaWVzLCBhcyB0aGUgU3BlYWtlciBvZgoJdGhlIEhvdXNlIG9mIENvbW1vbnMsIExvcmQgTWF5b3JzLCBNYXlvcnMgZXRjLiAgQm90aCBzd29yZCBhbmQKCW1hY2UgYXJlIHN5bWJvbHMgb2YgZGlnbml0eSwgc3VpdGVkIHRvIHRoZSB0aW1lcyB3aGVuIG1lbiB3ZW50CglhYm91dCBpbiBhcm1vdXIsIGFuZCBzb3ZlcmVpZ25zIG5lZWRlZCBjaGFtcGlvbnMgdG8gdmluZGljYXRlCgl0aGVpciByaWdodHMuCgkJWyBCcmV3ZXIncyBDb25jaXNlIERpY3Rpb25hcnkgb2YgUGhyYXNlIGFuZCBGYWJsZSBdCglUaGUgcGVuIGlzIG1pZ2h0aWVyIHRoYW4gdGhlIHN3b3JkLgoJCVsgUmljaGVsaWV1LCBieSBFZHdhcmQgQnVsd2VyLUx5dHRvbiBdCgkgIFsuLi5dIEluIERlaGVuYmFydGggKHRoYXQgbm93IFNvdXRoIFdhbGVzIGlzIGhpZ2h0LAoJICBXaGF0IHRpbWUgS2luZyBSeWVuY2UgcmVpZ25lZCwgYW5kIGRlYWxlZCByaWdodCkKCSAgVGhlIGdyZWF0IG1hZ2ljaWFuIE1lcmxpbiBoYWQgZGV2aXNlZCwKCSAgQnkgaGlzIGRlZXAgc2NpZW5jZSwgYW5kIGhlbGwtZHJlYWRlZCBtaWdodCwKCSAgQSBsb29raW5nLWdsYXNzLCByaWdodCB3b25kcm91c2x5IGFndWlzZWQsCglXaG9zZSB2aXJ0dWVzIHRocm91Z2ggdGhlIHdpZGUgd29ybGQgc29vbiB3ZXJlIHNvbGVtbml6ZWQuCgoJSXQgdmlydHVlIGhhZCB0byBzaG93IGluIHBlcmZlY3Qgc2lnaHQKCSAgV2hhdGV2ZXIgdGhpbmcgd2FzIGluIHRoZSB3b3JsZCBjb250YWluZWQsCgkgIEJldHdpeHQgdGhlIGxvd2VzdCBlYXJ0aCBhbmQgaGVhdmVuJ3MgaGVpZ2h0LAoJICBTbyB0aGF0IGl0IHRvIHRoZSBsb29rZXIgYXBwZXJ0YWluZWQ7CgkgIFdoYXRldmVyIGZvZSBoYWQgd3JvdWdodCwgb3IgZnJpZW5kIGhhZCBmYWluZWQsCgkgIFRoZXJlaW4gZGlzY292ZXJlZCB3YXMsIG5vciBhdWdodCBtaWdodCBwYXNzLAoJICBOb3IgYXVnaHQgaW4gc2VjcmV0IGZyb20gdGhlIHNhbWUgcmVtYWluZWQ7CgkJWyBUaGUgRmFlcmllIFF1ZWVuZSwgYnkgRWRtdW5kIFNwZW5jZXIgXQoJQSBoaWdobHkgZW5jaGFudGVkIGF0aGFtZSBzYWlkIHRvIGhvbGQgdGhlIHBvd2VyIHRvIGNoYW5uZWwKCWFuZCBkaXJlY3QgbWFnaWNhbCBlbmVyZ3kuCglJdCBpcyBydW1vdXJlZCB0aGF0IHRoZXNlIHN0cmFuZ2UgY3JlYXR1cmVzIGNhbiBiZSBoYXJtZWQgYnkKCWRvbWVzdGljYXRlZCBjYW5pbmVzIG9ubHkuCglOb3JtYWxseSBjYWxsZWQgTWFuYW5uYW4sIExlcidzIHNvbiB3YXMgdGhlIHBhdHJvbiBvZgoJbWVyY2hhbnRzIGFuZCBzYWlsb3JzLiAgTWFuYW5uYW4gaGFkIGEgc3dvcmQgd2hpY2ggbmV2ZXIKCWZhaWxlZCB0byBzbGF5LCBhIGJvYXQgd2hpY2ggcHJvcGVsbGVkIGl0c2VsZiB3aGVyZXZlciBpdHMKCW93bmVyIHdpc2hlZCwgYSBob3JzZSB3aGljaCB3YXMgc3dpZnRlciB0aGFuIHRoZSB3aW5kLCBhbmQKCW1hZ2ljIGFybW91ciB3aGljaCBubyBzd29yZCBjb3VsZCBwaWVyY2UuICBIZSBsYXRlciBiZWNhbWUKCWdvZCBvZiB0aGUgc2VhLCBiZW5lYXRoIHdoaWNoIGhlIGxpdmVkIGluIFRpciBuYSBuT2MsIHRoZQoJdW5kZXJ3b3JsZC4KCU1hbmVzIG9yIERpIE1hbmVzICgiZ29vZCBvbmVzIikgaXMgdGhlIGV1cGhlbWlzdGljIGRlc2NyaXB0aW9uCglvZiB0aGUgc291bHMgb2YgdGhlIGRlY2Vhc2VkLCB3b3JzaGlwcGVkIGFzIGRpdmluaXRpZXMuICBUaGUKCWZvcm11bGEgRC5NLiAoPSBEaXMgTWFuaWJ1czsgImRlZGljYXRlZCB0byB0aGUgTWFuZXMtZ29kcyIpCgljYW4gb2Z0ZW4gYmUgZm91bmQgb24gdG9tYnN0b25lcy4gIE1hbmVzIGFsc28gbWVhbnMKCW1ldGFwaG9yaWNhbGx5ICd1bmRlcndvcmxkJyBvciAncmVhbG0gb2YgZGVhdGgnLiAgRmVzdGl2YWxzCglpbiBob25vciBvZiB0aGUgZGVhZCB3ZXJlIHRoZSBQYXJlbnRhbGlhIGFuZCB0aGUgRmVyYWxpYSwKCWNlbGVicmF0ZWQgaW4gRmVicnVhcnkuCgkJWyBFbmN5Y2xvcGVkaWEgTXl0aGljYSwgZWQuIE0uRi4gTGluZGVtYW5zIF0KCglUaGUgZ25hdHMgb2YgdGhlIGR1bmdlb24sIHRoZXNlIHN3YXJtaW5nIG1vbnN0ZXJzIGFyZSByYXJlbHkKCXNlZW4gYWxvbmUuCglGaXJzdCBpbnNpc3Rpbmcgb24gcmVjb2duaXRpb24gYXMgc3VwcmVtZSBjb21tYW5kZXIsIE1hcmR1awoJZGVmZWF0ZWQgdGhlIERyYWdvbiwgY3V0IGhlciBib2R5IGluIHR3bywgYW5kIGZyb20gaXQgY3JlYXRlZAoJaGVhdmVuIGFuZCBlYXJ0aCwgcGVvcGxpbmcgdGhlIHdvcmxkIHdpdGggaHVtYW4gYmVpbmdzIHdobyBub3QKCXVubmF0dXJhbGx5IHNob3dlZCBpbnRlbnNlIGdyYXRpdHVkZSBmb3IgdGhlaXIgbGl2ZXMuICBUaGUKCWdvZHMgd2VyZSBhbHNvIHByb3Blcmx5IGdyYXRlZnVsLCBpbnZlc3RlZCBoaW0gd2l0aCBtYW55Cgl0aXRsZXMsIGFuZCBldmVudHVhbGx5IHBlcm1pdHRlZCB0aGVtc2VsdmVzIHRvIGJlIGVtYm9kaWVkIGluCgloaW0sIHNvIHRoYXQgaGUgYmVjYW1lIHN1cHJlbWUgZ29kLCBwbG90dGluZyB0aGUgd2hvbGUgY291cnNlCglvZiBrbm93biBsaWZlIGZyb20gdGhlIHBhdGhzIG9mIHRoZSBwbGFuZXRzIHRvIHRoZSBkYWlseQoJZXZlbnRzIGluIHRoZSBsaXZlcyBvZiBtZW4uCgkJWyBUaGUgSW1tb3J0YWxzLCBieSBEZXJlayBhbmQgSnVsaWEgUGFya2VyIF0KCVRoZSBtYXJpbGl0aCBoYXMgYSB0b3JzbyBzaGFwZWQgbGlrZSB0aGF0IG9mIGEgaHVtYW4gZmVtYWxlLAoJYW5kIHRoZSBsb3dlciBib2R5IG9mIGEgZ3JlYXQgc25ha2UuICBJdCBoYXMgbXVsdGlwbGUgYXJtcywKCWFuZCBjYW4gZnJlZWx5IGF0dGFjayB3aXRoIGFsbCBvZiB0aGVtLiAgU2luY2UgaXQgaXMKCWludGVsbGlnZW50IGVub3VnaCB0byB1c2Ugd2VhcG9ucywgdGhpcyBtZWFucyBpdCBjYW4gY2F1c2UKCWdyZWF0IGRhbWFnZS4KCVRoZSBnb2Qgb2Ygd2FyLCBhbmQgb25lIG9mIHRoZSBtb3N0IHByb21pbmVudCBhbmQgd29yc2hpcHBlZAoJZ29kcy4gIEluIGVhcmx5IFJvbWFuIGhpc3RvcnkgaGUgd2FzIGEgZ29kIG9mIHNwcmluZywgZ3Jvd3RoIGluCgluYXR1cmUsIGFuZCBmZXJ0aWxpdHksIGFuZCB0aGUgcHJvdGVjdG9yIG9mIGNhdHRsZS4gIE1hcnMgaXMKCWFsc28gbWVudGlvbmVkIGFzIGEgY2h0aG9uaWMgZ29kIChlYXJ0aC1nb2QpIGFuZCB0aGlzIGNvdWxkCglleHBsYWluIHdoeSBoZSBiZWNhbWUgYSBnb2Qgb2YgZGVhdGggYW5kIGZpbmFsbHkgYSBnb2Qgb2Ygd2FyLgoJSGUgaXMgdGhlIHNvbiBvZiBKdXBpdGVyIGFuZCBKdW5vLgoJCVsgRW5jeWNsb3BlZGlhIE15dGhpY2EsIGVkLiBNLkYuIExpbmRlbWFucyBdCgkiV2hhdCBlbHNlIGNhbiB3ZSBkbz8gTm9uZSBvZiB0aGlzIGlzIGZhc3QgZW5vdWdoLiIgIkl0IHdpbGwgaGF2ZQoJdG8gYmUuIiBIZSBzdG9vZCB1cCwgYSB0YWxsLCBicm9hZCB3YWxsIG9mIGEgbWFuLiAgIldoeSBkb24ndCB5b3UKCWFzayBhcm91bmQsIHNlZSBpZiBhbnlvbmUgaW4gdGhlIG5laWdoYm9yaG9vZHMga25vd3MgYW55dGhpbmcKCWFib3V0IG1hcnRpYWwgYXJ0cy4gIFlvdSBuZWVkIG1vcmUgdGhhbiBhIGJvb2sgb3IgdHdvIHRvIGxlYXJuCglnb29kIGRlcGVuZGFibGUgdW5hcm1lZCBjb21iYXQuIgoJCVsgUGFyYWJsZSBvZiB0aGUgU293ZXIsIGJ5IE9jdGF2aWEgQnV0bGVyIF0KCUhlIHN0cm9sbGVkIGRvd24gdGhlIHN0YWlycywgZm9sbG93ZWQgYnkgYSBudW1iZXIgb2YgYXNzYXNzaW5zLgoJV2hlbiBoZSB3YXMgZGlyZWN0bHkgaW4gZnJvbnQgb2YgWW1vciBoZSBzYWlkOiAiSSd2ZSBjb21lIGZvcgoJdGhlIHRvdXJpc3QuIiAuLi4KCSJPbmUgc3RlcCBtb3JlIGFuZCB5b3UnbGwgbGVhdmUgaGVyZSB3aXRoIGZld2VyIGV5ZWJhbGxzIHRoYW4KCXlvdSBjYW1lIHdpdGgsIiBzYWlkIHRoZSB0aGllZm1hc3Rlci4gICJTbyBzaXQgZG93biBhbmQgaGF2ZQoJYSBkcmluaywgWmxvcmYsIGFuZCBsZXQncyB0YWxrIGFib3V0IHRoaXMgc2Vuc2libHkuICBfSV8KCXRob3VnaHQgd2UgaGFkIGFuIGFncmVlbWVudC4gIFlvdSBkb24ndCByb2IgLS0gSSBkb24ndCBraWxsLgoJTm90IGZvciBwYXltZW50LCB0aGF0IGlzLCIgaGUgYWRkZWQgYWZ0ZXIgYSBwYXVzZS4KCVpsb3JmIHRvb2sgdGhlIHByb2ZmZXJlZCBiZWVyLgoJIlNvPyIgaGUgc2FpZC4gICJJJ2xsIGtpbGwgaGltLiAgVGhlbiB5b3Ugcm9iIGhpbS4gIElzIGhlIHRoYXQKCWZ1bm55IGxvb2tpbmcgb25lIG92ZXIgdGhlcmU/IgoJIlllcy4iCglabG9yZiBzdGFyZWQgYXQgVHdvZmxvd2VyLCB3aG8gZ3Jpbm5lZCBhdCBoaW0uICBIZSBzaHJ1Z2dlZC4KCUhlIHNlbGRvbSB3YXN0ZWQgdGltZSB3b25kZXJpbmcgd2h5IHBlb3BsZSB3YW50ZWQgb3RoZXIgcGVvcGxlCglkZWFkLiAgSXQgd2FzIGp1c3QgYSBsaXZpbmcuCgkiV2hvIGlzIHlvdXIgY2xpZW50LCBtYXkgSSBhc2s/IiBzYWlkIFltb3IuCglabG9yZiBoZWxkIHVwIGEgaGFuZC4gICJQbGVhc2UhIiBoZSBwcm90ZXN0ZWQuICAiUHJvZmVzc2lvbmFsCglldGlxdWV0dGUuIgoJCVsgVGhlIENvbG91ciBvZiBNYWdpYywgYnkgVGVycnkgUHJhdGNoZXR0IF0KCVRoaXMgc2tlbGV0b24ga2V5IHdhcyBmYXNoaW9uZWQgaW4gYWdlcyBwYXN0IGFuZCBpbWJ1ZWQgd2l0aAoJYSBwb3dlcmZ1bCBtYWdpYyB3aGljaCBhbGxvd3MgaXQgdG8gb3BlbiBhbnkgbG9jay4gIFdoZW4KCWNhcnJpZWQsIGl0IGdyYW50cyBpdHMgb3duZXIgd2FybmluZywgdGVsZXBvcnQgY29udHJvbCwgYW5kCglyZWR1Y2VzIGFsbCBwaHlzaWNhbCBkYW1hZ2UgYnkgaGFsZi4gIEZpbmFsbHksIHdoZW4gaW52b2tlZCwKCWl0IGhhcyB0aGUgYWJpbGl0eSB0byBkaXNhcm0gYW55IHRyYXBwZWQgbG9jay4KCVRoZXJlIHdhcyBhIGZsdXR0ZXIgb2Ygd2luZ3MgYXQgdGhlIHdpbmRvdy4gIFltb3Igc2hpZnRlZCBoaXMKCWJ1bGsgb3V0IG9mIHRoZSBjaGFpciBhbmQgY3Jvc3NlZCB0aGUgcm9vbSwgY29taW5nIGJhY2sgd2l0aAoJYSBsYXJnZSByYXZlbi4gIEFmdGVyIGhlJ2QgdW5mYXN0ZW5lZCB0aGUgbWVzc2FnZSBjYXBzdWxlIGZyb20KCWl0cyBsZWcgaXQgZmxldyB1cCB0byBqb2luIGl0cyBmZWxsb3dzIGx1cmtpbmcgYW1vbmcgdGhlCglyYWZ0ZXJzLiAgV2l0aGVsIHJlZ2FyZGVkIGl0IHdpdGhvdXQgbG92ZS4gIFltb3IncyByYXZlbnMgd2VyZQoJbm90b3Jpb3VzbHkgbG95YWwgdG8gdGhlaXIgbWFzdGVyLCB0byB0aGUgZXh0ZW50IHRoYXQgV2l0aGVsJ3MKCW9uZSBhdHRlbXB0IHRvIHByb21vdGUgaGltc2VsZiB0byB0aGUgcmFuayBvZiBncmVhdGVzdCB0aGllZgoJaW4gQW5raC1Nb3Jwb3JrIGhhZCBjb3N0IHRoZWlyIG1hc3RlcidzIHJpZ2h0IGhhbmQgbWFuIGhpcwoJbGVmdCBleWUuICBCdXQgbm90IGhpcyBsaWZlLCBob3dldmVyLiAgWW1vciBuZXZlciBncnVkZ2VkIGEKCW1hbiBoaXMgYW1iaXRpb25zLgoJCVsgVGhlIENvbG91ciBvZiBNYWdpYywgYnkgVGVycnkgUHJhdGNoZXR0IF0KCUFueSBsYXJnZSwgZWxlcGhhbnRsaWtlIG1hbW1hbCBvZiB0aGUgZ2VuZXJhIE1hbW11dCwgTWFzdG9kb24sCglldGMuLCBmcm9tIHRoZSBPbGlnb2NlbmUgYW5kIFBsZWlzdG9jZW5lIGVwb2NocywgaGF2aW5nCgljb25pY2FsIHByb2plY3Rpb25zIG9uIHRoZSBtb2xhciB0ZWV0aC4KCQlbIFdlYnN0ZXIncyBFbmN5Y2xvcGVkaWMgVW5hYnJpZGdlZCBEaWN0aW9uYXJ5CgkJCW9mIHRoZSBFbmdsaXNoIExhbmd1YWdlIF0KCUEgbWF0dG9jayBpcyBhbiBhZ3JpY3VsdHVyYWwgdG9vbCBzaW1pbGFyIHRvIGEgbWluaW5nIHBpY2suCglJdCBpcyBkaXN0aW5ndWlzaGVkIGJ5IHRoZSBoZWFkIHRlcm1pbmF0aW5nIGluIGEgYnJvYWRlciBibGFkZQoJcmF0aGVyIHRoYW4gYSBuYXJyb3cgc3Bpa2UsIHdoaWNoIG1ha2VzIGl0IHBhcnRpY3VsYXJseSBzdWl0YWJsZQoJZm9yIGJyZWFraW5nIHVwIG1vZGVyYXRlbHkgaGFyZCBncm91bmQuIC4uLiBEdXJpbmcgdGhlIE1pZGRsZQoJQWdlcyBvZiBFdXJvcGUsIHRoZSBtYXR0b2NrIHNlcnZlZCBhcyBhbiBpbXByb3Zpc2VkIHNoYWZ0ZWQKCXdlYXBvbiBmb3IgdGhlIHBvb3JlciBjbGFzc2VzLgoJCVsgV2lraXBlZGlhLCB0aGUgZnJlZSBlbmN5Y2xvcGVkaWEgXQoJU29tZSBoYWUgbWVhdCBhbmQgY2FubmEgZWF0LAoJQW5kIHNvbWUgd291bGQgZWF0IHRoYXQgd2FudCBpdDsKCUJ1dCB3ZSBoYWUgbWVhdCwgYW5kIHdlIGNhbiBlYXQsCglTYWUgbGV0IHRoZSBMb3JkIGJlIHRoYW5raXQuCgkJWyBHcmFjZSBCZWZvcmUgTWVhdCwgYnkgUm9iZXJ0IEJ1cm5zIF0KCU1lZHVzYSwgb25lIG9mIHRoZSB0aHJlZSBHb3Jnb25zIG9yIEdyYWVhZSwgaXMgdGhlIG9ubHkgb25lCglvZiBoZXIgc2lzdGVycyB0byBoYXZlIGFzc3VtZWQgbW9ydGFsIGZvcm0gYW5kIGluaGFiaXRlZCB0aGUKCWR1bmdlb24gd29ybGQuCgoJV2hlbiBQZXJzZXVzIHdhcyBncm93biB1cCBQb2x5ZGVjdGVzIHNlbnQgaGltIHRvIGF0dGVtcHQgdGhlCgljb25xdWVzdCBvZiBNZWR1c2EsIGEgdGVycmlibGUgbW9uc3RlciB3aG8gaGFkIGxhaWQgd2FzdGUgdGhlCgljb3VudHJ5LiAgU2hlIHdhcyBvbmNlIGEgYmVhdXRpZnVsIG1haWRlbiB3aG9zZSBoYWlyIHdhcyBoZXIKCWNoaWVmIGdsb3J5LCBidXQgYXMgc2hlIGRhcmVkIHRvIHZpZSBpbiBiZWF1dHkgd2l0aCBNaW5lcnZhLAoJdGhlIGdvZGRlc3MgZGVwcml2ZWQgaGVyIG9mIGhlciBjaGFybXMgYW5kIGNoYW5nZWQgaGVyCgliZWF1dGlmdWwgcmluZ2xldHMgaW50byBoaXNzaW5nIHNlcnBlbnRzLiAgU2hlIGJlY2FtZSBhIGNydWVsCgltb25zdGVyIG9mIHNvIGZyaWdodGZ1bCBhbiBhc3BlY3QgdGhhdCBubyBsaXZpbmcgdGhpbmcgY291bGQKCWJlaG9sZCBoZXIgd2l0aG91dCBiZWluZyB0dXJuZWQgaW50byBzdG9uZS4gIEFsbCBhcm91bmQgdGhlCgljYXZlcm4gd2hlcmUgc2hlIGR3ZWx0IG1pZ2h0IGJlIHNlZW4gdGhlIHN0b255IGZpZ3VyZXMgb2YgbWVuCglhbmQgYW5pbWFscyB3aGljaCBoYWQgY2hhbmNlZCB0byBjYXRjaCBhIGdsaW1wc2Ugb2YgaGVyIGFuZAoJaGFkIGJlZW4gcGV0cmlmaWVkIHdpdGggdGhlIHNpZ2h0LiAgUGVyc2V1cywgZmF2b3VyZWQgYnkKCU1pbmVydmEgYW5kIE1lcmN1cnksIHRoZSBmb3JtZXIgb2Ygd2hvbSBsZW50IGhpbSBoZXIgc2hpZWxkCglhbmQgdGhlIGxhdHRlciBoaXMgd2luZ2VkIHNob2VzLCBhcHByb2FjaGVkIE1lZHVzYSB3aGlsZSBzaGUKCXNsZXB0IGFuZCB0YWtpbmcgY2FyZSBub3QgdG8gbG9vayBkaXJlY3RseSBhdCBoZXIsIGJ1dCBndWlkZWQKCWJ5IGhlciBpbWFnZSByZWZsZWN0ZWQgaW4gdGhlIGJyaWdodCBzaGllbGQgd2hpY2ggaGUgYm9yZSwgaGUKCWN1dCBvZmYgaGVyIGhlYWQgYW5kIGdhdmUgaXQgdG8gTWluZXJ2YSwgd2hvIGZpeGVkIGl0IGluIHRoZQoJbWlkZGxlIG9mIGhlciBBZWdpcy4KCQlbIEJ1bGZpbmNoJ3MgTXl0aG9sb2d5LCBieSBUaG9tYXMgQnVsZmluY2ggXQoJIldoYXQgaXMgaXQsIFVtYm9wYSwgc29uIG9mIGEgZm9vbD8iIEkgc2hvdXRlZCBpbiBadWx1LgoJIkl0IGlzIGZvb2QgYW5kIHdhdGVyLCBNYWN1bWF6YWhuLCIgYW5kIGFnYWluIGhlIHdhdmVkIHRoZQoJZ3JlZW4gdGhpbmcuCglUaGVuIEkgc2F3IHdoYXQgaGUgaGFkIGdvdC4gIEl0IHdhcyBhIG1lbG9uLiAgV2UgaGFkIGhpdCB1cG9uCglhIHBhdGNoIG9mIHdpbGQgbWVsb25zLCB0aG91c2FuZHMgb2YgdGhlbSwgYW5kIGRlYWQgcmlwZS4KCSJNZWxvbnMhIiBJIHllbGxlZCB0byBHb29kLCB3aG8gd2FzIG5leHQgbWU7IGFuZCBpbiBhbm90aGVyCglzZWNvbmQgaGUgaGFkIGhpcyBmYWxzZSB0ZWV0aCBmaXhlZCBpbiBvbmUuCglJIHRoaW5rIHdlIGF0ZSBhYm91dCBzaXggZWFjaCBiZWZvcmUgd2UgaGFkIGRvbmUsIGFuZCwgcG9vcgoJZnJ1aXQgYXMgdGhleSB3ZXJlLCBJIGRvdWJ0IGlmIEkgZXZlciB0aG91Z2h0IGFueXRoaW5nIG5pY2VyLgoJCVsgS2luZyBTb2xvbW9uJ3MgTWluZXMsIGJ5IEguIFJpZGVyIEhhZ2dhcmQgXQoJUm9tYW4gZ29kIG9mIGNvbW1lcmNlLCB0cmFkZSBhbmQgdHJhdmVsbGVycy4gIEhlIGlzIGNvbW1vbmx5CglkZXBpY3RlZCBjYXJyeWluZyBhIGNhZHVjZXVzIChhIHN0YWZmIHdpdGggdHdvIHNuYWtlcwoJaW50ZXJ0d2luaW5nIGFyb3VuZCBpdCkgYW5kIGEgcHVyc2UuCglUaGUgYW5jZXN0b3JzIG9mIHRoZSBtb2Rlcm4gZGF5IGNoYW1lbGVvbiwgdGhlc2UgY3JlYXR1cmVzIGNhbgoJYXNzdW1lIHRoZSBmb3JtIG9mIGFueXRoaW5nIGluIHRoZWlyIHN1cnJvdW5kaW5ncy4gIFRoZXkgbWF5Cglhc3N1bWUgdGhlIHNoYXBlIG9mIG9iamVjdHMgb3IgZHVuZ2VvbiBmZWF0dXJlcy4gIFVubGlrZSB0aGUKCWNoYW1lbGVvbiB0aG91Z2gsIHdoaWNoIGFzc3VtZXMgdGhlIHNoYXBlIG9mIGFub3RoZXIgY3JlYXR1cmUKCWFuZCBnb2VzIGluIGh1bnQgb2YgZm9vZCwgdGhlIG1pbWljIHdhaXRzIHBhdGllbnRseSBmb3IgaXRzCgltZWFscyB0byBjb21lIGluIHNlYXJjaCBvZiBpdC4KCVRoaXMgY3JlYXR1cmUgaGFzIGEgaHVtYW5vaWQgYm9keSwgdGVudGFjbGVzIGFyb3VuZCBpdHMKCWNvdmVyZWQgbW91dGgsIGFuZCB0aHJlZSBsb25nIGZpbmdlcnMgb24gZWFjaCBoYW5kLiAgTWluZAoJZmxheWVycyBhcmUgdGVsZXBhdGhpYywgYW5kIGxvdmUgdG8gZGV2b3VyIGludGVsbGlnZW50IGJlaW5ncywKCWVzcGVjaWFsbHkgaHVtYW5zLiAgSWYgdGhleSBoaXQgdGhlaXIgdmljdGltIHdpdGggYSB0ZW50YWNsZSwKCXRoZSBtaW5kIGZsYXllciB3aWxsIHNsb3dseSBkcmFpbiBpdCBvZiBhbGwgaW50ZWxsaWdlbmNlLAoJZXZlbnR1YWxseSBraWxsaW5nIGl0cyB2aWN0aW0uCglNYWRlIGJ5IER3YXJmcy4gIFRoZSBSdWxlIGhlcmUgaXMgdGhhdCB0aGUgTWluZSBpcyBlaXRoZXIgbG9uZwoJZGVzZXJ0ZWQgb3IgYXQgbW9zdCBpcyBpbmhhYml0ZWQgYnkgYSBmZXcgc3Vydml2b3JzIHdobyB3aWxsCgltYWtlIGNvbmZ1c2VkIGNsYWltcyB0byBoYXZlIGJlZW4gZHJpdmVuIG91dC9kZWNpbWF0ZWQgYnkgaHVtYW5zLwoJb3RoZXIgRHdhcmZzL01pbmlvbnMgb2YgdGhlIERhcmsgTG9yZC4gIEluaGFiaXRlZCBvciBub3QsIHRoaXMKCU1pbmUgd2lsbCBiZSB2ZXJ5IGNvbXBsZXgsIHdpdGggbWFueSBsZXZlbHMgb2YgZ2FsbGVyaWVzLAoJYmVhdXRpZnVsbHkgY2FydmVkIGFuZCBlbmdpbmVlcmVkLiAgV2hhdCB3YXMgYmVpbmcgbWluZWQgaGVyZQoJaXMgbm90IGFsd2F5cyBldmlkZW50LCBidXQgYXQgbGVhc3Qgc29tZSBvZiB0aGUgdGltZSBpdCB3aWxsCglhcHBlYXIgdG8gaGF2ZSBiZWVuIEpld2Vscywgc2luY2UgaXQgaXMgY3VzdG9tYXJ5IHRvIGZpbmQKCXVud2FudGVkIGVtZXJhbGRzLCBldGMuLCBzdGlsbCBlbWJlZGRlZCBpbiB0aGUgcm9jayBvZiB0aGUKCXdhbGxzLiAgTWV0YWwgd2lsbCBhbHNvIGJlIHByZXNlbnQsIGJ1dCBvbmx5IHdoZW4gbWFkZSB1cCBpbnRvCglhcm1vciBhbmQgd2VhcG9ucyAoX3dvbmRyb3VzXykuCgkgIFsgVGhlIFRvdWdoIEd1aWRlIHRvIEZhbnRhc3lsYW5kLCBieSBEaWFuYSBXeW5uZSBKb25lcyBdCglUaGUgTWlub3RhdXIgd2FzIGEgbW9uc3RlciwgaGFsZiBidWxsLCBoYWxmIGh1bWFuLCB0aGUKCW9mZnNwcmluZyBvZiBNaW5vcycgd2lmZSBQYXNpcGhhZSBhbmQgYSB3b25kZXJmdWxseSBiZWF1dGlmdWwKCWJ1bGwuIC4uLiAgV2hlbiB0aGUgTWlub3RhdXIgd2FzIGJvcm4gTWlub3MgZGlkIG5vdCBraWxsIGhpbS4KCUhlIGhhZCBEYWVkYWx1cywgYSBncmVhdCBhcmNoaXRlY3QgYW5kIGludmVudG9yLCBjb25zdHJ1Y3QgYQoJcGxhY2Ugb2YgY29uZmluZW1lbnQgZm9yIGhpbSBmcm9tIHdoaWNoIGVzY2FwZSB3YXMgaW1wb3NzaWJsZS4KCURhZWRhbHVzIGJ1aWx0IHRoZSBMYWJ5cmludGgsIGZhbW91cyB0aHJvdWdob3V0IHRoZSB3b3JsZC4KCU9uY2UgaW5zaWRlLCBvbmUgd291bGQgZ28gZW5kbGVzc2x5IGFsb25nIGl0cyB0d2lzdGluZyBwYXRocwoJd2l0aG91dCBldmVyIGZpbmRpbmcgdGhlIGV4aXQuCgkJWyBNeXRob2xvZ3ksIGJ5IEVkaXRoIEhhbWlsdG9uIF0KCU9yaWdpbmF0aW5nIGluIEluZGlhIChNaXRyYSksIE1pdGhyYSBpcyBhIGdvZCBvZiBsaWdodCB3aG8KCXdhcyB0cmFuc2xhdGVkIGludG8gdGhlIGF0dGVuZGFudCBvZiB0aGUgZ29kIEFodXJhIE1hemRhIGluCgl0aGUgbGlnaHQgcmVsaWdpb24gb2YgUGVyc2lhOyBmcm9tIHRoaXMgaGUgd2FzIGFkb3B0ZWQgYXMKCXRoZSBSb21hbiBkZWl0eSBNaXRocmFzLiAgSGUgaXMgbm90IGdlbmVyYWxseSByZWdhcmRlZCBhcyBhCglza3kgZ29kIGJ1dCBhIHBlcnNvbmlmaWNhdGlvbiBvZiB0aGUgZmVydGlsaXppbmcgcG93ZXIgb2YKCXdhcm0sIGxpZ2h0IGFpci4gIEFjY29yZGluZyB0byB0aGUgX0F2ZXN0YV8sIGhlIHBvc3Nlc3NlcwoJMTAsMDAwIGV5ZXMgYW5kIGVhcnMgYW5kIHJpZGVzIGluIGEgY2hhcmlvdCBkcmF3biBieSB3aGl0ZQoJaG9yc2VzLiAgTWl0aHJhLCBhY2NvcmRpbmcgdG8gWmFyYXRodXN0cmEsIGlzIGNvbmNlcm5lZCB3aXRoCgl0aGUgZW5kbGVzcyBiYXR0bGUgYmV0d2VlbiBsaWdodCBhbmQgZGFyayBmb3JjZXM6ICBoZQoJcmVwcmVzZW50cyB0cnV0aC4gIEhlIGlzIHJlc3BvbnNpYmxlIGZvciB0aGUga2VlcGluZyBvZiBvYXRocwoJYW5kIGNvbnRyYWN0cy4gIEhlIGlzIGF0dHJpYnV0ZWQgd2l0aCB0aGUgY3JlYXRpb24gb2YgYm90aAoJcGxhbnRzIGFuZCBhbmltYWxzLiAgSGlzIGNoaWVmIGFkdmVyc2FyeSBpcyBBaHJpbWFuLCB0aGUKCXBvd2VyIG9mIGRhcmtuZXNzLgoJICAgIFsgVGhlIEVuY3ljbG9wYWVkaWEgb2YgTXl0aHMgYW5kIExlZ2VuZHMgb2YgQWxsIE5hdGlvbnMsCgkJYnkgSGVyYmVydCBTcGVuY2VyIFJvYmluc29uIGFuZCBLbm94IFdpbHNvbiBdCglfTWl0aHJpbF8hICBBbGwgZm9sayBkZXNpcmVkIGl0LiAgSXQgY291bGQgYmUgYmVhdGVuIGxpa2UKCWNvcHBlciwgYW5kIHBvbGlzaGVkIGxpa2UgZ2xhc3M7IGFuZCB0aGUgRHdhcnZlcyBjb3VsZCBtYWtlCglvZiBpdCBhIG1ldGFsLCBsaWdodCBhbmQgeWV0IGhhcmRlciB0aGFuIHRlbXBlcmVkIHN0ZWVsLgoJSXRzIGJlYXV0eSB3YXMgbGlrZSB0byB0aGF0IG9mIGNvbW1vbiBzaWx2ZXIsIGJ1dCB0aGUgYmVhdXR5CglvZiBfbWl0aHJpbF8gZGlkIG5vdCB0YXJuaXNoIG9yIGdyb3cgZGltLgoJCVsgVGhlIEZlbGxvd3NoaXAgb2YgdGhlIFJpbmcsIGJ5IEouUi5SLiBUb2xraWVuIF0KCVRoaXMgaGVsbSBvZiBicmlsbGlhbmNlIHBlcmZvcm1zIGFsbCBvZiB0aGUgbm9ybWFsIGZ1bmN0aW9ucwoJb2YgYSBoZWxtIG9mIGJyaWxsaWFuY2UsIGJ1dCBhbHNvIGhhcyB0aGUgYWJpbGl0eSB0byBwcm90ZWN0CglhbnlvbmUgd2hvIGNhcnJpZXMgaXQgZnJvbSBmaXJlLiAgV2hlbiBpbnZva2VkLCBpdCBib29zdHMKCXRoZSBlbmVyZ3kgb2YgdGhlIGludm9rZXIsIGFsbG93aW5nIHRoZW0gdG8gY2FzdCBtb3JlIHNwZWxscy4KCUZvcmdlZCBieSB0aGUgZHdhcnZlcyBFaXRyaSBhbmQgQnJva2ssIGluIHJlc3BvbnNlIHRvIExva2kncwoJY2hhbGxlbmdlLCBNam9sbG5pciBpcyBhbiBpbmRlc3RydWN0aWJsZSB3YXIgaGFtbWVyLiAgSXQgaGFzCgl0d28gbWFnaWNhbCBwcm9wZXJ0aWVzOiAgd2hlbiB0aHJvd24gaXQgYWx3YXlzIHJldHVybmVkIHRvCglUaG9yJ3MgaGFuZDsgYW5kIGl0IGNvdWxkIGJlIG1hZGUgdG8gc2hyaW5rIGluIHNpemUgdW50aWwgaXQKCWNvdWxkIGZpdCBpbnNpZGUgVGhvcidzIHNoaXJ0LiAgSXRzIG9ubHkgZmxhdyBpcyB0aGF0IGl0IGhhcwoJYSBzaG9ydCBoYW5kbGUuICBUaGUgb3RoZXIgZ29kcyBqdWRnZWQgTWpvbGxuaXIgdGhlIHdpbm5lciBvZgoJdGhlIGNvbnRlc3QgYmVjYXVzZSwgb2YgYWxsIHRoZSB0cmVhc3VyZXMgY3JlYXRlZCwgaXQgYWxvbmUgaGFkCgl0aGUgcG93ZXIgdG8gcHJvdGVjdCB0aGVtIGZyb20gdGhlIGdpYW50cy4gIEFzIHRoZSBsZWdlbmRzCglzdXJyb3VuZGluZyBNam9sbG5pciBncmV3LCBpdCBiZWdhbiB0byB0YWtlIG9uIHRoZSBxdWFsaXR5IG9mCgkidmlnamEiLCBvciBjb25zZWNyYXRpb24uICBUaG9yIHVzZWQgaXQgdG8gY29uc2VjcmF0ZSBiaXJ0aHMsCgl3ZWRkaW5ncywgYW5kIGV2ZW4gdG8gcmFpc2UgaGlzIGdvYXRzIGZyb20gdGhlIGRlYWQuICBJbiB0aGUKCU5vcnNlIG15dGhvbG9naWVzIE1qb2xsbmlyIGlzIGNvbnNpZGVyZWQgdG8gcmVwcmVzZW50IFRob3IncwoJZ292ZXJuYW5jZSBvdmVyIHRoZSBlbnRpcmUgY3ljbGUgb2YgbGlmZSAtIGZlcnRpbGl0eSwgYmlydGgsCglkZXN0cnVjdGlvbiwgYW5kIHJlc3VycmVjdGlvbi4KCU1vZyBpcyBrbm93biBhcyB0aGUgU3BpZGVyIEdvZC4gIE1vZyByZXNlbWJsZXMgYSBmb3VyLWxpbWJlZAoJc3BpZGVyIHdpdGggYSBoYW5kc29tZSwgaWYgbm90IGVudGlyZWx5IGh1bWFuLCBmYWNlLgoJTW9sZCwgbXVsdGljZWxsdWxhciBvcmdhbmlzbSBvZiB0aGUgZGl2aXNpb24gRnVuZ2ksIHR5cGlmaWVkCglieSBwbGFudCBib2RpZXMgY29tcG9zZWQgb2YgYSBuZXR3b3JrIG9mIGNvdHRvbnkgZmlsYW1lbnRzLgoJVGhlIGNvbG9ycyBvZiBtb2xkcyBhcmUgZHVlIHRvIHNwb3JlcyBib3JuZSBvbiB0aGUgZmlsYW1lbnRzLgoJTW9zdCBtb2xkcyBhcmUgc2Fwcm9waHl0ZXMuICBTb21lIHNwZWNpZXMgKGUuZy4sIHBlbmljaWxsaXVtKQoJYXJlIHVzZWQgaW4gbWFraW5nIGNoZWVzZSBhbmQgYW50aWJpb3RpY3MuCgkJWyBUaGUgQ29uY2lzZSBDb2x1bWJpYSBFbmN5Y2xvcGVkaWEgXQoJQW5kIHRoZSBMb3JkIHNwYWtlIHVudG8gTW9zZXMsIHNheWluZywKCUFnYWluLCB0aG91IHNoYWx0IHNheSB0byB0aGUgY2hpbGRyZW4gb2YgSXNyYWVsLCBXaG9zb2V2ZXIKCWhlIGJlIG9mIHRoZSBjaGlsZHJlbiBvZiBJc3JhZWwsIG9yIG9mIHRoZSBzdHJhbmdlcnMgdGhhdAoJc29qb3VybiBpbiBJc3JhZWwsIHRoYXQgZ2l2ZXRoIGFueSBvZiBoaXMgc2VlZCB1bnRvIE1vbGVjaDsKCWhlIHNoYWxsIHN1cmVseSBiZSBwdXQgdG8gZGVhdGg6IHRoZSBwZW9wbGUgb2YgdGhlIGxhbmQgc2hhbGwKCXN0b25lIGhpbSB3aXRoIHN0b25lcy4KCUFuZCBJIHdpbGwgc2V0IG15IGZhY2UgYWdhaW5zdCB0aGF0IG1hbiwgYW5kIHdpbGwgY3V0IGhpbSBvZmYKCWZyb20gYW1vbmcgaGlzIHBlb3BsZTsgYmVjYXVzZSBoZSBoYXRoIGdpdmVuIG9mIGhpcyBzZWVkIHVudG8KCU1vbGVjaCwgdG8gZGVmaWxlIG15IHNhbmN0dWFyeSwgYW5kIHRvIHByb2ZhbmUgbXkgaG9seSBuYW1lLgoJQW5kIGlmIHRoZSBwZW9wbGUgb2YgdGhlIGxhbmQgZG8gYW55IHdheXMgaGlkZSB0aGVpciBleWVzCglmcm9tIHRoZSBtYW4sIHdoZW4gaGUgZ2l2ZXRoIG9mIGhpcyBzZWVkIHVudG8gTW9sZWNoLCBhbmQga2lsbAoJaGltIG5vdDoKCVRoZW4gSSB3aWxsIHNldCBteSBmYWNlIGFnYWluc3QgdGhhdCBtYW4sIGFuZCBhZ2FpbnN0IGhpcwoJZmFtaWx5LCBhbmQgd2lsbCBjdXQgaGltIG9mZiwgYW5kIGFsbCB0aGF0IGdvIGEgd2hvcmluZyBhZnRlcgoJaGltLCB0byBjb21taXQgd2hvcmVkb20gd2l0aCBNb2xlY2gsIGZyb20gYW1vbmcgdGhlaXIgcGVvcGxlLgoJCVsgTGV2aXRpY3VzIDIwOjEtNSBdCglPbmUgZGF5LCBhbiBhcm15IGdlbmVyYWwgaW52aXRlZCB0aGUgQnVkZGhpc3QgbW9uayBJLUhzaXUKCShsaXRlcmFsbHksICJPbmUgUmVzdCIpIHRvIGhpcyBtaWxpdGFyeSBoZWFkIG9mZmljZSBmb3IgYQoJZGlubmVyLiAgSS1Ic2l1IHdhcyBub3QgYWNjdXN0b21lZCB0byB3ZWFyaW5nIGx1eHVyaW91cwoJY2xvdGhpbmdzIGFuZCBzbyBoZSBqdXN0IHB1dCBvbiBhbiBvbGQgb3JkaW5hcnkgY2FzdWFsCglyb2JlIHRvIGdvIHRvIHRoZSBtaWxpdGFyeSBiYXNlLiAgVG8gaGltLCAiZm9ybSBpcyB2b2lkIi4KCglBcyBoZSBhcHByb2FjaGVkIHRoZSBiYXNlLCB0d28gc29sZGllcnMgYXBwZWFyZWQgYmVmb3JlIGhpbQoJYW5kIHNob3V0ZWQsICJXaGVyZSBkb2VzIHRoaXMgYmVnZ2FyIGNhbWUgZnJvbT8gIElkZW50aWZ5Cgl5b3Vyc2VsZiEgIFlvdSBkbyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIGJlIGFyb3VuZCBoZXJlISIKCgkiTXkgbmFtZSBpcyBJLUhzaXUgRGhhcm1hIE1hc3Rlci4gIEkgYW0gaW52aXRlZCBieSB5b3VyCglnZW5lcmFsIGZvciBhIHN1cHBlci4iCgoJVGhlIHR3byBzb2xkaWVycyBleGFtaW5lZCB0aGUgbW9uayBjbG9zZWx5IGFuZCBzYWlkLCAiWW91CglsaWFyLiAgSG93IGNvbWUgbXkgZ2VuZXJhbCBpbnZpdGVzIHN1Y2ggYSBzaGFiYnkgbW9uayB0bwoJZGlubmVyPyAgSGUgaW52aXRlcyB0aGUgdmVyeSBzb2xlbW4gdmVuZXJhYmxlIEktSHNpdSB0byBvdXIKCWJhc2UgZm9yIGEgZ3JlYXQgY2VyZW1vbnkgdG9kYXksIG5vdCB5b3UuICBOb3csIGdldCBvdXQhIgoKCUktSHNpdSB3YXMgdW5hYmxlIHRvIGNvbnZpbmNlIHRoZSBzb2xkaWVycyB0aGF0IGhlIHdhcwoJaW5kZWVkIHRoZSBpbnZpdGVkIGd1ZXN0LCBzbyBoZSByZXR1cm5lZCB0byB0aGUgdGVtcGxlCglhbmQgY2hhbmdlZCB0byBhIHZlcnkgZm9ybWFsIHNvbGVtbiBjZXJlbW9uaWFsIHJvYmUgZm9yCgl0aGUgZGlubmVyLiAgQW5kIGFzIGhlIHJldHVybmVkIHRvIHRoZSBtaWxpdGFyeSBiYXNlLCB0aGUKCXNvbGRpZXJzIG9ic2VydmVkIHRoYXQgaGUgd2FzIHN1Y2ggYSBncmVhdCBCdWRkaGlzdCBtb25rLAoJbGV0IGhpbSBpbiB3aXRoIGhvbm91ci4KCglBdCB0aGUgZGlubmVyLCBJLUhzaXUgc2F0IGluIGZyb250IG9mIHRoZSB0YWJsZSBmdWxsIG9mCglmb29kIGJ1dCwgaW5zdGVhZCBvZiBwdXR0aW5nIHRoZSBmb29kIGludG8gaGlzIG1vdXRoLCBoZQoJcGlja2VkIHVwIHRoZSBmb29kIHdpdGggaGlzIGNob3BzdGlja3MgYW5kIHB1dCBpdCBpbnRvCgloaXMgc2xlZXZlcy4gIFRoZSBnZW5lcmFsIHdhcyBjdXJpb3VzLCBhbmQgd2hpc3BlcmVkIHRvCgloaW0sICJUaGlzIGlzIHZlcnkgZW1iYXJyYXNzaW5nLiAgRG8geW91IHdhbnQgdG8gdGFrZQoJc29tZSBmb29kIGJhY2sgdG8gdGhlIHRlbXBsZT8gIEkgd2lsbCBvcmRlciB0aGUgY29vayB0bwoJcHJlcGFyZSBzb21lIHRha2Ugb3V0IG9yZGVycyBmb3IgeW91LiIgICJObyIgcmVwbGllZCB0aGUKCW1vbmsuICAiV2hlbiBJIGNhbWUgaGVyZSwgSSB3YXMgbm90IGFsbG93ZWQgaW50byB0aGUKCWJhc2UgYnkgeW91ciBzb2xkaWVycyB1bnRpbCBJIHdlYXIgdGhpcyBjZXJlbW9uaWFsIHJvYmUuCglZb3UgZG8gbm90IGludml0ZSBtZSBmb3IgYSBkaW5uZXIuICBZb3UgaW52aXRlIG15IHJvYmUuCglUaGVyZWZvcmUsIG15IHJvYmUgaXMgZWF0aW5nIHRoZSBmb29kLCBub3QgbWUuIgoJCVsgRGluaW5nIHdpdGggYSBHZW5lcmFsIC0gYSBaZW4gQnVkZGhpc20gS29hbiwKCQkgIHRyYW5zbGF0aW9uIGJ5IFlpdS1tYW4gQ2hhbiBdCgkiTGlzdGVuLCBtYW4tY3ViLCIgc2FpZCB0aGUgQmVhciwgYW5kIGhpcyB2b2ljZSBydW1ibGVkIGxpa2UKCXRodW5kZXIgb24gYSBob3QgbmlnaHQuICAiSSBoYXZlIHRhdWdodCB0aGVlIGFsbCB0aGUgTGF3IG9mCgl0aGUgSnVuZ2xlIGZvciBhbGwgdGhlIHBlb3BsZXMgb2YgdGhlIGp1bmdsZS0tZXhjZXB0IHRoZQoJTW9ua2V5LUZvbGsgd2hvIGxpdmUgaW4gdGhlIHRyZWVzLiAgVGhleSBoYXZlIG5vIGxhdy4gIFRoZXkKCWFyZSBvdXRjYXN0cy4gIFRoZXkgaGF2ZSBubyBzcGVlY2ggb2YgdGhlaXIgb3duLCBidXQgdXNlIHRoZQoJc3RvbGVuIHdvcmRzIHdoaWNoIHRoZXkgb3ZlcmhlYXIgd2hlbiB0aGV5IGxpc3RlbiwgYW5kIHBlZXAsCglhbmQgd2FpdCB1cCBhYm92ZSBpbiB0aGUgYnJhbmNoZXMuICBUaGVpciB3YXkgaXMgbm90IG91ciB3YXkuCglUaGV5IGFyZSB3aXRob3V0IGxlYWRlcnMuICBUaGV5IGhhdmUgbm8gcmVtZW1icmFuY2UuICBUaGV5Cglib2FzdCBhbmQgY2hhdHRlciBhbmQgcHJldGVuZCB0aGF0IHRoZXkgYXJlIGEgZ3JlYXQgcGVvcGxlCglhYm91dCB0byBkbyBncmVhdCBhZmZhaXJzIGluIHRoZSBqdW5nbGUsIGJ1dCB0aGUgZmFsbGluZyBvZgoJYSBudXQgdHVybnMgdGhlaXIgbWluZHMgdG8gbGF1Z2h0ZXIgYW5kIGFsbCBpcyBmb3Jnb3R0ZW4uCglXZSBvZiB0aGUganVuZ2xlIGhhdmUgbm8gZGVhbGluZ3Mgd2l0aCB0aGVtLiAgV2UgZG8gbm90IGRyaW5rCgl3aGVyZSB0aGUgbW9ua2V5cyBkcmluazsgd2UgZG8gbm90IGdvIHdoZXJlIHRoZSBtb25rZXlzIGdvOwoJd2UgZG8gbm90IGh1bnQgd2hlcmUgdGhleSBodW50OyB3ZSBkbyBub3QgZGllIHdoZXJlIHRoZXkgZGllLi4uLiIKCQlbIFRoZSBKdW5nbGUgQm9vaywgYnkgUnVkeWFyZCBLaXBsaW5nIF0KCVRoZSBtb3JuaW5nIHN0YXIgd2FzIGEgbWVkaWV2YWwgd2VhcG9uIHJlc2VtYmxpbmcgYSBtYWNlLCBidXQKCXdpdGggYSBsYXJnZSBzcGlrZSBvbiB0aGUgZW5kIGFuZCBzbWFsbGVyIHNwaWtlcyBhcm91bmQgdGhlCgljaXJjdW1mZXJlbmNlLiAgSXQgd2FzIGFsc28ga25vd24gYXMgdGhlIGdvZWRlbmRhZyAoZnJvbSB0aGUKCUR1dGNoIHdvcmQgZm9yICJnb29kIGRheSIpIGFuZCB0aGUgaG9seSB3YXRlciBzcHJpbmtsZXIgKGZyb20KCWl0cyByZXNlbWJsYW5jZSB0byB0aGUgYXNwZXJnaWxsdW0gc29tZXRpbWVzIHVzZWQgaW4gdGhlCglDYXRob2xpYyBNYXNzKS4gIEl0IHdhcyB1c2VkIGJ5IGJvdGggY2F2YWxyeSBhbmQgaW5mYW50cnk7Cgl0aGUgaG9yc2VtYW4ncyB3ZWFwb24gdHlwaWNhbGx5IGhhZCBhIHNob3J0ZXIgaGFmdCB0aGFuIHRoZQoJZm9vdG1hbidzLCB3aGljaCBtaWdodCBiZSB1cCB0byBzaXggZmVldCBsb25nLiAgSXQgY2FtZSBpbnRvCgl1c2UgaW4gdGhlIGJlZ2lubmluZyBvZiB0aGUgMTR0aCBjZW50dXJ5LgoJVGhlIG5hbWUgIm1vcm5pbmcgc3RhciIgaXMgb2Z0ZW4gZXJyb25lb3VzbHkgYXBwbGllZCB0byB0aGUKCW1pbGl0YXJ5IGZsYWlsIChhbHNvIGtub3duIGFzIHRoZSB0aGVyc2NvbCksIGEgc2ltaWxhciB3ZWFwb24sCglidXQgd2l0aCB0aGUgaGVhZCBhdHRhY2hlZCBieSBhIHNob3J0IGNoYWluLgoJCVsgRGljdGlvbmFyeSBvZiBNZWRpZXZhbCBLbmlnaHRob29kIGFuZCBDaGl2YWxyeSwKCQkgIGJ5IEJyYWRmb3JkIEJyb3VnaHRvbiBdCgkuLi4gdGhlIE11bWFrIG9mIEhhcmFkIHdhcyBpbmRlZWQgYSBiZWFzdCBvZiB2YXN0IGJ1bGssIGFuZAoJdGhlIGxpa2Ugb2YgaGltIGRvZXMgbm90IHdhbGsgbm93IGluIE1pZGRsZS1FYXJ0aDsgaGlzIGtpbgoJdGhhdCBsaXZlIHN0aWxsIGluIGxhdHRlciBkYXlzIGFyZSBidXQgbWVtb3JpZXMgb2YgaGlzIGdpcnRoCglhbmQgbWFqZXN0eS4gIE9uIGhlIGNhbWUsIC4uLiBoaXMgZ3JlYXQgbGVncyBsaWtlIHRyZWVzLAoJZW5vcm1vdXMgc2FpbC1saWtlIGVhcnMgc3ByZWFkIG91dCwgbG9uZyBzbm91dCB1cHJhaXNlZCBsaWtlCglhIGh1Z2Ugc2VycGVudCBhYm91dCB0byBzdHJpa2UsIGhpcyBzbWFsbCByZWQgZXllcyByYWdpbmcuCglIaXMgdXB0dXJuZWQgaG9ybmxpa2UgdHVza3MgLi4uIGRyaXBwZWQgd2l0aCBibG9vZC4KCQlbIFRoZSBUd28gVG93ZXJzLCBieSBKLlIuUi4gVG9sa2llbiBdCglCdXQgZm9yIGFuIGFjY291bnQgb2YgdGhlIG1hbm5lciBpbiB3aGljaCB0aGUgYm9keSB3YXMKCWJhbmRhZ2VkLCBhbmQgYSBsaXN0IG9mIHRoZSB1bmd1ZW50cyBhbmQgb3RoZXIgbWF0ZXJpYWxzCgllbXBsb3llZCBpbiB0aGUgcHJvY2VzcywgYW5kIHRoZSB3b3JkcyBvZiBwb3dlciB3aGljaCB3ZXJlCglzcG9rZW4gYXMgZWFjaCBiYW5kYWdlIHdhcyBsYWlkIGluIGl0cyBwbGFjZSwgd2UgbXVzdCBoYXZlCglyZWNvdXJzZSB0byBhIHZlcnkgaW50ZXJlc3RpbmcgcGFweXJ1cyB3aGljaCBoYXMgYmVlbiBlZGl0ZWQKCWFuZCB0cmFuc2xhdGVkIGJ5IE0uIE1hc3Blcm8gdW5kZXIgdGhlIHRpdGxlIG9mIExlIFJpdHVlbCBkZQoJbCdFbWJhdW1lbWVudC4gLi4uCglFdmVyeXRoaW5nIHRoYXQgY291bGQgYmUgZG9uZSB0byBwcmVzZXJ2ZSB0aGUgYm9keSB3YXMgbm93Cglkb25lLCBhbmQgZXZlcnkgbWVtYmVyIG9mIGl0IHdhcywgYnkgbWVhbnMgb2YgdGhlIHdvcmRzIG9mCglwb3dlciB3aGljaCBjaGFuZ2VkIHBlcmlzaGFibGUgc3Vic3RhbmNlcyBpbnRvIGltcGVyaXNoYWJsZSwKCXByb3RlY3RlZCB0byBhbGwgZXRlcm5pdHk7IHdoZW4gdGhlIGZpbmFsIGNvdmVyaW5nIG9mIHB1cnBsZQoJb3Igd2hpdGUgbGluZW4gaGFkIGJlZW4gZmFzdGVuZWQgdXBvbiBpdCwgdGhlIGJvZHkgd2FzIHJlYWR5Cglmb3IgdGhlIHRvbWIuCgkJWyBFZ3lwdGlhbiBNYWdpYywgYnkgRS5BLiBXYWxsaXMgQnVkZ2UgXQoJSGUgaGVsZCBhIHdoaXRlIGNsb3RoIC0tIGl0IHdhcyBhIHNlcnZpZXR0ZSBoZSBoYWQgYnJvdWdodAoJd2l0aCBoaW0gLS0gb3ZlciB0aGUgbG93ZXIgcGFydCBvZiBoaXMgZmFjZSwgc28gdGhhdCBoaXMKCW1vdXRoIGFuZCBqYXdzIHdlcmUgY29tcGxldGVseSBoaWRkZW4sIGFuZCB0aGF0IHdhcyB0aGUKCXJlYXNvbiBmb3IgaGlzIG11ZmZsZWQgdm9pY2UuICBCdXQgaXQgd2FzIG5vdCB0aGF0IHdoaWNoCglzdGFydGxlZCBNcnMuIEhhbGwuICBJdCB3YXMgdGhlIGZhY3QgdGhhdCBhbGwgaGlzIGZvcmVoZWFkCglhYm92ZSBoaXMgYmx1ZSBnbGFzc2VzIHdhcyBjb3ZlcmVkIGJ5IGEgd2hpdGUgYmFuZGFnZSwgYW5kCgl0aGF0IGFub3RoZXIgY292ZXJlZCBoaXMgZWFycywgbGVhdmluZyBub3QgYSBzY3JhcCBvZiBoaXMKCWZhY2UgZXhwb3NlZCBleGNlcHRpbmcgb25seSBoaXMgcGluaywgcGVha2VkIG5vc2UuICBJdCB3YXMKCWJyaWdodCwgcGluaywgYW5kIHNoaW55IGp1c3QgYXMgaXQgaGFkIGJlZW4gYXQgZmlyc3QuICBIZQoJd29yZSBhIGRhcmstYnJvd24gdmVsdmV0IGphY2tldCB3aXRoIGEgaGlnaCwgYmxhY2ssIGxpbmVuLQoJbGluZWQgY29sbGFyIHR1cm5lZCB1cCBhYm91dCBoaXMgbmVjay4gIFRoZSB0aGljayBibGFjawoJaGFpciwgZXNjYXBpbmcgYXMgaXQgY291bGQgYmVsb3cgYW5kIGJldHdlZW4gdGhlIGNyb3NzCgliYW5kYWdlcywgcHJvamVjdCBpbiBjdXJpb3VzIHRhaWxzIGFuZCBob3JucywgZ2l2aW5nIGhpbQoJdGhlIHN0cmFuZ2VzdCBhcHBlYXJhbmNlIGNvbmNlaXZhYmxlLgoJCVsgVGhlIEludmlzaWJsZSBNYW4sIGJ5IEguRy4gV2VsbHMgXQoJVGhlIG5hZ2EgaXMgYSBteXN0aWNhbCBjcmVhdHVyZSB3aXRoIHRoZSBib2R5IG9mIGEgc25ha2UgYW5kCgl0aGUgaGVhZCBvZiBhIG1hbiBvciB3b21hbi4gIFRoZXkgd2lsbCBmaWVyY2VseSBwcm90ZWN0IHRoZQoJdGVycml0b3J5IHRoZXkgY29uc2lkZXIgdGhlaXIgb3duLiAgU29tZSBuYWdhcyBjYW4gYmUgZm9yY2VkCgl0byBzZXJ2ZSBhcyBndWFyZGlhbnMgYnkgYSBzcGVsbGNhc3RlciBvZiBncmVhdCBwb3dlci4KCUEgSmFwYW5lc2UgcG9sZS1hcm0sIGZpdHRlZCB3aXRoIGEgY3VydmVkIHNpbmdsZS1lZGdlZCBibGFkZS4KCVRoZSBibGFkZXMgcmFuZ2VkIGluIGxlbmd0aCBmcm9tIHR3byB0byBmb3VyIGZlZXQsIG1vdW50ZWQgb24KCXNoYWZ0cyBhYm91dCBmb3VyIHRvIGZpdmUgZmVldCBsb25nLiAgVGhlIG5hZ2luYXRhIHdlcmUgY3V0Cgl3aXRoIGEgc2VyaWVzIG9mIHNob3J0IGdyb292ZXMgbmVhciB0byB0aGUgdGFuZywgYWJvdmUgd2hpY2gKCXRoZSBiYWNrIGVkZ2Ugd2FzIHRoaW5uZWQsIGJ1dCBub3Qgc2hhcnBlbmVkLCBzbyB0aGF0IHRoZQoJZ3JlYXRlciBwYXJ0IG9mIHRoZSBibGFkZSB3YXMgYSBmbGF0dGVuZWQgZGlhbW9uZCBzaGFwZSBpbgoJc2VjdGlvbi4gIFNlZW4gaW4gcHJvZmlsZSwgdGhlIGN1cnZlIGlzIHNsaWdodCBvciBub24tCglleGlzdGVudCBuZWFyIHRoZSB0YW5nLCBiZWNvbWluZyBtb3JlIHByb25vdW5jZWQgdG93YXJkcyB0aGUKCXBvaW50LgoJICAgIFtdCgoJIldpdGggaGlzIG5hZ2luYXRhIGhlIGtpbGxlZCBmaXZlLCBidXQgd2l0aCB0aGUgc2l4dGggaXQKCXNuYXBwZWQgYXN1bmRlciBpbiB0aGUgbWlkc3QgYW5kLCBmbGluZ2luZyBpdCBhd2F5LCBoZSBkcmV3CgloaXMgc3dvcmQsIHdpZWxkaW5nIGl0IGluIHRoZSB6aWd6YWcgc3R5bGUsIHRoZSBpbnRlcmxhY2luZywKCWNyb3NzLCByZXZlcnNlZCBkcmFnb25mbHksIHdhdGVyd2hlZWwsIGFuZCBlaWdodC1zaWRlcy1hdC0KCW9uY2Ugc3R5bGVzIG9mIGZlbmNpbmcgYW5kIGN1dHRpbmcgZG93biBlaWdodCBtZW47IGJ1dCBhcyBoZQoJYnJvdWdodCBkb3duIHRoZSBuaW50aCB3aXRoIGEgbWlnaHR5IGJsb3cgb24gdGhlIGhlbG1ldCwgdGhlCglibGFkZSBzbmFwcGVkIGF0IHRoZSBoaWx0LiIKCSAgICBbIFN0b3J5IG9mIFRzdXRzdWkgbm8gSm9taW8gTWVpc2h1IGZyb20gVGFsZXMgb2YgSGVpa2UgXQoJTm90IG9ubHkgZG8gdGhlc2UgZGVtb25zIGRvIHBoeXNpY2FsIGRhbWFnZSB3aXRoIHRoZWlyIGNsYXdzCglhbmQgYml0ZSwgYnV0IHRoZXkgYXJlIGNhcGFibGUgb2YgdXNpbmcgbWFnaWMgYXMgd2VsbC4KCU5hbHpvayBpcyBNb2xvY2gncyBjdW5uaW5nIGFuZCB1bmZhaWxpbmdseSBsb3lhbCBiYXR0bGUKCWxpZXV0ZW5hbnQsIHRvIHdob20gaGUgdHJ1c3RzIHRoZSBjb21tYW5kIG9mIHdhcmZhcmUgd2hlbiBoZQoJZG9lcyBub3Qgd2lzaCB0byBleGVyY2lzZSBpdCBoaW1zZWxmLiAgTmFsem9rIGlzIGEgbWFqb3IKCWRlbW9uLCBrbm93biB0byBjb21tYW5kIHRoZSB1bmRlYWQuICBIZSBpcyBodW5ncnkgZm9yIHBvd2VyLAoJYW5kIHNlY3JldGx5IGNvdmV0cyBNb2xvY2gncyBwb3NpdGlvbi4gIE1vbG9jaCBkb2Vzbid0IHRydXN0CgloaW0sIGJ1dCwgdHJ1c3RpbmcgaGlzIG93biBwb3dlciBlbm91Z2gsIGNob29zZXMgdG8gYWxsb3cKCU5hbHpvayBoaXMgcG9zaXRpb24gYmVjYXVzZSBoZSBpcyB1c2VmdWwuCgkxLiAgVmFsbGV5IGJldHdlZW4gRHVlc3NlbGRvcmYgYW5kIEVsYmVyZmVsZCBpbiBHZXJtYW55LAoJd2hlcmUgYW4gYW5jaWVudCBza3VsbCBvZiBhIHByZWhpc3RvcmljIGFuY2VzdG9yIHRvIG1vZGVybgoJbWFuIHdhcyBmb3VuZC4gIDIuICBIdW1hbihvaWQpIG9mIHRoZSByYWNlIG1lbnRpb25lZCBhYm92ZS4KCU5lZmVyZXQgdGhlIEdyZWVuIGhvbGRzIG9mZmljZSBpbiBoZXIgaGlkZGVuIHRvd2VyLCBvbmx5CglyZWFjaGFibGUgYnkgbWFnaWNhbCBtZWFucywgd2hlcmUgc2hlIHRlYWNoZXMgaGVyIGFwcHJlbnRpY2VzCgl0aGUgZW5pZ21hdGljIHNraWxscyBvZiBvY2N1bHRpc20uICBEZXNwaXRlIGhlciBtYW55IHllYXJzLCBzaGUKCWNvbnRpbnVlcyB0byBpbnZlc3RpZ2F0ZSBuZXcgc3BlbGxzLCBlc3BlY2lhbGx5IHRob3NlIGludm9sdmluZwoJdHJhbnNsb2NhdGlvbi4gIEl0IGlzIGZ1cnRoZXIgcnVtb3JlZCB0aGF0IHdoZW4gc2hlIHdhcyBhbgoJYXBwcmVudGljZSBoZXJzZWxmLCBzaGUgYWNjaWRlbnRhbGx5IHR1cm5lZCBoZXIgc2tpbiBncmVlbiwgYW5kCgloYXMga2VwdCBpdCB0aGF0IHdheSBldmVyIHNpbmNlLgoJKGtpbmRzIG9mKSBzbWFsbCBhbmltYWwsIGxpa2UgYSBsaXphcmQsIHdoaWNoIHNwZW5kcyBtb3N0IG9mCglpdHMgdGltZSBpbiB0aGUgd2F0ZXIuCgkJWyBPeGZvcmQncyBTdHVkZW50J3MgRGljdGlvbmFyeSBvZiBDdXJyZW50IEVuZ2xpc2ggXQoKCSJGaWxsZXQgb2YgYSBmZW5ueSBzbmFrZSwKCUluIHRoZSBjYXVsZHJvbiBib2lsIGFuZCBiYWtlOwoJRXllIG9mIG5ld3QgYW5kIHRvZSBvZiBmcm9nLAoJV29vbCBvZiBiYXQgYW5kIHRvbmd1ZSBvZiBkb2csCglBZGRlcidzIGZvcmsgYW5kIGJsaW5kLXdvcm0ncyBzdGluZywKCUxpemFyZCdzIGxlZyBhbmQgaG93bGV0J3Mgd2luZywKCUZvciBhIGNoYXJtIG9mIHBvd2VyZnVsIHRyb3VibGUsCglMaWtlIGEgaGVsbC1icm90aCBib2lsIGFuZCBidWJibGUuIgoJCVsgTWFjYmV0aCwgYnkgV2lsbGlhbSBTaGFrZXNwZWFyZSBdCglBIEphcGFuZXNlIGJyb2Fkc3dvcmQuCglUaGUgTm9ybnMgd2VyZSB0aGUgdGhyZWUgTm9yc2UgRmF0ZXMsIG9yIHRoZSBnb2RkZXNzZXMgb2YgZmF0ZS4KCUZlbWFsZSBnaWFudHMsIHRoZXkgYnJvdWdodCB0aGUgd29uZGVyZnVsIEdvbGRlbiBBZ2UgdG8gYW4gZW5kLgoJVGhleSBjYXN0IGxvdHMgb3ZlciB0aGUgY3JhZGxlIG9mIGV2ZXJ5IGNoaWxkIHRoYXQgd2FzIGJvcm4sCglhbmQgcGxhY2VkIGdpZnRzIGluIHRoZSBjcmFkbGUuICBUaGVpciBuYW1lcyB3ZXJlIFVyZGEsCglWZXJkYW5kaSwgYW5kIFNrdWxkLCByZXByZXNlbnRpbmcgdGhlIHBhc3QsIHRoZSBwcmVzZW50LCBhbmQKCXRoZSBmdXR1cmUuICBVcmRhIGFuZCBWZXJkYW5kaSB3ZXJlIGtpbmRseSBkaXNwb3NlZCwgYnV0IFNrdWxkCgl3YXMgY3J1ZWwgYW5kIHNhdmFnZS4gIFRoZWlyIHRhc2tzIHdlcmUgdG8gc2V3IHRoZSB3ZWIgb2YKCWZhdGUsIHRvIHdhdGVyIHRoZSBzYWNyZWQgYXNoLCBZZ2dkcmFzaWwsIGFuZCB0byBrZWVwIGl0IGluCglnb29kIGNvbmRpdGlvbiBieSBwbGFjaW5nIGZyZXNoIGVhcnRoIGFyb3VuZCBpdCBkYWlseS4gIEluIGhlcgoJZnVyeSwgU2t1bGQgb2Z0ZW4gc3BvaWxlZCB0aGUgd29yayBvZiBoZXIgc2lzdGVycyBieSB0ZWFyaW5nCgl0aGUgd2ViIHRvIHNocmVkcy4KCSAgICBbIFRoZSBFbmN5Y2xvcGVkaWEgb2YgTXl0aHMgYW5kIExlZ2VuZHMgb2YgQWxsIE5hdGlvbnMKCQlieSBIZXJiZXJ0IFNwZW5jZXIgUm9iaW5zb24gYW5kIEtub3ggV2lsc29uIF0KCUEgbnVuY2hha3UgaXMgdHdvIHNlY3Rpb25zIG9mIHdvb2QgKG9yIG1ldGFsIGluIG1vZGVybgoJaW5jYXJuYXRpb25zKSBjb25uZWN0ZWQgYnkgYSBjb3JkIG9yIGNoYWluLiAgVGhlcmUgaXMgbXVjaAoJY29udHJvdmVyc3kgb3ZlciBpdHMgb3JpZ2luczsgc29tZSBzYXkgaXQgd2FzIG9yaWdpbmFsbHkgYQoJQ2hpbmVzZSB3ZWFwb24sIG90aGVycyBzYXkgaXQgZXZvbHZlZCBmcm9tIGEgdGhyZXNoaW5nIGZsYWlsOwoJb25lIHRoZW9yeSBwdXJwb3J0cyB0aGF0IGl0IHdhcyBkZXZlbG9wZWQgZnJvbSBhIGhvcnNlJ3MgYml0LgoJQ2hpbmVzZSBudW5jaGFrdSB0ZW5kIHRvIGJlIHJvdW5kZWQsIHdoZXJlYXMgSmFwYW5lc2UgYXJlCglvY3RhZ29uYWwsIGFuZCB0aGV5IHdlcmUgb3JpZ2luYWxseSBsaW5rZWQgYnkgaG9yc2UgaGFpci4KCVRoZXJlIGFyZSBtYW55IHZhcmlhdGlvbnMgb24gdGhlIG51bmNoYWt1LCByYW5naW5nIGZyb20gdGhlCgl0aHJlZSBzZWN0aW9uYWwgc3RhZmYgKHNhbi1zZXRzdS1rb24gbnVuY2hha3UpLCB0byBzbWFsbGVyCgltdWx0aS1zZWN0aW9uIG51bmNoYWt1LiAgVGhlIG51bmNoYWt1IHdhcyBwb3B1bGFyaXplZCBieQoJQnJ1Y2UgTGVlIGluIGEgbnVtYmVyIG9mIGZpbG1zLCBtYWRlIGluIGJvdGggSG9sbHl3b29kIGFuZAoJSG9uZyBLb25nLgoJCVsgV2lraXBlZGlhLCB0aGUgZnJlZSBlbmN5Y2xvcGVkaWEgXQoJQSBmZW1hbGUgY3JlYXR1cmUgZnJvbSBSb21hbiBhbmQgR3JlZWsgbXl0aG9sb2d5LCB0aGUgbnltcGgKCW9jY3VwaWVkIHJpdmVycywgZm9yZXN0cywgcG9uZHMsIGV0Yy4gIEEgbnltcGgncyBiZWF1dHkgaXMKCWJleW9uZCB3b3JkczogIGFuIGV2ZXIteW91bmcgd29tYW4gd2l0aCBzbGVlayBmaWd1cmUgYW5kCglsb25nLCB0aGljayBoYWlyLCByYWRpYW50IHNraW4gYW5kIHBlcmZlY3QgdGVldGgsIGZ1bGwgbGlwcwoJYW5kIGdlbnRsZSBleWVzLiAgQSBueW1waCdzIHNjZW50IGlzIGRlbGlnaHRmdWwsIGFuZCBoZXIKCWxvbmcgcm9iZSBnbG93cywgaGVtbWVkIHdpdGggZ29sZGVuIHRocmVhZHMgYW5kIGVtYnJvaWRlcmVkCgl3aXRoIHJhaW5ib3cgaHVlcyBvZiB1bmVhcnRobHkgbWFnbmlmaWNlbmNlLiAgQSBueW1waCdzCglkZW1lYW5vdXIgaXMgZ3JhY2VmdWwgYW5kIGNoYXJtaW5nLCBoZXIgbWluZCBxdWljayBhbmQgd2l0dHkuCgkJW10KCglUaGVzZXVzIGZlbHQgaGVyIHZvaWNlIHB1bGxpbmcgaGltIGRvd24gaW50byBmYXRob21zIG9mCglzbGVlcC4JVGhlIHNvbmcgd2FzIHRoZSBza2VsZXRvbiBvZiBoaXMgZHJlYW0sIGFuZCB0aGUgZHJlYW0KCXdhcyBmdWxsIG9mIHRlcnJvci4gIERlbW9uIGdpcmxzIHdlcmUgYWZ0ZXIgaGltLCBhbmQgYSBidWxsLQoJbWFuIHdhcyBnb3JpbmcgaGltLiAgRXZlcnl3aGVyZSB0aGVyZSB3YXMgYmxvb2QuICBUaGVyZSB3YXMKCXBhaW4uICBUaGVyZSB3YXMgZmVhci4JQnV0IGhpcyBoZWFkIHdhcyBpbiB0aGUgbnltcGgncyBsYXAKCWFuZCBoZXIgbXVzayB3YXMgYWJvdXQgaGltLCBoZXIgdm9pY2Ugd2VhdmluZyB0aGUgZHJlYW0uICBIZQoJa25ldyB0aGVuIHRoYXQgc2hlIGhhZCBiZWVuIHNlbnQgdG8gdGVsbCBoaW0gb2Ygc29tZXRoaW5nCglkcmVhZGZ1bCB0aGF0IHdhcyB0byBoYXBwZW4gdG8gaGltIGxhdGVyLiAgSGVyIHNvbmcgd2FzIGEKCXdhcm5pbmcuICBCdXQgc2hlIGhhZCBicm91Z2h0IGhpbSBhIG5ldyBraW5kIG9mIGpveSwgb25lIHRoYXQKCW1hZGUgaGltIHNlZSBldmVyeXRoaW5nIGRpZmZlcmVudGx5LiAgVGhlIGJveSwgd2hvIHdhcyB0bwoJYmVjb21lIGEgaGVybywgc3VkZGVubHkga25ldyB0aGVuIHdoYXQgbW9zdCBoZXJvZXMgbGVhcm4KCWxhdGVyIC0tIGFuZCBzb21lIHRvbyBsYXRlIC0tIHRoYXQgam95IGJsb3RzIHN1ZmZlcmluZyBhbmQKCXRoYXQgdGhlIHJvYWQgdG8gbnltcGhzIGlzIGJlc2V0IGJ5IG1vbnN0ZXJzLgoJCVsgVGhlIE1pbm90YXVyLCBieSBCZXJuYXJkIEV2c2xpbiBdCglBIHZvbGNhbmljIGdsYXNzLCBob21vZ2VuZW91cyBpbiB0ZXh0dXJlIGFuZCBoYXZpbmcgYSBsb3cgd2F0ZXIKCWNvbnRlbnQsIHdpdGggYSB2aXRyZW91cyBsdXN0ZXIgYW5kIGEgY29uY2hvaWRhbCBmcmFjdHVyZS4gIFRoZQoJY29sb3IgaXMgY29tbW9ubHkgYmxhY2ssIGJ1dCBtYXkgYmUgc29tZSBzaGFkZSBvZiByZWQgb3IgYnJvd24sCglhbmQgY3V0IHNlY3Rpb25zIHNvbWV0aW1lcyBhcHBlYXIgdG8gYmUgZ3JlZW4uICBMaWtlIG90aGVyCgl2b2xjYW5pYyBnbGFzc2VzLCBvYnNpZGlhbiBpcyBhIGxhdmEgdGhhdCBoYXMgY29vbGVkIHRvbyBxdWlja2x5Cglmb3IgdGhlIGNvbnRhaW5lZCBtaW5lcmFscyB0byBjcnlzdGFsbGl6ZS4gIEluIGNoZW1pY2FsCgljb21wb3NpdGlvbiBpdCBpcyByaWNoIGluIHNpbGljYSBhbmQgc2ltaWxhciB0byBncmFuaXRlLiAgSXQgaXMKCWZhdm9yZWQgYnkgcHJpbWl0aXZlIHBlb3BsZXMgZm9yIGtuaXZlcywgYXJyb3doZWFkcywgc3BlYXJoZWFkcywKCWFuZCBvdGhlciB3ZWFwb25zIGFuZCB0b29scy4KCQlbIFRoZSBDb2x1bWJpYSBFbmN5Y2xvcGVkaWEsIFNpeHRoIEVkaXRpb24gXQoJQWxzbyBjYWxsZWQgU2lndHlyIChnb2Qgb2YgVmljdG9yeSksIFZhbC1mYXRoZXIgKGZhdGhlciBvZgoJdGhlIHNsYWluKSwgT25lLUV5ZWQsIEhhbmdhLWdvZCAoZ29kIG9mIHRoZSBoYW5nZWQpLCBGYXJtYS0KCWdvZCAoZ29kIG9mIGNhcmdvZXMpLCBIYXB0YS1nb2QgKGdvZCBvZiBwcmlzb25lcnMpLCBhbmQKCU90aGluLiAgSGUgaXMgdGhlIHByaW1lIGdvZCBvZiB0aGUgTm9yc2VtZW46ICBnb2Qgb2Ygd2FyIGFuZAoJdmljdG9yeSwgd2lzZG9tIGFuZCBwcm9waGVjeSwgcG9ldHJ5LCB0aGUgZGVhZCwgYWlyIGFuZCB3aW5kLAoJaG9zcGl0YWxpdHksIGFuZCBtYWdpYy4KCUFzIHRoZSBnb2Qgb2Ygd2FyIGFuZCB2aWN0b3J5LCBPZGluIGlzIHJ1bGVyIG9mIHRoZSBWYWxreXJpZXMsCgl3YXJyaW9yLW1haWRlbnMgd2hvIGxpdmVkIGluIHRoZSBoYWxscyBvZiBWYWxoYWxsYSBpbiBBc2dhcmQsCgl0aGUgaGFsbCBvZiBkZWFkIGhlcm9lcyB3aGVyZSBoZSBoZWxkIGhpcyBjb3VydC4KCVRoZXNlIGNob3NlbiBvbmVzIHdpbGwgZGVmZW5kIHRoZSByZWFsbSBvZiB0aGUgZ29kcyBhZ2FpbnN0Cgl0aGUgRnJvc3QgR2lhbnRzIG9uIHRoZSBmaW5hbCBkYXkgb2YgcmVja29uaW5nLCBSYWduYXJvay4KCUFzIGdvZCBvZiB0aGUgd2luZCwgT2RpbiByaWRlcyB0aHJvdWdoIHRoZSBhaXIgb24gaGlzIGVpZ2h0LQoJZm9vdGVkIGhvcnNlLCBTbGVpcG5pciwgd2llbGRpbmcgR3VuZ25lciwgaGlzIHNwZWFyLCBub3JtYWxseQoJYWNjb21wYW5pZWQgYnkgaGlzIHJhdmVucywgSHVnaW4gYW5kIE11bmluLCB3aG8gaGUgd291bGQgYWxzbwoJdXNlIGFzIGhpcyBzcGllcy4KCUFzIGEgZ29kIG9mIGhvc3BpdGFsaXR5LCBoZSBlbmpveXMgdmlzaXRpbmcgdGhlIGVhcnRoIGluCglkaXNndWlzZSB0byBzZWUgaG93IHBlb3BsZSB3ZXJlIGJlaGF2aW5nIGFuZCB0byBzZWUgaG93IHRoZXkKCXdvdWxkIHRyZWF0IGhpbSwgbm90IGtub3dpbmcgd2hvIGhlIHdhcy4KCU9kaW4gaXMgdXN1YWxseSByZXByZXNlbnRlZCBhcyBhIG9uZS1leWVkIHdpc2Ugb2xkIG1hbiB3aXRoIGEKCWxvbmcgd2hpdGUgYmVhcmQgYW5kIGEgd2lkZS1icmltbWVkIGhhdCAoaGUgZ2F2ZSBvbmUgb2YgaGlzCglleWVzIHRvIE1pbWlyLCB0aGUgZ3VhcmRpYW4gb2YgdGhlIHdlbGwgb2Ygd2lzZG9tIGluIEhlbCwgaW4KCWV4Y2hhbmdlIGZvciBhIGRyYXVnaHQgb2Yga25vd2xlZGdlKS4KCUFueW9uZSB3aG8gaGFzIG1ldCBhIGdsdXR0b25vdXMsIG51ZGUsIGFuZ3J5IG9ncmUsIHdpbGwgbm90CgllYXNpbHkgZm9yZ2V0IHRoaXMgZW5jb3VudGVyIC0tIGlmIGhlIHN1cnZpdmVzIGl0IGF0IGFsbC4KCUJvdGggbWFsZSBhbmQgZmVtYWxlIG9ncmVzIGNhbiBlYXNpbHkgZ3JvdyBhcyB0YWxsIGFzIHRocmVlCgltZXRyZXMuICBCdWlsZCBhbmQgZmFjaWFsIGV4cHJlc3Npb25zIHdvdWxkIHJlbWluZCBvbmUgb2YgYQoJTmVhbmRlcnRoYWwuICBJdHMgc21hbGwsIHBvaW50eSwga2VlbiB0ZWV0aCBhcmUgc3RyaWtpbmcuCglTaW5jZSBvZ3JlcyBhdm9pZCBkaXJlY3Qgc3VubGlnaHQsIHRoZWlyIHJhZ2dlZCwgdW5mdXJyeQoJc2tpbiBpcyBhcyB3aGl0ZSBhcyBhIHNoZWV0LiAgVGhleSBlbmpveSBjb2F0aW5nIHRoZWlyIGJvZHkKCXdpdGggbGFyZCBhbmQgdXN1YWxseSB3ZWFyIG5vdGhpbmcgYnV0IGEgbG9pbi1jbG90aC4gIEFuIGVsZgoJd291bGQgc21lbGwgaXRzIHJhbmNpZCBzdGVuY2ggYXQgdGVuIG1ldHJlcyBkaXN0YW5jZS4KCU9ncmVzIGFyZSBzb2xpdGFyeSBjcmVhdHVyZXM6ICB2ZXJ5IHJhcmVseSBvbmUgbWF5IGVuY291bnRlcgoJYSBmZW1hbGUgd2l0aCB0d28gb3IgdGhyZWUgeW91bmcuICBUaGV5IGFyZSB0aGUgb25seSByZWFsCgljYXJuaXZvcmVzIGFtb25nIHRoZSBodW1hbm9pZHMsIGFuZCBpdHMgZmF2b3VyaXRlIG1lYWwgaXMgLS0KCW5vdCBzdXJwcmlzaW5nbHkgLS0gaHVtYW4gZmxlc2guICBUaGV5IHNvbWV0aW1lcyBhbGx5IHdpdGgKCW9yY3Mgb3IgZ29ibGlucywgYnV0IG9ubHkgd2hlbiB0aGV5IGFudGljaXBhdGUgYSBnb29kIG1lYXR5CgltZWFsLgoJCVsgaGV0IEJvZWsgdmFuIGRlIFJlZ2VsczsgSGV0IE9vZyBkZXMgTWVlc3RlcnMgXQoJRHVyaW5nIG91ciB3YXRjaGVzIGJlbG93IHdlIG92ZXJoYXVsZWQgb3VyIGNsb3RoZXMsIGFuZCBtYWRlCglhbmQgbWVuZGVkIGV2ZXJ5dGhpbmcgZm9yIGJhZCB3ZWF0aGVyLiAgRWFjaCBvZiB1cyBoYWQgbWFkZQoJZm9yIGhpbXNlbGYgYSBzdWl0IG9mIG9pbC1jbG90aCBvciB0YXJwYXVsaW4sIGFuZCB0aGVzZSB3ZQoJZ290IG91dCwgYW5kIGdhdmUgdGhvcm91Z2ggY29hdGluZ3Mgb2Ygb2lsIG9yIHRhciwgYW5kIGh1bmcKCXVwb24gdGhlIHN0YXlzIHRvIGRyeS4gIE91ciBzdG91dCBib290cywgdG9vLCB3ZSBjb3ZlcmVkCglvdmVyIHdpdGggYSB0aGljayBtaXh0dXJlIG9mIG1lbHRlZCBncmVhc2UgYW5kIHRhci4gIFRodXMgd2UKCXRvb2sgYWR2YW50YWdlIG9mIHRoZSB3YXJtIHN1biBhbmQgZmluZSB3ZWF0aGVyIG9mIHRoZQoJUGFjaWZpYyB0byBwcmVwYXJlIGZvciBpdHMgb3RoZXIgZmFjZS4KCQlbIFR3byBZZWFycyBCZWZvcmUgdGhlIE1hc3QsIGJ5IFJpY2hhcmQgSGVucnkgRGFuYSBdCglTdW1tZXIgcGFzc2VkIGFsbCB0b28gcXVpY2tseS4gIE9uIHRoZSBsYXN0IGRheSBvZiBjYW1wLCBNci4KCUJyaWNrbGUgY2FsbGVkIGhpcyBjb3Vuc2Vsb3JzIHRvZ2V0aGVyIGFuZCBwYWlkIHRoZW0gd2hhdCBoZQoJb3dlZCB0aGVtLiAgTG91aXMgcmVjZWl2ZWQgb25lIGh1bmRyZWQgZG9sbGFycyAtIHRoZSBmaXJzdAoJbW9uZXkgaGUgaGFkIGV2ZXIgZWFybmVkLiAgSGUgaGFkIG5vIHdhbGxldCBhbmQgbm8gcG9ja2V0cywKCXNvIE1yLiBCcmlja2xlIHBsYWNlZCB0aGUgbW9uZXkgaW4gYSB3YXRlcnByb29mIGJhZyB0aGF0IGhhZAoJYSBkcmF3c3RyaW5nLiAgSGUgaHVuZyB0aGlzIG1vbmV5YmFnIGFyb3VuZCBMb3VpcycgbmVjaywKCWFsb25nIHdpdGggdGhlIHRydW1wZXQsIHRoZSBzbGF0ZSwgdGhlIGNoYWxrIHBlbmNpbCwgYW5kIHRoZQoJbGlmZXNhdmluZyBtZWRhbC4KCQlbIFRoZSBUcnVtcGV0IG9mIHRoZSBTd2FuLCBieSBFLkIuIFdoaXRlIF0KCUJ1dCBhdCB0aGUgZW5kIG9mIHRoZSBUaGlyZCBBZ2UgYSB0cm9sbC1yYWNlIG5vdCBiZWZvcmUgc2VlbgoJYXBwZWFyZWQgaW4gc291dGhlcm4gTWlya3dvb2QgYW5kIGluIHRoZSBtb3VudGFpbiBib3JkZXJzIG9mCglNb3Jkb3IuICBPbG9nLWhhaSB0aGV5IHdlcmUgY2FsbGVkIGluIHRoZSBCbGFjayBTcGVlY2guICBUaGF0CglTYXVyb24gYnJlZCB0aGVtIG5vbmUgZG91YnRlZCwgdGhvdWdoIGZyb20gd2hhdCBzdG9jayB3YXMgbm90Cglrbm93bi4gIFNvbWUgaGVsZCB0aGF0IHRoZXkgd2VyZSBub3QgVHJvbGxzIGJ1dCBnaWFudCBPcmNzOwoJYnV0IHRoZSBPbG9nLWhhaSB3ZXJlIGluIGZhc2hpb24gb2YgYm9keSBhbmQgbWluZCBxdWl0ZSB1bmxpa2UKCWV2ZW4gdGhlIGxhcmdlc3Qgb2YgT3JjLWtpbmQsIHdob20gdGhleSBmYXIgc3VycGFzc2VkIGluIHNpemUKCWFuZCBwb3dlci4gIFRyb2xscyB0aGV5IHdlcmUsIGJ1dCBmaWxsZWQgd2l0aCB0aGUgZXZpbCB3aWxsCglvZiB0aGVpciBtYXN0ZXI6ICBhIGZlbGwgcmFjZSwgc3Ryb25nLCBhZ2lsZSwgZmllcmNlIGFuZAoJY3VubmluZywgYnV0IGhhcmRlciB0aGFuIHN0b25lLiAgVW5saWtlIHRoZSBvbGRlciByYWNlIG9mIHRoZQoJVHdpbGlnaHQgdGhleSBjb3VsZCBlbmR1cmUgdGhlIFN1bi4uLi4gIFRoZXkgc3Bva2UgbGl0dGxlLAoJYW5kIHRoZSBvbmx5IHRvbmd1ZSB0aGV5IGtuZXcgd2FzIHRoZSBCbGFjayBTcGVlY2ggb2YgQmFyYWQtZHVyLgoJCVsgVGhlIFJldHVybiBvZiB0aGUgS2luZywgYnkgSi5SLlIuIFRvbGtpZW4gXQoJRGVscGhpIHVuZGVyIHRvd2VyaW5nIFBhcm5hc3N1cywgd2hlcmUgQXBvbGxvJ3Mgb3JhY2xlIHdhcywKCXBsYXlzIGFuIGltcG9ydGFudCBwYXJ0IGluIG15dGhvbG9neS4gIENhc3RhbGlhIHdhcyBpdHMKCXNhY3JlZCBzcHJpbmc7IENlcGhpc3N1cyBpdHMgcml2ZXIuICBJdCB3YXMgaGVsZCB0byBiZSB0aGUKCWNlbnRlciBvZiB0aGUgd29ybGQsIHNvIG1hbnkgcGlsZ3JpbXMgY2FtZSB0byBpdCwgZnJvbQoJZm9yZWlnbiBjb3VudHJpZXMgYXMgd2VsbCBhcyBHcmVlY2UuICBObyBvdGhlciBzaHJpbmUgcml2YWxlZAoJaXQuICBUaGUgYW5zd2VycyB0byB0aGUgcXVlc3Rpb25zIGFza2VkIGJ5IHRoZSBhbnhpb3VzCglzZWVrZXJzIGZvciBUcnV0aCB3ZXJlIGRlbGl2ZXJlZCBieSBhIHByaWVzdGVzcyB3aG8gd2VudCBpbnRvCglhIHRyYW5jZSBiZWZvcmUgc2hlIHNwb2tlLgoJCVsgTXl0aG9sb2d5LCBieSBFZGl0aCBIYW1pbHRvbiBdCglXaGF0IHdhcyB0aGUgZnJ1aXQgbGlrZT8gIFVuZm9ydHVuYXRlbHksIG5vIG9uZSBjYW4gZGVzY3JpYmUKCWEgdGFzdGUuICBBbGwgSSBjYW4gc2F5IGlzIHRoYXQsIGNvbXBhcmVkIHdpdGggdGhvc2UgZnJ1aXRzLAoJdGhlIGZyZXNoZXN0IGdyYXBlZnJ1aXQgeW91J3ZlIGV2ZXIgZWF0ZW4gd2FzIGR1bGwsIGFuZCB0aGUKCWp1aWNpZXN0IG9yYW5nZSB3YXMgZHJ5LCBhbmQgdGhlIG1vc3QgbWVsdGluZyBwZWFyIHdhcyBoYXJkCglhbmQgd29vZHksIGFuZCB0aGUgc3dlZXRlc3Qgd2lsZCBzdHJhd2JlcnJ5IHdhcyBzb3VyLiAgQW5kCgl0aGVyZSB3ZXJlIG5vIHNlZWRzIG9yIHN0b25lcywgYW5kIG5vIHdhc3BzLiAgSWYgeW91IGhhZCBvbmNlCgllYXRlbiB0aGF0IGZydWl0LCBhbGwgdGhlIG5pY2VzdCB0aGluZ3MgaW4gdGhpcyB3b3JsZCB3b3VsZAoJdGFzdGUgbGlrZSBtZWRpY2luZXMgYWZ0ZXIgaXQuICBCdXQgSSBjYW4ndCBkZXNjcmliZSBpdC4gIFlvdQoJY2FuJ3QgZmluZCBvdXQgd2hhdCBpdCBpcyBsaWtlIHVubGVzcyB5b3UgY2FuIGdldCB0byB0aGF0Cgljb3VudHJ5IGFuZCB0YXN0ZSBpdCBmb3IgeW91cnNlbGYuCgkJWyBUaGUgTGFzdCBCYXR0bGUsIGJ5IEMuUy4gTGV3aXMgXQoJVGhpcyBPcmIgaXMgYSBjcnlzdGFsIGJhbGwgb2YgZXhjZXB0aW9uYWwgcG93ZXJzLiAgV2hlbgoJY2FycmllZCwgaXQgZ3JhbnRzIEVTUCwgbGltaXRzIGRhbWFnZSBkb25lIGJ5IHNwZWxscywgYW5kCglwcm90ZWN0cyB0aGUgY2FycmllciBmcm9tIG1hZ2ljIG1pc3NpbGVzLiAgV2hlbiBpbnZva2VkIGl0CglhbGxvd3MgdGhlIGNhcnJpZXIgdG8gYmVjb21lIGludmlzaWJsZS4KCVNvbWUgc2F5IHRoYXQgT2RpbiBoaW1zZWxmIGNyZWF0ZWQgdGhpcyBhbmNpZW50IGNyeXN0YWwgYmFsbCwKCWFsdGhvdWdoIG90aGVycyBhcmd1ZSB0aGF0IExva2kgY3JlYXRlZCBpdCBhbmQgZm9yZ2VkIE9kaW4ncwoJc2lnbmF0dXJlIG9uIHRoZSBib3R0b20uICBJbiBhbnkgY2FzZSwgaXQgaXMgYSBwb3dlcmZ1bAoJYXJ0aWZhY3QuICBBbnlvbmUgd2hvIGNhcnJpZXMgaXQgaXMgZ3JhbnRlZCB0aGUgZ2lmdCBvZgoJd2FybmluZywgYW5kIGRhbWFnZSwgYm90aCBzcGVsbCBhbmQgcGh5c2ljYWwsIGlzIHBhcnRpYWxseQoJYWJzb3JiZWQgYnkgdGhlIG9yYiBpdHNlbGYuICBXaGVuIGludm9rZWQgaXQgaGFzIHRoZSBwb3dlcgoJdG8gdGVsZXBvcnQgdGhlIGludm9rZXIgYmV0d2VlbiBsZXZlbHMuCglUaGUgR3JlYXQgR29ibGluIGdhdmUgYSB0cnVseSBhd2Z1bCBob3dsIG9mIHJhZ2Ugd2hlbiBoZQoJbG9va2VkIGF0IGl0LCBhbmQgYWxsIGhpcyBzb2xkaWVycyBnbmFzaGVkIHRoZWlyIHRlZXRoLAoJY2xhc2hlZCB0aGVpciBzaGllbGRzLCBhbmQgc3RhbXBlZC4gIFRoZXkga25ldyB0aGUgc3dvcmQgYXQKCW9uY2UuICBJdCBoYWQga2lsbGVkIGh1bmRyZWRzIG9mIGdvYmxpbnMgaW4gaXRzIHRpbWUsIHdoZW4KCXRoZSBmYWlyIGVsdmVzIG9mIEdvbmRvbGluIGh1bnRlZCB0aGVtIGluIHRoZSBoaWxscyBvciBkaWQKCWJhdHRsZSBiZWZvcmUgdGhlaXIgd2FsbHMuICBUaGV5IGhhZCBjYWxsZWQgaXQgT3JjcmlzdCwKCUdvYmxpbi1jbGVhdmVyLCBidXQgdGhlIGdvYmxpbnMgY2FsbGVkIGl0IHNpbXBseSBCaXRlci4KCVRoZXkgaGF0ZWQgaXQgYW5kIGhhdGVkIHdvcnNlIGFueSBvbmUgdGhhdCBjYXJyaWVkIGl0LgoJCVsgVGhlIEhvYmJpdCwgYnkgSi5SLlIuIFRvbGtpZW4gXQoJT3JjdXMsIFByaW5jZSBvZiB0aGUgVW5kZWFkLCBoYXMgYSByYW0ncyBoZWFkIGFuZCBhIHBvaXNvbgoJc3Rpbmdlci4gIEhlIGlzIG1vc3QgZmVhcmVkLCB0aG91Z2gsIGZvciBoaXMgcG93ZXJmdWwgbWFnaWMKCWFiaWxpdGllcy4gIEhpcyB3YW5kIGNhdXNlcyBkZWF0aCB0byB0aG9zZSBoZSBjaG9vc2VzLgoJT3JjcywgYmlwZWRzIHdpdGggYSBodW1hbm9pZCBhcHBlYXJhbmNlLCBhcmUgcmVsYXRlZCB0byB0aGUKCWdvYmxpbnMsIGJ1dCBtdWNoIGJpZ2dlciBhbmQgbW9yZSBkYW5nZXJvdXMuICBUaGUgYXZlcmFnZSBvcmMKCWlzIG9ubHkgbW9kZXJhdGVseSBpbnRlbGxpZ2VudCwgaGFzIGJyb2FkLCBtdXNjbGVkIHNob3VsZGVycywKCWEgc2hvcnQgbmVjaywgYSBzbG9waW5nIGZvcmVoZWFkIGFuZCBhIHRoaWNrLCBkYXJrIGZ1ci4KCVRoZWlyIGxvd2VyIGV5ZS10ZWV0aCBhcmUgcG9pbnRpbmcgZm9yd2FyZCwgbGlrZSBhIGJvYXIncy4KCUZlbWFsZSBvcmNzIGFyZSBtb3JlIGxpZ2h0bHkgYnVpbHQgYW5kIGJhcmUtY2hlc3RlZC4gIE5vdAoJbmVlZGluZyBhbnkgY2xvdGhpbmcsIHRoZXkgZG8gbGlrZSB0byBkcmVzcyBpbiB2YXJpZWdhdGVkCglhcHBhcmVscy4gIFN1c3BpY2lvdXMgYnkgbmF0dXJlLCBvcmNzIGxpdmUgaW4gdHJpYmVzIG9yCglob3JkZXMuICBUaGV5IHRlbmQgdG8gbGl2ZSB1bmRlcmdyb3VuZCBhcyB3ZWxsIGFzIGFib3ZlCglncm91bmQgKGJ1dCB0aGV5IGRpc2xpa2Ugc3VubGlnaHQpLiAgT3JjcyBjYW4gdXNlIGFsbCB3ZWFwb25zLAoJdG9vbHMgYW5kIGFybW91cnMgdGhhdCBhcmUgdXNlZCBieSBtZW4uICBTaW5jZSB0aGV5IGRvbid0IGhhdmUKCXRoZSB0YWxlbnQgdG8gZmFzaGlvbiB0aGVzZSB0aGVtc2VsdmVzLCB0aGV5IGFyZSBjb25zdGFudGx5CglodW50aW5nIGZvciB0aGVtLiAgVGhlcmUgaXMgbm90aGluZyBhIGhvcmRlIG9mIG9yY3MgY2Fubm90Cgl1c2UuCgkJWyBoZXQgQm9layB2YW4gZGUgUmVnZWxzOyBIZXQgT29nIGRlcyBNZWVzdGVycyBdCglPcmlvbiB3YXMgdGhlIHNvbiBvZiBOZXB0dW5lLiBIZSB3YXMgYSBoYW5kc29tZSBnaWFudCBhbmQgYQoJbWlnaHR5IGh1bnRlci4gSGlzIGZhdGhlciBnYXZlIGhpbSB0aGUgcG93ZXIgb2Ygd2FkaW5nCgl0aHJvdWdoIHRoZSBkZXB0aHMgb2YgdGhlIHNlYSwgb3IsIGFzIG90aGVycyBzYXksIG9mCgl3YWxraW5nIG9uIGl0cyBzdXJmYWNlLgoKCUhlIGR3ZWx0IGFzIGEgaHVudGVyIHdpdGggRGlhbmEgKEFydGVtaXMpLCB3aXRoIHdob20gaGUKCXdhcyBhIGZhdm91cml0ZSwgYW5kIGl0IGlzIGV2ZW4gc2FpZCBzaGUgd2FzIGFib3V0IHRvIG1hcnJ5CgloaW0uIEhlciBicm90aGVyIHdhcyBoaWdobHkgZGlzcGxlYXNlZCBhbmQgb2Z0ZW4gY2hpZCBoZXIsCglidXQgdG8gbm8gcHVycG9zZS4gT25lIGRheSwgb2JzZXJ2aW5nIE9yaW9uIHdhZGluZyB0aHJvdWdoCgl0aGUgc2VhIHdpdGggaGlzIGhlYWQganVzdCBhYm92ZSB0aGUgd2F0ZXIsIEFwb2xsbyBwb2ludGVkCglpdCBvdXQgdG8gaGlzIHNpc3RlciBhbmQgbWFpbnRhaW5lZCB0aGF0IHNoZSBjb3VsZCBub3QgaGl0Cgl0aGF0IGJsYWNrIHRoaW5nIG9uIHRoZSBzZWEuIFRoZSBhcmNoZXItZ29kZGVzcyBkaXNjaGFyZ2VkCglhIHNoYWZ0IHdpdGggZmF0YWwgYWltLiBUaGUgd2F2ZXMgcm9sbGVkIHRoZSBkZWFkIGJvZHkgb2YKCU9yaW9uIHRvIHRoZSBsYW5kLCBhbmQgYmV3YWlsaW5nIGhlciBmYXRhbCBlcnJvciB3aXRoIG1hbnkKCXRlYXJzLCBEaWFuYSBwbGFjZWQgaGltIGFtb25nIHRoZSBzdGFycywgd2hlcmUgaGUgYXBwZWFycwoJYXMgYSBnaWFudCwgd2l0aCBhIGdpcmRsZSwgc3dvcmQsIGxpb24ncyBza2luLCBhbmQKCWNsdWIuIFNpcml1cywgaGlzIGRvZywgZm9sbG93cyBoaW0sIGFuZCB0aGUgUGxlaWFkcyBmbHkKCWJlZm9yZSBoaW0uCgkJWyBCdWxmaW5jaCdzIE15dGhvbG9neSwgYnkgVGhvbWFzIEJ1bGZpbmNoIF0KCVRoZSBvc2FrdSBpcyBhIHNtYWxsIHRvb2wgZm9yIHBpY2tpbmcgbG9ja3MuCglPd2xiZWFycyBhcmUgcHJvYmFibHkgdGhlIGNyb3NzYnJlZWQgY3JlYXRpb24gb2YgYSBkZW1lbnRlZAoJd2l6YXJkOyBnaXZlbiB0aGUgbGV0aGFsIG5hdHVyZSBvZiB0aGlzIGNyZWF0aW9uLCBpdCBpcyBxdWl0ZQoJbGlrZWx5IHRoZSB3aXphcmQgd2hvIGNyZWF0ZWQgdGhlbSBpcyBubyBsb25nZXIgYWxpdmUuICBBcwoJdGhlIG5hbWUgbWlnaHQgYWxyZWFkeSBzdWdnZXN0LCBvd2xiZWFycyBhcmUgYSBjcm9zcyBiZXR3ZWVuCglhIGdpYW50IG93bCBhbmQgYSBiZWFyLiAgVGhleSBhcmUgY292ZXJlZCB3aXRoIGZ1ciBhbmQKCWZlYXRoZXJzLgoJQSBtYWxlIHNlcnZhbnQgb3IgYXR0ZW5kYW50OyBzcGVjaWZpY2FsbHksIGluIGNoaXZhbHJ5LAoJYSBsYWQgb3IgeW91bmcgbWFuIGluIHRyYWluaW5nIGZvciBrbmlnaHRob29kLCBvciBhIHlvdXRoCglvZiBnZW50bGUgcGFyZW50YWdlIGF0dGVuZGluZyBhIHJveWFsIG9yIHByaW5jZWx5IHBlcnNvbmFnZS4KCQlbIFdlYnN0ZXIncyBDb21wcmVoZW5zaXZlIEludGVybmF0aW9uYWwgRGljdGlvbmFyeQoJCSAgb2YgdGhlIEVuZ2xpc2ggTGFuZ3VhZ2UgXQoJX1BhbGxpdW0uXyAgVGhlIFJvbWFuIG5hbWUgZm9yIGEgc3F1YXJlIHdvb2xsZW4gY2xvYWsgd29ybgoJYnkgbWVuIGluIGFuY2llbnQgR3JlZWNlLCBlc3BlY2lhbGx5IGJ5IHBoaWxvc29waGVycyBhbmQKCWNvdXJ0ZXNhbnMsIGNvcnJlc3BvbmRpbmcgdG8gdGhlIFJvbWFuIHRvZ2EuICBIZW5jZSB0aGUKCUdyZWVrcyBjYWxsZWQgdGhlbXNlbHZlcyBfZ2VucyBwYWxsaWF0YSxfIGFuZCB0aGUgUm9tYW5zCgljYWxsZWQgdGhlbXNlbHZlcyBfZ2VucyB0b2dhdGEuXwoJCVsgQnJld2VyJ3MgQ29uY2lzZSBEaWN0aW9uYXJ5IG9mIFBocmFzZSBhbmQgRmFibGUgXQoJQW5kIGxvISBhbG1vc3Qgd2hlcmUgdGhlIGFzY2VudCBiZWdhbiwKCUEgcGFudGhlciBsaWdodCBhbmQgc3dpZnQgZXhjZWVkaW5nbHksCglXaGljaCB3aXRoIGEgc3BvdHRlZCBza2luIHdhcyBjb3ZlcmVkIG8nZXIhCgoJQW5kIG5ldmVyIG1vdmVkIHNoZSBmcm9tIGJlZm9yZSBteSBmYWNlLAoJTmF5LCByYXRoZXIgZGlkIGltcGVkZSBzbyBtdWNoIG15IHdheSwKCVRoYXQgbWFueSB0aW1lcyBJIHRvIHJldHVybiBoYWQgdHVybmVkLgoJCVsgRGFudGUncyBJbmZlcm5vLCBhcyB0cmFuc2xhdGVkCgkJICAgIGJ5IEhlbnJ5IFdhZHN3b3J0aCBMb25nZmVsbG93IF0KCVNvbWUgcGxheWVycywgd2hvIHVuY29uc2Npb3VzbHkgcGVyY2VpdmUgUGFwZXIgYXMgd2VhayBvciBhCglzaWduIG9mIHN1cnJlbmRlciwgd2lsbCBzaHkgYXdheSBmcm9tIHVzaW5nIGl0IGVudGlyZWx5IG9yCglkcm9wIGl0IGZyb20gdGhlaXIgZ2FtZSB3aGVuIHRoZXkgYXJlIGZhbGxpbmcgYmVoaW5kLiAgT24gdGhlCglvdGhlciBoYW5kLCBQYXBlciBhbHNvIGNvbm5lY3RzIHdpdGggYSBwbGF5ZXIncyBwZXJjZXB0aW9ucwoJYWJvdXQgd3JpdGluZy4gIFRoZXJlIGlzIGEgcXVpZXQgcG93ZXIgaW4gdGhlIHByaW50ZWQgd29yZC4KCUl0IGhhcyB0aGUgYWJpbGl0eSB0byBsYXkgb2ZmIHRob3VzYW5kcyBvZiBlbXBsb3llZXMsIGRlY2xhcmUKCXdhciBhZ2FpbnN0IG5hdGlvbnMsIHNwcmVhZCBzY2FuZGFsIG9yIGNvbmZlc3MgbG92ZS4gIFBhcGVyLAoJaW4gc2hvcnQsIGhhcyBwb3dlciBvdmVyIG1hc3Nlcy4gIFRoZSBmYXRlIG9mIHRoZSBlbnRpcmUgd29ybGQKCWlzIGRldGVybWluZWQgYnkgcHJpbnQuICBBcyBzdWNoLCBzb21lIHBsYXllcnMgcGVyY2VpdmUgUGFwZXIKCWFzIGEgc3VidGxlIGF0dGFjaywgdGhlIHZpY3Rvcnkgb2YgbW9kZXJuIGN1bHR1cmUgb3ZlciBiYXJiYXJpc20uCglTdWNoIHBsYXllcnMgbWF5IHVzZSBQYXBlciB0byBhc3NlcnQgdGhlaXIgc3VwZXJpb3JpdHkgYW5kIGRpZ25pdHkuCgkJWyBUaGUgT2ZmaWNpYWwgUm9jayBQYXBlciBTY2lzc29ycyBTdHJhdGVneSBHdWlkZSwKCQkJYnkgRG91Z2xhcyBhbmQgR3JhaGFtIFdhbGtlciBdCglDb25hbiBjcmllZCBvdXQgc2hhcnBseSBhbmQgcmVjb2lsZWQsIHRocnVzdGluZyBoaXMgY29tcGFuaW9uCgliYWNrLiAgQmVmb3JlIHRoZW0gcm9zZSB0aGUgZ3JlYXQgc2hpbW1lcmluZyB3aGl0ZSBmb3JtIG9mIFNhdGhhLAoJYW4gYWdlbGVzcyBoYXRlIGluIGl0cyBleWVzLiAgQ29uYW4gdGVuc2VkIGhpbXNlbGYgZm9yIG9uZSBtYWQKCWJlcnNlcmtlciBvbnNsYXVnaHQgLS0gdG8gdGhydXN0IHRoZSBnbG93aW5nIGZhZ2dvdCBpbnRvIHRoYXQKCWZpZW5kaXNoIGNvdW50ZW5hbmNlIGFuZCB0aHJvdyBoaXMgbGlmZSBpbnRvIHRoZSByaXBwaW5nIHN3b3JkLQoJc3Ryb2tlLiAgQnV0IHRoZSBzbmFrZSB3YXMgbm90IGxvb2tpbmcgYXQgaGltLiAgSXQgd2FzIGdsYXJpbmcKCW92ZXIgaGlzIHNob3VsZGVyIGF0IHRoZSBtYW4gY2FsbGVkIFBlbGlhcywgd2hvIHN0b29kIHdpdGggaGlzCglhcm1zIGZvbGRlZCwgc21pbGluZy4gIEFuZCBpbiB0aGUgZ3JlYXQsIGNvbGQsIHllbGxvdyBleWVzCglzbG93bHkgdGhlIGhhdGUgZGllZCBvdXQgaW4gYSBnbGl0dGVyIG9mIHB1cmUgZmVhciAtLSB0aGUgb25seQoJdGltZSBDb25hbiBldmVyIHNhdyBzdWNoIGFuIGV4cHJlc3Npb24gaW4gYSByZXB0aWxlJ3MgZXllcy4KCVdpdGggYSBzd2lybGluZyBydXNoIGxpa2UgdGhlIHN3ZWVwIG9mIGEgc3Ryb25nIHdpbmQsIHRoZSBncmVhdAoJc25ha2Ugd2FzIGdvbmUuCgkiV2hhdCBkaWQgaGUgc2VlIHRvIGZyaWdodGVuIGhpbT8iIGFza2VkIENvbmFuLCBleWVpbmcgaGlzCgljb21wYW5pb24gdW5lYXNpbHkuCgkiVGhlIHNjYWxlZCBwZW9wbGUgc2VlIHdoYXQgZXNjYXBlcyB0aGUgbW9ydGFsIGV5ZSwiIGFuc3dlcmVkCglQZWxpYXMgY3J5cHRpY2FsbHkuICAiWW91IHNlZSBteSBmbGVzaHkgZ3Vpc2UsIGhlIHNhdyBteSBuYWtlZAoJc291bC4iCgkgICAgWyBDb25hbiB0aGUgVXN1cnBlciwgYnkgUm9iZXJ0IEUuIEhvd2FyZCBhbmQgTC4gU3ByYWd1ZSBkZSBDYW1wIF0KCVRoZSBtaW5lIGlzIGZ1bGwgb2YgaG9sZXM7CglXaXRoIHRoZSB3b3VuZCBvZiBwaWNrYXhlcy4KCUJ1dCBsb29rIGF0IHRoZSBnb2xkc21pdGgncyBzdG9yZS4KCVRoZXJlLCB0aGVyZSBpcyBnb2xkIGV2ZXJ5d2hlcmUuCgkJWyBEaXZhbi1pIEtlYmlyIE1ldGVyIDIsIGJ5IE1ldmxhbmEgQ2VsYWxlZGRpbiBSdW1pIF0KCVllIFBpZXJjZXIgZG90aCBsb29rIGxpa2UgdW50byBhIHN0YWxhY3R5dGUsIGFuZCBoYW5nZXRoCglmcm9tIHRoZSByb29mcyBvZiBjYXZlcyBhbmQgY2F2ZXJucy4gIFVudG8gdGhlIGhlaWdodCBvZiBhCgltYW4sIGFuZCB0aGlja2VyIHRoYW4gYSBtYW4ncyB0aGlnaCBkbyB0aGV5IGdyb3csIGFuZCBpbgoJZ3JvdXBzIGRvIHRoZXkgaGFuZy4gIElmIGEgY3JlYXR1cmUgZG90aCBwYXNzIGJlbmVhdGggdGhlbSwKCXRoZXkgd2lsbCBieSBpdHMgaGVhdCBhbmQgbm9pc2UgcGVyY2VpdmUgaXQsIGFuZCBmYWxsIHVwb24KCWl0IHRvIGtpbGwgYW5kIGRldm91ciBpdCwgdGhvdWdoIGluIGFueSBvdGhlciB3YXkgdGhleSBtb3ZlCglidXQgZXhjZWVkaW5nIHNsb3cuCgkJWyB0aGUgQmVzdGlhcnkgb2YgWHlnYWcgXQoJVGhleSBsaXZlIGluICJzY2hvb2xzLiIgTWFueSB0aW1lcyB0aGV5IHdpbGwgd2FpdCBmb3IgcHJleQoJdG8gY29tZSB0byB0aGUgc2hhbGxvdyB3YXRlciBvZiB0aGUgcml2ZXIuIFRoZW4gdGhlIGxhcmdlCglncm91cCBvZiBwaXJhbmhhcyB3aWxsIGF0dGFjay4gVGhlc2UgbGFyZ2UgZ3JvdXBzIGFyZSBhYmxlCgl0byBraWxsIGxhcmdlIGFuaW1hbHMuLi4gVGhlaXIgbG93ZXIgdGVldGggZml0IHBlcmZlY3RseQoJaW50byB0aGUgc3BhY2VzIG9mIHRoZWlyIHVwcGVyIHRlZXRoLCBjcmVhdGluZyBhIHRyZW1lbmRvdXMKCXZpY2UtbGlrZSBiaXRlLi4uIFBpcmFuaGFzIGFyZSBhdHRyYWN0ZWQgdG8gYW55IGRpc3R1cmJhbmNlCglpbiB0aGUgd2F0ZXIuCgkJWyBodHRwOi8vd3d3LmFuaW1hbHNvZnRoZXJhaW5mb3Jlc3QuY29tIF0KCUFtaWQgdGhlIHRob3VnaHQgb2YgdGhlIGZpZXJ5IGRlc3RydWN0aW9uIHRoYXQgaW1wZW5kZWQsIHRoZQoJaWRlYSBvZiB0aGUgY29vbG5lc3Mgb2YgdGhlIHdlbGwgY2FtZSBvdmVyIG15IHNvdWwgbGlrZSBiYWxtLgoJSSBydXNoZWQgdG8gaXRzIGRlYWRseSBicmluay4gIEkgdGhyZXcgbXkgc3RyYWluaW5nIHZpc2lvbgoJYmVsb3cuICBUaGUgZ2xhcmUgZnJvbSB0aGUgZW5raW5kbGVkIHJvb2YgaWxsdW1pbmVkIGl0cyBpbm1vc3QKCXJlY2Vzc2VzLiAgWWV0LCBmb3IgYSB3aWxkIG1vbWVudCwgZGlkIG15IHNwaXJpdCByZWZ1c2UgdG8KCWNvbXByZWhlbmQgdGhlIG1lYW5pbmcgb2Ygd2hhdCBJIHNhdy4gIEF0IGxlbmd0aCBpdCBmb3JjZWQgLS0KCWl0IHdyZXN0bGVkIGl0cyB3YXkgaW50byBteSBzb3VsIC0tIGl0IGJ1cm5lZCBpdHNlbGYgaW4gdXBvbiBteQoJc2h1ZGRlcmluZyByZWFzb24uICBPaCEgZm9yIGEgdm9pY2UgdG8gc3BlYWshIC0tIG9oISBob3Jyb3IhIC0tCglvaCEgYW55IGhvcnJvciBidXQgdGhpcyEKCQlbIFRoZSBQaXQgYW5kIHRoZSBQZW5kdWx1bSwgYnkgRWRnYXIgQWxsYW4gUG9lIF0KCVBpdCBmaWVuZHMgYXJlIGFtb25nIHRoZSBtb3JlIHBvd2VyZnVsIG9mIGRldmlscywgY2FwYWJsZSBvZgoJYXR0YWNraW5nIHR3aWNlIHdpdGggd2VhcG9ucyBhcyB3ZWxsIGFzIGdyYWJiaW5nIGFuZCBjcnVzaGluZwoJdGhlIGxpZmUgb3V0IG9mIHRob3NlIHVud2FyeSBlbm91Z2ggdG8gZW50ZXIgdGhlaXIKCWRvbWFpbnMuCglUaGlzIGlzIGFuIGFuY2llbnQgYXJ0aWZhY3QgbWFkZSBvZiBhbiB1bmtub3duIG1hdGVyaWFsLiAgSXQKCWlzIHJlY3Rhbmd1bGFyIGluIHNoYXBlLCB2ZXJ5IHRoaW4sIGFuZCBpbnNjcmliZWQgd2l0aAoJdW5yZWFkYWJsZSBhbmNpZW50IHJ1bmVzLiAgV2hlbiBjYXJyaWVkLCBpdCBncmFudHMgdGhlIG9uZQoJd2hvIGNhcnJpZXMgaXQgRVNQLCBhbmQgcmVkdWNlcyBhbGwgc3BlbGwgaW5kdWNlZCBkYW1hZ2UgZG9uZSB0bwoJdGhlIGNhcnJpZXIgYnkgaGFsZi4gIEl0IGFsc28gcHJvdGVjdHMgZnJvbSBtYWdpYyBtaXNzaWxlCglhdHRhY2tzLiAgRmluYWxseSwgaXRzIHBvd2VyIGlzIHN1Y2ggdGhhdCB3aGVuIGludm9rZWQsIGl0CgljYW4gY2hhcmdlIG90aGVyIG9iamVjdHMuCglCZSBib2xkLAoJYmUgYm9sZCwKCWJ1dCBub3QgdG9vIGJvbGQuCglPciBlbHNlIHlvdXIgbGlmZSdzIGJsb29kLAoJc2hhbGwgcnVuIGNvbGQuCgkJWyBUaGUgV2hpdGUgUm9hZCwgYnkgTmVpbCBHYWltYW4gXQoKCVBlb3BsZSB0aGluayBJJ20gY3JhenkgdG8gd29ycnkgYWxsIHRoZSB0aW1lOwoJSWYgeW91IHBhaWQgYXR0ZW50aW9uLCB5b3UnZCBiZSB3b3JyaWVkIHRvby4KCVlvdSBiZXR0ZXIgcGF5IGF0dGVudGlvbiwgb3IgdGhpcyB3b3JsZCB3ZSBsb3ZlIHNvIG11Y2gKCU1pZ2h0IGp1c3Qga2lsbCB5b3UuCgkJWyBJdCdzIGEgSnVuZ2xlIE91dCBUaGVyZSwgYnkgUmFuZHkgTmV3bWFuIF0KCU1hbnkgb2YgdGhlIHdlYXBvbnMgb2YgdGhlIE1pZGRsZSBBZ2VzIHdlcmUgcG9sZWQgb3IgbG9uZy1zaGFmdGVkCglhcm1zLiAgVW5saWtlIHRoZSBhbmNpZW50IHNwZWFyIG9yIGphdmVsaW4sIGhvd2V2ZXIsIHRoZXkgd2VyZSBub3QKCWludGVuZGVkIHRvIGJlIHRocm93bi4gIFNvbWUgd2VyZSBkZXZpY2VzIHdpdGggc2ltcGxlIHNpbmdsZS0gb3IKCWRvdWJsZS1lZGdlZCBibGFkZXMgYW5kIG5vdGhpbmcgbW9yZSwgd2hpbGUgb3RoZXJzIGNvbWJpbmVkCgl0aGUgcGljaywgc3BlYXIsIGFuZCBoYW1tZXIgb3IgYXhlIGFsbCBpbiBvbmUgd2VhcG9uLgoJCVsgSGVyYWxkcnkgYW5kIEFybW9yIG9mIHRoZSBNaWRkbGUgQWdlcywgYnkgTWFydmluIEguIFBha3VsYSBdCglPbmUgbW9ybmluZywgYXMgR3JlZ29yIFNhbXNhIHdhcyB3YWtpbmcgdXAgZnJvbSBhbnhpb3VzIGRyZWFtcywKCWhlIGRpc2NvdmVyZWQgdGhhdCBpbiBiZWQgaGUgaGFkIGJlZW4gY2hhbmdlZCBpbnRvIGEgbW9uc3Ryb3VzCgl2ZXJtaW5vdXMgYnVnLiAgSGUgbGF5IG9uIGhpcyBhcm1vdXItaGFyZCBiYWNrIGFuZCBzYXcsIGFzIGhlCglsaWZ0ZWQgaGlzIGhlYWQgdXAgYSBsaXR0bGUsIGhpcyBicm93biwgYXJjaGVkIGFiZG9tZW4gZGl2aWRlZAoJdXAgaW50byByaWdpZCBib3ctbGlrZSBzZWN0aW9ucy4gIEZyb20gdGhpcyBoZWlnaHQgdGhlIGJsYW5rZXQsCglqdXN0IGFib3V0IHJlYWR5IHRvIHNsaWRlIG9mZiBjb21wbGV0ZWx5LCBjb3VsZCBoYXJkbHkgc3RheSBpbgoJcGxhY2UuICBIaXMgbnVtZXJvdXMgbGVncywgcGl0aWZ1bGx5IHRoaW4gaW4gY29tcGFyaXNvbiB0byB0aGUKCXJlc3Qgb2YgaGlzIGNpcmN1bWZlcmVuY2UsIGZsaWNrZXJlZCBoZWxwbGVzc2x5IGJlZm9yZSBoaXMgZXllcy4KCQlbIFRoZSBNZXRhbW9ycGhvc2lzLCBieSBGcmFueiBLYWZrYSwKCQkJdHJhbnNsYXRlZCBieSBJYW4gSm9obnN0b24gXQoJCUhleSEgbm93ISBDb21lIGhveSBub3chIFdoaXRoZXIgZG8geW91IHdhbmRlcj8KCQlVcCwgZG93biwgbmVhciBvciBmYXIsIGhlcmUsIHRoZXJlIG9yIHlvbmRlcj8KCQlTaGFycC1lYXJzLCBXaXNlLW5vc2UsIFN3aXNoLXRhaWwgYW5kIEJ1bXBraW4sCgkJV2hpdGUtc29ja3MgbXkgbGl0dGxlIGxhZCwgYW5kIG9sZCBGYXR0eSBMdW1wa2luIQoKCVsuLi5dCglUb20gY2FsbGVkIHRoZW0gb25lIGJ5IG9uZSBhbmQgdGhleSBjbGltYmVkIG92ZXIgdGhlIGJyb3cgYW5kCglzdG9vZCBpbiBhIGxpbmUuICBUaGVuIFRvbSBib3dlZCB0byB0aGUgaG9iYml0cy4KCgkiSGVyZSBhcmUgeW91ciBwb25pZXMsIG5vdyEiIGhlIHNhaWQuICAiVGhleSd2ZSBtb3JlIHNlbnNlIChpbiBzb21lCgl3YXlzKSB0aGFuIHlvdSB3YW5kZXJpbmcgaG9iYml0cyBoYXZlIC0tIG1vcmUgc2Vuc2UgaW4gdGhlaXIgbm9zZXMuCglGb3IgdGhleSBzbmlmZiBkYW5nZXIgYWhlYWQgd2hpY2ggeW91IHdhbGsgcmlnaHQgaW50bzsgYW5kIGlmIHRoZXkKCXJ1biB0byBzYXZlIHRoZW1zZWx2ZXMsIHRoZW4gdGhleSBydW4gdGhlIHJpZ2h0IHdheS4iCgkJWyBUaGUgRmVsbG93c2hpcCBvZiB0aGUgUmluZywgYnkgSi5SLlIuIFRvbGtpZW4gXQoJUG9ydGFscyBjYW4gYmUgTWlycm9ycywgUGljdHVyZXMsIFN0YW5kaW5nIFN0b25lcywgU3RvbmUKCUNpcmNsZXMsIFdpbmRvd3MsIGFuZCBzcGVjaWFsIGdhdGVzIHNldCB1cCBmb3IgdGhlIHB1cnBvc2UuCglZb3Ugd2lsbCB0cmF2ZWwgdGhyb3VnaCB0aGVtIGJvdGggdG8gZGlzdGFudCBwYXJ0cyBvZiB0aGUKCWNvbnRpbmVudCBhbmQgdG8gYW5kIGZyb20gb3VyIG93biB3b3JsZC4gIFRoZSBwcmVjaXNlIG1hbm5lcgoJb2YgdGhlaXIgd29ya2luZyBpcyBhIE1hbmFnZW1lbnQgc2VjcmV0LgoJICBbIFRoZSBUb3VnaCBHdWlkZSB0byBGYW50YXN5bGFuZCwgYnkgRGlhbmEgV3lubmUgSm9uZXMgXQoJUG9zZWlkbyhvKW4sIGxvcmQgb2YgdGhlIHNlYXMgYW5kIGZhdGhlciBvZiByaXZlcnMgYW5kCglmb3VudGFpbnMsIHdhcyB0aGUgc29uIG9mIENocm9ub3MgYW5kIFJoZWEsIGJyb3RoZXIgb2YgWmV1cywKCUhhZGVzLCBIZXJhLCBIZXN0aWEgYW5kIERlbWV0ZXIuICBIaXMgcmFuayBvZiBydWxlciBvZiB0aGUKCXdhdmVzIGhlIHJlY2VpdmVkIGJ5IGxvdCBhdCB0aGUgQ291bmNpbCBNZWV0aW5nIG9mIHRoZSBHb2RzLAoJYXQgd2hpY2ggWmV1cyB0b29rIHRoZSB1cHBlciB3b3JsZCBmb3IgaGltc2VsZiBhbmQgZ2F2ZQoJZG9taW5pb24gb3ZlciB0aGUgbG93ZXIgd29ybGQgdG8gSGFkZXMuCglQb3NlaWRvbiBpcyBhc3NvY2lhdGVkIGluIG1hbnkgd2F5cyB3aXRoIGhvcnNlcyBhbmQgdGh1cyBpcwoJdGhlIGdvZCBvZiBob3JzZXMuICBIZSB0YXVnaHQgbWVuIGhvdyB0byByaWRlIGFuZCBtYW5hZ2UgdGhlCglhbmltYWwgaGUgaW52ZW50ZWQgYW5kIGlzIGxvb2tlZCB1cG9uIGFzIHRoZSBvcmlnaW5hdG9yIGFuZAoJZ3VhcmRpYW4gZGVpdHkgb2YgaG9yc2UgcmFjZXMuCglIaXMgc3ltYm9sIGlzIHRoZSBmYW1pbGlhciB0cmlkZW50IG9yIHRocmVlLXByb25nZWQgc3BlYXIKCXdpdGggd2hpY2ggaGUgY2FuIHNwbGl0IHJvY2tzLCBjYXVzZSBvciBxdWVsbCBzdG9ybXMsIGFuZAoJc2hha2UgdGhlIGVhcnRoLCBhIHBvd2VyIHdoaWNoIG1ha2VzIGhpbSB0aGUgZ29kIG9mCgllYXJ0aHF1YWtlcyBhcyB3ZWxsLiAgUGh5c2ljYWxseSwgaGUgaXMgc2hvd24gYXMgYSBzdHJvbmcgYW5kCglwb3dlcmZ1bCBydWxlciwgZXZlcnkgaW5jaCBhIGtpbmcuCgkgICAgWyBUaGUgRW5jeWNsb3BlZGlhIG9mIE15dGhzIGFuZCBMZWdlbmRzIG9mIEFsbCBOYXRpb25zLAoJCWJ5IEhlcmJlcnQgUm9iaW5zb24gYW5kIEtub3ggV2lsc29uIF0KCVBPVEFCTEUsIG4uICBTdWl0YWJsZSBmb3IgZHJpbmtpbmcuICBXYXRlciBpcyBzYWlkIHRvIGJlCglwb3RhYmxlOyBpbmRlZWQsIHNvbWUgZGVjbGFyZSBpdCBvdXIgbmF0dXJhbCBiZXZlcmFnZSwKCWFsdGhvdWdoIGV2ZW4gdGhleSBmaW5kIGl0IHBhbGF0YWJsZSBvbmx5IHdoZW4gc3VmZmVyaW5nCglmcm9tIHRoZSByZWN1cnJlbnQgZGlzb3JkZXIga25vd24gYXMgdGhpcnN0LCBmb3Igd2hpY2ggaXQKCWlzIGEgbWVkaWNpbmUuICBVcG9uIG5vdGhpbmcgaGFzIHNvIGdyZWF0IGFuZCBkaWxpZ2VudAoJaW5nZW51aXR5IGJlZW4gYnJvdWdodCB0byBiZWFyIGluIGFsbCBhZ2VzIGFuZCBpbiBhbGwKCWNvdW50cmllcywgZXhjZXB0IHRoZSBtb3N0IHVuY2l2aWxpemVkLCBhcyB1cG9uIHRoZQoJaW52ZW50aW9uIG9mIHN1YnN0aXR1dGVzIGZvciB3YXRlci4gIFRvIGhvbGQgdGhhdCB0aGlzCglnZW5lcmFsIGF2ZXJzaW9uIHRvIHRoYXQgbGlxdWlkIGhhcyBubyBiYXNpcyBpbiB0aGUKCXByZXNlcnZhdGl2ZSBpbnN0aW5jdCBvZiB0aGUgcmFjZSBpcyB0byBiZSB1bnNjaWVudGlmaWMgLS0KCWFuZCB3aXRob3V0IHNjaWVuY2Ugd2UgYXJlIGFzIHRoZSBzbmFrZXMgYW5kIHRvYWRzLgoJCVsgVGhlIERldmlsJ3MgRGljdGlvbmFyeSwgYnkgQW1icm9zZSBCaWVyY2UgXQoKCUphY2sgQnVydG9uOiAgV2hhdCdzIGluIHRoZSBmbGFzaywgRWdnPyAgTWFnaWMgcG90aW9uPwoJICAgRWdnIFNoZW46ICBZZWFoLgoJICAgICAgIEphY2s6ICBJIHRob3VnaHQgc28sIGdvb2QuICBXaGF0IGRvIHdlIGRvPyAgRHJpbmsgaXQ/CgkgICAgICAgIEVnZzogIFllYWguCgkgICAgICAgSmFjazogIEdvb2QsIEkgdGhvdWdodCBzby4KCSAgICAgW2xhdGVyXQoJICAgICAgIEphY2s6ICBUaGlzIGRvZXMgd2hhdCBhZ2FpbiwgZXhhY3RseT8KCSAgICAgICAgRWdnOiAgSHVnZSBidXp6ISAgW2RyaW5rc10gIE9oIGdvb2QhICBTZWUgdGhpbmdzIG5vCgkgICAgICAgICAgICAgIG9uZSBlbHNlIGNhbiBzZWUsIGRvIHRoaW5ncyBubyBvbmUgZWxzZSBjYW4gZG8uCgkJWyBCaWcgVHJvdWJsZSBpbiBMaXR0bGUgQ2hpbmEsIGRpcmVjdGVkIGJ5CgkJICBKb2huIENhcnBlbnRlciwgd3JpdHRlbiBieSBHYXJ5IEdvbGRtYW4gJgoJCSAgRGF2aWQgWi4gV2VpbnN0ZWluLCBhZGFwdGF0aW9uIGJ5IFcuIEQuIFJpY2h0ZXIgXQoJV2hhdGV2ZXIgYSBtYW4gcHJheXMgZm9yLCBoZSBwcmF5cyBmb3IgYSBtaXJhY2xlLiAgRXZlcnkKCXByYXllciByZWR1Y2VzIGl0c2VsZiB0byB0aGlzOiAgR3JlYXQgR29kLCBncmFudCB0aGF0IHR3aWNlCgl0d28gYmUgbm90IGZvdXIuCgkJWyBGYXRoZXJzIGFuZCBTb25zLCBieSBJdmFuIFR1cmdlbmV2IF0KCVsuLi5dICBGb3IgdGhlIHR3byBwcmllc3RzIHdlcmUgdGFsa2luZyBleGFjdGx5IGxpa2UgcHJpZXN0cywKCXBpb3VzbHksIHdpdGggbGVhcm5pbmcgYW5kIGxlaXN1cmUsIGFib3V0IHRoZSBtb3N0IGFlcmlhbAoJZW5pZ21hcyBvZiB0aGVvbG9neS4gIFRoZSBsaXR0bGUgRXNzZXggcHJpZXN0IHNwb2tlIHRoZSBtb3JlCglzaW1wbHksIHdpdGggaGlzIHJvdW5kIGZhY2UgdHVybmVkIHRvIHRoZSBzdHJlbmd0aGVuaW5nIHN0YXJzOwoJdGhlIG90aGVyIHRhbGtlZCB3aXRoIGhpcyBoZWFkIGJvd2VkLCBhcyBpZiBoZSB3ZXJlIG5vdCBldmVuCgl3b3J0aHkgdG8gbG9vayBhdCB0aGVtLiAgQnV0IG5vIG1vcmUgaW5ub2NlbnRseSBjbGVyaWNhbAoJY29udmVyc2F0aW9uIGNvdWxkIGhhdmUgYmVlbiBoZWFyZCBpbiBhbnkgd2hpdGUgSXRhbGlhbiBjbG9pc3RlcgoJb3IgYmxhY2sgU3BhbmlzaCBjYXRoZWRyYWwuICBUaGUgZmlyc3QgaGUgaGVhcmQgd2FzIHRoZSB0YWlsIG9mCglvbmUgb2YgRmF0aGVyIEJyb3duJ3Mgc2VudGVuY2VzLCB3aGljaCBlbmRlZDogICIuLi4gd2hhdCB0aGV5CglyZWFsbHkgbWVhbnQgaW4gdGhlIE1pZGRsZSBBZ2VzIGJ5IHRoZSBoZWF2ZW5zIGJlaW5nCglpbmNvcnJ1cHRpYmxlLiIgIFRoZSB0YWxsZXIgcHJpZXN0IG5vZGRlZCBoaXMgYm93ZWQgaGVhZCBhbmQKCXNhaWQ6ICAiQWgsIHllcywgdGhlc2UgbW9kZXJuIGluZmlkZWxzIGFwcGVhbCB0byB0aGVpciByZWFzb247CglidXQgd2hvIGNhbiBsb29rIGF0IHRob3NlIG1pbGxpb25zIG9mIHdvcmxkcyBhbmQgbm90IGZlZWwgdGhhdAoJdGhlcmUgbWF5IHdlbGwgYmUgd29uZGVyZnVsIHVuaXZlcnNlcyBhYm92ZSB1cyB3aGVyZSByZWFzb24gaXMKCXV0dGVybHkgdW5yZWFzb25hYmxlPyIKCQlbIFRoZSBJbm5vY2VuY2Ugb2YgRmF0aGVyIEJyb3duLCBieSBHLksuIENoZXN0ZXJ0b24gXQoJT3B1bnRpYSwgY29tbW9ubHkgY2FsbGVkIHByaWNrbHkgcGVhciwgaXMgYSBnZW51cyBpbiB0aGUgY2FjdHVzCglmYW1pbHksIENhY3RhY2VhZS4gUHJpY2tseSBwZWFycyBhcmUgYWxzbyBrbm93biBhcyB0dW5hIChmcnVpdCksCglzYWJyYSwgbm9wYWwgKHBhZGRsZSwgcGx1cmFsIG5vcGFsZXMpIGZyb20gdGhlIE5haHVhdGwgd29yZAoJbm9wYWxsaSBmb3IgdGhlIHBhZHMsIG9yIG5vc3RsZSwgZnJvbSB0aGUgTmFodWF0bCB3b3JkIG5vY2h0bGkKCWZvciB0aGUgZnJ1aXQ7IG9yIHBhZGRsZSBjYWN0dXMuCgkJWyBXaWtpcGVkaWEsIHRoZSBmcmVlIGVuY3ljbG9wZWRpYSBdCglXaGVyZSBhbSBJPwoJCUluIHRoZSBWaWxsYWdlLgoJV2hhdCBkbyB5b3Ugd2FudD8KCQlJbmZvcm1hdGlvbi4KCVdob3NlIHNpZGUgYXJlIHlvdSBvbj8KCQlUaGF0IHdvdWxkIGJlIHRlbGxpbmcuICBXZSB3YW50IGluZm9ybWF0aW9uIC4uLgoJCWluZm9ybWF0aW9uIC4uLgoJWW91IHdvbid0IGdldCBpdC4KCQlCeSBob29rIG9yIGJ5IGNyb29rLCB3ZSB3aWxsLgoJV2hvIGFyZSB5b3U/CgkJVGhlIG5ldyBOdW1iZXIgMi4KCVdobyBpcyBOdW1iZXIgMT8KCQlZb3UgYXJlIE51bWJlciA2LgoJSSBhbSBub3QgYSBudW1iZXIhICBJIGFtIGEgZnJlZSBtYW4hCgkJWyBUaGUgUHJpc29uZXIsIGJ5IFBhdHJpY2sgTWNHb29oYW4gXQoJS25vd24gdW5kZXIgdmFyaW91cyBuYW1lcyAoTnUsIE5lcGgsIENlbnViaXMsIEFtZW4tS25lcGgsCglLaGVyeS1CYWtlZiksIFB0YWggaXMgdGhlIGNyZWF0b3IgZ29kIGFuZCBnb2Qgb2YgY3JhZnRzbWVuLgoJSGUgaXMgdXN1YWxseSBkZXBpY3RlZCBhcyB3ZWFyaW5nIGEgY2xvc2VseSBmaXR0aW5nIHJvYmUKCXdpdGggb25seSBoaXMgaGFuZHMgZnJlZS4gIEhpcyBtb3N0IGRpc3RpbmN0aXZlIGZlYXR1cmVzIGFyZQoJdGhlIGludmFyaWFibGUgc2t1bGwtY2FwIGV4cG9zaW5nIG9ubHkgaGlzIGZhY2UgYW5kIGVhcnMsCglhbmQgdGhlIF93YXNfIG9yIHJvZCBvZiBkb21pbmF0aW9uIHdoaWNoIGhlIGhvbGRzLAoJY29uc2lzdGluZyBvZiBhIHN0YWZmIHN1cm1vdW50ZWQgYnkgdGhlIF9hbmtoXyBzeW1ib2wgb2YKCWxpZmUuICBIZSBpcyBvdGhlcndpc2Ugc3ltYm9saXplZCBieSBoaXMgc2FjcmVkIGFuaW1hbCwgdGhlCglidWxsLgoJQSBnYXJnYW50dWFuIHZlcnNpb24gb2YgdGhlIGhhcm1sZXNzIHJhaW4td29ybSwgdGhlIHB1cnBsZQoJd29ybSBwb3NlcyBhIGh1Z2UgdGhyZWF0IHRvIHRoZSBvcmRpbmFyeSBhZHZlbnR1cmVyLiAgSXQgaXMKCWtub3duIHRvIHN3YWxsb3cgd2hvbGUgYW5kIGRpZ2VzdCBpdHMgdmljdGltcyB3aXRoaW4gb25seSBhCglmZXcgbWludXRlcy4gIFRoZXNlIHdvcm1zIGFyZSBhbHdheXMgb24gZ3VhcmQsIHNlbnNpdGl2ZQoJdG8gdGhlIG1vc3QgbWludXRlIHZpYnJhdGlvbnMgaW4gdGhlIGVhcnRoLCBidXQgbWF5IGFsc28KCWJlIGF3YWtlbmVkIGJ5IGEgcmVtb3RlIHNocmllay4KCUF0IGZpcnN0IGdsYW5jZSBhcm91bmQgdGhlIGNvcm5lciwgSSB0aG91Z2h0IGl0IHdhcyBhbm90aGVyCgljb2NrYXRyaWNlLiBJIGhhZCBlbmNvdW50ZXJlZCB0aGUgd3JldGNoZWQgY3JlYXR1cmVzIHR3byBvcgoJdGhyZWUgdGltZXMgc2luY2UgbGVhdmluZyB0aGUgb3BlbiBhcmVhLiBJIHF1aWNrbHkgZHVja2VkIG15CgloZWFkIGJhY2sgYW5kIGNvbnNpZGVyZWQgd2hhdCB0byBkbyBuZXh0LiBNeSBoZWFydCBoYWQgYmVndW4KCXRvIHRodW1wIGF1ZGlibHkgYXMgSSBwYXR0ZWQgbXkgcGFjayB0byBtYWtlIHN1cmUgSSBzdGlsbCBoYWQKCXRoZSBkZWFkIGxpemFyZHMgYXQgY2xvc2UgcmVhY2guIEEgY2hlY2sgb2YgbXkgYXR0aXJlIHNob3dlZAoJbm8gb2J2aW91cyBob2xlcyBvciBkYW1hZ2UuIEkgaGFkIHRvIGtlZXAgbW92aW5nLiBPbmUgZGVlcAoJYnJlYXRoLCBhbmQgYSBjb3VudCBvZiB0aHJlZSwgdHdvLCBvbmUsIGFuZCBhcm91bmQgdGhlIGNvcm5lcgoJSSBib2x0ZWQuIEJ1dCBpdCB3YXMgbm8gY29ja2F0cmljZSEgSSBmZWx0IGEgc3VkZGVuIGludGVuc2UKCXNlYXJpbmcgb2YgdGhlIHNraW4gYXJvdW5kIG15IGZhY2UsIGFuZCBmbGFtZXMgYmVnYW4gdG8gbGVhcAoJZnJvbSBteSBwYWNrLiBJIHRvc3NlZCBpdCB0byB0aGUgZ3JvdW5kLCBhbmQgcXVpY2tseSByZXRyZWF0ZWQKCWJhY2ssIGFyb3VuZCB0aGF0IGNvcm5lciwgZGVzcGVyYXRlbHkgc3RyaXZpbmcgdG8gZ2V0IG91dCBvZgoJaXRzIHNpZ2h0LgoJQSBtb25zdHJvdXMgc2VycGVudCBpbiBHcmVlayBteXRob2xvZ3ksIGFuZCB0aGUgY2hpbGQgb2YgR2FpYSwKCXRoZSBnb2RkZXNzIGVhcnRoLiAgSXQgd2FzIHByb2R1Y2VkIGZyb20gdGhlIHNsaW1lIGFuZCBtdWQKCXRoYXQgd2FzIGxlZnQgb24gdGhlIGVhcnRoIGJ5IHRoZSBncmVhdCBmbG9vZCBvZiBEZXVjYWxpb24uCglJdCBsaXZlZCBpbiBhIGNhdmUgYW5kIGd1YXJkZWQgdGhlIG9yYWNsZSBvZiBEZWxwaGkgb24gbW91bnQKCVBhcm5hc3N1cy4KCglObyBtYW4gZGFyZWQgdG8gYXBwcm9hY2ggdGhlIGJlYXN0IGFuZCB0aGUgcGVvcGxlIGFza2VkIEFwb2xsbwoJZm9yIGhlbHAuICBIZSBjYW1lIGRvd24gZnJvbSBNb3VudCBPbHltcHVzIHdpdGggaGlzIHNpbHZlciBib3cKCWFuZCBnb2xkZW4gYXJyb3dzLiAgV2l0aCB1c2luZyBvbmx5IG9uZSBhcnJvdyBoZSBraWxsZWQgdGhlCglzZXJwZW50IGFuZCBjbGFpbWVkIHRoZSBvcmFjbGUgZm9yIGhpbXNlbGYuIC4uLiBUaGUgb2xkIG5hbWUgb2YKCURlbHBoaSwgUHl0aG8sIHJlZmVycyB0byB0aGUgc2VycGVudC4KCQlbIEVuY3ljbG9wZWRpYSBNeXRoaWNhLCBlZC4gTS5GLiBMaW5kZW1hbnMgXQoJVGhlIHdvb2RsYW5kcyBhbmQgb3RoZXIgcmVnaW9ucyBhcmUgaW5oYWJpdGVkIGJ5IG11bHRpdHVkZXMKCW9mIGZvdXItbGVnZ2VkIGNyZWF0dXJlcyB3aGljaCBjYW5ub3QgYmUgc2ltcGx5IGNsYXNzaWZpZWQuCglUaGV5IG1pZ2h0IG5vdCBoYXZlIGZpZXJ5IGJyZWF0aCBvciBkZWFkbHkgc3RpbmdzLCBidXQKCWFkdmVudHVyZXJzIGhhdmUgbmV2ZXJ0aGVsZXNzIG1ldCB0aGVpciBlbmQgbnVtZXJvdXMgdGltZXMKCWR1ZSB0byB0aGUgY2xhd3MsIGhvb3Zlcywgb3IgYml0ZXMgb2Ygc3VjaCBhbmltYWxzLgoJVGhlc2UgY3JlYXR1cmVzIGFyZSBub3QgbmF0aXZlIHRvIHRoaXMgdW5pdmVyc2U7IHRoZXkgc2VlbQoJdG8gaGF2ZSBzdHJhbmdlbHkgZGVyaXZlZCBwb3dlcnMsIGFuZCB1bmtub3duIG1vdGl2ZXMuCgkJW10KCglfVW5jZXJ0YWludHkgUHJpbmNpcGxlXyAgVGhlIHByaW5jaXBsZSB0aGF0IGl0IGlzIG5vdCBwb3NzaWJsZQoJdG8ga25vdyB3aXRoIHVubGltaXRlZCBhY2N1cmFjeSBib3RoIHRoZSBwb3NpdGlvbiBhbmQgbW9tZW50dW0KCW9mIGEgcGFydGljbGUuIC4uLiBBbiBleHBsYW5hdGlvbiBvZiB0aGUgdW5jZXJ0YWludHkgaXMgdGhhdAoJaW4gb3JkZXIgdG8gbG9jYXRlIGEgcGFydGljbGUgZXhhY3RseSwgYW4gb2JzZXJ2ZXIgbXVzdCBiZQoJYWJsZSB0byBib3VuY2Ugb2ZmIGl0IGEgcGhvdG9uIG9mIHJhZGlhdGlvbjsgdGhpcyBhY3Qgb2YKCWxvY2F0aW9uIGl0c2VsZiBhbHRlcnMgdGhlIHBvc2l0aW9uIG9mIHRoZSBwYXJ0aWNsZQoJaW4gYW4gdW5wcmVkaWN0YWJsZSB3YXkuICBUbyBsb2NhdGUgdGhlIHBvc2l0aW9uIGFjY3VyYXRlbHksCglwaG90b25zIG9mIHNob3J0IHdhdmVsZW5ndGggd291bGQgaGF2ZSB0byBiZSB1c2VkLiAgVGhlIGhpZ2gKCW1vbWVudHVtIG9mIHN1Y2ggcGhvdG9ucyB3b3VsZCBjYXVzZSBhIGxhcmdlIGVmZmVjdCBvbiB0aGUKCXBvc2l0aW9uLiAgT24gdGhlIG90aGVyIGhhbmQsIHVzaW5nIHBob3RvbnMgb2YgbG93ZXIgbW9tZW50YQoJd291bGQgaGF2ZSBsZXNzIGVmZmVjdCBvbiB0aGUgcGFydGljbGUncyBwb3NpdGlvbiwgYnV0IHdvdWxkCgliZSBsZXNzIGFjY3VyYXRlIGJlY2F1c2Ugb2YgdGhlIGxvd2VyIHdhdmVsZW5ndGguCgkJWyBBIENvbmNpc2UgRGljdGlvbmFyeSBvZiBQaHlzaWNzIF0KCVF1YXNpdHMgYXJlIHNtYWxsLCBldmlsIGNyZWF0dXJlcywgcmVsYXRlZCB0byBpbXBzLiAgVGhlaXIKCXRhbG9ucyByZWxlYXNlIGEgdmVyeSB0b3hpYyBwb2lzb24gd2hlbiB1c2VkIGluIGFuIGF0dGFjay4KCU1hbnksIHBvc3NpYmx5IG1vc3QsIFRvdXJzIGFyZSBvcmdhbml6ZWQgYXMgYSBRdWVzdC4gIFRoaXMKCWlzIGxpa2UgYSBsYXJnZS1zY2FsZSB0cmVhc3VyZSBodW50LCB3aXRoIGNsdWVzIHNjYXR0ZXJlZAoJYWxsIG92ZXIgdGhlIGNvbnRpbmVudCwgYSBmZXcgZmFsc2UgbGVhZHMsIE15c3RpY2FsIE1hc3RlcnMKCWFzIGdhbWUtc2hvdyBob3N0cywgYW5kIHRoZSBEYXJrIExvcmQgYW5kIHRoZSBUZXJyYWluIHRvCgltYWtlIHRoZSBRdWVzdCBpbnRlcmVzdGluZ2x5IGRpZmZpY3VsdC4gIFsuLi5dCglJbiBvcmRlciB0byBiZSBhc3N1cmVkIG9mIHlvdXIgZnV0dXJlIGN1c3RvbSwgdGhlIE1hbmFnZW1lbnQKCWhhcyBhIGZ1cnRoZXIgUnVsZTogIFRvdXJpc3RzLCBmYXIgZnJvbSBiZWluZyByZXdhcmRlZCBmb3IKCWFjaGlldmluZyB0aGVpciBRdWVzdCBPYmplY3QsIG11c3QgdGhlbiBnbyBvbiB0byBjb25xdWVyCgl0aGUgRGFyayBMb3JkIG9yIHNldCBhYm91dCBTYXZpbmcgdGhlIFdvcmxkLCBvciBib3RoLiAgQW5kCgl3aHkgbm90PyAgQnkgdGhlbiB5b3Ugd2lsbCBoYXZlIGhhZCBhIGxvdCBvZiBwcmFjdGljZSBpbgoJdGhhdCBzb3J0IG9mIHRoaW5nIGFuZCwgYmVzaWRlcywgdGhlIFF1ZXN0IE9iamVjdCBpcyB1c3VhbGx5CglkZXNpZ25lZCB0byBoZWxwIHlvdSBkbyBpdC4KCSAgWyBUaGUgVG91Z2ggR3VpZGUgdG8gRmFudGFzeWxhbmQsIGJ5IERpYW5hIFd5bm5lIEpvbmVzIF0KCU9uZSBvZiB0aGUgcHJpbmNpcGFsIEF6dGVjLVRvbHRlYyBnb2RzIHdhcyB0aGUgZ3JlYXQgYW5kIHdpc2UKCVF1ZXR6YWxjb2F0bCwgd2hvIHdhcyBjYWxsZWQgS3VrdW1hdHogaW4gR3VhdGVtYWxhLCBhbmQKCUt1a3VsY2FuIGluIFl1Y2F0YW4uICBIaXMgaW1hZ2UsIHRoZSBwbHVtZWQgc2VycGVudCwgaXMgZm91bmQKCW9uIGJvdGggdGhlIG9sZGVzdCBhbmQgdGhlIG1vc3QgcmVjZW50IEluZGlhbiBlZGlmaWNlcy4gLi4uCglUaGUgbGVnZW5kIHRlbGxzIGhvdyB0aGUgSW5kaWFuIGRlaXR5IFF1ZXR6YWxjb2F0bCBjYW1lIGZyb20KCXRoZSAiTGFuZCBvZiB0aGUgUmlzaW5nIFN1biIuICBIZSB3b3JlIGEgbG9uZyB3aGl0ZSByb2JlIGFuZAoJaGFkIGEgYmVhcmQ7IGhlIHRhdWdodCB0aGUgcGVvcGxlIGNyYWZ0cyBhbmQgY3VzdG9tcyBhbmQgbGFpZAoJZG93biB3aXNlIGxhd3MuICBIZSBjcmVhdGVkIGFuIGVtcGlyZSBpbiB3aGljaCB0aGUgZWFycyBvZgoJY29ybiB3ZXJlIGFzIGxvbmcgYXMgbWVuIGFyZSB0YWxsLCBhbmQgY2F1c2VkIGJvbGxzIG9mIGNvbG9yZWQKCWNvdHRvbiB0byBncm93IG9uIGNvdHRvbiBwbGFudHMuICBCdXQgZm9yIHNvbWUgcmVhc29uIG9yIG90aGVyCgloZSBoYWQgdG8gbGVhdmUgaGlzIGVtcGlyZS4gLi4uICBCdXQgYWxsIHRoZSBsZWdlbmRzIG9mCglRdWV0emFsY29hdGwgdW5hbmltb3VzbHkgYWdyZWUgdGhhdCBoZSBwcm9taXNlZCB0byBjb21lIGFnYWluLgoJCVsgR29kcywgR3JhdmVzLCBhbmQgU2Nob2xhcnMsIGJ5IEMuIFcuIENlcmFtIF0KCSBNYWx0YXI6ICBbLi4uXSAgSSByZW1lbWJlcmVkIGEgbGl0dGxlIHNheWluZyBJIGxlYXJuZWQgbXkKCSAgICAgICAgICBmaXJzdCBkYXkgYXQgdGhlIGFjYWRlbXkuCglOYXRhbGllOiAgWWVhaCwgeWVhaCwgSSBrbm93LiAgV2lubmVycyBuZXZlciBxdWl0IGFuZCBxdWl0dGVycwoJICAgICAgICAgIG5ldmVyIHdpbi4KCSBNYWx0YXI6ICBXaGF0PyAgTm8hICBXaW5uZXJzIG5ldmVyIHF1aXQgYW5kIHF1aXR0ZXJzIHNob3VsZAoJICAgICAgICAgIGJlIGNhc3QgaW50byB0aGUgRmxhbWluZyBQaXQgb2YgRGVhdGguCgkJWyBTbm93IERheSwgZGlyZWN0ZWQgYnkgQ2hyaXMgS29jaCwKCQkgIHdyaXR0ZW4gYnkgV2lsbCBNY1JvYmIgYW5kIENocmlzIFZpc2NhcmRpIF0KCVRoZSBKYXBhbmVzZSBnb2Qgb2YgdGh1bmRlciAocmFpKSBhbmQgbGlnaHRuaW5nIChkZW4pLiAgSGUKCXByZXZlbnRlZCB0aGUgTW9uZ29scyBmcm9tIGludmFkaW5nIEphcGFuIGluIDEyNzQuICBTaXR0aW5nIG9uCglhIGNsb3VkIGhlIHNlbnQgZm9ydGggYSBzaG93ZXIgb2YgbGlnaHRuaW5nIGFycm93cyB1cG9uIHRoZQoJaW52YWRpbmcgZmxlZXQuICBPbmx5IHRocmVlIG1lbiBlc2NhcGVkLiAgUmFpZGVuIGlzIHBvcnRyYXllZAoJYXMgYSByZWQgZGVtb24gd2l0aCBzaGFycCBjbGF3cywgY2FycnlpbmcgYSBsYXJnZSBkcnVtLiAgSGUgaXMKCWZvbmQgb2YgZWF0aW5nIGh1bWFuIG5hdmVscy4gIFRoZSBvbmx5IHByb3RlY3Rpb24gYWdhaW5zdCBoaW0KCWlzIHRvIGhpZGUgdW5kZXIgYSBtb3NxdWl0byBuZXQuCgkJWyBFbmN5Y2xvcGVkaWEgTXl0aGljYSwgZWQuIE0uRi4gTGluZGVtYW5zIF0KCSJMb25lbHkgbWVuIGFyZSB3ZSwgUmFuZ2VycyBvZiB0aGUgd2lsZCwgaHVudGVycyAtLSBidXQgaHVudGVycwoJZXZlciBvZiB0aGUgc2VydmFudHMgb2YgdGhlIEVuZW15OyBmb3IgdGhleSBhcmUgZm91bmQgaW4gbWFueQoJcGxhY2VzLCBub3QgaW4gTW9yZG9yIG9ubHkuCglJZiBHb25kb3IsIEJvcm9taXIsIGhhcyBiZWVuIGEgc3RhbHdhcnQgdG93ZXIsIHdlIGhhdmUgcGxheWVkCglhbm90aGVyIHBhcnQuICBNYW55IGV2aWwgdGhpbmdzIHRoZXJlIGFyZSB0aGF0IHlvdXIgc3Ryb25nIHdhbGxzCglhbmQgYnJpZ2h0IHN3b3JkcyBkbyBub3Qgc3RheS4gIFlvdSBrbm93IGxpdHRsZSBvZiB0aGUgbGFuZHMKCWJleW9uZCB5b3VyIGJvdW5kcy4gIFBlYWNlIGFuZCBmcmVlZG9tLCBkbyB5b3Ugc2F5PyAgVGhlIE5vcnRoCgl3b3VsZCBoYXZlIGtub3duIHRoZW0gbGl0dGxlIGJ1dCBmb3IgdXMuICBGZWFyIHdvdWxkIGhhdmUKCWRlc3Ryb3llZCB0aGVtLiAgQnV0IHdoZW4gZGFyayB0aGluZ3MgY29tZSBmcm9tIHRoZSBob3VzZWxlc3MKCWhpbGxzLCBvciBjcmVlcCBmcm9tIHN1bmxlc3Mgd29vZHMsIHRoZXkgZmx5IGZyb20gdXMuICBXaGF0Cglyb2FkcyB3b3VsZCBhbnkgZGFyZSB0byB0cmVhZCwgd2hhdCBzYWZldHkgd291bGQgdGhlcmUgYmUgaW4KCXF1aWV0IGxhbmRzLCBvciBpbiB0aGUgaG9tZXMgb2Ygc2ltcGxlIG1lbiBhdCBuaWdodCwgaWYgdGhlCglEdW5lZGFpbiB3ZXJlIGFzbGVlcCwgb3Igd2VyZSBhbGwgZ29uZSBpbnRvIHRoZSBncmF2ZT8iCgkJWyBUaGUgRmVsbG93c2hpcCBvZiB0aGUgUmluZywgYnkgSi5SLlIuIFRvbGtpZW4gXQoJUmF0cyBhcmUgbG9uZy10YWlsZWQgcm9kZW50cy4gIFRoZXkgYXJlIGFnZ3Jlc3NpdmUsCglvbW5pdm9yb3VzLCBhbmQgYWRhcHRhYmxlLCBvZnRlbiBjYXJyeWluZyBkaXNlYXNlcy4KCQlbXQoKCSJUaGUgcmF0LCIgc2FpZCBPJ0JyaWVuLCBzdGlsbCBhZGRyZXNzaW5nIGhpcyBpbnZpc2libGUKCWF1ZGllbmNlLCAiYWx0aG91Z2ggYSByb2RlbnQsIGlzIGNhcm5pdm9yb3VzLiAgWW91IGFyZSBhd2FyZQoJb2YgdGhhdC4gIFlvdSB3aWxsIGhhdmUgaGVhcmQgb2YgdGhlIHRoaW5ncyB0aGF0IGhhcHBlbiBpbgoJdGhlIHBvb3IgcXVhcnRlcnMgb2YgdGhpcyB0b3duLiAgSW4gc29tZSBzdHJlZXRzIGEgd29tYW4gZGFyZQoJbm90IGxlYXZlIGhlciBiYWJ5IGFsb25lIGluIHRoZSBob3VzZSwgZXZlbiBmb3IgZml2ZSBtaW51dGVzLgoJVGhlIHJhdHMgYXJlIGNlcnRhaW4gdG8gYXR0YWNrIGl0LiAgV2l0aGluIHF1aXRlIGEgc21hbGwgdGltZQoJdGhleSB3aWxsIHN0cmlwIGl0IHRvIHRoZSBib25lcy4gIFRoZXkgYWxzbyBhdHRhY2sgc2ljayBvcgoJZHlpbmcgcGVvcGxlLiAgVGhleSBzaG93IGFzdG9uaXNoaW5nIGludGVsbGlnZW5jZSBpbiBrbm93aW5nCgl3aGVuIGEgaHVtYW4gYmVpbmcgaXMgaGVscGxlc3MuIgoJCVsgMTk4NCwgYnkgR2VvcmdlIE9yd2VsbCBdCglCdXQgdGhlIHJhdmVuLCBzaXR0aW5nIGxvbmVseSBvbiB0aGUgcGxhY2lkIGJ1c3QsIHNwb2tlIG9ubHkKCVRoYXQgb25lIHdvcmQsIGFzIGlmIGhpcyBzb3VsIGluIHRoYXQgb25lIHdvcmQgaGUgZGlkIG91dHBvdXIuCglOb3RoaW5nIGZ1cnRoZXIgdGhlbiBoZSB1dHRlcmVkIC0tIG5vdCBhIGZlYXRoZXIgdGhlbiBoZSBmbHV0dGVyZWQtLQoJVGlsbCBJIHNjYXJjZWx5IG1vcmUgdGhhbiBtdXR0ZXJlZCwgJ290aGVyIGZyaWVuZHMgaGF2ZSBmbG93biBiZWZvcmUtLQoJT24gdGhlIG1vcnJvdyAqaGUqIHdpbGwgbGVhdmUgbWUsIGFzIG15IGhvcGVzIGhhdmUgZmxvd24gYmVmb3JlLicKCQlUaGVuIHRoZSBiaXJkIHNhaWQsICdOZXZlcm1vcmUuJwoJCQkJWyBUaGUgUmF2ZW4sIGJ5IEVkZ2FyIEFsbGFuIFBvZSBdCglUaHJlZSBSaW5ncyBmb3IgdGhlIEVsdmVuLWtpbmdzIHVuZGVyIHRoZSBza3ksCglTZXZlbiBmb3IgdGhlIER3YXJmLWxvcmRzIGluIHRoZWlyIGhhbGxzIG9mIHN0b25lLAoJTmluZSBmb3IgTW9ydGFsIE1lbiBkb29tZWQgdG8gZGllLAoJT25lIGZvciB0aGUgRGFyayBMb3JkIG9uIGhpcyBkYXJrIHRocm9uZSwKCUluIHRoZSBMYW5kIG9mIE1vcmRvciB3aGVyZSB0aGUgU2hhZG93cyBsaWUuCglPbmUgUmluZyB0byBydWxlIHRoZW0gYWxsLCBPbmUgUmluZyB0byBmaW5kIHRoZW0sCglPbmUgUmluZyB0byBicmluZyB0aGVtIGFsbCBhbmQgaW4gdGhlIGRhcmtuZXNzIGJpbmQgdGhlbQoJSW4gdGhlIExhbmQgb2YgTW9yZG9yIHdoZXJlIHRoZSBTaGFkb3dzIGxpZS4KCQlbIFRoZSBGZWxsb3dzaGlwIG9mIHRoZSBSaW5nLCBieSBKLlIuUi4gVG9sa2llbiBdCgkiV2hlbiB0aW1lIGNhbWUgZm9yIHRoZSBzaGVwaGVyZHMgdG8gaG9sZCB0aGVpciBjdXN0b21hcnkKCWFzc2VtYmx5IGluIG9yZGVyIHRvIHByZXBhcmUgdGhlaXIgbW9udGhseSByZXBvcnQgdG8gdGhlIGtpbmcKCWFib3V0IHRoZSBzdGF0ZSBvZiB0aGUgZmxvY2tzLCBoZSBjYW1lIHRvbywgd2VhcmluZyB0aGlzIHJpbmcuCglXaGlsZSBoZSB3YXMgc2l0dGluZyB3aXRoIHRoZSBvdGhlcnMsIGl0IGNoYW5jZWQgdGhhdCBoZSBtb3ZlZAoJdGhlIGNvbGxldCBvZiB0aGUgcmluZyBhcm91bmQgdG93YXJkIGhpbXNlbGYgaW50byB0aGUgaW5zaWRlIG9mCgloaXMgaGFuZDsgaGF2aW5nIGRvbmUgdGhpcywgaGUgZGlzYXBwZWFyZWQgZnJvbSB0aGUgc2lnaHQgb2YKCXRob3NlIHdobyB3ZXJlIHNpdHRpbmcgYmVzaWRlIGhpbSwgYW5kIHRoZXkgZGlzY3Vzc2VkIG9mIGhpbSBhcwoJb2Ygc29tZW9uZSB3aG8gaGFkIGxlZnQuICBBbmQgaGUgd29uZGVyZWQgYW5kIG9uY2UgYWdhaW4gZmVlbGluZwoJZm9yIHRoZSByaW5nLCBoZSB0dXJuZWQgdGhlIGNvbGxldCBvdXR3YXJkcyBhbmQsIGJ5IHR1cm5pbmcgaXQsCglyZWFwcGVhcmVkLiAgUmVmbGVjdGluZyB1cG9uIHRoaXMsIGhlIHB1dCB0aGUgcmluZyB0byB0aGUgdGVzdAoJdG8gc2VlIGlmIGl0IGluZGVlZCBoYWQgc3VjaCBwb3dlciwgYW5kIGhlIGNhbWUgdG8gdGhpcwoJY29uY2x1c2lvbiB0aGF0LCBieSB0dXJuaW5nIHRoZSBjb2xsZXQgaW53YXJkcywgaGUgYmVjYW1lCglpbnZpc2libGUsIG91dHdhcmRzLCB2aXNpYmxlLiAgSGF2aW5nIHBlcmNlaXZlZCB0aGlzLCBoZSBhdAoJb25jZSBtYW5hZ2VkIGZvciBoaW1zZWxmIHRvIGJlY29tZSBvbmUgb2YgdGhlIGVudm95cyB0byB0aGUKCWtpbmc7IHVwb24gYXJyaXZhbCwgaGF2aW5nIHNlZHVjZWQgaGlzIHdpZmUsIHdpdGggaGVyIGhlbHAsCgloZSBsYWlkIGEgaGFuZCBvbiB0aGUga2luZywgbXVyZGVyZWQgaGltIGFuZCB0b29rIGhvbGQgb2YgdGhlCglsZWFkZXJzaGlwLiIKCQlbIFRoZSBSZXB1YmxpYywgYnkgUGxhdG8sIHRyYW5zbGF0ZWQgYnkgSmFtZXMgQWRhbSBdCglSb2JlcyBhcmUgdGhlIG9ubHkgZ2FybWVudHMsIGFwYXJ0IGZyb20gU2hpcnRzLCBldmVyIHRvIGhhdmUKCXNsZWV2ZXMuICBUaGV5IGhhdmUgdGhyZWUgdXNlczoKCTEuICBBcyB0aGUgb2ZmaWNpYWwgdW5pZm9ybSBvZiBQcmllc3RzLCBQcmllc3Rlc3NlcywgTW9ua3MsCglOdW5zIChzZWUgTnVubmVyeSksIGFuZCBXaXphcmRzLiAgVGhlIE9NVCBbIE9mZmljaWFsIE1hbmFnZW1lbnQKCVRlcm0gXSBwcmVzY3JpYmVkIGZvciB0aGUgUm9iZXMgb2YgUHJpZXN0cyBhbmQgTnVucyBpcyB0aGF0Cgl0aGV5IF9mYWxsIGluIHNldmVyZSBmb2xkc187IG9mIFByaWVzdGVzc2VzIHRoYXQgdGhleSBfZmxvYXRfOwoJYW5kIG9mIFdpemFyZHMgdGhhdCB0aGV5IF9zd2lybF8uICBZb3UgY2FuIHRodXMgc2VlIHdobyB5b3UKCWFyZSBkZWFsaW5nIHdpdGguCgkyLiAgRm9yIEtpbmdzLiAgVGhlIE9NVCBoZXJlIGlzIF9mYWxsaW5nIGluIHN0YXRlbHkgZm9sZHNfLgoJMy4gIEFzIHRoZSBnYXJiIG9mIERlc2VydCBOb21hZHMuICBbLi4uXQoJICAgIFsgVGhlIFRvdWdoIEd1aWRlIHRvIEZhbnRhc3lsYW5kLCBieSBEaWFuYSBXeW5uZSBKb25lcyBdCglCaWxibyBzYXcgdGhhdCB0aGUgbW9tZW50IGhhZCBjb21lIHdoZW4gaGUgbXVzdCBkbyBzb21ldGhpbmcuCglIZSBjb3VsZCBub3QgZ2V0IHVwIGF0IHRoZSBicnV0ZXMgYW5kIGhlIGhhZCBub3RoaW5nIHRvIHNob290Cgl3aXRoOyBidXQgbG9va2luZyBhYm91dCBoZSBzYXcgdGhhdCBpbiB0aGlzIHBsYWNlIHRoZXJlIHdlcmUKCW1hbnkgc3RvbmVzIGx5aW5nIGluIHdoYXQgYXBwZWFyZWQgdG8gYmUgYSBub3cgZHJ5IGxpdHRsZQoJd2F0ZXJjb3Vyc2UuICBCaWxibyB3YXMgYSBwcmV0dHkgZmFpciBzaG90IHdpdGggYSBzdG9uZSwgYW5kCglpdCBkaWQgbm90IHRha2UgaGltIGxvbmcgdG8gZmluZCBhIG5pY2Ugc21vb3RoIGVnZy1zaGFwZWQgb25lCgl0aGF0IGZpdHRlZCBoaXMgaGFuZCBjb3NpbHkuICBBcyBhIGJveSBoZSB1c2VkIHRvIHByYWN0aXNlCgl0aHJvd2luZyBzdG9uZXMgYXQgdGhpbmdzLCB1bnRpbCByYWJiaXRzIGFuZCBzcXVpcnJlbHMsIGFuZAoJZXZlbiBiaXJkcywgZ290IG91dCBvZiBoaXMgd2F5IGFzIHF1aWNrIGFzIGxpZ2h0bmluZyBpZiB0aGV5CglzYXcgaGltIHN0b29wOyBhbmQgZXZlbiBncm93bnVwIGhlIGhhZCBzdGlsbCBzcGVudCBhIGRlYWwgb2YKCWhpcyB0aW1lIGF0IHF1b2l0cywgZGFydC10aHJvd2luZywgc2hvb3RpbmcgYXQgdGhlIHdhbmQsCglib3dscywgbmluZXBpbnMgYW5kIG90aGVyIHF1aWV0IGdhbWVzIG9mIHRoZSBhaW1pbmcgYW5kCgl0aHJvd2luZyBzb3J0IC0gaW5kZWVkIGhlIGNvdWxkIGRvIGxvdHMgb2YgdGhpbmdzLCBiZXNpZGVzCglibG93aW5nIHNtb2tlLXJpbmdzLCBhc2tpbmcgcmlkZGxlcyBhbmQgY29va2luZywgdGhhdCBJCgloYXZlbid0IHRpbWUgdG8gdGVsbCB5b3UgYWJvdXQuICBUaGVyZSBpcyBubyB0aW1lIG5vdy4gIFdoaWxlCgloZSB3YXMgcGlja2luZyB1cCBzdG9uZXMsIHRoZSBzcGlkZXIgaGFkIHJlYWNoZWQgQm9tYnVyLCBhbmQKCXNvb24gaGUgd291bGQgaGF2ZSBiZWVuIGRlYWQuICBBdCB0aGF0IG1vbWVudCBCaWxibyB0aHJldy4KCVRoZSBzdG9uZSBzdHJ1Y2sgdGhlIHNwaWRlciBwbHVuayBvbiB0aGUgaGVhZCwgYW5kIGl0IGRyb3BwZWQKCXNlbnNlbGVzcyBvZmYgdGhlIHRyZWUsIGZsb3AgdG8gdGhlIGdyb3VuZCwgd2l0aCBhbGwgaXRzIGxlZ3MKCWN1cmxlZCB1cC4KCQlbIFRoZSBIb2JiaXQsIGJ5IEouUi5SLiBUb2xraWVuIF0KCUEgcm9jayBtb2xlIGlzIGEgbWVtYmVyIG9mIHRoZSByb2RlbnQgZmFtaWx5LiAgVGhleSBnZXQgdGhlaXIKCW5hbWUgZnJvbSB0aGVpciBhYmlsaXR5IHRvIHR1bm5lbCB0aHJvdWdoIHJvY2sgaW4gdGhlIHNhbWUKCWZhc2hpb24gdGhhdCBhIG1vbGUgdHVubmVscyB0aHJvdWdoIGVhcnRoLiAgVGhleSBhcmUga25vd24gdG8KCWVhdCBhbnl0aGluZyB0aGV5IGNvbWUgYWNyb3NzIGluIHRoZWlyIGRpZ2dpbmdzLCBhbHRob3VnaCBpdAoJaXMgc3RpbGwgdW5rbm93biBob3cgdGhleSBjb252ZXJ0IHNvbWUgb2YgdGhlc2UgdGhpbmdzIGludG8KCXNvbWV0aGluZyBvZiBudXRyaXRpb25hbCB2YWx1ZS4KCUEgZ25hd2luZyBtYW1tYWwgKG9yZGVyIF9Sb2RlbnRpYV8pIGhhdmluZyBpbiBlYWNoIGphdyB0d28KCShyYXJlbHkgZm91cikgaW5jaXNvcnMsIGdyb3dpbmcgY29udGludWFsbHkgZnJvbSBwZXJzaXN0ZW50CglwdWxwcywgYW5kIG5vIGNhbmluZSB0ZWV0aCwgYXMgYSBzcXVpcnJlbCwgYmVhdmVyLCBvciByYXQuCgkJWyBXZWJzdGVyJ3MgQ29tcHJlaGVuc2l2ZSBJbnRlcm5hdGlvbmFsIERpY3Rpb25hcnkKCQkgIG9mIHRoZSBFbmdsaXNoIExhbmd1YWdlIF0KCUkgdW5kZXJzdGFuZCB0aGUgYnVzaW5lc3MsIEkgaGVhciBpdDogdG8gaGF2ZSBhbiBvcGVuIGVhciwgYQoJcXVpY2sgZXllLCBhbmQgYSBuaW1ibGUgaGFuZCwgaXMgbmVjZXNzYXJ5IGZvciBhIGN1dC1wdXJzZTsgYQoJZ29vZCBub3NlIGlzIHJlcXVpc2l0ZSBhbHNvLCB0byBzbWVsbCBvdXQgd29yayBmb3IgdGhlIG90aGVyCglzZW5zZXMuICBJIHNlZSB0aGlzIGlzIHRoZSB0aW1lIHRoYXQgdGhlIHVuanVzdCBtYW4gZG90aAoJdGhyaXZlLiAgLi4uICBUaGUgcHJpbmNlIGhpbXNlbGYgaXMgYWJvdXQgYSBwaWVjZSBvZiBpbmlxdWl0eSwKCXN0ZWFsaW5nIGF3YXkgZnJvbSBoaXMgZmF0aGVyIHdpdGggaGlzIGNsb2cgYXQgaGlzIGhlZWxzOiAgaWYKCUkgdGhvdWdodCBpdCB3ZXJlIGEgcGllY2Ugb2YgaG9uZXN0eSB0byBhY3F1YWludCB0aGUga2luZwoJd2l0aGFsLCBJIHdvdWxkIG5vdCBkbyd0OiAgSSBob2xkIGl0IHRoZSBtb3JlIGtuYXZlcnkgdG8KCWNvbmNlYWwgaXQ7IGFuZCB0aGVyZWluIGFtIEkgY29uc3RhbnQgdG8gbXkgcHJvZmVzc2lvbi4KCQlbIEF1dG9seWN1cyB0aGUgUm9ndWUsIGZyb20gVGhlIFdpbnRlcidzIFRhbGUgYnkKCQkJV2lsbGlhbSBTaGFrZXNwZWFyZSBdCglCdXQgd2hlbiB0aGV5IHdlcmUgY29va2VkIHRoZXNlIHJvb3RzIHByb3ZlZCBnb29kIHRvIGVhdCwKCXNvbWV3aGF0IGxpa2UgYnJlYWQ7IGFuZCB0aGUgb3V0bGF3cyB3ZXJlIGdsYWQgb2YgdGhlbSwgZm9yCgl0aGV5IGhhZCBsb25nIGxhY2tlZCBicmVhZCBzYXZlIHdoZW4gdGhleSBjb3VsZCBzdGVhbCBpdC4KCSJXaWxkIEVsdmVzIGtub3cgdGhlbSBub3Q7IEdyZXktZWx2ZXMgaGF2ZSBub3QgZm91bmQgdGhlbTsKCXRoZSBwcm91ZCBvbmVzIGZyb20gb3ZlciB0aGUgU2VhIGFyZSB0b28gcHJvdWQgdG8gZGVsdmUsIgoJc2FpZCBNaW0uCgkKCSJXaGF0IGlzIHRoZWlyIG5hbWU/IiBzYWlkIFR1cmluLiBNaW0gbG9va2VkIGF0IGhpbSBzaWRlbG9uZy4KCSJUaGV5IGhhdmUgbm8gbmFtZSwgc2F2ZSBpbiB0aGUgRHdhcmYtdG9uZ3VlLCB3aGljaCB3ZSBkbyBub3QKCXRlYWNoLCIgaGUgc2FpZC4gIkFuZCB3ZSBub3QgdGVhY2ggTWVuIHRvIGZpbmQgdGhlbSwgZm9yIE1lbgoJYXJlIGdyZWVkeSBhbmQgdGhyaWZ0bGVzcywgYW5kIHdvdWxkIG5vdCBzcGFyZSB0aWxsIGFsbCB0aGUKCXBsYW50cyBoYWQgcGVyaXNoZWQ7IHdoZXJlYXMgbm93IHRoZXkgcGFzcyB0aGVtIGJ5IGFzIHRoZXkgZ28KCWJsdW5kZXJpbmcgaW4gdGhlIHdpbGQuIE5vIG1vcmUgd2lsbCB5b3UgbGVhcm4gb2YgbWU7IGJ1dCB5b3UKCW1heSBoYXZlIGVub3VnaCBvZiBteSBib3VudHksIGFzIGxvbmcgYXMgeW91IHNwZWFrIGZhaXIgYW5kCglkbyBub3Qgc3B5IG9yIHN0ZWFsLiIgVGhlbiBhZ2FpbiBoZSBsYXVnaGVkIGluIGhpcyB0aHJvYXQuCgkKCSJUaGV5IGFyZSBvZiBncmVhdCB3b3J0aC4iIGhlIHNhaWQuICJNb3JlIHRoYW4gZ29sZCBpbiB0aGUKCWh1bmdyeSB3aW50ZXIsIGZvciB0aGV5IG1heSBiZSBob2FyZGVkIGxpa2UgdGhlIG51dHMgb2YgYQoJc3F1aXJyZWwsIGFuZCBhbHJlYWR5IHdlIHdlcmUgYnVpbGRpbmcgb3VyIHN0b3JlIGZyb20gdGhlCglmaXJzdCB0aGF0IGFyZSByaXBlLiIKCQlbIFVuZmluaXNoZWQgVGFsZXMsIFBhcnQgMSwgYnkgSi5SLlIuIFRvbGtpZW4gXQoJUm9zaGkgaXMgYSBKYXBhbmVzZSB3b3JkLCBjb21tb24gaW4gWmVuIEJ1ZGRoaXNtLCBtZWFuaW5nICJvbGQiCgkocm8pIGFuZCAidGVhY2hlciIgKHNoaSkuICBSb3NoaSBjYW4gYmUgdXNlZCBhcyBhIHRlcm0gb2YKCXJlc3BlY3QsIGFzIGluIHRoZSBSaW56YWkgc2Nob29sOyBhcyBhIHNpbXBsZSByZWZlcmVuY2UgdG8KCWFjdHVhbCBhZ2UsIGFzIGluIHRoZSBTb3RvIHNjaG9vbDsgb3IgaXQgY2FuIG1lYW4gYSB0ZWFjaGVyIHdobwoJaGFzIHRyYW5zbWl0dGVkIGtub3dsZWRnZSB0bywgYW5kIHRodXMgImdpdmVuIGJpcnRoIiB0bywgYSBuZXcKCXRlYWNoZXIuCgkJWyBXaWtpcGVkaWEsIHRoZSBmcmVlIGVuY3ljbG9wZWRpYSBdCglUaGUgcm90aGUgKHByb25vdW5jZWQgcm90aC1BWSkgaXMgYSBtdXNrIG94LWxpa2UgY3JlYXR1cmUgd2l0aAoJYW4gYXZlcnNpb24gdG8gbGlnaHQuICBJdCBwcmVmZXJzIHRvIGxpdmUgdW5kZXJncm91bmQgbmVhcgoJbGljaGVuIGFuZCBtb3NzLgoJIidSb3lhbCBKZWxseSwnIiBoZSByZWFkIGFsb3VkLCAiJ211c3QgYmUgYSBzdWJzdGFuY2Ugb2YKCXRyZW1lbmRvdXMgbm91cmlzaGluZyBwb3dlciwgZm9yIG9uIHRoaXMgZGlldCBhbG9uZSwgdGhlCglob25leS1iZWUgbGFydmEgaW5jcmVhc2VzIGluIHdlaWdodCBmaWZ0ZWVuIGh1bmRyZWQgdGltZXMgaW4KCWZpdmUgZGF5cyEnIgoKCSJIb3cgbXVjaD8iCgoJIkZpZnRlZW4gaHVuZHJlZCB0aW1lcywgTWFiZWwuICBBbmQgeW91IGtub3cgd2hhdCB0aGF0IG1lYW5zCglpZiB5b3UgcHV0IGl0IGluIHRlcm1zIG9mIGEgaHVtYW4gYmVpbmc/ICBJdCBtZWFucywiIGhlIHNhaWQsCglsb3dlcmluZyBoaXMgdm9pY2UsIGxlYW5pbmcgZm9yd2FyZCwgZml4aW5nIGhlciB3aXRoIHRob3NlCglzbWFsbCBwYWxlIGV5ZXMsICJpdCBtZWFucyB0aGF0IGluIGZpdmUgZGF5cyBhIGJhYnkgd2VpZ2hpbmcKCXNldmVuIGFuZCBhIGhhbGYgcG91bmRzIHRvIHN0YXJ0IG9mZiB3aXRoIHdvdWxkIGluY3JlYXNlIGluCgl3ZWlnaHQgdG8gZml2ZSB0b25zISIKCQlbIFJveWFsIEplbGx5LCBieSBSb2FsZCBEYWhsIF0KCV9Db3J1bmR1bS5fICBNaW5lcmFsLCBhbHVtaW51bSBveGlkZSwgQWwyTzMuICBUaGUgY2xlYXIKCXZhcmlldGllcyBhcmUgdXNlZCBhcyBnZW1zIGFuZCB0aGUgb3BhcXVlIGFzIGFicmFzaXZlIG1hdGVyaWFscy4KCUNvcnVuZHVtIG9jY3VycyBpbiBjcnlzdGFscyBvZiB0aGUgaGV4YWdvbmFsIHN5c3RlbSBhbmQgaW4KCW1hc3Nlcy4gIEl0IGlzIHRyYW5zcGFyZW50IHRvIG9wYXF1ZSBhbmQgaGFzIGEgdml0cmVvdXMgdG8KCWFkYW1hbnRpbmUgbHVzdGVyLiAuLi4gVGhlIGNoaWVmIGNvcnVuZHVtIGdlbXMgYXJlIHRoZSBydWJ5CgkocmVkKSBhbmQgdGhlIHNhcHBoaXJlIChibHVlKS4KCQlbIFRoZSBDb2x1bWJpYSBFbmN5Y2xvcGVkaWEsIFNpeHRoIEVkaXRpb24gXQoJVGhlc2Ugc3RyYW5nZSBjcmVhdHVyZXMgbGl2ZSBvbiBhIGRpZXQgb2YgbWV0YWxzLiAgVGhleSBjYW4KCXR1cm4gYSBzdWl0IG9mIGFybW91ciBpbnRvIHNvIG11Y2ggdXNlbGVzcyBydXN0ZWQgc2NyYXAgaW4gbm8KCXRpbWUgYXQgYWxsLgoJVGhlc2UgZ3JvdW5kLWR3ZWxsaW5nIG1vbnN0ZXJzIGFyZSBrbm93biB0byBtYWtlIHNob3J0Cgl3b3JrIG91dCBvZiBkZWdyYWRpbmcgYWR2ZW50dXJlcnMnIGNvbWJhdCBlcXVpcG1lbnQuCglGbGFzaGVkIGFsbCB0aGVpciBzYWJyZXMgYmFyZSwKCUZsYXNoZWQgYXMgdGhleSB0dXJuZWQgaW4gYWlyLAoJU2FiJ3JpbmcgdGhlIGd1bm5lcnMgdGhlcmUsCglDaGFyZ2luZyBhbiBhcm15LCB3aGlsZQoJQWxsIHRoZSB3b3JsZCB3b25kZXJlZDoKCVBsdW5nZWQgaW4gdGhlIGJhdHRlcnkgc21va2UsCglSaWdodCB0aHJvdWdoIHRoZSBsaW5lIHRoZXkgYnJva2U7CglDb3NzYWNrIGFuZCBSdXNzaWFuCglSZWVsZWQgZnJvbSB0aGUgc2FicmUtc3Ryb2tlCglTaGF0dGVyZWQgYW5kIHN1bmRlcmVkLgoJVGhlbiB0aGV5IHJvZGUgYmFjaywgYnV0IG5vdC0tCglOb3QgdGhlIHNpeCBodW5kcmVkLgoJCVsgVGhlIENoYXJnZSBvZiB0aGUgTGlnaHQgQnJpZ2FkZSwKCQkgIGJ5IEFsZnJlZCwgTG9yZCBUZW5ueXNvbiBdCglUaGUgaG9yc2VtYW4gc2VydmVzIHRoZSBob3JzZSwKCVRoZSBuZWF0LWhlcmQgc2VydmVzIHRoZSBuZWF0LAoJVGhlIG1lcmNoYW50IHNlcnZlcyB0aGUgcHVyc2UsCglUaGUgZWF0ZXIgc2VydmVzIGhpcyBtZWF0OwoJJ1RpcyB0aGUgZGF5IG9mIHRoZSBjaGF0dGVsLAoJV2ViIHRvIHdlYXZlLCBhbmQgY29ybiB0byBncmluZCwKCVRoaW5ncyBhcmUgaW4gdGhlIHNhZGRsZSwKCUFuZCByaWRlIG1hbmtpbmQuCgkJWyBPZGUsIGJ5IFJhbHBoIFdhbGRvIEVtZXJzb24gXQoJSmFwYW5lc2UgcmljZSB3aW5lLgoJRm9yIGh1bmRyZWRzIG9mIHllYXJzLCBtYW55IHBlb3BsZSBiZWxpZXZlZCB0aGF0IHNhbGFtYW5kZXJzCgl3ZXJlIG1hZ2ljYWwuICBJbiBFbmdsYW5kIGluIHRoZSBNaWRkbGUgQWdlcywgcGVvcGxlIHRob3VnaHQKCXRoYXQgZmlyZSBjcmVhdGVkIHNhbGFtYW5kZXJzLiAgV2hlbiB0aGV5IHNldCBmaXJlIHRvIGRhbXAKCWxvZ3MsIGRvemVucyBvZiB0aGUgc2xpbXkgY3JlYXR1cmVzIHNjdXJyaWVkIG91dC4gIFRoZSB3b3JkCglzYWxhbWFuZGVyLCBpbiBmYWN0LCBjb21lcyBmcm9tIGEgR3JlZWsgd29yZCBtZWFuaW5nICJmaXJlCglhbmltYWwiLgoJCVsgU2FsYW1hbmRlcnMsIGJ5IENoZXJpZSBXaW5uZXIgXQoJQnkgdGhhdCB0aW1lLCBOYXJhaGFyYSBoYWQgYWxyZWFkeSBzbGlwcGVkIGhpcyBhcm0gZnJvbSB0aGUKCXNsZWV2ZSBvZiBoaXMgb3V0ZXIgcm9iZSwgZHJldyBvdXQgaGlzIHR3by1hbmQtYS1oYWxmLWZvb3QKCUZ1aml3YXJhIFRhZGFoaXJvIHN3b3JkLCBhbmQsIGJyYW5kaXNoaW5nIGl0IG92ZXIgaGlzIGhlYWQsCgliZWdhbiBiYXJyZWxpbmcgdG93YXJkIHRoZSBmb3JlaWduZXJzLiAgSW4gbGVzcyB0aGFuIGEgbWludXRlLAoJaGUgaGFkIGNoYXJnZWQgdXBvbiB0aGVtIGFuZCBjdXQgb25lIG9mIHRoZW0gdGhyb3VnaCB0aGUgdG9yc28uCglUaGUgbWFuIGZsZWQsIGNsdXRjaGluZyBoaXMgYnVsZ2luZyBndXRzLCBmaW5hbGx5IHRvIGZhbGwgZnJvbQoJaGlzIGhvcnNlIGF0IHRoZSBmb290IG9mIGEgcGluZSB0cmVlIGFib3V0IGEgdGhvdXNhbmQgeWFyZHMKCWF3YXkuICBLYWVkYSBUYWtlamkgZmluaXNoZWQgaGltIG9mZi4gIFRoZSBvdGhlciB0d28gRW5nbGlzaG1lbgoJd2VyZSBzZXZlcmVseSB3b3VuZGVkIGFzIHRoZXkgdHJpZWQgdG8gZmxlZS4gIE9ubHkgdGhlIHdvbWFuCgltYW5hZ2VkIHRvIGVzY2FwZSB2aXJ0dWFsbHkgdW5zY2F0aGVkLgoJCVsgVGhlIEZveC1ob3JzZSwgZnJvbSBEcnVuayBhcyBhIExvcmQsIGJ5IFJ5b3Rhcm8gU2hpYmEgXQoJSWxkZWZvbnNlIGxlZnQgdGhlIHRlcnJhY2UgYW5kIGFsbW9zdCBpbW1lZGlhdGVseSBzb3VuZHMKCW9mIGNvbnRlbnRpb24gY2FtZSBmcm9tIHRoZSBkaXJlY3Rpb24gb2YgdGhlIHdvcmstcm9vbS4KCUlsZGVmb25zZSBwcmVzZW50bHkgcmV0dXJuZWQgdG8gdGhlIHRlcnJhY2UsIGZvbGxvd2VkIGJ5CglPc2hlcmwgYW5kIGEgc2Vjb25kIHNhbmRlc3RpbiB1c2luZyB0aGUgZ3Vpc2Ugb2YgYSBnYXVudCBibHVlCgliaXJkLWxpa2UgY3JlYXR1cmUsIHNvbWUgc2l4IGZlZXQgaW4gaGVpZ2h0LgoKCUlsZGVmb25zZSBzcG9rZSBpbiBzY2F0aGluZyB0b25lczogICJCZWhvbGQgdGhlc2UgdHdvCgljcmVhdHVyZXMhICBUaGV5IGNhbiByb2FtIHRoZSBjaHJvbm9wbGV4IGFzIGVhc2lseSBhcyB5b3UKCW9yIEkgY2FuIHdhbGsgYXJvdW5kIHRoZSB0YWJsZTsgeWV0IG5laXRoZXIgaGFzIHRoZSB3aXQgdG8KCWFubm91bmNlIGhpcyBwcmVzZW5jZSB1cG9uIGFycml2YWwuICBJIGZvdW5kIE9zaGVybCBhc2xlZXAKCWluIGhpcyBmdWxndXJpdGUgYW5kIFNhcnNlbSBwZXJjaGVkIGluIHRoZSByYWZ0ZXJzLiIKCQlbLi4uXQoJIk5vIG1hdHRlciwiIHNhaWQgUmhpYWx0by4gICJIZSBoYXMgYnJvdWdodCBTYXJzZW0sIGFuZCB0aGlzCgl3YXMgaGlzIHJlcXVpcmVtZW50LiAgSW4gdGhlIG1haW4sIE9zaGVybCwgeW91IGhhdmUgZG9uZSB3ZWxsISIKCgkiQW5kIG15IGluZGVudHVyZSBwb2ludD8iCgoJIk11Y2ggZGVwZW5kcyB1cG9uIFNhcnNlbSdzIHRlc3RpbW9ueS4gIFNhcnNlbSwgd2lsbCB5b3Ugc2l0PyIKCgkiSW4gdGhpcyBndWlzZSwgSSBmaW5kIGl0IG1vcmUgY29udmVuaWVudCB0byBzdGFuZC4iCgoJIlRoZW4gd2h5IG5vdCBhbHRlciB0byBodW1hbiBmb3JtIGFuZCBqb2luIHVzIGluIGNvbWZvcnQgYXQKCXRoZSB0YWJsZT8iCgoJIlRoYXQgaXMgYSBnb29kIGlkZWEuIiAgU2Fyc2VtIGJlY2FtZSBhIG5ha2VkIHlvdW5nIGVwaWNlbmUKCWluIGFuIGludGVndW1lbnQgb2YgbGF2ZW5kZXIgc2NhbGVzIHdpdGggcHVmZnMgb2YgcHVycGxlIGhhaXIKCWxpa2UgcG9tLXBvbXMgZ3Jvd2luZyBkb3duIGhpcyBiYWNrLiAgSGUgc2VhdGVkIGhpbXNlbGYgYXQKCXRoZSB0YWJsZSBidXQgZGVjbGluZWQgcmVmcmVzaG1lbnQuICAiVGhpcyBodW1hbiBzZW1ibGFuY2UsCgl0aG91Z2ggdHlwaWNhbCwgaXMgYWZ0ZXIgYWxsLCBvbmx5IGEgZ3Vpc2UuICBJZiBJIHdlcmUgdG8gcHV0CglzdWNoIHRoaW5ncyBpbnNpZGUgbXlzZWxmLCBJIG1pZ2h0IHdlbGwgYmVjb21lIHVuZWFzeS4iCgkJWyBSaGlhbHRvIHRoZSBNYXJ2ZWxsb3VzLCBieSBKYWNrIFZhbmNlIF0KCVRoZSBuYW1lIF9TYXNxdWF0Y2hfIGRvZXNuJ3QgcmVhbGx5IGJlY29tZSBpbXBvcnRhbnQgaW4gQ2FuYWRhCgl1bnRpbCB0aGUgMTkzMHMsIHdoZW4gaXQgYXBwZWFyZWQgaW4gdGhlIHdvcmtzIG9mIEouIFcuIEJ1cm5zLAoJYSBCcml0aXNoIENvbHVtYmlhbiB3cml0ZXIgd2hvIHVzZWQgYSBncmVhdCBkZWFsIG9mIEluZGlhbgoJbG9yZSBpbiBoaXMgc3Rvcmllcy4gIEJ1cm4ncyBTYXNxdWF0Y2ggd2FzIGEgZ2lhbnQgSW5kaWFuIHdobwoJbGl2ZWQgaW4gdGhlIHdpbGRlcm5lc3MuICBIZSB3YXMgaGFpcnkgb25seSBpbiB0aGUgc2Vuc2UgdGhhdAoJaGUgaGFkIGxvbmcgaGFpciBvbiBoaXMgaGVhZCwgYW5kIHdoaWxlIHRoaXMgU2FzcXVhdGNoIGxpdmVkIGEKCXdpbGQgYW5kIHByaW1pdGl2ZSBsaWZlLCBoZSB3YXMgZnVsbHkgaHVtYW4uCglCdXJucydzIGNoYXJhY3RlciBwcm92ZWQgdG8gYmUgcXVpdGUgcG9wdWxhci4gIFRoZXJlIHdhcyBhCglTYXNxdWF0Y2ggSW5uIG5lYXIgdGhlIHRvd24gb2YgSGFycmlzb24sIEJyaXRpc2ggQ29sdW1iaWEsIGFuZAoJSGFycmlzb24gZXZlbiBoYWQgYSBsb2NhbCBjZWxlYnJhdGlvbiBjYWxsZWQgIlNhc3F1YXRjaCBEYXlzLiIKCVRoZSBjZWxlYnJhdGlvbiB3aGljaCBoYWQgYmVlbiBkb3JtYW50IGZvciB5ZWFycyB3YXMgcmV2aXZlZAoJYXMgcGFydCBvZiBCcml0aXNoIENvbHVtYmlhJ3MgY2VudGVubmlhbCwgYW5kIG9uZSBvZiB0aGUKCWV2ZW50cyB3YXMgdG8gYmUgYSBTYXNxdWF0Y2ggaHVudC4gIFRoZSBodW50IG5ldmVyIHRvb2sgcGxhY2UsCglwZXJoYXBzIGl0IHdhcyBuZXZlciBzdXBwb3NlZCB0bywgYnV0IHRoZSBwdWJsaWNpdHkgYWJvdXQgaXQKCWRpZCBicmluZyBvdXQgYSBudW1iZXIgb2YgcGVvcGxlIHdobyBzYWlkIHRoZXkgaGFkIGVuY291bnRlcmVkCglhIFNhc3F1YXRjaCAtLSBub3QgQnVybnMncyBnaWFudCBJbmRpYW4sIGJ1dCB0aGUgaGFpcnkgYXBlbGlrZQoJY3JlYXR1cmUgdGhhdCB3ZSBoYXZlIGFsbCBjb21lIHRvIGtub3cuCgkJWyBUaGUgRW5jeWNsb3BlZGlhIG9mIE1vbnN0ZXJzLCBieSBEYW5pZWwgQ29oZW4gXQoJQSBzY2FscGVsIGlzIGEgdmVyeSBzaGFycCBrbmlmZSB1c2VkIGZvciBzdXJnZXJ5IC4uLiBNZXJlbHkKCXRvdWNoaW5nIGEgbWVkaWNhbCBzY2FscGVsIHdpdGggYmFyZSBoYW5kcyB0byB0ZXN0IGl0IHdpbGwKCWN1dCB0aHJvdWdoIHRoZSBza2luLiAuLi4gTWVkaWNhbCBzY2FscGVsIGJsYWRlcyBhcmUgZ3JhZHVhbGx5CgljdXJ2ZWQgZm9yIGdyZWF0ZXIgcHJlY2lzaW9uIHdoZW4gY3V0dGluZyB0aHJvdWdoIHRpc3N1ZS4KCQlbIFdpa2lwZWRpYSwgdGhlIGZyZWUgZW5jeWNsb3BlZGlhIF0KCVRoaXMgbWFjZSB3YXMgY3JlYXRlZCBhZW9ucyBhZ28gaW4gc29tZSB1bmtub3duIGNhdmUsCglhbmQgaGFzIGJlZW4gcGFzc2VkIGRvd24gZnJvbSBnZW5lcmF0aW9uIHRvIGdlbmVyYXRpb24gb2YKCWNhdmUgZHdlbGxlcnMuICBJdCBpcyBhIHZlcnkgbWlnaHR5IG1hY2UgaW5kZWVkLCBhbmQgaW4KCWFkZGl0aW9uIHdpbGwgcHJvdGVjdCBhbnlvbmUgd2hvIHdpZWxkcyBpdCBmcm9tIG1hZ2ljCgltaXNzaWxlIGF0dGFja3MuICBXaGVuIGludm9rZWQsIGl0IGNhdXNlcyBjb25mbGljdCBpbiB0aGUKCWFyZWEgYXJvdW5kIGl0LgoJT2gsIGhvdyBoYW5kc29tZSwgaG93IG5vYmxlIHdhcyB0aGUgVml6aWVyIEFsaSBUZWJlbGluLAoJbXkgZmF0aGVyLCBhcyBoZSBzdG9vZCB0aGVyZSBpbiB0aGUgbWlkc3Qgb2YgdGhlIHNob3QsIGhpcwoJc2NpbWl0YXIgaW4gaGlzIGhhbmQsIGhpcyBmYWNlIGJsYWNrIHdpdGggcG93ZGVyISAgSG93IGhpcwoJZW5lbWllcyBmbGVkIGJlZm9yZSBoaW0hCgkJWyBUaGUgQ291bnQgb2YgTW9udGUgQ3Jpc3RvLCBieSBBbGV4YW5kcmUgRHVtYXMgXQoJQSBzdWItc3BlY2llcyBvZiB0aGUgc3BpZGVyIChfU2NvcnBpb25pZGFlXyksIHRoZSBzY29ycGlvbgoJZGlzdGluZ3Vpc2hlcyBpdHNlbGYgZnJvbSB0aGVtIGJ5IGhhdmluZyBhIGxvd2VyIGJvZHkgdGhhdAoJZW5kcyBpbiBhIGxvbmcsIGpvaW50ZWQgdGFpbCB0YXBlcmluZyB0byBhIHBvaXNvbm91cyBzdGluZ2VyLgoJVGhleSBoYXZlIGVpZ2h0IGxlZ3MgYW5kIHBpbmNlcnMuCgkJWyBWYW4gRGFsZSdzIEdyb290IFdvb3JkZW5ib2VrIGRlciBOZWRlcmxhbmRzZSBUYWFsIF0KCVNpbmNlIGVhcmx5IHRpbWVzLCB0aGUgU2NvcnBpb24gaGFzIHJlcHJlc2VudGVkIGRlYXRoLCBkYXJrbmVzcywKCWFuZCBldmlsLiAgU2NvcnBpdXMgaXMgdGhlIHJlcHV0ZWQgc2xheWVyIG9mIE9yaW9uIHRoZSBIdW50ZXIuCglbLi4uXSAgVGhlIGdvZHMgcHV0IGJvdGggc2NvcnBpb24gYW5kIGh1bnRlciBhbW9uZyB0aGUgc3RhcnMsIGJ1dAoJb24gb3Bwb3NpdGUgc2lkZXMgb2YgdGhlIHNreSBzbyB0aGV5IHdvdWxkIG5ldmVyIGZpZ2h0IGFnYWluLgoJQXMgU2NvcnBpdXMgcmlzZXMgaW4gdGhlIGVhc3QsIE9yaW9uIHNldHMgaW4gdGhlIHdlc3QuCgkJWyAzNjUgU3RhcnJ5IE5pZ2h0cywgYnkgQ2hldCBSYXltbyBdCglBbmQgSSB3YXMgZ2F6aW5nIG9uIHRoZSBzdXJnZXMgcHJvbmUsCglXaXRoIG1hbnkgYSBzY2FsZGluZyB0ZWFyIGFuZCBtYW55IGEgZ3JvYW4sCglXaGVuIGF0IG15IGZlZXQgZW1lcmcnZCBhbiBvbGQgbWFuJ3MgaGFuZCwKCUdyYXNwaW5nIHRoaXMgc2Nyb2xsLCBhbmQgdGhpcyBzYW1lIHNsZW5kZXIgd2FuZC4KCUkga25lbHQgd2l0aCBwYWluLS1yZWFjaGVkIG91dCBteSBoYW5kLS1oYWQgZ3Jhc3AnZAoJVGhvc2UgdHJlYXN1cmVzLS10b3VjaCdkIHRoZSBrbnVja2xlcy0tdGhleSB1bmNsYXNwJ2QtLQoJSSBjYXVnaHQgYSBmaW5nZXI6IGJ1dCB0aGUgZG93bndhcmQgd2VpZ2h0CglPJ2VycG93ZXJlZCBtZS0taXQgc2Fuay4gVGhlbiAnZ2FuIGFiYXRlCglUaGUgc3Rvcm0sIGFuZCB0aHJvdWdoIGNoaWxsIGFndWlzaCBnbG9vbSBvdXRidXJzdAoJVGhlIGNvbWZvcnRhYmxlIHN1bi4gSSB3YXMgYXRoaXJzdAoJVG8gc2VhcmNoIHRoZSBib29rLCBhbmQgaW4gdGhlIHdhcm1pbmcgYWlyCglQYXJ0ZWQgaXRzIGRyaXBwaW5nIGxlYXZlcyB3aXRoIGVhZ2VyIGNhcmUuCglTdHJhbmdlIG1hdHRlcnMgZGlkIGl0IHRyZWF0IG9mLCBhbmQgZHJldyBvbgoJTXkgc291bCBwYWdlIGFmdGVyIHBhZ2UsIHRpbGwgd2VsbC1uaWdoIHdvbgoJSW50byBmb3JnZXRmdWxuZXNzOyB3aGVuLCBzdHVwZWZpZWQsCglJIHJlYWQgdGhlc2Ugd29yZHMsIGFuZCByZWFkIGFnYWluLCBhbmQgdHJpZWQKCU15IGV5ZXMgYWdhaW5zdCB0aGUgaGVhdmVucywgYW5kIHJlYWQgYWdhaW4uCgkJWyBFbmR5bWlvbiwgYnkgSm9obiBLZWF0cyBdCglUaGUgYW5jaWVudCBFZ3lwdGlhbiBnb2Qgb2YgY2hhb3MgKFNldCksIHRoZSBlbWJvZGltZW50IG9mCglob3N0aWxpdHkgYW5kIGV2ZW4gb2Ygb3V0cmlnaHQgZXZpbC4gIEhlIGlzIGFsc28gYSBnb2Qgb2Ygd2FyLAoJZGVzZXJ0cywgc3Rvcm1zLCBhbmQgZm9yZWlnbiBsYW5kcy4gLi4uIEluIHRoZSBCb29rIG9mIHRoZQoJRGVhZCwgU2V0aCBpcyBjYWxsZWQgIkxvcmQgb2YgdGhlIE5vcnRoZXJuIFNreSIgYW5kIGlzIGhlbGQKCXJlc3BvbnNpYmxlIGZvciBzdG9ybXMgYW5kIGNsb3VkeSB3ZWF0aGVyLiAuLi4gU2V0aCB3YXMKCXBvcnRyYXllZCBhcyBhIG1hbiB3aXRoIHRoZSBoZWFkIG9mIHVuZGV0ZXJtaW5hYmxlIG9yaWdpbiwKCWFsdGhvdWdoIHNvbWUgc2VlIGluIGl0IHRoZSBoZWFkIG9mIGFuIGFhcmR2YXJrLiAgSGUgaGFkIGEKCWN1cnZlZCBzbm91dCwgZXJlY3Qgc3F1YXJlLXRpcHBlZCBlYXJzIGFuZCBhIGxvbmcgZm9ya2VkIHRhaWwuCglIZSB3YXMgc29tZXRpbWVzIGVudGlyZWx5IGluIGFuaW1hbCBmb3JtIHdpdGggdGhlIGJvZHkgc2ltaWxhcgoJdG8gdGhhdCBvZiBhIGdyZXlob3VuZC4gIEFuaW1hbHMgc2FjcmVkIHRvIHRoaXMgZ29kIHdlcmUgdGhlCglkb2csIHRoZSBqYWNrYWwsIHRoZSBnYXplbGxlLCB0aGUgZG9ua2V5LCB0aGUgY3JvY29kaWxlLCB0aGUKCWhpcHBvcG90YW11cywgYW5kIHRoZSBwaWcuCgkJWyBFbmN5Y2xvcGVkaWEgTXl0aGljYSwgZWQuIE0uRi4gTGluZGVtYW5zIF0KCVNoYWRlcyBhcmUgdW5kZWFkIGNyZWF0dXJlcy4gIFRoZXkgZGlmZmVyIGZyb20gem9tYmllcyBpbgoJdGhhdCBhIHpvbWJpZSBpcyBhbiB1bmRlYWQgYW5pbWF0aW9uIG9mIGEgY29ycHNlLCB3aGlsZSBhCglzaGFkZSBpcyBhbiB1bmRlYWQgY3JlYXR1cmUgbWFnaWNhbGx5IGNyZWF0ZWQgYnkgdGhlIHVzZQoJb2YgYmxhY2sgbWFnaWMuCglNYWtpbmcgaGlzIHF1YXJ0ZXJzIGluIHRoZSBDYXZlcyBvZiB0aGUgQW5jZXN0b3JzLCBTaGFtYW4KCUthcm5vdiB1bmNlYXNpbmdseSB0cmllcyB0byBzaGllbGQgaGlzIG5lYW5kZXJ0aGFsIHBlb3BsZQoJZnJvbSBUaWFtYXQncyBtaW5pb25zJyBoYXJhc3NtZW50cy4KCVRoZSBDaGluZXNlIGdvZCBvZiBNb3VudGFpbnMgYW5kIFNlYXMsIGFsc28gdGhlIG5hbWUgb2YgYW4KCW9sZCBib29rIChhbHNvIFNoYW4gSGFpIFRqaW5nKSwgdGhlIGJvb2sgb2YgbW91bnRhaW5zIGFuZAoJc2VhcyAtIHdoaWNoIGRlYWxzIHdpdGggdGhlIG1vbnN0ZXIgS3VuZyBLdW5nIHRyeWluZyB0bwoJc2VpemUgcG93ZXIgZnJvbSBZYW8sIHRoZSBmb3VydGggZW1wZXJvci4KCQlbIFNwZWN0cnVtIEF0bGFzIHZhbiBkZSBNeXRob2xvZ2llIF0KCUFzIHRoZSBzaGFyayBtb3ZlZCwgaXRzIGRhcmsgdG9wIHJlZmxlY3RlZCB2aXJ0dWFsbHkgbm8KCWxpZ2h0LiAgVGhlIGRlbnRpY2xlcyBvbiBpdHMgc2tpbiBtdXRlZCB0aGUgd2hvb3NoIG9mIGl0cwoJbW92ZW1lbnRzIGFzIHRoZSBzaGFyayByb3NlLCBkcml2ZW4gYnkgdGhlIHBvd2VyIG9mIHRoZQoJZ3JlYXQgdGFpbCBzd2VlcGluZyBmcm9tIHNpZGUgdG8gc2lkZSwgbGlrZSBhIHNjeXRoZS4KCVRoZSBmaXNoIGV4cGxvZGVkIHVwd2FyZC4KCUNoYXJsZXMgQnJ1ZGVyIGZlbHQgYSBzbGlnaHQgdmFjdXVtIHR1ZyBpbiB0aGUgbW90aW9uIG9mCgl0aGUgc2VhLCBub3RlZCBpdCBhcyBhIHBhc3NpbmcgY3VycmVudCwgdGhlIHB1bGwgb2YgYSB3YXZlLAoJdGhlIHRpY2tsZSBvZiB1bmRlcnRvdy4gIEhlIGNvdWxkIG5vdCBoYXZlIGhlYXJkIHRoZSBmYWludAoJc3Vja2luZyBydXNoIG9mIHdhdGVyIG5vdCBmYXIgYmVuZWF0aCBoaW0uICBIZSBjb3VsZG4ndAoJaGF2ZSBzZWVuIG9yIGhlYXJkIHdoYXQgd2FzIGh1cnRsaW5nIGZyb20gdGhlIG11cmsgYXQKCWFzdG9uaXNoaW5nIHNwZWVkLCBqYXdzIHVuaGluZ2luZywgd2lkZW5pbmcsIGZvciB0aGUKCWVub3Jtb3VzIGZpcnN0IGJpdGUuICBJdCB3YXMgdGhlIGNsYXNzaWMgYXR0YWNrCgl0aGF0IG5vIG90aGVyIGNyZWF0dXJlIGluIG5hdHVyZSBjb3VsZCBtYWtlIC0tIGEgYm9tYiBmcm9tCgl0aGUgZGVwdGhzLgoJCVsgQ2xvc2UgdG8gU2hvcmUsIGJ5IE1pY2hhZWwgQ2FwdXp6byBdCglBIEphcGFuZXNlIHN0YWJiaW5nIGtuaWZlLgoJVGhlcmUgaGF2ZSBiZWVuIHRocmVlIGdlbmVyYWwgdGhlb3JpZXMgcHV0IGZvcndhcmQgdG8gZXhwbGFpbgoJdGhlIHBoZW5vbWVub24gb2YgdGhlIHdhbmRlcmluZyBzaG9wcyBvciwgYXMgdGhleSBhcmUKCWdlbmVyaWNhbGx5IGtub3duLCBfdGFiZXJuYWUgdmFnYW50ZXMuXwoJVGhlIGZpcnN0IHBvc3R1bGF0ZXMgdGhhdCBtYW55IHRob3VzYW5kcyBvZiB5ZWFycyBhZ28gdGhlcmUKCWV2b2x2ZWQgc29tZXdoZXJlIGluIHRoZSBtdWx0aXZlcnNlIGEgcmFjZSB3aG9zZSBzaW5nbGUgdGFsZW50Cgl3YXMgdG8gYnV5IGNoZWFwIGFuZCBzZWxsIGRlYXIuICBTb29uIHRoZXkgY29udHJvbGxlZCBhIHZhc3QKCWdhbGFjdGljIGVtcGlyZSBvciwgYXMgdGhleSBwdXQgaXQsIEVtcG9yaXVtLCBhbmQgdGhlIG1vcmUKCWFkdmFuY2VkIG1lbWJlcnMgb2YgdGhlIHNwZWNpZXMgZm91bmQgYSB3YXkgdG8gZXF1aXAgdGhlaXIgdmVyeQoJc2hvcHMgd2l0aCB1bmlxdWUgcHJvcHVsc2lvbiB1bml0cyB0aGF0IGNvdWxkIGJyZWFrIHRoZSBkYXJrCgl3YWxscyBvZiBzcGFjZSBpdHNlbGYgYW5kIG9wZW4gdXAgdmFzdCBuZXcgbWFya2V0cy4gIEFuZCBsb25nCglhZnRlciB0aGUgd29ybGRzIG9mIHRoZSBFbXBvcml1bSBwZXJpc2hlZCBpbiB0aGUgaGVhdCBkZWF0aCBvZgoJdGhlaXIgcGFydGljdWxhciB1bml2ZXJzZSwgYWZ0ZXIgb25lIGxhc3QgZGVmaWFudCBmaXJlIHNhbGUsCgl0aGUgd2FuZGVyaW5nIHN0YXJzaG9wcyBzdGlsbCBwbHkgdGhlaXIgdHJhZGUsIGVhdGluZyB0aGVpciB3YXkKCXRocm91Z2ggdGhlIHBhZ2VzIG9mIHNwYWNldGltZSBsaWtlIGEgd29ybSB0aHJvdWdoIGEgdGhyZWUtCgl2b2x1bWUgbm92ZWwuCglUaGUgc2Vjb25kIGlzIHRoYXQgdGhleSBhcmUgdGhlIGNyZWF0aW9uIG9mIGEgc3ltcGF0aGV0aWMgRmF0ZSwKCWNoYXJnZWQgd2l0aCB0aGUgcm9sZSBvZiBzdXBwbHlpbmcgZXhhY3RseSB0aGUgcmlnaHQgdGhpbmcKCWF0IHRoZSByaWdodCB0aW1lLgoJVGhlIHRoaXJkIGlzIHRoYXQgdGhleSBhcmUgc2ltcGx5IGEgdmVyeSBjbGV2ZXIgd2F5IG9mIGdldHRpbmcKCWFyb3VuZCB0aGUgdmFyaW91cyBTdW5kYXkgQ2xvc2luZyBhY3RzLgoJQWxsIHRoZXNlIHRoZW9yaWVzLCBkaXZlcnNlIGFzIHRoZXkgYXJlLCBoYXZlIHR3byB0aGluZ3MgaW4KCWNvbW1vbi4gIFRoZXkgZXhwbGFpbiB0aGUgb2JzZXJ2ZWQgZmFjdHMsIGFuZCB0aGV5IGFyZQoJY29tcGxldGVseSBhbmQgdXR0ZXJseSB3cm9uZy4KCQlbIFRoZSBMaWdodCBGYW50YXN0aWMsIGJ5IFRlcnJ5IFByYXRjaGV0dCBdCglXaXRoIGEgc2luZ2xlLCBzYXZhZ2UgdGhydXN0IG9mIGhlciBzcGVhciwgdGhlIHdhcnJpb3Itd29tYW4KCWltcGFsZWQgdGhlIGZ1bmd1cywgc2lsZW5jaW5nIGl0LiAgSG93ZXZlciwgaXQgd2FzIHRvbyBsYXRlOgoJdGhlIGFsYXJtIGhhZCBiZWVuIHJhaXNlZFsuLi5dCglTdWRkZW5seSwgYSBsYXJnZSwgZGFyayBzaGFwZSByb3NlIGZyb20gdGhlIGFieXNzIGJlZm9yZSB0aGVtLAoJaXRzIGZldGlkIGJ1bGsgbG9vbWluZyBvdmVyaGVhZC4uLiBUaGUgbW9uc3RlciB3YXMgc29tZSBraW5kIG9mCglncmVhdCBkYXJrIHdvcm0sIGJ1dCB0aGF0IHdhcyBhYm91dCBhbGwgdGhleSB3ZXJlIHN1cmUgb2YuCgkJWyBUaGUgQWR2ZW50dXJlcnMsIEVwaWMgSVYsIGJ5IFRob21hcyBBLiBNaWxsZXIgXQoJWW91IGtub3csIHRoYXQncyB3aGF0IEkgaGF0ZSBtb3N0IGFib3V0IGZpZ2h0aW5nIGFnYWluc3QgbWFnaWM6Cgl5b3UgbmV2ZXIga25vdyB3aGF0IHRoZXkncmUgdHJ5aW5nIHRvIGRvIHRvIHlvdSB1bnRpbCBpdCBoaXRzLgoJVGhlIHNvcmNlcmVzcyBrbmV3IHdoYXQgaGl0IGhlciwgaG93ZXZlci4gIFR3byBvZiB0aGUgc2h1cmlrZW4KCWdvdCBwYXN0IHdoYXRldmVyIGRlZmVuc2VzIHNoZSBoYWQuICBPbmUgY2F1Z2h0IGhlciBqdXN0IGJlbG93Cgl0aGUgdGhyb2F0LCB0aGUgb3RoZXIgaW4gdGhlIG1pZGRsZSBvZiBoZXIgY2hlc3QuICBJdCB3b3VsZG4ndAoJa2lsbCBoZXIsIGJ1dCBzaGUgd291bGRuJ3QgYmUgZmlnaHRpbmcgYW55b25lIGZvciBhIHdoaWxlLgoJCVsgSmhlcmVnLCBieSBTdGV2ZW4gQnJ1c3QgXQoJQSBza2VsZXRvbiBpcyBhIG1hZ2ljYWxseSBhbmltYXRlZCB1bmRlYWQgY3JlYXR1cmUuICBVbmxpa2UKCXNoYWRlcywgb25seSBhIGh1bWFub2lkIGNyZWF0dXJlIGNhbiBiZSB1c2VkIHRvIGNyZWF0ZSBhCglza2VsZXRvbi4gIE5vIG9uZSBrbm93cyB3aHkgdGhpcyBpcyB0cnVlLCBidXQgaXQgaGFzIGJlY29tZQoJYW4gYWNjZXB0ZWQgZmFjdCBhbW9uZ3N0IHRoZSBwcmFjdGl0aW9uZXJzIG9mIHRoZSBibGFjayBhcnRzLgoJIlRoYXQgZG9nIGJlbG9uZ2VkIHRvIGEgc2V0dGxlciB3aG8gdHJpZWQgdG8gYnVpbGQgaGlzIGNhYmluCglvbiB0aGUgYmFuayBvZiB0aGUgcml2ZXIgYSBmZXcgbWlsZXMgc291dGggb2YgdGhlIGZvcnQsIgoJZ3J1bnRlZCBDb25hbi4gLi4uICAiV2UgdG9vayBoaW0gdG8gdGhlIGZvcnQgYW5kIGRyZXNzZWQgaGlzCgl3b3VuZHMsIGJ1dCBhZnRlciBoZSByZWNvdmVyZWQgaGUgdG9vayB0byB0aGUgd29vZHMgYW5kIHR1cm5lZAoJd2lsZC4gIC0tIFdoYXQgbm93LCBTbGFzaGVyLCBhcmUgeW91IGh1bnRpbmcgdGhlIG1lbiB3aG8KCWtpbGxlZCB5b3VyIG1hc3Rlcj8iIC4uLiAgIkxldCBoaW0gY29tZSwiIG11dHRlcmVkIENvbmFuLgoJIkhlIGNhbiBzbWVsbCB0aGUgZGV2aWxzIGJlZm9yZSB3ZSBjYW4gc2VlIHRoZW0uIiAuLi4KCVNsYXNoZXIgY2xlYXJlZCB0aGUgdGltYmVycyB3aXRoIGEgYm91bmQgYW5kIGxlYXBlZCBpbnRvIHRoZQoJYnVzaGVzLiAgVGhleSB3ZXJlIHZpb2xlbnRseSBzaGFrZW4gYW5kIHRoZW4gdGhlIGRvZyBzbHVuawoJYmFjayB0byBCYWx0aHVzJyBzaWRlLCBoaXMgamF3cyBjcmltc29uLiAuLi4gICJIZSB3YXMgYSBtYW4sIgoJc2FpZCBDb25hbi4gICJJIGRyaW5rIHRvIGhpcyBzaGFkZSwgYW5kIHRvIHRoZSBzaGFkZSBvZiB0aGUKCWRvZywgd2hvIGtuZXcgbm8gZmVhci4iICBIZSBxdWFmZmVkIHBhcnQgb2YgdGhlIHdpbmUsIHRoZW4KCWVtcHRpZWQgdGhlIHJlc3QgdXBvbiB0aGUgZmxvb3IsIHdpdGggYSBjdXJpb3VzIGhlYXRoZW4KCWdlc3R1cmUsIGFuZCBzbWFzaGVkIHRoZSBnb2JsZXQuICAiVGhlIGhlYWRzIG9mIHRlbiBQaWN0cwoJc2hhbGwgcGF5IGZvciB0aGlzLCBhbmQgc2V2ZW4gaGVhZHMgZm9yIHRoZSBkb2csIHdobyB3YXMgYQoJYmV0dGVyIHdhcnJpb3IgdGhhbiBtYW55IGEgbWFuLiIKCQlbIENvbmFuIFRoZSBXYXJyaW9yLCBieSBSb2JlcnQgRSBIb3dhcmQgXQoJU2xlZXAgaXMgYSBkZWF0aDsgb2gsIG1ha2UgbWUgdHJ5CglCeSBzbGVlcGluZywgd2hhdCBpdCBpcyB0byBkaWUsCglBbmQgYXMgZ2VudGx5IGxheSBteSBoZWFkCglPbiBteSBncmF2ZSwgYXMgbm93IG15IGJlZC4KCQlbIFJlbGlnaW8gTWVkaWNpLCBieSBTaXIgVGhvbWFzIEJyb3duZSBdCglTY2llbmNlIGZpY3Rpb24gZGlkIG5vdCBpbnZlbnQgdGhlIHNsaW1lIG1vbGRzLCBidXQgaXQgaGFzCglib3Jyb3dlZCBmcm9tIHRoZW0gaW4gdXNpbmcgdGhlIGlkZWEgb2Ygc2hlZXRzIG9mIGxpcXVpZCwgZmxvd2luZwoJY3l0b3BsYXNtIGVuZ3VsZmluZyBhbmQgZGlzc29sdmluZyBldmVyeSBsaXZpbmcgdGhpbmcgdGhleSB0b3VjaC4KCVdoYXQgZmljdGlvbiBjYW4gb25seSBpbWFnaW5lLCBuYXR1cmUgaGFzIHByb2R1Y2VkLCBhbmQgb25seSB0aGVpcgoJc21hbGwgc2l6ZSBhbmQgZGVwZW5kZW5jZSBvbiBjb29sbmVzcywgbW9pc3R1cmUsIGFuZCBkYXJrbmVzcyBoYXMKCWtlcHQgdGhlIHNsaW1lIG1vbGRzIGZyb20gb3JkaW5hcnkgb2JzZXJ2YXRpb24sIGZvciB0aGV5IGFyZSBjb21tb24KCWVub3VnaC4KCQlbIEVuY3ljbG9wYWVkaWEgQnJpdGFubmljYSwgMTk3NyBdCglBbmQgaXQgY2FtZSB0byBwYXNzLCB3aGVuIHRoZSBQaGlsaXN0aW5lIGFyb3NlLCBhbmQgY2FtZSBhbmQKCWRyZXcgbmlnaCB0byBtZWV0IERhdmlkLCB0aGF0IERhdmlkIGhhc3RlZCwgYW5kIHJhbiB0b3dhcmQKCXRoZSBhcm15IHRvIG1lZXQgdGhlIFBoaWxpc3RpbmUuCglBbmQgRGF2aWQgcHV0IGhpcyBoYW5kIGluIGhpcyBiYWcsIGFuZCB0b29rIHRoZW5jZSBhIHN0b25lLAoJYW5kIHNsYW5nIGl0LCBhbmQgc21vdGUgdGhlIFBoaWxpc3RpbmUgaW4gaGlzIGZvcmVoZWFkLCB0aGF0Cgl0aGUgc3RvbmUgc3VuayBpbnRvIGhpcyBmb3JlaGVhZDsgYW5kIGhlIGZlbGwgdXBvbiBoaXMgZmFjZQoJdG8gdGhlIGVhcnRoLgoJU28gRGF2aWQgcHJldmFpbGVkIG92ZXIgdGhlIFBoaWxpc3RpbmUgd2l0aCBhIHNsaW5nIGFuZCB3aXRoCglhIHN0b25lLCBhbmQgc21vdGUgdGhlIFBoaWxpc3RpbmUsIGFuZCBzbGV3IGhpbTsgYnV0IHRoZXJlCgl3YXMgbm8gc3dvcmQgaW4gdGhlIGhhbmQgb2YgRGF2aWQuCgkJWyAxIFNhbXVlbCAxNzo0OC01MCBdCglOb3cgdGhlIHNlcnBlbnQgd2FzIG1vcmUgc3VidGxlIHRoYW4gYW55IGJlYXN0IG9mIHRoZSBmaWVsZAoJd2hpY2ggdGhlIExvcmQgR29kIGhhZCBtYWRlLiAgQW5kIGhlIHNhaWQgdW50byB0aGUgd29tYW4sIFllYSwKCWhhdGggR29kIHNhaWQsIFllIHNoYWxsIG5vdCBlYXQgb2YgZXZlcnkgdHJlZSBvZiB0aGUgZ2FyZGVuPwoJQW5kIHRoZSB3b21hbiBzYWlkIHVudG8gdGhlIHNlcnBlbnQsIFdlIG1heSBlYXQgb2YgdGhlIGZydWl0IG9mCgl0aGUgdHJlZXMgb2YgdGhlIGdhcmRlbjogIGJ1dCBvZiB0aGUgZnJ1aXQgb2YgdGhlIHRyZWUgd2hpY2ggaXMKCWluIHRoZSBtaWRzdCBvZiB0aGUgZ2FyZGVuLCBHb2QgaGF0aCBzYWlkLCBZZSBzaGFsbCBub3QgZWF0IG9mCglpdCwgbmVpdGhlciBzaGFsbCB5ZSB0b3VjaCBpdCwgbGVzdCB5ZSBkaWUuICBBbmQgdGhlIHNlcnBlbnQKCXNhaWQgdW50byB0aGUgd29tYW4sIFllIHNoYWxsIG5vdCBzdXJlbHkgZGllOiAgZm9yIEdvZCBkb3RoCglrbm93IHRoYXQgaW4gdGhlIGRheSB5ZSBlYXQgdGhlcmVvZiwgdGhlbiB5b3VyIGV5ZXMgc2hhbGwgYmUKCW9wZW5lZCwgYW5kIHllIHNoYWxsIGJlIGFzIGdvZHMsIGtub3dpbmcgZ29vZCBhbmQgZXZpbC4gIEFuZAoJd2hlbiB0aGUgd29tYW4gc2F3IHRoYXQgdGhlIHRyZWUgd2FzIGdvb2QgZm9yIGZvb2QsIGFuZCB0aGF0IGl0Cgl3YXMgcGxlYXNhbnQgdG8gdGhlIGV5ZXMsIGFuZCBhIHRyZWUgdG8gYmUgZGVzaXJlZCB0byBtYWtlIG9uZQoJd2lzZSwgc2hlIHRvb2sgb2YgdGhlIGZydWl0IHRoZXJlb2YsIGFuZCBkaWQgZWF0LCBhbmQgZ2F2ZSBhbHNvCgl1bnRvIGhlciBodXNiYW5kIHdpdGggaGVyOyBhbmQgaGUgZGlkIGVhdC4KCglBbmQgdGhlIExvcmQgR29kIHNhaWQgdW50byB0aGUgd29tYW4sIFdoYXQgaXMgdGhpcyB0aGF0IHRob3UKCWhhc3QgZG9uZT8gIEFuZCB0aGUgd29tYW4gc2FpZCwgVGhlIHNlcnBlbnQgYmVndWlsZWQgbWUsIGFuZCBJCglkaWQgZWF0LiAgQW5kIHRoZSBMb3JkIEdvZCBzYWlkIHVudG8gdGhlIHNlcnBlbnQsIEJlY2F1c2UgdGhvdQoJaGFzdCBkb25lIHRoaXMsIHRob3UgYXJ0IGN1cnNlZCBhYm92ZSBhbGwgY2F0dGxlLCBhbmQgYWJvdmUKCWV2ZXJ5IGJlYXN0IG9mIHRoZSBmaWVsZDsgdXBvbiB0aHkgYmVsbHkgc2hhbHQgdGhvdSBnbywgYW5kCglkdXN0IHNoYWx0IHRob3UgZWF0IGFsbCB0aGUgZGF5cyBvZiB0aHkgbGlmZTogIEFuZCBJIHdpbGwgcHV0Cgllbm1pdHkgYmV0d2VlbiB0aGVlIGFuZCB0aGUgd29tYW4sIGFuZCBiZXR3ZWVuIHRoeSBzZWVkIGFuZCBoZXIKCXNlZWQ7IGl0IHNoYWxsIGJydWlzZSB0aHkgaGVhZCwgYW5kIHRob3Ugc2hhbHQgYnJ1aXNlIGhpcyBoZWVsLgoJCVsgR2VuZXNpcyAzOjEtNiwxMy0xNSBdCglBaCwgbmV2ZXIgc2hhbGwgSSBmb3JnZXQgdGhlIGNyeSwKCSAgICBvciB0aGUgc2hyaWVrIHRoYXQgc2hyaWVrZWQgaGUsCglBcyBJIGduYXNoZWQgbXkgdGVldGgsIGFuZCBmcm9tIG15IHNoZWF0aAoJICAgIEkgZHJldyBteSBTbmlja2Vyc25lZSEKCS0tS29rbywgTG9yZCBoaWdoIGV4ZWN1dGlvbmVyIG9mIFRpdGlwdQoJCVsgVGhlIE1pa2FkbywgYnkgU2lyIFcuUy4gR2lsYmVydCBdCglTb2tvYmFuIChKYXBhbmVzZSBmb3IgIndhcmVob3VzZSBrZWVwZXIiKSBpcyBhIHRyYW5zcG9ydCBwdXp6bGUKCWluIHdoaWNoIHRoZSBwbGF5ZXIgcHVzaGVzIGJveGVzIGFyb3VuZCBhIG1hemUsIHZpZXdlZCBmcm9tCglhYm92ZSwgYW5kIHRyaWVzIHRvIHB1dCB0aGVtIGluIGRlc2lnbmF0ZWQgbG9jYXRpb25zLiAgT25seSBvbmUKCWJveCBtYXkgYmUgcHVzaGVkIGF0IGEgdGltZSwgbm90IHR3bywgYW5kIGJveGVzIGNhbm5vdCBiZSBwdWxsZWQuCglBcyB0aGUgcHV6emxlIHdvdWxkIGJlIGV4dHJlbWVseSBkaWZmaWN1bHQgdG8gY3JlYXRlIHBoeXNpY2FsbHksCglpdCBpcyB1c3VhbGx5IGltcGxlbWVudGVkIGFzIGEgdmlkZW8gZ2FtZS4KCglTb2tvYmFuIHdhcyBjcmVhdGVkIGluIDE5ODIgYnkgSGlyb3l1a2kgSW1hYmF5YXNoaSwgYW5kIHdhcwoJcHVibGlzaGVkIGJ5IFRoaW5raW5nIFJhYmJpdCwgYSBzb2Z0d2FyZSBob3VzZSBiYXNlZCBpbgoJVGFrYXJhenVrYSwgSmFwYW4uICBUaGlua2luZyBSYWJiaXQgYWxzbyByZWxlYXNlZCB0aHJlZSBzZXF1ZWxzOgoJQm94eGxlLCBTb2tvYmFuIFBlcmZlY3QgYW5kIFNva29iYW4gUmV2ZW5nZS4KCQlbIFdpa2lwZWRpYSwgdGhlIGZyZWUgZW5jeWNsb3BlZGlhIF0KCVRoZSBzb2xkaWVycyBvZiBZZW5kb3IgYXJlIHdlbGwtdHJhaW5lZCBpbiB0aGUgYXJ0IG9mIHdhciwKCW1hbnkgdHJhaW5lZCBieSB0aGUgV2l6YXJkIGhpbXNlbGYuICBTb21lIHNheSB0aGUgc29sZGllcnMKCWFyZSBleHBsb3JlcnMgd2hvIHdlcmUgdW5mb3J0dW5hdGUgZW5vdWdoIHRvIGJlIGNhcHR1cmVkLAoJYW5kIHB1dCB1bmRlciB0aGUgV2l6YXJkJ3Mgc3BlbGwuICBUaG9zZSB3aG8gaGF2ZSBzdXJ2aXZlZAoJZW5jb3VudGVycyB3aXRoIHNvbGRpZXJzIHNheSB0aGV5IHRyYXZlbCB0b2dldGhlciBpbiBwbGF0b29ucywKCWFuZCBhcmUgZmllcmNlIGZpZ2h0ZXJzLiAgQmVjYXVzZSBvZiB0aGUgbG9hZCBvZiB0aGVpciBjb21iYXQKCWdlYXIsIGhvd2V2ZXIsIG9uZSBjYW4gdXN1YWxseSBydW4gYXdheSBmcm9tIHRoZW0sIGFuZCBkb2luZwoJc28gaXMgY29uc2lkZXJlZCBhIHdpc2UgdGhpbmcuCgktIHRoZXkgY29tZSB0b2dldGhlciB3aXRoIGdyZWF0IHJhbmRvbSwgYW5kIGEgc3BlYXIgaXMgYnJhc3QsCglhbmQgb25lIHBhcnR5IGJyYWtlIGhpcyBzaGllbGQgYW5kIHRoZSBvdGhlciBvbmUgZ29lcyBkb3duLAoJaG9yc2UgYW5kIG1hbiwgb3ZlciBoaXMgaG9yc2UtdGFpbCBhbmQgYnJha2UgaGlzIG5lY2ssIGFuZAoJdGhlbiB0aGUgbmV4dCBjYW5kaWRhdGUgY29tZXMgcmFuZG9taW5nIGluLCBhbmQgYnJhc3QgaGlzCglzcGVhciwgYW5kIHRoZSBvdGhlciBtYW4gYnJhc3QgaGlzIHNoaWVsZCwgYW5kIGRvd24gaGUgZ29lcywKCWhvcnNlIGFuZCBtYW4sIG92ZXIgaGlzIGhvcnNlLXRhaWwsIGFuZCBicmFrZSBoaXMgbmVjaywgYW5kCgl0aGVuIHRoZXJlJ3MgYW5vdGhlciBlbGVjdGVkLCBhbmQgYW5vdGhlciBhbmQgYW5vdGhlciBhbmQKCXN0aWxsIGFub3RoZXIsIHRpbGwgdGhlIG1hdGVyaWFsIGlzIGFsbCB1c2VkIHVwOyBhbmQgd2hlbiB5b3UKCWNvbWUgdG8gZmlndXJlIHVwIHJlc3VsdHMsIHlvdSBjYW4ndCB0ZWxsIG9uZSBmaWdodCBmcm9tCglhbm90aGVyLCBub3Igd2hvIHdoaXBwZWQ7IGFuZCBhcyBhIHBpY3R1cmUgb2YgbGl2aW5nLCByYWdpbmcsCglyb2FyaW5nIGJhdHRsZSwgc2hvISB3aHkgaXQncyBwYWxlIGFuZCBub2lzZWxlc3MgLSBqdXN0CglnaG9zdHMgc2N1ZmZsaW5nIGluIGEgZm9nLiAgRGVhciBtZSwgd2hhdCB3b3VsZCB0aGlzIGJhcnJlbgoJdm9jYWJ1bGFyeSBnZXQgb3V0IG9mIHRoZSBtaWdodGllc3Qgc3BlY3RhY2xlPyAtIHRoZSBidXJuaW5nCglvZiBSb21lIGluIE5lcm8ncyB0aW1lLCBmb3IgaW5zdGFuY2U/ICBXaHksIGl0IHdvdWxkIG1lcmVseQoJc2F5ICdUb3duIGJ1cm5lZCBkb3duOyBubyBpbnN1cmFuY2U7IGJveSBicmFzdCBhIHdpbmRvdywKCWZpcmVtYW4gYnJha2UgaGlzIG5lY2shJyAgV2h5LCB0aGF0IGFpbid0IGEgcGljdHVyZSEKCQlbIEEgQ29ubmVjdGljdXQgWWFua2VlIGluIEtpbmcgQXJ0aHVyJ3MgQ291cnQsCgkJICAgIGJ5IE1hcmsgVHdhaW4gXQoJVGhlIEJvb2sgb2YgVGhyZWUgbGF5IGNsb3NlZCBvbiB0aGUgdGFibGUuICBUYXJhbiBoYWQgbmV2ZXIKCWJlZW4gYWxsb3dlZCB0byByZWFkIHRoZSB2b2x1bWUgZm9yIGhpbXNlbGY7IG5vdyBoZSB3YXMgc3VyZQoJaXQgaGVsZCBtb3JlIHRoYW4gRGFsbGJlbiBjaG9zZSB0byB0ZWxsIGhpbS4gIEluIHRoZSBzdW4tCglmaWxsZWQgcm9vbSwgd2l0aCBEYWxsYmVuIHN0aWxsIG1lZGl0YXRpbmcgYW5kIHNob3dpbmcgbm8KCXNpZ24gb2Ygc3RvcHBpbmcsIFRhcmFuIHJvc2UgYW5kIG1vdmVkIHRocm91Z2ggdGhlIHNoaW1tZXJpbmcKCWJlYW1zLiAgRnJvbSB0aGUgZm9yZXN0IGNhbWUgdGhlIG1vbm90b25vdXMgdGljayBvZiBhIGJlZXRsZS4KCUhpcyBoYW5kcyByZWFjaGVkIGZvciB0aGUgY292ZXIuICBUYXJhbiBnYXNwZWQgaW4gcGFpbiBhbmQKCXNuYXRjaGVkIHRoZW0gYXdheS4gIFRoZXkgc21hcnRlZCBhcyBpZiBlYWNoIG9mIGhpcyBmaW5nZXJzCgloYWQgYmVlbiBzdHVuZyBieSBob3JuZXRzLiAgSGUganVtcGVkIGJhY2ssIHN0dW1ibGVkIGFnYWluc3QKCXRoZSBiZW5jaCwgYW5kIGRyb3BwZWQgdG8gdGhlIGZsb29yLCB3aGVyZSBoZSBwdXQgaGlzIGZpbmdlcnMKCXdvZWZ1bGx5IGludG8gaGlzIG1vdXRoLgoJRGFsbGJlbidzIGV5ZXMgYmxpbmtlZCBvcGVuLiAgSGUgcGVlcmVkIGF0IFRhcmFuIGFuZCB5YXduZWQKCXNsb3dseS4gICJZb3UgaGFkIGJldHRlciBzZWUgQ29sbCBhYm91dCBhIGxvdGlvbiBmb3IgdGhvc2UKCWhhbmRzLCIgaGUgYWR2aXNlZC4gICJPdGhlcndpc2UsIEkgc2hvdWxkbid0IGJlIHN1cnByaXNlZCBpZgoJdGhleSBibGlzdGVyZWQuIgoJCVsgVGhlIEJvb2sgb2YgVGhyZWUsIGJ5IExsb3lkIEFsZXhhbmRlciBdCglFaWdodCBsZWdnZWQgY3JlYXR1cmUgY2FwYWJsZSBvZiBzcGlubmluZyB3ZWJzIHRvIHRyYXAgcHJleS4KCQlbXQoKCSJZb3UgbWVhbiB5b3UgZWF0IGZsaWVzPyIgZ2FzcGVkIFdpbGJ1ci4KCSJDZXJ0YWlubHkuICBGbGllcywgYnVncywgZ3Jhc3Nob3BwZXJzLCBjaG9pY2UgYmVldGxlcywKCW1vdGhzLCBidXR0ZXJmbGllcywgdGFzdHkgY29ja3JvYWNoZXMsIGduYXRzLCBtaWRnZXMsIGRhZGR5Cglsb25nbGVncywgY2VudGlwZWRlcywgbW9zcXVpdG9lcywgY3JpY2tldHMgLSBhbnl0aGluZyB0aGF0IGlzCgljYXJlbGVzcyBlbm91Z2ggdG8gZ2V0IGNhdWdodCBpbiBteSB3ZWIuICBJIGhhdmUgdG8gbGl2ZSwKCWRvbid0IEk/IgoJIldoeSwgeWVzLCBvZiBjb3Vyc2UsIiBzYWlkIFdpbGJ1ci4KCQlbIENoYXJsb3R0ZSdzIFdlYiwgYnkgRS5CLiBXaGl0ZSBdCglUaGUgYXR0YWNrIGJ5IHRob3NlIHdobyB3YW50IHRvIGRpZSAtLSB0aGlzIGlzIHRoZSBhdHRhY2sKCWFnYWluc3Qgd2hpY2ggeW91IGNhbm5vdCBwcmVwYXJlIGEgcGVyZmVjdCBkZWZlbnNlLgoJCQkJCS0tSHVtYW4gYXBob3Jpc20KCQlbIFRoZSBEb3NhZGkgRXhwZXJpbWVudCwgYnkgRnJhbmsgSGVyYmVydCBdCglBIGZsb29yYm9hcmQgY3JlYWtlZC4gIEdhbGRlciBoYWQgc3BlbnQgbWFueSBob3VycyB0dW5pbmcgdGhlbSwKCWFsd2F5cyBhIHdpc2UgcHJlY2F1dGlvbiB3aXRoIGFuIGFtYml0aW91cyBhc3Npc3RhbnQgd2hvIHdhbGtlZAoJbGlrZSBhIGNhdC4KCUQgZmxhdC4gIFRoYXQgbWVhbnQgaGUgd2FzIGp1c3QgdG8gdGhlIHJpZ2h0IG9mIHRoZSBkb29yLgoJIkFoLCBUcnltb24sIiBoZSBzYWlkLCB3aXRob3V0IHR1cm5pbmcsIGFuZCBub3RlZCB3aXRoIHNvbWUKCXNhdGlzZmFjdGlvbiB0aGUgZmFpbnQgaW5kcmF3aW5nIG9mIGJyZWF0aCBiZWhpbmQgaGltLiAgIkdvb2QKCW9mIHlvdSB0byBjb21lLiAgU2h1dCB0aGUgZG9vciwgd2lsbCB5b3U/IgoJCVsgVGhlIExpZ2h0IEZhbnRhc3RpYywgYnkgVGVycnkgUHJhdGNoZXR0IF0KCVNvIHRoZXkgc3Rvb2QsIGVhY2ggaW4gaGlzIHBsYWNlLCBuZWl0aGVyIG1vdmluZyBhIGZpbmdlcidzCglicmVhZHRoIGJhY2ssIGZvciBvbmUgZ29vZCBob3VyLCBhbmQgbWFueSBibG93cyB3ZXJlIGdpdmVuCglhbmQgcmVjZWl2ZWQgYnkgZWFjaCBpbiB0aGF0IHRpbWUsIHRpbGwgaGVyZSBhbmQgdGhlcmUgd2VyZQoJc29yZSBib25lcyBhbmQgYnVtcHMsIHlldCBuZWl0aGVyIHRob3VnaHQgb2YgY3J5aW5nICJFbm91Z2gsIgoJb3Igc2VlbWVkIGxpa2VseSB0byBmYWxsIGZyb20gb2ZmIHRoZSBicmlkZ2UuICBOb3cgYW5kIHRoZW4KCXRoZXkgc3RvcHBlZCB0byByZXN0LCBhbmQgZWFjaCB0aG91Z2h0IHRoYXQgaGUgbmV2ZXIgaGFkIHNlZW4KCWluIGFsbCBoaXMgbGlmZSBiZWZvcmUgc3VjaCBhIGhhbmQgYXQgcXVhcnRlcnN0YWZmLiAgQXQgbGFzdAoJUm9iaW4gZ2F2ZSB0aGUgc3RyYW5nZXIgYSBibG93IHVwb24gdGhlIHJpYnMgdGhhdCBtYWRlIGhpcwoJamFja2V0IHNtb2tlIGxpa2UgYSBkYW1wIHN0cmF3IHRoYXRjaCBpbiB0aGUgc3VuLiAgU28gc2hyZXdkCgl3YXMgdGhlIHN0cm9rZSB0aGF0IHRoZSBzdHJhbmdlciBjYW1lIHdpdGhpbiBhIGhhaXIncyBicmVhZHRoCglvZiBmYWxsaW5nIG9mZiB0aGUgYnJpZGdlOyBidXQgaGUgcmVnYWluZWQgaGltc2VsZiByaWdodAoJcXVpY2tseSwgYW5kLCBieSBhIGRleHRlcm91cyBibG93LCBnYXZlIFJvYmluIGEgY3JhY2sgb24gdGhlCgljcm93biB0aGF0IGNhdXNlZCB0aGUgYmxvb2QgdG8gZmxvdy4gIFRoZW4gUm9iaW4gZ3JldyBtYWQKCXdpdGggYW5nZXIsIGFuZCBzbW90ZSB3aXRoIGFsbCBoaXMgbWlnaHQgYXQgdGhlIG90aGVyOyBidXQKCXRoZSBzdHJhbmdlciB3YXJkZWQgdGhlIGJsb3csIGFuZCBvbmNlIGFnYWluIHRod2Fja2VkIFJvYmluLAoJYW5kIHRoaXMgdGltZSBzbyBmYWlybHkgdGhhdCBoZSBmZWxsIGhlZWxzIG92ZXIgaGVhZCBpbnRvIHRoZQoJd2F0ZXIsIGFzIHRoZSBxdWVlbiBwaW4gZmFsbHMgaW4gYSBnYW1lIG9mIGJvd2xzLgoJCVsgVGhlIE1lcnJ5IEFkdmVudHVyZXMgb2YgUm9iaW4gSG9vZCwgYnkgSG93YXJkIFB5bGUgXQoJVGhpcyBzdGFmZiBpcyBjb25zaWRlcmVkIHNhY3JlZCB0byBhbGwgaGVhbGVycywgYXMgaXQgdHJ1bHkKCWhvbGRzIHRoZSBwb3dlcnMgb2YgbGlmZSBhbmQgZGVhdGguICBXaGVuIHdpZWxkZWQsIGl0Cglwcm90ZWN0cyBpdHMgdXNlciBmcm9tIGFsbCBsaWZlIGRyYWluaW5nIGF0dGFja3MsIGFuZAoJYWRkaXRpb25hbGx5IGdpdmVzIHRoZSB3aWVsZGVyIHRoZSBwb3dlciBvZiByZWdlbmVyYXRpb24uCglXaGVuIGludm9rZWQgaXQgcGVyZm9ybXMgaGVhbGluZyBtYWdpYy4KCVVwIGhlIHdlbnQgLS0gdmVyeSBxdWlja2x5IGF0IGZpcnN0IC0tIHRoZW4gbW9yZSBzbG93bHkgLS0gdGhlbgoJaW4gYSBsaXR0bGUgd2hpbGUgZXZlbiBtb3JlIHNsb3dseSB0aGFuIHRoYXQgLS0gYW5kIGZpbmFsbHksCglhZnRlciBtYW55IG1pbnV0ZXMgb2YgY2xpbWJpbmcgdXAgdGhlIGVuZGxlc3Mgc3RhaXJ3YXksIG9uZQoJd2VhcnkgZm9vdCB3YXMgYmFyZWx5IGFibGUgdG8gZm9sbG93IHRoZSBvdGhlci4gIE1pbG8gc3VkZGVubHkKCXJlYWxpemVkIHRoYXQgd2l0aCBhbGwgaGlzIGVmZm9ydCBoZSB3YXMgbm8gY2xvc2VyIHRvIHRoZSB0b3AKCXRoYW4gd2hlbiBoZSBiZWdhbiwgYW5kIG5vdCBhIGdyZWF0IGRlYWwgZnVydGhlciBmcm9tIHRoZQoJYm90dG9tLiAgQnV0IGhlIHN0cnVnZ2xlZCBvbiBmb3IgYSB3aGlsZSBsb25nZXIsIHVudGlsIGF0IGxhc3QsCgljb21wbGV0ZWx5IGV4aGF1c3RlZCwgaGUgY29sbGFwc2VkIG9udG8gb25lIG9mIHRoZSBzdGVwcy4KCSJJIHNob3VsZCBoYXZlIGtub3duIGl0LCIgaGUgbXVtYmxlZCwgcmVzdGluZyBoaXMgdGlyZWQgbGVncwoJYW5kIGZpbGxpbmcgaGlzIGx1bmdzIHdpdGggYWlyLiAgIlRoaXMgaXMganVzdCBsaWtlIHRoZSBsaW5lCgl0aGF0IGdvZXMgb24gZm9yZXZlciwgYW5kIEknbGwgbmV2ZXIgZ2V0IHRoZXJlLiIKCSJZb3Ugd291bGRuJ3QgbGlrZSBpdCBtdWNoIGFueXdheSwiIHNvbWVvbmUgcmVwbGllZCBnZW50bHkuCgkiSW5maW5pdHkgaXMgYSBkcmVhZGZ1bGx5IHBvb3IgcGxhY2UuICBUaGV5IGNhbiBuZXZlciBtYW5hZ2UgdG8KCW1ha2UgZW5kcyBtZWV0LiIKCQlbIFRoZSBQaGFudG9tIFRvbGxib290aCwgYnkgTm9ydG9uIEp1c3RlciBdCgoJICAgRHIuIFJheSBTdGFudHo6ICBIZXksIHdoZXJlIGRvIHRob3NlIHN0YWlycyBnbz8KCURyLiBQZXRlciBWZW5rbWFuOiAgVGhleSBnbyB1cC4KCQlbIEdob3N0YnVzdGVycywgZGlyZWN0ZWQgYnkgSXZhbiBSZWl0bWFuLAoJCSAgd3JpdHRlbiBieSBEYW4gQWNrcm95ZCBhbmQgSGFyb2xkIFJhbWlzIF0KCVRoZW4gYXQgbGFzdCBoZSBiZWdhbiB0byB3b25kZXIgd2h5IHRoZSBsaW9uIHdhcyBzdGFuZGluZyBzbwoJc3RpbGwgLSBmb3IgaXQgaGFkbid0IG1vdmVkIG9uZSBpbmNoIHNpbmNlIGhlIGZpcnN0IHNldCBleWVzCglvbiBpdC4gIEVkbXVuZCBub3cgdmVudHVyZWQgYSBsaXR0bGUgbmVhcmVyLCBzdGlsbCBrZWVwaW5nIGluCgl0aGUgc2hhZG93IG9mIHRoZSBhcmNoIGFzIG11Y2ggYXMgaGUgY291bGQuICBIZSBub3cgc2F3IGZyb20KCXRoZSB3YXkgdGhlIGxpb24gd2FzIHN0YW5kaW5nIHRoYXQgaXQgY291bGRuJ3QgaGF2ZSBiZWVuCglsb29raW5nIGF0IGhpbSBhdCBhbGwuICAoIkJ1dCBzdXBwb3NpbmcgaXQgdHVybnMgaXRzIGhlYWQ/IgoJdGhvdWdodCBFZG11bmQuKSAgSW4gZmFjdCBpdCB3YXMgc3RhcmluZyBhdCBzb21ldGhpbmcgZWxzZSAtCgluYW1lbHkgYSBsaXR0bGUgZHdhcmYgd2hvIHN0b29kIHdpdGggaGlzIGJhY2sgdG8gaXQgYWJvdXQKCWZvdXIgZmVldCBhd2F5LiAgIkFoYSEiIHRob3VnaHQgRWRtdW5kLiAgIldoZW4gaXQgc3ByaW5ncyBhdAoJdGhlIGR3YXJmIHRoZW4gd2lsbCBiZSBteSBjaGFuY2UgdG8gZXNjYXBlLiIgIEJ1dCBzdGlsbCB0aGUKCWxpb24gbmV2ZXIgbW92ZWQsIG5vciBkaWQgdGhlIGR3YXJmLiAgQW5kIG5vdyBhdCBsYXN0IEVkbXVuZAoJcmVtZW1iZXJlZCB3aGF0IHRoZSBvdGhlcnMgaGFkIHNhaWQgYWJvdXQgdGhlIFdoaXRlIFdpdGNoCgl0dXJuaW5nIHBlb3BsZSBpbnRvIHN0b25lLiAgUGVyaGFwcyB0aGlzIHdhcyBvbmx5IGEgc3RvbmUKCWxpb24uICBBbmQgYXMgc29vbiBhcyBoZSBoYWQgdGhvdWdodCBvZiB0aGF0IGhlIG5vdGljZWQgdGhhdAoJdGhlIGxpb24ncyBiYWNrIGFuZCB0aGUgdG9wIG9mIGl0cyBoZWFkIHdlcmUgY292ZXJlZCB3aXRoCglzbm93LiAgT2YgY291cnNlIGl0IG11c3QgYmUgb25seSBhIHN0YXR1ZSEKCQlbIFRoZSBMaW9uLCB0aGUgV2l0Y2ggYW5kIHRoZSBXYXJkcm9iZSBieSBDLlMuIExld2lzIF0KCVRoZXJlIHdhcyB0aGUgdXN1YWwgZGltIGdyZXkgbGlnaHQgb2YgdGhlIGZvcmVzdC1kYXkgYWJvdXQKCWhpbSB3aGVuIGhlIGNhbWUgdG8gaGlzIHNlbnNlcy4gIFRoZSBzcGlkZXIgbGF5IGRlYWQgYmVzaWRlCgloaW0sIGFuZCBoaXMgc3dvcmQtYmxhZGUgd2FzIHN0YWluZWQgYmxhY2suICBTb21laG93IHRoZQoJa2lsbGluZyBvZiB0aGUgZ2lhbnQgc3BpZGVyLCBhbGwgYWxvbmUgYW5kIGJ5IGhpbXNlbGYgaW4gdGhlCglkYXJrIHdpdGhvdXQgdGhlIGhlbHAgb2YgdGhlIHdpemFyZCBvciB0aGUgZHdhcnZlcyBvciBvZgoJYW55b25lIGVsc2UsIG1hZGUgYSBncmVhdCBkaWZmZXJlbmNlIHRvIE1yLiBCYWdnaW5zLiAgSGUgZmVsdAoJYSBkaWZmZXJlbnQgcGVyc29uLCBhbmQgbXVjaCBmaWVyY2VyIGFuZCBib2xkZXIgaW4gc3BpdGUgb2YKCWFuIGVtcHR5IHN0b21hY2gsIGFzIGhlIHdpcGVkIGhpcyBzd29yZCBvbiB0aGUgZ3Jhc3MgYW5kIHB1dAoJaXQgYmFjayBpbnRvIGl0cyBzaGVhdGguCgkiSSB3aWxsIGdpdmUgeW91IGEgbmFtZSwiIGhlIHNhaWQgdG8gaXQsICJhbmQgSSBzaGFsbCBjYWxsCgl5b3UgU3RpbmcuIgoJCVsgVGhlIEhvYmJpdCwgYnkgSi5SLlIuIFRvbGtpZW4gXQoJVGhlcmUgd2VyZSBzb3VuZHMgaW4gdGhlIGRpc3RhbmNlLCBpbmNvbmdydWVudCB3aXRoIHRoZQoJc291bmRzIG9mIGV2ZW4gdGhpcyBuYW1lbGVzcywgdGltZWxlc3Mgc2VhOiB0aGluIHNvdW5kcywKCWFnb25pemVkIGFuZCB0ZXJyaWJsZSwgZm9yIGFsbCB0aGF0IHRoZXkgcmVtYWluZWQgcmVtb3RlIC0KCXlldCB0aGUgc2hpcCBmb2xsb3dlZCB0aGVtLCBhcyBpZiBkcmF3biBieSB0aGVtOyB0aGV5IGdyZXcKCWxvdWRlciAtIHBhaW4gYW5kIGRlc3BhaXIgd2VyZSB0aGVyZSwgYnV0IHRlcnJvciB3YXMKCXByZWRvbWluYW50LgoJRWxyaWMgaGFkIGhlYXJkIHN1Y2ggc291bmRzIGVjaG9pbmcgZnJvbSBoaXMgY291c2luIFl5cmtvb24ncwoJc2FyZG9uaWNhbGx5IG5hbWVkICdQbGVhc3VyZSBDaGFtYmVycycgaW4gdGhlIGRheXMgYmVmb3JlIGhlCgloYWQgZmxlZCB0aGUgcmVzcG9uc2liaWxpdGllcyBvZiBydWxpbmcgYWxsIHRoYXQgcmVtYWluZWQgb2YKCXRoZSBvbGQgTWVsbmlib25lYW4gRW1waXJlLiAgVGhlc2Ugd2VyZSB0aGUgdm9pY2VzIG9mIG1lbgoJd2hvc2UgdmVyeSBzb3VscyB3ZXJlIHVuZGVyIHNpZWdlOyBtZW4gdG8gd2hvbSBkZWF0aCBtZWFudAoJbm90IG1lcmUgZXh0aW5jdGlvbiwgYnV0IGEgY29udGludWF0aW9uIG9mIGV4aXN0ZW5jZSwgZm9yZXZlcgoJaW4gdGhyYWxsIHRvIHNvbWUgY3J1ZWwgYW5kIHN1cGVybmF0dXJhbCBtYXN0ZXIuICBIZSBoYWQKCWhlYXJkIG1lbiBjcnkgc28gd2hlbiBoaXMgc2FsdmF0aW9uIGFuZCBoaXMgbmVtZXNpcywgaGlzCglncmVhdCBibGFjayBiYXR0bGUtYmxhZGUgU3Rvcm1icmluZ2VyLCBkcmFuayB0aGVpciBzb3Vscy4KCQlbIFRoZSBMYW5kcyBCZXlvbmQgdGhlIFdvcmxkLCBieSBNaWNoYWVsIE1vb3Jjb2NrIF0KCUhlIHdhbGtlZCBmb3Igc29tZSB0aW1lIHRocm91Z2ggYSBsb25nIG5hcnJvdyBjb3JyaWRvcgoJd2l0aG91dCBmaW5kaW5nIGFueSBvbmUgYW5kIHdhcyBqdXN0IGdvaW5nIHRvIGNhbGwgb3V0LAoJd2hlbiBzdWRkZW5seSBpbiBhIGRhcmsgY29ybmVyIGJldHdlZW4gYW4gb2xkIGN1cGJvYXJkCglhbmQgdGhlIGRvb3IgaGUgY2F1Z2h0IHNpZ2h0IG9mIGEgc3RyYW5nZSBvYmplY3Qgd2hpY2gKCXNlZW1lZCB0byBiZSBhbGl2ZS4KCQlbIENyaW1lIGFuZCBQdW5pc2htZW50LCBieSBGeW9kb3IgRG9zdG9ldnNreSBdCglEb3JvdGh5IGxlYW5lZCBoZXIgY2hpbiB1cG9uIGhlciBoYW5kIGFuZCBnYXplZCB0aG91Z2h0ZnVsbHkKCWF0IHRoZSBTY2FyZWNyb3cuICBJdHMgaGVhZCB3YXMgYSBzbWFsbCBzYWNrIHN0dWZmZWQgd2l0aAoJc3RyYXcsIHdpdGggZXllcywgbm9zZSwgYW5kIG1vdXRoIHBhaW50ZWQgb24gaXQgdG8gcmVwcmVzZW50CglhIGZhY2UuICBBbiBvbGQsIHBvaW50ZWQgYmx1ZSBoYXQsIHRoYXQgaGFkIGJlbG9uZ2VkIHRvIHNvbWUKCU11bmNoa2luLCB3YXMgcGVyY2hlZCBvbiBoaXMgaGVhZCwgYW5kIHRoZSByZXN0IG9mIHRoZSBmaWd1cmUKCXdhcyBhIGJsdWUgc3VpdCBvZiBjbG90aGVzLCB3b3JuIGFuZCBmYWRlZCwgd2hpY2ggaGFkIGFsc28KCWJlZW4gc3R1ZmZlZCB3aXRoIHN0cmF3LiAgT24gdGhlIGZlZXQgd2VyZSBzb21lIG9sZCBib290cyB3aXRoCglibHVlIHRvcHMsIHN1Y2ggYXMgZXZlcnkgbWFuIHdvcmUgaW4gdGhpcyBjb3VudHJ5LCBhbmQgdGhlCglmaWd1cmUgd2FzIHJhaXNlZCBhYm92ZSB0aGUgc3RhbGtzIG9mIGNvcm4gYnkgbWVhbnMgb2YgdGhlCglwb2xlIHN0dWNrIHVwIGl0cyBiYWNrLgoJCVsgVGhlIFdvbmRlcmZ1bCBXaXphcmQgb2YgT3osIGJ5IEwuIEZyYW5rIEJhdW0gXQoJV2hhdCB5b3Ugc2VlayBpcyBhIGJsYWRlIG9mIGxpZ2h0LAoJYSB3ZWFwb24gZm9yIHZlbmdlYW5jZS4KCQlbIEV4cGVkaXRpb24gdG8gQ2FzdGxlIFJhdmVubG9mdCwKCQkJYnkgQnJ1Y2UgQ29yZGVsbCBhbmQgSmFtZXMgV3lhdHQgXQoJVGhlIFNoaW50byBjaHRob25pYyBhbmQgd2VhdGhlciBnb2QgYW5kIGJyb3RoZXIgb2YgdGhlIHN1bgoJZ29kZGVzcyBBbWF0ZXJhc3UsIGhlIHdhcyBib3JuIGZyb20gdGhlIG5vc2Ugb2YgdGhlCglwcmltb3JkaWFsIGNyZWF0b3IgZ29kIEl6YW5hZ2kgYW5kIHJlcHJlc2VudHMgdGhlIHBoeXNpY2FsLAoJbWF0ZXJpYWwgd29ybGQuICBIZSBoYXMgYmVlbiBleHBlbGxlZCBmcm9tIGhlYXZlbiBhbmQgdGFrZW4KCXVwIHJlc2lkZW5jZSBvbiBlYXJ0aC4KCQlbIEVuY3ljbG9wZWRpYSBvZiBHb2RzLCBieSBNaWNoYWVsIEpvcmRhbiBdCglTYW11cmFpIHBsYXRlIGFybW9yIG9mIHRoZSBZYW1hdG8gcGVyaW9kIChBRCAzMDAgLSA3MTApLgoJVGhlIHRlbmd1IHdhcyB0aGUgbW9zdCB0cm91Ymxlc29tZSBjcmVhdHVyZSBvZiBKYXBhbmVzZQoJbGVnZW5kLiAgUGFydCBiaXJkIGFuZCBwYXJ0IG1hbiwgd2l0aCByZWQgYmVhayBmb3IgYSBub3NlCglhbmQgZmxhc2hpbmcgZXllcywgdGhlIHRlbmd1IHdhcyBub3RvcmlvdXMgZm9yIHN0aXJyaW5nIHVwCglmZXVkcyBhbmQgcHJvbG9uZ2luZyBlbm1pdHkgYmV0d2VlbiBmYW1pbGllcy4gIEluZGVlZCwgdGhlCgliZWxsaWdlcmVudCB0ZW5ndSB3ZXJlIHN1cHBvc2VkIHRvIGhhdmUgYmVlbiBtYW4ncyBmaXJzdAoJaW5zdHJ1Y3RvcnMgaW4gdGhlIHVzZSBvZiBhcm1zLgoJICBbIE15dGhpY2FsIEJlYXN0cywgYnkgRGVpcmRyZSBIZWFkb24gKFRoZSBMZXByZWNoYXVuIExpYnJhcnkpIF0KCVRoZSBFZ3lwdGlhbiBnb2Qgb2YgdGhlIG1vb24gYW5kIHdpc2RvbSwgVGhvdGggaXMgdGhlIHBhdHJvbgoJZGVpdHkgb2Ygc2NyaWJlcyBhbmQgb2Yga25vd2xlZGdlLCBpbmNsdWRpbmcgc2NpZW50aWZpYywKCW1lZGljYWwgYW5kIG1hdGhlbWF0aWNhbCB3cml0aW5nLCBhbmQgaXMgc2FpZCB0byBoYXZlIGdpdmVuCgltYW5raW5kIHRoZSBhcnQgb2YgaGllcm9nbHlwaGljIHdyaXRpbmcuICBIZSBpcyBpbXBvcnRhbnQgYXMKCWEgbWVkaWF0b3IgYW5kIGNvdW5zZWxsb3IgYW1vbmdzdCB0aGUgZ29kcyBhbmQgaXMgdGhlIHNjcmliZQoJb2YgdGhlIEhlbGlvcG9saXMgRW5uZWFkIHBhbnRoZW9uLiAgQWNjb3JkaW5nIHRvIG15dGhvbG9neSwKCWhlIHdhcyBib3JuIGZyb20gdGhlIGhlYWQgb2YgdGhlIGdvZCBTZXRoLiAgSGUgbWF5IGJlCglkZXBpY3RlZCBpbiBodW1hbiBmb3JtIHdpdGggdGhlIGhlYWQgb2YgYW4gaWJpcywgd2hvbGx5IGFzIGFuCglpYmlzLCBvciBhcyBhIHNlYXRlZCBiYWJvb24gc29tZXRpbWVzIHdpdGggaXRzIHRvcnNvIGNvdmVyZWQKCWluIGZlYXRoZXJzLiAgSGlzIGF0dHJpYnV0ZXMgaW5jbHVkZSBhIGNyb3duIHdoaWNoIGNvbnNpc3RzCglvZiBhIGNyZXNjZW50IG1vb24gc3VybW91bnRlZCBieSBhIG1vb24gZGlzYy4KCVRob3RoIGlzIGdlbmVyYWxseSByZWdhcmRlZCBhcyBhIGJlbmlnbiBkZWl0eS4gIEhlIGlzIGFsc28KCXNjcnVwdWxvdXNseSBmYWlyIGFuZCBpcyByZXNwb25zaWJsZSBub3Qgb25seSBmb3IgZW50ZXJpbmcKCWluIHRoZSByZWNvcmQgdGhlIHNvdWxzIHdobyBwYXNzIHRvIGFmdGVybGlmZSwgYnV0IG9mCglhZGp1ZGljYXRpbmcgaW4gdGhlIEhhbGwgb2YgdGhlIFR3byBUcnV0aHMuICBUaGUgUHlyYW1pZAoJVGV4dHMgcmV2ZWFsIGEgdmlvbGVudCBzaWRlIG9mIGhpcyBuYXR1cmUgYnkgd2hpY2ggaGUKCWRlY2FwaXRhdGVzIHRoZSBhZHZlcnNhcmllcyBvZiB0cnV0aCBhbmQgd3JlbmNoZXMgb3V0IHRoZWlyCgloZWFydHMuCgkJWyBFbmN5Y2xvcGVkaWEgb2YgR29kcywgYnkgTWljaGFlbCBKb3JkYW4gXQoJTWVuIHNheSB0aGF0IGhlIFtUaHV0b3RobWVzXSBoYXMgb3Bwb3NlZCBUaG90aC1BbW9uLCB3aG8gaXMKCW1hc3RlciBvZiBhbGwgcHJpZXN0cyBvZiBTZXQsIGFuZCBkd2VsbHMgaW4gTHV4b3IsIGFuZCB0aGF0CglUaHV0b3RobWVzIHNlZWtzIGhpZGRlbiBwb3dlciBbVGhlIEhlYXJ0IG9mIEFocmltYW5dIHRvCglvdmVydGhyb3cgdGhlIEdyZWF0IE9uZS4KCQlbIENvbmFuIHRoZSBDb25xdWVyb3IsIGJ5IFJvYmVydCBFLiBIb3dhcmQgXQoJTWV0aG91Z2h0IEkgc2F3IHRoZSBmb290c3RlcHMgb2YgYSB0aHJvbmUKCVdoaWNoIG1pc3RzIGFuZCB2YXBvdXJzIGZyb20gbWluZSBleWVzIGRpZCBzaHJvdWQtLQoJTm9yIHZpZXcgb2Ygd2hvIG1pZ2h0IHNpdCB0aGVyZW9uIGFsbG93ZWQ7CglCdXQgYWxsIHRoZSBzdGVwcyBhbmQgZ3JvdW5kIGFib3V0IHdlcmUgc3Ryb3duCglXaXRoIHNpZ2h0cyB0aGUgcnVlZnVsbGVzdCB0aGF0IGZsZXNoIGFuZCBib25lCglFdmVyIHB1dCBvbjsgYSBtaXNlcmFibGUgY3Jvd2QsCglTaWNrLCBoYWxlLCBvbGQsIHlvdW5nLCB3aG8gY3JpZWQgYmVmb3JlIHRoYXQgY2xvdWQsCgkiVGhvdSBhcnQgb3VyIGtpbmcsCglPIERlYXRoISB0byB0aGVlIHdlIGdyb2FuLiIKCVRob3NlIHN0ZXBzIEkgY2xvbWI7IHRoZSBtaXN0cyBiZWZvcmUgbWUgZ2F2ZQoJU21vb3RoIHdheTsgYW5kIEkgYmVoZWxkIHRoZSBmYWNlIG9mIG9uZQoJU2xlZXBpbmcgYWxvbmUgd2l0aGluIGEgbW9zc3kgY2F2ZSwKCVdpdGggaGVyIGZhY2UgdXAgdG8gaGVhdmVuOyB0aGF0IHNlZW1lZCB0byBoYXZlCglQbGVhc2luZyByZW1lbWJyYW5jZSBvZiBhIHRob3VnaHQgZm9yZWdvbmU7CglBIGxvdmVseSBCZWF1dHkgaW4gYSBzdW1tZXIgZ3JhdmUhCgkJWyBTb25uZXQsIGJ5IFdpbGxpYW0gV29yZHN3b3J0aCBdCglBIHdvcnNoaXBwZXIgb2YgS2FsaSwgd2hvIHByYWN0aXNlZCBfdGh1Z2dlZV8sIHRoZSBzdHJhbmdsaW5nCglvZiBodW1hbiB2aWN0aW1zIGluIHRoZSBuYW1lIG9mIHRoZSByZWxpZ2lvbi4gIFJvYmJlcnkgb2YgdGhlCgl2aWN0aW0gcHJvdmlkZWQgdGhlIG1lYW5zIG9mIGxpdmVsaWhvb2QuICBUaGV5IHdlcmUgYWxzbwoJY2FsbGVkIF9QaGFuc2lnYXJzXyAoTm9vc2Ugb3BlcmF0b3JzKSBmcm9tIHRoZSBtZXRob2QgZW1wbG95ZWQuCglWaWdvcm91cyBzdXBwcmVzc2lvbiB3YXMgYmVndW4gYnkgTG9yZCBXaWxsaWFtIEJlbnRpbmNrIGluCgkxODI4LCBidXQgdGhlIGZyYXRlcm5pdHkgZGlkIG5vdCBiZWNvbWUgY29tcGxldGVseSBleHRpbmN0Cglmb3IgYW5vdGhlciA1MCB5ZWFycyBvciBzby4KCUluIGNvbW1vbiBwYXJsYW5jZSB0aGUgd29yZCBpcyB1c2VkIGZvciBhbnkgdmlvbGVudCAidG91Z2giLgoJCVsgQnJld2VyJ3MgQ29uY2lzZSBEaWN0aW9uYXJ5IG9mIFBocmFzZSBhbmQgRmFibGUgXQoJMS4gIEEgd2VsbC1rbm93biB0cm9waWNhbCBwcmVkYXRvciAoX0ZlbGlzIHRpZ3Jpc18pOiBhCglmZWxpbmUuICBJdCBoYXMgYSB5ZWxsb3dpc2ggc2tpbiB3aXRoIGRhcmtlciBzcG90cyBvcgoJc3RyaXBlcy4gIDIuICBGaWd1cmF0aXZlOiBfYSBwYXBlciB0aWdlcl8sIHNvbWV0aGluZyB0aGF0IGlzCgltZWFudCB0byBzY2FyZSwgYnV0IGhhcyBubyByZWFsbHkgc2NhcmluZyBlZmZlY3Qgd2hhdHNvZXZlciwKCShhZnRlciBhIHN0YXRlbWVudCBieSBNYW8gWmUgRG9uZywgQXVndXN0IDE5NDYpLgoJCVsgVmFuIERhbGUncyBHcm9vdCBXb29yZGVuYm9layBkZXIgTmVkZXJsYW5kc2UgVGFhbCBdCgoJVHlnZXIhIFR5Z2VyISBidXJuaW5nIGJyaWdodAoJSW4gdGhlIGZvcmVzdHMgb2YgdGhlIG5pZ2h0LAoJV2hhdCBpbW1vcnRhbCBoYW5kIG9yIGV5ZQoJQ291bGQgZnJhbWUgdGh5IGZlYXJmdWwgc3ltbWV0cnk/CgkJWyBUaGUgVHlnZXIsIGJ5IFdpbGxpYW0gQmxha2UgXQoJIllvdSBrbm93IHNhbG1vbiwgU2FyZ2UsIiBzYWlkIE5vYmJ5LgoJIkl0IGlzIGEgZmlzaCBvZiB3aGljaCBJIGFtIGF3YXJlLCB5ZXMuIgoJIllvdSBrbm93IHRoZXkgc2VsbCBraW5kIG9mIHNsaWNlcyBvZiBpdCBpbiB0aW5zLi4uIgoJIlNvIEkgYW0gZ2l2ZW4gdG8gdW5kZXJzdGFuZCwgeWVzLiIKCSJXZWVsbC4uLmhvdyBjb21lIGFsbCB0aGUgdGlucyBhcmUgdGhlIHNhbWUgc2l6ZT8gIFNhbG1vbgoJZ2V0cyB0aGlubmVyIGF0IGJvdGggZW5kcy4iCgkiSW50ZXJlc3RpbmcgcG9pbnQsIE5vYmJ5LiAgSSB0aGluay0iCgkJWyBTb3VsIE11c2ljLCBieSBUZXJyeSBQcmF0Y2hldHQgXQoJTGVzcyB0aGFuIHRoaXJ0eSBDYXQgdHJpYmVzIG5vdyBzdXJ2aXZlZCwgcm9hbWluZyB0aGUgY2FyZ28KCWRlY2tzIG9uIHRoZWlyIGhpbmQgbGVncyBpbiBhIGRlc3BlcmF0ZSBzZWFyY2ggZm9yIGZvb2QuCglCdXQgdGhlIGZvb2QgaGFkIGdvbmUuCglUaGUgc3VwcGxpZXMgd2VyZSBmaW5pc2hlZC4KCVdlYWsgYW5kIGFpbGluZywgdGhleSBwcmF5ZWQgYXQgdGhlIHN1cHBseSBob2xkJ3Mgc2lsdmVyCgltb3VudGFpbnM6IGh1Z2UgdG93ZXJpbmcgYWNyZXMgb2YgbWV0YWwgcm9ja3Mgd2hpY2gsIGluIHRoZWlyCglwYWdhbiB3YXksIHRoZSBtdXRhbnQgQ2F0cyBiZWxpZXZlZCB3YXRjaGVkIG92ZXIgdGhlbS4KCUFtaWQgdGhlIHdhaWxpbmcgYW5kIHRoZSBzY3JlZWNoaW5nIG9uZSBDYXQgc3Rvb2QgdXAgYW5kIGhlbGQKCWFsb2Z0IHRoZSBzYWNyZWQgaWNvbi4gIFRoZSBpY29uIHdoaWNoIGhhZCBiZWVuIHBhc3NlZCBkb3duCglhcyBob2x5LCBhbmQgb25lIGRheSB3b3VsZCBtYWtlIGl0cyB1c2Uga25vd24uCglJdCB3YXMgYSBwaWVjZSBvZiBWLXNoYXBlZCBtZXRhbCB3aXRoIGEgcmV2b2x2aW5nIGhhbmRsZSBvbgoJaXRzIGhlYWQuCglIZSB0b29rIGRvd24gYSBzaWx2ZXIgcm9jayBmcm9tIHRoZSBzaWx2ZXIgbW91bnRhaW4sIHdoaWxlCgl0aGUgb3RoZXIgQ2F0cyBjb3dlcmVkIGFuZCBzY3JlYW1lZCBhdCB0aGUgYmxhc3BoZW15LgoJSGUgcGxhY2VkIHRoZSBpY29uIG9uIHRoZSByaW0gb2YgdGhlIHJvY2ssIGFuZCB0dXJuZWQgdGhlCgloYW5kbGUuCglBbmQgdGhlIGhhbmRsZSB0dXJuZWQuCglBbmQgdGhlIHJvY2sgb3BlbmVkLgoJQW5kIGluc2lkZSB0aGUgcm9jayB3YXMgQWxwaGFiZXR0aSBzcGFnaGV0dGkgaW4gdG9tYXRvIHNhdWNlLgoJCVsgUmVkIER3YXJmLCBieSBSb2IgR3JhbnQgYW5kIERvdWcgTmF5bG9yIF0KCUdhZWEsIG1vdGhlciBlYXJ0aCwgYXJvc2UgZnJvbSB0aGUgQ2hhb3MgYW5kIGdhdmUgYmlydGggdG8KCVVyYW51cywgaGVhdmVuLCB3aG8gYmVjYW1lIGhlciBjb25zb3J0LiAgVXJhbnVzIGhhdGVkIGFsbAoJdGhlaXIgY2hpbGRyZW4sIGJlY2F1c2UgaGUgZmVhcmVkIHRoZXkgbWlnaHQgY2hhbGxlbmdlIGhpcwoJb3duIGF1dGhvcml0eS4gIFRob3NlIGNoaWxkcmVuLCB0aGUgVGl0YW5zLCB0aGUgR2lnYW50ZXMsCglhbmQgdGhlIEN5Y2xvcHMsIHdlcmUgYmFuaXNoZWQgdG8gdGhlIG5ldGhlciB3b3JsZC4gIFRoZWlyCgllbnJhZ2VkIG1vdGhlciBldmVudHVhbGx5IHJlbGVhc2VkIHRoZSB5b3VuZ2VzdCB0aXRhbiwKCUNocm9ub3MgKHRpbWUpLCBhbmQgZW5jb3VyYWdlZCBoaW0gdG8gY2FzdHJhdGUgaGlzIGZhdGhlciBhbmQKCXJ1bGUgaW4gaGlzIHBsYWNlLiAgTGF0ZXIsIGhlIHRvbyB3YXMgY2hhbGxlbmdlZCBieSBoaXMgb3duCglzb24sIFpldXMsIGFuZCBoZSBhbmQgaGlzIGZlbGxvdyB0aXRhbnMgd2VyZSBvdXN0ZWQgZnJvbQoJTW91bnQgT2x5bXB1cy4KCQlbIEdyZWVrIE15dGhvbG9neSwgYnkgUmljaGFyZCBQYXRyaWNrIF0KCUFsdW1pbnVtIHNpbGljYXRlIG1pbmVyYWwgd2l0aCBlaXRoZXIgaHlkcm94eWwgcmFkaWNhbHMgb3IKCWZsdW9yaW5lLCBBbDJTaU80KEYsT0gpMiwgdXNlZCBhcyBhIGdlbS4gIEl0IGlzIGNvbW1vbmx5Cgljb2xvcmxlc3Mgb3Igc29tZSBzaGFkZSBvZiBwYWxlIHllbGxvdyB0byB3aW5lLXllbGxvdzsKCS4uLiBUaGUgc3RvbmUgaXMgdHJhbnNwYXJlbnQgd2l0aCBhIHZpdHJlb3VzIGx1c3Rlci4gIEl0IGhhcwoJcGVyZmVjdCBjbGVhdmFnZSBvbiB0aGUgYmFzYWwgcGluYWNvaWQsIGJ1dCBpdCBpcyBuZXZlcnRoZWxlc3MKCWhhcmQgYW5kIGR1cmFibGUuICBUaGUgYnJpbGxpYW50IGN1dCBpcyBjb21tb25seSB1c2VkLiAgVG9wYXoKCWNyeXN0YWxzLCB3aGljaCBhcmUgb2YgdGhlIG9ydGhvcmhvbWJpYyBzeXN0ZW0sIG9jY3VyIGluIGhpZ2hseQoJYWNpZCBpZ25lb3VzIHJvY2tzLCBlLmcuLCBncmFuaXRlcyBhbmQgcmh5b2xpdGVzLCBhbmQgaW4KCW1ldGFtb3JwaGljIHJvY2tzLCBlLmcuLCBnbmVpc3NlcyBhbmQgc2NoaXN0cy4KCQlbIFRoZSBDb2x1bWJpYSBFbmN5Y2xvcGVkaWEsIFNpeHRoIEVkaXRpb24gXQoJIkdvbGQgaXMgdHJpZWQgYnkgYSB0b3VjaHN0b25lLCBtZW4gYnkgZ29sZC4iCgkJWyBDaGlsb24gKGMuIDU2MCBCQykgXQoJVGhlIHJvYWQgZnJvbSBBbmtoLU1vcnBvcmsgdG8gQ2hyaW0gaXMgaGlnaCwgd2hpdGUgYW5kCgl3aW5kaW5nLCBhIHRoaXJ0eS1sZWFndWUgc3RyZXRjaCBvZiBwb3Rob2xlcyBhbmQgaGFsZi1idXJpZWQKCXJvY2tzIHRoYXQgc3BpcmFscyBhcm91bmQgbW91bnRhaW5zIGFuZCBkaXBzIGludG8gY29vbCBncmVlbgoJdmFsbGV5cyBvZiBjaXRydXMgdHJlZXMsIGNyb3NzZXMgbGlhbmEtd2ViYmVkIGdvcmdlcyBvbgoJY3JlYWtpbmcgcm9wZSBicmlkZ2VzIGFuZCBpcyBnZW5lcmFsbHkgbW9yZSBwaWN0dXJlc3F1ZSB0aGFuCgl1c2VmdWwuCglQaWN0dXJlc3F1ZS4gIFRoYXQgd2FzIGEgbmV3IHdvcmQgdG8gUmluY2V3aW5kIHRoZSB3aXphcmQKCShCTWdjLCBVbnNlZW4gVW5pdmVyc2l0eSBbZmFpbGVkXSkuICBJdCB3YXMgb25lIG9mIGEgbnVtYmVyCgloZSBoYWQgcGlja2VkIHVwIHNpbmNlIGxlYXZpbmcgdGhlIGNoYXJyZWQgcnVpbnMgb2YKCUFua2gtTW9ycG9yay4gIFF1YWludCB3YXMgYW5vdGhlciBvbmUuICBQaWN0dXJlc3F1ZSBtZWFudCAtLQoJaGUgZGVjaWRlZCBhZnRlciBjYXJlZnVsIG9ic2VydmF0aW9uIG9mIHRoZSBzY2VuZXJ5IHRoYXQKCWluc3BpcmVkIFR3b2Zsb3dlciB0byB1c2UgdGhlIHdvcmQgLS0gdGhhdCB0aGUgbGFuZHNjYXBlIHdhcwoJaG9ycmlibHkgcHJlY2lwaXRvdXMuICBRdWFpbnQsIHdoZW4gdXNlZCB0byBkZXNjcmliZSB0aGUKCW9jY2FzaW9uYWwgdmlsbGFnZSB0aHJvdWdoIHdoaWNoIHRoZXkgcGFzc2VkLCBtZWFudCBmZXZlci0KCXJpZGRlbiBhbmQgdHVtYmxlZG93bi4KCVR3b2Zsb3dlciB3YXMgYSB0b3VyaXN0LCB0aGUgZmlyc3QgZXZlciBzZWVuIG9uIHRoZSBkaXNjd29ybGQuCglUb3VyaXN0LCBSaW5jZXdpbmQgaGFkIGRlY2lkZWQsIG1lYW50ICJpZGlvdCIuCgkJWyBUaGUgQ29sb3VyIG9mIE1hZ2ljLCBieSBUZXJyeSBQcmF0Y2hldHQgXQoJVGhlIEhpdGNoaGlrZXIncyBHdWlkZSB0byB0aGUgR2FsYXh5IGhhcyBhIGZldyB0aGluZ3MgdG8gc2F5CglvbiB0aGUgc3ViamVjdCBvZiB0b3dlbHMuCglBIHRvd2VsLCBpdCBzYXlzLCBpcyBhYm91dCB0aGUgbW9zdCBtYXNzaXZlbHkgdXNlZnVsIHRoaW5nCglhbiBpbnRlcnN0ZWxsYXIgaGl0Y2hoaWtlciBjYW4gaGF2ZS4gIFBhcnRseSBpdCBoYXMgZ3JlYXQKCXByYWN0aWNhbCB2YWx1ZS4gIFlvdSBjYW4gd3JhcCBpdCBhcm91bmQgeW91IGZvciB3YXJtdGggYXMKCXlvdSBib3VuZCBhY3Jvc3MgdGhlIGNvbGQgbW9vbnMgb2YgSmFnbGFuIEJldGE7IHlvdSBjYW4gbGllCglvbiBpdCBvbiB0aGUgYnJpbGxpYW50IG1hcmJsZS1zYW5kZWQgYmVhY2hlcyBvZiBTYW50cmFnaW51cwoJViwgaW5oYWxpbmcgdGhlIGhlYWR5IHNlYSB2YXBvcnM7IHlvdSBjYW4gc2xlZXAgdW5kZXIgaXQKCWJlbmVhdGggdGhlIHN0YXJzIHdoaWNoIHNoaW5lIHNvIHJlZGx5IG9uIHRoZSBkZXNlcnQgd29ybGQKCW9mIEtha3JhZm9vbjsgdXNlIGl0IHRvIHNhaWwgYSBtaW5pcmFmdCBkb3duIHRoZSBzbG93IGhlYXZ5CglSaXZlciBNb3RoOyB3ZXQgaXQgZm9yIHVzZSBpbiBoYW5kLXRvLWhhbmQgY29tYmF0OyB3cmFwIGl0Cglyb3VuZCB5b3VyIGhlYWQgdG8gd2FyZCBvZmYgbm94aW91cyBmdW1lcyBvciBhdm9pZCB0aGUgZ2F6ZQoJb2YgdGhlIFJhdmVub3VzIEJ1Z2JsYXR0ZXIgQmVhc3Qgb2YgVHJhYWwgKGEgbWluZC1ib2dnbGluZ2x5CglzdHVwaWQgYW5pbWFsLCBpdCBhc3N1bWVzIHRoYXQgaWYgeW91IGNhbid0IHNlZSBpdCwgaXQgY2FuJ3QKCXNlZSB5b3UgLSBkYWZ0IGFzIGEgYnJ1c2gsIGJ1dCB2ZXJ5IHZlcnkgcmF2ZW5vdXMpOyB5b3UgY2FuCgl3YXZlIHlvdXIgdG93ZWwgaW4gZW1lcmdlbmNpZXMgYXMgYSBkaXN0cmVzcyBzaWduYWwsIGFuZCBvZgoJY291cnNlIGRyeSB5b3Vyc2VsZiBvZmYgd2l0aCBpdCBpZiBpdCBzdGlsbCBzZWVtcyB0byBiZSBjbGVhbgoJZW5vdWdoLgoJICBbIFRoZSBIaXRjaGhpa2VyJ3MgR3VpZGUgdG8gdGhlIEdhbGF4eSwgYnkgRG91Z2xhcyBBZGFtcyBdCglUb3dlcnMgKF9icm9vZGluZ18sIF9kYXJrXykgc3RhbmQgYWxvbmUgaW4gV2FzdGUgQXJlYXMgYW5kCglhbG1vc3QgYWx3YXlzIGJlbG9uZyB0byBXaXphcmRzLiAgQWxsIGFyZSBzZXZlcmFsIHN0b3JpZXMgaGlnaCwKCXJvdW5kLCBkb29ybGVzcywgdmlydHVhbGx5IHdpbmRvd2xlc3MsIGFuZCBjb21wb3NlZCBvZiBzbW9vdGgKCWJsb2NrcyBvZiBtYXNvbnJ5IHRoYXQgbWFrZSB0aGVtIHZlcnkgaGFyZCB0byBjbGltYi4gWy4uLl0KCVlvdSB3aWxsIGhhdmUgdG8gZ28gdG8gYSBUb3dlciBhbmQgdGhlbiBicmVhayBpbnRvIGl0IGF0IHNvbWUKCXBvaW50IHRvd2FyZHMgdGhlIGVuZCBvZiB5b3VyIFRvdXIuCgkgIFsgVGhlIFRvdWdoIEd1aWRlIHRvIEZhbnRhc3lsYW5kLCBieSBEaWFuYSBXeW5uZSBKb25lcyBdCglJIGtuZXcgbXkgRXJpayB0b28gd2VsbCB0byBmZWVsIGF0IGFsbCBjb21mb3J0YWJsZSBvbiBqdW1waW5nCglpbnRvIGhpcyBob3VzZS4gIEkga25ldyB3aGF0IGhlIGhhZCBtYWRlIG9mIGEgY2VydGFpbiBwYWxhY2UgYXQKCU1hemVuZGVyYW4uICBGcm9tIGJlaW5nIHRoZSBtb3N0IGhvbmVzdCBidWlsZGluZyBjb25jZWl2YWJsZSwgaGUKCXNvb24gdHVybmVkIGl0IGludG8gYSBob3VzZSBvZiB0aGUgdmVyeSBkZXZpbCwgd2hlcmUgeW91IGNvdWxkCglub3QgdXR0ZXIgYSB3b3JkIGJ1dCBpdCB3YXMgb3ZlcmhlYXJkIG9yIHJlcGVhdGVkIGJ5IGFuIGVjaG8uCglXaXRoIGhpcyB0cmFwLWRvb3JzIHRoZSBtb25zdGVyIHdhcyByZXNwb25zaWJsZSBmb3IgZW5kbGVzcwoJdHJhZ2VkaWVzIG9mIGFsbCBraW5kcy4KCQlbIFRoZSBQaGFudG9tIG9mIHRoZSBPcGVyYSwgYnkgR2FzdG9uIExlcm91eCBdCglUaGUgdHJhcHBlciBpcyBhIGNyZWF0dXJlIHdoaWNoIGhhcyBldm9sdmVkIGEgY2hhbWVsZW9uLWxpa2UKCWFiaWxpdHkgdG8gYmxlbmQgaW50byB0aGUgZHVuZ2VvbiBzdXJyb3VuZGluZ3MuICBJdCBjYXB0dXJlcwoJaXRzIHByZXkgYnkgcmVtYWluaW5nIHZlcnkgc3RpbGwgYW5kIGJsZW5kaW5nIGludG8gdGhlCglzdXJyb3VuZGluZyBkdW5nZW9uIGZlYXR1cmVzLCB1bnRpbCBhbiB1bnN1c3BlY3RpbmcgY3JlYXR1cmUKCXBhc3NlcyBieS4gIEl0IHdyYXBzIGl0c2VsZiBhcm91bmQgaXRzIHByZXkgYW5kIGRpZ2VzdHMgaXQuCglJIHRoaW5rIHRoYXQgSSBzaGFsbCBuZXZlciBzZWUKCUEgcG9lbSBsb3ZlbHkgYXMgYSB0cmVlLgoJQSB0cmVlIHdob3NlIGh1bmdyeSBtb3V0aCBpcyBwcmVzdAoJQWdhaW5zdCB0aGUgZWFydGgncyBzd2VldCBmbG93aW5nIGJyZWFzdDsKCUEgdHJlZSB0aGF0IGxvb2tzIGF0IEdvZCBhbGwgZGF5LAoJQW5kIGxpZnRzIGhlciBsZWFmeSBhcm1zIHRvIHByYXk7CglBIHRyZWUgdGhhdCBtYXkgaW4gU3VtbWVyIHdlYXIKCUEgbmVzdCBvZiByb2JpbnMgaW4gaGVyIGhhaXI7CglVcG9uIHdob3NlIGJvc29tIHNub3cgaGFzIGxhaW47CglXaG8gaW50aW1hdGVseSBsaXZlcyB3aXRoIHJhaW4uCglQb2VtcyBhcmUgbWFkZSBieSBmb29scyBsaWtlIG1lLAoJQnV0IG9ubHkgR29kIGNhbiBtYWtlIGEgdHJlZS4KCQlbIFRyZWVzLCBieSBKb3ljZSBLaWxtZXIgXQoJSWYgeW91IHN0YXJ0IGZyb20gc2NyYXRjaCwgY29va2luZyB0cmlwZSBpcyBhIGxvbmctZHJhd24tb3V0CglhZmZhaXIuICBGcmVzaCB3aG9sZSB0cmlwZSBjYWxscyBmb3IgYSBtaW5pbXVtIG9mIDEyIGhvdXJzIG9mCgljb29raW5nLCBzb21lIHRpbWUtaG9ub3JlZCByZWNpcGVzIGRlbWFuZGluZyBhcyBtdWNoIGFzIDI0LgoJVG8gcHJlcGFyZSBmcmVzaCB0cmlwZSwgdHJpbSBpZiBuZWNlc3NhcnkuICBXYXNoIGl0IHRob3JvdWdobHksCglzb2FraW5nIG92ZXJuaWdodCwgYW5kIGJsYW5jaCwgZm9yIDEvMiBob3VyIGluIHNhbHRlZCB3YXRlci4KCVdhc2ggd2VsbCBhZ2FpbiwgZHJhaW4gYW5kIGN1dCBmb3IgY29va2luZy4gIFdoZW4gY29va2VkLCB0aGUKCXRleHR1cmUgb2YgdHJpcGUgc2hvdWxkIGJlIGxpa2UgdGhhdCBvZiBzb2Z0IGdyaXN0bGUuICBNb3JlCglvZnRlbiwgYWxhcywgYmVjYXVzZSB0aGUgaGVhdCBoYXMgbm90IGJlZW4ga2VwdCBsb3cgZW5vdWdoLAoJaXQgaGFzIHRoZSBjb25zaXN0ZW5jeSBvZiB3ZXQgc2hvZSBsZWF0aGVyLgoJCVsgSm95IG9mIENvb2tpbmcsIGJ5IEkgUm9tYmF1ZXIgYW5kIE0gQmVja2VyIF0KCVRoZSB0cm9sbCBzaGFtYmxlZCBjbG9zZXIuICBIZSB3YXMgcGVyaGFwcyBlaWdodCBmZWV0IHRhbGwsCglwZXJoYXBzIG1vcmUuICBIaXMgZm9yd2FyZCBzdG9vcCwgd2l0aCBhcm1zIGRhbmdsaW5nIHBhc3QKCXRoaWNrIGNsYXctZm9vdGVkIGxlZ3MgdG8gdGhlIGdyb3VuZCwgbWFkZSBpdCBoYXJkIHRvIHRlbGwuCglUaGUgaGFpcmxlc3MgZ3JlZW4gc2tpbiBtb3ZlZCB1cG9uIGhpcyBib2R5LiAgSGlzIGhlYWQgd2FzIGEKCWdhc2ggb2YgYSBtb3V0aCwgYSB5YXJkLWxvbmcgbm9zZSwgYW5kIHR3byBleWVzIHdoaWNoIGRyYW5rCgl0aGUgZmVlYmxlIHRvcmNobGlnaHQgYW5kIG5ldmVyIGdhdmUgYmFjayBhIGdsZWFtLgoJWy4uLl0KCUxpa2UgYSBodWdlIGdyZWVuIHNwaWRlciwgdGhlIHRyb2xsJ3Mgc2V2ZXJlZCBoYW5kIHJhbiBvbiBpdHMKCWZpbmdlcnMuICBBY3Jvc3MgdGhlIG1vdW5kZWQgZmxvb3IsIHVwIG9udG8gYSBsb2cgd2l0aCBvbmUKCXRhbG9uZWQgZm9yZWZpbmdlciB0byBob29rIGl0IG92ZXIgdGhlIGJhcmssIGRvd24gYWdhaW4gaXQKCXNjcmFtYmxlZCwgdW50aWwgaXQgZm91bmQgdGhlIGN1dCB3cmlzdC4gIEFuZCB0aGVyZSBpdCBncmV3CglmYXN0LiAgVGhlIHRyb2xsJ3Mgc21hc2hlZCBoZWFkIHNlZXRoZWQgYW5kIGtuaXQgdG9nZXRoZXIuCglIZSBjbGFtYmVyZWQgYmFjayBvbiBoaXMgZmVldCBhbmQgZ3Jpbm5lZCBhdCB0aGVtLiAgVGhlCgl3YW5pbmcgZmFnZ290IGNhc3QgcmVkIGxpZ2h0IG92ZXIgaGlzIGZhbmdzLgoJCVsgVGhyZWUgSGVhcnRzIGFuZCBUaHJlZSBMaW9ucywgYnkgUG91bCBBbmRlcnNvbiBdCglUaGlzIG1vc3QgYW5jaWVudCBvZiBzd29yZHMgaGFzIGJlZW4gcGFzc2VkIGRvd24gdGhyb3VnaCB0aGUKCWxlYWRlcnNoaXAgb2YgdGhlIFNhbXVyYWkgbGVnaW9ucyBmb3IgaHVuZHJlZHMgb2YgeWVhcnMuICBJdAoJaXMgc2FpZCB0byBncmFudCBsdWNrIHRvIGl0cyB3aWVsZGVyLCBidXQgaXRzIG1haW4gcG93ZXIgaXMKCXRlcnJpYmxlIHRvIGJlaG9sZC4gIEl0IGhhcyB0aGUgY2FwYWJpbGl0eSB0byBjdXQgaW4gaGFsZiBhbnkKCWNyZWF0dXJlIGl0IGlzIHdpZWxkZWQgYWdhaW5zdCwgaW5zdGFudGx5IGtpbGxpbmcgdGhlbS4KCVRoZSB0c3VydWdpLCBhbHNvIGtub3duIGFzIHRoZSBsb25nIHNhbXVyYWkgc3dvcmQsIGlzIGFuCglleHRyZW1lbHkgc2hhcnAsIHR3by1oYW5kZWQgYmxhZGUgZmF2b3JlZCBieSB0aGUgc2FtdXJhaS4KCUl0IGlzIG1hZGUgb2YgaGFyZGVuZWQgc3RlZWwsIGFuZCBpcyBtYW51ZmFjdHVyZWQgdXNpbmcgYQoJc3BlY2lhbCBwcm9jZXNzLCBjYXVzaW5nIGl0IHRvIG5ldmVyIHJ1c3QuICBUaGUgdHN1cnVnaSBpcwoJcnVtb3JlZCB0byBiZSBzbyBzaGFycCB0aGF0IGl0IGNhbiBvY2Nhc2lvbmFsbHkgY3V0CglvcHBvbmVudHMgaW4gaGFsZiEKCVRVQkFMOiAgVGhlcmUgY2FtZSBkaXZlcnMgb2YgQW50b25pbydzIGNyZWRpdG9ycyBpbiBteSBjb21wYW55Cgl0byBWZW5pY2UgdGhhdCBzd2VhciBoZSBjYW5ub3QgY2hvb3NlIGJ1dCBicmVhay4KCVNIWUxPQ0s6ICBJIGFtIHZlcnkgZ2xhZCBvZiBpdDsgSSdsbCBwbGFndWUgaGltLCBJJ2xsIHRvcnR1cmUKCWhpbTsgSSBhbSBnbGFkIG9mIGl0LgoJVFVCQUw6ICBPbmUgb2YgdGhlbSBzaG93ZWQgbWUgYSByaW5nIHRoYXQgaGUgaGFkIG9mIHlvdXIKCWRhdWdodGVyIGZvciBhIG1vbmtleS4KCVNIWUxPQ0s6ICBPdXQgdXBvbiBoZXIhICBUaG91IHRvcnR1cmVzdCBtZSwgVHViYWwuICBJdCB3YXMgbXkKCXR1cnF1b2lzZTsgSSBoYWQgaXQgb2YgTGVhaCB3aGVuIEkgd2FzIGEgYmFjaGVsb3I7IEkgd291bGQKCW5vdCBoYXZlIGdpdmVuIGl0IGZvciBhIHdpbGRlcm5lc3Mgb2YgbW9ua2V5cy4KCQlbIFRoZSBNZXJjaGFudCBvZiBWZW5pY2UsIGJ5IFdpbGxpYW0gU2hha2VzcGVhcmUgXQoJIlJpbmNld2luZCEiCglUd29mbG93ZXIgc3ByYW5nIG9mZiB0aGUgYmVkLiAgVGhlIHdpemFyZCBqdW1wZWQgYmFjaywKCXdyZW5jaGluZyBoaXMgZmVhdHVyZXMgaW50byBhIHNtaWxlLgoJIk15IGRlYXIgY2hhcCwgcmlnaHQgb24gdGltZSEgIFdlJ2xsIGp1c3QgaGF2ZSBsdW5jaCwgYW5kCgl0aGVuIEknbSBzdXJlIHlvdSd2ZSBnb3QgYSB3b25kZXJmdWwgcHJvZ3JhbW1lIGxpbmVkIHVwIGZvcgoJdGhpcyBhZnRlcm5vb24hIgoJIkVyIC0tIgoJIlRoYXQncyBncmVhdCEiCglSaW5jZXdpbmQgdG9vayBhIGRlZXAgYnJlYXRoLiAgIkxvb2ssIiBoZSBzYWlkIGRlc3BlcmF0ZWx5LAoJImxldCdzIGVhdCBzb21ld2hlcmUgZWxzZS4gIFRoZXJlJ3MgYmVlbiBhIGJpdCBvZiBhIGZpZ2h0Cglkb3duIGJlbG93LiIKCSJBIHRhdmVybiBicmF3bD8gIFdoeSBkaWRuJ3QgeW91IHdha2UgbWUgdXA/IgoJIldlbGwsIHlvdSBzZWUsIEkgLSBfd2hhdF8/IgoJIkkgdGhvdWdodCBJIG1hZGUgbXlzZWxmIGNsZWFyIHRoaXMgbW9ybmluZywgUmluY2V3aW5kLiAgSQoJd2FudCB0byBzZWUgZ2VudWluZSBNb3Jwb3JraWFuIGxpZmUgLSB0aGUgc2xhdmUgbWFya2V0LCB0aGUKCVdob3JlIFBpdHMsIHRoZSBUZW1wbGUgb2YgU21hbGwgR29kcywgdGhlIEJlZ2dhcidzIEd1aWxkLi4uCglhbmQgYSBnZW51aW5lIHRhdmVybiBicmF3bC4iICBBIGZhaW50IG5vdGUgb2Ygc3VzcGljaW9uCgllbnRlcmVkIFR3b2Zsb3dlcidzIHZvaWNlLiAgIllvdSBfZG9fIGhhdmUgdGhlbSwgZG9uJ3QgeW91PwoJWW91IGtub3csIHBlb3BsZSBzd2luZ2luZyBvbiBjaGFuZGVsaWVycywgc3dvcmRmaWdodHMgb3ZlcgoJdGhlIHRhYmxlLCB0aGUgc29ydCBvZiB0aGluZyBIcnVuIHRoZSBCYXJiYXJpYW4gYW5kIHRoZQoJV2Vhc2VsIGFyZSBhbHdheXMgZ2V0dGluZyBpbnZvbHZlZCBpbi4gIFlvdSBrbm93IC0tCglfZXhjaXRlbWVudF8uIgoJCVsgVGhlIENvbG91ciBvZiBNYWdpYywgYnkgVGVycnkgUHJhdGNoZXR0IF0KCVlldCByZW1haW5zIHRoYXQgb25lIG9mIHRoZSBBZXNpciB3aG8gaXMgY2FsbGVkIFR5cjoKCWhlIGlzIG1vc3QgZGFyaW5nLCBhbmQgYmVzdCBpbiBzdG91dG5lc3Mgb2YgaGVhcnQsIGFuZCBoZQoJaGFzIG11Y2ggYXV0aG9yaXR5IG92ZXIgdmljdG9yeSBpbiBiYXR0bGU7IGl0IGlzIGdvb2QgZm9yCgltZW4gb2YgdmFsb3IgdG8gaW52b2tlIGhpbS4gIEl0IGlzIGEgcHJvdmVyYiwgdGhhdCBoZSBpcwoJVHlyLXZhbGlhbnQsIHdobyBzdXJwYXNzZXMgb3RoZXIgbWVuIGFuZCBkb2VzIG5vdCB3YXZlci4KCUhlIGlzIHdpc2UsIHNvIHRoYXQgaXQgaXMgYWxzbyBzYWlkLCB0aGF0IGhlIHRoYXQgaXMgd2lzZXN0CglpcyBUeXItcHJ1ZGVudC4gIFRoaXMgaXMgb25lIHRva2VuIG9mIGhpcyBkYXJpbmc6ICB3aGVuIHRoZQoJQWVzaXIgZW50aWNlZCBGZW5yaXMtV29sZiB0byB0YWtlIHVwb24gaGltIHRoZSBmZXR0ZXIgR2xlaXBuaXIsCgl0aGUgd29sZiBkaWQgbm90IGJlbGlldmUgdGhlbSwgdGhhdCB0aGV5IHdvdWxkIGxvb3NlIGhpbSwKCXVudGlsIHRoZXkgbGFpZCBUeXIncyBoYW5kIGludG8gaGlzIG1vdXRoIGFzIGEgcGxlZGdlLiAgQnV0Cgl3aGVuIHRoZSBBZXNpciB3b3VsZCBub3QgbG9vc2UgaGltLCB0aGVuIGhlIGJpdCBvZmYgdGhlIGhhbmQKCWF0IHRoZSBwbGFjZSBub3cgY2FsbGVkICd0aGUgd29sZidzIGpvaW50OycgYW5kIFR5ciBpcyBvbmUtCgloYW5kZWQsIGFuZCBpcyBub3QgY2FsbGVkIGEgcmVjb25jaWxlciBvZiBtZW4uCgkJCVsgVGhlIFByb3NlIEVkZGEsIGJ5IFNub3JyaSBTdHVybHVzb24gXQoJVW1iZXIgaHVsa3MgYXJlIHBvd2VyZnVsIHN1YnRlcnJhbmVhbiBwcmVkYXRvcnMgd2hvc2UKCWlyb24tbGlrZSBjbGF3cyBhbGxvdyB0aGVtIHRvIGJ1cnJvdyB0aHJvdWdoIHNvbGlkIHN0b25lIGluCglzZWFyY2ggb2YgcHJleS4gIFRoZXkgYXJlIHRyZW1lbmRvdXNseSBzdHJvbmc7IG11c2NsZXMgYnVsZ2UKCWJlbmVhdGggdGhlaXIgdGhpY2ssIHNjYWx5IGhpZGVzIGFuZCB0aGVpciBwb3dlcmZ1bCBhcm1zIGFuZAoJbGVncyBhbGwgZW5kIGluIGdyZWF0IGNsYXdzLgoJTWVuIGhhdmUgYWx3YXlzIHNvdWdodCB0aGUgZWx1c2l2ZSB1bmljb3JuLCBmb3IgdGhlIHNpbmdsZQoJdHdpc3RlZCBob3JuIHdoaWNoIHByb2plY3RlZCBmcm9tIGl0cyBmb3JlaGVhZCB3YXMgdGhvdWdodCB0bwoJYmUgYSBwb3dlcmZ1bCB0YWxpc21hbi4gIEl0IHdhcyBzYWlkIHRoYXQgdGhlIHVuaWNvcm4gaGFkCglzaW1wbHkgdG8gZGlwIHRoZSB0aXAgb2YgaXRzIGhvcm4gaW4gYSBtdWRkeSBwb29sIGZvciB0aGUgd2F0ZXIKCXRvIGJlY29tZSBwdXJlLiAgTWVuIGFsc28gYmVsaWV2ZWQgdGhhdCB0byBkcmluayBmcm9tIHRoaXMgaG9ybgoJd2FzIGEgcHJvdGVjdGlvbiBhZ2FpbnN0IGFsbCBzaWNrbmVzcywgYW5kIHRoYXQgaWYgdGhlIGhvcm4gd2FzCglncm91bmQgdG8gYSBwb3dkZXIgaXQgd291bGQgYWN0IGFzIGFuIGFudGlkb3RlIHRvIGFsbCBwb2lzb25zLgoJTGVzcyB0aGFuIDIwMCB5ZWFycyBhZ28gaW4gRnJhbmNlLCB0aGUgaG9ybiBvZiBhIHVuaWNvcm4gd2FzCgl1c2VkIGluIGEgY2VyZW1vbnkgdG8gdGVzdCB0aGUgcm95YWwgZm9vZCBmb3IgcG9pc29uLgoKCUFsdGhvdWdoIG9ubHkgdGhlIHNpemUgb2YgYSBzbWFsbCBob3JzZSwgdGhlIHVuaWNvcm4gaXMgYSB2ZXJ5CglmaWVyY2UgYmVhc3QsIGNhcGFibGUgb2Yga2lsbGluZyBhbiBlbGVwaGFudCB3aXRoIGEgc2luZ2xlCgl0aHJ1c3QgZnJvbSBpdHMgaG9ybi4gIEl0cyBmbGVldG5lc3Mgb2YgZm9vdCBhbHNvIG1ha2VzIHRoaXMKCXNvbGl0YXJ5IGNyZWF0dXJlIGRpZmZpY3VsdCB0byBjYXB0dXJlLiAgSG93ZXZlciwgaXQgY2FuIGJlCgl0YW1lZCBhbmQgY2FwdHVyZWQgYnkgYSBtYWlkZW4uICBNYWRlIGdlbnRsZSBieSB0aGUgc2lnaHQgb2YgYQoJdmlyZ2luLCB0aGUgdW5pY29ybiBjYW4gYmUgbHVyZWQgdG8gbGF5IGl0cyBoZWFkIGluIGhlciBsYXAsIGFuZAoJaW4gdGhpcyBkb2NpbGUgbW9vZCwgdGhlIG1haWRlbiBtYXkgc2VjdXJlIGl0IHdpdGggYSBnb2xkZW4gcm9wZS4KCSAgWyBNeXRoaWNhbCBCZWFzdHMsIGJ5IERlaXJkcmUgSGVhZG9uIChUaGUgTGVwcmVjaGF1biBMaWJyYXJ5KSBdCgoJTWFydGluIHRvb2sgYSBzbWFsbCBzaXAgb2YgYmVlci4gICJBbG1vc3QgcmVhZHksIiBoZSBzYWlkLgoJIllvdSBob2xkIHlvdXIgYmVlciBhd2Z1bGx5IHdlbGwuIgoJVGxpbmdlbCBsYXVnaGVkLiAgIkEgdW5pY29ybidzIGhvcm4gaXMgYSBkZXRveGljYW50LiAgSXRzCglwb3NzZXNzaW9uIGlzIGEgdW5pdmVyc2FsIHJlbWVkeS4gIEkgd2FpdCB1bnRpbCBJIHJlYWNoIHRoZQoJd2FybSBnbG93IHN0YWdlLCB0aGVuIEkgdXNlIG15IGhvcm4gdG8gYnVybiBvZmYgYW55IGV4Y2VzcyBhbmQKCWtlZXAgbWUgcmlnaHQgdGhlcmUuIgoJCVsgVW5pY29ybiBWYXJpYXRpb25zLCBieSBSb2dlciBaZWxhem55IF0KCUFyZWEgb2YgbWFwIHdoaWNoIGlzIGJleW9uZCBsaW1pdGVkIHBlcmNlcHRpb24gcmFuZ2Ugd2hlbgoJdW5kZXJ3YXRlciBvciBlbmd1bGZlZCBieSBhIG1vbnN0ZXIuCglUaGUgVmFsa3lyaWVzIHdlcmUgdGhlIHRoaXJ0ZWVuIGNob29zZXJzIG9mIHRoZSBzbGFpbiwgdGhlCgliZWF1dGlmdWwgd2Fycmlvci1tYWlkcyBvZiBPZGluIHdobyByb2RlIHRocm91Z2ggdGhlIGFpciBhbmQKCW92ZXIgdGhlIHNlYS4gIFRoZXkgd2F0Y2hlZCB0aGUgcHJvZ3Jlc3Mgb2YgdGhlIGJhdHRsZSBhbmQKCXNlbGVjdGVkIHRoZSBoZXJvZXMgd2hvIHdlcmUgdG8gZmFsbCBmaWdodGluZy4gIEFmdGVyIHRoZXkKCXdlcmUgZGVhZCwgdGhlIG1haWRlbnMgcmV3YXJkZWQgdGhlIGhlcm9lcyBieSBraXNzaW5nIHRoZW0KCWFuZCB0aGVuIGxlZCB0aGVpciBzb3VscyB0byBWYWxoYWxsYSwgd2hlcmUgdGhlIHdhcnJpb3JzCglsaXZlZCBoYXBwaWx5IGluIGFuIGlkZWFsIGV4aXN0ZW5jZSwgZHJpbmtpbmcgYW5kIGVhdGluZwoJd2l0aG91dCByZXN0cmFpbnQgYW5kIGZpZ2h0aW5nIG92ZXIgYWdhaW4gdGhlIGJhdHRsZXMgaW4KCXdoaWNoIHRoZXkgZGllZCBhbmQgaW4gd2hpY2ggdGhleSBoYWQgd29uIHRoZWlyIGRlYXRobGVzcwoJZmFtZS4KCSAgICBbIFRoZSBFbmN5Y2xvcGFlZGlhIG9mIE15dGhzIGFuZCBMZWdlbmRzIG9mIEFsbCBOYXRpb25zLAoJCWJ5IEhlcmJlcnQgUm9iaW5zb24gYW5kIEtub3ggV2lsc29uIF0KCUhlIGNhbiB0cmFuc2Zvcm0gaGltc2VsZiB0byB3b2xmLCBhcyB3ZSBnYXRoZXIgZnJvbSB0aGUgc2hpcAoJYXJyaXZhbCBpbiBXaGl0YnksIHdoZW4gaGUgdGVhciBvcGVuIHRoZSBkb2c7IGhlIGNhbiBiZSBhcwoJYmF0LCBhcyBNYWRhbSBNaW5hIHNhdyBoaW0gb24gdGhlIHdpbmRvdyBhdCBXaGl0YnksIGFuZCBhcwoJZnJpZW5kIEpvaG4gc2F3IGhpbSBmbHkgZnJvbSB0aGlzIHNvIG5lYXIgaG91c2UsIGFuZCBhcyBteQoJZnJpZW5kIFF1aW5jZXkgc2F3IGhpbSBhdCB0aGUgd2luZG93IG9mIE1pc3MgTHVjeS4gSGUgY2FuIGNvbWUKCWluIG1pc3Qgd2hpY2ggaGUgY3JlYXRlLS10aGF0IG5vYmxlIHNoaXAncyBjYXB0YWluIHByb3ZlZCBoaW0KCW9mIHRoaXM7IGJ1dCwgZnJvbSB3aGF0IHdlIGtub3csIHRoZSBkaXN0YW5jZSBoZSBjYW4gbWFrZSB0aGlzCgltaXN0IGlzIGxpbWl0ZWQsIGFuZCBpdCBjYW4gb25seSBiZSByb3VuZCBoaW1zZWxmLiBIZSBjb21lIG9uCgltb29ubGlnaHQgcmF5cyBhcyBlbGVtZW50YWwgZHVzdC0tYXMgYWdhaW4gSm9uYXRoYW4gc2F3IHRob3NlCglzaXN0ZXJzIGluIHRoZSBjYXN0bGUgb2YgRHJhY3VsYS4gSGUgYmVjb21lIHNvIHNtYWxsLS13ZQoJb3Vyc2VsdmVzIHNhdyBNaXNzIEx1Y3ksIGVyZSBzaGUgd2FzIGF0IHBlYWNlLCBzbGlwIHRocm91Z2ggYQoJaGFpcmJyZWFkdGggc3BhY2UgYXQgdGhlIHRvbWIgZG9vci4KCQlbIERyYWN1bGEsIGJ5IEJyYW0gU3Rva2VyIF0KCglUaGUgT3hmb3JkIEVuZ2xpc2ggRGljdGlvbmFyeSBpcyBxdWl0ZSB1bmVxdWl2b2NhbDoKCV92YW1waXJlXyAtICJhIHByZXRlcm5hdHVyYWwgYmVpbmcgb2YgYSBtYWxpZ25hbnQgbmF0dXJlIChpbgoJdGhlIG9yaWdpbmFsIGFuZCB1c3VhbCBmb3JtIG9mIHRoZSBiZWxpZWYsIGEgcmVhbmltYXRlZAoJY29ycHNlKSwgc3VwcG9zZWQgdG8gc2VlayBub3VyaXNobWVudCwgb3IgZG8gaGFybSwgYnkgc3Vja2luZwoJdGhlIGJsb29kIG9mIHNsZWVwaW5nIHBlcnNvbnMuIC4uLiIKCQlbXQoJVmVudXMsIHRoZSBnb2RkZXNzIG9mIGxvdmUgYW5kIGJlYXV0eSwgd2FzIHRoZSBkYXVnaHRlciBvZgoJSnVwaXRlciBhbmQgRGlvbmUuICBPdGhlcnMgc2F5IHRoYXQgVmVudXMgc3ByYW5nIGZyb20gdGhlCglmb2FtIG9mIHRoZSBzZWEuICBUaGUgemVwaHlyIHdhZnRlZCBoZXIgYWxvbmcgdGhlIHdhdmVzIHRvCgl0aGUgSXNsZSBvZiBDeXBydXMsIHdoZXJlIHNoZSB3YXMgcmVjZWl2ZWQgYW5kIGF0dGlyZWQgYnkKCXRoZSBTZWFzb25zLCBhbmQgdGhlbiBsZWQgdG8gdGhlIGFzc2VtYmx5IG9mIHRoZSBnb2RzLiAgQWxsCgl3ZXJlIGNoYXJtZWQgd2l0aCBoZXIgYmVhdXR5LCBhbmQgZWFjaCBvbmUgZGVtYW5kZWQgaGVyCglmb3IgaGlzIHdpZmUuICBKdXBpdGVyIGdhdmUgaGVyIHRvIFZ1bGNhbiwgaW4gZ3JhdGl0dWRlIGZvcgoJdGhlIHNlcnZpY2UgaGUgaGFkIHJlbmRlcmVkIGluIGZvcmdpbmcgdGh1bmRlcmJvbHRzLiAgU28KCXRoZSBtb3N0IGJlYXV0aWZ1bCBvZiB0aGUgZ29kZGVzc2VzIGJlY2FtZSB0aGUgd2lmZSBvZiB0aGUKCW1vc3QgaWxsLWZhdm91cmVkIG9mIGdvZHMuCgkJWyBCdWxmaW5jaCdzIE15dGhvbG9neSwgYnkgVGhvbWFzIEJ1bGZpbmNoIF0KCVZsYWQgRHJhY3VsYSB0aGUgSW1wYWxlciB3YXMgYSAxNXRoLUNlbnR1cnkgbW9uYXJjaCBvZiB0aGUKCUJpcmdhdSByZWdpb24gb2YgdGhlIENhcnBhdGhpYW4gTW91bnRhaW5zLCBpbiB3aGF0IGlzIG5vdwoJUm9tYW5pYS4gIEluIFJvbWFuaWFuIGhpc3RvcnkgaGUgaXMgYmVzdCBrbm93biBmb3IgdHdvIHRoaW5ncy4KCU9uZSB3YXMgaGlzIHNraWxsZWQgaGFuZGxpbmcgb2YgdGhlIE90dG9tYW4gVHVya3MsIHdoaWNoIGtlcHQKCXRoZW0gZnJvbSBtYWtpbmcgZnVydGhlciBpbnJvYWRzIGludG8gQ2hyaXN0aWFuIEV1cm9wZS4gIFRoZQoJb3RoZXIgd2FzIHRoZSBydXRobGVzcyBtYW5uZXIgaW4gd2hpY2ggaGUgcmFuIGhpcyBmaWVmZG9tLgoJSGUgZGVhbHQgd2l0aCBwZXJjZWl2ZWQgY2hhbGxlbmdlcnMgdG8gaGlzIHJ1bGUgYnkgaW1wYWxpbmcKCXRoZW0gdXByaWdodCBvbiB3b29kZW4gc3Rha2VzLiAgVmlzaXRpbmcgZGlnbml0YXJpZXMgd2hvCglmYWlsZWQgdG8gZG9mZiB0aGVpciBoYXRzIGhhZCB0aGVtIG5haWxlZCB0byB0aGVpciBoZWFkLgoJU3dpcmxpbmcgY2xvdWRzIG9mIHB1cmUgZWxlbWVudGFsIGVuZXJnaWVzLCB0aGUgdm9ydGljZXMgYXJlCgl0aG91Z2h0IHRvIGJlIHJlbGF0ZWQgdG8gdGhlIGxhcmdlciBlbGVtZW50YWxzLiAgVGhleSBhcmUKCW5vdGVkIGZvciBiZWluZyBhYmxlIHRvIGVudmVsb3AgdW53YXJ5IHRyYXZlbGxlcnMuICBUaGUKCWhhcGxlc3MgZm9vbCB0aHVzIHN3YWxsb3dlZCBieSBhIHZvcnRleCB3aWxsIHNvb24gcGVyaXNoIGZyb20KCWV4cG9zdXJlIHRvIHRoZSBlbGVtZW50IHRoZSB2b3J0ZXggaXMgY29tcG9zZWQgb2YuCglUaGUgdnJvY2sgaXMgb25lIG9mIHRoZSB3ZWFrZXIgZm9ybXMgb2YgZGVtb24uICBJdCByZXNlbWJsZXMKCWEgY3Jvc3MgYmV0d2VlbiBhIGh1bWFuIGJlaW5nIGFuZCBhIHZ1bHR1cmUgYW5kIGRvZXMgcGh5c2ljYWwKCWRhbWFnZSBieSBiaXRpbmcgYW5kIGJ5IHVzaW5nIHRoZSBjbGF3cyBvbiBib3RoIGl0cyBhcm1zIGFuZAoJZmVldC4KCUEgd2FraXphc2hpIHdhcyB1c2VkIGFzIGEgc2FtdXJhaSdzIHdlYXBvbiB3aGVuIHRoZSBrYXRhbmEKCXdhcyB1bmF2YWlsYWJsZS4gIFdoZW4gZW50ZXJpbmcgYSBidWlsZGluZywgYSBzYW11cmFpIHdvdWxkCglsZWF2ZSBoaXMga2F0YW5hIG9uIGEgcmFjayBuZWFyIHRoZSBlbnRyYW5jZS4gIEhvd2V2ZXIsIHRoZQoJd2FraXphc2hpIHdvdWxkIGJlIHdvcm4gYXQgYWxsIHRpbWVzLCBhbmQgdGhlcmVmb3JlLCBpdCBtYWRlCglhIHNpZGVhcm0gZm9yIHRoZSBzYW11cmFpIChzaW1pbGFyIHRvIGEgc29sZGllcidzIHVzZSBvZiBhCglwaXN0b2wpLiAgVGhlIHNhbXVyYWkgd291bGQgaGF2ZSB3b3JuIGl0IGZyb20gdGhlIHRpbWUgdGhleQoJYXdva2UgdG8gdGhlIHRpbWUgdGhleSB3ZW50IHRvIHNsZWVwLiAgSW4gZWFybGllciBwZXJpb2RzLAoJYW5kIGVzcGVjaWFsbHkgZHVyaW5nIHRpbWVzIG9mIGNpdmlsIHdhcnMsIGEgdGFudG8gd2FzIHdvcm4KCWluIHBsYWNlIG9mIGEgd2FraXphc2hpLgoJCVsgV2lraXBlZGlhLCB0aGUgZnJlZSBlbmN5Y2xvcGVkaWEgXQoJJ1NhcnVtYW4hJyBoZSBjcmllZCwgYW5kIGhpcyB2b2ljZSBncmV3IGluIHBvd2VyIGFuZCBhdXRob3JpdHkuCgknQmVob2xkLCBJIGFtIG5vdCBHYW5kYWxmIHRoZSBHcmV5LCB3aG9tIHlvdSBiZXRyYXllZC4gIEkgYW0KCUdhbmRhbGYgdGhlIFdoaXRlLCB3aG8gaGFzIHJldHVybmVkIGZyb20gZGVhdGguICBZb3UgaGF2ZSBubwoJY29sb3VyIG5vdywgYW5kIEkgY2FzdCB5b3UgZnJvbSB0aGUgb3JkZXIgYW5kIGZyb20gdGhlIENvdW5jaWwuJwoJSGUgcmFpc2VkIGhpcyBoYW5kLCBhbmQgc3Bva2Ugc2xvd2x5IGluIGEgY2xlYXIgY29sZCB2b2ljZS4KCSdTYXJ1bWFuLCB5b3VyIHN0YWZmIGlzIGJyb2tlbi4nICBUaGVyZSB3YXMgYSBjcmFjaywgYW5kIHRoZQoJc3RhZmYgc3BsaXQgYXN1bmRlciBpbiBTYXJ1bWFuJ3MgaGFuZCwgYW5kIHRoZSBoZWFkIG9mIGl0CglmZWxsIGRvd24gYXQgR2FuZGFsZidzIGZlZXQuICAnR28hJyBzYWlkIEdhbmRhbGYuICBXaXRoIGEgY3J5CglTYXJ1bWFuIGZlbGwgYmFjayBhbmQgY3Jhd2xlZCBhd2F5LgoJCVsgVGhlIFR3byBUb3dlcnMsIGJ5IEouUi5SLiBUb2xraWVuIF0KCVN1ZGRlbmx5IEFyYWdvcm4gbGVhcHQgdG8gaGlzIGZlZXQuICAiSG93IHRoZSB3aW5kIGhvd2xzISIKCWhlIGNyaWVkLiAgIkl0IGlzIGhvd2xpbmcgd2l0aCB3b2xmLXZvaWNlcy4gIFRoZSBXYXJncyBoYXZlCgljb21lIHdlc3Qgb2YgdGhlIE1vdW50YWlucyEiCgkiTmVlZCB3ZSB3YWl0IHVudGlsIG1vcm5pbmcgdGhlbj8iIHNhaWQgR2FuZGFsZi4gICJJdCBpcyBhcyBJCglzYWlkLiAgVGhlIGh1bnQgaXMgdXAhICBFdmVuIGlmIHdlIGxpdmUgdG8gc2VlIHRoZSBkYXduLCB3aG8KCW5vdyB3aWxsIHdpc2ggdG8gam91cm5leSBzb3V0aCBieSBuaWdodCB3aXRoIHRoZSB3aWxkIHdvbHZlcwoJb24gaGlzIHRyYWlsPyIKCSJIb3cgZmFyIGlzIE1vcmlhPyIgYXNrZWQgQm9yb21pci4KCSJUaGVyZSB3YXMgYSBkb29yIHNvdXRoLXdlc3Qgb2YgQ2FyYWRocmFzLCBzb21lIGZpZnRlZW4gbWlsZXMKCWFzIHRoZSBjcm93IGZsaWVzLCBhbmQgbWF5YmUgdHdlbnR5IGFzIHRoZSB3b2xmIHJ1bnMsIgoJYW5zd2VyZWQgR2FuZGFsZiBncmltbHkuCgkiVGhlbiBsZXQgdXMgc3RhcnQgYXMgc29vbiBhcyBpdCBpcyBsaWdodCB0b21vcnJvdywgaWYgd2UgY2FuLCIKCXNhaWQgQm9yb21pci4gICJUaGUgd29sZiB0aGF0IG9uZSBoZWFycyBpcyB3b3JzZSB0aGFuIHRoZSBvcmMKCXRoYXQgb25lIGZlYXJzLiIKCSJUcnVlISIgc2FpZCBBcmFnb3JuLCBsb29zZW5pbmcgaGlzIHN3b3JkIGluIGl0cyBzaGVhdGguICAiQnV0Cgl3aGVyZSB0aGUgd2FyZyBob3dscywgdGhlcmUgYWxzbyB0aGUgb3JjIHByb3dscy4iCgkJWyBUaGUgRmVsbG93c2hpcCBvZiB0aGUgUmluZywgYnkgSi5SLlIuIFRvbGtpZW4gXQoJVGhleSBoYWQgY29tZSB0b2dldGhlciBhdCB0aGUgZm9yZCBvZiB0aGUgVHJpZGVudCB3aGlsZSB0aGUKCWJhdHRsZSBjcmFzaGVkIGFyb3VuZCB0aGVtLCBSb2JlcnQgd2l0aCBoaXMgd2FyaGFtbWVyIGFuZCBoaXMKCWdyZWF0IGFudGxlcmVkIGhlbG0sIHRoZSBUYXJnYXJ5ZW4gcHJpbmNlIGFybW9yZWQgYWxsIGluCglibGFjay4gIE9uIGhpcyBicmVhc3RwbGF0ZSB3YXMgdGhlIHRocmVlLWhlYWRlZCBkcmFnb24gb2YgaGlzCglIb3VzZSwgd3JvdWdodCBhbGwgaW4gcnViaWVzIHRoYXQgZmxhc2hlZCBsaWtlIGZpcmUgaW4gdGhlCglzdW5saWdodC4gIFRoZSB3YXRlcnMgb2YgdGhlIFRyaWRlbnQgcmFuIHJlZCBhcm91bmQgdGhlCglob292ZXMgb2YgdGhlaXIgZGVzdHJpZXJzIGFzIHRoZXkgY2lyY2xlZCBhbmQgY2xhc2hlZCwgYWdhaW4KCWFuZCBhZ2FpbiwgdW50aWwgYXQgbGFzdCBhIGNydXNoaW5nIGJsb3cgZnJvbSBSb2JlcnQncyBoYW1tZXIKCXN0b3ZlIGluIHRoZSBkcmFnb24gYW5kIHRoZSBjaGVzdCBiZWhpbmQgaXQuICBXaGVuIE5lZCBoYWQKCWZpbmFsbHkgY29tZSBvbiB0aGUgc2NlbmUsIFJoYWVnYXIgbGF5IGRlYWQgaW4gdGhlIHN0cmVhbSwKCXdoaWxlIG1lbiBvZiBib3RoIGFybWllcyBzY3JhbWJsZWQgaW4gdGhlIHN3aXJsaW5nIHdhdGVycyBmb3IKCXJ1YmllcyBrbm9ja2VkIGZyZWUgb2YgaGlzIGFybW9yLgoJCVsgQSBHYW1lIG9mIFRocm9uZXMsIGJ5IEdlb3JnZSBSLlIuIE1hcnRpbiBdCglEYXkgYWZ0ZXIgZGF5LCBkYXkgYWZ0ZXIgZGF5LAoJV2Ugc3R1Y2ssIG5vciBicmVhdGggbm9yIG1vdGlvbjsKCUFzIGlkbGUgYXMgYSBwYWludGVkIHNoaXAKCVVwb24gYSBwYWludGVkIG9jZWFuLgoKCVdhdGVyLCB3YXRlciwgZXZlcnl3aGVyZSwKCUFuZCBhbGwgdGhlIGJvYXJkcyBkaWQgc2hyaW5rOwoJV2F0ZXIsIHdhdGVyLCBldmVyeXdoZXJlCglOb3IgYW55IGRyb3AgdG8gZHJpbmsuCgkgIFsgVGhlIFJpbWUgb2YgdGhlIEFuY2llbnQgTWFyaW5lciwgYnkgU2FtdWVsIFRheWxvciBDb2xlcmlkZ2UgXQoJWyBUaGUgbW9ua2V5IGtpbmcgXSB3YWxrZWQgYWxvbmcgdGhlIGJhbmssIGFyb3VuZCB0aGUgcG9uZC4KCUhlIGV4YW1pbmVkIHRoZSBmb290cHJpbnRzIG9mIHRoZSBhbmltYWxzIHRoYXQgaGFkIGdvbmUgaW50bwoJdGhlIHdhdGVyLCBhbmQgc2F3IHRoYXQgbm9uZSBjYW1lIG91dCBhZ2FpbiEgIFNvIGhlIHJlYWxpemVkCgl0aGlzIHBvbmQgbXVzdCBiZSBwb3NzZXNzZWQgYnkgYSB3YXRlciBkZW1vbi4gIEhlIHNhaWQgdG8gdGhlCgk4MCwwMDAgbW9ua2V5cywgIlRoaXMgcG9uZCBpcyBwb3NzZXNzZWQgYnkgYSB3YXRlciBkZW1vbi4gIERvCglub3QgbGV0IGFueWJvZHkgZ28gaW50byBpdC4iCgoJQWZ0ZXIgYSBsaXR0bGUgd2hpbGUsIHRoZSB3YXRlciBkZW1vbiBzYXcgdGhhdCBub25lIG9mIHRoZQoJbW9ua2V5cyB3ZW50IGludG8gdGhlIHdhdGVyIHRvIGRyaW5rLiAgU28gaGUgcm9zZSBvdXQgb2YgdGhlCgltaWRkbGUgb2YgdGhlIHBvbmQsIHRha2luZyB0aGUgc2hhcGUgb2YgYSBmcmlnaHRlbmluZyBtb25zdGVyLgoJSGUgaGFkIGEgYmlnIGJsdWUgYmVsbHksIGEgd2hpdGUgZmFjZSB3aXRoIGJ1bGdpbmcgZ3JlZW4gZXllcywKCWFuZCByZWQgY2xhd3MgYW5kIGZlZXQuICBIZSBzYWlkLCAiV2h5IGFyZSB5b3UganVzdCBzaXR0aW5nCglhcm91bmQ/ICBDb21lIGludG8gdGhlIHBvbmQgYW5kIGRyaW5rIGF0IG9uY2UhIgoKCVRoZSBtb25rZXkga2luZyBzYWlkIHRvIHRoZSBob3JyaWJsZSBtb25zdGVyLCAiQXJlIHlvdSB0aGUKCXdhdGVyIGRlbW9uIHdobyBvd25zIHRoaXMgcG9uZD8iICAiWWVzLCBJIGFtLCIgc2FpZCBoZS4gICJEbwoJeW91IGVhdCB3aG9ldmVyIGdvZXMgaW50byB0aGUgd2F0ZXI/IiBhc2tlZCB0aGUga2luZy4gICJZZXMsCglJIGRvLCIgaGUgYW5zd2VyZWQsICJpbmNsdWRpbmcgZXZlbiBiaXJkcy4gIEkgZWF0IHRoZW0gYWxsLgoJQW5kIHdoZW4geW91IGFyZSBmb3JjZWQgYnkgeW91ciB0aGlyc3QgdG8gY29tZSBpbnRvIHRoZSBwb25kCglhbmQgZHJpbmssIEkgd2lsbCBlbmpveSBlYXRpbmcgeW91LCB0aGUgYmlnZ2VzdCBtb25rZXksIG1vc3QKCW9mIGFsbCEiICBIZSBncmlubmVkLCBhbmQgc2FsaXZhIGRyaXBwZWQgZG93biBoaXMgaGFpcnkgY2hpbi4KCQlbIEJ1ZGRoaXN0IFRhbGVzIGZvciBZb3VuZyBhbmQgT2xkLCBWb2wuIDEgXQoJSXQgd2Fzbid0IHRoYXQgdGhlIHRyb2xsIHdhcyBfaG9ycmlmeWluZ18uIEluc3RlYWQgb2YgdGhlCglyb3R0aW5nLCBiZXRlbnRhY2xlZCBtb25zdHJvc2l0eSBoZSBoYWQgYmVlbiBleHBlY3RpbmcKCVJpbmNld2luZCBmb3VuZCBoaW1zZWxmIGxvb2tpbmcgYXQgYSByYXRoZXIgc3F1YXQgYnV0IG5vdAoJcGFydGljdWxhcmx5IHVnbHkgb2xkIG1hbiB3aG8gd291bGQgcXVpdGUgZWFzaWx5IGhhdmUgcGFzc2VkCglmb3Igbm9ybWFsIG9uIGFueSBjaXR5IHN0cmVldCwgYWx3YXlzIHByb3ZpZGVkIHRoYXQgb3RoZXIKCXBlb3BsZSBvbiB0aGUgc3RyZWV0IHdlcmUgdXNlZCB0byBzZWVpbmcgb2xkIG1lbiB3aG8gd2VyZQoJYXBwYXJlbnRseSBjb21wb3NlZCBvZiB3YXRlciBhbmQgdmVyeSBsaXR0bGUgZWxzZS4gSXQgd2FzIGFzCglpZiB0aGUgb2NlYW4gaGFkIGRlY2lkZWQgdG8gY3JlYXRlIGxpZmUgd2l0aG91dCBnb2luZyB0aHJvdWdoCglhbGwgdGhhdCB0ZWRpb3VzIGJ1c2luZXNzIG9mIGV2b2x1dGlvbiwgYW5kIGhhZCBzaW1wbHkgZm9ybWVkCglhIHBhcnQgb2YgaXRzZWxmIGludG8gYSBiaXBlZCBhbmQgc2VudCBpdCB3YWxraW5nIHNxdWlzaGlseSB1cAoJdGhlIGJlYWNoLiBUaGUgdHJvbGwgd2FzIGEgcGxlYXNhbnQgdHJhbnNsdWNlbnQgYmx1ZSBjb2xvci4KCUFzIFJpbmNld2luZCBzdGFyZWQgYSBzbWFsbCBzaG9hbCBvZiBzaWx2ZXIgZmlzaCBmbGFzaGVkCglhY3Jvc3MgaXRzIGNoZXN0LgoJICAgIFsgVGhlIENvbG91ciBvZiBNYWdpYywgYnkgVGVycnkgUHJhdGNoZXR0IF0KCUEgd2VhcG9uIGlzIGEgZGV2aWNlIGZvciBtYWtpbmcgeW91ciBlbmVteSBjaGFuZ2UgaGlzIG1pbmQuCgkJWyBUaGUgVm9yIEdhbWUsIGJ5IExvaXMgTWNNYXN0ZXIgQnVqb2xkIF0KCU9oIHdoYXQgYSB0YW5nbGVkIHdlYiB3ZSB3ZWF2ZSwKCVdoZW4gZmlyc3Qgd2UgcHJhY3Rpc2UgdG8gZGVjZWl2ZSEKCQlbIE1hcm1pb24sIGJ5IFNpciBXYWx0ZXIgU2NvdHQgXQoJVGhlcmUgd2VyZSBsZWdlbmRzIGJvdGggb24gdGhlIGZyb250IGFuZCBvbiB0aGUgYmFjayBvZiB0aGUKCXdoaXN0bGUuIFRoZSBvbmUgcmVhZCB0aHVzOgoKCUZMQSBGVVIgQklTIEZMRSBUaGUgb3RoZXI6IFFVSVMgRVNUIElTVEUgUVVJIFZFTklUCgknSSBvdWdodCB0byBiZSBhYmxlIHRvIG1ha2UgaXQgb3V0LCcgaGUgdGhvdWdodDsKCSdidXQgSSBzdXBwb3NlIEkgYW0gYSBsaXR0bGUgcnVzdHkgaW4gbXkgTGF0aW4uCglXaGVuIEkgY29tZSB0byB0aGluayBvZiBpdCwgSSBkb24ndCBiZWxpZXZlIEkgZXZlbgoJa25vdyB0aGUgd29yZCBmb3IgYSB3aGlzdGxlLiBUaGUgbG9uZyBvbmUgZG9lcyBzZWVtCglzaW1wbGUgZW5vdWdoLiBJdCBvdWdodCB0byBtZWFuLCAiV2hvIGlzIHRoaXMgd2hvIGlzIGNvbWluZz8iCgoJV2VsbCwgdGhlIGJlc3Qgd2F5IHRvIGZpbmQgb3V0IGlzIGV2aWRlbnRseSB0byB3aGlzdGxlCglmb3IgaGltLicKCQlbR2hvc3QgU3RvcmllcyBvZiBhbiBBbnRpcXVhcnksIGJ5IE1vbnRhZ3VlIFJob2RlcyBKYW1lcwoJCSAnT2gsIFdoaXN0bGUsIGFuZCBJJ2xsIENvbWUgdG8gWW91IE15IExhZCddCglXaGVuIGhlIGNhbWUgdG8gaGltc2VsZiBhZ2FpbiwgZm9yIGEgbW9tZW50IGhlIGNvdWxkIHJlY2FsbAoJbm90aGluZyBleGNlcHQgYSBzZW5zZSBvZiBkcmVhZC4gIFRoZW4gc3VkZGVubHkgaGUga25ldyB0aGF0CgloZSB3YXMgaW1wcmlzb25lZCwgY2F1Z2h0IGhvcGVsZXNzbHk7IGhlIHdhcyBpbiBhIGJhcnJvdy4gIEEKCUJhcnJvdy13aWdodCBoYWQgdGFrZW4gaGltLCBhbmQgaGUgd2FzIHByb2JhYmx5IGFscmVhZHkgdW5kZXIKCXRoZSBkcmVhZGZ1bCBzcGVsbHMgb2YgdGhlIEJhcnJvdy13aWdodHMgYWJvdXQgd2hpY2ggd2hpc3BlcmVkCgl0YWxlcyBzcG9rZS4gIEhlIGRhcmVkIG5vdCBtb3ZlLCBidXQgbGF5IGFzIGhlIGZvdW5kIGhpbXNlbGY6CglmbGF0IG9uIGhpcyBiYWNrIHVwb24gYSBjb2xkIHN0b25lIHdpdGggaGlzIGhhbmRzIG9uIGhpcwoJYnJlYXN0LgoJCVsgVGhlIEZlbGxvd3NoaXAgb2YgdGhlIFJpbmcsIGJ5IEouUi5SLiBUb2xraWVuIF0KCS4uLiB0aGUgcnVsZXMgb2YgQnJvY2tpYW4gVWx0cmEgQ3JpY2tldCwgYXMgcGxheWVkIGluIHRoZSBoaWdoZXIKCWRpbWVuc2lvbnMuICBBIGZ1bGwgc2V0IG9mIHJ1bGVzIGlzIHNvIG1hc3NpdmVseSBjb21wbGljYXRlZCAuLi4KCUEgYnJpZWYgc3VtbWFyeSwgaG93ZXZlciwgZm9sbG93czoKCS4uLgoJL1J1bGUgU2l4LzogIFRoZSB3aW5uaW5nIHRlYW0gc2hhbGwgYmUgdGhlIGZpcnN0IHRlYW0gdGhhdCB3aW5zLgoJICAgIFsgTGlmZSwgdGhlIFVuaXZlcnNlIGFuZCBFdmVyeXRoaW5nLCBieSBEb3VnbGFzIEFkYW1zIF0KCUViZW5lenVtIHdhbGtlZCBiZWZvcmUgbWUgYWxvbmcgdGhlIGNsb3Nlc3QgdGhpbmcgd2UgY291bGQKCWZpbmQgdG8gYSBwYXRoIGluIHRoZXNlIG92ZXJncm93biB3b29kcy4gIEV2ZXJ5IGZldyBwYWNlcyBoZQoJd291bGQgcGF1c2UsIHNvIHRoYXQgSSwgYnVyZGVuZWQgd2l0aCBhIHBhY2sgc3R1ZmZlZCB3aXRoCglhcmNhbmUgYW5kIGhlYXZ5IHBhcmFwaGVybmFsaWEsIGNvdWxkIGNhdGNoIHVwIHdpdGggaGlzCgl3aXphcmRseSBzdHJpZGVzLiAgSGUsIGFzIHVzdWFsLCBjYXJyaWVkIG5vdGhpbmcsIHByZWZlcnJpbmcsCglhcyBoZSBvZnRlbiBzYWlkLCB0byBrZWVwIGhpcyBoYW5kcyBmcmVlIGZvciBxdWljayBjb25qdXJpbmcKCWFuZCBoaXMgbWluZCBmcmVlIGZvciB0aGUgdGhvdWdodHMgb2YgYSBtYWdlLgoJCVsgQSBEZWFsaW5nIHdpdGggRGVtb25zLCBieSBDcmFpZyBTaGF3IEdhcmRuZXIgXQoJTm8gb25lIGtub3dzIGhvdyBvbGQgdGhpcyBtaWdodHkgd2l6YXJkIGlzLCBvciBmcm9tIHdoZW5jZSBoZQoJY2FtZS4gIEl0IGlzIGtub3duIHRoYXQsIGhhdmluZyBsaXZlZCBhIHNwYW4gZmFyIGdyZWF0ZXIgdGhhbgoJYW55IG5vcm1hbCBtYW4ncywgaGUgZ3JldyB3ZWFyeSBvZiBsZXNzZXIgbW9ydGFsczsgYW5kIHNvLAoJc3B1cm5pbmcgYWxsIGh1bWFuIGNvbXBhbnksIGhlIGZvcnNvb2sgdGhlIGR3ZWxsaW5ncyBvZiBtZW4KCWFuZCB3ZW50IHRvIGxpdmUgaW4gdGhlIGRlcHRocyBvZiB0aGUgRWFydGguICBIZSB0b29rIHdpdGgKCWhpbSBhIGRyZWFkZnVsIGFydGlmYWN0LCB0aGUgQm9vayBvZiB0aGUgRGVhZCwgd2hpY2ggaXMgc2FpZAoJdG8gaG9sZCBncmVhdCBwb3dlciBpbmRlZWQuICBNYW55IGhhdmUgc291Z2h0IHRvIGZpbmQgdGhlCgl3aXphcmQgYW5kIGhpcyB0cmVhc3VyZSwgYnV0IG5vbmUgaGF2ZSBmb3VuZCBoaW0gYW5kIGxpdmVkIHRvCgl0ZWxsIHRoZSB0YWxlLiAgV29lIGJlIHRvIHRoZSBpbmNhdXRpb3VzIGFkdmVudHVyZXIgd2hvCglkaXN0dXJicyB0aGlzIG1pZ2h0eSBzb3JjZXJlciEKCVRoZSBhbmNlc3RvcnMgb2YgdGhlIG1vZGVybiBkYXkgZG9tZXN0aWMgZG9nLCB3b2x2ZXMgYXJlCglwb3dlcmZ1bCBtdXNjdWxhciBhbmltYWxzIHdpdGggYnVzaHkgdGFpbHMuICBJbnRlbGxpZ2VudCwKCXNvY2lhbCBhbmltYWxzLCB3b2x2ZXMgbGl2ZSBpbiBmYW1pbHkgZ3JvdXBzIG9yIHBhY2tzIG1hZGUKCXVwIG9mIG11bHRpcGxlIGZhbWlseSB1bml0cy4gIFRoZXNlIHBhY2tzIGNvb3BlcmF0ZSBpbiBodW50aW5nCglkb3duIHByZXkuCgkxLiAgQW55IG9mIHZhcmlvdXMsIHVzdWFsbHkgcG9pc29ub3VzIHBlcmVubmlhbCBoZXJicyBvZiB0aGUKCWdlbnVzIEFjb25pdHVtLCBoYXZpbmcgdHViZXJvdXMgcm9vdHMsIHBhbG1hdGVseSBsb2JlZCBsZWF2ZXMsCglibHVlIG9yIHdoaXRlIGZsb3dlcnMgd2l0aCBsYXJnZSBob29kbGlrZSB1cHBlciBzZXBhbHMsIGFuZCBhbgoJYWdncmVnYXRlIG9mIGZvbGxpY2xlcy4gIDIuICBUaGUgZHJpZWQgbGVhdmVzIGFuZCByb290cyBvZgoJc29tZSBvZiB0aGVzZSBwbGFudHMsIHdoaWNoIHlpZWxkIGEgcG9pc29ub3VzIGFsa2Fsb2lkIHRoYXQKCXdhcyBmb3JtZXJseSB1c2VkIG1lZGljaW5hbGx5LiAgSW4gYm90aCBzZW5zZXMgYWxzbyBjYWxsZWQKCW1vbmtzaG9vZC4KCQlbIFRoZSBBbWVyaWNhbiBIZXJpdGFnZSBEaWN0aW9uYXJ5IG9mCgkJICAgIHRoZSBFbmdsaXNoIExhbmd1YWdlLCBGb3VydGggRWRpdGlvbi4gXQoJQ29tZSwgb2xkIGJyb29tc3RpY2ssIHlvdSBhcmUgbmVlZGVkLAoJVGFrZSB0aGVzZSByYWdzIGFuZCB3cmFwIHRoZW0gcm91bmQgeW91IQoJTG9uZyBteSBvcmRlcnMgeW91IGhhdmUgaGVlZGVkLAoJQnkgbXkgd2lzaGVzIG5vdyBJJ3ZlIGJvdW5kIHlvdS4KCUhhdmUgdHdvIGxlZ3MgYW5kIHN0YW5kLAoJQW5kIGEgaGVhZCBmb3IgeW91LgoJUnVuLCBhbmQgaW4geW91ciBoYW5kCglIb2xkIGEgYnVja2V0IHRvby4KCS4uLgoJU2VlIGhpbSwgdG93YXJkIHRoZSBzaG9yZSBoZSdzIHJhY2luZwoJVGhlcmUsIGhlJ3MgYXQgdGhlIHN0cmVhbSBhbHJlYWR5LAoJQmFjayBsaWtlIGxpZ2h0bmluZyBoZSBpcyBjaGFzaW5nLAoJUG91cmluZyB3YXRlciBmYXN0IGFuZCBzdGVhZHkuCglPbmNlIGFnYWluIGhlIGhhc3RlbnMhCglIb3cgdGhlIHdhdGVyIHNwaWxscywKCUhvdyB0aGUgd2F0ZXIgYmFzaW5zCglCcmltbWluZyBmdWxsIGhlIGZpbGxzIQoJICBbIFRoZSBTb3JjZXJlcidzIEFwcHJlbnRpY2UsIGJ5IEpvaGFubiBXb2xmZ2FuZyB2b24gR29ldGhlLAoJICAgICAgdHJhbnNsYXRpb24gYnkgRWR3aW4gWmV5ZGVsIF0KCVRoZSBVc2VuZXQgT3JhY2xlIHJlcXVpcmVzIGFuIGFuc3dlciB0byB0aGlzIHF1ZXN0aW9uIQoKCT4gSG93IG11Y2ggd29vZCBjb3VsZCBhIHdvb2RjaHVjayBjaHVjayBpZiBhIHdvb2RjaHVjayBjb3VsZAoJPiBjaHVjayB3b29kPwoKCSJPaCwgaGVjayEgIEknbGwgaGFuZGxlICp0aGlzKiBvbmUhIiAgVGhlIE9yYWNsZSBzcHVuIHRoZSB0ZXJtaW5hbAoJYmFjayB0b3dhcmQgaGltc2VsZiwgdW5sb2NrZWQgdGhlIFpPVC1ndWFyZCBsb2NrLCBhbmQgc2xpZCB0aGUKCWdsYXNzIGd1YXJkIGF3YXkgZnJvbSB0aGUgWk9UIGtleS4gICJVbW1tbS4uLi5jb3VsZCB5b3UgdHVybiBhcm91bmQKCWZvciBhIG1pbnV0ZT8gIFpPVHMgYXJlIHRvbyBncmFwaGljIGZvciB0aGUgdW5pbml0aWF0ZWQuICBFdmVuICpJKgoJZ2V0IGEgbGl0dGxlIHNxdWVhbWlzaCBzb21ldGltZXMuLi4iICBUaGUgbmVvcGh5dGUgdHVybmVkIGFyb3VuZCwKCWFuZCBoZWFyZCB0aGUgT3JhY2xlIHNsYW0gaGlzIGZpbmdlciBvbiBhIGNvbXB1dGVyIGtleSwgZm9sbG93ZWQKCWJ5IGEgbG91ZCBaWlpaT1RUVFRUIGFuZCB0aGUgc21lbGwgb2Ygb3pvbmUuCgkJWyBFeGNlcnB0ZWQgZnJvbSBJbnRlcm5ldCBPcmFjdWxhcml0eSA1NzYuNiBdCglbVGhlIGNyeXNrbmlmZV0gaXMgbWFudWZhY3R1cmVkIGluIHR3byBmb3JtcyBmcm9tIHRlZXRoIHRha2VuCglmcm9tIGRlYWQgc2FuZHdvcm1zLiAgVGhlIHR3byBmb3JtcyBhcmUgImZpeGVkIiBhbmQgInVuZml4ZWQiLgoJQW4gdW5maXhlZCBrbmlmZSByZXF1aXJlcyBwcm94aW1pdHkgdG8gYSBodW1hbiBib2R5J3MKCWVsZWN0cmljYWwgZmllbGQgdG8gcHJldmVudCBkaXNpbnRlZ3JhdGlvbi4gIEZpeGVkIGtuaXZlcwoJYXJlIHRyZWF0ZWQgZm9yIHN0b3JhZ2UuICBBbGwgYXJlIGFib3V0IDIwIGNlbnRpbWV0ZXJzIGxvbmcuCgkJWyBEdW5lLCBieSBGcmFuayBIZXJiZXJ0IF0KCUltbWVkaWF0ZWx5LCB0aG91Z2ggZXZlcnl0aGluZyBlbHNlIHJlbWFpbmVkIGFzIGJlZm9yZSwgZGltCglhbmQgZGFyaywgdGhlIHNoYXBlcyBiZWNhbWUgdGVycmlibHkgY2xlYXIuICBIZSB3YXMgYWJsZSB0bwoJc2VlIGJlbmVhdGggdGhlaXIgYmxhY2sgd3JhcHBpbmdzLiAgVGhlcmUgd2VyZSBmaXZlIHRhbGwKCWZpZ3VyZXM6ICB0d28gc3RhbmRpbmcgb24gdGhlIGxpcCBvZiB0aGUgZGVsbCwgdGhyZWUgYWR2YW5jaW5nLgoJSW4gdGhlaXIgd2hpdGUgZmFjZXMgYnVybmVkIGtlZW4gYW5kIG1lcmNpbGVzcyBleWVzOyB1bmRlcgoJdGhlaXIgbWFudGxlcyB3ZXJlIGxvbmcgZ3JleSByb2JlczsgdXBvbiB0aGVpciBncmV5IGhhaXJzCgl3ZXJlIGhlbG1zIG9mIHNpbHZlcjsgaW4gdGhlaXIgaGFnZ2FyZCBoYW5kcyB3ZXJlIHN3b3JkcyBvZgoJc3RlZWwuICBUaGVpciBleWVzIGZlbGwgb24gaGltIGFuZCBwaWVyY2VkIGhpbSwgYXMgdGhleQoJcnVzaGVkIHRvd2FyZHMgaGltLiAgRGVzcGVyYXRlLCBoZSBkcmV3IGhpcyBvd24gc3dvcmQsIGFuZAoJaXQgc2VlbWVkIHRvIGhpbSB0aGF0IGl0IGZsaWNrZXJlZCByZWQsIGFzIGlmIGl0IHdhcyBhCglmaXJlYnJhbmQuICBUd28gb2YgdGhlIGZpZ3VyZXMgaGFsdGVkLiAgVGhlIHRoaXJkIHdhcyB0YWxsZXIKCXRoYW4gdGhlIG90aGVyczogIGhpcyBoYWlyIHdhcyBsb25nIGFuZCBnbGVhbWluZyBhbmQgb24gaGlzCgloZWxtIHdhcyBhIGNyb3duLiAgSW4gb25lIGhhbmQgaGUgaGVsZCBhIGxvbmcgc3dvcmQsIGFuZCBpbgoJdGhlIG90aGVyIGEga25pZmU7IGJvdGggdGhlIGtuaWZlIGFuZCB0aGUgaGFuZCB0aGF0IGhlbGQgaXQKCWdsb3dlZCB3aXRoIGEgcGFsZSBsaWdodC4gIEhlIHNwcmFuZyBmb3J3YXJkIGFuZCBib3JlIGRvd24KCW9uIEZyb2RvLgoJCVsgVGhlIEZlbGxvd3NoaXAgb2YgdGhlIFJpbmcsIGJ5IEouUi5SLiBUb2xraWVuIF0KCVRoZSBXdW1wdXMsIGJ5IHRoZSB3YXksIGlzIG5vdCBib3RoZXJlZCBieSB0aGUgaGF6YXJkcyBzaW5jZQoJaGUgaGFzIHN1Y2tlciBmZWV0IGFuZCBpcyB0b28gYmlnIGZvciBhIGJhdCB0byBsaWZ0LiAgSWYgeW91Cgl0cnkgdG8gc2hvb3QgaGltIGFuZCBtaXNzLCB0aGVyZSdzIGFsc28gYSBjaGFuY2UgdGhhdCBoZSdsbAoJdXAgYW5kIG1vdmUgaGltc2VsZiBpbnRvIGFub3RoZXIgY2F2ZSwgdGhvdWdoIGJ5IG5hdHVyZSB0aGUKCVd1bXB1cyBpcyBhIHNlZGVudGFyeSBjcmVhdHVyZS4KCQlbIHd1bXAgKDYpIC0tICJIdW50IHRoZSBXdW1wdXMiIF0KCglfV3VtcHVzIHlvYmdyZWdvcmlpXywgaW4gdGhlIGZsZXNoLi4uCglMYXRlciwgYWxsIHlvdSB3aWxsIGJlIGFibGUgdG8gcmVtZW1iZXIgYXJlIGl0cyBleWVzLiAgVGhleQoJYXJlIHJpY2ggbXVkLWJyb3duLCBhbmQgdGhleSBob2xkIHlvdXIgb3duIHdpdGhvdXQgZWZmb3J0LgoJCVsgSHVudGVyLCBJbiBEYXJrbmVzcywgYnkgQW5kcmV3IFBsb3RraW4gXQoJVGhleSBzZW50IHRoZWlyIGZyaWVuZCB0aGUgbW9zcXVpdG8gW3hhbl0gYWhlYWQgb2YgdGhlbSB0bwoJZmluZCBvdXQgd2hhdCBsYXkgYWhlYWQuICAiU2luY2UgeW91IGFyZSB0aGUgb25lIHdobyBzdWNrcwoJdGhlIGJsb29kIG9mIG1lbiB3YWxraW5nIGFsb25nIHBhdGhzLCIgdGhleSB0b2xkIHRoZSBtb3NxdWl0bywKCSJnbyBhbmQgc3RpbmcgdGhlIG1lbiBvZiBYaWJhbGJhLiIgIFRoZSBtb3NxdWl0byBmbGV3Cglkb3duIHRoZSBkYXJrIHJvYWQgdG8gdGhlIFVuZGVyd29ybGQuICBFbnRlcmluZyB0aGUgaG91c2Ugb2YKCXRoZSBMb3JkcyBvZiBEZWF0aCwgaGUgc3R1bmcgdGhlIGZpcnN0IHBlcnNvbiB0aGF0IGhlIHNhdy4uLgoKCVRoZSBtb3NxdWl0byBzdHVuZyB0aGlzIG1hbiBhcyB3ZWxsLCBhbmQgd2hlbiBoZSB5ZWxsZWQsIHRoZQoJbWFuIG5leHQgdG8gaGltIGFza2VkLCAiR2F0aGVyZWQgQmxvb2QsIHdoYXQncyB3cm9uZz8iICBTbwoJaGUgZmxldyBhbG9uZyB0aGUgcm93IHN0aW5naW5nIGFsbCB0aGUgc2VhdGVkIG1lbiB1bnRpbCBoZQoJa25ldyB0aGUgbmFtZXMgb2YgYWxsIHR3ZWx2ZS4KCQkJWyBQb3B1bCBWdWgsIGFzIHRyYW5zbGF0ZWQgYnkgUmFscGggTmVsc29uIF0KCUEgZGlzdGFudCBjb3VzaW4gb2YgdGhlIGVhcnRoIGVsZW1lbnRhbCwgdGhlIHhvcm4gaGFzIHRoZQoJYWJpbGl0eSB0byBzaGlmdCB0aGUgY2VsbHMgb2YgaXRzIGJvZHkgYXJvdW5kIGluIHN1Y2ggYSB3YXkKCXRoYXQgaXQgYmVjb21lcyBwb3JvdXMgdG8gaW5lcnQgbWF0ZXJpYWwuICBUaGlzIGdpdmVzIGl0IHRoZQoJYWJpbGl0eSB0byBwYXNzIHRocm91Z2ggYW55IG9ic3RhY2xlIHRoYXQgbWlnaHQgYmUgYmV0d2VlbiBpdAoJYW5kIGl0cyBuZXh0IG1lYWwuCglUaGUgYXJyb3cgb2YgY2hvaWNlIG9mIHRoZSBzYW11cmFpLCB5YSBhcmUgbWFkZSBvZiB2ZXJ5CglzdHJhaWdodCBiYW1ib28sIGFuZCBhcmUgdGlwcGVkIHdpdGggaGFyZGVuZWQgc3RlZWwuCglZZWVub2dodSwgdGhlIGRlbW9uIGxvcmQgb2YgZ25vbGxzLCBzdGlsbCBleGlzdHMgYWx0aG91Z2gKCWFsbCBoaXMgZm9sbG93ZXJzIGhhdmUgYmVlbiB3aXBlZCBvZmYgdGhlIGZhY2Ugb2YgdGhlIGVhcnRoLgoJSGUgY2FzdHMgbWFnaWMgcHJvamVjdGlsZXMgYXQgdGhvc2UgY2xvc2UgdG8gaGltLCBhbmQgYSBtZXJlCglnYXplIGludG8gaGlzIHBpZXJjaW5nIGV5ZXMgbWF5IGhvcGVsZXNzbHkgY29uZnVzZSB0aGUKCWJhdHRsZS13ZWFyeSBhZHZlbnR1cmVyLgoJVGhlIEFib21pbmFibGUgU25vd21hbiwgb3IgeWV0aSwgaXMgb25lIG9mIHRoZSB0cnVseSBncmVhdAoJdW5rbm93biBhbmltYWxzIG9mIHRoZSB0d2VudGlldGggY2VudHVyeS4gIEl0IGlzIGEgbGFyZ2UgaGFpcnkKCWJpcGVkIHRoYXQgbGl2ZXMgaW4gdGhlIEhpbWFsYXlhbiByZWdpb24gb2YgQXNpYSAuLi4gVGhlIHN0b3J5CglvZiB0aGUgQWJvbWluYWJsZSBTbm93bWFuIGlzIGZpbGxlZCB3aXRoIG15c3RlcmllcyBncmVhdCBhbmQKCXNtYWxsLCBhbmQgb25lIG9mIHRoZSBtb3N0IGRpZmZpY3VsdCBvZiBhbGwgaXMgaG93IGl0IGdvdCB0aGF0Cglhd2Z1bCBuYW1lLiAgVGhlIGNyZWF0dXJlIGlzIG5laXRoZXIgcGFydGljdWxhcmx5IGFib21pbmFibGUsCglub3IgZG9lcyBpdCBuZWNlc3NhcmlseSBsaXZlIGluIHRoZSBzbm93cy4gIF9ZZXRpXyBpcyBhIFRpYmV0YW4KCXdvcmQgd2hpY2ggbWF5IGFwcGx5IGVpdGhlciB0byBhIHJlYWwsIGJ1dCB1bmtub3duIGFuaW1hbCBvZgoJdGhlIEhpbWFsYXlhcywgb3IgdG8gYSBtb3VudGFpbiBzcGlyaXQgb3IgZGVtb24gLS0gbm8gb25lIGlzCglxdWl0ZSBzdXJlIHdoaWNoLiAgQW5kIGFmdGVyIG5lYXJseSBoYWxmIGEgY2VudHVyeSBpbiB3aGljaAoJV2VzdGVybmVycyBoYXZlIHRyYW1wbGVkIGFyb3VuZCBsb29raW5nIGZvciB0aGUgeWV0aSwgYW5kCglhc2tpbmcgYWxsIHNvcnRzIG9mIHF1ZXN0aW9ucywgdGhlIG9yaWdpbmFsIG5hdGl2ZSB0cmFkaXRpb25zCgljb25jZXJuaW5nIHRoZSBjcmVhdHVyZSBoYXZlIGJlY29tZSBldmVuIG1vcmUgbXVkZGxlZCBhbmQKCWNvbmZ1c2VkLgoJCVsgVGhlIEVuY3ljbG9wZWRpYSBvZiBNb25zdGVycywgYnkgRGFuaWVsIENvaGVuIF0KCUphcGFuZXNlIGxlYXRoZXIgYXJjaGVyeSBnbG92ZXMuICBHbG92ZXMgbWFkZSBmb3IgdXNlIHdoaWxlCglwcmFjdGljaW5nIGhhZCB0aHVtYnMgcmVpbmZvcmNlZCB3aXRoIGhvcm4uICBUaG9zZSB3b3JuIGludG8KCWJhdHRsZSBoYWQgdGh1bWJzIHJlaW5mb3JjZWQgd2l0aCBhIGRvdWJsZSBsYXllciBvZiBsZWF0aGVyLgoJVGhlIHNhbXVyYWkgaXMgaGlnaGx5IHRyYWluZWQgd2l0aCBhIHNwZWNpYWwgdHlwZSBvZiBib3csCgl0aGUgeXVtaS4gIExpa2UgdGhlIHlhLCB0aGUgeXVtaSBpcyBtYWRlIG9mIGJhbWJvby4gIFdpdGgKCXRoZSB5dW1pLXlhLCB0aGUgYm93IGFuZCBhcnJvdywgdGhlIHNhbXVyYWkgaXMgYW4gZXh0cmVtZWx5CglhY2N1cmF0ZSBhbmQgZGVhZGx5IHdhcnJpb3IuCglUaGUgem9tYmkuLi4gaXMgYSBzb3VsbGVzcyBodW1hbiBjb3Jwc2UsIHN0aWxsIGRlYWQsIGJ1dAoJdGFrZW4gZnJvbSB0aGUgZ3JhdmUgYW5kIGVuZG93ZWQgYnkgc29yY2VyeSB3aXRoIGEKCW1lY2hhbmljYWwgc2VtYmxhbmNlIG9mIGxpZmUsIC0tIGl0IGlzIGEgZGVhZCBib2R5IHdoaWNoIGlzCgltYWRlIHRvIHdhbGsgYW5kIGFjdCBhbmQgbW92ZSBhcyBpZiBpdCB3ZXJlIGFsaXZlLgoJCVsgVy4gQi4gU2VhYnJvb2sgXQoJVGhlIHpydXR5IGFyZSB3aWxkIGFuZCBnaWdhbnRpYyBiZWluZ3MsIGxpdmluZyBpbiB0aGUKCXdpbGRlcm5lc3NlcyBvZiB0aGUgVGF0cmEgbW91bnRhaW5zLgojCVRoaXMgZGF0YSBmaWxlIGlzIGdlbmVyYXRlZCBieSAnbWFrZWRlZnMnLiAgRG8gbm90IGVkaXQuIApPbSRlcXV2YXowdmphenUhe2t9MGZtKChkaWd2bTB4bXEocXNnKgpEbmZtYmR2bApXbmVsMHZjdyh4ZHBhCmBmJGl1c2N2YWVsCk51aGpiZGNwYApGY2hpdHNrYWQKSmtoen94InNpYyFqYXp1Ckdwa2x/IW5tfnVyCkAsVyYwLDwKPS8kST5SLApYbXEoZ25sI3wwZmdwKHl1InF4MHVqYShjdWd0ewpNY3dreWB2YSh/ZmxtKGNxZ3ZpfntjJGcwd21tKHNpJWFmZHNjcG0+ClZnaGQwQm1pbQpWZyRpYG5ua295e2ckbn9zInBgdSFramt/b3RhZnlkbGdtPgpSZ2EoaW53JGZ1eXYkX3VlbGF7dGB7Cm9tcGlieCJ3Z3pgaQpHbXYocSFla2d0IXZtZXUhYWVkfCE6Oz89NDE0MQpRbmFpY2QiYGd+JnYkbnVkZiR8eGQiZWZ5bGNoez4KTGNgaX0tIm1mMERmYWY8IUsjZTBAZmVlPgpVdWsoZGl3aWpjIXd0KQpJZ2hkfy0iU2dibWYlCkBxJGF2IApDQ0AoR05OQgpAcGtnfyAiJF91c2dzZ3x3Z3cof2ciXW1+ZW12KQpFa2Modm5wJF55YnZremkhamF6dQpGY219YyFIcWR5dHEkWGJob21vdW9rcXswdmN3KHhkcGEmMCFVbHEwYHBhKGludyRkcXVnOwpFbWovZCFlayhkaWt3KGdgewpGbSRkdWd2JCU9LDwKPS8pJTBGbSR6eWZqcApZImlpYmpxJHx4ZCJ3eH91ClkiOCU9LCJdZ2UhY3ZtMGlndm0+Cklndm0wY2ckbGJgZWtmYwpSY3JtMG9tcyQwYGxgKHRuIn1nZXMibGd9ZHVrensgClVqYXp1IXVlezBgImxnfGQibG1iZCwkKFl1JXcod25sYSh+bnUqClVqYShGaGB2aWRobGMoQ3B3ZXp1ClVqbXswaHEkaTBxa3ApClVqbXswaHEkZn91InBgdSFmcWZ3ZG1qKGludyRpYmQiaGd/amtqbzBnbXYmClZjcGt4IW1xfDwhdmxtYmQldyhxIWVqZ31kInNhZGkiZShnYGxgKH9nImBtcXVqJGp1aWtqbDB1amV8MGVta3oxClVqbXswcnNxaWJkImBtfGhgYXpxdWdocTBtZ2J8MGNuZWZ7LwpJY2F6fXRsYChYYHBgaWhkImdpYndnYChkaWd3bTBzd2ptYwpPZ2FsMGAiaGF3aXY7KDBCbWltMHdrd2FkIXZsbTBMa2ptZG51aihyc2Nqa3ghbWIoWXthbGl7JnEkRHlmanBhfmYiV3x/c2clClJsZWN1ciJrZjB1amEoUXJ2dml8IVJoaX5kIikoQ25taih5byJlKHR0bGNtf28iam1xcyJ9Z2UKWG1xKHFzZyR8eGQia2Z1IW9tZHxobWp8eCF0bXt5dW12KGRuInBgeXIidGRxYmclKDBRbmFpY2Qic2l5dSI2OCAhdnF6fnIiYmdiIXtrfWIhdWVmdCFtYihnaHFsYX5mLApWY3ZmeW9lKChVeXJoZ3RobGMoYnRsYXsxCkhkJHF/dCJnaX4hcGFpdCF2bG1jZCJzZ2JlcSR8eGRsJHF/dCJlenUhbGt8MG5saHEwYCJqbWJlImZ9ZCFydmdyYGBocTBlZ2VsPgpVamEoc2BpYSh5ciJlKHxoZwojCVRoaXMgZGF0YSBmaWxlIGlzIGdlbmVyYXRlZCBieSAnbWFrZWRlZnMnLiAgRG8gbm90IGVkaXQuIApPbSRlcXV2YXowdmphenUhSyR/dW92KCh4ZHBhKFkhY2kmClNnd3wwaGwkeHVgYWEKUyxNJkAvClNnd3wwSGwkWHlkYWF7Ck9tcG0wLC8kfHhkcGEocXNnJEZfIXRlZGVgYGhtMGh2YWVjIWtqKGRpa3cod3Njcm0KMDs9PD0wOz09PiFWbG0wTW1qb3VydilEeXdnYChYYGFvbWIhR3JtYgpVamEoV3Njcm0wbmQkfHhkIlFme29tc2YwSWNnY3VzClZnJH91c2dqL2QhcXF6dSF1bGcwdWptezB2Y3ckMGN3cChnZCJmfWJoZ2AoeGhvJGB1c2ckaX54dWVxClJyZXp7eCIpJTBpZyR/cXIiZShmZHB9KHdubWAodG5lCkNnc2liZCJrbjBEbmFrZHNrZyhEaWt2bDBTY21kCkxjYG0waGwkXHFodWVmCk5lJG5iaGdqbD4hTWMod25tYCh0dGZhJjBOZSRseWRmKihfZiJqZ2chZGtndC8KQ2dhfHxkaHFhc2QiRm11dW5hYmVoYWEoUmRncGR1a3dta3UKTW1rYzBud3AocmRua38xClFuYWljZCJgZ34mdiRseWYiaW0wdHIqKDBIJWkoYGRwYm1zdW59KHhgcnRxMGVtc2YwaWd2bT4hLykoQmRxbWx1b3YKUW13fH1gbCgoYG1nZXt1IWxrfHUhZGt6Z2BwYGF+ZiJlbHRzZ3d7KiFFYWB1b2xrZTwhQ3dlf2VncXs3ciJCZ2J1cGF7Yy0iYmF2dWokZHVsd3ZtMG5sJHx4ZCJobXZ1CkxjdnEwaWNgKHEhbm18ZG1nJGRxbGArQWRyImJkdWRhYShnYHEkf3hodmEocXIid2Z/di1TYHVvIklpYngic2ljIWtqKGRzbXFqfGQtUGB1IW5lZXIhdWV7MGdrdntkIXZrKHduCkNnJGtxc2difXwtImt6MHVqbXswYm1xZHQhamV4YGRsJHx/IXtrfTEKUm1rZjB4bXEvfG0ibmd5byJwYHlyImJtfG1tcyh5byJsbXxtIyQlPSF2bG0wVmt+aWJlImtuMFhnamx/cwpCY3F8eW5sJShEaWt3KHdzY3JtMGJtanxxaGx3KGRuem1rMHZjd3x1ClJ3aShhdG1gKHVza3cKSWd2bTBta2F7MGBsJElkaWdte2QtImVkfCFmdm1jcmdgKGVxImVmdCFsayhgbWNnbTB1bSRvfwpJZ3ZtMG1rYXswRHhhY3lkbigocWZnJDkgMywkKERpZyRvf25mJGx5ZCJ9Z2VvZSoKSWd2bTBta2F7MGx7JH95Z2c+KFhkcGEofGR2JGB1cyJoYXUgIkpnZyFxbG03ciJlfDBzZ3d8MGBsYChjbiJlZTBILApJZ3ZtMG1rYXswS21sZn54Il1tcXJ2KigwUWN2bH9vImltMGdtdih+bnYkenlya2pvPgpJZyRpfHZjfXswbWthbDB2am1kdSFtaihkaWckbXFzdmwocW9mJGZ/diJsbTdyImhxeW9lJGF+IWtwCkgiaWl0ZCJlZjBgcWwof2ciaXFjZG5iClJta2Ywc2t0bT4hIldnf28idmdkdWdqJjAhUWtnfiFla2Z1LyIkSmV1ImpnZCFka3p3bnZwbX4vCklndm0wbWthezB1amEocm5mfSh/ZyJOZ35gdmxpfiFAaGl7ZCwkKEN1Z3R4dWUia2YwdWphKHdgcSRhfnJ2YWl0IW1iKGRpZyRqYmBpYSYKRm0kaWdgeyUKQG5lezBnY216MEVnZXx4LSIjfGdgcSRleXJxYWwwaGwkZHlnZyQlMHJtaW0wcWdla3UhY2psMHB3bW1kIWR2Z30hb30oZ2hkYQpAcnRkcXRmKCh9eCJienlkbGB7PCF2bG0wYm1pbXR4Im17MGdramFjaWdgJgpAdiRkcXJ2KiY+IWMkZnliZyRkf29lJHt8ZGd0JgpAd2BhMFFjdnx1bCJFZGRkcGVlCkNjd2F8LSJle2Ngd2h8dWUiZnEwY2dlemMKQ3d2ZnlvY3BtdApCbWpuZXJra2YwdmtoZDBjZyRlaSFndGFkYHJsCkVtJGZ/dSJreHVvInFmZGhuJEt4c2t3fH1gcQpFbWovZCFgYSh0YGRwJDB1amFxMGJtcWR0byVwKHhodiRpfiFnaG1gaWNqfDBgdiR8eGhxJGx5cnYpCkVtai9kIWRrendkdiR8fyFxcGdgIWNqbDByb2FkfCF2bG0wc213bWMKRW1qL2QhbmF8MHVqbXswaWN0eHVvInBnMHhtcSkKRXdoa3UhZ3AodGRha3plbCJhe2QhcnZnMHFjcHp5YCJpZ2JoCkR2JGF+IUN2a3Fla2UodWZtCkdjcHxpIWNqbDByaW1mfngic21+dSJwZzBjZ2AmMCFEZXxkeCJ2Z3xtZ2Aof3dndihxb2Yke3tobGpxMHZjdyh0ZGNgJjAhUW9hfm97JFt9aHZsKCE4OjclIjEyNCYKR2tqaXxteyRBMGBvJGp1Ym1pYX5mInd8ZXFrYG1iIWxrKH1ucGEKR21oZH92ImltMHVtJGB1bW4KLywqbn9zImJpfW53dyh9ZGwkYHF3ZyR8eGQic2B/bWckbXFzdmwocXIicGB1aHAkZXVsbXZhcW0KRmNpbTBudGF6PCFvZWY+ISJDaX1kImt+dXMsCkZtJGlnYHslKDBIJWkoZHN7bWZ3IXZrKGRgaWEocSFsZXgwaGwkYHVzZyUoMENua2d0eCJlbGZkbHB9YmRwdyY+LwpGbWptMGdrd2B5byUKRm1rbDBva2NgZC0id391ZHYkeGJobGdtKiFDamwwZ25tb3h1cSRndiFjam91bXEke3lvZSR8eGRnJHx/IXZscTBzZ3d8MQpGbSRcdWBvJEl+dSMKSWckbnFzb2FsMGlrdyhnYHskYHVzZwpJZ3ZtMG1rYXswYCJ0en9mcGVlfWRwKigwSmtoZHVlImZxMGAiYmlkYG4kbWJzbXYmCklndm0wbWthezBDbWYoPSFmYWt5ZWdgKGRuInB6aSFjaihxYmtgKHJtbWYKSWd2bTBta2F7MEV3YGR1eC4kY3ltbmFsMGN7JGl+bnZsbWIhJyIrUCIkJGZ1dnYqCklndm0wbWthezBGcGFvdy0iZ2B/amdgKH9vImVmMGRlYwpJZ3ZtMG1rYXswTWthez4hIk18N3IiUHplZCwKSWd2bTBta2F7MFVqYShcYGZ9L2Mhb2VhdC0iYGF1ZSJrbjBgIlJnYnFjaChSbWNgbQpJZ3ZtMG1rYXswdWphKHxkZHAodm5tcCh/ZyJOaXNqLiRjeW1uYWwwY3skaTBtY2psMGxram0+ISJIbWQhd3coe29tcyh5ZyJ9Z2UhZG1mdCFjanEwbG12bTBuZCRgeWwKSWckf3FodmFsMHVtayh8bmxjCkglYChiYHZsbWIhYGEoY2BraGF+ZgpIZCRpMGxjai9jIWZhbXRyImBnMG9tcCh/dHZoYWZkImxhfS0ia24wdmplfDB3Y2h9dSFrdyhxIW9lensha2ooY3Vtam0vCkglaSh3bmxqaTBsY29tMGh2JQpIInBnf2oiZmdkaSJ0YXxtcSUKSCJzYXxtInd9Yndrcm0xCkpraGR1ZSJmcTBgImZkcWJpJGxiYGVrZjAsLyRceGhxJG9iYHRhKHlyImFlYHV7Ck1ncCh9ZCJrfWQhbWIoeGRwYSkKTW1rY3lvJSRvf25mKChdZGZxe3EvCkxwdyYwUm9tfHgtImdgf2pnYCh/byJlZjBgcnRkdS8iJFt4ZCJobXZ1ImZteGhsYCh3c2thfnlvZSRgZXJgZWZ0LSJgaWVmanBtYi0iZWZ0IWV2aX5lZmV9d2l2YXo+Ck9tZmd0eCJmbXxoZ3JtdCFqYXowdmphZjByamEoY2BrYCh4ZHAkbnVkdiR/dXNnJGN5bW5tZnchamF6Ck9tJSgwSCJgZ34mdiR/cW92JHx/IXFhbTBseyRscWxsJGt/b2Zxa2QgCk5sYShzbnB0e3UtIndpfnIibG1xZQpObCR8eGQic2B/bWcoKFkmZiR6cXVqYXowY2ckYX4hT21mdXVtc2YKTmwkfnFiY3Bhf28KTm10ez4KTndwKGRuIkh9fmJqClJNSEwKUm1pbX9vZyR7dXUicXswdHIkfHhkImZnfWMjClVjb20wbHske2R0ZGIkMEgiYGd+JnYkZnVkZiRhZCFjanF9bnBhClVjb2F+ZiJlKGlkY3YodGRjYCh2bnAkfHF5InZtcXJtansKVWphKGJkcmt6ZHIia24wbHskbHVsa3dtMGBwYShzbm90ZHV1Z2hxMGBhZ31iYHZhCilWbGFjIXF0aXNkImJnYiFxZWR1KApVam17MHZjdyhxYnZxaXxteyRiZXJ2JGkwcWtwJDBjd3AoY2hsZ20wdWphenUhdWV7MGAiZ2dicXFhJDB2ZyRueW1uYWwwaHYKVWptezB2Y30oZG4icGB1IWF2cWB1ClV3JHllbnNxbTwhQHZ9ZGQ9CldDR0leQlsKVmdoa39sZyUKVmt3YDB4bXEoZ2RwYSh4ZHBhKQpYZ2UkMGh2JG9/dSJpbTB1bWsKWG1xKGNpbXFkdCFxYW0wdWphKH91amF6MGZ3fQovLCppfmUicGB1eCJpaXRkImltMGRsY3pxd2ckZWkhbXNmMGlnZWxjdW1qbTB1bWspCi8sKmpldSJwYHUhYGhnf2UibGljIXFwZ2BxZ2AoYHRvdGF+ZiJlZnQhSyRpfSFuYW5kIXZrKHRkYWVxPi8sCj1HfHh8ZHZtfnUhRmFkdXVnYDYKQCJpaWNuYWxhY3UibXswb2dybWIhcWV8eXJkbW10LwpAYWwkMCZ2c2ljIWMkf3VkImlnfnJ2YXowaGwkfHhkImhnc2kKQGZleGQvIiRNfmttfSYwIVFxemZodGEmCkBmcm1+dXd2bTwhamVgMSEiQXBzaHZhZXVvdigoeGBqJQpAZHBtYiFjaGQ8IXVsaWQhY3ZtMGdwbW1+ZXEkbn9zLComCkBkcG1iIXZsYWMtImpnZGlram8wdmtoZDByamtreyFvYQpAZHBtYiF2bHp1ZCJgaWlyLiRueXJqJGl+ZSJjfXVydncoY3VramMKQGVhKHFvZiR8YmRjZ2B1c3skf3ltbiRpfHZjfXswbnRhenNub2EoaW53cGAwYGxgKGNqa2hkCkBlYWF+ZiJtezBvbXAoY24iZml0LyIkXHhkInZtcW0ib2F8bWd2KHlyInNgdW8ifWdlIXFwZ2AvCkBrai9kIUskaTBydm1me2RwOwpAbmNtYm9tagpAbmgodW1xYSh2YGtobXQvLCoKQG5oKHhga2goQk9FCkBuaChiaGVsfDwhdWEvfG0iZ2l8bSJtfDBgImB6cXYjCkBuaC9jIXVhZHwhdmxpZCFnamxjIXVhZHwKQG5rZnUhY3AofGBxcCkKQG5zaWlyImV8ZGBhbyhxIWRoZ3F1a2pvMGR7YSh2c21pKHJkam1mdCAKQG8kQTBpY3JhfmYiYn1+IXthfC8KQGxgKFkhYWVmMHJ2bWR8IWF2aWdtLiRBN2wiamdkIWZhaXQhe2F8MQpAbGAocW1uJEEwdmNqfHVlInNpYyFjJG5iZGckZGVvYWwKQGxgKHFtbiRndiF2bG0wcmtjZmMhdWF6dSFwbW94dSJwYHVzZyRnfiF7a31iIWRla3UKQGxgKHRubCN8MGZrcm0wbGckfHhgdiRhfm9tZ21+dSJoZ39qImFhZGlndikKQGxgKHV3Z3Zxf29nJGx5ZGYqKDBDbWsoeG5tJGB/biwKQGxgKHhkcGEoWSFlayhxZmNtZj4vLApAbGAofm5ga2xpIWFlenVyInFmZGhuJHt/bGdmZ3R4ImJpfW53dyh0aGd3Jj4vCkBsYChjbiJtfDBkbGB7LwpAbGAoY24sKiYwaHYkanVma2p7PgpAbGAoY25vYXx5bGd3KGRpZyRqdWBwJG1xdXEkcX90LApAbGAoZGlnaig3ZCJqaXltZ2AofWQiI21xZSJwZzB1amEodm1ta3oxCkBsYChkaWd9KGNga2AoeXUiZ2dlbWZqL2QhYGEodG5sYSkKQGxgKGdpY3AodG4iTSh8bm1vKHxoaWE3MCFWbG0wbWtyYX5mPQpAbGAoaWRxKCh5dSJzaWMhQ0hEMGlrdyh2YHdofDEKQGxgKGludyR7cWhmJGFkIXVlezBxcGF8ZHgibG1iZCwqJgpAbGt8eGRwJGR/cnYke390bgpAbH0odGB7JGlybnRhKHdzbXFmdCFrdyhxIWVrZ3QhZmVxMQpAbH0ofW5wYSh/ZyJwYHlyImVmdCFLI2R8IWZtbTBuZCRpMHJ2dmd7ZCJmbXZucGEoWSZvJDsgLwpAbH1qf2V7JHt1ZGwkZWkhamFpdD4KQGx9Z35kImJnYiFmYWlkaW9lfHNpPQpAbH18eGhsYyh2bnAkaTBiamVmd2QsCkBsfXx4aGxjKGRpY3Aoe2huaHsweG1xKH1gaWF7MHhtcSg+Lywkf3VtbigodGRjYApAbH18eGhsYyhnbnBwYDBlbW1mdyFrdyhnbnBwYDBudGF6dG5ram8+CkBwYShlb2tnZ2JvcSR7ZXFya3t1ZW59KGBkY2dtdnRuJGF2IXtrfTdzZyRpMHdrdm95bz0kKFhgaiUKQHBhKGdkImVkfCFgYWF+ZiJgYWNobHBtd3NjcG10LSJrejBocSRhZCFocXtkIW9hNwpAdiRkdWBxcChZJm8kb39uZiRpZCFxa2V1dWptZncKQHZwbX1xdmFsMHJ3bWt5ZWcKQHd2YTByY2d6cSFkZWV1cgpAd3ZhcnRxJHx1b2drKHx0cnFlCkNnJHhiZHJlenVlCkNnZX1keCJ3fWJ3a3JtYwpDZ2FmMElndm0+ISJKZ2chRWtmdS8iJEBxZSJlKFdubWAoRGhvYSYKQ2dhZjB1anZnZWZqJEB1bW4oKHVpPSQoR2ljcCh0aGYkcX90ImZ6eW9lJGV1PgpDZ2MoaW53dihgYHBgZ34tImBhdG8lcChiZGFrb35oeGEoaW53KChZJnRhKHNpY2pvdWUiZSh8bnYqCkNnbWZ3IWZhaXQhYHFhfGVxJGt4YHBla2RkcApDZ2hnZmRmJGxxdGVsfHVzLiRpMHVwYWljdHBhJDBjd3ZhdWUibG1iZCwKQ2d3fDBncG1tfmVxJGt/bGckaX5lImNnPi8sKigwTGtqbTBrd3d8MGVrYSYKQ2dwfHVzImZtMGVnZWwwdWplZjBgImJpZCFxaGlmZApDZ3B8dXMiaH1zaiJqbWh1InBhfWQKQ2dzaWJkImtuMEVrd2t/c2ZtaX5yImZtcXNram8wYGx3f3VzcQpDZ3NpYmQicGB1ISwqJgpDbmtndHgiTG18bSwqJgpDbmtndHgiZmliY2N2YXFvcSUKQ25rf34hd3R/cXNmJGdldSJrbjBya2NgZDsiTG0wcm1xb3h1InBgdSFuYWl7IWB9KHNgbGBkdW1rY2BkCkNwZWF+ciwqJjBDcGVhfnIsKiYwR3Bhe3ghanFlcW8iZnpxaGx3Jj4vCkN3dmF1ZSJwYHUhYWV8PiEiUGd/aiJlZjBpbXF6PiEiQGl9byJwYHlvZSRjdXF2JG55ZmpwYX5mLApDd3AoWSFmbXtxc29hbDB1amEoZHNjdCkKQk1KRlVCViQ5KTc2JCUwT00kS1FTUE1NQiEzPTEkCkJjaGQwbGckYXYhe2t9MG9nYWwwbHskeHhubGEofnRvZm1iIApCY2ooSU5XJG58eD0KQmNqKGludyRqdW1rYX51IXZsaWQhdmxhfmYibXswUlZNRFwhb2t+eW9lOwpCY2ooaW53JGt/bGckfWAhdW18eCFxa2V1IWBhfGRkcCRtfmVram8wZ212KGRpa3c3CkJjaihpbnckbnVkbiRpfnh2bGF+ZiJzYHVvIk0odG4icGB5cj0KQmNqKGludyRveXdnJGV1IW9rfWRpInBnMGxtcXx4LSJ9Z2UhaHF7ZCF2a2d7IW99KHJzZ2V8eCFjc2lpLwpCY2ovZCFLJGJlcnYkYHF3ZyRpME1LUFxcRCJ0bWJobjsKQmNqL2QhZ2V8PCFhZWY3dSJ3ZHVkcigoeGBmJHx/IWBxemkhdmxtMGl3d2pxb2YkYHVzZyoKQmNqL2Qhe2t9MGlrcCh9ZD0lCkJqZWdjLSJ0aX5oYSRpfmUiYGFjbnBgbWIvIiRFaSF1a3p7IWphenUha3codG5sYSYKQmpha3shZ2prfG5xYWw+CkJqYWt7IXZsYWMhbXF8MSEiTXw3ciJpcTBjcGVhfiAKQmptfnFtcH0oeXIia2Z8eCJ2bXFybWppcm17JGx1YGYKQm1ibnlvImJnYiFxZWR1LyIkRHlnZ3BhfWQiY31xc2NqfHVkLApCbWltMExtamxxeC4kQTdtbiRqdSFjaGQwc2tjYGQvCkJtaW0wYGxgKGNkZyR8eGQicmF/bWdqa3Uha2pgdXNnanwwaGwkfHhkIndxY3VnaQpCbWltMGNjZ2MwaWd2bTEhIk0vfG0iZmFkZCJ9Z2VzImZkf25mfSh7b2dhezBuZGIpCkJtaWV/ZW12bTBDd3dhfmRxdyhdYGFsYX5kcSgoWW9hKigwRWthbDBnbXYof3RwJHt5b3EqCkJtaXh8YGtqKGRuImtmdSF1bGcwYmNqKHhkbnQoaW53CkJtam51cnEkZWkhcW1mYyF2ayh3bmY7KDBWam1reCFtam0vCkJtam5lcmtrZjB2a2hkMGNnJGVpIWd0YWRgcmwKQm1rfHlkcTsoMEBrai9kIWxrKHNubXBhdXIia2YwbGclCkJtcWR0IXFrZXVjbWBxMGZncChkaWt3KH5ubXdtMG5kYih9ZD0KQm1xZHQhe2t9MGJqYWt7IWNjaXlvPSQoXXgiaml9ZCJJXUNVImZtMHVqYXp1LwpCbXFkdCF7a30wcW5haWNkInBpe2QiZShyc2dlfHghb21mZD4KQm1xZHRvJXAoWSFgYShjZGZlfHVlImJnYiF2bGFjPgpCbXF6cWZnJGFjIW5rZ3tobGMocXUifWdlcyJ3bWRjY2djYyF1bXx4IXFhenVva3BxCkJtcm1iIW9hJDBIJWkod25ram8waGwlCkJwZXt4IWFrfWJyZyRhfiFgdml5byJ3fWJmZ3ZxCkJwa3tjIW99KHZobGNtYnIiYmdiIW9hJgpCd3Z7dSFla2wwYGxgKHRoZwpCd3AoZG4iYmFkCkVnI0lkaQpFZ2VsMEBlZWF+PiIkWHFzZmtmMGxnJG5/cyJqZ2QhZWF8ZGhsYyh5dSJ2YXdpdiR8eGQiYmFicnYkfHlsZyUKRWdlbDBgbGAofG50bWZ3IWdybWJ4ImlnfWRscCkKRWdlejB2a2JtMG5kJGV5b2cqKDBFa2FsMG5kJGkwY3BrY3VvImxtcXN2KChxZ3ZhejBIInBnf2oibXwwbndwKH9nImxtYi8KRW1qL2QhdnZtcWUia2YwbGclCkVwZW9/bz0kX3hgdiRsYmBla2YvCkVwZX9+IWNqbDBwd2V6ZGRwYWwKRGtwYHVzIk0vfSFmYWl0IW12KH14InNpZGJqJGBxciJ3fH9xcmFsPgpEbm1ycSEvKShHYHEkQTBzZ2VkfHgiZWR5d2coKH9zImBhdCFLJGJlcnYkfHhobG8oWSF1ZXsvCkRucmFjCkRscG1iIWxrfDBobHBnMHVqYShgYHZsKH9nInBgdSF1bWt7ZGYKRHBtey8hIk0odG5sI3wwb2dhbDBEcG17CkR2YXp+YG4kTHFsbGV8eW5sKChTbm9hKHFvZiR7ZGB7JGkwbW1qbzB2am1kdSAKRHRhZjBVamEoVGRjYChgYHskfHF5Z3coOGBsYChkaWd9KHFzZ2ovZCFFdmlkZGRxZDkvCkR0YWYwYCJwZ31jInd8f29nJH95bW4ke3F4ImNnf2UicGB5b2V3KGdpZ2ooaW53I3p1IWZrf34gCkR0YXowb21wYXNkInBgcXUiaGFmZCJtezBkdG1kMGNjZ2NnYHBgey8KRHRhemkhZmVxMGhxJHtkYHBwYX5mInBnMG1ta2MwbWtvbTBMbWpscXgKRHRhemkhZmVxPCFraih1d2d2cTB2Y30kMEgiZWUwZmdwfHlvZSRqdXV2YXowYGxgKHJkdnBtYi8KRHRhemkhcXF6Zmh0ZWQwamtwKGNpbXFkdCFramt8dGZhKHEhcWFmY2Qia24waXdpZ2IKRHRtZDBIImBhdCFmc218bTkkKHxkdWAodGhmJEEwbWtybQpEeiR4f3J2JG5lYnZrCkR6Z218bWdqfDBlY30oZG4ibGlmZCJlKGJudnBtfiFmZXE+CkR6Z31jZCJpbTBnbXYofm52JHtkYGxgYX5mInF4PgpEenRtYmhnamt1IWt3Zjd1ImF+dXN7cGB5b2UqKDBHa3Z7ZC0ifWdlJnRhKHdudiR8fyFxcXpmaHRhJgpHa3Z7ZCFxbGl8dSJwYH90InR9fG0ia31kIXZsbTBJbWhxMFFragpHbXYocSFAdm1xdWooKFkhVmV6YngsKiYKR212KGJkYXZtcXVra2ZxbSJxe3UhbWpkaS8KR212KGNgbmEyME5sYShjbndoJDBybm1veHVufShlcmdgJjAhQ3djeW9lJG5/cyI3KGdocWxtYy8KR212KGNub2EofW5vYWZkciJtZjBta2JtPCF2bG1iZCJlenUhbGsoZ25wYHs+Ckdtdm91dSJAYWNvZ30oR25waGw8IUsjZTBmbW1mdyF2ayhYZG5oKQpHbXZvdXUiZWp/dHYkfHhkImBndy0iRm1nYHBhKH9nImlxMHZrYm0+Ckd3am1iYG4kJTBTZ2VkMGd3aiYKRmNzbDwha3AvYyFmYXhiZHF3YX5mIm1mMGlndm08IWt3Zjd1Im18LwpGZ2p9eW9nJE1ocW5rbHlvZSRPYmB0YXtkbmxhJjAhKmchUWJvYShXc2NybWN1bWptYyFLams+CkZncChyYGFvKHhkcGEpMCFLI2Uwb21wKHZobG17eGRmJHF1dSwqJgpGbSRpeGRjYCQwSCJgaWJkIn1nZSF2aykKRm0kaXhkY2AkMGh2I3swZGtwYHVzIn1nZSFtdih4aG8qCkZtaGx5bW1nY2MhLykoRGlrdyhzYHFvbWQha3coenRxcChiaGVsfApGbWptMEN3cChebnYkTn9zZWt8ZGRsCkZtam0wVGxgbWJmcGt9fmUiQmdiIUVrZ3QKRm1qbTBgdWVxMG51bWY3IW9renUhdmxpfiFqYShzbndobDBxY30mCkZtam08IWBxfDBvbXAodm5wY2FmZGwKRm1wKHEhbm1udS8iJEx5ZWwjfDBqbGt/MHZqZXwwdW0kbH8hdW18eCFrcCYKRnBlfnU+IiRKZXUiTShnYHEka2Jkb2V8dWUjCkZwYW1kaGxjezBncGtlMElnaGQwLCJTYWNpIn1nZSF1YXp1IWphenUvCklHSFgxIUtwL2MhZmV6eyFraih4ZHBhJj4vLCQoX2kuJGVpIWd9bWMhY3ZtMGJua3t1ZSIpKGNucHZxCkljJShZIUxBXlVTInRpaSFramt/bGckfHF5IwpJY3JtMHhtcShzbm9hKGRuInZpeXJnJHx4ZCJgbXFlPQpJY3JhfmYiZSh3bm1gKGRob2Eoc2BsJGp1IWZhaXRteyoKSWNyYX5mImUod3NnZXwwdWtpbT4hIlNgdXNnJGl9IUskbWhgYXBkaT49CklnJGx5ZGYkZ3YhdmxtMGducXA+CklnJGx5ZGYkfH9lY30mPi8sJChdYHskf3UhcGF7ZCFraihgZGNnbTEKSWckb391InBgdSF3dHt5ZWcoKFkhZWt8MHVqYSh0bnVqe3llZyoKSWckZH9ydiRgeXIiYmlzZCJzYHVvImxtMHZjdyhyZGphaXRkZioKSWckZXlycWFsMGxnJG55c3FwJgpJZyN7MG9tcCh0ZGNgJDBpZyRiZXJ2JHt9ZG5oezB1amV8MHZjfSYKSWdoeDEhSyN+dSFkZWR8ZGwkaX5lIk0oc2BsI3wwZmdwKGVxIwpJZ2h4PCFLJGtxbyVwKGdgaWEoZXEjCklndm0wbWthezBRa2pnc2JqbWcKSWd2bTBta2F7MHVqYShybmZ9KH9nIk5neG8iVmdlb2YqKDBNbXd8MGB2JHt1YCJlZnQhbGF+dXMiYmdlb2YqCklndm0wdWphenUhYGEodHNjY2d+cgpJZ30kMEgiYGF0byVwKGdza3BtMHVqbXswcnZxbnYgCkltYGF1IW9tYHktImd6cXIicGFyaApJbWhsMGx7JGtxbW53CkltaW0wUnVhbWQhSmFkfApJd2l4ZHgiQH19cXZ9JDBgIkZpdCFHY28+ISJMbTB2Y3coYHRxbG10IW1ibjB1amEoZ2BuaCYKSCJPRlVWInBgeXIic2dlbWYkYHFxcmFmMGhkJEEwbWtybXQhbmtmdyFnamdlZmoqCkgiUEdcRSJ9Z2UhSyR/cXIid2FzaiMKSCJlYX4mdiRqYm5pYShydHYkQTBgbyRqcWVufShyZGxwJgpIImVhfiZ2JGd8ZSwkKFkmbyRreHNtamd8bmVta3Ftbn0ocWV0ZWZkYGVhbD4KSCJlZTBPTVAocSF0ZWVgaHBhJjAhSyRiZXJ2JGR5amckfH8hYG18dS8samFyY25hJDBzZ2VkfHgjCkgiZWUwaWd2bT4hIlNhY2kifWdlIXVhenUhZG1mdS8KSCJlZTBvbXAodGRjYChpZHYoKHJ0diR/cXVhbCh2bnAkbmVzdmxtYiFwYXh/c3Z3JgpIImZtfGhncm0wdWphZTBjbWptYyFjdm0wbGcqCkgiZnp/amckYHlyImZ6cWhsKgpIImdpfiFkYW18IWtwJjAhT30ofWhsYCYwIUtwL2MhZWthfmYsJChZIWFlZjBnZ2FkMGh2KgpIImdpfiZ2JG9/IXZrKFhkbmgmMCFWbG1pJnBhKHFncGVhdCFLI2UwZm1qZnEhdmVjdSFtcm1iIApIImdpfiZ2JG9/IXZrKHhkbmgkMHVqYXEwZW1qL2QhdWVmZCFvYSYKSCJgYXRvJXAocmRubW1mZCJtZjBzZ21mc2BwamlkaG1qKGRpZyRkcXJ2JHx5bGcoKHVodmxtYi8KSCJgYXRvJXAofWRjaih5dSJzYHVvIk0oY2BrYCg3Q2twbTBsZyMKSCJgYXVlImhpZWZqbWZ3CkgiYGFjY2doYXV3Z2AoeW8idm15b2Flen5gdm1nfiFraih9eCJoaWN1ImhhdmQuJHx/biwKSCJsaXNqZ2AofXhxYWR2IXZrKHRkY3BgCkgibGlmZCJlZHwhdmxtMHVraW0waGwkfHhkInNnYm1mCkgib2Z1diJNL3QhZG1mdCFjJH1jZCJiZ2IhdmxhYyFldmlmZHFwZ35kIwpIIm9mf3YiaXEwbGtqbD4hIkVmdCFrcC9jIWN2Z2VvZiRgdXNnJHt/bGd0ZHFiZyoKSCJoYXVlIyQoWSZuaCh+ZHRhejBjZyRpfHNrY2BkIApIImhhe2QibXwwY2dwfHVzIm1mMHVqYSh0YHBvJgpIImhhe2QicGcwY2ckYHVzZyR/eGRsJEEwYmNqJgpIImlpaSFwbXt1IWBxfDBIInZtdnRxYShkbiJ3YHlvZyoKSCJqbWZkcCRvdXUiZWZpIWdtfHhkcCoKSCJ3aXllImxhZCFKTUUwdmtwYDB1amEodmhwYWpxbW4oKH5udiRldSAKSCJwZ3xlIn1nZSFLJH9/dG5gKH5kdGF6MHJjfSh3bm1gamlkLApIInF7dWUicGcwY2ckaX10cW1mdy8iJEZ/diJNL30haHF7ZCFmbXt3dHFwYX5mLApIInF7dWUicXgwYG5oKH14Indhc2oiYGlpci4ke38hbGt/MEglaShzYG5oYX5mIm1mMGVnZWw+Ckgic2ljIWltZHxkZiRqaSE+bWR8ZGVtanxkIndrYmB1aDYKSCJzaWMhcWtldWNtYHE+ISJTYH8tIm17MG9tJGplcmtqbWNyImtuMHhtcXpjLwpIInNhfG0iamdkIWVrKGF0a2F8fHgsCkglYCh3aHRhKGludyRpMHFrYWt1IW1iKH14ImlhfmUsKiYwY3dwKFkhYWVmN3UiYmF+ZSJtfD4KSCVgKGJgdmxtYiFgYShyc2dlfHhobGMKSCVoZDBjZyRqcWJpJQpIJWhkMGNnJGV1bW5rfzB2amFmMEglaSh0ZGNgJjAhRGt6MG9tcyQwbWdwL2MhUkVaRFgjCkglaSh0bmtqbzB1am17MG5saHEwZ212KGRgeiR4ZXNya3t1ciwKSCVpKH5udiRpdnNjbWwwbmQkTHVgdmwpMCFVbGlkJnEkYHUhZWtmfmAiYGcvIUltZHwhb2E3CkglaSh+bnYkb3V1dm1mdyFnamdlZmokZX9vZ30kMHJtJEE3bCJqZ2QhZWthfmYicGcwZGxjenF3ZyRpfnh2bGF+ZiJxe3Vnd2goeGRwYSYKSCVpKH5udiR7cXhram8wYGx9fHhobGMmCkglaShnZGdwYDBydnF4dWRmJCU9LDwKSGQkcX90InBgf3RlbHwweG1xKHhgZiR4Ym5gaG19ciwqJgpIZWpnYmBsZ20wamtoZGMhZmVhfHgsCkhlamdiZCJpbT4vLCRBN2wibn1jdSJsbWJkImJnYiFvfSh8bm1vezEKSG5hZnUhVmtndmBwJCU9IURhZHwhbWJuMGAiZ2R5Z2QKSHEkfHhgdiRpfG09CkhxJHx4ZHBhKHxoZGEocmRka3p1IUZhaWRpPQpIcSR8eGhxJGkwa21vbTwhbXYocSFldmlmZCJpaWR1Z3Y3Ckh2JGBxcXJhZmMhcWtldXVraW1jLyIkWHVucmhtMGt3d3wwZHp0ZH9lZyoKSHYkZWVydiRqdSFWbH1icmZlcT4hIk0ofmR0YXowYm1xZHQhZWF8MHVqYSh4YGxjKH9nIlBgZXNxYGlpciwKSHYkf3FybCN8MGAiYml5cyJiYXdpdgpIdiR/cXJsI3wwcm0kbXFyeyoKSHYjezBNbWt8PCFSbWR8YGVhKHFvZiRcWERMJEplc2wqJj4KS3d3fDBlbW1mdyFvfSh6bmAkYHVzZwpKa2hkdWUiZnEwZWtlemJpZ2Uof2ciaWdldWokaX5lImdnfnJ2bXhxdWtrZjBuZCRqYmBraiYKTWdwKHhkcCRaWVEKTWdwKHl1ImZtKyFLJGl9IWZhaXQvCk1ncC9jIXJoaWkhSm1sdSF2bG0wQm12eGNkCk1rYm0waHEkRl9VImUodHNnZWUKTGNgb3UhS2ppZGhtaig9LCJNfDB2Y3dmN3UiZWR8IWtqKH14ImxtcWUKTGdhfDBsZyRhfiFKYWlmZGwKTG1ybTBubCgoZGlndm03ciJqZ2Rpa2pvMHVtJHt1ZCJsbWJkLApMcCooVm1ranxjdW1qbTAsLyRRcWNgZSV0YGBmaT1lbWptCkx7JGB1YHBwKHlyImpnZCFraihkaWt3Ck9tJGd+ZCJhfnVzImBhdWUiYnp/bCJtfApPbSgoaW53JH9xb3Yken9ubyQ5IkAuJGZ1eXYkbH9ucCoKT210bT4hIkpnMHVwZXgwbmwkfHhgdiRreGRxcCYwIUske2dkY3YmCk9tcChxZmNtZjEKT21wKHV3Z3ZxMHJtbWQwYmNqKHJkY3YocW1uJHx4aGxjewpPbXMoWSFqZX51IWMkZHlnZwpPbXMoWSFuZXEwdWphbTBlbXNmMHVtJHt8ZGd0Jj4vInNpfm9jJGJ/aGwkZXU+Ck5JKCh4ZHBhKHlyImUoYXRnd3x5bmw+KEdpZ3ZtMEBQQShpbnd2KGRgbGhhfmRxOwpOYGF7cSFBZWZkYHRtfApOaiUoUW8icWZkaG9hZGkhZmFpZGksCk5qKChyeCJwYHUhdWVxPCFqa38wdmN3KH14ImJ9fmRwZWQvCiNNbCQwaW1qbWkvLCooWSFvbXtjZGYkcX90IyYoY2lnJHtxaGYoKHFvZiRueXNnYChxZmNtZj4KTmkoKGNuInBgdSFubW94dSJgZ3VyImNnMG5kYiYwIUxrfzBtZ3AofWQia31kIW1iKHhkcGEmCk5sYShjdW1qbTBjcGVhfgpObWwpMFJtaW1ybmZ9KENVTVQofWQjCk5tdHsxCk53cCh2bnAkfHhkImphd2l2KigwTWdlfnUhYyRldXJxZW91LwpOdSUoMEVtJHx4YHYkaXdga2opClFjdmx/byJpcTBld3d8PgpRY3Z8MG5kJGV1IXFwYXxtInNnYmpxKgpRbmFpY2QuJGZ/dSJtZjBncGtmZCFtYihkaW13bTBucGd7MQpRcGF4cXNnJHx/IW9hbWQhb2EoeW8iTG1xd2dqClMwQDowLC8kWnVydigoRGhsJFh5ZGFhClNnaGloLyIkRn91am1mdyFncm1iIWpleGBkbHcof28icGB1IWRtemN1ImhtZmRuKgpTZ3cof2xsbWkwbGdlKHN0bnRpMGRxcApTZ3d8MEhsJFh5ZGFhewpTZ3d8PCFwYXtkLSJ0bWJ1d3ZqdWUid3h5c2twJgpTa3QoRG5wagpSamEocW11ZXFjIXFlYXQhamF6MGdnYXwwdmd2bTBqa2hkeW9lJGB1cyJmfWQhbGtqf2V7JGp1bWthfnVlImxtYi8KUmphKHRoZ2Aof2ciZShzaWd3fDBibWhsPgpSbSRkdXUibXwwY2ckf2JodnBtfi0id2cwbWdwKHl1ImZtMGVtam0xClJtJHx4ZGwkQTByY317PCFKa38wZW0kQTBqbGt/MHhtcS9iZCJwYHUhcGFpfCFjam91bSJrbjBlZ2V8eD4KUm1pbTBxY3BhdW92dyh5b3Fte2QhbWoodHhram8+ClJtaW0wcWdreHxkImxpZmQibXwwZWdlbDBkY3dxPCFma2Y3dSJwYHV4PQpSbWltMHVqbWZ3ciJlenUhYGF8ZGRwJGR1Z3YkamVza2FsPgpSd3ZtPCF2dn1jdSJpbTwhSyNlMGAiaGlneGd2Jj4vClVqZWZ7IUVrbDBIInNnYmQiaXEwYm12e3V1LiRqdWJjcXt1IUskfHhobG8ofXgid2F0ZHEkYHF3ZyR7YG1rcCYKVWplfDBocSRpfG0KVWphKFduZncoVE4ibGlmZCJlKGNkbHdtMG5kJGBlbG12MjBIJWkofGh0bWZ3IXJ2Z39nIwpVamEodnNtYy9jIWZhaXQvIiRAdSFJYXp9aHZwbXQhcXFhc2hmYSYKVWptezBld2pvdW5sJGFjIWMkeGVyamt+dXMKVWptezBkbmF+cXVtdih0bmd3Zjd1ImNnMHVtJEB1YHRhZgpVam17MGZwZX51cnZrZnUha3coY2ljdm1nYHBhJjAhVmsoYmRlbXtkZHAoKGBtZ2V7dSFxYWZ0IW9hKCExIn5nYmpvbWxjClVqbXswZnBlfnVydmtmdSFydmdmaGZhbDBjeyRceGQiXW1+ZW12YXFvIkN6cXdnJFt1c3Rta3VyIk1mcy8KVWptezBocSRmf3UiZWYwaG90Z2J1Y2p8MHFjdnwwbmQkZWkhbm1udS8KVWptezBubGEvYyFtaih9ZCwKVWptezBya2BtMHRyClVraShSdHB2KD0sIldlcXJqYWwwY3skaTB1cGFtClVtam0waHYkbH92bCRpMGNrcCQwSCVpKGRze21mdyF2ayh3ZHYke39sZyR6dXJ2JGB1c2cqCldrdnxlYG5ocTBAbm1+dQpWZyRfeW1uJEV1ZHYkSXdga2omClZnYXgwb21wJDBpZyRhYyFjcChiZHFwClZnaGt/bGckfH8hRmVmZGQldyYwIVVsaWQhbmF+dW0idGR1YHFhNwpWZ2hkPCFjcCh8ZGN3fDB1amFxMG1rd3x1b2dgKGRuImlxMHJndmV/bywqJgpWZ2p8MHVtJGp1IWNqKHFvZWFkPgpWamV8MGBwYShpbnckbH9obGMof3dndihkaWd2bS8KVmplfDBgcGEoaW53JHt9aG5tZnchY3A3ClZqZXwwYmNqKGludyR7cXguJEx1YHZsL2MhZWt8MGBydG1xbSwqJjEKVmplfDBpZ2VkZGkiZ2liZD0KVmplfDBxa3A3ClZqYWYwdWphKHduZncoZ2BscChkbiJ0fX5ocWwoaW53KChkaWd9KHFvcXNtYiF7a31iIXJ2aWlkcHcmClZqYXp1IWcjbWIhe2t9MGNnJGR1dSJ9Z2VzInNhfmUiY2cwZ3BhbT4hIk9tdXFram8waHYkYX4hdWV7MHVqYSh0ZGNwYDBuZCRldSAKVmphenUmcSRlaSFwYW5lb2Y7ClZraGQwbWdwKGludyRjfm51JG5/cyJ3fWJkIm1mMGAiYGlpIW12KGR2bSomPgpWa35pYmVxJGliZCJzYX1xcQpWbXZlYyFjcChnbnBvJDBlbSRmf3UiYGFjdXd2ajEKVm1xZHQhe2t9MGxramwwbG1yYX5mImUocmh2OygwSCVpKGNpbXZ8MG5kJGpiZGNwYDBlbXNmMGlndm0+ClZtcWR0IXtrfTBwd218MGNnbWZ3IWdyYXwhbXJtYiFvfShjaW1xZHRkcDsKWGMkenVgbmhxMGljYCh9ZCJjZ3lvZSRqcWN7KChydHYkZn92Ik0vfSFla2Z1LwpYZ3coVGRjdiQwa3d3fDBgImJtZyFva3p1IW9tZmV1Z3cmPi8KWG1xKGNga2AoeXUic2ljbyVwKGBua3dnfm53dykKWG1xKGNkdiRlaSFqYWlidSJlbnxgb2EmMCFba30wZmNybTBsZyRgdWBwcGplc2wqCiMJVGhpcyBkYXRhIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5ICdtYWtlZGVmcycuICBEbyBub3QgZWRpdC4gCiAgIDIxCjAwMGNhCjAwMjY4CjAwMzMyCjAwM2JmCjAwNGZhCjAwNWY4CjAwNmFmCjAwNzkxCjAwODVkCjAwOTliCjAwYTY4CjAwYjZjCjAwYzdjCjAwZDliCjAwZTljCjAwZjk2CjAxMDc2CjAxMjdlCjAxNDFmCjAxNjIzCjAxNzBhCjAxODFmCi0tLQojLComeXUibXswc2NwYHVzImBhY2Jtamt1c3ZtZnchdmsocmQiZ2d+Z3BrZmRkZiR/eXVqJHx4ZApnbWhkf3Zram8wdWphZ2JkbyRuYm5vJFNSYGlhejwhRW1kfC0iZWZ0IVFrZH93Y30kMDA7Mz1NLwoKVWphZ2JkbyQ/PjA6JChEaWd2bTBkem17ZCFwYWtlc3FtfnUhbmVmd3RjY21jIUMkaX5lIkYoY3RhbChkaWNwCiEiLDk5ISJUIFEoIjk1ME9SLEk5LSJlZnQKISIsOjkhIlQgUigiJTUwT1IsSjkKClVqbXswcXBrfnllZ3coeWxydm1jcmtybTBkdG1sdW9hYShkaWNwKGRpZyR8dWJqamFhdGd3KGRpY3AocXNnCmJ3dnp1b3ZocTBgdGVhfGBgaG0wdmtoZDBvbXAoY3RkYmFzZCJiZ2IhcnZnZmhsYyhkaWNwKEAhIzkoXlEia3owISIkKDAhIiQoCnVqZXwwUSI5NTBPUioqMCFZQ2liZHskaX5lIk5neG9xa2Y8IXIqKCE5NypVCi0tLQpIZCR8eHgic2l+ZSJsaWRpInZ9fiFtcXwwbmQka3hgcGNtYy0icGB/dCJpaWlydiRycXEibXwwYGVlYX4hY2psMGBlZWF+OiJwYH90ZWwKb2Nxb3h1InNhfG0ibGlgcWdqKHF1ImJhYnJ2KChmZHBtZGktInBgaSFyYXpjaHFwbX5iZyR7eGBuaChyZCJ2bWdgcGBtdC0iZXsKbmxhKHxgcXAoc2ljdm91IW9lcTB4Z3AocmQic3p1cnZhbDBncGtlMGh2JQotLS0KVWprfXdpInBgdSFxbGdgamdheHVzcSRqdSF1ZXppLSJwYHlkdGF7MGljcm0wb2dybWJ1amFkdXJxJHtkbm5hZjBsd2dgMGN7JH1jaGxjCnVqYWFiIWZtb3dobGMoZ2BsYHswdW0kYHFydmFmMGR6bXxjIXZsen90ZWwoZGlnJHhxd2dpbX51LAotLS0KSGQkfHhudyRgcXJ2JGBxZSJwen90YGhtMHZrcGAwc3d3fDBubCR8eGhsYShxc29rejBucCR/dWBya2ZjLSJwYH90Indgf3RuYHtkCmpsa38wdWplfDB1amt9MGJjantkIXJ2bWZkbHAoZGlrdyhyeC4kf3hobmEoeW8iZShzbmxifWNkZiR7ZGB2YSQwc2dlbHlvZSR8eGQKbGNjYXNgbiR4cXNhbGV1b3Z3KGdpa2dgMG9tdmVxbW59KHFzZyR9Y2RmJHx/IWFlfWNkInBgdWhwJG1+YmplZmRsZ2p8PgpUbGN9dW92dyh/ZyJofXJza2dpZGhtaih9YHskeGJudG1sdSFxbWV5bWN2KGBzbXBtc3Vra2Y8IWNoanVodiRndiFjCnVwZWZjaHZremkhbGV8ZXNnKgotLS0KQ2dsZ3xlInBgdSFha2t7YHZ2YXNkLiR/eG5xYSh0aG9tZmV1a3JtMHJ2ZXxlc2ckanVta2F7MGh2dyh4aGZgbX4hb21veHUsJChEaWcKYm1nY3F1cG1rdSFhZWYwcWdwenlneyRpfngia3p0aGxlemkhYGFhfmYibXwwYm1qfHFidnclPXJjcm0wdWpre3UhdW17dQpgZnJtfnV3dm1iciJzYH8hZ2V8MGAiYG1xZSJoYWpgcGAof3MiZmR/YyJrbjBgYW1sMHZqYWYwdWphcTBnZ2FkMHVqYWVjZG5ybWMKcm5rf3x4InB9Ym9ram8wdW0ke2RubGEmCi0tLQpWam1kdSFxa2V1IXVlcXZgcGF6YyFwYWRpIW1qKGNicGt9fmZram8wZ2tqYWNpZ2AocXNva31iIWtqKGRpZyRsZW9lYWd+LSJwYHUKc2d3Z2VzYWFuZW0ib2Z/diJwYHUhb317ZGhhZWQwbGdlZmMhYH0oZ2lrZ2AwbGNtZDBsY30ocmQiYmljaWtrZnVlImt9ZCFtYgpyYWVkdXIiYnp/bCJlKHRzY2NnfiZxJGB5ZWcqCi0tLQpIdiRhYyFhcXtkbm9lenlteyRjfm51aihxbG1qbzB1cGV+dW1ndnswdWplfDBkenB6cSxqYWl8aGxjKHRzY3FveHVxJGVxeCJnZHVgcAp1an0oY2Rsd21jIXVsbX4hdmxnZSFjdnwwYGZgZHVlImZxMGVnaH1jbnB9KGZocW1nfnIsJChSdHYkZnV3Z3Yodm5wY21kLSJwYHUKbW1zZGkhcmt8eW5sJH94aGFsKH1gaWF7MG5sYShjaGFvKH1geyRqdSF3d210IWRrejB1amEoY2BvYShgdHB0Z2NkLAotLS0KVmptZHUhdmxtMGJtantlbHJwYX9vImtuMG1rfmliZSJiZHVyaiRnYiF1ZXx1cyJmbXxudGFsMG5kJHx4ZCJjZ3RyImlpaSFhaG1xcwp1amEofXRmYGR1ZSJsbXFlLiR8eGQiZXhgbWtnaWRobWoof2cicGB1IWpren4hbWIocSFhdm1xdXd2bTBuZCR9ZGxtd3wwcXd2YWR4CmJjaihxbW5hfnlgdmEofWBsfSh/dWphejBgZGJkeWJ2bWd+ciJlezB2Z2hkPgotLS0KSGQkfHhudyR/f3RuYHtkIXZ2aWZkbiR5ZWhhb2RpIWBhfGdkZ2oodGhxcGl+dSJoZ3Ngdm1nfnIuJHx4bnckZWVydiRqdQpgYGhtMHVtJGt/b3Z2Z3whdmxxMHVnaG1gbnBwezwhY2psMGhsJGkwYm1qbmVyZ2AoY3VjcG0wbGt3enVgZiR8eGQid2tibm5oCnZqbWt4IXd3fXFtbn0oZGRuYXh/c3Z3KGRpe3dtfGciaGdzYG5ocT4hIkBpYmhsYyhxZXRhZmR0cGF6YyFqZX51IWNoe38KcWd2bn9zb2FsMHVqYShjYG9hKHZkY3AoY2Bsdyh+ZGdgKHZucCR7c3NtaGRjIW12KGBudm1nfnIiZnEwcnZheGBobGMoeW92awpgInRpYnVrZ318YHAkaX1jd3drcWVnKgotLS0KQG5pZ2N1ImVkfCFjYH51b3ZxenVzcSR/eG4iZ2d9ZCJwYHlyInNpaSFqa3h1IXZrKGBgcXcoZGlnJGxiZGNgKF1kZnF7cS8iJFx/CmVtJHx4aHEoKGRpZyRqdXJ2JGl0d2tnbTBocSR8fyFpYW1gIXZsYX5kImFxdXIiZmR5b2ZiZ3xlZ2AocW9mJHx/IWFlfWNkInBgdQpicGFpZHRwYShkbiJhe2B4Im18YyFtc2Ywc2diZHVidm1nfiFraihxIW9temJucCoKLS0tCkBsYChnaWd2bTBodiRhYyF1dmFkdWdqKDJgZiRpdXNjdmFlbCAoKHRobm1vdW92JHt1YHBnYHlvZSR/eW1uJGd2dWdqKGJkdGFpfAp1amEoZ2B7JHx/IWMkfGJgciR/eGhhbChjZGxgezBubGEoZG4icGB1IU9lb3liIkltfW5wfShGYHdofDwhdWxtYmQicGB1IXBta3hkcQpuZCRLYm5nd31jIWN2bTBydmt6dWU5JGB/dmdybWItImF7c2BybWZ3IWR2Z30hdmxtMHdjcWRkIXVtfHgha3B7MGZtaGwwaHEkZWViagppY3ZsdXMicGBxbyJjbWR1a2pvMGhsKgotLS0KSHYkYWMhdWFkfCFpamdnbyJwYHF1InNhfHgid2B/cWlhbWBkcHcoYmBrd20wdWphYWIhcnZhc2RxJH94ZGxhL3VzInBgdXgKZHF0cTB1amEod2BwbXt4IWN0eHFzZ2gof2cicGB1IWN0eGJuY2dgeW9lJHx/dHBte2QhbXYoZGlnJGt/dGxwbX5gbGdtMG5kJGkKZWt3bnF3bXZtdCFyZXxibmwqKDBVamFxMGdjcmdiIXZsbTBmZ2p8fGQia24wbGNqZnVzImVmdCF2bG0wZ2NtejBuZCRucWJnKgpVamEocm5tdih9YHskbWhxZ2d8MHRsdHp/Z2twaXJtZyR8YmBsd2lzdWtrZmMvCi0tLQpVamEoc21rZ2B1IW1iKGRpZyRjeXVhbG1+IXFtZnshcXNpfG1tc2F+ZiJlZmkhd2puf3N2cWZxdWckenlvZXcoZGljcChzbmxwaXN1Cmh2dyhgZHBqYXNobXF7MHJ3dm5xYmckenVnbmFrZGR2bCh3c2dlfHVzInB6ZXVqJHx4YGwkZXFveyRgf2xraGF1ci4kcXV1CmR0YWYwcm0oKHZkdSRgcXdnJGx1d2doZ2BkZiR8eGQid2N5bW4kfH8ha2BtfnVrYnEwZGxnYHFvdmFsMHNram9jIWB9KGRpZwp1cGVmY2drY31iYHZtZ35yImFudmRhcG10IXd0Z34hdmxtMHdtdmlzaG1xezBlZ3Jhc2Qldyh2c2NpbT4KLS0tClVqYSh9ZGNwKH9nImFmc2ljanx1ZSJnenVgdnF6dXIia25kdWtpbWMhYWtmZmR7YXx4IW9lb3liY2goYHNtdG1idWthewp0bHBnMHVqYShzbmx3fX1kcCooMEAiYnp1cmoka39zcndtMG5kJG58bmNwYX5mImFxdSFma3x4IWRhfHNpImUoeGhlbApxcG1rdSFjaWd+ZiJzYWpgcGB7MGdtdih5dXEkfWRobm18aSFraihzbmxibWJza2pvMFVnaG1gYHZscTwhYH0oZ2lrZ2AKdWphKGNoZWx8fGRxdyh9YHskZH9iY3BtMHJ3dnp/dGxgYX5mImlhfmVxKgotLS0KVWphKHRkdmFrZGhtaih/ZyJmZHVycW1md3IiZWZ0IWFxemNkcSRhYyFraihkaWckbH9sY21mMG5kJHx4ZCJjZ3RyLCQoRGlnfShnaG5oCmxjb20wdWptezBobGJnYmxjcGF/byJlfnFobmVqfGQicGcwbG12fHFtcSR/eG4idm1hdGd3fDBodiRpZCF2bG15cyJ0ZHFiZ3cof2cKdm12e3hocigof3MiYWRjZHVsbWJkImJnYiF2bGdjZCJpZ2J1Y2h7MHZqayh0ZHRrfHUhdmxtfXJnaH51ciJwZzB1amEoY2RwcmFzZApuZCR8eGQiY2d0ciwKLS0tCkB2JHx5bGd3JDB1amEod25mdyh9YHskbnF3bXYoZ25wcGBpIXFxeGBta2dpfnVxJH95dWokZnFsZ2Aocm1jYG1jIXVsZ2NkCnFtc21iciJha3huInBgYm53Y2B/dHYkZHVmZ2psPiEiSG1xc2xhbDB2Y31ucXNndnswYmNqKGJkcnZndHRhYShybWNgbWMhbWIKZG5ybX4hbm1mdWBlYSQwaWNwbXQhbWIoZGlnJGdiYnEoKGdodmxnZXUicGB1IWxhbXQhZGt6MHJ3Z2AwaGxwbWJ3Z2p8eW5sKgotLS0KVWphenUhY3ZtMGxjanEwcnZrenlkcSRndiFjJGV5ZmpwcTBgb3FkdXUuJHx4ZCJrenlma2p7MG5kJH94aGFsKHFzZyR7cWhmCnVtJGp1IWNqa3lkbHAoSWRsYGdiLyIkXHhocSRpfXRuYXwwZW1wYDBpY3JtMGB1YXt/bGckeH92Z3YkMGBsYChkaWckb39lcQplZ3dhYmQibXwwZnBhaWRteyooMExtdnxxbXEkZXF4cXAoZGByJGd+bXskeH9zdm1nfnIia24waHZ3KGRkcHZhcm1nCmBgbWR5dWthez4hIlBgdSFxcGdiaGd3KGRkbmgof2ciaWdidWNoezByZ2FhfmYic2BxdSJwYHVocCRtaWRxJGtxb2xrfApyZ2EocW9mJHt1ZGltZnchcmhpc2RxJGd2IW9lb3liY2goZHNjantgbnBwaWRobWokMHZqbWR1IWplfnlvZSR8eGhxCmBvcWR1dSJtZjB1amFhYiFya3tjZHF3YX9vLCQoX3VqYXpjIXFlcTBgImlnYnVjaCh9dHFwKGdkY3YoZGlnJGl9dG5hfDB1bQpuYHBpeW8icGB1cmckeH92Z3Z7PiEiRn1kIXRhenlteygoY3RhbChgbnVhejBibWltYyFjcCh3c2dlfDBibXd8PCF2awpxcGF7dXN0YShkaWckanFtY2prdS8KLS0tCkh2JGFjIXFlYXQhdmxpZCF2bGdlIW9lcWN1ImNpeW8iYWZkc3skfH8hT2tkf2JqI3swcmNqa2R0Y3ZxPCFrYihkaW1xCmVjdm1jdS4kbmJubyRpMHFuZWt1IXVsbWJkInBgdSFldmdlb2YkfnljcGV8dXVqJGF+IXZsbTBlZ2F4dXJ2JGx1cXZsezBuZApGZ2xtfm9taSYwIVZsZ2UhbGFtdHIiaX1jdSJsaWZkInBgdSFjbWwwbmQkfHhzZ2EofWBlbWtxbSJtfHVscSooMFVqYQpxd3ZtMHJtcWZ0IW1iKHEhcW1kZmRwJGp1bW4ke3hgbmgocW9sa31+YmckfHhkZyooMFVqYShkZHB2YXJtZyR6ZW9ndyQKc2dlbDBncGtlMExtaGdzaSV3KHJubW8kMHJqZWR8IWFlfWNkInBgdSFnZXpkaSJwZzB1cGFlcm1nJGV5ZmpwYXx4LCQoRGlnCm1rY2BkIW1iKHFvImFmc2ljanx1ZSJnaX5lZ2hpcnN3aShjaWNoZDByamt/MHVqYW0wdWphKGdgeyoKLS0tCkhsJHx4ZCJgbXVxZ3d8MHNnZ21jcmd3KH9nInBgdSFGcWZ3ZG1qezBuZCRMf25vKCh3dGN2bHlvZSRpc2Jnd3swdW0kfHhkCm9ncGB1cyJ2bXdobWp7PCF2bG1iZCJ3fHFvZmF8eCFjJGtxcnZobTwhdWxtYmRraih8aGdwYDBgInNpfmUia24wdmt3YHVyLApIZCR8eG53JH9/dG5ge2QhZWVhfiFnanxieC4kanVgcCR/eXVqJHx4ZGckaX4ha2p7ZHN3aW1+dSJrbjBsd3dhcy0iYmdiIXZsbQpxbWp8fGR0bXswbGN9KHJkImdgcXNvYWwwZW1zZjB2a3BgMHVqYShgc210bWIhb2Fkf2V7KigwVmplfDBvbXBtYyFha2Vgc2t3bQpodiRnfm17JHx4ZCJjZ3RyIm9mf3YuJGpldSJlKH10cW1rcW0iaWljdWd2ZXlvZiRlcXgifW1kIXFxa3NkZ2Aocngic2FkZ3doCmhvdHp/d2t3aWRobWomMCFKa391d2d2JDB1amEofGRxdyhgZHB3eHliY2dhf3RxJGliZCJqZ2QhdW18eG53cChiZGFrfWJyZygKcmprfXxlInBgdXgiZm0wcXBheHFzZ2AoZG4iZ2FiYndpaX1jd2hpZGQicGB1IWFle2RtZyR8fyF2bG0wcW13fHVzbCoKLS0tClVqYSh3bmZ3KHFzZyR7cWhmJHx/IWBhKGBtZ2V7dWUic2B1byJrbnZkcG1md3IiZXp1IWVtfnVvInBnMHVqYQpxcG1tY3VxJH94biJlfGRkbGAoZGlnbXowdWdpeHxkcSgocW9mJHx4ZHskZXF4ImN6cW92JH5xc2trfWMhZGV+f3NxJHx/CnVqa3t1IXVsZzBlbSR7fy8iJEpldSJmbWdgcGEpMCFWayhyZCJ9Z2VvZSRpfmUiYnplZmNoKHlyImZtZHVndihkaWNqKGRuCmNnJGd8ZSJlZnQhb217dXNufSYKLS0tClVqYSh+YG9hKH9nIkFkcmRwYXx4IW9lcTBydnZhe2QiYm1xcyJtZmRuInBgdSFqYWlidXEkZ3YhdmxhfmQiYWZ1bGthezwha2IKdWprfTBlbXd8MHZwbXx1IWtwKGVxbWooZGlnJG9ibndqbDBgdiR8eHgiYm11dSwkKFlnInBgf3QiaWl5b3ZlYX5kcXAoZGlnCnR2aWdjdSJnaXxsLiR8eHgid2l2ZHZ9KGdobmgocmQiZWF0ZGYkb2JkY3BkaS0iZn1kIWBhf3FzZyRkdXJ2JHx4eCJnZGVscX0KZ2dhfDByYXFudiF2bG0waGx3a2JocnBhf28uJGtxb2FhZHxobGMoeXVxJHh/dWdqa3UvCi0tLQoKICAgIE5ldEhhY2sgdmVyc2lvbiAzLjcuMCBbd29yay1pbi1wcm9ncmVzc10KCk9wdGlvbnMgY29tcGlsZWQgaW50byB0aGlzIGVkaXRpb246CgogICAgY29sb3IsIGRhdGEgZmlsZSBjb21wcmVzc2lvbiwgZGF0YSBsaWJyYXJpYW4sIGluc3VyYW5jZSBmaWxlcyBmb3IKICAgIHJlY292ZXJpbmcgZnJvbSBjcmFzaGVzLCBsb2cgZmlsZSwgZXh0ZW5kZWQgbG9nIGZpbGUsIGVycm9ycyBhbmQKICAgIHdhcm5pbmdzIGxvZyBmaWxlLCBuZXdzIGZpbGUsIHBhdHRlcm4gbWF0Y2hpbmcgdmlhIDpQQVRNQVRDSDosIHBzZXVkbwogICAgcmFuZG9tIG51bWJlcnMgZ2VuZXJhdGVkIGJ5IElTQUFDNjQsIHN0cm9uZyBQUk5HIHNlZWQgYXZhaWxhYmxlIGZyb20KICAgIC9kZXYvdXJhbmRvbSwgc2NyZWVuIGNsaXBwaW5nLCBzaGVsbCBjb21tYW5kLCB0cmFkaXRpb25hbCBzdGF0dXMKICAgIGRpc3BsYXksIHN0YXR1cyB2aWEgd2luZG93cG9ydCB3aXRoIGhpZ2hsaWdodGluZywgc3VzcGVuZCBjb21tYW5kLAogICAgc3lzdGVtIGNvbmZpZ3VyYXRpb24gYXQgcnVuLXRpbWUsIHNhdmUgYW5kIGJvbmVzIGZpbGVzIGFjY2VwdGVkIGZyb20KICAgIHZlcnNpb24gMy43LjAgb25seSwgYW5kIGJhc2ljIE5ldEhhY2sgZmVhdHVyZXMuCgpTdXBwb3J0ZWQgd2luZG93aW5nIHN5c3RlbToKCiAgICAic2hpbSIgKE5ldEhhY2sgTGlicmFyeSBXaW5kb3dpbmcgU2hpbSkuCgpOZXRIYWNrIDMuNy4qIHVzZXMgdGhlICdMdWEnIGludGVycHJldGVyIHRvIHByb2Nlc3Mgc29tZSBkYXRhOgoKICAgIDpMVUFDT1BZUklHSFQ6CgogICAgIlBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZwogICAgIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAKICAgICAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiBpbmNsdWRpbmcKICAgICB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCiAgICAgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIAogICAgIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0bwogICAgIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKICAgICBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZQogICAgIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLiIKCgotLSBUT0RPOgotLSAgLSBvdXRwdXQgPSAidmVyYmFsaXplIgotLSAgLSBleHBvcnQgdGhlIHF1ZXN0IHN0cmluZyByZXBsYWNlbWVudHMgdG8gbHVhLCBpbnN0ZWFkIG9mICVIIGV0YwotLSAgLSBhbGxvdyBjaGVja2luZyBpZiBoZXJvIGlzIGNhcnJ5aW5nIGl0ZW0gKHNlZSBjb21tZW50cyBmb3IgJUNwIEFyYyAwMDA0MikKLS0gIC0gZm9sZCBxdWVzdF9wb3J0YWwsIHF1ZXN0X3BvcnRhbF9hZ2FpbiwgcXVlc3RfcG9ydGFsX2RlbWFuZCBpbnRvIG9uZQotLSAgLSB3cml0ZSB0ZXN0cyB0byBjaGVjayBxdWVzdHRleHQgdmFsaWRpdHk/Ci0tICAtIHF0X3BhZ2VyIGhhY2soPyk6IGlmIChxdF9tc2ctPmRlbGl2ZXJ5ID09ICdwJyAmJiBzdHJjbXAod2luZG93cHJvY3MubmFtZSwgIlgxMSIpKQoKCgoKLS0gdGV4dCA9ICJzb21ldGhpbmciCi0tIFRleHQgaXMgc2hvd24gdG8gdGhlIHVzZXIuCgotLSBzeW5vcHNpcyA9ICJzb21ldGhpbmciCi0tIFN5bm9wc2lzIGlzIGluc2VydGVkIGludG8gdGhlIG1lc3NhZ2UgaGlzdG9yeS4KLS0KLS0gb3V0cHV0ID0gInBsaW5lIiB8ICJtZW51IiB8ICJ0ZXh0IgotLSBUaGUgb3V0cHV0IGNhbiBiZSBtYW51YWxseSBzZXQgYnkgdXNpbmcgb3V0cHV0ID0gIm1lbnUiCi0tIFZhbGlkIHZhbHVlcyBmb3Igb3V0cHV0IGFyZSAicGxpbmUiLCAidGV4dCIsIGFuZCAibWVudSwgZGVmYXVsdGluZyB0bwotLSBwbGluZSwgdW5sZXNzIHRoZSB0ZXh0IGNvbnRhaW5zIG5ld2xpbmVzLCBvciBpcyB0b28gbG9uZyB0byBmaXQgYSBtZXNzYWdlIGJ1ZmZlciwKLS0gdGhlbiB3aWxsIGJlIHNob3duIGFzIGEgdGV4dCB3aW5kb3cgaW5zdGVhZC4KCgoKcXVlc3R0ZXh0ID0gewogICAtLSBJZiBhIHJvbGUgZG9lc24ndCBoYXZlIGEgc3BlY2lmaWMgbWVzc2FnZSwgdHJ5IGEgZmFsbGJhY2sKICAgbXNnX2ZhbGxiYWNrcyA9IHsKICAgICAgZ29hbF9hbHQgPSAiZ29hbF9uZXh0IgogICB9LAogICBjb21tb24gPSB7CiAgICAgIFRFU1RfUEFUVEVSTiA9IHsKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1slcDoJcmV0dXJuKHBsbmFtZSk7CiAlYzoJcmV0dXJuKHBsX2NoYXJhY3Rlcik7CiAlcjoJcmV0dXJuKChjaGFyICopcmFua19vZih1LnVsZXZlbCkpOwogJVI6CXJldHVybigoY2hhciAqKXJhbmtfb2YoTUlOX1FVRVNUX0xFVkVMKSk7CiAlczoJcmV0dXJuKChmbGFncy5mZW1hbGUpID8gInNpc3RlciIgOiAiYnJvdGhlciIgKTsKICVTOglyZXR1cm4oKGZsYWdzLmZlbWFsZSkgPyAiZGF1Z2h0ZXIiIDogInNvbiIgKTsKICVsOglyZXR1cm4oKGNoYXIgKilsZHJuYW1lKCkpOwogJWk6CXJldHVybihpbnRlcm1lZCgpKTsKICVvOglyZXR1cm4oYXJ0aW5hbWUoKSk7CiAlTzoJcmV0dXJuKHNob3J0ZW5lZChhcnRpbmFtZSgpKSk7CiAlbjoJcmV0dXJuKChjaGFyICopbmVtaW5hbWUoKSk7CiAlZzoJcmV0dXJuKChjaGFyICopZ3VhcmRuYW1lKCkpOwogJUc6CXJldHVybigoY2hhciAqKWFsaWduX2d0aXRsZSh1LnVhbGlnbmJhc2VbMV0pKTsKICVIOglyZXR1cm4oKGNoYXIgKilob21lYmFzZSgpKTsKICVhOglyZXR1cm4oQWxpZ25uYW0odS51YWxpZ25iYXNlWzFdKSk7CiAlQToJcmV0dXJuKEFsaWdubmFtKHUudWFsaWduLnR5cGUpKTsKICVkOglyZXR1cm4oKGNoYXIgKilhbGlnbl9nbmFtZSh1LnVhbGlnbmJhc2VbMV0pKTsKICVEOglyZXR1cm4oKGNoYXIgKilhbGlnbl9nbmFtZShBX0xBV0ZVTCkpOwogJUM6CXJldHVybigiY2hhb3RpYyIpOwogJU46CXJldHVybigibmV1dHJhbCIpOwogJUw6CXJldHVybigibGF3ZnVsIik7CiAleDoJcmV0dXJuKChCbGluZCkgPyAic2Vuc2UiIDogInNlZSIpOwogJVo6CXJldHVybigiVGhlIER1bmdlb25zIG9mIERvb20iKTsKICUlOglyZXR1cm4ocGVyY2VudF9zaWduKTsKIGEgc3VmZml4OglyZXR1cm4gYW4ocm9vdCk7CiBBIHN1ZmZpeDoJcmV0dXJuIEFuKHJvb3QpOwogQyBzdWZmaXg6CXJldHVybiBjYXBpdGFsaXplZChyb290KTsKIGggc3VmZml4OglyZXR1cm4gcHJvbm91bihoZV9vcl9zaGUsIG1vbl9vZihyb290KSk7IC8qIGZvciAlbCwlbiwlZCwlbyAqLwogSCBzdWZmaXg6CXJldHVybiBjYXBpdGFsaXplZChwcm9ub3VuKGhlX29yX3NoZSwgbW9uX29mKHJvb3QpKSk7CiBpIHN1ZmZpeDoJcmV0dXJuIHByb25vdW4oaGltX29yX2hlciwgbW9uX29mKHJvb3QpKTsKIEkgc3VmZml4OglyZXR1cm4gY2FwaXRhbGl6ZWQocHJvbm91bihoaW1fb3JfaGVyLCBtb25fb2Yocm9vdCkpKTsKIGogc3VmZml4OglyZXR1cm4gcHJvbm91bihoaXNfb3JfaGVyLCBtb25fb2Yocm9vdCkpOwogSiBzdWZmaXg6CXJldHVybiBjYXBpdGFsaXplZChwcm9ub3VuKGhpc19vcl9oZXIsIG1vbl9vZihyb290KSkpOwogcCBzdWZmaXg6CXJldHVybiBtYWtlcGx1cmFsKHJvb3QpOwogUCBzdWZmaXg6CXJldHVybiBtYWtlcGx1cmFsKGNhcGl0YWxpemVkKHJvb3QpKTsKIHMgc3VmZml4OglyZXR1cm4gc19zdWZmaXgocm9vdCk7CiBTIHN1ZmZpeDoJcmV0dXJuIHNfc3VmZml4KGNhcGl0YWxpemVkKHJvb3QpKTsKIHQgc3VmZml4OglyZXR1cm4gc3RyaXBfdGhlX3ByZWZpeChyb290KTtdXSwKICAgICAgfSwKICAgICAgYW5nZWxfY3VzcyA9IHsKICAgICAgICAgIlwiUmVwZW50LCBhbmQgdGhvdSBzaGFsdCBiZSBzYXZlZCFcIiIsCiAgICAgICAgICJcIlRob3Ugc2hhbHQgcGF5IGZvciB0aGluZSBpbnNvbGVuY2UhXCIiLAogICAgICAgICAiXCJWZXJ5IHNvb24sIG15IGNoaWxkLCB0aG91IHNoYWx0IG1lZXQgdGh5IG1ha2VyLlwiIiwKICAgICAgICAgIlwiVGhlIGdyZWF0ICVEIGhhcyBzZW50IG1lIHRvIG1ha2UgeW91IHBheSBmb3IgeW91ciBzaW5zIVwiIiwKICAgICAgICAgIlwiVGhlIHdyYXRoIG9mICVEIGlzIG5vdyB1cG9uIHlvdSFcIiIsCiAgICAgICAgICJcIlRoeSBsaWZlIGJlbG9uZ3MgdG8gJUQgbm93IVwiIiwKICAgICAgICAgIlwiRG9zdCB0aG91IHdpc2ggdG8gcmVjZWl2ZSB0aHkgZmluYWwgYmxlc3Npbmc/XCIiLAogICAgICAgICAiXCJUaG91IGFydCBidXQgYSBnb2RsZXNzIHZvaWQuXCIiLAogICAgICAgICAiXCJUaG91IGFydCBub3Qgd29ydGh5IHRvIHNlZWsgdGhlIEFtdWxldC5cIiIsCiAgICAgICAgICJcIk5vIG9uZSBleHBlY3RzIHRoZSBTcGFuaXNoIElucXVpc2l0aW9uIVwiIiwKICAgICAgfSwKICAgICAgYmFuaXNoZWQgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgYXJlIGJhbmlzaGVkIGZyb20gJUggZm9yIGJldHJheWluZyB5b3VyIGFsbGVnaWFuY2UgdG8gJWQuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIllvdSBoYXZlIGJldHJheWVkIGFsbCB0aG9zZSB3aG8gaG9sZCBhbGxlZ2lhbmNlIHRvICVkLCBhcyB5b3Ugb25jZSBkaWQuCk15IGFsbGVnaWFuY2UgdG8gJWQgaG9sZHMgZmFzdCBhbmQgSSBjYW5ub3QgY29uZG9uZSBvciBhY2NlcHQgd2hhdCB5b3UKaGF2ZSBkb25lLgoKTGVhdmUgdGhpcyBwbGFjZS4gIFlvdSBzaGFsbCBuZXZlciBzZXQgZm9vdCBhdCAlSCBhZ2Fpbi4KVGhhdCB3aGljaCB5b3Ugc2VlayBpcyBub3cgbG9zdCBmb3JldmVyLCBmb3Igd2l0aG91dCB0aGUgQmVsbCBvZiBPcGVuaW5nLAp5b3Ugd2lsbCBuZXZlciBiZSBhYmxlIHRvIGVudGVyIHRoZSBwbGFjZSB3aGVyZSBoZSB3aG8gaGFzIHRoZSBBbXVsZXQKcmVzaWRlcy4KCkdvIG5vdyEgIFlvdSBhcmUgYmFuaXNoZWQgZnJvbSB0aGlzIHBsYWNlLl1dLAogICAgICB9LAogICAgICBkZW1vbl9jdXNzID0gewogICAgICAgICAiXCJJIGZpcnN0IG1pc3Rvb2sgdGhlZSBmb3IgYSBzdGF0dWUsIHdoZW4gSSByZWdhcmRlZCB0aHkgaGVhZCBvZiBzdG9uZS5cIiIsCiAgICAgICAgICJcIkNvbWUgaGVyZSBvZnRlbj9cIiIsCiAgICAgICAgICJcIkRvdGggcGFpbiBleGNpdGUgdGhlZT8gIFdvdWxkc3QgdGhvdSBwcmVmZXIgdGhlIHdoaXA/XCIiLAogICAgICAgICAiXCJUaGlua2VzdCB0aG91IGl0IHNoYWxsIHRpY2tsZSBhcyBJIHJpcCBvdXQgdGh5IGx1bmdzP1wiIiwKICAgICAgICAgIlwiRWF0IHNsaW1lIGFuZCBkaWUhXCIiLAogICAgICAgICAiXCJHbyBhaGVhZCwgZmV0Y2ggdGh5IG1hbWEhICBJIHNoYWxsIHdhaXQuXCIiLAogICAgICAgICAiXCJHbyBwbGF5IGxlYXBmcm9nIHdpdGggYSBoZXJkIG9mIHVuaWNvcm5zIVwiIiwKICAgICAgICAgIlwiSGFzdCB0aG91IGJlZW4gZHJpbmtpbmcsIG9yIGFydCB0aG91IGFsd2F5cyBzbyBjbHVtc3k/XCIiLAogICAgICAgICAiXCJUaGlzIHRpbWUgSSBzaGFsbCBsZXQgdGhlZSBvZmYgd2l0aCBhIHNwYW5raW5nLCBidXQgbGV0IGl0IG5vdCBoYXBwZW4gYWdhaW4uXCIiLAogICAgICAgICAiXCJJJ3ZlIG1ldCBzbWFydGVyIChhbmQgcHJldHRpZXIpIGFjaWQgYmxvYnMuXCIiLAogICAgICAgICAiXCJMb29rISAgVGh5IGJvb3RsYWNlIGlzIHVuZG9uZSFcIiIsCiAgICAgICAgICJcIk1lcmN5ISAgRG9zdCB0aG91IHdpc2ggbWUgdG8gZGllIG9mIGxhdWdodGVyP1wiIiwKICAgICAgICAgIlwiUnVuIGF3YXkhICBMaXZlIHRvIGZsZWUgYW5vdGhlciBkYXkhXCIiLAogICAgICAgICAiXCJUaG91IGhhZHN0IGJlc3QgZmlnaHQgYmV0dGVyIHRoYW4gdGhvdSBjYW5zdCBkcmVzcyFcIiIsCiAgICAgICAgICJcIlR3aXh0IHRoeSBjb3VzaW4gYW5kIHRoZWUsIE1lZHVzYSBpcyB0aGUgcHJldHRpZXIuXCIiLAogICAgICAgICAiXCJNZXRoaW5rcyB0aG91IHdlcnQgdW5uYXR1cmFsbHkgc3RpcnJlZCBieSB5b24gY29ycHNlIGJhY2sgdGhlcmUsIGVoLCB2YXJsZXQ/XCIiLAogICAgICAgICAiXCJVcCB0aHkgbm9zZSB3aXRoIGEgcnViYmVyIGhvc2UhXCIiLAogICAgICAgICAiXCJWZXJpbHksIHRoeSBjb3Jwc2UgY291bGQgbm90IHNtZWxsIHdvcnNlIVwiIiwKICAgICAgICAgIlwiV2FpdCEgIEkgc2hhbGwgcG9seW1vcnBoIGludG8gYSBncmlkIGJ1ZyB0byBnaXZlIHRoZWUgYSBmaWdodGluZyBjaGFuY2UhXCIiLAogICAgICAgICAiXCJXaHkgc2VhcmNoIGZvciB0aGUgQW11bGV0PyAgVGhvdSB3b3VsZHN0IGJ1dCBsb3NlIGl0LCBjcmV0aW4uXCIiLAogICAgICB9LAogICAgICBsZWdhY3kgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIlslZEMgaGFzIGNob3NlbiB5b3UgdG8gcmVjb3ZlciB0aGUgQW11bGV0IG9mIFllbmRvciBmb3IgJWRJLl0iLAogICAgICAgICBvdXRwdXQgPSAibWVudSIsCiAgICAgICAgIHRleHQgPSBbW0l0IGlzIHdyaXR0ZW4gaW4gdGhlIEJvb2sgb2YgJWQ6CgogICAgQWZ0ZXIgdGhlIENyZWF0aW9uLCB0aGUgY3J1ZWwgZ29kIE1vbG9jaCByZWJlbGxlZAogICAgYWdhaW5zdCB0aGUgYXV0aG9yaXR5IG9mIE1hcmR1ayB0aGUgQ3JlYXRvci4KICAgIE1vbG9jaCBzdG9sZSBmcm9tIE1hcmR1ayB0aGUgbW9zdCBwb3dlcmZ1bCBvZiBhbGwKICAgIHRoZSBhcnRpZmFjdHMgb2YgdGhlIGdvZHMsIHRoZSBBbXVsZXQgb2YgWWVuZG9yLAogICAgYW5kIGhlIGhpZCBpdCBpbiB0aGUgZGFyayBjYXZpdGllcyBvZiBHZWhlbm5vbSwgdGhlCiAgICBVbmRlciBXb3JsZCwgd2hlcmUgaGUgbm93IGx1cmtzLCBhbmQgYmlkZXMgaGlzIHRpbWUuCgpZb3VyICVHICVkIHNlZWtzIHRvIHBvc3Nlc3MgdGhlIEFtdWxldCwgYW5kIHdpdGggaXQKdG8gZ2FpbiBkZXNlcnZlZCBhc2NlbmRhbmNlIG92ZXIgdGhlIG90aGVyIGdvZHMuCgpZb3UsIGEgbmV3bHkgdHJhaW5lZCAlciwgaGF2ZSBiZWVuIGhlcmFsZGVkCmZyb20gYmlydGggYXMgdGhlIGluc3RydW1lbnQgb2YgJWQuICBZb3UgYXJlIGRlc3RpbmVkCnRvIHJlY292ZXIgdGhlIEFtdWxldCBmb3IgeW91ciBkZWl0eSwgb3IgZGllIGluIHRoZQphdHRlbXB0LiAgWW91ciBob3VyIG9mIGRlc3RpbnkgaGFzIGNvbWUuICBGb3IgdGhlIHNha2UKb2YgdXMgYWxsOiAgR28gYnJhdmVseSB3aXRoICVkIV1dLAogICAgICB9LAogICAgICBxdWVzdF9jb21wbGV0ZV9ub19iZWxsID0gewogICAgICAgICB0ZXh0ID0gW1siVGhlIHNpbHZlciBiZWxsIHdoaWNoIHdhcyBob2FyZGVkIGJ5ICVuIHdpbGwgYmUKZXNzZW50aWFsIGluIGxvY2F0aW5nIHRoZSBBbXVsZXQgb2YgWWVuZG9yLiJdXSwKICAgICAgfSwKICAgICAgcXVlc3RfcG9ydGFsID0gewogICAgICAgICBvdXRwdXQgPSAicGxpbmUiLAogICAgICAgICB0ZXh0ID0gW1tZb3UgcmVjZWl2ZSBhIGZhaW50IHRlbGVwYXRoaWMgbWVzc2FnZSBmcm9tICVsOgpZb3VyIGhlbHAgaXMgdXJnZW50bHkgbmVlZGVkIGF0ICVIIQpMb29rIGZvciBhIC4uLmljIHRyYW5zcG9ydGVyLgpZb3UgY291bGRuJ3QgcXVpdGUgbWFrZSBvdXQgdGhhdCBsYXN0IG1lc3NhZ2UuXV0sCiAgICAgIH0sCiAgICAgIHF1ZXN0X3BvcnRhbF9hZ2FpbiA9IHsKICAgICAgICAgdGV4dCA9ICJZb3UgYWdhaW4gc2Vuc2UgJWwgcGxlYWRpbmcgZm9yIGhlbHAuIiwKICAgICAgfSwKICAgICAgcXVlc3RfcG9ydGFsX2RlbWFuZCA9IHsKICAgICAgICAgdGV4dCA9ICJZb3UgYWdhaW4gc2Vuc2UgJWwgZGVtYW5kaW5nIHlvdXIgYXR0ZW5kYW5jZS4iLAogICAgICB9LAogICB9LAogICBBcmMgPSB7CiAgICAgIGFzc2lnbnF1ZXN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbJW5DIGhhcyBzdG9sZW4gJW8uICBMb2NhdGUgJWksIGRlZmVhdCAlbmksIGFuZCByZXR1cm4gJU8uXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIkdyYXZlIHRpbWVzIGhhdmUgYmVmYWxsZW4gdGhlIGNvbGxlZ2UsIGZvciAlbmEgaGFzCnN0b2xlbiAlby4gIFdpdGhvdXQgaXQsIHRoZSBib2FyZCBvZiBkaXJlY3RvcnMgb2YKdGhlIHVuaXZlcnNpdHkgd2lsbCBzb29uIGhhdmUgbm8gY2hvaWNlIGJ1dCB0byByZXZva2Ugb3VyIHJlc2VhcmNoIGdyYW50cy4KCiJZb3UgbXVzdCBsb2NhdGUgdGhlIGVudHJhbmNlIHRvICVpLiAgV2l0aGluIGl0LAp5b3Ugd2lsbCBmaW5kICVuLgoKIllvdSBtdXN0IHRoZW4gZGVmZWF0ICVuIGFuZCByZXR1cm4gJW8KdG8gbWUuCgoiT25seSBpbiB0aGlzIHdheSB3aWxsIHdlIGJlIGFibGUgdG8gcHJldmVudCB0aGUgYnVkZ2V0IGN1dHMgdGhhdCBjb3VsZApjbG9zZSB0aGlzIGNvbGxlZ2UuCgoiTWF5IHRoZSB3aXNkb20gb2YgJWQgYmUgeW91ciBndWlkZS4iXV0sCiAgICAgIH0sCiAgICAgIGJhZGFsaWduID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbXCIlcEMsIHlvdSBoYXZlIHN0cmF5ZWQgZnJvbSB0aGUgJWEgcGF0aC4gIFB1cmlmeSB5b3Vyc2VsZiFcIl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyIlcEMhICBJJ3ZlIGhlYXJkIHRoYXQgeW91J3ZlIGJlZW4gdXNpbmcgc2xvcHB5IHRlY2huaXF1ZXMuICBZb3VyCnJlc3VsdHMgbGF0ZWx5IGNhbiBoYXJkbHkgYmUgY2FsbGVkIHN1aXRhYmxlIGZvciAlcmEhCgoiSG93IGNvdWxkIHlvdSBoYXZlIHN0cmF5ZWQgZnJvbSB0aGUgJWEgcGF0aD8gIEdvIGZyb20gaGVyZSwgYW5kIGNvbWUKYmFjayBvbmx5IHdoZW4geW91IGhhdmUgcHVyaWZpZWQgeW91cnNlbGYuIl1dLAogICAgICB9LAogICAgICBiYWRsZXZlbCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiWyVwQywgYSBtZXJlICVyIGlzIHRvbyBpbmV4cGVyaWVuY2VkLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyIlcCwgeW91IGFyZSB5ZXQgdG9vIGluZXhwZXJpZW5jZWQgdG8gdW5kZXJ0YWtlIHN1Y2ggYSBkZW1hbmRpbmcKcXVlc3QuICBBIG1lcmUgJXIgY291bGQgbm90IHBvc3NpYmx5IGZhY2UgdGhlIHJpZ29ycyBkZW1hbmRlZCBhbmQKc3Vydml2ZS4gIEdvIGZvcnRoLCBhbmQgY29tZSBoZXJlIGFnYWluIHdoZW4geW91ciBhZHZlbnR1cmVzIGhhdmUgZnVydGhlcgp0YXVnaHQgeW91LiJdXSwKICAgICAgfSwKICAgICAgZGlzY291cmFnZSA9IHsKICAgICAgICAgIlwiVHJ5IHlvdXIgYmVzdCwgJXAuICBZb3UgY2Fubm90IGRlZmVhdCBtZS5cIiIsCiAgICAgICAgICJcIkkgc2hhbGwgcmVuZCB0aGUgZmxlc2ggZnJvbSB5b3VyIGJvZHkgd2hpbHN0IHlvdSBzdGlsbCBicmVhdGhlIVwiIiwKICAgICAgICAgIlwiRmlyc3QgeW91LCAlcCwgdGhlbiBJIHNoYWxsIGRlc3Ryb3kgeW91ciBtZW50b3IsICVsLlwiIiwKICAgICAgICAgIlwiVGlyaW5nIHlldCwgJXA/ICBJIGRyYXcgbXkgcG93ZXIgZnJvbSBteSBtYXN0ZXIgYW5kIGNhbm5vdCBmYWx0ZXIhXCIiLAogICAgICAgICAiXCJJIHNoYWxsIHJlbmQgdGh5IHNvdWwgZnJvbSB0aHkgYm9keSBhbmQgY29uc3VtZSBpdCFcIiIsCiAgICAgICAgICJcIllvdSBhcmUgZmFyIHRvbyAlYSAtLSBpdCB3ZWFrZW5zIHlvdS4gIFlvdSBzaGFsbCBkaWUgaW4gdGhpcyBwbGFjZS5cIiIsCiAgICAgICAgICJcIiVkIGhhcyBmb3JzYWtlbiB5b3UhICBZb3UgYXJlIGxvc3Qgbm93IVwiIiwKICAgICAgICAgIlwiQSBtZXJlICVyIGNhbm5vdCBob3BlIHRvIGRlZmVhdCBtZSFcIiIsCiAgICAgICAgICJcIklmIHlvdSBhcmUgdGhlIGJlc3QgJWwgY2FuIHNlbmQsIEkgaGF2ZSBub3RoaW5nIHRvIGZlYXIuXCIiLAogICAgICAgICAiXCJEaWUgJWMhICBJIHNoYWxsIGV4aGliaXQgeW91ciBjYXJjYXNzIGFzIGEgdHJvcGh5LlwiIiwKICAgICAgfSwKICAgICAgZW5jb3VyYWdlID0gewogICAgICAgICAiXCJCZXdhcmUsIGZvciAlbiBpcyBwb3dlcmZ1bCBhbmQgY3VubmluZy5cIiIsCiAgICAgICAgICJcIlRvIGxvY2F0ZSB0aGUgZW50cmFuY2UgdG8gJWksIHlvdSBtdXN0IHBhc3MgbWFueSB0cmFwcy5cIiIsCiAgICAgICAgICJcIkEgJW50IG1heSBiZSB2dWxuZXJhYmxlIHRvIGF0dGFja3MgYnkgbWFnaWNhbCBjb2xkLlwiIiwKICAgICAgICAgIlwiQ2FsbCB1cG9uICVkIHdoZW4geW91IGVuY291bnRlciAlbi5cIiIsCiAgICAgICAgICJcIllvdSBtdXN0IGRlc3Ryb3kgJW4uICBJdCB3aWxsIHB1cnN1ZSB5b3Ugb3RoZXJ3aXNlLlwiIiwKICAgICAgICAgIlwiJW9DIGlzIGEgbWlnaHR5IHRhbGlzbWFuLiAgV2l0aCBpdCB5b3UgY2FuIGRlc3Ryb3kgJW4uXCIiLAogICAgICAgICAiXCJHbyBmb3J0aCB3aXRoIHRoZSBibGVzc2luZ3Mgb2YgJWQuXCIiLAogICAgICAgICAiXCJJIHdpbGwgaGF2ZSBteSAlZ1Agd2F0Y2ggZm9yIHlvdXIgcmV0dXJuLlwiIiwKICAgICAgICAgIlwiUmVtZW1iZXIgbm90IHRvIHN0cmF5IGZyb20gdGhlIHRydWUgJWEgcGF0aC5cIiIsCiAgICAgICAgICJcIllvdSBtYXkgYmUgYWJsZSB0byBzZW5zZSAlbyB3aGVuIHlvdSBhcmUgbmVhci5cIiIsCiAgICAgIH0sCiAgICAgIGZpcnN0dGltZSA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSBhcnJpdmUgYXQgJUgsIGJ1dCBhbGwgaXMgbm90IHdlbGwuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbWW91IGFyZSBzdWRkZW5seSBpbiBmYW1pbGlhciBzdXJyb3VuZGluZ3MuICBUaGUgYnVpbGRpbmdzIGluIHRoZSBkaXN0YW5jZQpzZWVtIHRvIGJlIHRob3NlIG9mIHlvdXIgb2xkIGFsbWEgbWF0ZXIsIGJ1dCBzb21ldGhpbmcgaXMgd3JvbmcuICBJdCBmZWVscwphcyBpZiB0aGVyZSBoYXMgYmVlbiBhIHJpb3QgcmVjZW50bHksIG9yICVIIGhhcwpiZWVuIHVuZGVyIHNpZWdlLgoKQWxsIG9mIHRoZSB3aW5kb3dzIGFyZSBib2FyZGVkIHVwLCBhbmQgdGhlcmUgYXJlIG9iamVjdHMgc2NhdHRlcmVkIGFyb3VuZAp0aGUgZW50cmFuY2UuCgpTdHJhbmdlIGZvcmJpZGRpbmcgc2hhcGVzIHNlZW0gdG8gYmUgbW92aW5nIGluIHRoZSBkaXN0YW5jZS5dXSwKICAgICAgfSwKICAgICAgZ29hbF9hbHQgPSB7CiAgICAgICAgIHRleHQgPSAiWW91IGhhdmUgcmV0dXJuZWQgdG8gJW5zIGxhaXIuIiwKICAgICAgfSwKICAgICAgZ29hbF9maXJzdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1RoaXMgc3RyYW5nZSBmZWVsaW5nIG11c3QgYmUgdGhlIHByZXNlbmNlIG9mICVvLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbW0Egc3RyYW5nZSBmZWVsaW5nIHdhc2hlcyBvdmVyIHlvdSwgYW5kIHlvdSB0aGluayBiYWNrIHRvIHRoaW5ncyB5b3UKbGVhcm5lZCBkdXJpbmcgdGhlIG1hbnkgbGVjdHVyZXMgb2YgJWwuCgpZb3UgcmVhbGl6ZSB0aGUgZmVlbGluZyBtdXN0IGJlIHRoZSBwcmVzZW5jZSBvZiAlby5dXSwKICAgICAgfSwKICAgICAgZ29hbF9uZXh0ID0gewogICAgICAgICB0ZXh0ID0gIlRoZSBmYW1pbGlhciBwcmVzZW5jZSBvZiAlbyBpcyBpbiB0aGUgZXRoZXIuIiwKICAgICAgfSwKICAgICAgZ290aXQgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltUaGUgcG93ZXIgb2YgJW8gZmxvd3MgdGhyb3VnaCB5b3VyIGJvZHkhICBZb3UgbXVzdCByZXR1cm4gaXQgdG8gJWwuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbVGhlIHBvd2VyIG9mICVvIGZsb3dzIHRocm91Z2ggeW91ciBib2R5ISAgWW91IGZlZWwKYXMgaWYgeW91IGNvdWxkIG5vdyB0YWtlIG9uIHRoZSBXaXphcmQgb2YgWWVuZG9yIGhpbXNlbGYgYW5kIHdpbiwgYnV0CnlvdSBrbm93IHlvdSBtdXN0IHJldHVybiAlbyB0byAlbC5dXSwKICAgICAgfSwKICAgICAgZ3VhcmR0YWxrX2FmdGVyID0gewogICAgICAgICAiXCJEaWQgeW91IHNlZSBMYXNoIExhUnVlIGluICdTb25nIG9mIE9sZCBXeW9taW5nJyB0aGUgb3RoZXIgbmlnaHQ/XCIiLAogICAgICAgICAiXCJIZXkgbWFuLCBnb3QgYW55IHBvdGlvbnMgb2YgaGFsbHVjaW5hdGlvbiBmb3Igc2FsZT9cIiIsCiAgICAgICAgICJcIkkgZ3Vlc3MgeW91IGFyZSBndWFyYW50ZWVkIHRvIG1ha2UgZnVsbCBwcm9mZXNzb3Igbm93LlwiIiwKICAgICAgICAgIlwiU28sIHdoYXQgd2FzIHdvcnNlLCAlbiBvciB5b3VyIGVudHJhbmNlIGV4YW1zP1wiIiwKICAgICAgICAgIlwiJW9DIGlzIGltcHJlc3NpdmUsIGJ1dCBub3RoaW5nIGxpa2UgdGhlIGJvbmVzIEkgZHVnIHVwIVwiIiwKICAgICAgfSwKICAgICAgZ3VhcmR0YWxrX2JlZm9yZSA9IHsKICAgICAgICAgIlwiRGlkIHlvdSBzZWUgTGFzaCBMYVJ1ZSBpbiAnU29uZyBvZiBPbGQgV3lvbWluZycgdGhlIG90aGVyIG5pZ2h0P1wiIiwKICAgICAgICAgIlwiSGV5IG1hbiwgZ290IGFueSBwb3Rpb25zIG9mIGhhbGx1Y2luYXRpb24gZm9yIHNhbGU/XCIiLAogICAgICAgICAiXCJEaWQgeW91IHNlZSB0aGUgYXJ0aWZhY3QgJWwgYnJvdWdodCBiYWNrIGZyb20gdGhlIGxhc3QgZGlnP1wiIiwKICAgICAgICAgIlwiU28gd2hhdCBzcGVjaWVzIGRvICp5b3UqIHRoaW5rIHdlIGV2b2x2ZWQgZnJvbT9cIiIsCiAgICAgICAgICJcIlNvIHlvdSdyZSAlbHMgcHJpemUgcHVwaWwhICBJIGRvbid0IGtub3cgd2hhdCBoZSBzZWVzIGluIHlvdS5cIiIsCiAgICAgIH0sCiAgICAgIGhhc2FtdWxldCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1Rha2UgdGhlIEFtdWxldCB0byB0aGUgQXN0cmFsIFBsYW5lIGFuZCBzYWNyaWZpY2UgaXQgYXQgdGhlIGFsdGFyIG9mICVkLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJDb25ncmF0dWxhdGlvbnMsICVwLiAgSSB3b25kZXJlZCBpZiBhbnlvbmUgY291bGQgcHJldmFpbCBhZ2FpbnN0CnRoZSBXaXphcmQgYW5kIHRoZSBtaW5pb25zIG9mIE1vbG9jaC4gIE5vdywgeW91IG11c3QgZW1iYXJrIG9uIG9uZQpmaW5hbCBhZHZlbnR1cmUuCgoiVGFrZSB0aGUgQW11bGV0LCBhbmQgZmluZCB5b3VyIHdheSBvbnRvIHRoZSBBc3RyYWwgUGxhbmUuClRoZXJlIHlvdSBtdXN0IGZpbmQgdGhlIGFsdGFyIG9mICVkIGFuZCBzYWNyaWZpY2UgdGhlCkFtdWxldCBvbiB0aGF0IGFsdGFyIHRvIGZ1bGZpbGwgeW91ciBkZXN0aW55LgoKIlJlbWVtYmVyLCB5b3VyIHBhdGggbm93IHNob3VsZCBhbHdheXMgYmUgdXB3YXJkcy4iXV0sCiAgICAgIH0sCiAgICAgIGtpbGxlZF9uZW1lc2lzID0gewogICAgICAgICB0ZXh0ID0gIlRoZSBib2R5IG9mICVuIGRpc3NpcGF0ZXMgaW4gYSBjbG91ZCBvZiBub3hpb3VzIGZ1bWVzLiIsCiAgICAgIH0sCiAgICAgIGxlYWRlcl9maXJzdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1wiWW91IGhhdmUgcmV0dXJuZWQsICVwLCB0byBhIGRpZmZpY3VsdCB0YXNrLlwiXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIkZpbmFsbHkgeW91IGhhdmUgcmV0dXJuZWQsICVwLiAgWW91IHdlcmUgYWx3YXlzCm15IG1vc3QgcHJvbWlzaW5nIHN0dWRlbnQuICBBbGxvdyBtZSB0byBzZWUgaWYgeW91IGFyZSByZWFkeSBmb3IgdGhlCm1vc3QgZGlmZmljdWx0IHRhc2sgb2YgeW91ciBjYXJlZXIuIl1dLAogICAgICB9LAogICAgICBsZWFkZXJfbGFzdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1wiJXBDLCB5b3UgaGF2ZSBmYWlsZWQgdXMuICBCZWdvbmUhXCJdIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siJXAsIHlvdSBoYXZlIGZhaWxlZCB1cy4gIEFsbCBvZiBteSBjYXJlZnVsIHRyYWluaW5nIGhhcyBiZWVuIGluCnZhaW4uICBCZWdvbmUhICBZb3VyIHRlbnVyZSBhdCB0aGlzIGNvbGxlZ2UgaGFzIGJlZW4gcmV2b2tlZCEKCiJZb3UgYXJlIGEgZGlzZ3JhY2UgdG8gdGhlIHByb2Zlc3Npb24hIl1dLAogICAgICB9LAogICAgICBsZWFkZXJfbmV4dCA9IHsKICAgICAgICAgdGV4dCA9IFtbIkFnYWluLCAlcCwgeW91IHN0YW5kIGJlZm9yZSBtZS4KTGV0IG1lIHNlZSBpZiB5b3UgaGF2ZSBnYWluZWQgZXhwZXJpZW5jZSBpbiB0aGUgaW50ZXJpbS4iXV0sCiAgICAgIH0sCiAgICAgIGxlYWRlcl9vdGhlciA9IHsKICAgICAgICAgdGV4dCA9IFtbIk9uY2UgbW9yZSwgJXAsIHlvdSBoYXZlIHJldHVybmVkIGZyb20gdGhlIGZpZWxkLgpBcmUgeW91IGZpbmFsbHkgcmVhZHkgZm9yIHRoZSB0YXNrIHRoYXQgbXVzdCBiZSBhY2NvbXBsaXNoZWQ/Il1dLAogICAgICB9LAogICAgICBsb2NhdGVfZmlyc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltUaGlzIGZvcmVib2RpbmcgZWRpZmljZSBtdXN0IGhpZGUgdGhlIGVudHJhbmNlIHRvICVpLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbW0EgcGxhaW4gb3BlbnMgYmVmb3JlIHlvdS4gIEJleW9uZCB0aGUgcGxhaW4gbGllcyBhIGZvcmVib2RpbmcgZWRpZmljZS4KCllvdSBoYXZlIHRoZSBmZWVsaW5nIHRoYXQgeW91IHdpbGwgc29vbiBmaW5kIHRoZSBlbnRyYW5jZSB0bwolaS5dXSwKICAgICAgfSwKICAgICAgbG9jYXRlX25leHQgPSB7CiAgICAgICAgIHRleHQgPSAiT25jZSBhZ2FpbiwgeW91IGFyZSBuZWFyIHRoZSBlbnRyYW5jZSB0byAlaS4iLAogICAgICB9LAogICAgICBuZW1lc2lzX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbXCJDb21lLCAlcCwgSSBzaGFsbCBkZXN0cm95IHlvdSFcIl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJTbywgJXAsIHlvdSB0aGluayB0aGF0IHlvdSBjYW4gc3VjY2VlZCBpbiByZWNvdmVyaW5nCiVvLCB3aGVuIHlvdXIgdGVhY2hlciwgJWwsIGhhcyBhbHJlYWR5IGZhaWxlZC4KCiJDb21lLCB0cnkgeW91ciBiZXN0ISAgSSBzaGFsbCBkZXN0cm95IHlvdSwgYW5kIGduYXcgb24geW91ciBib25lcy4iXV0sCiAgICAgIH0sCiAgICAgIG5lbWVzaXNfbmV4dCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1wiQWdhaW4geW91IHRyeSB0byBiZXN0IG1lLCAlcD8gIFlvdSBzaGFsbCBuZXZlciByZWNvdmVyICVvLlwiXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIkFnYWluIHlvdSB0cnkgdG8gYmVzdCBtZSwgZWggJXA/ICBXZWxsLCB5b3Ugc2hhbGwgZmFpbCBhZ2Fpbi4KCiJZb3Ugc2hhbGwgbmV2ZXIgcmVjb3ZlciAlby4KCiJJIHNoYWxsIGJlYXIgeW91ciBzb3VsIHRvIHRoZSBQbGFuZSBvZiBPcmlnaW5zIGZvciBteSBtYXN0ZXIncyBwbGVhc3VyZS4iXV0sCiAgICAgIH0sCiAgICAgIG5lbWVzaXNfb3RoZXIgPSB7CiAgICAgICAgIHRleHQgPSAiXCJZb3UgcGVyc2lzdCB5ZXQgJXAhICBHb29kLiAgTm93LCB5b3Ugc2hhbGwgZGllIVwiIiwKICAgICAgfSwKICAgICAgbmVtZXNpc193YW50c2l0ID0gewogICAgICAgICB0ZXh0ID0gW1siSSBzaGFsbCBoYXZlICVvIGZyb20geW91LCAlcCwgdGhlbiBmZWFzdAp1cG9uIHlvdXIgZW50cmFpbHMhIl1dLAogICAgICB9LAogICAgICBuZXh0dGltZSA9IHsKICAgICAgICAgdGV4dCA9ICJPbmNlIGFnYWluLCB5b3UgYXJlIGJhY2sgYXQgJUguIiwKICAgICAgfSwKICAgICAgb2ZmZXJlZGl0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbJWxDIGluc3RydWN0cyB5b3UgdG8gZ3VhcmQgJW8gZnJvbSBub3cgb24uXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbJWxDIHRvdWNoZXMgJW8gYnJpZWZseSwgZ2F6ZXMgaW50byBpdCwKdGhlbiBzbWlsZXMgYXQgeW91IGFuZCBzYXlzOgoKIldlbGwgZG9uZSwgJXAuICBZb3UgaGF2ZSBkZWZlYXRlZCAlbiBhbmQKcmVjb3ZlcmVkICVvLiAgQnV0IEkgZmVhciB0aGF0IGl0IHNoYWxsIG5ldmVyIGJlIHNhZmUKaGVyZS4KClBsZWFzZSB0YWtlICVvIHdpdGggeW91LiAgWW91LCAlcCwgY2FuCmd1YXJkIGl0IG5vdyBmYXIgYmV0dGVyIHRoYW4gSS4KCk1heSB0aGUgYmxlc3NpbmdzIG9mICVkIGZvbGxvdyB5b3UgYW5kIGd1YXJkIHlvdS4iXV0sCiAgICAgIH0sCiAgICAgIG9mZmVyZWRpdDIgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltcIlJlc3VtZSB5b3VyIHNlYXJjaCBmb3IgdGhlIEFtdWxldCBiZXlvbmQgdGhlIG1hZ2ljIHBvcnRhbCB0byAlWi5cIl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJDYXJlZnVsLCAlcCEgICVvQyBtaWdodCBicmVhaywgYW5kIHRoYXQgd291bGQgYmUKYSB0cmFnaWMgbG9zcy4gIFlvdSBhcmUgaXRzIGtlZXBlciBub3csIGFuZCB0aGUgdGltZSBoYXMgY29tZSB0bwpyZXN1bWUgeW91ciBzZWFyY2ggZm9yIHRoZSBBbXVsZXQuICAlWiBhd2FpdCB5b3VyCnJldHVybiB0aHJvdWdoIHRoZSBtYWdpYyBwb3J0YWwgdGhhdCBicm91Z2h0IHlvdSBoZXJlLiJdXSwKICAgICAgfSwKICAgICAgb3RoZXJ0aW1lID0gewogICAgICAgICB0ZXh0ID0gW1tZb3UgYXJlIGJhY2sgYXQgJUguCllvdSBoYXZlIGFuIG9kZCBmZWVsaW5nIHRoaXMgbWF5IGJlIHRoZSBsYXN0IHRpbWUgeW91IGV2ZXIgY29tZSBoZXJlLl1dLAogICAgICB9LAogICAgICBwb3N0aGFua3MgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltcIkhhdmUgeW91IHByb2dyZXNzZWQgd2l0aCB5b3VyIHF1ZXN0IHRvIHJlZ2FpbiB0aGUgQW11bGV0IG9mIFllbmRvciBmb3IgJWQ/XCJdIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siV2VsY29tZSBiYWNrLCAlcC4gIEhhdmUgeW91IHByb2dyZXNzZWQgd2l0aCB5b3VyIHF1ZXN0IHRvCnJlZ2FpbiB0aGUgQW11bGV0IG9mIFllbmRvciBmb3IgJWQ/Il1dLAogICAgICB9LAogICB9LAogICBCYXIgPSB7CiAgICAgIGFzc2lnbnF1ZXN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbXCJGaW5kICVuLCBkZWZlYXQgJW5pLCBhbmQgcmV0dXJuICVvIHRvIHVzLlwiXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIlRoZSB3b3JsZCBpcyBpbiBncmVhdCBuZWVkIG9mIHlvdXIgYXNzaXN0YW5jZSwgJXAuCgoiQWJvdXQgc2l4IG1vbnRocyBhZ28sIEkgbGVhcm5lZCB0aGF0IGEgbXlzdGVyaW91cyBzb3JjZXJlciwga25vd24KYXMgJW4sIGhhZCBiZWd1biB0byBnYXRoZXIgYSBsYXJnZSBncm91cCBvZiBjdXR0aHJvYXRzIGFuZCBicmlnYW5kcwphYm91dCAlbmkuCgoiQXQgYWJvdXQgdGhlIHNhbWUgdGltZSwgdGhlc2UgcGVvcGxlIHlvdSBvbmNlIHJvZGUgd2l0aCBgbGliZXJhdGVkJyBhCnBvdGVudCBtYWdpY2FsIHRhbGlzbWFuLCAlbywgZnJvbSBhIFR1cmFuaWFuIGNhcmF2YW4uCgoiJW5DIGFuZCAlbmogQmxhY2sgSG9yZGUgc3dlcHQgZG93biB1cG9uICVpIGFuZCBkZWZlYXRlZAp0aGUgcGVvcGxlIHRoZXJlLCBkcml2aW5nIHRoZW0gb3V0IGludG8gdGhlIGRlc2VydC4gIEhlIGhhcyB0YWtlbgolbywgYW5kIHNlZWtzIHRvIGJlbmQgaXQgdG8gJW5qIHdpbGwuICBJIGRldGVjdGVkIHRoZQpzdWJ0bGUgY2hhbmdlcyBpbiB0aGUgY3VycmVudHMgb2YgZmF0ZSwgYW5kIGpvaW5lZCB0aGVzZSBwZW9wbGUuClRoZW4gSSBzZW50IGZvcnRoIGEgc3VtbW9ucyBmb3IgeW91LgoKIklmICVuIGNhbiBiZW5kICVvIHRvICVuaiB3aWxsLCBoZSB3aWxsIGJlY29tZQphbG1vc3QgaW5kZXN0cnVjdGlibGUuICBIZSB3aWxsIHRoZW4gYmUgYWJsZSB0byBlbnNsYXZlIHRoZSBtaW5kcyBvZgptZW4gYWNyb3NzIHRoZSB3b3JsZC4gIFlvdSBhcmUgdGhlIG9ubHkgaG9wZS4gIFRoZSBnb2RzIHNtaWxlIHVwb24geW91LAphbmQgd2l0aCAlZCBiZWhpbmQgeW91LCB5b3UgYWxvbmUgY2FuIGRlZmVhdCAlbi4KCiJZb3UgbXVzdCBnbyB0byAlaS4gIEZyb20gdGhlcmUsIHlvdSBjYW4gdHJhY2sgZG93bgolbiwgZGVmZWF0ICVuaSwgYW5kIHJldHVybiAlbyB0byB1cy4gIE9ubHkKdGhlbiB3aWxsIHRoZSB3b3JsZCBiZSBzYWZlLiJdXSwKICAgICAgfSwKICAgICAgYmFkYWxpZ24gPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltcIllvdSBoYXZlIHdhbmRlcmVkIGZyb20gdGhlIHBhdGggb2YgdGhlICVhLiAgQ29tZSBiYWNrIHdoZW4geW91IGhhdmUgYXRvbmVkLlwiXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIiVwQyEgIFlvdSBoYXZlIHdhbmRlcmVkIGZyb20gdGhlIHBhdGggb2YgdGhlICVhIQpJZiB5b3UgYXR0ZW1wdCB0byBvdmVyY29tZSAlbiBpbiB0aGlzIHN0YXRlLCBoZSB3aWxsIHN1cmVseQplbnNsYXZlIHlvdXIgc291bC4gIFlvdXIgb25seSBob3BlLCBhbmQgb3VycywgbGllcyBpbiB5b3VyIHB1cmlmaWNhdGlvbi4KR28gZm9ydGgsIGFuZCByZXR1cm4gd2hlbiB5b3UgZmVlbCByZWFkeS4iXV0sCiAgICAgIH0sCiAgICAgIGJhZGxldmVsID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbXCJZb3UgYXJlIHRvbyBpbmV4cGVyaWVuY2VkLiAgQ29tZSBiYWNrIHdoZW4geW91IGFyZSAlUmEuXCJdIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siJXAsIEkgZmVhciB0aGF0IHlvdSBhcmUgYXMgeWV0IHRvbyBpbmV4cGVyaWVuY2VkIHRvIGZhY2UKJW4uICBPbmx5ICVSYSB3aXRoIHRoZSBoZWxwIG9mICVkIGNvdWxkIGV2ZXIgaG9wZSB0bwpkZWZlYXQgJW5pLiJdXSwKICAgICAgfSwKICAgICAgZGlzY291cmFnZSA9IHsKICAgICAgICAgIlwiTXkgcGV0cyB3aWxsIGRpbmUgb24geW91ciBjYXJjYXNzIHRvbmlnaHQhXCIiLAogICAgICAgICAiXCJZb3UgYXJlIGEgc29ycnkgZXhjdXNlIGZvciAlcmEuXCIiLAogICAgICAgICAiXCJSdW4gd2hpbGUgeW91IGNhbiwgJWMuICBNeSBuZXh0IHNwZWxsIHdpbGwgYmUgeW91ciBsYXN0LlwiIiwKICAgICAgICAgIlwiSSBzaGFsbCB1c2UgeW91ciB2ZXJ5IHNraW4gdG8gYmluZCBteSBuZXh0IGdyaW1vaXJlLlwiIiwKICAgICAgICAgIlwiJWQgY2Fubm90IHByb3RlY3QgeW91IG5vdy4gIEhlcmUsIHlvdSBkaWUuXCIiLAogICAgICAgICAiXCJZb3VyICVhIG5hdHVyZSBtYWtlcyB5b3Ugd2Vhay4gIFlvdSBjYW5ub3QgZGVmZWF0IG1lLlwiIiwKICAgICAgICAgIlwiQ29tZSwgJWMuICBJIHNoYWxsIGtpbGwgeW91LCB0aGVuIHVubGVhc2ggdGhlIGhvcmRlIG9uIHlvdXIgdHJpYmUuXCIiLAogICAgICAgICAiXCJPbmNlIHlvdSBhcmUgZGVhZCwgbXkgaG9yZGUgc2hhbGwgZmluaXNoIG9mZiAlbCwgYW5kIHlvdXIgdHJpYmUuXCIiLAogICAgICAgICAiXCJGaWdodCwgJWMsIG9yIGFyZSB5b3UgYWZyYWlkIG9mIHRoZSBtaWdodHkgJW4/XCIiLAogICAgICAgICAiXCJZb3UgaGF2ZSBmYWlsZWQsICVjLiAgTm93LCBteSB2aWN0b3J5IGlzIGNvbXBsZXRlLlwiIiwKICAgICAgfSwKICAgICAgZW5jb3VyYWdlID0gewogICAgICAgICAiXCIlbkMgaXMgc3Ryb25nIGluIHRoZSBkYXJrIGFydHMsIGJ1dCBub3QgaW1tdW5lIHRvIGNvbGQgc3RlZWwuXCIiLAogICAgICAgICAiXCJSZW1lbWJlciB0aGF0ICVuIGlzIGEgZ3JlYXQgc29yY2VyZXIuICBIZSBsaXZlZCBpbiB0aGUgdGltZSBvZiBBdGxhbnRpcy5cIiIsCiAgICAgICAgICJcIklmIHlvdSBmYWlsLCAlcCwgSSB3aWxsIG5vdCBiZSBhYmxlIHRvIHByb3RlY3QgdGhlc2UgcGVvcGxlIGxvbmcuXCIiLAogICAgICAgICAiXCJUbyBlbnRlciAlaSwgeW91IG11c3QgYmUgdmVyeSBzdGVhbHRoeS4gIFRoZSBob3JkZSB3aWxsIGJlIG9uIGd1YXJkLlwiIiwKICAgICAgICAgIlwiQ2FsbCB1cG9uICVkIGluIHlvdXIgdGltZSBvZiBuZWVkLlwiIiwKICAgICAgICAgIlwiTWF5ICVkIHByb3RlY3QgeW91LCBhbmQgZ3VpZGUgeW91ciBzdGVwcy5cIiIsCiAgICAgICAgICJcIklmIHlvdSBjYW4gbGF5IGhhbmRzIHVwb24gJW8sIGNhcnJ5IGl0IGZvciBnb29kIGZvcnR1bmUuXCIiLAogICAgICAgICAiXCJJIGNhbm5vdCBzdGFuZCBhZ2FpbnN0ICVucyBzb3JjZXJ5LiAgQnV0ICVkIHdpbGwgaGVscCB5b3UuXCIiLAogICAgICAgICAiXCJEbyBub3QgZmVhciAlbi4gIEkga25vdyB5b3UgY2FuIGRlZmVhdCAlbmkuXCIiLAogICAgICAgICAiXCJZb3UgaGF2ZSBhIGdyZWF0IHJvYWQgdG8gdHJhdmVsLCAlcCwgYnV0IG9ubHkgYWZ0ZXIgeW91IGRlZmVhdCAlbi5cIiIsCiAgICAgIH0sCiAgICAgIGZpcnN0dGltZSA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSByZWFjaCB0aGUgdmljaW5pdHkgb2YgJUgsIGJ1dCBzZW5zZSBldmlsIG1hZ2ljIG5lYXJieS5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tXYXJpbHkgeW91IHNjYW4geW91ciBzdXJyb3VuZGluZ3MsIGFsbCBvZiB5b3VyIHNlbnNlcyBhbGVydCBmb3Igc2lnbnMKb2YgcG9zc2libGUgZGFuZ2VyLiAgT2ZmIGluIHRoZSBkaXN0YW5jZSwgeW91IGNhbiAleCB0aGUgZmFtaWxpYXIgc2hhcGVzCm9mICVILgoKQnV0IHdoeSwgeW91IHRoaW5rLCBzaG91bGQgJWwgYmUgdGhlcmU/CgpTdWRkZW5seSwgdGhlIGhhaXJzIG9uIHlvdXIgbmVjayBzdGFuZCBvbiBlbmQgYXMgeW91IGRldGVjdCB0aGUgYXVyYSBvZgpldmlsIG1hZ2ljIGluIHRoZSBhaXIuCgpXaXRob3V0IHRob3VnaHQsIHlvdSByZWFkeSB5b3VyIHdlYXBvbiwgYW5kIG11dHRlciB1bmRlciB5b3VyIGJyZWF0aDoKCiAgICAiQnkgJWQsIHRoZXJlIHdpbGwgYmUgYmxvb2Qgc3BpbHQgdG9kYXkuIl1dLAogICAgICB9LAogICAgICBnb2FsX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbVGhpcyBpcyBzdXJlbHkgdGhlIGxhaXIgb2YgJW4uXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbVGhlIGhhaXJzIG9uIHRoZSBuYXBlIG9mIHlvdXIgbmVjayBsaWZ0IGFzIHlvdSBzZW5zZSBhbiBlbmVyZ3kgaW4gdGhlCnZlcnkgYWlyIGFyb3VuZCB5b3UuICBZb3UgZmlnaHQgZG93biBhIHByaW1vcmRpYWwgcGFuaWMgdGhhdCBzZWVrcyB0bwptYWtlIHlvdSB0dXJuIGFuZCBydW4uICBUaGlzIGlzIHN1cmVseSB0aGUgbGFpciBvZiAlbi5dXSwKICAgICAgfSwKICAgICAgZ29hbF9uZXh0ID0gewogICAgICAgICB0ZXh0ID0gIllldCBhZ2FpbiB5b3UgZmVlbCB0aGUgYWlyIGFyb3VuZCB5b3UgaGVhdnkgd2l0aCBtYWxldm9sZW50IG1hZ2ljYWwgZW5lcmd5LiIsCiAgICAgIH0sCiAgICAgIGdvdGl0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IGZlZWwgdGhlIHBvd2VyIG9mICVvIGZsb3dpbmcgdGhyb3VnaCB5b3VyIGhhbmRzLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbW0FzIHlvdSBwaWNrIHVwICVvLCB5b3UgZmVlbCB0aGUgcG93ZXIgb2YgaXQKZmxvd2luZyB0aHJvdWdoIHlvdXIgaGFuZHMuICBJdCBzZWVtcyB0byBiZSBpbiB0d28gb3IgbW9yZSBwbGFjZXMKYXQgb25jZSwgZXZlbiB0aG91Z2ggeW91IGFyZSBob2xkaW5nIGl0Ll1dLAogICAgICB9LAogICAgICBndWFyZHRhbGtfYWZ0ZXIgPSB7CiAgICAgICAgICJcIlRoZSBiYXR0bGVzIGhlcmUgaGF2ZSBiZWVuIGdvb2QgLS0gb3VyIGVuZW1pZXMnIGJsb29kIHNvYWtzIHRoZSBzb2lsIVwiIiwKICAgICAgICAgIlwiUmVtZW1iZXIgdGhhdCBnbG9yeSBpcyBjcnVzaGluZyB5b3VyIGVuZW1pZXMgYmVuZWF0aCB5b3VyIGZlZXQhXCIiLAogICAgICAgICAiXCJUaW1lcyB3aWxsIGJlIGdvb2QgYWdhaW4sIG5vdyB0aGF0IHRoZSBob3JkZSBpcyB2YW5xdWlzaGVkLlwiIiwKICAgICAgICAgIlwiWW91IGhhdmUgYnJvdWdodCBvdXIgY2xhbiBtdWNoIGhvbm9yIGluIGRlZmVhdGluZyAlbi5cIiIsCiAgICAgICAgICJcIllvdSB3aWxsIGJlIGEgd29ydGh5IHN1Y2Nlc3NvciB0byAlbC5cIiIsCiAgICAgIH0sCiAgICAgIGd1YXJkdGFsa19iZWZvcmUgPSB7CiAgICAgICAgICJcIlRoZSBiYXR0bGVzIGhlcmUgaGF2ZSBiZWVuIGdvb2QgLS0gb3VyIGVuZW1pZXMnIGJsb29kIHNvYWtzIHRoZSBzb2lsIVwiIiwKICAgICAgICAgIlwiUmVtZW1iZXIgdGhhdCBnbG9yeSBpcyBjcnVzaGluZyB5b3VyIGVuZW1pZXMgYmVuZWF0aCB5b3VyIGZlZXQhXCIiLAogICAgICAgICAiXCJUaGVyZSBoYXMgYmVlbiBsaXR0bGUgdHJlYXN1cmUgdG8gbG9vdCwgc2luY2UgdGhlIGhvcmRlIGFycml2ZWQuXCIiLAogICAgICAgICAiXCJUaGUgaG9yZGUgaXMgbWlnaHR5IGluIG51bWJlcnMsIGJ1dCB0aGV5IGhhdmUgbGl0dGxlIGNvdXJhZ2UuXCIiLAogICAgICAgICAiXCIlbEMgaXMgYSBzdHJhbmdlIG9uZSwgYnV0IGhlIGhhcyBoZWxwZWQgZGVmZW5kIHVzLlwiIiwKICAgICAgfSwKICAgICAgaGFzYW11bGV0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbXCJUYWtlIHRoZSBBbXVsZXQgdG8gdGhlIGFsdGFyIG9mICVkIG9uIHRoZSBBc3RyYWwgUGxhbmUgYW5kIG9mZmVyIGl0LlwiXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIlRoaXMgaXMgd29uZHJvdXMsICVwLiAgSSBmZWFyZWQgdGhhdCB5b3UgY291bGQgbm90IHBvc3NpYmx5CnN1Y2NlZWQgaW4geW91ciBxdWVzdCwgYnV0IGhlcmUgeW91IGFyZSBpbiBwb3NzZXNzaW9uIG9mIHRoZSBBbXVsZXQKb2YgWWVuZG9yIQoKIkkgaGF2ZSBzdHVkaWVkIHRoZSB0ZXh0cyBvZiB0aGUgbWFnaSBjb25zdGFudGx5IHNpbmNlIHlvdSBsZWZ0LiAgSW4KdGhlIEJvb2sgb2YgU2tlbG9zLCBJIGZvdW5kIHRoaXM6CgogICAgJWQgd2lsbCBjYXVzZSBhIGNoaWxkIHRvIGJlIHNlbnQgaW50byB0aGUgd29ybGQuICBUaGlzIGNoaWxkIGlzIHRvCiAgICBiZSBtYWRlIHN0cm9uZyBieSB0cmlhbCBvZiBiYXR0bGUgYW5kIG1hZ2ljLCBmb3IgJWQgaGFzIHdpbGxlZCBpdCBzby4KICAgIEl0IGlzIHNhaWQgdGhhdCB0aGUgY2hpbGQgb2YgJWQgd2lsbCByZWNvdmVyIHRoZSBBbXVsZXQgb2YgWWVuZG9yCiAgICB0aGF0IHdhcyBzdG9sZW4gZnJvbSB0aGUgQ3JlYXRvciBhdCB0aGUgYmVnaW5uaW5nIG9mIHRpbWUuCgoiQXMgeW91IG5vdyBwb3NzZXNzIHRoZSBhbXVsZXQsICVwLCBJIHN1c3BlY3QgdGhhdCB0aGUgQm9vawpzcGVha3Mgb2YgeW91LgoKICAgIFRoZSBjaGlsZCBvZiAlZCB3aWxsIHRha2UgdGhlIEFtdWxldCwgYW5kIHRyYXZlbCB0byB0aGUgQXN0cmFsCiAgICBQbGFuZSwgd2hlcmUgdGhlIEdyZWF0IFRlbXBsZSBvZiAlZCBpcyB0byBiZSBmb3VuZC4gIFRoZSBBbXVsZXQKICAgIHdpbGwgYmUgc2FjcmlmaWNlZCB0byAlZCwgdGhlcmUgb24gJWRKIGFsdGFyLiAgVGhlbiB0aGUgY2hpbGQgd2lsbAogICAgc3RhbmQgYnkgJWQgYXMgY2hhbXBpb24gb2YgYWxsICVjUCBmb3IgZXRlcm5pdHkuCgoiVGhpcyBpcyBhbGwgSSBrbm93LCAlcC4gIEkgaG9wZSBpdCB3aWxsIGhlbHAgeW91LiJdXSwKICAgICAgfSwKICAgICAga2lsbGVkX25lbWVzaXMgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIlslbkMgY3Vyc2VzIHlvdSwgYnV0IHlvdSBmZWVsIHRoZSBvdmVycG93ZXJpbmcgYXVyYSBvZiBtYWdpYyBmYWRpbmcuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbJW5DIGZhbGxzIHRvIHRoZSBncm91bmQsIGFuZCB1dHRlcnMgYSBsYXN0IGN1cnNlIGF0IHlvdS4gIFRoZW4gJW5qCmJvZHkgZmFkZXMgc2xvd2x5LCBzZWVtaW5nbHkgZGlzcGVyc2luZyBpbnRvIHRoZSBhaXIgYXJvdW5kIHlvdS4gIFlvdQpzbG93bHkgYmVjb21lIGF3YXJlIHRoYXQgdGhlIG92ZXJwb3dlcmluZyBhdXJhIG9mIG1hZ2ljIGluIHRoZSBhaXIgaGFzCmJlZ3VuIHRvIGZhZGUuXV0sCiAgICAgIH0sCiAgICAgIGxlYWRlcl9maXJzdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1wiQXQgbGFzdCB5b3UgaGF2ZSByZXR1cm5lZC4gIFRoZXJlIGlzIGEgZ3JlYXQgcXVlc3QgeW91IG11c3QgdW5kZXJ0YWtlLlwiXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIkFoLCAlcC4gIFlvdSBoYXZlIHJldHVybmVkIGF0IGxhc3QuICBUaGUgd29ybGQgaXMgaW4gZGlyZQpuZWVkIG9mIHlvdXIgaGVscC4gIFRoZXJlIGlzIGEgZ3JlYXQgcXVlc3QgeW91IG11c3QgdW5kZXJ0YWtlLgoKIkJ1dCBmaXJzdCwgSSBtdXN0IHNlZSBpZiB5b3UgYXJlIHJlYWR5IHRvIHRha2Ugb24gc3VjaCBhIGNoYWxsZW5nZS4iXV0sCiAgICAgIH0sCiAgICAgIGxlYWRlcl9sYXN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbXCJZb3UgaGF2ZSBiZXRyYXllZCAlZDsgc29vbiAlbiB3aWxsIGRlc3Ryb3kgdXMuICBCZWdvbmUhXCJdIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siUGFoISAgWW91IGhhdmUgYmV0cmF5ZWQgdGhlIGdvZHMsICVwLiAgWW91IHdpbGwgbmV2ZXIgYXR0YWluCnRoZSBnbG9yeSB3aGljaCB5b3UgYXNwaXJlIHRvLiAgWW91ciBmYWlsdXJlIHRvIGZvbGxvdyB0aGUgdHJ1ZSBwYXRoIGhhcwpjbG9zZWQgdGhpcyBmdXR1cmUgdG8geW91LgoKIkkgd2lsbCBwcm90ZWN0IHRoZXNlIHBlb3BsZSBhcyBiZXN0IEkgY2FuLCBidXQgc29vbiAlbiB3aWxsIG92ZXJjb21lCm1lIGFuZCBkZXN0cm95IGFsbCB3aG8gb25jZSBjYWxsZWQgeW91ICVzLiAgTm93IGJlZ29uZSEiXV0sCiAgICAgIH0sCiAgICAgIGxlYWRlcl9uZXh0ID0gewogICAgICAgICB0ZXh0ID0gIlwiJXAsIHlvdSBhcmUgYmFjay4gIEFyZSB5b3UgcmVhZHkgbm93IGZvciB0aGUgY2hhbGxlbmdlP1wiIiwKICAgICAgfSwKICAgICAgbGVhZGVyX290aGVyID0gewogICAgICAgICB0ZXh0ID0gIlwiQWdhaW4sIHlvdSBzdGFuZCBiZWZvcmUgbWUsICVwLiAgU3VyZWx5IHlvdSBoYXZlIHByZXBhcmVkIHlvdXJzZWxmLlwiIiwKICAgICAgfSwKICAgICAgbG9jYXRlX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IGhhdmUgbG9jYXRlZCAlaS5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tUaGUgc2NlbnQgb2Ygd2F0ZXIgY29tZXMgdG8geW91IGluIHRoZSBkZXNlcnQgYnJlZXplLiAgWW91IGtub3cgdGhhdAp5b3UgaGF2ZSBsb2NhdGVkICVpLl1dLAogICAgICB9LAogICAgICBsb2NhdGVfbmV4dCA9IHsKICAgICAgICAgdGV4dCA9ICJZZXQgYWdhaW4geW91IGhhdmUgYSBjaGFuY2UgdG8gaW5maWx0cmF0ZSAlaS4iLAogICAgICB9LAogICAgICBuZW1lc2lzX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbJW5DIGJvYXN0cyB0aGF0ICVuaCBoYXMgc2xhaW4gbWFueS4gIFwiUHJlcGFyZSB0byBkaWUsICVjLlwiXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIlNvLiAgVGhpcyBpcyB3aGF0IHRoYXQgc2Vjb25kIHJhdGUgc29yY2VyZXIgJWwgc2VuZHMgdG8gZG8gJWxqIGJpZGRpbmcuCkkgaGF2ZSBzbGFpbiBtYW55IGJlZm9yZSB5b3UuICBZb3Ugc2hhbGwgZ2l2ZSBtZSBsaXR0bGUgc3BvcnQuCgoiUHJlcGFyZSB0byBkaWUsICVjLiJdXSwKICAgICAgfSwKICAgICAgbmVtZXNpc19uZXh0ID0gewogICAgICAgICB0ZXh0ID0gIlwiSSBoYXZlIHdhc3RlZCB0b28gbXVjaCB0aW1lIG9uIHlvdSBhbHJlYWR5LiAgTm93LCB5b3Ugc2hhbGwgZGllLlwiIiwKICAgICAgfSwKICAgICAgbmVtZXNpc19vdGhlciA9IHsKICAgICAgICAgdGV4dCA9ICJcIllvdSByZXR1cm4geWV0IGFnYWluLCAlYyEgIEFyZSB5b3UgcHJlcGFyZWQgZm9yIGRlYXRoIG5vdz9cIiIsCiAgICAgIH0sCiAgICAgIG5lbWVzaXNfd2FudHNpdCA9IHsKICAgICAgICAgdGV4dCA9IFtbIkkgc2hhbGwgaGF2ZSAlbyBiYWNrLCB5b3UgcGl0aWZ1bCBleGN1c2UgZm9yICVjYS4KQW5kIHlvdXIgbGlmZSBhcyB3ZWxsLiJdXSwKICAgICAgfSwKICAgICAgbmV4dHRpbWUgPSB7CiAgICAgICAgIHRleHQgPSBbW09uY2UgYWdhaW4sIHlvdSBuZWFyICVILiAgWW91IGtub3cgdGhhdCAlbAp3aWxsIGJlIHdhaXRpbmcuXV0sCiAgICAgIH0sCiAgICAgIG9mZmVyZWRpdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiWyVsQyB0ZWxscyB5b3UgdG8gZ3VhcmQgJW8sIGFuZCB0byByZXR1cm4gd2hlbiB5b3UgaGF2ZSB0cml1bXBoZWQuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbV2hlbiAlbCBzZWVzICVvLCBoZSBzbWlsZXMsIGFuZCBzYXlzOgoKICAgIFdlbGwgZG9uZSwgJXAuICBZb3UgaGF2ZSBzYXZlZCB0aGUgd29ybGQgZnJvbSBjZXJ0YWluIGRvb20uCiAgICBXaGF0LCBub3csIHNob3VsZCBiZSBkb25lIHdpdGggJW8/CgogICAgVGhlc2UgcGVvcGxlLCBicmF2ZSBhcyB0aGV5IGFyZSwgY2Fubm90IGhvcGUgdG8gZ3VhcmQgaXQgZnJvbQogICAgb3RoZXIgc29yY2VyZXJzIHdobyB3aWxsIGRldGVjdCBpdCwgYXMgc3VyZWx5IGFzICVuIGRpZC4KCiAgICBUYWtlICVvIHdpdGggeW91LCAlcC4gIEl0IHdpbGwgZ3VhcmQgeW91IGluCiAgICB5b3VyIGFkdmVudHVyZXMsIGFuZCB5b3UgY2FuIGJlc3QgZ3VhcmQgaXQuICBZb3UgZW1iYXJrIG9uIGEKICAgIHF1ZXN0IGZhciBncmVhdGVyIHRoYW4geW91IHJlYWxpemUuCgogICAgUmVtZW1iZXIgbWUsICVwLCBhbmQgcmV0dXJuIHdoZW4geW91IGhhdmUgdHJpdW1waGVkLiAgSQogICAgd2lsbCB0ZWxsIHlvdSB0aGVuIG9mIHdoYXQgeW91IG11c3QgZG8uICBZb3Ugd2lsbCB1bmRlcnN0YW5kIHdoZW4gdGhlCiAgICB0aW1lIGNvbWVzLl1dLAogICAgICB9LAogICAgICBvZmZlcmVkaXQyID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbXCJZb3Uga2VlcCAlby4gIFJldHVybiB0byAlWiB0byBzZWFyY2ggZm9yIHRoZSBBbXVsZXQuXCJdIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1slbCBnYXplcyByZXZlcmVudGx5IGF0ICVvLCB0aGVuIGJhY2sgYXQgeW91LgoKIllvdSBhcmUgaXRzIGtlZXBlciBub3csIGFuZCB0aGUgdGltZSBoYXMgY29tZSB0byByZXN1bWUgeW91ciBzZWFyY2gKZm9yIHRoZSBBbXVsZXQuICAlWiBhd2FpdCB5b3VyIHJldHVybiB0aHJvdWdoIHRoZQptYWdpYyBwb3J0YWwgd2hpY2ggYnJvdWdodCB5b3UgaGVyZS4iXV0sCiAgICAgIH0sCiAgICAgIG90aGVydGltZSA9IHsKICAgICAgICAgdGV4dCA9IFtbQWdhaW4sIGFuZCB5b3UgdGhpbmsgcG9zc2libHkgZm9yIHRoZSBsYXN0IHRpbWUsIHlvdSBhcHByb2FjaAolSC5dXSwKICAgICAgfSwKICAgICAgcG9zdGhhbmtzID0gewogICAgICAgICB0ZXh0ID0gIlwiVGVsbCB1cywgJXAsIGhhdmUgeW91IGZhcmVkIHdlbGwgb24geW91ciBncmVhdCBxdWVzdD9cIiIsCiAgICAgIH0sCiAgIH0sCiAgIENhdiA9IHsKICAgICAgYXNzaWducXVlc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltGaW5kIGFuZCBkZWZlYXQgJW4sIHJlY292ZXIgJW8sIGFuZCByZXR1cm4gd2l0aCBpdC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siWW91IGFyZSBpbmRlZWQgcmVhZHkgbm93LCAlcC4gIEkgc2hhbGwgdGVsbCB5b3UgYSB0YWxlIG9mCmdyZWF0IHN1ZmZlcmluZyBhbW9uZyB5b3VyIHBlb3BsZToKCiJTaG9ydGx5IGFmdGVyIHlvdSBsZWZ0IG9uIHlvdXIgdmlzaW9uIHF1ZXN0LCB0aGUgY2F2ZXMgd2VyZSBpbnZhZGVkIGJ5CnRoZSBjcmVhdHVyZXMgc2VudCBhZ2FpbnN0IHVzIGJ5ICVuLgoKIlNoZSwgaGVyc2VsZiwgY291bGQgbm90IGF0dGFjayB1cyBkdWUgdG8gaGVyIGdyZWF0IHNpemUsIGJ1dCBoZXIgbWluaW9ucwpoYXZlIGhhcmFzc2VkIHVzIGV2ZXIgc2luY2UuICBJbiB0aGUgZmlyc3QgYXR0YWNrcywgbWFueSBkaWVkLCBhbmQgdGhlCm1pbmlvbnMgb2YgJW4gbWFuYWdlZCB0byBzdGVhbCAlby4KVGhleSB0b29rIGl0IHRvICVpIGFuZCB0aGVyZSwgbm9uZSBvZiBvdXIKJWcgd2FycmlvcnMgaGF2ZSBiZWVuIGFibGUgdG8gZ28uCgoiWW91IG11c3QgZmluZCAlaSwgYW5kIHdpdGhpbiBpdCB3cmVzdAolbyBmcm9tICVuLiAgU2hlIGd1YXJkcyBpdCBhcwpqZWFsb3VzbHkgYXMgc2hlIGd1YXJkcyBhbGwgdHJlYXN1cmVzIHNoZSBhdHRhaW5zLiAgQnV0IHdpdGggaXQsCndlIGNhbiBtYWtlIG91ciBjYXZlcyBzYWZlIG9uY2UgbW9yZS4KCiJQbGVhc2UsICVwLCByZWNvdmVyICVvIGZvciB1cywgYW5kIHJldHVybiBpdCBoZXJlLiJdXSwKICAgICAgfSwKICAgICAgYmFkYWxpZ24gPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltcIllvdSBubyBsb25nZXIgZm9sbG93IHRoZSBwYXRoIG9mIHRoZSAlYS4gIEdvLCBhbmQgcHVyaWZ5IHlvdXJzZWxmLlwiXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIiVwQyEgIFlvdSBoYXZlIGRldmlhdGVkIGZyb20gbXkgdGVhY2hpbmdzLiAgWW91IG5vIGxvbmdlciBmb2xsb3cKdGhlIHBhdGggb2YgdGhlICVhIGFzIHlvdSBzaG91bGQuICBJIGJhbmlzaCB5b3UgZnJvbSB0aGVzZSBjYXZlcywgdG8KZ28gZm9ydGggYW5kIHB1cmlmeSB5b3Vyc2VsZi4gIFRoZW4sIHlvdSBtaWdodCBiZSBhYmxlIHRvIGFjY29tcGxpc2ggdGhpcwpxdWVzdC4iXV0sCiAgICAgIH0sCiAgICAgIGJhZGxldmVsID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbXCIlckEgaXMgdG9vIGluZXhwZXJpZW5jZWQuICBDb21lIGJhY2sgd2hlbiB5b3UgaGF2ZSBwcm9ncmVzc2VkLlwiXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIkFsYXMsICVwLCB5b3UgYXJlIGFzIHlldCB0b28gaW5leHBlcmllbmNlZCB0byBlbWJhcmsgdXBvbiBzdWNoCmEgZGlmZmljdWx0IHF1ZXN0IGFzIHRoYXQgSSBwcm9wb3NlIHRvIGdpdmUgeW91LgoKIiVyQSBjb3VsZCBub3QgcG9zc2libHkgc3Vydml2ZSB0aGUgcmlnb3JzIGRlbWFuZGVkIHRvIGZpbmQKJWksIG5ldmVyIG1pbmQgdG8gY29uZnJvbnQgJW4gaGVyc2VsZi4KCiJBZHZlbnR1cmUgc29tZSBtb3JlLCBhbmQgeW91IHdpbGwgbGVhcm4gdGhlIHNraWxscyB5b3Ugd2lsbCByZXF1aXJlLgolZCBkZWNyZWVzIGl0LiJdXSwKICAgICAgfSwKICAgICAgZGlzY291cmFnZSA9IHsKICAgICAgICAgIlwiWW91IGFyZSB3ZWFrLCAlYy4gIE5vIGNoYWxsZW5nZSBmb3IgdGhlIE1vdGhlciBvZiBhbGwgRHJhZ29ucy5cIiIsCiAgICAgICAgICJcIkkgZ3JvdyBodW5ncnksICVyLiAgWW91IGxvb2sgbGlrZSBhIG5pY2UgYXBwZXRpemVyIVwiIiwKICAgICAgICAgIlwiSm9pbiBtZSBmb3IgbHVuY2g/ICBZb3UncmUgdGhlIG1haW4gY291cnNlLCAlYy5cIiIsCiAgICAgICAgICJcIldpdGggJW8sIEkgYW0gaW52aW5jaWJsZSEgIFlvdSBjYW5ub3Qgc3VjY2VlZC5cIiIsCiAgICAgICAgICJcIllvdXIgbWVudG9yLCAlbCBoYXMgZmFpbGVkLiAgWW91IGFyZSBub3RoaW5nIHRvIGZlYXIuXCIiLAogICAgICAgICAiXCJZb3Ugc2hhbGwgZGllIGhlcmUsICVjLiAgJXJBIGNhbm5vdCBob3BlIHRvIGRlZmVhdCBtZS5cIiIsCiAgICAgICAgICJcIllvdSwgYSBtZXJlICVyIGNoYWxsZW5nZSB0aGUgbWlnaHQgb2YgJW4/ICBIYWghXCIiLAogICAgICAgICAiXCJJIGFtIHRoZSBNb3RoZXIgb2YgYWxsIERyYWdvbnMhICBZb3UgY2Fubm90IGhvcGUgdG8gZGVmZWF0IG1lLlwiIiwKICAgICAgICAgIlwiTXkgY2xhd3MgYXJlIHNoYXJwIG5vdy4gIEkgc2hhbGwgcmlwIHlvdSB0byBzaHJlZHMhXCIiLAogICAgICAgICAiXCIlZCBoYXMgZGVzZXJ0ZWQgeW91LCAlYy4gIFRoaXMgaXMgbXkgZG9tYWluLlwiIiwKICAgICAgfSwKICAgICAgZW5jb3VyYWdlID0gewogICAgICAgICAiXCIlbkMgaXMgaW1tdW5lIHRvIGhlciBvd24gYnJlYXRoIHdlYXBvbnMuIFlvdSBzaG91bGQgdXNlIG1hZ2ljIHVwb24gaGVyIHRoYXQgc2hlIGRvZXMgbm90IHVzZSBoZXJzZWxmLlwiIiwKICAgICAgICAgIlwiV2hlbiB5b3UgZW5jb3VudGVyICVuLCBjYWxsIHVwb24gJWQgZm9yIGFzc2lzdGFuY2UuXCIiLAogICAgICAgICAiXCJUaGVyZSB3aWxsIGJlIG5vd2hlcmUgdG8gaGlkZSBpbnNpZGUgJW5zIGlubmVyIHNhbmN0dW0uXCIiLAogICAgICAgICAiXCJZb3VyIGJlc3QgY2hhbmNlIHdpdGggJW4gd2lsbCBiZSB0byBrZWVwIG1vdmluZy5cIiIsCiAgICAgICAgICJcIkRvIG5vdCBiZSBkaXN0cmFjdGVkIGJ5IHRoZSBncmVhdCB0cmVhc3VyZXMgaW4gJW5zIGxhaXIuIENvbmNlbnRyYXRlIG9uICVvLlwiIiwKICAgICAgICAgIlwiJW9DIGlzIHRoZSBvbmx5IG9iamVjdCB0aGF0ICVuIHRydWx5IGZlYXJzLlwiIiwKICAgICAgICAgIlwiRG8gbm90IGJlIGZvb2xlZCBieSAlbnMgc2l6ZS4gIFNoZSBpcyBmYXN0LCBhbmQgaXQgaXMgcnVtb3JlZCB0aGF0IHNoZSB1c2VzIG1hZ2ljLlwiIiwKICAgICAgICAgIlwiSSB3b3VsZCBzZW5kIGEgcGFydHkgb2YgJWdQIHdpdGggeW91LCBidXQgd2Ugd2lsbCBuZWVkIGFsbCBvZiBvdXIgc3RyZW5ndGggdG8gZGVmZW5kIG91cnNlbHZlcy5cIiIsCiAgICAgICAgICJcIlJlbWVtYmVyLCBiZSAlYSBhdCBhbGwgdGltZXMuICBUaGlzIGlzIHlvdXIgc3RyZW5ndGguXCIiLAogICAgICAgICAiXCJJZiBvbmx5IHdlIGhhZCBhbiBhbXVsZXQgb2YgcmVmbGVjdGlvbiwgdGhpcyB3b3VsZCBub3QgaGF2ZSBoYXBwZW5lZC5cIiIsCiAgICAgIH0sCiAgICAgIGZpcnN0dGltZSA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSBhcnJpdmUgYmFjayBhdCAlSCwgYnV0IHNvbWV0aGluZyBpcyB3cm9uZyBoZXJlLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbW1lvdSBkZXNjZW5kIHRocm91Z2ggYSBiYXJlbHkgZmFtaWxpYXIgc3RhaXJ3ZWxsIHRoYXQgeW91IHJlbWVtYmVyCiVsIHNob3dpbmcgeW91IHdoZW4geW91IGVtYmFya2VkIHVwb24geW91ciB2aXNpb24gcXVlc3QuCgpZb3UgYXJyaXZlIGJhY2sgYXQgJUgsIGJ1dCBzb21ldGhpbmcgc2VlbXMKd3JvbmcgaGVyZS4gIFRoZSB1c3VhbCBzbW9rZSBhbmQgZ2xvd2luZyBsaWdodCBvZiB0aGUgZmlyZXMgb2YgdGhlCm91dGVyIGNhdmVzIGFyZSBhYnNlbnQsIGFuZCBhbiB1bmVhc3kgcXVpZXQgZmlsbHMgdGhlIGRhbXAgYWlyLl1dLAogICAgICB9LAogICAgICBnb2FsX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IGVudGVyIGEgbGFyZ2UgY2F2ZXJuLiAgJW5DIGlzIHByZXNlbnQuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbWW91IGZpbmQgeW91cnNlbGYgaW4gYSBsYXJnZSBjYXZlcm4sIHdpdGggbmVhdGx5IHBvbGlzaGVkIHdhbGxzLCB0aGF0Cm5ldmVydGhlbGVzcyBzaG93IHNpZ25zIG9mIGJlaW5nIHNjb3JjaGVkIGJ5IGZpcmUuCgpCb25lcyBsaXR0ZXIgdGhlIGZsb29yLCBhbmQgdGhlcmUgYXJlIG9iamVjdHMgc2NhdHRlcmVkIGV2ZXJ5d2hlcmUuClRoZSBhaXIgaXMgY2xvc2Ugd2l0aCB0aGUgc3RlbmNoIG9mIHN1bHBodXJvdXMgZnVtZXMuCgolbkMgaXMgY2xlYXJseSB2aXNpYmxlLCBidXQgJW5oIHNlZW1zIHRvIGJlIGFzbGVlcC5dXSwKICAgICAgfSwKICAgICAgZ29hbF9uZXh0ID0gewogICAgICAgICB0ZXh0ID0gIk9uY2UgYWdhaW4sIHlvdSBmaW5kIHlvdXJzZWxmIGluIHRoZSBsYWlyIG9mICVuLiIsCiAgICAgIH0sCiAgICAgIGdvdGl0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbJW9DIGZpbGxzIHlvdSB3aXRoIGEgZmVlbGluZyBvZiBwb3dlci5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tBcyB5b3UgcGljayB1cCAlbyBpdCBzZWVtcyBoZWF2eSBhdCBmaXJzdCwgYnV0IGFzIHlvdQpob2xkIGl0IHN0cmVuZ3RoIGZsb3dzIGludG8geW91ciBhcm1zLgoKWW91IHN1ZGRlbmx5IGZlZWwgZnVsbCBvZiBwb3dlciwgYXMgaWYgbm90aGluZyBjb3VsZCBwb3NzaWJseSBzdGFuZAppbiB5b3VyIHBhdGguXV0sCiAgICAgIH0sCiAgICAgIGd1YXJkdGFsa19hZnRlciA9IHsKICAgICAgICAgIlwiVGhlIHJhaW5zIGhhdmUgcmV0dXJuZWQgYW5kIHRoZSBsYW5kIGdyb3dzIGx1c2ggYWdhaW4uXCIiLAogICAgICAgICAiXCJQZWFjZSBoYXMgcmV0dXJuZWQsIGdpdmUgdGhhbmtzIHRvICVkIVwiIiwKICAgICAgICAgIlwiV2VsY29tZSBiYWNrISAgRGlkIHlvdSBmaW5kICVvP1wiIiwKICAgICAgICAgIlwiU28sICVwLCB0ZWxsIHVzIHRoZSBzdG9yeSBvZiB5b3VyIGZpZ2h0IHdpdGggJW4uXCIiLAogICAgICAgICAiXCIlbEMgZ3Jvd3Mgb2xkLiAgUGVyaGFwcyB5b3Ugd2lsbCBndWlkZSB1cyBhZnRlciBoZSBhc2NlbmRzLlwiIiwKICAgICAgfSwKICAgICAgZ3VhcmR0YWxrX2JlZm9yZSA9IHsKICAgICAgICAgIlwiV2UgaGF2ZSBub3QgYmVlbiBhYmxlIHRvIGdhdGhlciBhcyBtdWNoIGZvb2Qgc2luY2UgdGhlIEdpYW50cyBzZWFsZWQgb2ZmIG91ciBhY2Nlc3MgdG8gdGhlIG91dGVyIHdvcmxkLlwiIiwKICAgICAgICAgIlwiU2luY2UgJW4gc2VudCBoZXIgbWluaW9ucywgd2UgaGF2ZSBiZWVuIGNvbnN0YW50bHkgZmlnaHRpbmcuXCIiLAogICAgICAgICAiXCJJIGhhdmUgaGVhcmQgeW91ciB2aXNpb24gcXVlc3Qgd2FzIHN1Y2Nlc3NmdWwuICBJcyB0aGlzIHNvP1wiIiwKICAgICAgICAgIlwiU28sIHRlbGwgbWUsICVwLCBob3cgaGF2ZSB5b3UgZmFyZWQ/XCIiLAogICAgICAgICAiXCIlbEMgZ3Jvd3Mgb2xkLiAgV2Uga25vdyBub3Qgd2hvIHdpbGwgZ3VpZGUgdXMgYWZ0ZXIgaGUgYXNjZW5kcy5cIiIsCiAgICAgIH0sCiAgICAgIGhhc2FtdWxldCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1wiVGFrZSB0aGUgQW11bGV0IHRvIHRoZSBhbHRhciBvZiAlZCBvbiB0aGUgQXN0cmFsIFBsYW5lIGFuZCBvZmZlciBpdC5cIl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJZb3UgaGF2ZSBiZWVuIHN1Y2Nlc3NmdWwsIEkgc2VlLCAlcC4KCiJOb3cgdGhhdCB0aGUgQW11bGV0IG9mIFllbmRvciBpcyB5b3VycywgaGVyZSBpcyB3aGF0IHlvdSBtdXN0IGRvOgoKIkpvdXJuZXkgdXB3YXJkcyB0byB0aGUgb3BlbiBhaXIuICBUaGUgQW11bGV0IHlvdSBjYXJyeSB3aWxsIHRoZW4KdGFrZSB5b3UgaW50byB0aGUgQXN0cmFsIFBsYW5lcywgd2hlcmUgdGhlIEdyZWF0IFRlbXBsZSBvZiAlZApjYXN0cyBpdHMgaW5mbHVlbmNlIHRocm91Z2hvdXQgb3VyIHdvcmxkLgoKIlNhY3JpZmljZSB0aGUgQW11bGV0IG9uIHRoZSBhbHRhci4gIFRodXMgc2hhbGwgJWQgYmVjb21lIHN1cHJlbWUhIl1dLAogICAgICB9LAogICAgICBraWxsZWRfbmVtZXNpcyA9IHsKICAgICAgICAgdGV4dCA9IFtbJW5DIHNpbmtzIHRvIHRoZSBncm91bmQsIGhlciBoZWFkcyBmbGFpbGluZyBhYm91dC4KQXMgc2hlIGRpZXMsIGEgY2xvdWQgb2Ygbm94aW91cyBmdW1lcyBiaWxsb3dzIGFib3V0IGhlci5dXSwKICAgICAgfSwKICAgICAgbGVhZGVyX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbXCJZb3UgaGF2ZSByZXR1cm5lZC4gIFdlIGFyZSBpbiBkaXJlIG5lZWQgb2YgeW91ciBoZWxwLlwiXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIllvdSBoYXZlIHJldHVybmVkIGZyb20geW91ciB2aXNpb24gcXVlc3QsICVwLiAgVGhhbmsgJWQuCgoiV2UgYXJlIGluIGRpcmUgbmVlZCBvZiB5b3VyIGhlbHAsIG15ICVTLgoKIkJ1dCBmaXJzdCwgSSBtdXN0IHNlZSBpZiB5b3UgYXJlIHlldCBjYXBhYmxlIG9mIHRoZSBxdWVzdCBJIHdvdWxkCmFzayB5b3UgdG8gdW5kZXJ0YWtlLiJdXSwKICAgICAgfSwKICAgICAgbGVhZGVyX2xhc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltcIllvdSBoYXZlIGJldHJheWVkIHRoZSAlTC4gIEJlZ29uZSFcIl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyIlcEMhICBZb3UgaGF2ZSBzZWFsZWQgb3VyIGZhdGUuICBZb3Ugc2VlbSB1bmFibGUgdG8gcmVmb3JtIHlvdXJzZWxmLApzbyBJIG11c3Qgc2VsZWN0IGFub3RoZXIgdG8gdGFrZSB5b3VyIHBsYWNlLgoKIkJlZ29uZSBmcm9tICVIISAgWW91IGhhdmUgYmV0cmF5ZWQgdXMgYnkgY2hvb3NpbmcKdGhlIHBhdGggb2YgdGhlICVDIG92ZXIgdGhlIHRydWUgcGF0aCBvZiB0aGUgJUwuCgoiWW91IG5vIGxvbmdlciBsaXZlIGluIG91ciBleWVzLiJdXSwKICAgICAgfSwKICAgICAgbGVhZGVyX25leHQgPSB7CiAgICAgICAgIHRleHQgPSAiXCJBZ2FpbiwgeW91IHJldHVybiB0byB1cywgJXAuICBMZXQgbWUgc2VlIGlmIHlvdSBhcmUgcmVhZHkgbm93LlwiIiwKICAgICAgfSwKICAgICAgbGVhZGVyX290aGVyID0gewogICAgICAgICB0ZXh0ID0gIlwiQWgsICVwLiAgQXJlIHlvdSBmaW5hbGx5IHJlYWR5P1wiIiwKICAgICAgfSwKICAgICAgbG9jYXRlX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91ICV4IG1hbnkgbGFyZ2UgY2xhdyBtYXJrcywgc21lbGwgY2FycmlvbiwgYW5kIG5vdGljZSBib25lcy5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tZb3UgJXggbWFueSBsYXJnZSBjbGF3IG1hcmtzIG9uIHRoZSBncm91bmQuICBUaGUgdHVubmVscyBhaGVhZApvZiB5b3UgYXJlIGxhcmdlciB0aGFuIG1vc3Qgb2YgdGhvc2UgaW4gYW55IGNhdmUgY29tcGxleCB5b3UgaGF2ZQpldmVyIGJlZW4gaW4gYmVmb3JlLgoKWW91ciBub3NlIGRldGVjdHMgdGhlIHNtZWxsIG9mIGNhcnJpb24gZnJvbSB3aXRoaW4sIGFuZCBib25lcyBsaXR0ZXIKdGhlIHNpZGVzIG9mIHRoZSB0dW5uZWxzLl1dLAogICAgICB9LAogICAgICBsb2NhdGVfbmV4dCA9IHsKICAgICAgICAgdGV4dCA9ICJPbmNlIGFnYWluLCB5b3UgYXBwcm9hY2ggJWkuIiwKICAgICAgfSwKICAgICAgbmVtZXNpc19maXJzdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiWyVuQyB0aHJlYXRlbnMgdG8gZWF0IHlvdS5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siU28sIGZvbGxvd2VyIG9mICVsLCB5b3Ugc2VlayB0byBpbnZhZGUgdGhlIGxhaXIgb2YKJW4uICBPbmx5IG15IG1lYWxzIGFyZSBhbGxvd2VkIGRvd24gaGVyZS4gIFByZXBhcmUKdG8gYmUgZWF0ZW4hIl1dLAogICAgICB9LAogICAgICBuZW1lc2lzX25leHQgPSB7CiAgICAgICAgIHRleHQgPSBbWyJTbywgYWdhaW4geW91IGZhY2UgbWUsICVjLiAgTm8gb25lIGhhcyBldmVyIGJlZm9yZSBlc2NhcGVkIG1lLgpOb3cgSSBzaGFsbCBraWxsIHlvdS4iXV0sCiAgICAgIH0sCiAgICAgIG5lbWVzaXNfb3RoZXIgPSB7CiAgICAgICAgIHRleHQgPSAiXCJZb3UgYXJlIGdldHRpbmcgYW5ub3lpbmcsICVjLiAgUHJlcGFyZSB0byBkaWUuXCIiLAogICAgICB9LAogICAgICBuZW1lc2lzX3dhbnRzaXQgPSB7CiAgICAgICAgIHRleHQgPSAiXCJJJ2xsIGhhdmUgJW8gZnJvbSB5b3UsICVjLiAgWW91IHNoYWxsIGRpZS5cIiIsCiAgICAgIH0sCiAgICAgIG5leHR0aW1lID0gewogICAgICAgICB0ZXh0ID0gIk9uY2UgYWdhaW4sIHlvdSBhcnJpdmUgYmFjayBhdCAlSC4iLAogICAgICB9LAogICAgICBvZmZlcmVkaXQgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltcIlRha2UgJW8gd2l0aCB5b3UuICBJdCB3aWxsIGhlbHAgaW4geW91ciBxdWVzdCBmb3IgdGhlIEFtdWxldCBvZiBZZW5kb3IuXCJdIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1slbEMgZ2xpbXBzZXMgJW8gaW4geW91ciBwb3NzZXNzaW9uLgpIZSBzbWlsZXMgYW5kIHNheXM6CgogICAgWW91IGhhdmUgZG9uZSBpdCEgIFdlIGFyZSBzYXZlZC4gIEJ1dCBJIGZlYXIgdGhhdCAlbwogICAgd2lsbCBhbHdheXMgYmUgYSB0YXJnZXQgZm9yICVDIGZvcmNlcyB3aG8gd2lsbCB3YW50IGl0IGZvciB0aGVpcgogICAgb3duLgoKICAgIFRvIHByZXZlbnQgZnVydGhlciB0cm91YmxlLCBJIHdvdWxkIGxpa2UgeW91LCAlcCwKICAgIHRvIHRha2UgJW8gYXdheSB3aXRoIHlvdS4gIEl0IHdpbGwgaGVscCB5b3UgYXMgeW91CiAgICBxdWVzdCBmb3IgdGhlIEFtdWxldCBvZiBZZW5kb3IuXV0sCiAgICAgIH0sCiAgICAgIG9mZmVyZWRpdDIgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltcIllvdSBhcmUgdGhlIGtlZXBlciBvZiAlbyBub3cuICBSZXR1cm4gdG8gJVogdG8gc2VhcmNoIGZvciB0aGUgQW11bGV0Ll0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyVsIGdyYXNwcyAlbyBwcm91ZGx5IGZvciBhIG1vbWVudCwgdGhlbiBsb29rcyBhdCB5b3UuCgoiWW91IGFyZSBpdHMga2VlcGVyIG5vdywgYW5kIHRoZSB0aW1lIGhhcyBjb21lIHRvIHJlc3VtZSB5b3VyIHNlYXJjaApmb3IgdGhlIEFtdWxldC4gICVaIGF3YWl0IHlvdXIgcmV0dXJuIHRocm91Z2ggdGhlCm1hZ2ljIHBvcnRhbCB3aGljaCBicm91Z2h0IHlvdSBoZXJlLiJdXSwKICAgICAgfSwKICAgICAgb3RoZXJ0aW1lID0gewogICAgICAgICB0ZXh0ID0gW1tGb3Igc29tZSByZWFzb24sIHlvdSB0aGluayB0aGF0IHRoaXMgbWF5IGJlIHRoZSBsYXN0IHRpbWUgeW91IHdpbGwKZW50ZXIgJUguXV0sCiAgICAgIH0sCiAgICAgIHBvc3RoYW5rcyA9IHsKICAgICAgICAgdGV4dCA9IFtbIiVwQyEgIFdlbGNvbWUgYmFjay4KSG93IGdvZXMgeW91ciBxdWVzdCB0byByZWNvdmVyIHRoZSBBbXVsZXQgZm9yICVkPyJdXSwKICAgICAgfSwKICAgfSwKICAgSGVhID0gewogICAgICBhc3NpZ25xdWVzdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1RyYXZlbCB0byAlaSBvbiB5b3VyIHdheSB0byByZWNvdmVyICVvIGZyb20gJW4uXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbRm9yIHRoZSBmaXJzdCB0aW1lLCB5b3Ugc2Vuc2UgYSBzbWlsZSBvbiAlbHMgZmFjZS4KCiAgICAiWW91IGhhdmUgaW5kZWVkIGxlYXJuZWQgYXMgbXVjaCBhcyB3ZSBjYW4gdGVhY2ggeW91IGluIHByZXBhcmF0aW9uCiAgICBmb3IgdGhpcyB0YXNrLiAgTGV0IG1lIHRlbGwgeW91IHdoYXQgSSBrbm93IG9mIHRoZSBzeW1wdG9tcyBhbmQgaG9wZQogICAgdGhhdCB5b3UgY2FuIHByb3ZpZGUgYSBjdXJlLgoKICAgICJBIHNob3J0IHdoaWxlIGFnbywgdGhlIGRyZWFkZWQgJW50IHdhcyBmb29sZWQgYnkgdGhlIGdvZHMKICAgIGludG8gdGhpbmtpbmcgdGhhdCAlbmggY291bGQgdXNlICVvIHRvIGZpbmQgYQogICAgY3VyZSBmb3Igb2xkIGFnZS4gIFRoaW5rIG9mIGl0LCBldGVybmFsIHlvdXRoISAgQnV0ICVuaiBnb29kCiAgICBoZWFsdGggaXMgYWNjb21wbGlzaGVkIGJ5IGRyYXdpbmcgdGhlIGhlYWx0aCBmcm9tIHRob3NlIGFyb3VuZCAlbmkuCgogICAgIkhlIGhhcyBleGhhdXN0ZWQgJW5qIG93biBzdXBwbHkgb2YgaGVhbHRoeSBwZW9wbGUgYW5kIG5vdyAlbmggc2Vla3MgdG8KICAgIGV4dGVuZCAlbmogaW5mbHVlbmNlIGludG8gb3VyIHdvcmxkLiAgWW91IG11c3QgcmVjb3ZlciBmcm9tICVuaQogICAgJW8gYW5kIGJyZWFrIHRoZSBzcGVsbC4KCiAgICAiWW91IG11c3QgdHJhdmVsIGludG8gdGhlIHN3YW1wcyB0byAlaSwgYW5kIGZyb20gdGhlcmUKICAgIGZvbGxvdyB0aGUgdHJhaWwgdG8gJW5zIGlzbGFuZCBsYWlyLiAgQmUgY2FyZWZ1bC4iXV0sCiAgICAgIH0sCiAgICAgIGJhZGFsaWduID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbUmV0dXJuIHdoZW4geW91IGFyZSBtb3JlICVhLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJZb3UgaGF2ZSBsZWFybmVkIG11Y2ggb2YgdGhlIHJlbWVkaWVzIHRoYXQgYmVuZWZpdCwgYnV0IHlvdSBtdXN0IGFsc28Ka25vdyB3aGljaCBwaHlzaWMgZm9yIHdoaWNoIGFpbC4gIFRoYXQgaXMgd2h5ICVkcyB0ZWFjaGluZ3MgYXJlIGEKcGFydCBvZiB5b3VyIHRyYWluaW5nLgoKIlJldHVybiB0byB1cyB3aGVuIHlvdSBoYXZlIGhlYWxlZCB0aHlzZWxmLiJdXSwKICAgICAgfSwKICAgICAgYmFkbGV2ZWwgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgYXJlIHRvbyBpbmV4cGVyaWVuY2VkLiAgUmV0dXJuIHdoZW4geW91IGFyZSAlUmEuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIkFsYXMsICVwLCB5b3UgYXJlIHlldCB0b28gaW5leHBlcmllbmNlZCB0byBkZWFsIHdpdGggdGhlIHJpZ29ycwpvZiBzdWNoIGEgdGFzay4gIFlvdSBtdXN0IGJlIGFibGUgdG8gZHJhdyBvbiB0aGUga25vd2xlZGdlIG9mIGJvdGFueSwKYWxjaGVteSBhbmQgdmV0ZXJpbmFyeSBwcmFjdGljZXMgYmVmb3JlIEkgY2FuIHNlbmQgeW91IG9uIHRoaXMgcXVlc3QgCndpdGggZ29vZCBjb25zY2llbmNlLgoKIlJldHVybiB3aGVuIHlvdSB3ZWFyICVSYSdzIGNhZHVjZXVzLiJdXSwKICAgICAgfSwKICAgICAgZGlzY291cmFnZSA9IHsKICAgICAgICAgIlwiVGhleSBtaWdodCBhcyB3ZWxsIGdpdmUgc2NhbHBlbHMgdG8gd2l6YXJkcyBhcyB0byBsZXQgeW91IHRyeSB0byB1c2UgJW8hXCIiLAogICAgICAgICAiXCJJZiBJIGNvdWxkIHN0cmlrZSAlbCwgc3Vycm91bmRlZCBieSAlbGogJWdQLCBpbWFnaW5lIHdoYXQgSSBjYW4gZG8gdG8geW91IGhlcmUgYnkgeW91cnNlbGYuXCIiLAogICAgICAgICAiXCJJIHdpbGwgcHV0IG15ICVScCB0byB3b3JrIG1ha2luZyBhIHBoeXNpYyBvdXQgb2YgeW91ciBhc2hlcy5cIiIsCiAgICAgICAgICJcIkFzIHdlIHNwZWFrLCBIYWRlcyBnYXRoZXJzIHlvdXIgcGF0aWVudHMgdG8gam9pbiB5b3UuXCIiLAogICAgICAgICAiXCJBZnRlciBJJ20gZG9uZSB3aXRoIHlvdSwgSSdsbCBkZXN0cm95ICVsIGFzIHdlbGwuXCIiLAogICAgICAgICAiXCJZb3Ugd2lsbCBoYXZlIHRvIGtpbGwgbWUgaWYgeW91IGV2ZXIgaG9wZSB0byBsZWF2ZSB0aGlzIHBsYWNlLlwiIiwKICAgICAgICAgIlwiSSB3aWxsIGltcGFsZSB5b3VyIGhlYWQgb24gbXkgY2FkdWNldXMgZm9yIGFsbCB0byBzZWUuXCIiLAogICAgICAgICAiXCJUaGVyZSBpcyBubyBtYXRlcmlhIG1lZGljYSBpbiB5b3VyIHNhY2sgd2hpY2ggd2lsbCBjdXJlIHlvdSBvZiBtZSFcIiIsCiAgICAgICAgICJcIkRvIG5vdCBmaWdodCB0b28gaGFyZCwgSSB3YW50IHlvdXIgc291bCBzdHJvbmcsIG5vdCB3ZWFrZW5lZCFcIiIsCiAgICAgICAgICJcIllvdSBzaG91bGQgaGF2ZSBzdG9wcGVkIHN0dWR5aW5nIGF0IHZldGVuYXJ5LlwiIiwKICAgICAgfSwKICAgICAgZW5jb3VyYWdlID0gewogICAgICAgICAiXCJSZW1lbWJlciwgJXAsIHRvIGFsd2F5cyB3YXNoIHlvdXIgaGFuZHMgYmVmb3JlIG9wZXJhdGluZy5cIiIsCiAgICAgICAgICJcIiVuQyBoYXMgbm8gcmVhbCBtYWdpYyBvZiAlbmogb3duLiAgVG8gdGhpcyAlbmggaXMgdnVsbmVyYWJsZS5cIiIsCiAgICAgICAgICJcIklmIHlvdSBoYXZlIGJlZW4gdHJ1ZSB0byAlZCwgeW91IGNhbiBkcmF3IG9uIHRoZSBwb3dlciBvZiAlby5cIiIsCiAgICAgICAgICJcIkJyaW5nIHdpdGggeW91IGFudGlkb3RlcyBmb3IgcG9pc29ucy5cIiIsCiAgICAgICAgICJcIlJlbWVtYmVyIHRoaXMsICVuIGNhbiB0d2lzdCB0aGUgcG93ZXJzIG9mICVvIHRvIGh1cnQgaW5zdGVhZCBvZiBoZWFsLlwiIiwKICAgICAgICAgIlwiSSBoYXZlIHNlbnQgZm9yIENoaXJvbiwgYnV0IEkgYW0gYWZyYWlkIGhlIHdpbGwgY29tZSB0b28gbGF0ZS5cIiIsCiAgICAgICAgICJcIk1heWJlIHdoZW4geW91IHJldHVybiB0aGUgc25ha2VzIHdpbGwgb25jZSBhZ2FpbiBiZWdpbiB0byBzaGVkLlwiIiwKICAgICAgICAgIlwiVGhlIHBsYWd1ZSBncm93cyB3b3JzZSBhcyB3ZSBzcGVhay4gIEh1cnJ5LCAlcCFcIiIsCiAgICAgICAgICJcIk1hbnkgdGltZXMgJW4gaGFzIGNhdXNlZCB0cm91YmxlIGluIHRoZXNlIGxhbmRzLiAgSXQgaXMgdGltZSB0aGF0ICVuaCB3YXMgZXJhZGljYXRlZCBsaWtlIHRoZSBkaXNlYXNlcyAlbmggaGFzIGNhdXNlZC5cIiIsCiAgICAgICAgICJcIldpdGggYnV0IG9uZSBleWUsICVuIHNob3VsZCBiZSBlYXN5IHRvIGJsaW5kLiAgUmVtZW1iZXIgdGhpcy5cIiIsCiAgICAgIH0sCiAgICAgIGZpcnN0dGltZSA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSBhcnJpdmUgYmFjayBhdCAlSCBhbmQgbXVzdCBmaW5kICVsLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbW1doYXQgc29yY2VyeSBoYXMgYnJvdWdodCB5b3UgYmFjayB0byAlSD8gIFRoZSBzbWVsbApvZiBmcmVzaCBmdW5lcmFsIHB5cmVzIHRlbGxzIHlvdSB0aGF0IHNvbWV0aGluZyBpcyBhbWlzcyB3aXRoIHRoZSBoZWFsaW5nCnBvd2VycyB0aGF0IHVzZWQgdG8gcHJhY3RpY2UgaGVyZS4KCk5vIHJoaXpvdG9taXN0cyBhcmUgdGVuZGluZyB0aGUgbWF0ZXJpYSBtZWRpY2EgZ2FyZGVucywgYW5kIHdoZXJlIGFyZSB0aGUKY29tbW9uIGZvbGsgd2hvIHVzZWQgdG8gY29tZSBmb3IgdGhlIGN1cmVzPwoKWW91IGtub3cgdGhhdCB5b3UgbXVzdCBxdWlja2x5IG1ha2UgeW91ciB3YXkgdG8gdGhlIGNvbGxlZ2l1bSwgYW5kCiVscyBpYXRyZWlvbiwgYW5kIGZpbmQgb3V0IHdoYXQgaGFzIGhhcHBlbmVkIGluIHlvdXIgYWJzZW5jZS5dXSwKICAgICAgfSwKICAgICAgZ29hbF9maXJzdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSBoYXZlIHJlYWNoZWQgdGhlIGxhaXIgb2YgJW4uICBUYWtlICVvIGF3YXkgZnJvbSAlbmkuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbWW91IHN0YW5kIHdpdGhpbiBzaWdodCBvZiB0aGUgaW5mYW1vdXMgSXNsZSBvZiAlbi4gIEV2ZW4KdGhlIHdvcmRzIG9mICVsIGhhZCBub3QgcHJlcGFyZWQgeW91IGZvciB0aGlzLgoKU3RlZWxpbmcgeW91cnNlbGYgYWdhaW5zdCB0aGUgd2FpbHMgb2YgdGhlIGlsbCB0aGF0IHBpZXJjZSB5b3VyIGVhcnMsCnlvdSBodXJyeSBvbiB5b3VyIHRhc2suICBNYXliZSB3aXRoICVvIHlvdSBjYW4KaGVhbCB0aGVtIG9uIHlvdXIgcmV0dXJuLCBidXQgbm90IG5vdy5dXSwKICAgICAgfSwKICAgICAgZ29hbF9uZXh0ID0gewogICAgICAgICB0ZXh0ID0gIk9uY2UgYWdhaW4sIHlvdSAleCB0aGUgSXNsZSBvZiAlbiBpbiB0aGUgZGlzdGFuY2UuIiwKICAgICAgfSwKICAgICAgZ290aXQgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgZmVlbCB0aGUgaGVhbGluZyBwb3dlciBvZiAlbyBhbmQgc2hvdWxkIHJldHVybiBpdCB0byAlbC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tBcyB5b3UgcGljayB1cCAlbywgeW91IGZlZWwgaXRzIGhlYWxpbmcgYmVnaW4gdG8Kd2FybSB5b3VyIHNvdWwuICBZb3UgY3Vyc2UgWmV1cyBmb3IgdGFraW5nIGl0IGZyb20gaXRzIHJpZ2h0ZnVsIG93bmVyLApidXQgYXQgbGVhc3QgeW91IGhvcGUgdGhhdCAlbCBjYW4gcHV0IGl0IHRvIGdvb2QgdXNlIG9uY2UKYWdhaW4uXV0sCiAgICAgIH0sCiAgICAgIGd1YXJkdGFsa19hZnRlciA9IHsKICAgICAgICAgIlwiRGlkIHlvdSByZWFkIHRoYXQgbmV3IHRyZWF0aXNlIG9uIHRoZSB0aGVyYXBldXRpYyB1c2Ugb2YgbGVlY2hlcz9cIiIsCiAgICAgICAgICJcIlBhaW50IGEgcmVkIGNhZHVjZXVzIG9uIHlvdXIgc2hpZWxkIGFuZCBtb25zdGVycyB3b24ndCBoaXQgeW91LlwiIiwKICAgICAgICAgIlwiSG93IGFyZSB5b3UgZmVlbGluZz8gIFBlcmhhcHMgYSBnb29kIGJsZWVkaW5nIHdpbGwgaW1wcm92ZSB5b3VyIHNwaXJpdHMuXCIiLAogICAgICAgICAiXCJIYXZlIHlvdSBoZWFyZCB0aGUgYWJzdXJkIG5ldyB0aGVvcnkgdGhhdCBkaXNlYXNlcyBhcmUgY2F1c2VkIGJ5IG1pY3Jvc2NvcGljIG9yZ2FuaXNtcywgYW5kIG5vdCBpbGwgaHVtb3JzP1wiIiwKICAgICAgICAgIlwiSSBzZWUgdGhhdCB5b3UgYnJpbmcgJW8sIG5vdyB5b3UgY2FuIGN1cmUgdGhpcyBwbGFndWUhXCIiLAogICAgICB9LAogICAgICBndWFyZHRhbGtfYmVmb3JlID0gewogICAgICAgICAiXCJEaWQgeW91IHJlYWQgdGhhdCBuZXcgdHJlYXRpc2Ugb24gdGhlIHRoZXJhcGV1dGljIHVzZSBvZiBsZWVjaGVzP1wiIiwKICAgICAgICAgIlwiUGFpbnQgYSByZWQgY2FkdWNldXMgb24geW91ciBzaGllbGQgYW5kIG1vbnN0ZXJzIHdvbid0IGhpdCB5b3UuXCIiLAogICAgICAgICAiXCJJIHBhc3NlZCBoYW5kd3JpdGluZyBzbyB0aGV5IGFyZSBkZW1vdGluZyBtZSBhIHJhbmsuXCIiLAogICAgICAgICAiXCJJJ3ZlIGhlYXJkIHRoYXQgZXZlbiAlbCBoYXMgbm90IGJlZW4gYWJsZSB0byBjdXJlIENoaXJvbi5cIiIsCiAgICAgICAgICJcIldlIHRoaW5rICVuIGhhcyB1c2VkICVuaiBhbGNoZW1pc3RzLCBhbmQgJW8sIHRvIHVubGVhc2ggYSBuZXcgZGlzZWFzZSB3ZSBjYWxsICd0aGUgY29sZCcgb24gR2VoZW5ub20uXCIiLAogICAgICB9LAogICAgICBoYXNhbXVsZXQgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltcIllvdSBoYXZlIHJlY292ZXJlZCB0aGUgQW11bGV0LiAgVHJhdmVsIHRvIHRoZSBBc3RyYWwgUGxhbmUgYW5kIHJldHVybiBpdCB0byAlZC5cIl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJBaCwgeW91IGhhdmUgcmVjb3ZlcmVkIHRoZSBBbXVsZXQsICVwLiAgV2VsbCBkb25lIQoKIk5vdywgeW91IHNob3VsZCBrbm93IHRoYXQgeW91IG11c3QgdHJhdmVsIHRocm91Z2ggdGhlIEVsZW1lbnRhbCBQbGFuZXMKdG8gdGhlIEFzdHJhbCwgYW5kIHRoZXJlIHJldHVybiB0aGUgQW11bGV0IHRvICVkLiAgR28gZm9ydGggYW5kCm1heSBvdXIgcHJheWVycyBiZSBhcyBhIHdpbmQgdXBvbiB5b3VyIGJhY2suIl1dLAogICAgICB9LAogICAgICBraWxsZWRfbmVtZXNpcyA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiWyVuQyBjdXJzZXMgeW91IGFzICVuaCBkaWVzLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbW1RoZSBiYXR0ZXJlZCBib2R5IG9mICVuIHNsdW1wcyB0byB0aGUgZ3JvdW5kIGFuZCBnYXNwcwpvdXQgb25lIGxhc3QgY3Vyc2U6CgogICAgIllvdSBoYXZlIGRlZmVhdGVkIG1lLCAlcCwgYnV0IEkgc2hhbGwgaGF2ZSBteSByZXZlbmdlLgogICAgSG93LCBJIHNoYWxsIG5vdCBzYXksIGJ1dCB0aGlzIGN1cnNlIHNoYWxsIGJlIGxpa2UgYSBjYW5jZXIKICAgIG9uIHlvdS4iCgpXaXRoIHRoYXQgJW4gZGllcy5dXSwKICAgICAgfSwKICAgICAgbGVhZGVyX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbJWwgaXMgd2VhayBmcm9tIHRoZSBzdHJ1Z2dsZSB3aXRoICVuLiAgJWxIIHdhbnRzIHRvIGV4YW1pbmUgeW91Ll0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbW0ZlZWJseSwgJWwgcmFpc2VzICVsaiBoZWFkIHRvIGxvb2sgYXQgeW91LgoKIkl0IGlzIGdvb2QgdG8gc2VlIHlvdSBhZ2FpbiwgJXAuICBJIHNlZSB0aGUgY29uY2VybiBpbiB5b3VyCmV5ZXMsIGJ1dCBkbyBub3Qgd29ycnkgZm9yIG1lLiAgSSBhbSBub3QgcmVhZHkgZm9yIEhhZGVzIHlldC4gIFdlIGhhdmUKZXhoYXVzdGVkIG11Y2ggb2Ygb3VyIGhlYWxpbmcgcG93ZXJzIGhvbGRpbmcgb2ZmICVuLgpJIG5lZWQgeW91ciBmcmVzaCBzdHJlbmd0aCB0byBjYXJyeSBvbiBvdXIgd29yay4KCiJDb21lIGNsb3NlciBhbmQgbGV0IG1lIGxheSBoYW5kcyBvbiB5b3UsIGFuZCBkZXRlcm1pbmUgaWYgeW91IGhhdmUKdGhlIHNraWxscyBuZWNlc3NhcnkgdG8gYWNjb21wbGlzaCB0aGlzIG1pc3Npb24uIl1dLAogICAgICB9LAogICAgICBsZWFkZXJfbGFzdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSBhcmUgYSBmYWlsdXJlIGFzIGEgaGVhbGVyLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJZb3UgaGF2ZSBmYWlsZWQgdXMsICVwLiAgWW91IGFyZSBhIHF1YWNrISAgQSBjaGFybGF0YW4hCgoiSGFkZXMgd2lsbCBiZSBoYXBweSB0byBoZWFyIHRoYXQgeW91IGFyZSBvbmNlIGFnYWluIHByYWN0aWNpbmcgeW91cgphcnRzIG9uIHRoZSB1bnN1c3BlY3RpbmcuIl1dLAogICAgICB9LAogICAgICBsZWFkZXJfbmV4dCA9IHsKICAgICAgICAgdGV4dCA9IFtbIkFnYWluIHlvdSByZXR1cm4gdG8gbWUsICVwLiAgSSBzZW5zZSB0aGF0IGVhY2ggdHJpcCBiYWNrCnRoZSBwbGV1cmlzeSBhbmQgbWFsYWRpZXMgb2Ygb3VyIGxhbmQgYmVnaW4gdG8gaW5mZWN0IHlvdS4gIExldCB1cwpob3BlIGFuZCBwcmF5IHRvICVkIHRoYXQgeW91IGJlY29tZSByZWFkeSBmb3IgeW91ciB0YXNrIGJlZm9yZQp5b3UgZmFsbCB2aWN0aW0gdG8gdGhlIGJhZCBodW1vcnMuIl1dLAogICAgICB9LAogICAgICBsZWFkZXJfb3RoZXIgPSB7CiAgICAgICAgIHRleHQgPSBbWyJDaGlyb24gaGFzIGZhbGxlbiwgSGVybWVzIGhhcyBmYWxsZW4sIHdoYXQgZWxzZSBtdXN0IEkgdGVsbCB5b3UgdG8KaW1wcmVzcyB1cG9uIHlvdSB0aGUgaW1wb3J0YW5jZSBvZiB5b3VyIG1pc3Npb24hICBJIGhvcGUgdGhhdCB5b3UKaGF2ZSBjb21lIHByZXBhcmVkIHRoaXMgdGltZS4iXV0sCiAgICAgIH0sCiAgICAgIGxvY2F0ZV9maXJzdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSBoYXZlIHJlYWNoZWQgJWkgYnV0IGFsbCBpcyBub3Qgd2VsbC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tZb3Ugc3RhbmQgYmVmb3JlIHRoZSBlbnRyYW5jZSB0byAlaS4gIFN0cmFuZ2UKc2NyYXRjaGluZyBub2lzZXMgY29tZSBmcm9tIHdpdGhpbiB0aGUgYnVpbGRpbmcuCgpUaGUgc3dhbXB5IGdyb3VuZCBhcm91bmQgeW91IHNlZW1zIHRvIHN0aW5rIHdpdGggZGlzZWFzZS5dXSwKICAgICAgfSwKICAgICAgbG9jYXRlX25leHQgPSB7CiAgICAgICAgIHRleHQgPSAiT25jZSBhZ2FpbiB5b3Ugc3RhbmQgYXQgdGhlIGVudHJhbmNlIHRvICVpLiIsCiAgICAgIH0sCiAgICAgIG5lbWVzaXNfZmlyc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltcIkkgd2lsbCB0YWtlIHlvdXIgbGlmZSwgdGhlbiBkZWZlYXQgJWwuXCJdIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siVGhleSBoYXZlIG1hZGUgYSBtaXN0YWtlIGluIHNlbmRpbmcgeW91LCAlcC4KCiJXaGVuIEkgYWRkIHlvdXIgeW91dGggdG8gbWluZSwgaXQgd2lsbCBqdXN0IG1ha2UgaXQgZWFzaWVyIGZvciBtZQp0byBkZWZlYXQgJWwuIl1dLAogICAgICB9LAogICAgICBuZW1lc2lzX25leHQgPSB7CiAgICAgICAgIHRleHQgPSAiXCJVbmxpa2UgeW91ciBwYXRpZW50cywgeW91IHNlZW0gdG8ga2VlcCBjb21pbmcgYmFjaywgJXAhXCIiLAogICAgICB9LAogICAgICBuZW1lc2lzX290aGVyID0gewogICAgICAgICB0ZXh0ID0gIlwiV2hpY2ggd291bGQgeW91IGxpa2UsICVwPyAgQm9pbHMsIHBsZXVyaXN5LCBjb252dWxzaW9ucz9cIiIsCiAgICAgIH0sCiAgICAgIG5lbWVzaXNfd2FudHNpdCA9IHsKICAgICAgICAgdGV4dCA9IFtbIkknbGwgaGF2ZSAlbyBiYWNrIGZyb20geW91LCAlci4gIFlvdSBhcmUKbm90IGdvaW5nIHRvIGxpdmUgdG8gZXNjYXBlIHRoaXMgcGxhY2UuIl1dLAogICAgICB9LAogICAgICBuZXh0dGltZSA9IHsKICAgICAgICAgdGV4dCA9IFtbQWZ0ZXIgeW91ciBsYXN0IGV4cGVyaWVuY2UgeW91IGV4cGVjdGVkIHRvIGJlIGhlcmUsIGJ1dCB5b3UgY2VydGFpbmx5CmRpZCBub3QgZXhwZWN0IHRvIHNlZSB0aGluZ3Mgc28gbXVjaCB3b3JzZS4gIFRoaXMgdGltZSB5b3UgbXVzdCBzdWNjZWVkLl1dLAogICAgICB9LAogICAgICBvZmZlcmVkaXQgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIlslbCB0b3VjaGVzICVvIGFuZCB0ZWxscyAlbGogJWdQIHRvIGRvIHNvIHRvbywgdGhlbiB0ZWxscyB5b3UgdG8gdGFrZSBpdCB3aXRoIHlvdS5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tBcyBzb29uIGFzICVsIHNlZXMgJW8gJWxoIHN1bW1vbnMgJWxqCiVnUC4KCkdlbnRseSwgJWwgcmVhY2hlcyBvdXQgYW5kIHRvdWNoZXMgJW8uCkhlIGluc3RydWN0cyBlYWNoIG9mIHRoZSBhc3NlbWJsZWQgdG8gZG8gdGhlIHNhbWUuICBXaGVuIGV2ZXJ5b25lCmhhcyBmaW5pc2hlZCAlbGggc3BlYWtzIHRvIHlvdS4KCiAgICAiTm93IHRoYXQgd2UgaGF2ZSBiZWVuIHJlcGxlbmlzaGVkIHdlIGNhbiBkZWZlYXQgdGhpcyBwbGFndWUuICBZb3UgbXVzdAogICAgdGFrZSAlbyB3aXRoIHlvdSBhbmQgcmVwbGVuaXNoIHRoZSB3b3JsZHMgeW91IGhhdmUKICAgIGJlZW4gY2FsbGVkIHVwb24gdG8gdHJhdmVsIG5leHQuICBJIHdpc2ggeW91IGNvdWxkIHJpZGUgQ2hpcm9uIHRvIHRoZQogICAgZW5kIG9mIHlvdXIgam91cm5leSwgYnV0IEkgbmVlZCBoaW0gdG8gaGVscCBtZSBzcHJlYWQgdGhlIGN1cmUuICBHbwogICAgbm93IGFuZCBjb250aW51ZSB5b3VyIGpvdXJuZXkuIl1dLAogICAgICB9LAogICAgICBvZmZlcmVkaXQyID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbJWwgdGVsbHMgeW91IHRvIGtlZXAgJW8gYW5kIHJldHVybiB0byAlWiB0byBzZWFyY2ggZm9yIHRoZSBBbXVsZXQuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbJWwgY2F1dGlvdXNseSBoYW5kbGVzICVvIHdoaWxlIHdhdGNoaW5nIHlvdS4KCiJZb3UgYXJlIGl0cyBrZWVwZXIgbm93LCBhbmQgdGhlIHRpbWUgaGFzIGNvbWUgdG8gcmVzdW1lIHlvdXIgc2VhcmNoCmZvciB0aGUgQW11bGV0LiAgJVogYXdhaXQgeW91ciByZXR1cm4gdGhyb3VnaCB0aGUKbWFnaWMgcG9ydGFsIHdoaWNoIGJyb3VnaHQgeW91IGhlcmUuIl1dLAogICAgICB9LAogICAgICBvdGhlcnRpbWUgPSB7CiAgICAgICAgIHRleHQgPSBbW0FnYWluLCB5b3UgJXggJUggaW4gdGhlIGRpc3RhbmNlLgoKVGhlIHNtZWxsIG9mIGRlYXRoIGFuZCBkaXNlYXNlIHBlcm1lYXRlcyB0aGUgYWlyLiAgWW91IGRvIG5vdCBoYXZlCnRvIGJlICVSYSB0byBrbm93IHRoYXQgJW4gaXMgb24gdGhlIHZlcmdlIG9mIHZpY3RvcnkuXV0sCiAgICAgIH0sCiAgICAgIHBvc3RoYW5rcyA9IHsKICAgICAgICAgdGV4dCA9IFtbIllvdSBoYXZlIGFnYWluIHJldHVybmVkIHRvIHVzLCAlcC4gIFdlIGhhdmUgZG9uZSB3ZWxsIGluIHlvdXIKYWJzZW5jZSwgeWVzPyAgSG93IGZhcmUgeW91IHVwb24geW91ciBxdWVzdCBmb3IgdGhlIEFtdWxldD8iXV0sCiAgICAgIH0sCiAgIH0sCiAgIEtuaSA9IHsKICAgICAgYXNzaWducXVlc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltQYXNzIHRocm91Z2ggJWkgdG8gcmVhY2ggJW4uICBEZXN0cm95ICVuaSBhbmQgcmV0dXJuIHdpdGggJW8uXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIkFoLCAlcC4gIFRob3UgYXJ0IHRydWx5IHJlYWR5LCBhcyBubyAlYyBiZWZvcmUgdGhlZSBoYXRoCmJlZW4uICBIZWFyIG5vdyBPdXIgd29yZHM6CgoiQXMgdGhvdSBub3RpY2VkIGFzIHRob3UgYXBwcm9hY2hlZCAlSCwgYSBncmVhdCBiYXR0bGUgaGF0aApiZWVuIGZvdWdodCByZWNlbnRseSBpbiB0aGVzZSBmaWVsZHMuICBLbm93IHRob3UgdGhhdCBNZXJsaW4gaGltc2VsZgpjYW1lIHRvIGFpZCBVcyBoZXJlIGFzIFdlIGJhdHRsZWQgdGhlIGZvdWwgJW4uICBJbiB0aGUgbWlkc3Qgb2YgdGhhdApiYXR0bGUsICVuIHN0cnVjayBNZXJsaW4gYSBncmVhdCBibG93LCBmZWxsaW5nIGhpbS4gIFRoZW4sIGFzIE91cgpmb3JjZXMgd2VyZSBwcmVzc2VkIGJhY2ssICVuIHN0b2xlICVvLgoKIldlIGV2ZW50dWFsbHkgdHVybmVkIHRoZSB0aWRlLCBidXQgbG9zdCBtYW55ICVjUCBpbiBkb2luZyBzby4KTWVybGluIHdhcyB0YWtlbiBvZmYgYnkgaGlzIGFwcHJlbnRpY2UsIGJ1dCBoYXRoIG5vdCByZWNvdmVyZWQuICBXZSBoYXZlCmJlZW4gdG9sZCB0aGF0IHNvIGxvbmcgYXMgJW4gcG9zc2Vzc2V0aCAlbywKTWVybGluIHdpbGwgbm90IHJlZ2FpbiBoaXMgaGVhbHRoLgoKIldlIGhlcmVieSBjaGFyZ2UgdGhlZSB3aXRoIHRoaXMgbW9zdCBpbXBvcnRhbnQgb2YgZHV0aWVzOgoKIkdvIGZvcnRoIGZyb20gdGhpcyBwbGFjZSwgdG8gdGhlIGZlbnMsIGFuZCB0aGVyZSB0aG91IHdpbHQgZmluZAolaS4gIEZyb20gdGhlcmUsIHRob3UgbXVzdCB0cmFjayBkb3duICVuLiAgRGVzdHJveSB0aGUKYmVhc3QsIGFuZCByZXR1cm4gdG8gVXMgJW8uICBPbmx5IHRoZW4gY2FuCldlIHJlc3RvcmUgTWVybGluIHRvIGhlYWx0aC4iXV0sCiAgICAgIH0sCiAgICAgIGJhZGFsaWduID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbR28gYW5kIGRvIHBlbmFuY2UuICBSZXR1cm4gd2hlbiB5b3UgYXJlIHRydWx5ICVhLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJUaG91IGRpc2hvbm91cmVzdCBVcywgJXAhICBUaG91IGhhc3Qgc3RyYXllZCBmcm9tIHRoZSBwYXRoIG9mCmNoaXZhbHJ5ISBHbyBmcm9tIE91ciBwcmVzZW5jZSBhbmQgZG8gcGVuYW5jZS4gIE9ubHkgd2hlbiB0aG91IGFydCBhZ2FpbgpwdXJlIG1heXN0IHRob3UgcmV0dXJuIGhlbmNlLiJdXSwKICAgICAgfSwKICAgICAgYmFkbGV2ZWwgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgYXJlIG5vdCBwcmVwYXJlZCB0byBmYWNlICVuLiAgUmV0dXJuIHdoZW4geW91IGFyZSAlUmEuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIlZlcmlseSwgJXAsIHRob3UgaGFzdCBkb25lIHdlbGwuICBUaGF0IHRob3UgaGFzdCBzdXJ2aXZlZCB0aHVzCmZhciBpcyBhIGNyZWRpdCB0byB0aHkgdmFsb3IsIGJ1dCB0aG91IGFydCB5ZXQgdW5wcmVwYXJlZCBmb3IKdGhlIGRlbWFuZHMgcmVxdWlyZWQgYXMgT3VyIENoYW1waW9uLiAgJXJBLCBubyBtYXR0ZXIgaG93CnB1cmUsIGNvdWxkIG5ldmVyIGhvcGUgdG8gZGVmZWF0IHRoZSBmb3VsICVuLgoKIkpvdXJuZXkgZm9ydGggZnJvbSB0aGlzIHBsYWNlLCBhbmQgaG9uZSB0aHkgc2tpbGxzLiAgUmV0dXJuIHRvCk91ciBwcmVzZW5jZSB3aGVuIHRob3UgaGFzdCBhdHRhaW5lZCB0aGUgbm9ibGUgdGl0bGUgb2YgJVIuIl1dLAogICAgICB9LAogICAgICBkaXNjb3VyYWdlID0gewogICAgICAgICAiXCJBIG1lcmUgJXIgY2FuIG5ldmVyIHdpdGhzdGFuZCBtZSFcIiIsCiAgICAgICAgICJcIkkgc2hhbGwga2lsbCB0aGVlIG5vdywgYW5kIGZlYXN0IVwiIiwKICAgICAgICAgIlwiUHVueSAlYy4gIFdoYXQgbWFubmVyIG9mIGRlYXRoIGRvc3QgdGhvdSB3aXNoP1wiIiwKICAgICAgICAgIlwiRmlyc3QgdGhlZSwgJXAsIHRoZW4gSSBzaGFsbCBmZWFzdCB1cG9uICVsLlwiIiwKICAgICAgICAgIlwiSGFoISAgVGhvdSBoYXN0IGZhaWxlZCwgJXIuICBOb3cgdGhvdSBzaGFsdCBkaWUuXCIiLAogICAgICAgICAiXCJEaWUsICVjLiAgVGhvdSBhcnQgYXMgbm90aGluZyBhZ2FpbnN0IG15IG1pZ2h0LlwiIiwKICAgICAgICAgIlwiSSBzaGFsbCBzdWNrIHRoZSBtYXJyb3cgZnJvbSB0aHkgYm9uZXMsICVjLlwiIiwKICAgICAgICAgIlwiTGV0J3Mgc2VlLi4uICBCYWtlZD8gIE5vLiAgRnJpZWQ/ICBOYXkuICBCcm9pbGVkPyAgWWVhIHZlcmlseSwgdGhhdCBpcyB0aGUgd2F5IEkgbGlrZSBteSAlYyBmb3IgZGlubmVyLlwiIiwKICAgICAgICAgIlwiVGh5IHN0cmVuZ3RoIHdhbmV0aCwgJXAuICBUaGUgdGltZSBvZiB0aHkgZGVhdGggZHJhd2V0aCBuZWFyLlwiIiwKICAgICAgICAgIlwiQ2FsbCB1cG9uIHRoeSBwcmVjaW91cyAlZCwgJXAuICBJdCBzaGFsbCBub3QgYXZhaWwgdGhlZS5cIiIsCiAgICAgIH0sCiAgICAgIGVuY291cmFnZSA9IHsKICAgICAgICAgIlwiUmVtZW1iZXIsICVwLCBmb2xsb3cgYWx3YXlzIHRoZSBwYXRoIG9mICVkLlwiIiwKICAgICAgICAgIlwiVGhvdWdoICVuIGlzIHZlcmlseSBhIG1pZ2h0eSBmb2UsIFdlIGhhdmUgY29uZmlkZW5jZSBpbiB0aHkgdmljdG9yeS5cIiIsCiAgICAgICAgICJcIkJld2FyZSwgZm9yICVuIGhhdGggc3Vycm91bmRlZCAlbmlzZWxmIHdpdGggaG9yZGVzIG9mIGZvdWwgY3JlYXR1cmVzLlwiIiwKICAgICAgICAgIlwiR3JlYXQgdHJlYXN1cmUsICd0aXMgc2FpZCwgaXMgaG9hcmRlZCBpbiB0aGUgbGFpciBvZiAlbi5cIiIsCiAgICAgICAgICJcIklmIHRob3UgcG9zc2Vzc2VzdCAlbywgJXAsICVucyBtYWdpYyBzaGFsbCB0aGVyZXdpdGggYmUgdGh3YXJ0ZWQuXCIiLAogICAgICAgICAiXCJUaGUgZ2F0ZXMgb2YgJWkgYXJlIGd1YXJkZWQgYnkgZm9yY2VzIHVuc2VlbiwgJXAuIEdvIGNhcmVmdWxseS5cIiIsCiAgICAgICAgICJcIlJldHVybiAlbyB0byBVcyBxdWlja2x5LCAlcC5cIiIsCiAgICAgICAgICJcIkRlc3Ryb3kgJW4sICVwLCBlbHNlICVIIHNoYWxsIHN1cmVseSBmYWxsLlwiIiwKICAgICAgICAgIlwiQ2FsbCB1cG9uICVkIHdoZW4gdGhvdSBhcnQgaW4gbmVlZC5cIiIsCiAgICAgICAgICJcIlRvIGZpbmQgJWksIHRob3UgbXVzdCBrZWVwIHRoeSBoZWFydCBwdXJlLlwiIiwKICAgICAgfSwKICAgICAgZmlyc3R0aW1lID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbU2lnbnMgb2YgYmF0dGxlIGluY2x1ZGUgbG9uZyBnb3VnZXMgaW4gdGhlIHdhbGxzIG9mICVILl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbW1lvdSBtYXRlcmlhbGl6ZSBpbiB0aGUgc2hhZG93cyBvZiAlSC4gIEltbWVkaWF0ZWx5LCB5b3Ugbm90aWNlCnRoYXQgc29tZXRoaW5nIGlzIHdyb25nLiAgVGhlIGZpZWxkcyBhcm91bmQgdGhlIGNhc3RsZSBhcmUgdHJhbXBsZWQgYW5kCndpdGhlcmVkLCBhcyBpZiBzb21lIGdyZWF0IGJhdHRsZSBoYXMgYmVlbiByZWNlbnRseSBmb3VnaHQuCgpFeHBsb3JpbmcgZnVydGhlciwgeW91ICV4IGxvbmcgZ291Z2VzIGluIHRoZSB3YWxscyBvZiAlSC4KWW91IGtub3cgb2Ygb25seSBvbmUgY3JlYXR1cmUgdGhhdCBtYWtlcyB0aG9zZSBraW5kcyBvZiBtYXJrcy4uLl1dLAogICAgICB9LAogICAgICBnb2FsX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91ICV4IHRoZSBlbnRyYW5jZSB0byBhIGNhdmVybiBpbnNpZGUgYSBoaWxsLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbW0FzIHlvdSBleGl0IHRoZSBzd2FtcHMsIHlvdSAleCBiZWZvcmUgeW91IGEgaHVnZSwgZ2FwaW5nIGhvbGUgaW4gdGhlCnNpZGUgb2YgYSBoaWxsLiAgRnJvbSB3aXRoaW4sIHlvdSBzbWVsbCB0aGUgZm91bCBzdGVuY2ggb2YgY2Fycmlvbi4KClRoZSBwb29scyBvbiBlaXRoZXIgc2lkZSBvZiB0aGUgZW50cmFuY2UgYXJlIGZvdWxlZCB3aXRoIGJsb29kLCBhbmQKcGllY2VzIG9mIHJ1c3RlZCBtZXRhbCBhbmQgYnJva2VuIHdlYXBvbnMgc2hvdyBhYm92ZSB0aGUgc3VyZmFjZS5dXSwKICAgICAgfSwKICAgICAgZ29hbF9uZXh0ID0gewogICAgICAgICB0ZXh0ID0gIkFnYWluLCB5b3Ugc3RhbmQgYXQgdGhlIGVudHJhbmNlIHRvICVucyBsYWlyLiIsCiAgICAgIH0sCiAgICAgIGdvdGl0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IGZlZWwgdGhlIG1hZ2ljIG9mICVvLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbW0FzIHlvdSBwaWNrIHVwICVvLCB5b3UgZmVlbCBpdHMgcHJvdGVjdGl2ZSBmaWVsZHMKZm9ybSBhcm91bmQgeW91ciBib2R5LiAgWW91IGFsc28gZmVlbCBhIGZhaW50IHN0aXJyaW5nIGluIHlvdXIgbWluZCwgYXMKaWYgeW91IGFyZSBpbiB0d28gcGxhY2VzIGF0IG9uY2UsIGFuZCBpbiB0aGUgc2Vjb25kLCB5b3UgYXJlIHdha2luZyBmcm9tCmEgbG9uZyBzbGVlcC5dXSwKICAgICAgfSwKICAgICAgZ3VhcmR0YWxrX2FmdGVyID0gewogICAgICAgICAiXCJIYWlsLCAlcCEgIFZlcmlseSwgdGhvdSBsb29rZXN0IHdlbGwuXCIiLAogICAgICAgICAiXCJTbywgJXAsIGRpZHN0IHRob3UgZmluZCAlbiBpbiB0aGUgZmVucyBuZWFyICVpP1wiIiwKICAgICAgICAgIlwiV29ydGh5ICVwLCBoYXN0IHRob3UgcHJvdmVuIHRoeSByaWdodCBwdXJwb3NlIG9uIHRoZSBib2R5IG9mICVuP1wiIiwKICAgICAgICAgIlwiVmVyaWx5LCAlbCBjb3VsZCBoYXZlIG5vIGJldHRlciBjaGFtcGlvbiwgJXAuXCIiLAogICAgICAgICAiXCJIYXN0IHRob3UgaW5kZWVkIHJlY292ZXJlZCAlbz9cIiIsCiAgICAgIH0sCiAgICAgIGd1YXJkdGFsa19iZWZvcmUgPSB7CiAgICAgICAgICJcIkhhaWwsICVwISAgVmVyaWx5LCB0aG91IGxvb2tlc3Qgd2VsbC5cIiIsCiAgICAgICAgICJcIlRoZXJlIGlzIHdvcmQsICVwLCB0aGF0ICVuIGhhdGggYmVlbiBzaWdodGVkIGluIHRoZSBmZW5zIG5lYXIgJWkuXCIiLAogICAgICAgICAiXCJUaG91IGFydCBvdXIgb25seSBob3BlIG5vdywgJXAuXCIiLAogICAgICAgICAiXCJWZXJpbHksICVsIGNvdWxkIGhhdmUgbm8gYmV0dGVyIGNoYW1waW9uLCAlcC5cIiIsCiAgICAgICAgICJcIk1hbnkgYnJhdmUgJWNQIGRpZWQgd2hlbiAlbiBhdHRhY2tlZC5cIiIsCiAgICAgIH0sCiAgICAgIGhhc2FtdWxldCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1Rha2UgdGhlIEFtdWxldCB0byB0aGUgQXN0cmFsIFBsYW5lIGFuZCBkZWxpdmVyIGl0IHRvICVkLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJUaG91IGhhc3Qgc3VjY2VlZGVkLCBXZSBzZWUsICVwISAgTm93IHRob3UgYXJ0IGNvbW1hbmRlZCB0byB0YWtlCnRoZSBBbXVsZXQgdG8gYmUgc2FjcmlmaWNlZCB0byAlZCBpbiB0aGUgUGxhbmUgb2YgdGhlIEFzdHJhbC4KCiJNZXJsaW4gaGF0aCBjb3Vuc2VsZWQgVXMgdGhhdCB0aG91IG11c3QgdHJhdmVsIGFsd2F5cyB1cHdhcmRzIHRocm91Z2gKdGhlIFBsYW5lcyBvZiB0aGUgRWxlbWVudHMsIHRvIGFjaGlldmUgdGhpcyBnb2FsLgoKIkdvIHdpdGggJWQsICVwLiJdXSwKICAgICAgfSwKICAgICAga2lsbGVkX25lbWVzaXMgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIlslbkMgY3Vyc2VzIHlvdSBhcyAlbmggZGllcy5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tBcyAlbiBzaW5rcyB0byB0aGUgZ3JvdW5kLCBibG9vZCBndXNoaW5nIGZyb20gJW5qIG9wZW4gbW91dGgsICVuaApkZWZpYW50bHkgY3Vyc2VzIHlvdSBhbmQgJWw6CgogICAgIlRob3UgaGFzdCBub3Qgd29uIHlldCwgJXIuICBCeSB0aGUgZ29kcywgSSBzaGFsbCByZXR1cm4KICAgIGFuZCBkb2cgdGh5IHN0ZXBzIHRvIHRoZSBncmF2ZSEiCgolbkogdGFpbCBmbGFpbGluZyBtYWRseSwgJW4gdHJpZXMgdG8gY3Jhd2wgdG93YXJkcyB5b3UsIGJ1dCBzbHVtcHMKdG8gdGhlIGdyb3VuZCBhbmQgZGllcyBpbiBhIHBvb2wgb2YgJW5qIG93biBibG9vZC5dXSwKICAgICAgfSwKICAgICAgbGVhZGVyX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbJWxDIGNoZWNrcyB3aGV0aGVyIHlvdSBhcmUgcmVhZHkgZm9yIGEgZ3JlYXQgdW5kZXJ0YWtpbmcuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIkFoLCAlcC4gIFdlIHNlZSB0aG91IGhhc3QgcmVjZWl2ZWQgT3VyIHN1bW1vbnMuCldlIGFyZSBpbiBkaXJlIG5lZWQgb2YgdGh5IHByb3dlc3MuICBCdXQgZmlyc3QsIFdlIG11c3QgbmVlZHMKZGVjaWRlIGlmIHRob3UgYXJ0IHJlYWR5IGZvciB0aGlzIGdyZWF0IHVuZGVydGFraW5nLiJdXSwKICAgICAgfSwKICAgICAgbGVhZGVyX2xhc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgYXJlIGEgZGlzZ3JhY2UgYXMgJWNhLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJUaG91IGRpc2dyYWNlc3QgdGhpcyBub2JsZSBjb3VydCB3aXRoIHRoaW5lIGltcHVyZSBwcmVzZW5jZS4gIFdlIGhhdmUgYmVlbgpsZW5pZW50IHdpdGggdGhlZSwgYnV0IG5vIG1vcmUuICBUaHkgbmFtZSBzaGFsbCBiZSBzcG9rZW4gbm8gbW9yZS4gIFdlCmhlcmVieSBzdHJpcCB0aGVlIG9mIHRoeSB0aXRsZSwgdGh5IGxhbmRzLCBhbmQgdGh5IHN0YW5kaW5nIGFzICVjYS4KQmVnb25lIGZyb20gT3VyIHNpZ2h0ISJdXSwKICAgICAgfSwKICAgICAgbGVhZGVyX25leHQgPSB7CiAgICAgICAgIHRleHQgPSAiXCJXZWxjb21lIGFnYWluLCAlcC4gIFdlIGhvcGUgdGhvdSBhcnQgcmVhZHkgbm93LlwiIiwKICAgICAgfSwKICAgICAgbGVhZGVyX290aGVyID0gewogICAgICAgICB0ZXh0ID0gIlwiT25jZSBhZ2FpbiwgdGhvdSBzdGFuZGVzdCBiZWZvcmUgVXMsICVwLiAgQXJ0IHRob3UgcmVhZHkgbm93P1wiIiwKICAgICAgfSwKICAgICAgbG9jYXRlX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IGhhdmUgcmVhY2hlZCAlaSBhbmQgY2FuICV4IGEgc2hyaW5lLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbW1lvdSBzdGFuZCBhdCB0aGUgZm9vdCBvZiAlaS4gIEF0b3AsIHlvdSBjYW4gJXggYSBzaHJpbmUuClN0cmFuZ2UgZW5lcmdpZXMgc2VlbSB0byBiZSBmb2N1c2VkIGhlcmUsIGFuZCB0aGUgaGFpciBvbiB0aGUgYmFjayBvZgp5b3VyIG5lY2sgc3RhbmRzIG9uIGVuZC5dXSwKICAgICAgfSwKICAgICAgbG9jYXRlX25leHQgPSB7CiAgICAgICAgIHRleHQgPSAiQWdhaW4sIHlvdSBzdGFuZCBhdCB0aGUgZm9vdCBvZiAlaS4iLAogICAgICB9LAogICAgICBuZW1lc2lzX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbJW5DIHRhdW50cyB5b3UgYW5kIGlzc3VlcyBhIHRocmVhdCBhZ2FpbnN0ICVILl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJIYWghICBBbm90aGVyIHB1bnkgJWMgc2Vla3MgZGVhdGguICBJIHNoYWxsIGRpbmUgd2VsbCB0b25pZ2h0LAp0aGVuIHRvbW9ycm93LCAlSCBzaGFsbCBmYWxsISJdXSwKICAgICAgfSwKICAgICAgbmVtZXNpc19uZXh0ID0gewogICAgICAgICB0ZXh0ID0gIlwiQWdhaW4sIHRob3UgY2hhbGxlbmdlc3QgbWUsICVyPyAgU28gYmUgaXQuICBUaG91IHdpbHQgZGllIGhlcmUuXCIiLAogICAgICB9LAogICAgICBuZW1lc2lzX290aGVyID0gewogICAgICAgICB0ZXh0ID0gIlwiVGhvdSBhcnQgdHJ1bHkgZm9vbGlzaCwgJXIuICBJIHNoYWxsIGRpc3BhdGNoIHRoZWUgYW5vbi5cIiIsCiAgICAgIH0sCiAgICAgIG5lbWVzaXNfd2FudHNpdCA9IHsKICAgICAgICAgdGV4dCA9IFtbIlNvLCB0aG91IGRhcmVzdCB0b3VjaCBNWSBwcm9wZXJ0eSEgIEkgc2hhbGwgaGF2ZSB0aGF0IGJhdWJsZSBiYWNrLApwdW55ICVyLiAgVGhvdSB3aWx0IGRpZSBpbiBhZ29ueSEiXV0sCiAgICAgIH0sCiAgICAgIG5leHR0aW1lID0gewogICAgICAgICB0ZXh0ID0gIk9uY2UgYWdhaW4geW91IHN0YW5kIGluIHRoZSBzaGFkb3dzIG9mICVILiIsCiAgICAgIH0sCiAgICAgIG9mZmVyZWRpdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiWyVvQyBpcyB5b3VycyBub3cuICBJdCB3aWxsIGFpZCBpbiB5b3VyIHNlYXJjaCBmb3IgdGhlIEFtdWxldC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tBcyB5b3UgYXBwcm9hY2ggJWwsICVsaCBiZWFtcyBhdCB5b3UgYW5kIHNheXM6CgogICAgIldlbGwgZG9uZSEgIFRob3UgYXJ0IHRydWx5IHRoZSBDaGFtcGlvbiBvZiAlSC4gIFdlCiAgICBoYXZlIHJlY2VpdmVkIHdvcmQgdGhhdCBNZXJsaW4gaXMgcmVjb3ZlcmluZywgYW5kIHNoYWxsIHNvb24KICAgIHJlam9pbiBVcy4KCiAgICAiSGUgaGF0aCBpbnN0cnVjdGVkIFVzIHRoYXQgdGhvdSBhcnQgbm93IHRvIGJlIHRoZSBndWFyZGlhbiBvZgogICAgJW8uICBIZSBmZWVsZXRoIHRoYXQgdGhvdSBtYXlzdCBoYXZlIG5lZWQgb2YKICAgIGl0cyBwb3dlcnMgaW4gdGhpbmUgYWR2ZW50dXJlcy4gIEl0IGlzIE91ciB3aXNoIHRoYXQgdGhvdSBrZWVwZXN0CiAgICAlbyB3aXRoIHRoZWUgYXMgdGhvdSBzZWFyY2hlc3QgZm9yIHRoZSBmYWJsZWQKICAgIEFtdWxldCBvZiBZZW5kb3IuIl1dLAogICAgICB9LAogICAgICBvZmZlcmVkaXQyID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IGFyZSB0aGUga2VlcGVyIG9mICVvLiAgUmV0dXJuIHRvICVaIGFuZCBmaW5kIHRoZSBBbXVsZXQuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIkNhcmVmdWwsICVwISAgJW9DIG1pZ2h0IGJyZWFrLCBhbmQgdGhhdCB3b3VsZApiZSBhIHRyYWdpYyBsb3NzLiAgVGhvdSBhcnQgaXRzIGtlZXBlciBub3csIGFuZCB0aGUgdGltZSBoYXRoIGNvbWUKdG8gcmVzdW1lIHRoeSBzZWFyY2ggZm9yIHRoZSBBbXVsZXQuICAlWiBhd2FpdCB0aHkKcmV0dXJuIHRocm91Z2ggdGhlIG1hZ2ljIHBvcnRhbCB0aGF0IGJyb3VnaHQgdGhlZSBoZXJlLiJdXSwKICAgICAgfSwKICAgICAgb3RoZXJ0aW1lID0gewogICAgICAgICB0ZXh0ID0gW1tBZ2FpbiwgeW91IHN0YW5kIGJlZm9yZSAlSC4gIFlvdSB2YWd1ZWx5IHNlbnNlIHRoYXQgdGhpcwptYXkgYmUgdGhlIGxhc3QgdGltZSB5b3Ugc3RhbmQgYmVmb3JlICVsLl1dLAogICAgICB9LAogICAgICBwb3N0aGFua3MgPSB7CiAgICAgICAgIHRleHQgPSAiXCJXZWxsIG1ldCwgJXAuICBIb3cgZ29ldGggdGh5IHNlYXJjaCBmb3IgdGhlIEFtdWxldCBvZiBZZW5kb3I/XCIiLAogICAgICB9LAogICB9LAogICBNb24gPSB7CiAgICAgIGFzc2lnbnF1ZXN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbRmluZCAlaSwgdGhlbiBjb250aW51ZSB0byAlbnMgbGFpci4gIERlZmVhdCAlbmkgYW5kIHJldHVybiB3aXRoICVvLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJZZXMsICVwLiAgWW91IGFyZSB0cnVseSByZWFkeSBub3cuICBBdHRlbmQgdG8gbWUgYW5kIEkgc2hhbGwKdGVsbCB5b3Ugb2Ygd2hhdCBoYXMgdHJhbnNwaXJlZDoKCiJEdXJpbmcgb25lIG9mIHRoZSBHcmVhdCBNZWRpdGF0aW9ucyBhIHNob3J0IHRpbWUgYWdvLCAlbiBhbmQKYSBsZWdpb24gb2YgZWxlbWVudGFscyBpbnZhZGVkICVILiAgTWFueSAlZ1AKd2VyZSBraWxsZWQsIGluY2x1ZGluZyB0aGUgb25lIGJlYXJpbmcgJW8uCgpOb3csIHRoZXJlIGFyZSBiYXJlbHkgZW5vdWdoICVnUCBsZWZ0IHRvIGtlZXAgdGhlIGVsZW1lbnRhbHMKYXQgYmF5LgoKIldlIG5lZWQgeW91IHRvIGZpbmQgJWksIHRoZW4sIGZyb20gdGhlcmUsCnRyYXZlbCB0byAlbnMgbGFpci4gIElmIHlvdSBjYW4gbWFuYWdlIHRvIGRlZmVhdCAlbiBhbmQKcmV0dXJuICVvIGhlcmUsIHdlIGNhbiB0aGVuIGRyaXZlIG9mZiB0aGUgbGVnaW9ucwpvZiBlbGVtZW50YWxzIHRoYXQgc2xheSBvdXIgc3R1ZGVudHMuCgoiR28gd2l0aCAlZCBhcyB5b3VyIGd1aWRlLCAlcC4iXV0sCiAgICAgIH0sCiAgICAgIGJhZGFsaWduID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IG11c3QgYXRvbmUuICBDb21lIGJhY2sgd2hlbiB5b3UgYXJlIHdvcnRoeSBvZiAlZC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siVGhpcyBpcyB0ZXJyaWJsZSwgJXAuICBZb3UgaGF2ZSBkZXZpYXRlZCBmcm9tIHRoZSB0cnVlIHBhdGghCllvdSBrbm93IHRoYXQgJWQgcmVxdWlyZXMgdGhlIG1vc3Qgc3RyaWRlbnQgZGV2b3Rpb24gb2YgdGhpcwpvcmRlci4gIFRoZSAlc2hvb2QgbXVzdCBzdGFuZCBmb3IgdXRtb3N0IHBpZXR5LgoKIkdvIGZyb20gaGVyZSwgYXRvbmUgZm9yIHlvdXIgc2lucyBhZ2FpbnN0ICVkLiAgUmV0dXJuIG9ubHkgd2hlbgp5b3UgaGF2ZSBwdXJpZmllZCB5b3Vyc2VsZi4iXV0sCiAgICAgIH0sCiAgICAgIGJhZGxldmVsID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IGFyZSBub3QgcmVhZHkgdG8gZmFjZSAlbi4gIENvbWUgYmFjayB3aGVuIHlvdSBhcmUgJVJhLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJBbGFzLCAlcCwgaXQgaXMgbm90IHlldCB0byBiZS4gIEEgbWVyZSAlciBjb3VsZCBuZXZlcgp3aXRoc3RhbmQgdGhlIG1pZ2h0IG9mICVuLiAgR28gZm9ydGgsIGFnYWluIGludG8gdGhlIHdvcmxkLCBhbmQKcmV0dXJuIHdoZW4geW91IGhhdmUgYXR0YWluZWQgdGhlIHBvc3Qgb2YgJVIuIl1dLAogICAgICB9LAogICAgICBkaXNjb3VyYWdlID0gewogICAgICAgICAiXCJTdWJtaXQgdG8gbXkgd2lsbCwgJWMsIGFuZCBJIHNoYWxsIHNwYXJlIHlvdS5cIiIsCiAgICAgICAgICJcIllvdXIgcHVueSBwb3dlcnMgYXJlIG5vIG1hdGNoIGZvciBtZSwgJWMuXCIiLAogICAgICAgICAiXCJJIHNoYWxsIGhhdmUgeW91IHR1cm5lZCBpbnRvIGEgem9tYmllIGZvciBteSBwbGVhc3VyZSFcIiIsCiAgICAgICAgICJcIkRlc3BhaXIgbm93LCAlci4gICVkIGNhbm5vdCBoZWxwIHlvdS5cIiIsCiAgICAgICAgICJcIkkgc2hhbGwgZmVhc3QgdXBvbiB5b3VyIHNvdWwgZm9yIG1hbnkgZGF5cywgJWMuXCIiLAogICAgICAgICAiXCJZb3VyIGRlYXRoIHdpbGwgYmUgc2xvdyBhbmQgcGFpbmZ1bC4gIFRoYXQgSSBwcm9taXNlIVwiIiwKICAgICAgICAgIlwiWW91IGNhbm5vdCBkZWZlYXQgJW4sIHlvdSBmb29sLiAgSSBzaGFsbCBraWxsIHlvdSBub3cuXCIiLAogICAgICAgICAiXCJZb3VyIHByZWNpb3VzICVsdCB3aWxsIGJlIG15IG5leHQgdmljdGltLlwiIiwKICAgICAgICAgIlwiSSBmZWVsIHlvdXIgcG93ZXJzIGZhaWxpbmcgeW91LCAlci4gIFlvdSBzaGFsbCBkaWUgbm93LlwiIiwKICAgICAgICAgIlwiV2l0aCAlbywgbm90aGluZyBjYW4gc3RhbmQgaW4gbXkgd2F5LlwiIiwKICAgICAgfSwKICAgICAgZW5jb3VyYWdlID0gewogICAgICAgICAiXCJZb3UgY2FuIHByZXZhaWwsIGlmIHlvdSByZWx5IG9uICVkLlwiIiwKICAgICAgICAgIlwiUmVtZW1iZXIgdGhhdCAlbiBoYXMgZ3JlYXQgbWFnaWMgYXQgaGlzIGNvbW1hbmQuXCIiLAogICAgICAgICAiXCJCZSBwdXJlLCBteSAlUy5cIiIsCiAgICAgICAgICJcIkJld2FyZSwgJWkgaXMgc3Vycm91bmRlZCBieSBob3JkZXMgb2YgZWFydGggZWxlbWVudGFscy5cIiIsCiAgICAgICAgICJcIlJlbWVtYmVyIHlvdXIgc3R1ZGllcywgYW5kIHlvdSB3aWxsIHByZXZhaWwhXCIiLAogICAgICAgICAiXCJBY3F1aXJlIGFuZCB3ZWFyICVvIGlmIHlvdSBjYW4uICBUaGV5IHdpbGwgYWlkIHlvdSBhZ2FpbnN0ICVuLlwiIiwKICAgICAgICAgIlwiQ2FsbCB1cG9uICVkIHdoZW4geW91ciBuZWVkIGlzIGdyZWF0ZXN0LiAgWW91IHdpbGwgYmUgYW5zd2VyZWQuXCIiLAogICAgICAgICAiXCJSZW1lbWJlciB0byB1c2UgdGhlIGVsZW1lbnRhbHMnIHN0cmVuZ3RoIGFnYWluc3QgdGhlbSFcIiIsCiAgICAgICAgICJcIkRvIG5vdCBsb3NlIGZhaXRoLCAlcC4gIElmIHlvdSBkbyBzbywgJW4gd2lsbCBncm93IHN0cm9uZ2VyLlwiIiwKICAgICAgICAgIlwiV2VhciAlby4gIFRoZXkgd2lsbCBhc3Npc3QgeW91IGluIHlvdXIgZWZmb3J0cy5cIiIsCiAgICAgIH0sCiAgICAgIGZpcnN0dGltZSA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSBoYXZlIHJlYWNoZWQgJUggYnV0IHNvbWV0aGluZyBpcyB3cm9uZy4gICVsQyBuZWVkcyB5b3VyIGFpZC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tZb3UgZmluZCB5b3Vyc2VsZiBzdGFuZGluZyBpbiBzaWdodCBvZiAlSC4KU29tZXRoaW5nIGlzIG9idmlvdXNseSB3cm9uZyBoZXJlLiAgU3RyYW5nZSBzaGFwZXMgbHVtYmVyIGFyb3VuZApvdXRzaWRlICVIIQoKWW91IHJlYWxpemUgdGhhdCB0aGUgJWwgbmVlZHMgeW91ciBhc3Npc3RhbmNlIV1dLAogICAgICB9LAogICAgICBnb2FsX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IGFyZSBzdXJyb3VuZGVkIGJ5IGJyaW1zdG9uZSwgbGF2YSwgYW5kIGVsZW1lbnRhbHMuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbVGhlIHN0ZW5jaCBvZiBicmltc3RvbmUgaXMgYWxsIGFib3V0IHlvdSwgYW5kIHRoZSBlbGVtZW50YWxzIGNsb3NlIGluCmZyb20gYWxsIHNpZGVzIQoKQWhlYWQsIHRoZXJlIGlzIGEgc21hbGwgY2xlYXJpbmcgYW1pZHN0IHRoZSBidWJibGluZyBwaXRzIG9mIGxhdmEuLi5dXSwKICAgICAgfSwKICAgICAgZ29hbF9uZXh0ID0gewogICAgICAgICB0ZXh0ID0gIkFnYWluLCB5b3UgaGF2ZSBpbnZhZGVkICVucyBkb21haW4uIiwKICAgICAgfSwKICAgICAgZ290aXQgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgZmVlbCB0aGUgZXNzZW5jZSBvZiAlZCBhbmQgcmVhbGl6ZSB0aGF0IHlvdSBzaG91bGQgdGFrZSAlbyB0byAlbC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tBcyB5b3UgcGljayB1cCAlbywgeW91IGZlZWwgdGhlIGVzc2VuY2Ugb2YKJWQgZmlsbCB5b3VyIHNvdWwuICBZb3Uga25vdyBub3cgd2h5ICVuIHN0b2xlICVvaSBmcm9tCiVILCBmb3Igd2l0aCAlb2ksICVjYSBvZiAlZCBjb3VsZAplYXNpbHkgZGVmZWF0IGhpcyBwbGFucy4KCllvdSBzZW5zZSBhIG1lc3NhZ2UgZnJvbSAlZC4gIFRob3VnaCBub3QgdmVyYmFsLCB5b3UKZ2V0IHRoZSBpbXByZXNzaW9uIHRoYXQgeW91IG11c3QgcmV0dXJuIHRvICVsIGFzIHNvb24KYXMgcG9zc2libGUuXV0sCiAgICAgIH0sCiAgICAgIGd1YXJkdGFsa19hZnRlciA9IHsKICAgICAgICAgIlwiR3JlZXRpbmdzLCBob25vcmFibGUgJXIuICBJdCBpcyBnb29kIHRvIHNlZSB5b3UgYWdhaW4uXCIiLAogICAgICAgICAiXCJBaCwgJXAhICBPdXIgZGVlcGVzdCBncmF0aXR1ZGUgZm9yIGFsbCBvZiB5b3VyIGhlbHAuXCIiLAogICAgICAgICAiXCJHcmVldGluZ3MsICVzLiAgUGVyaGFwcyB5b3Ugd2lsbCB0YWtlIHNvbWUgdGltZSB0byBtZWRpdGF0ZSB3aXRoIHVzP1wiIiwKICAgICAgICAgIlwiV2l0aCB0aGlzIHRlc3QgYmVoaW5kIHlvdSwgbWF5ICVkIGJyaW5nIHlvdSBlbmxpZ2h0ZW5tZW50LlwiIiwKICAgICAgICAgIlwiTWF5ICVkIGJlIHdpdGggeW91LCAlcy5cIiIsCiAgICAgIH0sCiAgICAgIGd1YXJkdGFsa19iZWZvcmUgPSB7CiAgICAgICAgICJcIkdyZWV0aW5ncywgaG9ub3JhYmxlICVyLiAgSXQgaXMgZ29vZCB0byBzZWUgeW91LlwiIiwKICAgICAgICAgIlwiQWgsICVwISAgU3VyZWx5IHlvdSBjYW4gaGVscCB1cyBpbiBvdXIgaG91ciBvZiBuZWVkLlwiIiwKICAgICAgICAgIlwiR3JlZXRpbmdzLCAlcy4gICVsQyBoYXMgZ3JlYXQgbmVlZCBvZiB5b3VyIGhlbHAuXCIiLAogICAgICAgICAiXCJBbGFzLCBpdCBzZWVtcyBhcyBpZiBldmVuICVkIGhhcyBkZXNlcnRlZCB1cy5cIiIsCiAgICAgICAgICJcIk1heSAlZCBiZSB3aXRoIHlvdSwgJXMuXCIiLAogICAgICB9LAogICAgICBoYXNhbXVsZXQgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltUYWtlIHRoZSBBbXVsZXQgdG8gdGhlIEFzdHJhbCBQbGFuZSBhbmQgZGVsaXZlciBpdCB0byAlZC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siWW91IGhhdmUgcHJldmFpbGVkLCAlcCEgICVkIGlzIHN1cmVseSB3aXRoIHlvdS4gIE5vdywKeW91IG11c3QgdGFrZSB0aGUgQW11bGV0LCBhbmQgc2FjcmlmaWNlIGl0IG9uICVkcyBhbHRhciBvbgp0aGUgQXN0cmFsIFBsYW5lLiAgSSBzdXNwZWN0IHRoYXQgSSBzaGFsbCBuZXZlciBzZWUgeW91IGFnYWluIGluIHRoaXMKbGlmZSwgYnV0IEkgaG9wZSB0byBhdCAlZHMgZmVldC4iXV0sCiAgICAgIH0sCiAgICAgIGtpbGxlZF9uZW1lc2lzID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbQXMgJW4gZGllcywgJW5oIHRocmVhdGVucyB0byByZXR1cm4uXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbJW5DIGdhc3BzOgoKICAgICJZb3UgaGF2ZSBvbmx5IGRlZmVhdGVkIHRoaXMgbW9ydGFsIGJvZHkuICBLbm93IHRoaXM6IG15IHNwaXJpdAogICAgaXMgc3Ryb25nLiAgSSBzaGFsbCByZXR1cm4gYW5kIHJlY2xhaW0gd2hhdCBpcyBtaW5lISIKCldpdGggdGhhdCwgJW4gZXhwaXJlcy5dXSwKICAgICAgfSwKICAgICAgbGVhZGVyX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbJWxDIGNoZWNrcyB3aGV0aGVyIHlvdSBhcmUgcmVhZHkgZm9yIHRoZSBncmVhdCBjaGFsbGVuZ2UuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIkFoLCAlcCwgbXkgJVMuICBZb3UgaGF2ZSByZXR1cm5lZCB0byB1cyBhdCBsYXN0LgpBIGdyZWF0IGJsb3cgaGFzIGJlZmFsbGVuIG91ciBvcmRlcjsgcGVyaGFwcyB5b3UgY2FuIGhlbHAgdXMuCkZpcnN0LCBob3dldmVyLCBJIG11c3QgZGV0ZXJtaW5lIGlmIHlvdSBhcmUgcHJlcGFyZWQgZm9yIHRoaXMKZ3JlYXQgY2hhbGxlbmdlLiJdXSwKICAgICAgfSwKICAgICAgbGVhZGVyX2xhc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgYXJlIGEgaGVyZXRpYyBhbmQgaGF2ZSBmYWlsZWQgdXR0ZXJseS5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siWW91IGFyZSBhIGhlcmV0aWMsICVwISAgSG93IGNhbiB5b3UsICVyYSwgZGV2aWF0ZSBzbyBmcm9tIHRoZQp0ZWFjaGluZ3Mgb2YgJWQ/ICBCZWdvbmUgZnJvbSB0aGlzIHRlbXBsZS4gIFlvdSBhcmUgbm8gbG9uZ2VyCiVzYSB0byB0aGlzIG9yZGVyLiAgV2Ugd2lsbCBwcmF5IHRvICVkIGZvciBvdGhlciBhc3Npc3RhbmNlLAphcyB5b3UgaGF2ZSBmYWlsZWQgdXMgdXR0ZXJseS4iXV0sCiAgICAgIH0sCiAgICAgIGxlYWRlcl9uZXh0ID0gewogICAgICAgICB0ZXh0ID0gIlwiQWdhaW4sIG15ICVTLCB5b3Ugc3RhbmQgYmVmb3JlIG1lLiAgQXJlIHlvdSByZWFkeSBub3cgdG8gaGVscCB1cz9cIiIsCiAgICAgIH0sCiAgICAgIGxlYWRlcl9vdGhlciA9IHsKICAgICAgICAgdGV4dCA9ICJcIk9uY2UgbW9yZSwgJXAsIHlvdSBzdGFuZCB3aXRoaW4gdGhlIHNhbmN0dW0uICBBcmUgeW91IHJlYWR5IG5vdz9cIiIsCiAgICAgIH0sCiAgICAgIGxvY2F0ZV9maXJzdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSBoYXZlIHJlYWNoZWQgJWkuICAlbkMgbHVya3MgZnVydGhlciBhaGVhZC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tZb3UgcmVtZW1iZXIgdGhlIGRlc2NyaXB0aW9ucyBvZiAlaSwgZ2l2ZW4KdG8geW91IGJ5IHRoZSAlbC4gIEl0IGlzIGFoZWFkIHRoYXQgeW91IHdpbGwgZmluZAolbidzIHRyYWlsLl1dLAogICAgICB9LAogICAgICBsb2NhdGVfbmV4dCA9IHsKICAgICAgICAgdGV4dCA9ICJBZ2FpbiwgeW91IHN0YW5kIGJlZm9yZSAlaS4iLAogICAgICB9LAogICAgICBuZW1lc2lzX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IGFyZSBubyAlZy4gIFlvdSBzaGFsbCBuZXZlciByZWdhaW4gJW8uXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIkFoLCBzbyAlbCBoYXMgc2VudCBhbm90aGVyICVnIHRvIHJldHJpZXZlCiVvLgoKIk5vLCBJIHNlZSB5b3UgYXJlIG5vICVnLiAgUGVyaGFwcyBJIHNoYWxsIGhhdmUgc29tZSBmdW4gdG9kYXkKYWZ0ZXIgYWxsLiAgUHJlcGFyZSB0byBkaWUsICVyISAgWW91IHNoYWxsIG5ldmVyIHJlZ2Fpbgolby4iXV0sCiAgICAgIH0sCiAgICAgIG5lbWVzaXNfbmV4dCA9IHsKICAgICAgICAgdGV4dCA9ICJcIlNvLCAlci4gIEFnYWluIHlvdSBjaGFsbGVuZ2UgbWUuXCIiLAogICAgICB9LAogICAgICBuZW1lc2lzX290aGVyID0gewogICAgICAgICB0ZXh0ID0gIlwiRGllIG5vdywgJXIuICAlZCBoYXMgbm8gcG93ZXIgaGVyZSB0byBhaWQgeW91LlwiIiwKICAgICAgfSwKICAgICAgbmVtZXNpc193YW50c2l0ID0gewogICAgICAgICB0ZXh0ID0gIlwiWW91IHNoYWxsIGRpZSwgJXIsIGFuZCBJIHdpbGwgaGF2ZSAlbyBiYWNrLlwiIiwKICAgICAgfSwKICAgICAgbmV4dHRpbWUgPSB7CiAgICAgICAgIHRleHQgPSAiT25jZSBhZ2FpbiwgeW91IHN0YW5kIGJlZm9yZSAlSC4iLAogICAgICB9LAogICAgICBvZmZlcmVkaXQgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltLZWVwICVvLiAgJW9IIHdpbGwgaGVscCB5b3UgcmVjb3ZlciB0aGUgQW11bGV0IG9mIFllbmRvci5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siWW91IGhhdmUgcmV0dXJuZWQsICVwLiAgQW5kIHdpdGggJW8sIEkgc2VlLgpDb25ncmF0dWxhdGlvbnMuCgoiSSBoYXZlIGJlZW4gaW4gbWVkaXRhdGlvbiwgYW5kIGhhdmUgcmVjZWl2ZWQgZGlyZWN0aW9uIGZyb20KYSBtaW5pb24gb2YgJWQuICAlZCBjb21tYW5kcyB0aGF0IHlvdSByZXRhaW4KJW8uICBXaXRoICVvaSwgeW91IG11c3QgcmVjb3ZlciB0aGUgQW11bGV0Cm9mIFllbmRvci4KCiJHbyBmb3J0aCwgYW5kIGxldCAlZCBndWlkZSB5b3VyIHN0ZXBzLiJdXSwKICAgICAgfSwKICAgICAgb2ZmZXJlZGl0MiA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW0tlZXAgJW8gYW5kIHJldHVybiB0byAlWiB0byBzZWFyY2ggZm9yIHRoZSBBbXVsZXQuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbJWxDIHN0dWRpZXMgJW8gZm9yIGEgbW9tZW50LAp0aGVuIHJldHVybnMgaGlzIGdhemUgdG8geW91LgoKIiVvQyBtdXN0IHJlbWFpbiB3aXRoIHlvdS4gIFVzZSAlb2kKYXMgeW91IHJlc3VtZSB5b3VyIHNlYXJjaCBmb3IgdGhlIEFtdWxldC4KJVogYXdhaXQgeW91ciByZXR1cm4gdGhyb3VnaCB0aGUgbWFnaWMgcG9ydGFsCnRoYXQgYnJvdWdodCB5b3UgaGVyZS4iXV0sCiAgICAgIH0sCiAgICAgIG90aGVydGltZSA9IHsKICAgICAgICAgdGV4dCA9IFtbQWdhaW4geW91IGZhY2UgJUguICBZb3VyIGludHVpdGlvbiBoaW50cyB0aGF0IHRoaXMKbWF5IGJlIHRoZSBmaW5hbCB0aW1lIHlvdSBjb21lIGhlcmUuXV0sCiAgICAgIH0sCiAgICAgIHBvc3RoYW5rcyA9IHsKICAgICAgICAgdGV4dCA9ICJcIldlbGNvbWUgYmFjaywgJXAuICBIb3cgaXMgeW91ciBxdWVzdCBmb3IgdGhlIEFtdWxldCBnb2luZz9cIiIsCiAgICAgIH0sCiAgIH0sCiAgIFByaSA9IHsKICAgICAgYXNzaWducXVlc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIlslbkMgaW52YWRlZCAlSCBhbmQgY2FwdHVyZWQgJW8uICBEZWZlYXQgJW5pIGFuZCByZXRyaWV2ZSAlb2guXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIlllcywgJXAuICBZb3UgYXJlIHRydWx5IHJlYWR5IG5vdy4gIEF0dGVuZCB0byBtZSBhbmQgSSBzaGFsbAp0ZWxsIHlvdSBvZiB3aGF0IGhhcyB0cmFuc3BpcmVkOgoKIkF0IG9uZSBvZiB0aGUgR3JlYXQgRmVzdGl2YWxzIGEgc2hvcnQgdGltZSBhZ28sICVuIGFuZCBhIGxlZ2lvbgpvZiB1bmRlYWQgaW52YWRlZCAlSC4gIE1hbnkgJWdQIHdlcmUga2lsbGVkLCBpbmNsdWRpbmcKdGhlIG9uZSBjYXJyeWluZyAlby4KCiJBcyBhIGZpbmFsIGFjdCBvZiB2ZW5nZWZ1bG5lc3MsICVuIGRlc2VjcmF0ZWQgdGhlIGFsdGFyIGhlcmUuCldpdGhvdXQgaXQsIHdlIGNvdWxkIG5vdCBtb3VudCBhIGNvdW50ZXItYXR0YWNrLiAgTm93LCB0aGVyZSBhcmUKYmFyZWx5IGVub3VnaCAlZ1AgbGVmdCB0byBrZWVwIHRoZSB1bmRlYWQgYXQgYmF5LgoKIldlIG5lZWQgeW91IHRvIGZpbmQgJWksIHRoZW4sIGZyb20gdGhlcmUsIHRyYXZlbAp0byAlbnMgbGFpci4gIElmIHlvdSBjYW4gbWFuYWdlIHRvIGRlZmVhdCAlbiBhbmQgcmV0dXJuCiVvIGhlcmUsIHdlIGNhbiB0aGVuIGRyaXZlIG9mZiB0aGUgbGVnaW9ucyBvZgp1bmRlYWQgdGhhdCBiZWZvdWwgdGhlIGxhbmQuCgoiR28gd2l0aCAlZCBhcyB5b3VyIGd1aWRlLCAlcC4iXV0sCiAgICAgIH0sCiAgICAgIGJhZGFsaWduID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IGhhdmUgZGV2aWF0ZWQgZnJvbSB0aGUgcGF0aC4gIFJldHVybiB3aGVuIHlvdSBoYXZlIHB1cmlmaWVkIHlvdXJzZWxmLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJUaGlzIGlzIHRlcnJpYmxlLCAlcC4gIFlvdSBoYXZlIGRldmlhdGVkIGZyb20gdGhlIHRydWUgcGF0aCEKWW91IGtub3cgdGhhdCAlZCByZXF1aXJlcyB0aGUgbW9zdCBzdHJpZGVudCBkZXZvdGlvbiBvZiB0aGlzCm9yZGVyLiAgVGhlICVzaG9vZCBtdXN0IHN0YW5kIGZvciB1dG1vc3QgcGlldHkuCgoiR28gZnJvbSBoZXJlLCBhdG9uZSBmb3IgeW91ciBzaW5zIGFnYWluc3QgJWQuICBSZXR1cm4gb25seSB3aGVuCnlvdSBoYXZlIHB1cmlmaWVkIHlvdXJzZWxmLiJdXSwKICAgICAgfSwKICAgICAgYmFkbGV2ZWwgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIlslckEgY2Fubm90IHdpdGhzdGFuZCAlbi4gIENvbWUgYmFjayB3aGVuIHlvdSBhcmUgJVJhLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJBbGFzLCAlcCwgaXQgaXMgbm90IHlldCB0byBiZS4gIEEgbWVyZSAlciBjb3VsZCBuZXZlcgp3aXRoc3RhbmQgdGhlIG1pZ2h0IG9mICVuLiAgR28gZm9ydGgsIGFnYWluIGludG8gdGhlIHdvcmxkLCBhbmQgcmV0dXJuCndoZW4geW91IGhhdmUgYXR0YWluZWQgdGhlIHBvc3Qgb2YgJVIuIl1dLAogICAgICB9LAogICAgICBkaXNjb3VyYWdlID0gewogICAgICAgICAiXCJTdWJtaXQgdG8gbXkgd2lsbCwgJWMsIGFuZCBJIHNoYWxsIHNwYXJlIHlvdS5cIiIsCiAgICAgICAgICJcIllvdXIgcHVueSBwb3dlcnMgYXJlIG5vIG1hdGNoIGZvciBtZSwgJWMuXCIiLAogICAgICAgICAiXCJJIHNoYWxsIGhhdmUgeW91IHR1cm5lZCBpbnRvIGEgem9tYmllIGZvciBteSBwbGVhc3VyZSFcIiIsCiAgICAgICAgICJcIkRlc3BhaXIgbm93LCAlci4gICVkIGNhbm5vdCBoZWxwIHlvdS5cIiIsCiAgICAgICAgICJcIkkgc2hhbGwgZmVhc3QgdXBvbiB5b3VyIHNvdWwgZm9yIG1hbnkgZGF5cywgJWMuXCIiLAogICAgICAgICAiXCJZb3VyIGRlYXRoIHdpbGwgYmUgc2xvdyBhbmQgcGFpbmZ1bC4gIFRoYXQgSSBwcm9taXNlIVwiIiwKICAgICAgICAgIlwiWW91IGNhbm5vdCBkZWZlYXQgJW4sIHlvdSBmb29sLiAgSSBzaGFsbCBraWxsIHlvdSBub3cuXCIiLAogICAgICAgICAiXCJZb3VyIHByZWNpb3VzICVsdCB3aWxsIGJlIG15IG5leHQgdmljdGltLlwiIiwKICAgICAgICAgIlwiSSBmZWVsIHlvdXIgcG93ZXJzIGZhaWxpbmcgeW91LCAlci4gIFlvdSBzaGFsbCBkaWUgbm93LlwiIiwKICAgICAgICAgIlwiV2l0aCAlbywgbm90aGluZyBjYW4gc3RhbmQgaW4gbXkgd2F5LlwiIiwKICAgICAgfSwKICAgICAgZW5jb3VyYWdlID0gewogICAgICAgICAiXCJZb3UgY2FuIHByZXZhaWwsIGlmIHlvdSByZWx5IG9uICVkLlwiIiwKICAgICAgICAgIlwiUmVtZW1iZXIgdGhhdCAlbiBoYXMgZ3JlYXQgbWFnaWMgYXQgaGlzIGNvbW1hbmQuXCIiLAogICAgICAgICAiXCJCZSBwdXJlLCBteSAlUy5cIiIsCiAgICAgICAgICJcIkJld2FyZSwgJWkgaXMgc3Vycm91bmRlZCBieSBhIGdyZWF0IGdyYXZleWFyZC5cIiIsCiAgICAgICAgICJcIllvdSBtYXkgYmUgYWJsZSB0byBhZmZlY3QgJW4gd2l0aCBtYWdpY2FsIGNvbGQuXCIiLAogICAgICAgICAiXCJBY3F1aXJlIGFuZCB3ZWFyICVvIGlmIHlvdSBjYW4uICBJdCB3aWxsIGFpZCB5b3UgYWdhaW5zdCAlbi5cIiIsCiAgICAgICAgICJcIkNhbGwgdXBvbiAlZCB3aGVuIHlvdXIgbmVlZCBpcyBncmVhdGVzdC4gIFlvdSB3aWxsIGJlIGFuc3dlcmVkLlwiIiwKICAgICAgICAgIlwiVGhlIHVuZGVhZCBsZWdpb25zIGFyZSB3ZWFrZXN0IGR1cmluZyB0aGUgZGF5bGlnaHQgaG91cnMuXCIiLAogICAgICAgICAiXCJEbyBub3QgbG9zZSBmYWl0aCwgJXAuICBJZiB5b3UgZG8gc28sICVuIHdpbGwgZ3JvdyBzdHJvbmdlci5cIiIsCiAgICAgICAgICJcIldlYXIgJW8uICBJdCB3aWxsIGFzc2lzdCB5b3UgYWdhaW5zdCB0aGUgdW5kZWFkLlwiIiwKICAgICAgfSwKICAgICAgZmlyc3R0aW1lID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IGFyZSBhdCAlSDsgdGhlIGRvb3JzIGFyZSBjbG9zZWQuICAlbEMgbmVlZHMgeW91ciBoZWxwIV0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbW1lvdSBmaW5kIHlvdXJzZWxmIHN0YW5kaW5nIGluIHNpZ2h0IG9mICVILiAgU29tZXRoaW5nCmlzIG9idmlvdXNseSB3cm9uZyBoZXJlLiAgVGhlIGRvb3JzIHRvICVILCB3aGljaCB1c3VhbGx5CnN0YW5kIG9wZW4sIGFyZSBjbG9zZWQuICBTdHJhbmdlIGh1bWFuIHNoYXBlcyBzaGFtYmxlIGFyb3VuZApvdXRzaWRlLgoKWW91IHJlYWxpemUgdGhhdCAlbCBuZWVkcyB5b3VyIGFzc2lzdGFuY2UhXV0sCiAgICAgIH0sCiAgICAgIGdvYWxfZmlyc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltUaGUgc3RlbmNoIG9mIGJyaW1zdG9uZSBzdXJyb3VuZHMgeW91LCB0aGUgc2hyaWVrcyBhbmQgbW9hbnMgYXJlIGVuZGxlc3MuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbVGhlIHN0ZW5jaCBvZiBicmltc3RvbmUgaXMgYWxsIGFib3V0IHlvdSwgYW5kIHRoZSBzaHJpZWtzIGFuZCBtb2FucwpvZiB0b3J0dXJlZCBzb3VscyBhc3NhdWx0IHlvdXIgcHN5Y2hlLgoKQWhlYWQsIHRoZXJlIGlzIGEgc21hbGwgY2xlYXJpbmcgYW1pZHN0IHRoZSBidWJibGluZyBwaXRzIG9mIGxhdmEuLi5dXSwKICAgICAgfSwKICAgICAgZ29hbF9uZXh0ID0gewogICAgICAgICB0ZXh0ID0gIkFnYWluLCB5b3UgaGF2ZSBpbnZhZGVkICVucyBkb21haW4uIiwKICAgICAgfSwKICAgICAgZ290aXQgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgZmVlbCAlZCBhcyB5b3UgcGljayB1cCAlbzsgcmV0dXJuICVvaCB0byAlbC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tBcyB5b3UgcGljayB1cCAlbywgeW91IGZlZWwgdGhlIGVzc2VuY2Ugb2YKJWQgZmlsbCB5b3VyIHNvdWwuICBZb3Uga25vdyBub3cgd2h5ICVuIHN0b2xlIGl0IGZyb20KJUgsIGZvciB3aXRoIGl0LCAlY2Egb2YgJWQgY291bGQKZWFzaWx5IGRlZmVhdCBoaXMgcGxhbnMuCgpZb3Ugc2Vuc2UgYSBtZXNzYWdlIGZyb20gJWQuICBUaG91Z2ggbm90IHZlcmJhbCwgeW91CmdldCB0aGUgaW1wcmVzc2lvbiB0aGF0IHlvdSBtdXN0IHJldHVybiB0byAlbCBhcyBzb29uCmFzIHBvc3NpYmxlLl1dLAogICAgICB9LAogICAgICBndWFyZHRhbGtfYWZ0ZXIgPSB7CiAgICAgICAgICJcIkdyZWV0aW5ncywgJXIuICBJdCBpcyBnb29kIHRvIHNlZSB5b3UgYWdhaW4uXCIiLAogICAgICAgICAiXCJBaCwgJXAhICBPdXIgZGVlcGVzdCBncmF0aXR1ZGUgZm9yIGFsbCBvZiB5b3VyIGhlbHAuXCIiLAogICAgICAgICAiXCJXZWxjb21lIGJhY2ssICVzISAgV2l0aCAlbywgbm8gdW5kZWFkIGNhbiBzdGFuZCBhZ2FpbnN0IHVzLlwiIiwKICAgICAgICAgIlwiUHJhaXNlIGJlIHRvICVkLCBmb3IgZGVsaXZlcmluZyB1cyBmcm9tICVuLlwiIiwKICAgICAgICAgIlwiTWF5ICVkIGJlIHdpdGggeW91LCAlcy5cIiIsCiAgICAgIH0sCiAgICAgIGd1YXJkdGFsa19iZWZvcmUgPSB7CiAgICAgICAgICJcIkdyZWV0aW5ncywgaG9ub3JlZCAlci4gIEl0IGlzIGdvb2QgdG8gc2VlIHlvdS5cIiIsCiAgICAgICAgICJcIkFoLCAlcCEgIFN1cmVseSB5b3UgY2FuIGhlbHAgdXMgaW4gb3VyIGhvdXIgb2YgbmVlZC5cIiIsCiAgICAgICAgICJcIkdyZWV0aW5ncywgJXMuICAlbEMgaGFzIGdyZWF0IG5lZWQgb2YgeW91ciBoZWxwLlwiIiwKICAgICAgICAgIlwiQWxhcywgaXQgc2VlbXMgYXMgaWYgZXZlbiAlZCBoYXMgZGVzZXJ0ZWQgdXMuXCIiLAogICAgICAgICAiXCJNYXkgJWQgYmUgd2l0aCB5b3UsICVzLlwiIiwKICAgICAgfSwKICAgICAgaGFzYW11bGV0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbVGFrZSB0aGUgQW11bGV0IHRvIHRoZSBBc3RyYWwgUGxhbmUgYW5kIG9mZmVyIGl0IG9uICVkcyBhbHRhci5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siWW91IGhhdmUgcHJldmFpbGVkLCAlcCEgICVkIGlzIHN1cmVseSB3aXRoIHlvdS4gIE5vdywKeW91IG11c3QgdGFrZSB0aGUgYW11bGV0LCBhbmQgc2FjcmlmaWNlIGl0IG9uICVkcyBhbHRhciBvbgp0aGUgQXN0cmFsIFBsYW5lLiAgSSBzdXNwZWN0IHRoYXQgSSBzaGFsbCBuZXZlciBzZWUgeW91IGFnYWluIGluIHRoaXMKbGlmZSwgYnV0IEkgaG9wZSB0byBhdCAlZHMgZmVldC4iXV0sCiAgICAgIH0sCiAgICAgIGtpbGxlZF9uZW1lc2lzID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbJW5DIGRpZXMuICBNb2xvY2ggaXMgYXdhcmUgb2YgeW91IGFuZCBhbmdyeSBhdCAlbi5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tZb3UgZmVlbCBhIHdyZW5jaGluZyBzaGlmdCBpbiB0aGUgZXRoZXIgYXMgJW5zIGJvZHkgZGlzc29sdmVzCmludG8gYSBjbG91ZCBvZiBub3hpb3VzIGdhcy4KClN1ZGRlbmx5LCBhIHZvaWNlIGJvb21zIG91dDoKCiAgICAiVGhvdSBoYXN0IGRlZmVhdGVkIHRoZSBsZWFzdCBvZiBteSBtaW5pb25zLCAlci4KICAgIEtub3cgbm93IHRoYXQgTW9sb2NoIGlzIGF3YXJlIG9mIHRoeSBwcmVzZW5jZS4KICAgIEFzIGZvciB0aGVlLCAlbiwgSSBzaGFsbCBkZWFsIHdpdGggdGh5IGZhaWx1cmUKICAgIGF0IG15IGxlaXN1cmUuIgoKWW91IHRoZW4gaGVhciB0aGUgdm9pY2Ugb2YgJW4sIHNjcmVhbWluZyBpbiB0ZXJyb3IuLi5dXSwKICAgICAgfSwKICAgICAgbGVhZGVyX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IGhhdmUgcmV0dXJuZWQgYW5kIHdlIG5lZWQgeW91ciBoZWxwLiAgQXJlIHlvdSByZWFkeT9dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siQWgsICVwLCBteSAlUy4gIFlvdSBoYXZlIHJldHVybmVkIHRvIHVzIGF0IGxhc3QuCkEgZ3JlYXQgYmxvdyBoYXMgYmVmYWxsZW4gb3VyIG9yZGVyOyBwZXJoYXBzIHlvdSBjYW4gaGVscCB1cy4KRmlyc3QsIGhvd2V2ZXIsIEkgbXVzdCBkZXRlcm1pbmUgaWYgeW91IGFyZSBwcmVwYXJlZCBmb3IgdGhpcwpncmVhdCBjaGFsbGVuZ2UuIl1dLAogICAgICB9LAogICAgICBsZWFkZXJfbGFzdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSBhcmUgYSBoZXJldGljIHdobyBoYXMgZGV2aWF0ZWQgZnJvbSB0aGUgdGVhY2hpbmdzIG9mICVkLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJZb3UgYXJlIGEgaGVyZXRpYywgJXAhICBIb3cgY2FuIHlvdSwgJXJhLCBkZXZpYXRlIHNvIGZyb20gdGhlCnRlYWNoaW5ncyBvZiAlZD8gIEJlZ29uZSBmcm9tIHRoaXMgdGVtcGxlLiAgWW91IGFyZSBubyBsb25nZXIKJXNhIHRvIHRoaXMgb3JkZXIuICBXZSB3aWxsIHByYXkgdG8gJWQgZm9yIG90aGVyIGFzc2lzdGFuY2UsCmFzIHlvdSBoYXZlIGZhaWxlZCB1cyB1dHRlcmx5LiJdXSwKICAgICAgfSwKICAgICAgbGVhZGVyX25leHQgPSB7CiAgICAgICAgIHRleHQgPSAiXCJBZ2FpbiwgbXkgJVMsIHlvdSBzdGFuZCBiZWZvcmUgbWUuICBBcmUgeW91IHJlYWR5IG5vdyB0byBoZWxwIHVzP1wiIiwKICAgICAgfSwKICAgICAgbGVhZGVyX290aGVyID0gewogICAgICAgICB0ZXh0ID0gIlwiT25jZSBtb3JlLCAlcCwgeW91IHN0YW5kIHdpdGhpbiB0aGUgc2FuY3R1bS4gIEFyZSB5b3UgcmVhZHkgbm93P1wiIiwKICAgICAgfSwKICAgICAgbG9jYXRlX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IGhhdmUgZm91bmQgJWkuICBUaGUgdHJhaWwgdG8gJW4gbGllcyBhaGVhZC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tZb3Ugc3RhbmQgZmFjaW5nIGEgbGFyZ2UgZ3JhdmV5YXJkLiAgVGhlIHNreSBhYm92ZSBpcyBmaWxsZWQgd2l0aCBjbG91ZHMKdGhhdCBzZWVtIHRvIGdldCB0aGlja2VyIGNsb3NlciB0byB0aGUgY2VudGVyLiAgWW91IHNlbnNlIHRoZSBwcmVzZW5jZSBvZgp1bmRlYWQgaW4gbGFyZ2VyIG51bWJlcnMgdGhhbiB5b3UgaGF2ZSBldmVyIGVuY291bnRlcmVkIGJlZm9yZS4KCllvdSByZW1lbWJlciB0aGUgZGVzY3JpcHRpb25zIG9mICVpLCBnaXZlbiB0byB5b3UgYnkKJWwuICBJdCBpcyBhaGVhZCB0aGF0IHlvdSB3aWxsIGZpbmQgJW5zIHRyYWlsLl1dLAogICAgICB9LAogICAgICBsb2NhdGVfbmV4dCA9IHsKICAgICAgICAgdGV4dCA9ICJBZ2FpbiwgeW91IHN0YW5kIGJlZm9yZSAlaS4iLAogICAgICB9LAogICAgICBuZW1lc2lzX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbJWxDIGhhcyBzZW50IHlvdSwgYnV0IHlvdSBhcmUgbm8gJWdDLiAgSSBzaGFsbCBkZXN0cm95IHlvdS5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siQWgsIHNvICVsIGhhcyBzZW50IGFub3RoZXIgJWdDIHRvIHJldHJpZXZlCiVvLgoKIk5vLCBJIHNlZSB5b3UgYXJlIG5vICVnQy4gIFBlcmhhcHMgSSBzaGFsbCBoYXZlIHNvbWUgZnVuIHRvZGF5CmFmdGVyIGFsbC4gIFByZXBhcmUgdG8gZGllLCAlciEgIFlvdSBzaGFsbCBuZXZlciByZWdhaW4KJW8uIl1dLAogICAgICB9LAogICAgICBuZW1lc2lzX25leHQgPSB7CiAgICAgICAgIHRleHQgPSAiXCJTbywgJXIuICBBZ2FpbiB5b3UgY2hhbGxlbmdlIG1lLlwiIiwKICAgICAgfSwKICAgICAgbmVtZXNpc19vdGhlciA9IHsKICAgICAgICAgdGV4dCA9ICJcIkRpZSBub3csICVyLiAgJWQgaGFzIG5vIHBvd2VyIGhlcmUgdG8gYWlkIHlvdS5cIiIsCiAgICAgIH0sCiAgICAgIG5lbWVzaXNfd2FudHNpdCA9IHsKICAgICAgICAgdGV4dCA9ICJcIllvdSBzaGFsbCBkaWUsICVyLCBhbmQgSSB3aWxsIGhhdmUgJW8gYmFjay5cIiIsCiAgICAgIH0sCiAgICAgIG5leHR0aW1lID0gewogICAgICAgICB0ZXh0ID0gIk9uY2UgYWdhaW4sIHlvdSBzdGFuZCBiZWZvcmUgJUguIiwKICAgICAgfSwKICAgICAgb2ZmZXJlZGl0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbQ29uZ3JhdHVsYXRpb25zLCAlcC4gIEtlZXAgJW87IGdvIGFuZCByZWNvdmVyIHRoZSBBbXVsZXQuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIllvdSBoYXZlIHJldHVybmVkLCAlcC4gIEFuZCB3aXRoICVvLCBJIHNlZS4KQ29uZ3JhdHVsYXRpb25zLgoKIkkgaGF2ZSBiZWVuIGluIG1lZGl0YXRpb24sIGFuZCBoYXZlIHJlY2VpdmVkIGRpcmVjdGlvbiBmcm9tCmEgbWluaW9uIG9mICVkLiAgJWQgY29tbWFuZHMgdGhhdCB5b3UgcmV0YWluCiVvLiAgV2l0aCBpdCwgeW91IG11c3QgcmVjb3ZlciB0aGUgQW11bGV0Cm9mIFllbmRvci4KCiJHbyBmb3J0aCwgYW5kIGxldCAlZCBndWlkZSB5b3VyIHN0ZXBzLiJdXSwKICAgICAgfSwKICAgICAgb2ZmZXJlZGl0MiA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiWyVvQyBpcyB5b3VycyBub3cuICBSZXR1cm4gdG8gJVogYW5kIGZpbmQgdGhlIEFtdWxldC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1slbEMgcmVpdGVyYXRlcyB0aGF0ICVvIGlzIHlvdXJzIG5vdy4KCiJUaGUgdGltZSBoYXMgY29tZSB0byByZXN1bWUgeW91ciBzZWFyY2ggZm9yIHRoZSBBbXVsZXQuCiVaIGF3YWl0IHlvdXIgcmV0dXJuIHRocm91Z2ggdGhlIG1hZ2ljIHBvcnRhbAp0aGF0IGJyb3VnaHQgeW91IGhlcmUuIl1dLAogICAgICB9LAogICAgICBvdGhlcnRpbWUgPSB7CiAgICAgICAgIHRleHQgPSBbW0FnYWluIHlvdSBmYWNlICVILiAgWW91ciBpbnR1aXRpb24gaGludHMgdGhhdCB0aGlzIG1heSBiZQp0aGUgZmluYWwgdGltZSB5b3UgY29tZSBoZXJlLl1dLAogICAgICB9LAogICAgICBwb3N0aGFua3MgPSB7CiAgICAgICAgIHRleHQgPSAiXCJXZWxjb21lIGJhY2ssICVwLiAgSG93IGlzIHlvdXIgcXVlc3QgZm9yIHRoZSBBbXVsZXQgZ29pbmc/XCIiLAogICAgICB9LAogICB9LAogICBSYW4gPSB7CiAgICAgIGFzc2lnbnF1ZXN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbJW5DIGhhcyBzdG9sZW4gJW8uICBJbmZpbHRyYXRlICVpIGFuZCByZXRyaWV2ZSAlb2ggZm9yIHVzLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJZb3UgYXJlIGluZGVlZCByZWFkeSwgJXAuICBJIHNoYWxsIHRlbGwgeW91IHdoYXQgaGFzIHRyYW5zcGlyZWQsCmFuZCB3aHkgd2Ugc28gZGVzcGVyYXRlbHkgbmVlZCB5b3VyIGhlbHA6CgoiQSBzaG9ydCB0aW1lIGFnbywgdGhlIG1vdW50YWluIGNlbnRhdXJzIHRvIHRoZSBlYXN0IGludmFkZWQKYW5kIGVuc2xhdmVkIHRoZSBwbGFpbnMgY2VudGF1cnMgaW4gdGhpcyBhcmVhLiAgVGhlIGxvY2FsCmxlYWRlciBpcyBub3cgb25seSBhIGZpZ3VyZWhlYWQsIGFuZCBzZXJ2ZXMgJW4uCgoiRHVyaW5nIG91ciBsYXN0IGdhdGhlcmluZyBvZiB3b3JzaGlwIGhlcmUsIHdlIHdlcmUgYmVzZXQgYnkgaG9yZGVzIG9mCmhvc3RpbGUgY2VudGF1cnMsIGFzIHlvdSB3aXRuZXNzZWQuICBJbiB0aGUgZmlyc3Qgb25zbGF1Z2h0IGEgZ3JvdXAsCmhlYWRlZCBieSAlbiAlbmlzZWxmLCBtYW5hZ2VkIHRvIGJyZWFjaCB0aGUgZ3JvdmUgYW5kIHN0ZWFsCiVvLgoKIlNpbmNlIHRoZW4sIHdlIGhhdmUgYmVlbiBiZXNpZWdlZC4gIFdlIGRvIG5vdCBrbm93IGhvdyBtdWNoIGxvbmdlcgp3ZSB3aWxsIGJlIGFibGUgdG8gbWFpbnRhaW4gb3VyIG1hZ2ljYWwgYmFycmllcnMuCgoiSWYgd2UgYXJlIHRvIHN1cnZpdmUsIHlvdSwgJXAsIG11c3QgaW5maWx0cmF0ZQolaS4gIFRoZXJlLCB5b3Ugd2lsbCBmaW5kIGEgcGF0aHdheSBkb3duLCB0byB0aGUKdW5kZXJncm91bmQgY2F2ZXJuIG9mICVuLiAgSGUgaGFzIGFsd2F5cyBjb3ZldGVkCiVvLCBhbmQgd2lsbCBzdXJlbHkga2VlcCBpdC4KCiJSZWNvdmVyICVvIGZvciB1cywgJXAhICBPbmx5IHRoZW4gd2lsbCAlZCBiZSBzYWZlLiJdXSwKICAgICAgfSwKICAgICAgYmFkYWxpZ24gPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgYXJlIG5vdCBzdWZmaWNpZW50bHkgJWEuICBDb21lIGJhY2sgd2hlbiB5b3UgaGF2ZSBwdXJpZmllZCB5b3Vyc2VsZi5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siWW91IGhhdmUgc3RyYXllZCwgJXAhICBZb3Uga25vdyB0aGF0ICVkIHJlcXVpcmVzIHRoYXQKd2UgbWFpbnRhaW4gYSBwdXJlIGRldm90aW9uIHRvIHRoaW5ncyAlYSEKCiJZb3UgbXVzdCBnbyBmcm9tIHVzLiAgUmV0dXJuIHdoZW4geW91IGhhdmUgcHVyaWZpZWQgeW91cnNlbGYuIl1dLAogICAgICB9LAogICAgICBiYWRsZXZlbCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSBhcmUgdG9vIGluZXhwZXJpZW5jZWQuICBDb21lIGJhY2sgd2hlbiB5b3UgYXJlICVSYS5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siJXAsIHlvdSBhcmUgeWV0IHRvbyBpbmV4cGVyaWVuY2VkIHRvIHdpdGhzdGFuZCB0aGUgZGVtYW5kcyBvZiB0aGF0CndoaWNoIHdlIG5lZWQgeW91IHRvIGRvLiAgJVJBIG1pZ2h0IGp1c3QgYmUgYWJsZSB0byBkbyB0aGlzIHRoaW5nLgoKIlJldHVybiB0byB1cyB3aGVuIHlvdSBoYXZlIGxlYXJuZWQgbW9yZSwgbXkgJVMuIl1dLAogICAgICB9LAogICAgICBkaXNjb3VyYWdlID0gewogICAgICAgICAiXCJZb3VyICVkIGlzIG5vdGhpbmcsICVjLiAgWW91IGFyZSBtaW5lIG5vdyFcIiIsCiAgICAgICAgICJcIlJ1biBhd2F5IGxpdHRsZSAlYyEgIFlvdSBjYW4gbmV2ZXIgaG9wZSB0byBkZWZlYXQgJW4hXCIiLAogICAgICAgICAiXCJNeSBzZXJ2YW50cyB3aWxsIHJpcCB5b3UgdG8gc2hyZWRzIVwiIiwKICAgICAgICAgIlwiSSBzaGFsbCBkaXNwbGF5IHlvdXIgaGVhZCBhcyBhIHRyb3BoeS4gIFdoYXQgZG8geW91IHRoaW5rIGFib3V0IHRoYXQgd2FsbD9cIiIsCiAgICAgICAgICJcIkkgc2hhbGwgYnJlYWsgeW91ciAlbHMgZ3JvdmUsIGFuZCBkZXN0cm95IGFsbCB0aGUgJWdQIVwiIiwKICAgICAgICAgIlwiJWQgaGFzIGFiYW5kb25lZCB5b3UsICVjLiAgWW91IGFyZSBkb29tZWQuXCIiLAogICAgICAgICAiXCIlckE/ICAlbEMgc2VuZHMgYSBtZXJlICVyIGFnYWluc3QgbWU/ICBIYWghXCIiLAogICAgICAgICAiXCIlbEMgaGFzIGZhaWxlZCwgJWMuICAlb0Mgd2lsbCBuZXZlciBsZWF2ZSBoZXJlLlwiIiwKICAgICAgICAgIlwiWW91IHJlYWxseSB0aGluayB5b3UgY2FuIGRlZmVhdCBtZSwgZWggJWM/ICBZb3UgYXJlIHdyb25nIVwiIiwKICAgICAgICAgIlwiWW91IHdlYWtlbiwgJWMuICBJIHNoYWxsIGtpbGwgeW91IG5vdy5cIiIsCiAgICAgIH0sCiAgICAgIGVuY291cmFnZSA9IHsKICAgICAgICAgIlwiSXQgaXMgcnVtb3JlZCB0aGF0IHRoZSBGb3Jlc3QgYW5kIE1vdW50YWluIENlbnRhdXJzIGhhdmUgcmVzb2x2ZWQgdGhlaXIgYW5jaWVudCBmZXVkIGFuZCBub3cgYmFuZCB0b2dldGhlciBhZ2FpbnN0IHVzLlwiIiwKICAgICAgICAgIlwiJW5DIGlzIHN0cm9uZywgYW5kIHZlcnkgc21hcnQuXCIiLAogICAgICAgICAiXCJVc2UgJW8sIHdoZW4geW91IGZpbmQgaXQuICBJdCB3aWxsIGhlbHAgeW91IHN1cnZpdmUgdG8gcmVhY2ggdXMuXCIiLAogICAgICAgICAiXCJSZW1lbWJlciwgbGV0ICVkIGJlIHlvdXIgZ3VpZGUuXCIiLAogICAgICAgICAiXCJDYWxsIHVwb24gJWQgd2hlbiB5b3UgZmFjZSAlbi4gVGhlIHZlcnkgYWN0IG9mIGRvaW5nIHNvIHdpbGwgaW5mdXJpYXRlIGhpbSwgYW5kIGdpdmUgeW91IGFkdmFudGFnZS5cIiIsCiAgICAgICAgICJcIiVuIGFuZCBoaXMga2luZCBoYXZlIGFsd2F5cyBoYXRlZCB1cy5cIiIsCiAgICAgICAgICJcIldlIGNhbm5vdCBob2xkIHRoZSBncm92ZSBtdWNoIGxvbmdlciwgJXAuICBIdXJyeSFcIiIsCiAgICAgICAgICJcIlRvIGluZmlsdHJhdGUgJWksIHlvdSBtdXN0IGJlIHZlcnkgc3RlYWx0aHkuXCIiLAogICAgICAgICAiXCJSZW1lbWJlciB0aGF0ICVuIGlzIGEgYnJhZ2dhcnQuICBUcnVzdCBub3Qgd2hhdCBoZSBzYXlzLlwiIiwKICAgICAgICAgIlwiWW91IGNhbiB0cml1bXBoLCAlcCwgaWYgeW91IHRydXN0IGluICVkLlwiIiwKICAgICAgfSwKICAgICAgZmlyc3R0aW1lID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbVGhlIGFuY2llbnQgZm9yZXN0IGdyb3ZlIGlzIHN1cnJvdW5kZWQgYnkgY2VudGF1cnMuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbWW91IGFycml2ZSBpbiBmYW1pbGlhciBzdXJyb3VuZGluZ3MuICBJbiB0aGUgZGlzdGFuY2UsIHlvdSAleCB0aGUKYW5jaWVudCBmb3Jlc3QgZ3JvdmUsIHRoZSBwbGFjZSBvZiB3b3JzaGlwIHRvICVkLgoKU29tZXRoaW5nIGlzIHdyb25nLCB0aG91Z2guICBTdXJyb3VuZGluZyB0aGUgZ3JvdmUgYXJlIGNlbnRhdXJzIQpBbmQgdGhleSd2ZSBub3RpY2VkIHlvdSFdXSwKICAgICAgfSwKICAgICAgZ29hbF9maXJzdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSBkZXNjZW5kIGludG8gYSBzdWJ0ZXJyYW5lYW4gY29tcGxleC4gIEhvb3ZlcyBjbGF0dGVyIGluIHRoZSBkaXN0YW5jZS5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tZb3UgZGVzY2VuZCBpbnRvIGEgd2VpcmQgcGxhY2UsIGluIHdoaWNoIHJvdWdobHkgY3V0IGNhdmUtbGlrZSB3YWxscwpqb2luIHdpdGggc21vb3RoLCBmaW5pc2hlZCBvbmVzLCBhcyBpZiBzb21lb25lIHdhcyBpbiB0aGUgbWlkc3Qgb2YKZmluaXNoaW5nIG9mZiB0aGUgY29uc3RydWN0aW9uIG9mIGEgc3VidGVycmFuZWFuIGNvbXBsZXguCgpPZmYgaW4gdGhlIGRpc3RhbmNlLCB5b3UgaGVhciBhIHNvdW5kIGxpa2UgdGhlIGNsYXR0ZXJpbmcgb2YgbWFueQpob292ZXMgb24gcm9jay5dXSwKICAgICAgfSwKICAgICAgZ29hbF9uZXh0ID0gewogICAgICAgICB0ZXh0ID0gIk9uY2UgYWdhaW4sIHlvdSBlbnRlciB0aGUgZGlzdG9ydGVkIGNhc3RsZSBvZiAlbi4iLAogICAgICB9LAogICAgICBnb3RpdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSBwaWNrIHVwICVvIGFuZCBmZWVsIHBvd2VyLiAgSXQncyB0aW1lIHRvIHJldHVybiAlb2ggdG8gJWwuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbQXMgeW91IHBpY2sgdXAgJW8sIGl0IHNlZW1zIHRvIGdsb3csIGFuZCBhIHdhcm10aApmaWxscyB5b3UgY29tcGxldGVseS4gIFlvdSByZWFsaXplIHRoYXQgaXRzIHBvd2VyIGlzIHdoYXQgaGFzIHByb3RlY3RlZAp5b3VyICVzcCBhZ2FpbnN0IHRoZWlyIGVuZW1pZXMgZm9yIHNvIGxvbmcuCgpZb3UgbXVzdCBub3cgcmV0dXJuIGl0IHRvICVsIHdpdGhvdXQgZGVsYXkgLS0gdGhlaXIgbGl2ZXMgZGVwZW5kCm9uIHlvdXIgc3BlZWQuXV0sCiAgICAgIH0sCiAgICAgIGd1YXJkdGFsa19hZnRlciA9IHsKICAgICAgICAgIlwiJXBDISAgSSBoYXZlIG5vdCBzZWVuIHlvdSBpbiBtYW55IG1vb25zLiAgSG93IGRvIHlvdSBmYXJlP1wiIiwKICAgICAgICAgIlwiQmlyZHNvbmcgaGFzIHJldHVybmVkIHRvIHRoZSBncm92ZSwgc3VyZWx5IHRoaXMgbWVhbnMgeW91IGhhdmUgZGVmZWF0ZWQgJW4uXCIiLAogICAgICAgICAiXCIlbEMgc2VlbXMgdG8gaGF2ZSByZWdhaW5lZCBzb21lIG9mIGhpcyBzdHJlbmd0aC5cIiIsCiAgICAgICAgICJcIlNvLCB0ZWxsIHVzIGhvdyB5b3UgZW50ZXJlZCAlaSwgaW4gY2FzZSBzb21lIG5ldyBldmlsIGFyaXNlcyB0aGVyZS5cIiIsCiAgICAgICAgICJcIklzIHRoYXQgdHJ1bHkgJW8gdGhhdCBJIHNlZSB5b3UgY2Fycnlpbmc/XCIiLAogICAgICB9LAogICAgICBndWFyZHRhbGtfYmVmb3JlID0gewogICAgICAgICAiXCIlcEMhICBJIGhhdmUgbm90IHNlZW4geW91IGluIG1hbnkgbW9vbnMuICBIb3cgZG8geW91IGZhcmU/XCIiLAogICAgICAgICAiXCIlbkMgY29udGludWVzIHRvIHRocmVhdGVuIHRoZSBncm92ZS4gIEJ1dCB3ZSBob2xkIGZhc3QuXCIiLAogICAgICAgICAiXCIlbEMgaXMgZ3Jvd2luZyB3ZWFrLiAgVGhlIG1hZ2ljIHJlcXVpcmVkIHRvIGRlZmVuZCB0aGUgZ3JvdmUgZHJhaW5zIHVzLlwiIiwKICAgICAgICAgIlwiUmVtZW1iZXIgJWkgaXMgaGFyZCB0byBlbnRlci4gIEJld2FyZSB0aGUgZGlzdHJhY3Rpb24gb2YgbGVhdGhlcndpbmdzLlwiIiwKICAgICAgICAgIlwiV2UgbXVzdCByZWdhaW4gJW8uICBXaXRob3V0IGl0IHdlIHdpbGwgYmUgb3ZlcnJ1bi5cIiIsCiAgICAgIH0sCiAgICAgIGhhc2FtdWxldCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSBoYXZlIHRoZSBBbXVsZXQhICBUYWtlIGl0IHRvIHRoZSBBc3RyYWwgUGxhbmUgYW5kIG9mZmVyIGl0IHRvICVkLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJZb3UgaGF2ZSBpdCEgIFlvdSBoYXZlIHJlY292ZXJlZCB0aGUgQW11bGV0IG9mIFllbmRvciEKTm93IGF0dGVuZCB0byBtZSwgJXAsIGFuZCBJIHdpbGwgdGVsbCB5b3Ugd2hhdCBtdXN0IGJlIGRvbmU6CgoiVGhlIEFtdWxldCBoYXMgd2l0aGluIGl0IG1hZ2ljLCB0aGUgY2FwYWJpbGl0eSB0byB0cmFuc3BvcnQgeW91IHRvCnRoZSBBc3RyYWwgUGxhbmUsIHdoZXJlIHRoZSBwcmltYXJ5IGNpcmNsZSBvZiAlZCByZXNpZGVzLgoKIlRvIGFjdGl2YXRlIHRoaXMgbWFnaWMsIHlvdSBtdXN0IHRyYXZlbCB1cHdhcmRzIGFzIGZhciBhcyB5b3UgY2FuLgpXaGVuIHlvdSByZWFjaCB0aGUgdGVtcGxlLCBzYWNyaWZpY2UgdGhlIEFtdWxldCB0byAlZC4KCiJUaHVzIHdpbGwgeW91IGZ1bGZpbGwgeW91ciBkZXN0aW55LiJdXSwKICAgICAgfSwKICAgICAga2lsbGVkX25lbWVzaXMgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIlslbkMgY3Vyc2VzIHlvdSBhcyAlbmggZGllcy5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1slbkMgY29sbGFwc2VzIHRvIHRoZSBncm91bmQsIGN1cnNpbmcgeW91IGFuZCAlbCwgdGhlbiBzYXlzOgoKICAgICJZb3UgaGF2ZSBkZWZlYXRlZCBtZSwgJXIhICBCdXQgSSBjdXJzZSB5b3Ugb25lIGZpbmFsIHRpbWUsIHdpdGgKICAgIG15IGR5aW5nIGJyZWF0aCEgIFlvdSBzaGFsbCBkaWUgYmVmb3JlIHlvdSBsZWF2ZSBteSBjYXN0bGUhIl1dLAogICAgICB9LAogICAgICBsZWFkZXJfZmlyc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgaGF2ZSByZXR1cm5lZCwgJXAuICBXZSBuZWVkIHlvdXIgaGVscC4gIEFyZSB5b3UgcmVhZHk/XSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIiVwQyEgIFlvdSBoYXZlIHJldHVybmVkISAgVGhhbmsgJWQuCgoiV2UgaGF2ZSBncmVhdCBuZWVkIG9mIHlvdS4gIEJ1dCBmaXJzdCwgSSBtdXN0IHNlZSBpZiB5b3UgaGF2ZSB0aGUKcmVxdWlyZWQgYWJpbGl0aWVzIHRvIHRha2Ugb24gdGhpcyByZXNwb25zaWJpbGl0eS4iXV0sCiAgICAgIH0sCiAgICAgIGxlYWRlcl9sYXN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IGFyZSBub3Qgc3VmZmljaWVudGx5ICVhLiAgV2UgcmVub3VuY2UgeW91ciAlc2hvb2QuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIiVwQyEgIFlvdSBoYXZlIGRvb21lZCB1cyBhbGwuICBZb3UgZmFpcmx5IHJhZGlhdGUgJUwgaW5mbHVlbmNlcwphbmQgd2Vha2VuIHRoZSBwb3dlciB3ZSBoYXZlIHJhaXNlZCBpbiB0aGlzIGdyb3ZlIGFzIGEgcmVzdWx0IQoKIkJlZ29uZSEgIFdlIHJlbm91bmNlIHlvdXIgJXNob29kIHdpdGggdXMhICBZb3UgYXJlIGFuIG91dGNhc3Qgbm93ISJdXSwKICAgICAgfSwKICAgICAgbGVhZGVyX25leHQgPSB7CiAgICAgICAgIHRleHQgPSAiXCJPbmNlIGFnYWluLCAlcCwgeW91IHN0YW5kIGluIG91ciBtaWRzdC4gIEFyZSB5b3UgcmVhZHkgbm93P1wiIiwKICAgICAgfSwKICAgICAgbGVhZGVyX290aGVyID0gewogICAgICAgICB0ZXh0ID0gIlwiQWgsIHlvdSBhcmUgaGVyZSBhZ2FpbiwgJXAuICBBbGxvdyBtZSB0byBkZXRlcm1pbmUgeW91ciByZWFkaW5lc3MuLi5cIiIsCiAgICAgIH0sCiAgICAgIGxvY2F0ZV9maXJzdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1RoaXMgaXMgJWkuICBUaGVyZSBhcmUgYmF0cyBuZWFyYnkuICBCZXdhcmUgdGhlIHd1bXB1cyFdIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tUaGlzIG11c3QgYmUgJWkuCgpZb3UgYXJlIGluIGEgY2F2ZSBidWlsdCBvZiBtYW55IGRpZmZlcmVudCByb29tcywgYWxsIGludGVyY29ubmVjdGVkCmJ5IHR1bm5lbHMuICBZb3VyIHF1ZXN0IGlzIHRvIGZpbmQgYW5kIHNob290IHRoZSBldmlsIHd1bXB1cyB0aGF0CnJlc2lkZXMgZWxzZXdoZXJlIGluIHRoZSBjYXZlIHdpdGhvdXQgcnVubmluZyBpbnRvIGFueSBib3R0b21sZXNzCnBpdHMgb3IgdXNpbmcgdXAgeW91ciBsaW1pdGVkIHN1cHBseSBvZiBhcnJvd3MuICBHb29kIGx1Y2suCgpZb3UgYXJlIGluIHJvb20gOSBvZiB0aGUgY2F2ZS4gIFRoZXJlIGFyZSB0dW5uZWxzIHRvIHJvb21zCjUsIDgsIGFuZCAxMC4KKnJ1c3RsZSogKnJ1c3RsZSogKG11c3QgYmUgYmF0cyBuZWFyYnkuKQoqc25pZmYqIChJIGNhbiBzbWVsbCB0aGUgZXZpbCB3dW1wdXMgbmVhcmJ5ISldXSwKICAgICAgfSwKICAgICAgbG9jYXRlX25leHQgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgYXJlIGluICVpLiAgVGhlcmUgYXJlIHBpdHMuICBUaGVyZSBhcmUgYmF0cyBuZWFyYnkuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbT25jZSBhZ2FpbiwgeW91IGRlc2NlbmQgaW50byAlaS4KCip3aG9vc2gqIChJIGZlZWwgYSBkcmFmdCBmcm9tIHNvbWUgcGl0cy4pCipydXN0bGUqICpydXN0bGUqIChtdXN0IGJlIGJhdHMgbmVhcmJ5LildXSwKICAgICAgfSwKICAgICAgbmVtZXNpc19maXJzdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSBoYXZlIGNvbWUgdG8gcmVjb3ZlciAlbywgYnV0IEkgc2hhbGwga2VlcCAlb2ggYW5kIHlvdSBzaGFsbCBkaWUuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIlNvLCAlYy4gICVsQyBoYXMgc2VudCB5b3UgdG8gcmVjb3ZlciAlby4KCiJXZWxsLCBJIHNoYWxsIGtlZXAgdGhhdCBiYXVibGUuICBJdCBwbGVhc2VzIG1lLiAgWW91LCAlYywgc2hhbGwgZGllLiJdXSwKICAgICAgfSwKICAgICAgbmVtZXNpc19uZXh0ID0gewogICAgICAgICB0ZXh0ID0gIlwiQmFjayBhZ2FpbiwgZWg/ICBXZWxsLCBhIG1lcmUgJXIgaXMgbm8gdGhyZWF0IHRvIG1lISAgRGllLCAlYyFcIiIsCiAgICAgIH0sCiAgICAgIG5lbWVzaXNfb3RoZXIgPSB7CiAgICAgICAgIHRleHQgPSAiXCJZb3UgaGF2ZW4ndCBsZWFybmVkIHlvdXIgbGVzc29uLCAlYy4gIFlvdSBjYW4ndCBraWxsIG1lISAgWW91IHNoYWxsIGRpZSBub3cuXCIiLAogICAgICB9LAogICAgICBuZW1lc2lzX3dhbnRzaXQgPSB7CiAgICAgICAgIHRleHQgPSBbWyJJIHNoYWxsIGhhdmUgJW8gZnJvbSB5b3UsICVyLiAgVGhlbiBJIHNoYWxsCmtpbGwgeW91LiJdXSwKICAgICAgfSwKICAgICAgbmV4dHRpbWUgPSB7CiAgICAgICAgIHRleHQgPSAiT25jZSBhZ2FpbiwgeW91IHN0YW5kIGJlZm9yZSAlSC4iLAogICAgICB9LAogICAgICBvZmZlcmVkaXQgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgaGF2ZSBzdWNjZWVkZWQuICBUYWtlICVvIHdpdGggeW91IGFzIHlvdSBnbyB0byBmaW5kIHRoZSBBbXVsZXQuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIiVwQyEgIFlvdSBoYXZlIHN1Y2NlZWRlZCEgIEkgZmVhcmVkIGl0IHdhcyBub3QgcG9zc2libGUhCgoiWW91IGhhdmUgcmV0dXJuZWQgd2l0aCAlbyEKCiJJIGZlYXIsIG5vdywgdGhhdCB0aGUgQ2VudGF1cnMgd2lsbCByZWdyb3VwIGFuZCBwbG90IHlldCBhbm90aGVyIHJhaWQuClRoaXMgd2lsbCB0YWtlIHNvbWUgdGltZSwgYnV0IGlmIHlvdSBjYW4gcmVjb3ZlciB0aGUgQW11bGV0IG9mIFllbmRvcgpmb3IgJWQgYmVmb3JlIHRoYXQgaGFwcGVucywgd2Ugd2lsbCBiZSBldGVybmFsbHkgc2FmZS4KCiJUYWtlICVvIHdpdGggeW91LiAgSXQgd2lsbCBhaWQgaW4geW91ciBxdWVzdCBmb3IKdGhlIEFtdWxldC4iXV0sCiAgICAgIH0sCiAgICAgIG9mZmVyZWRpdDIgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgYXJlIHRoZSBrZWVwZXIgb2YgJW8gbm93LiAgR28gYW5kIGZpbmQgdGhlIEFtdWxldC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1slbCBmbGV4ZXMgJW8gcmV2ZXJlbnRseS4KCiJXaXRoIHRoaXMgd29uZHJvdXMgYm93LCBvbmUgbmVlZCBuZXZlciBydW4gb3V0IG9mIGFycm93cy4KWW91IGFyZSBpdHMga2VlcGVyIG5vdywgYW5kIHRoZSB0aW1lIGhhcyBjb21lIHRvIHJlc3VtZSB5b3VyCnNlYXJjaCBmb3IgdGhlIEFtdWxldC4gICVaIGF3YWl0IHlvdXIgcmV0dXJuCnRocm91Z2ggdGhlIG1hZ2ljIHBvcnRhbCB0aGF0IGJyb3VnaHQgeW91IGhlcmUuIl1dLAogICAgICB9LAogICAgICBvdGhlcnRpbWUgPSB7CiAgICAgICAgIHRleHQgPSBbW1lvdSBoYXZlIHRoZSBvZGRlc3QgZmVlbGluZyB0aGF0IHRoaXMgbWF5IGJlIHRoZSBsYXN0IHRpbWUgeW91CmFyZSB0byBlbnRlciAlSC5dXSwKICAgICAgfSwKICAgICAgcG9zdGhhbmtzID0gewogICAgICAgICB0ZXh0ID0gW1siV2VsY29tZSwgJXAuICBIb3cgaGF2ZSB5b3UgZmFyZWQgb24geW91ciBxdWVzdCBmb3IgdGhlIEFtdWxldApvZiBZZW5kb3I/Il1dLAogICAgICB9LAogICB9LAogICBSb2cgPSB7CiAgICAgIGFzc2lnbnF1ZXN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbR2V0ICVvIGZyb20gJW4gYW5kIGJyaW5nIGl0IHRvICVsLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJXaWxsIGV2ZXJ5b25lIG5vdCBnb2luZyB0byByZXRyaWV2ZSAlbyBmcm9tIHRoYXQKamVyaywgJW4sIHRha2Ugb25lIHN0ZXAgYmFja3dhcmRzLiAgR29vZCBjaG9pY2UsCiVwLCBiZWNhdXNlIEkgd2FzIGdvaW5nIHRvIHNlbmQgeW91IGFueXdheS4gIE15IG90aGVyICVncAphcmUgdG9vIHZhbHVhYmxlIHRvIG1lLgoKIkhlcmUncyB0aGUgZGVhbC4gIEkgd2FudCAlbywgJW4KaGFzICVvLiAgWW91IGFyZSBnb2luZyB0byBnZXQgJW8KYW5kIGJyaW5nIGl0IGJhY2sgdG8gbWUuICBTbyBzaW1wbGUgYW4gYXNzaWdubWVudCBldmVuIHlvdSBjYW4gdW5kZXJzdGFuZAppdC4iXV0sCiAgICAgIH0sCiAgICAgIGJhZGFsaWduID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbQ29tZSBiYWNrIHdoZW4geW91IGFyZSByZWFsbHkgJWEuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIk1heWJlIEkgc2hvdWxkIGNoYWluIHlvdSB0byBteSBwZXJjaCBoZXJlIGZvciBhIHdoaWxlLiAgUGVyaGFwcyB3YXRjaGluZwpyZWFsICVhIG1lbiBhdCB3b3JrIHdpbGwgYnJpbmcgc29tZSBzZW5zZSBiYWNrIHRvIHlvdS4gIEkgZG9uJ3QKdGhpbmsgSSBjb3VsZCBzdGFuZCB0aGUgc2lnaHQgb2YgeW91IGZvciB0aGF0IGxvbmcgdGhvdWdoLiAgQ29tZSBiYWNrCndoZW4geW91IGNhbiBiZSB0cnVzdGVkIHRvIGFjdCBwcm9wZXJseS4iXV0sCiAgICAgIH0sCiAgICAgIGJhZGxldmVsID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbJXJBIGlzIG5vdCBhZGVxdWF0ZWx5IHRyYWluZWQgdG8gaGFuZGxlIHRoaXMgam9iLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJJbiB0aGUgdGltZSB0aGF0IHlvdSd2ZSBiZWVuIGdvbmUgeW91J3ZlIG9ubHkgYmVlbiBhYmxlIHRvIG1hc3RlciB0aGUKYXJ0cyBvZiAlcmE/ICBJJ3ZlIHRyYWluZWQgdGVuIHRpbWVzIGFnYWluIGFzIG1hbnkgJVJwCmluIHRoYXQgdGltZS4gIE1heWJlIEkgc2hvdWxkIHNlbmQgb25lIG9mIHRoZW0sIG5vPyAgV2hlcmUgd291bGQgdGhhdApsZWF2ZSB5b3UsICVwPyAgT2ggeWVhaCwgSSByZW1lbWJlciwgSSB3YXMgZ29pbmcgdG8ga2lsbCB5b3UhIl1dLAogICAgICB9LAogICAgICBkaXNjb3VyYWdlID0gewogICAgICAgICAiXCJNYXkgSSBzdWdnZXN0IGEgY29tcHJvbWlzZS4gIEFyZSB5b3UgaW50ZXJlc3RlZCBpbiBnb2xkIG9yIGdlbXM/XCIiLAogICAgICAgICAiXCJQbGVhc2UgZG9uJ3QgZm9yY2UgbWUgdG8ga2lsbCB5b3UuXCIiLAogICAgICAgICAiXCJHcmltIHRpbWVzIGFyZSB1cG9uIHVzIGFsbC4gIFdpbGwgeW91IG5vdCBzZWUgcmVhc29uP1wiIiwKICAgICAgICAgIlwiSSBrbmV3ICVsLCBhbmQgeW91J3JlIG5vICVsdCwgdGhhbmtmdWxseS5cIiIsCiAgICAgICAgICJcIkl0IGlzIGEgc2hhbWUgdGhhdCB3ZSBhcmUgbm90IG1lZXRpbmcgdW5kZXIgbW9yZSBwbGVhc2FudCBjaXJjdW1zdGFuY2VzLlwiIiwKICAgICAgICAgIlwiSSB3YXMgb25jZSBsaWtlIHlvdSBhcmUgbm93LCAlcC4gIEJlbGlldmUgaW4gbWUgLS0gb3VyIHdheSBpcyBiZXR0ZXIuXCIiLAogICAgICAgICAiXCJTdGF5IHdpdGggbWUsIGFuZCBJIHdpbGwgbWFrZSB5b3UgJW9zIGd1YXJkaWFuLlwiIiwKICAgICAgICAgIlwiV2hlbiB5b3UgcmV0dXJuLCB3aXRoIG9yIHdpdGhvdXQgJW8sICVsIHdpbGwgaGF2ZSB5b3Uga2lsbGVkLlwiIiwKICAgICAgICAgIlwiRG8gbm90IGJlIGZvb2xlZDsgSSBhbSBwcmVwYXJlZCB0byBraWxsIHRvIGRlZmVuZCAlby5cIiIsCiAgICAgICAgICJcIkkgY2FuIHJldW5pdGUgeW91IHdpdGggdGhlIFR3YWluLiAgT2gsIHRoZSBzdG9yaWVzIHlvdSBjYW4gc3dhcC5cIiIsCiAgICAgIH0sCiAgICAgIGVuY291cmFnZSA9IHsKICAgICAgICAgIlwiWW91IGRvbid0IHNlZW0gdG8gdW5kZXJzdGFuZCwgJW8gaXNuJ3QgaGVyZSBzbyBuZWl0aGVyIHNob3VsZCB5b3UgYmUhXCIiLAogICAgICAgICAiXCJNYXkgJWQgY3Vyc2UgeW91IHdpdGggbGVhZCBmaW5nZXJzLiAgR2V0IGdvaW5nIVwiIiwKICAgICAgICAgIlwiV2UgZG9uJ3QgaGF2ZSBhbGwgeWVhci4gIEdFVCBHT0lORyFcIiIsCiAgICAgICAgICJcIkhvdyB3b3VsZCB5b3UgbGlrZSBhIHNjYXIgbmVja2xhY2U/ICBJJ20ganVzdCB0aGUgamV3ZWxlciB0byBkbyBpdCFcIiIsCiAgICAgICAgICJcIkxhenkgUy5PLkIuICBNYXliZSBJIHNob3VsZCBjYWxsIHVwIHNvbWVvbmUgZWxzZS4uLlwiIiwKICAgICAgICAgIlwiTWF5YmUgSSBzaG91bGQgb3BlbiB5b3VyIHNrdWxsIGFuZCBzZWUgaWYgbXkgaW5zdHJ1Y3Rpb25zIGFyZSBpbnNpZGU/XCIiLAogICAgICAgICAiXCJUaGlzIGlzIG5vdCBhIHRhc2sgeW91IGNhbiBjb21wbGV0ZSBpbiB0aGUgYWZ0ZXJsaWZlLCB5b3Uga25vdy5cIiIsCiAgICAgICAgICJcIkluc2lkZSBldmVyeSBsaXZpbmcgcGVyc29uIGlzIGEgZGVhZCBwZXJzb24gdHJ5aW5nIHRvIGdldCBvdXQsIGFuZCBJIGhhdmUgeW91ciBrZXkhXCIiLAogICAgICAgICAiXCJXZSdyZSBhbG1vc3Qgb3V0IG9mIGhlbGwtaG91bmQgY2hvdywgc28gd2h5IGRvbid0IHlvdSBqdXN0IGdldCBtb3ZpbmchXCIiLAogICAgICAgICAiXCJZb3Uga25vdywgJW8gaXNuJ3QgZ29pbmcgdG8gY29tZSB3aGVuIHlvdSB3aGlzdGxlLiAgWW91IG11c3QgZ2V0IGl0IHlvdXJzZWxmLlwiIiwKICAgICAgfSwKICAgICAgZmlyc3R0aW1lID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IGFyZSBpbiBSYW5zbWFubnNieSwgd2hlcmUgeW91IHRyYWluZWQuICBGaW5kICVsLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbW1VuZXhwZWN0ZWRseSwgeW91IGZpbmQgeW91cnNlbGYgYmFjayBpbiBSYW5zbWFubnNieSwgd2hlcmUgeW91IHRyYWluZWQgdG8KYmUgYSB0aGllZi4gIFF1aWNrbHkgeW91IG1ha2UgdGhlIGd1aWxkIHNpZ24sIGhvcGluZyB0aGF0IHlvdSBBTkQgd29yZApvZiB5b3VyIGFycml2YWwgcmVhY2ggJWxzIGRlbi5dXSwKICAgICAgfSwKICAgICAgZ29hbF9maXJzdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSBzZW5zZSAlby5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tZb3UgZmVlbCBhIGdyZWF0IHN3ZWxsaW5nIHVwIG9mIGNvdXJhZ2UsIHNlbnNpbmcgdGhlIHByZXNlbmNlIG9mCiVvLiAgT3IgaXMgaXQgZmVhcj9dXSwKICAgICAgfSwKICAgICAgZ29hbF9uZXh0ID0gewogICAgICAgICB0ZXh0ID0gIlRoZSBoYWlycyBvbiB0aGUgYmFjayBvZiB5b3VyIG5lY2sgd2hpc3BlciAtLSBpdCdzIGZlYXIuIiwKICAgICAgfSwKICAgICAgZ290aXQgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgcGljayB1cCAlbyBhbmQga25vdyB0aGF0ICVsIHNob3VsZCBub3QgaGF2ZSBpdC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tBcyB5b3UgcGljayB1cCAlbywgdGhlIGhhaXJzIG9uIHRoZSBiYWNrIG9mIHlvdXIKbmVjayBmYWxsIG91dC4gIEF0IG9uY2UgeW91IHJlYWxpemUgd2h5ICVuIHdhcwp3aWxsaW5nIHRvIGRpZSB0byBrZWVwIGl0IG91dCBvZiAlbHMgaGFuZHMuICBTb21laG93CnlvdSBrbm93IHRoYXQgeW91IG11c3QgZG8gbGlrZXdpc2UuXV0sCiAgICAgIH0sCiAgICAgIGd1YXJkdGFsa19hZnRlciA9IHsKICAgICAgICAgIlwiSSB3YXMgc3VyZSB3cm9uZyBhYm91dCBMYWR5IFR5dmVmZWxsZSdzIGhvdXNlOyBJIGJhcmVseSBnb3QgYXdheSB3aXRoIG15IGxpZmUgYW5kIGxvc3QgbXkgbG9jayBwaWNrIGluIHRoZSBwcm9jZXNzLlwiIiwKICAgICAgICAgIlwiWW91J3JlIGJhY2s/ICBFdmVuIHRoZSBUd2FpbiBkb24ndCBjb21lIGJhY2sgYW55bW9yZS5cIiIsCiAgICAgICAgICJcIkNhbiB5b3Ugc3BhcmUgYW4gb2xkIGN1dHB1cnNlIGEgem9ya21pZCBmb3Igc29tZSBncm9nP1wiIiwKICAgICAgICAgIlwiRnJpdHogdHJpZWQgdG8gam9pbiB0aGUgb3RoZXIgc2lkZSwgYW5kIG5vdyBoZSdzIGhlbGwtaG91bmQgY2hvdy5cIiIsCiAgICAgICAgICJcIkJlIGNhcmVmdWwgd2hhdCB5b3Ugc3RlYWwsIEkgaGVhciB0aGUgYm9zcyBoYXMgcGVyZmVjdGVkIHR1cm5pbmcgcm9ja3MgaW50byB3b3J0aGxlc3MgcGllY2VzIG9mIGdsYXNzLlwiIiwKICAgICAgfSwKICAgICAgZ3VhcmR0YWxrX2JlZm9yZSA9IHsKICAgICAgICAgIlwiSSBoZWFyIHRoYXQgTGFkeSBUeXZlZmVsbGUncyBob3VzZWhvbGQgaXMgbGlnaHRseSBndWFyZGVkLlwiIiwKICAgICAgICAgIlwiWW91J3JlIGJhY2s/ICBFdmVuIHRoZSBUd2FpbiBkb24ndCBjb21lIGJhY2sgYW55bW9yZS5cIiIsCiAgICAgICAgICJcIkNhbiB5b3Ugc3BhcmUgYW4gb2xkIGN1dHB1cnNlIGEgem9ya21pZCBmb3Igc29tZSBncm9nP1wiIiwKICAgICAgICAgIlwiRnJpdHogdHJpZWQgdG8gam9pbiB0aGUgb3RoZXIgc2lkZSwgYW5kIG5vdyBoZSdzIGhlbGwtaG91bmQgY2hvdy5cIiIsCiAgICAgICAgICJcIkJlIGNhcmVmdWwgd2hhdCB5b3Ugc3RlYWwsIEkgaGVhciB0aGUgYm9zcyBoYXMgcGVyZmVjdGVkIHR1cm5pbmcgcm9ja3MgaW50byB3b3J0aGxlc3MgcGllY2VzIG9mIGdsYXNzLlwiIiwKICAgICAgfSwKICAgICAgaGFzYW11bGV0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbVGFrZSB0aGUgQW11bGV0IHRvIHRoZSBBc3RyYWwgUGxhbmUgYW5kIGZpbmQgJWRzIHRlbXBsZS5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siSSBzZWUgdGhhdCB3aXRoIHlvdXIgYWJpbGl0aWVzLCBhbmQgbXkgYnJhaW5zLCB3ZSBjb3VsZCBydWxlIHRoaXMgd29ybGQuCgoiQWxsIHRoYXQgd2Ugd291bGQgbmVlZCB0byBiZSBhbGwtcG93ZXJmdWwgaXMgZm9yIHlvdSB0byB0YWtlIHRoYXQgbGl0dGxlCnRyaW5rZXQgeW91J3ZlIGdvdCB0aGVyZSB1cCB0byB0aGUgQXN0cmFsIFBsYW5lLiAgRnJvbSB0aGVyZSwgJWQgd2lsbApzaG93IHlvdSB3aGF0IHRvIGRvIHdpdGggaXQuICBPbmNlIHRoYXQncyBkb25lLCB3ZSB3aWxsIGJlIGludmluY2libGUhIl1dLAogICAgICB9LAogICAgICBraWxsZWRfbmVtZXNpcyA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW0JlZm9yZSBkeWluZywgJW4gdGVsbHMgeW91IHRvIHVzZSB0aGUgJW8gd2lzZWx5Ll0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJJIGtub3cgd2hhdCB5b3UgYXJlIHRoaW5raW5nLCAlcC4gIEl0IGlzIG5vdCB0b28gbGF0ZSBmb3IgeW91CnRvIHVzZSAlbyB3aXNlbHkuICBGb3IgdGhlIHNha2Ugb2YgeW91ciBndWlsZAolc3AsIGRvIHdoYXQgaXMgcmlnaHQuIgoKWW91IHNpdCBhbmQgd2FpdCBmb3IgZGVhdGggdG8gY29tZSBmb3IgJW4sIGFuZCB0aGVuIHlvdQpicmFjZSB5b3Vyc2VsZiBmb3IgeW91ciBuZXh0IG1lZXRpbmcgd2l0aCAlbCFdXSwKICAgICAgfSwKICAgICAgbGVhZGVyX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IG93ZSBiYWNrIGR1ZXMgdG8geW91ciBndWlsZC4gIFlvdSBjYW4gcGF5IHRoZW0gb2ZmIGlmIHlvdSdyZSB1cCB0byB0aGUgam9iLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJXZWxsLCBsb29rIHdobyBpdCBpcyBib3lzIC0tICVwIGhhcyBjb21lIGhvbWUuICBZb3Ugc2VlbSB0byBoYXZlCmZhbGxlbiBiZWhpbmQgaW4geW91ciBkdWVzLiAgSSBzaG91bGQga2lsbCB5b3UgYXMgYW4gZXhhbXBsZSB0byB0aGVzZQpvdGhlciB3b3J0aGxlc3MgY3V0cHVyc2VzLCBidXQgSSBoYXZlIGEgYmV0dGVyIHBsYW4uICBJZiB5b3UgYXJlIHJlYWR5Cm1heWJlIHlvdSBjb3VsZCB3b3JrIG9mZiB5b3VyIGJhY2sgZHVlcyBieSBwZXJmb3JtaW5nIGEgbGl0dGxlIGpvYiBmb3IKbWUuICBMZXQgdXMganVzdCBzZWUgaWYgeW91IGFyZSByZWFkeS4uLiJdXSwKICAgICAgfSwKICAgICAgbGVhZGVyX2xhc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgbXVzdCBnby5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siV2VsbCAlZ3AsIGl0IGxvb2tzIGxpa2Ugb3VyIGZyaWVuZCBoYXMgZm9yZ290dGVuIHdobyBpcyB0aGUgYm9zcwphcm91bmQgaGVyZS4gIE91ciBmcmllbmQgc2VlbXMgdG8gdGhpbmsgdGhhdCAlcnAgaGF2ZSBiZWVuIHB1dCBpbgpjaGFyZ2UuICBXcm9uZy4gIERFQUQgV1JPTkchIgoKWW91ciBzdWRkZW4gc2hpZnQgaW4gc3Vycm91bmRpbmdzIHByZXZlbnRzIHlvdSBmcm9tIGhlYXJpbmcgdGhlIGVuZApvZiAlbHMgY3Vyc2UuXV0sCiAgICAgIH0sCiAgICAgIGxlYWRlcl9uZXh0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbQXJlIHlvdSBzdHVwaWQgb3IgYXJlIHlvdSByZWFkeT9dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siV2VsbCwgSSBkaWRuJ3QgZXhwZWN0IHRvIHNlZSB5b3UgYmFjay4gIEl0IHNob3dzIHRoYXQgeW91IGFyZSBlaXRoZXIgc3R1cGlkLApvciB5b3UgYXJlIGZpbmFsbHkgcmVhZHkgdG8gYWNjZXB0IG15IG9mZmVyLiAgTGV0IHVzIGhvcGUgZm9yIHlvdXIgc2FrZSBpdAppc24ndCBzdHVwaWRpdHkgdGhhdCBicmluZ3MgeW91IGJhY2suIl1dLAogICAgICB9LAogICAgICBsZWFkZXJfb3RoZXIgPSB7CiAgICAgICAgIHRleHQgPSBbWyJEaWQgeW91IHBlcmhhcHMgbWlzdGFrZSBtZSBmb3Igc29tZSBvdGhlciAlbHQ/ICBZb3UgbXVzdAp0aGluayBtZSBhcyBzdHVwaWQgYXMgeW91ciBiZWhhdmlvci4gIEkgd2FybiB5b3Ugbm90IHRvIHRyeSBteSBwYXRpZW5jZS4iXV0sCiAgICAgIH0sCiAgICAgIGxvY2F0ZV9maXJzdCA9IHsKICAgICAgICAgdGV4dCA9ICJUaG9zZSBkYW1uIGxpdHRsZSBoYWlycyB0ZWxsIHlvdSB0aGF0IHlvdSBhcmUgbmVhcmVyIHRvICVvLiIsCiAgICAgIH0sCiAgICAgIGxvY2F0ZV9uZXh0ID0gewogICAgICAgICB0ZXh0ID0gIk5vdCB3YW50aW5nIHRvIGZhY2UgJWwgd2l0aG91dCBoYXZpbmcgc3RvbGVuICVvLCB5b3UgY29udGludWUuIiwKICAgICAgfSwKICAgICAgbmVtZXNpc19maXJzdCA9IHsKICAgICAgICAgdGV4dCA9ICJcIkFoISAgWW91IG11c3QgYmUgJWxzIC4uLiBlciwgYGhlcm8nLiAgQSBwbGVhc3VyZSB0byBtZWV0IHlvdS5cIiIsCiAgICAgIH0sCiAgICAgIG5lbWVzaXNfbmV4dCA9IHsKICAgICAgICAgdGV4dCA9ICJcIldlIG1lZXQgYWdhaW4uICBQbGVhc2UgcmVjb25zaWRlciB5b3VyIGFjdGlvbnMuXCIiLAogICAgICB9LAogICAgICBuZW1lc2lzX290aGVyID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IGNhbm5vdCB0cnVzdCAlbC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siU3VyZWx5LCAlcCwgeW91IGhhdmUgbGVhcm5lZCB0aGF0IHlvdSBjYW5ub3QgdHJ1c3QgYW55IGJhcmdhaW5zCnRoYXQgJWwgaGFzIG1hZGUuICBJIGNhbiBzaG93IHlvdSBob3cgdG8gY29udGludWUgb24KeW91ciBxdWVzdCB3aXRob3V0IGhhdmluZyB0byBydW4gaW50byBoaW0gYWdhaW4uIl1dLAogICAgICB9LAogICAgICBuZW1lc2lzX3dhbnRzaXQgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIlslbEMgc2hvdWxkIG5vdCBoYXZlICVvLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJQbGVhc2UsIHRoaW5rIGZvciBhIG1vbWVudCBhYm91dCB3aGF0IHlvdSBhcmUgZG9pbmcuICBEbyB5b3UgdHJ1bHkKYmVsaWV2ZSB0aGF0ICVkIHdvdWxkIHdhbnQgJWwgdG8gaGF2ZQolbz8iXV0sCiAgICAgIH0sCiAgICAgIG5leHR0aW1lID0gewogICAgICAgICB0ZXh0ID0gW1tPbmNlIGFnYWluLCB5b3UgZmluZCB5b3Vyc2VsZiBiYWNrIGluIFJhbnNtYW5uc2J5LiAgRm9uZCBtZW1vcmllcyBhcmUKcmVwbGFjZWQgYnkgZmVhciwga25vd2luZyB0aGF0ICVsIGlzIHdhaXRpbmcgZm9yIHlvdS5dXSwKICAgICAgfSwKICAgICAgb2ZmZXJlZGl0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbVGFrZSAlbyB3aXRoIHlvdSBhbmQgZ28uXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIldlbGwsIEknbGwgYmUgZGFtbmVkLiAgWW91IGdvdCBpdC4gIEkgYW0gcHJvdWQgb2YgeW91LCBhIGZpbmUgJXIKeW91J3ZlIHR1cm5lZCBvdXQgdG8gYmUuCgoiV2hpbGUgeW91IHdlcmUgZ29uZSBJIGdvdCB0byB0aGlua2luZywgeW91IGFuZCAlbwp0b2dldGhlciBjb3VsZCBicmluZyBtZSBtb3JlIHRyZWFzdXJlIHRoYW4gZWl0aGVyIG9mIHlvdSBhcGFydCwgc28gd2h5IGRvbid0CnlvdSB0YWtlIGl0IHdpdGggeW91LiAgQWxsIEkgYXNrIGlzIGEgY3V0IG9mIHdoYXRldmVyIGxvb3QgeW91IGNvbWUgYnkuClRoYXQgaXMgYSBiZXR0ZXIgZGVhbCB0aGFuIEkgb2ZmZXJlZCAlbi4KCiJCdXQsIHlvdSBzZWUgd2hhdCBoYXBwZW5lZCB0byAlbiB3aGVuIGhlIHJlZnVzZWQuCkRvbid0IG1ha2UgbWUgZmluZCBhbm90aGVyIHRvIHNlbmQgYWZ0ZXIgeW91IHRoaXMgdGltZS4iXV0sCiAgICAgIH0sCiAgICAgIG9mZmVyZWRpdDIgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltUYWtlICVvIGFuZCBhY3F1aXJlIHRoZSBBbXVsZXQuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbJWxDIHNlZW1zIHRlbXB0ZWQgdG8gc3dhcCAlbyBmb3IKdGhlIG11bmRhbmUgb25lIHlvdSBkZXRlY3QgaW4gaGlzIHBvY2tldCwgYnV0IG5vdGljaW5nIHlvdXIgYWxlcnRuZXNzLApldmlkZW50bHkgY2hpY2tlbnMgb3V0LgoKIkdvIGZpbGNoIHRoZSBBbXVsZXQgYmVmb3JlIHNvbWVvbmUgZWxzZSBiZWF0cyB5b3UgdG8gaXQuCiVaIGFyZSBiYWNrIHRoZSB3YXkgeW91IGNhbWUsIHRocm91Z2ggdGhlIG1hZ2ljIHBvcnRhbC4iXV0sCiAgICAgIH0sCiAgICAgIG90aGVydGltZSA9IHsKICAgICAgICAgdGV4dCA9IFtbWW91IHJ1YiB5b3VyIGhhbmRzIHRocm91Z2ggeW91ciBoYWlyLCBob3BpbmcgdGhhdCB0aGUgbGl0dGxlIG9uZXMgb24KdGhlIGJhY2sgb2YgeW91ciBuZWNrIHN0YXkgZG93biwgYW5kIHByZXBhcmUgeW91cnNlbGYgZm9yIHlvdXIgbWVldGluZwp3aXRoICVsLl1dLAogICAgICB9LAogICAgICBwb3N0aGFua3MgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltIb3cgYWJvdXQgdHJhZGluZyAlbyBmb3Igc29tZXRoaW5nP10iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJRdWl0ZSB0aGUgbGl0dGxlIHRoaWVmLCBhcmVuJ3Qgd2UsICVwLiAgQ2FuIEkgaW50ZXJlc3QgeW91IGluIGEKc3dhcCBmb3IgJW8/ICBMb29rIGFyb3VuZCwgYW55dGhpbmcgaW4gdGhlIGtlZXAKaXMgeW91cnMgZm9yIHRoZSBhc2tpbmcuIl1dLAogICAgICB9LAogICB9LAogICBTYW0gPSB7CiAgICAgIGFzc2lnbnF1ZXN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IG11c3QgZW50ZXIgJWksIHRoZW4gcmVnYWluICVvIGZyb20gJW4uXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIkRvbW8gJXAtc2FuLCBpbmRlZWQgeW91IGFyZSByZWFkeS4gIEkgY2FuIG5vdyB0ZWxsIHlvdSB3aGF0Cml0IGlzIHRoYXQgSSByZXF1aXJlIG9mIHlvdS4KCiJUaGUgZGFpbXlvLCAlbiwgaGFzIGJldHJheWVkIHVzLiAgSGUgaGFzIHN0b2xlbiBmcm9tIHVzCiVvIGFuZCB0YWtlbiBpdCB0byBoaXMgZG9uam9uIGRlZXAgd2l0aGluCiVpLgoKIklmIEkgY2Fubm90IHNob3cgdGhlIGVtcGVyb3IgJW8gd2hlbiBoZSBjb21lcwpmb3IgdGhlIGZlc3RpdmFsIGhlIHdpbGwga25vdyB0aGF0IEkgaGF2ZSBmYWlsZWQgaW4gbXkgZHV0eSwgYW5kCnJlcXVlc3QgdGhhdCBJIGNvbW1pdCBzZXBwdWt1LgoKIllvdSBtdXN0IGdhaW4gZW50cmFuY2UgdG8gJWkgYW5kIHJldHJpZXZlIHRoZQplbXBlcm9yJ3MgcHJvcGVydHkuICBCZSBxdWljayEgIFRoZSBlbXBlcm9yIHdpbGwgYmUgaGVyZSBmb3IgdGhlCmNoYS1uby15b3UgaW4gNSBzdGlja3MuCgoiV2FrYXJpbWFzdSBrYT8iXV0sCiAgICAgIH0sCiAgICAgIGJhZGFsaWduID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbV2hlbiB5b3UgY2FuIHRoaW5rICVhIGFuZCBhY3QgJWEgdGhlbiByZXR1cm4uXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIiVwLXNhbiwgeW91IHdvdWxkIGRvIGJldHRlciB0byBqb2luIHRoZSBreW9rYWt1LgoKIllvdSBoYXZlIHNraWxscywgYnV0IHVudGlsIHlvdSBjYW4gY2FsbCB1cG9uIHRoZSBidXNoaWRvIHRvIGtub3cgd2hlbiBhbmQKaG93IHRvIHVzZSB0aGVtIHlvdSBhcmUgbm90IHNhbXVyYWkuICBXaGVuIHlvdSBjYW4gdGhpbmsgJWEgYW5kCmFjdCAlYSB0aGVuIHJldHVybi4iXV0sCiAgICAgIH0sCiAgICAgIGJhZGxldmVsID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbXCJJIHJlcXVpcmUgJVJhIHRvIGRlZmVhdCAlbi4gIFJldHVybiB3aGVuIHlvdSBhcmUgcmVhZHkuXCJdIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siJXAtc2FuLCB5b3UgaGF2ZSBsZWFybmVkIHdlbGwgYW5kIGhvbm9yZWQgeW91ciBmYW1pbHkuCkkgcmVxdWlyZSB0aGUgc2tpbGxzIG9mICVSYSBpbiBvcmRlciB0byBkZWZlYXQgJW4uCkdvIGFuZCBzZWVrIG91dCB0ZWFjaGVycy4gIExlYXJuIHdoYXQgdGhleSBoYXZlIGxlYXJuZWQuICBXaGVuIHlvdQphcmUgcmVhZHksIHJldHVybiB0byBtZS4iXV0sCiAgICAgIH0sCiAgICAgIGRpc2NvdXJhZ2UgPSB7CiAgICAgICAgICJcIkFoaCwgSSBmaW5hbGx5IG1lZXQgdGhlIGRhaW15byBvZiB0aGUga3lva2FrdSFcIiIsCiAgICAgICAgICJcIlRoZXJlIGlzIG5vIGhvbm9yIGZvciBtZSBpbiB5b3VyIGRlYXRoLlwiIiwKICAgICAgICAgIlwiWW91IGtub3cgdGhhdCBJIGNhbm5vdCByZXNhc2ggbXkgc3dvcmRzIHVudGlsIHRoZXkgaGF2ZSBraWxsZWQuXCIiLAogICAgICAgICAiXCJZb3VyIHByZXNlbmNlIG9ubHkgY29tcG91bmRzIHRoZSBkaXNob25vciBvZiAlbCBpbiBub3QgY29taW5nICVsaXNlbGYuXCIiLAogICAgICAgICAiXCJJIHdpbGwgbWFrZSB0ZWEgd2l0aCB5b3VyIGhhaXIgYW5kIHNlcnZlIGl0IHRvICVsLlwiIiwKICAgICAgICAgIlwiWW91ciBmZWFyIHNob3dzIGluIHlvdXIgZXllcywgY293YXJkIVwiIiwKICAgICAgICAgIlwiSSBoYXZlIG5vdCBoZWFyZCBvZiB5b3UsICVwLXNhbjsgaGFzIHlvdXIgbGlmZSBiZWVuIHRoYXQgdW53b3J0aHk/XCIiLAogICAgICAgICAiXCJJZiB5b3Ugd2lsbCBub3Qgb2JleSBtZSwgeW91IHdpbGwgZGllLlwiIiwKICAgICAgICAgIlwiS25lZWwgbm93IGFuZCBtYWtlIHRoZSB0d28gY3V0cyBvZiBob25vci4gIEkgd2lsbCB0ZWxsIHlvdXIgJXNwIG9mIHlvdXIgaG9ub3JhYmxlIGRlYXRoLlwiIiwKICAgICAgICAgIlwiWW91ciBtYXN0ZXIgd2FzIGEgcG9vciB0ZWFjaGVyLiAgWW91IHdpbGwgcGF5IGZvciBoaXMgbWlzdGFrZXMgaW4geW91ciB0ZWFjaGluZy5cIiIsCiAgICAgIH0sCiAgICAgIGVuY291cmFnZSA9IHsKICAgICAgICAgIlwiVG8gZGVmZWF0ICVuIHlvdSBtdXN0IG92ZXJjb21lIHRoZSBzZXZlbiBlbW90aW9uczogaGF0ZSwgYWRvcmF0aW9uLCBqb3ksIGFueGlldHksIGFuZ2VyLCBncmllZiwgYW5kIGZlYXIuXCIiLAogICAgICAgICAiXCJSZW1lbWJlciB5b3VyIGhvbm9yIGlzIG15IGhvbm9yLCB5b3UgcGVyZm9ybSBpbiBteSBuYW1lLlwiIiwKICAgICAgICAgIlwiSSB3aWxsIGdvIHRvIHRoZSB0ZW1wbGUgYW5kIGJ1cm4gaW5jZW5zZSBmb3IgeW91ciBzYWZlIHJldHVybi5cIiIsCiAgICAgICAgICJcIlNheW9uYXJhLlwiIiwKICAgICAgICAgIlwiVGhlcmUgY2FuIGJlIGhvbm9yIGluIGRlZmVhdCwgYnV0IG5vIGdhaW4uXCIiLAogICAgICAgICAiXCJZb3VyIGthbWkgbXVzdCBiZSBzdHJvbmcgaW4gb3JkZXIgdG8gc3VjY2VlZC5cIiIsCiAgICAgICAgICJcIllvdSBhcmUgaW5kZWVkIGEgd29ydGh5ICVSLCBidXQgbm93IHlvdSBtdXN0IGJlIGEgd29ydGh5IHNhbXVyYWkuXCIiLAogICAgICAgICAiXCJJZiB5b3UgZmFpbCwgJW4gd2lsbCBiZSBsaWtlIGEgdGFpLWZ1biBvbiB0aGUgbGFuZC5cIiIsCiAgICAgICAgICJcIklmIHlvdSBhcmUgdHJ1bHkgJWEsICVkIHdpbGwgbGlzdGVuLlwiIiwKICAgICAgICAgIlwiU2hhcnBlbiB5b3VyIHN3b3JkcyBhbmQgeW91ciB3aXRzIGZvciB0aGUgdGFzayBiZWZvcmUgeW91LlwiIiwKICAgICAgfSwKICAgICAgZmlyc3R0aW1lID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbVGhlIGJhbm5lciBvZiAlbiBmbGllcyBhYm92ZSB0b3duLiAgV2hhdCBoYXMgaGFwcGVuZWQgdG8gJWw/XSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbRXZlbiBiZWZvcmUgeW91ciBzZW5zZXMgYWRqdXN0LCB5b3UgcmVjb2duaXplIHRoZSBrYW1pIG9mCiVILgoKWW91ICV4IHRoZSBzdGFuZGFyZCBvZiB5b3VyIHRla2ksICVuLCBmbHlpbmcgYWJvdmUKdGhlIHRvd24uICBIb3cgY291bGQgc3VjaCBhIHRoaW5nIGhhdmUgaGFwcGVuZWQ/ICBXaHkgYXJlIG5pbmphCndhbmRlcmluZyBmcmVlbHk7IHdoZXJlIGFyZSB0aGUgc2FtdXJhaSBvZiB5b3VyIGRhaW15bywgJWw/CgpZb3UgcXVpY2tseSBzYXkgYSBwcmF5ZXIgdG8gSXphbmFnaSBhbmQgSXphbmFtaSBhbmQgd2FsayB0b3dhcmRzCnRvd24uXV0sCiAgICAgIH0sCiAgICAgIGdvYWxfYWx0ID0gewogICAgICAgICB0ZXh0ID0gIkFzIHlvdSBhcnJpdmUgb25jZSBhZ2FpbiBhdCB0aGUgaG9tZSBvZiAlbi4iLAogICAgICB9LAogICAgICBnb2FsX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IGZlZWwgdGhlIHRhdW50cyAlbiwgYnV0IGFmdGVyIG9mZmVyaW5nIGEgcHJheWVyIHRvICVkLCB5b3UgcHJvY2VlZC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tJbiB5b3VyIG1pbmQsIHlvdSBoZWFyIHRoZSB0YXVudHMgb2YgJW4uCgpZb3UgYmVjb21lIGxpa2UgdGhlIHJpY2UgcGxhbnQgYW5kIGJlbmQgdG8gdGhlIGdyb3VuZCwgb2ZmZXJpbmcgYQpwcmF5ZXIgdG8gJWQuICBCdXQgd2hlbiB0aGUgd2luZCBoYXMgcGFzc2VkLCB5b3Ugc3RhbmQKcHJvdWRseSBhZ2Fpbi4gIFB1dHRpbmcgeW91ciBrYW1pIGluIHRoZSBoYW5kcyBvZiBmYXRlLCB5b3UgYWR2YW5jZS5dXSwKICAgICAgfSwKICAgICAgZ29hbF9uZXh0ID0gewogICAgICAgICB0ZXh0ID0gW1tBcyB5b3UgYXJyaXZlIG9uY2UgYWdhaW4gYXQgdGhlIGhvbWUgb2YgJW4sIHlvdXIgdGhvdWdodHMKdHVybiBvbmx5IHRvICVvLl1dLAogICAgICB9LAogICAgICBnb3RpdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSBmZWVsIHRoZSBwb3dlciBvZiAlbyBhbmQgYXJlIGh1bWJsZWQuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbQXMgeW91IHBpY2sgdXAgJW8sIHlvdSBmZWVsIHRoZSBzdHJlbmd0aCBvZiBpdHMga2FybWEuCllvdSByZWFsaXplIGF0IG9uY2Ugd2h5IHNvIG1hbnkgZ29vZCBzYW11cmFpIGhhZCB0byBkaWUgdG8gZGVmZW5kIGl0LgpZb3UgYXJlIGh1bWJsZWQga25vd2luZyB0aGF0IHlvdSBob2xkIG9uZSBvZiB0aGUgYXJ0aWZhY3RzIG9mIHRoZQpzdW4gZ29kZGVzcy5dXSwKICAgICAgfSwKICAgICAgZ3VhcmR0YWxrX2FmdGVyID0gewogICAgICAgICAiXCJDb21lLCBqb2luIHVzIGluIGNlbGVicmF0aW5nIHdpdGggc29tZSBzYWtlLlwiIiwKICAgICAgICAgIlwiSWthZ2EgZGVzdSBrYT9cIiIsCiAgICAgICAgICJcIllvdSBoYXZlIGJyb3VnaHQgb3VyIGNsYW4gYW5kICVsIG11Y2ggaG9ub3IuXCIiLAogICAgICAgICAiXCJQbGVhc2UgJXIsIHNpdCBmb3IgYSB3aGlsZSBhbmQgdGVsbCB1cyBob3cgeW91IG92ZXJjYW1lIHRoZSBOaW5qYS5cIiIsCiAgICAgICAgICJcIiVsQyBzdGlsbCBsaXZlcyEgIFlvdSBoYXZlIHNhdmVkIHVzIGZyb20gYmVjb21pbmcgcm9uaW4uXCIiLAogICAgICB9LAogICAgICBndWFyZHRhbGtfYmVmb3JlID0gewogICAgICAgICAiXCJUbyBzdWNjZWVkLCB5b3UgbXVzdCB3YWxrIGxpa2UgYSBidXR0ZXJmbHkgb24gdGhlIHdpbmQuXCIiLAogICAgICAgICAiXCJJa2FnYSBkZXN1IGthP1wiIiwKICAgICAgICAgIlwiSSBmZWFyIGZvciBUaGUgTGFuZCBvZiBUaGUgR29kcy5cIiIsCiAgICAgICAgICJcIiVuQyBoYXMgaGlyZWQgdGhlIE5pbmphIC0tIGJlIGNhcmVmdWwuXCIiLAogICAgICAgICAiXCJJZiAlbyBpcyBub3QgcmV0dXJuZWQsIHdlIHdpbGwgYWxsIGJlIHJvbmluLlwiIiwKICAgICAgfSwKICAgICAgaGFzYW11bGV0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbVGFrZSB0aGUgQW11bGV0IHRvIHRoZSBBc3RyYWwgUGxhbmUgdG8gZmluaXNoIHlvdXIgdGFzay5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siQWgsICVwLXNhbWEuICBZb3UgaGF2ZSB3YXN0ZWQgeW91ciBlZmZvcnRzIHJldHVybmluZyBob21lLgpOb3cgdGhhdCB5b3UgYXJlIGluIHBvc3Nlc3Npb24gb2YgdGhlIEFtdWxldCwgeW91IGFyZSBob25vci1ib3VuZCB0bwpmaW5pc2ggdGhlIHF1ZXN0IHlvdSBoYXZlIHVuZGVydGFrZW4uICBUaGVyZSB3aWxsIGJlIHBsZW50eSBvZiB0aW1lCmZvciBzYWtpIGFuZCBzdG9yaWVzIHdoZW4geW91IGhhdmUgZmluaXNoZWQuCgoiR28gbm93LCBhbmQgbWF5IG91ciBwcmF5ZXJzIGJlIGEgd2luZCBhdCB5b3VyIGJhY2suIl1dLAogICAgICB9LAogICAgICBraWxsZWRfbmVtZXNpcyA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiWyVuQyBkaWVzIHdpdGhvdXQgaG9ub3IuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbWW91ciBoZWFsaW5nIHNraWxscyB0ZWxsIHlvdSB0aGF0ICVucyB3b3VuZHMgYXJlIG1vcnRhbC4KCllvdSBrbm93IHRoYXQgdGhlIGJ1c2hpZG8gdGVsbHMgeW91IHRvIGZpbmlzaCBoaW0gYW5kIGxldCBoaXMga2FtaQpkaWUgd2l0aCBob25vciwgYnV0IHRoZSB0aG91Z2h0IG9mIHNvIG1hbnkgc2FtdXJhaSBkZWFkIGR1ZSB0byB0aGlzCm1hbidzIGRpc2hvbm9yIHByZXZlbnRzIHlvdSBmcm9tIGdpdmluZyB0aGUgZmluYWwgYmxvdy4KCllvdSBvcmRlciB0aGF0IGhpcyB1bndhc2hlZCBoZWFkIGJlIGdpdmVuIHRvIHRoZSBjcm93cyBhbmQgaGlzIGJvZHkKdGhyb3duIGludG8gdGhlIHNlYS5dXSwKICAgICAgfSwKICAgICAgbGVhZGVyX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbJWxDIG5lZWRzIHNvbWVvbmUgdG8gbGVhZCAlbGogc2FtdXJhaSBhZ2FpbnN0ICVuLiAgQXJlIHlvdSByZWFkeT9dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siQWgsICVwLXNhbiwgaXQgaXMgZ29vZCB0byBzZWUgeW91IGFnYWluLiAgSSBuZWVkIHNvbWVvbmUgd2hvIGNhbgpsZWFkIG15IHNhbXVyYWkgYWdhaW5zdCAlbi4gIElmIHlvdSBhcmUgcmVhZHksIHlvdSB3aWxsIGJlCnRoYXQgcGVyc29uLiJdXSwKICAgICAgfSwKICAgICAgbGVhZGVyX2xhc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltMZWF2ZSBhbmQgZG8gbm90IGNvbWUgYmFjay5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siWW91IGFyZSBubyBsb25nZXIgbXkgc2FtdXJhaSwgJXAuCgoiSGFyYS1raXJpIGlzIGRlbmllZC4gIFlvdSBhcmUgb3JkZXJlZCB0byBzaGF2ZSB5b3VyIGhlYWQgYW5kIHRoZW4gdG8KYmVjb21lIGEgbW9uay4gIFlvdXIgZmllZiBhbmQgZmFtaWx5IGFyZSBmb3JmZWl0LiAgV2FrYXJpbWFzdSBrYT8iXV0sCiAgICAgIH0sCiAgICAgIGxlYWRlcl9uZXh0ID0gewogICAgICAgICB0ZXh0ID0gW1siT25jZSBhZ2FpbiwgJXAtc2FuLCB5b3Uga25lZWwgYmVmb3JlIG1lLiAgQXJlIHlvdSB5ZXQgY2FwYWJsZSBvZgpiZWluZyBteSB2YXNzYWw/Il1dLAogICAgICB9LAogICAgICBsZWFkZXJfb3RoZXIgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltBcmUgeW91IHRydWVseSBhIHNhbXVyYWk/XSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIllvdSBiZWdpbiB0byB0ZXN0IG15IG1hdHN1LCAlcC1zYW4uCklmIHlvdSBjYW5ub3QgZGV0ZXJtaW5lIHdoYXQgSSB3YW50IGluIGEgc2FtdXJhaSwgaG93IGNhbiBJIHJlbHkgb24geW91CnRvIGZpZ3VyZSBvdXQgd2hhdCBJIG5lZWQgZnJvbSBhIHNhbXVyYWk/Il1dLAogICAgICB9LAogICAgICBsb2NhdGVfZmlyc3QgPSB7CiAgICAgICAgIHRleHQgPSBbW1lvdSBpbnN0aW5jdGl2ZWx5IHJlYWNoIGZvciB5b3VyIHN3b3Jkcy4gIFlvdSBkbyBub3QgcmVjb2duaXplIHRoZQpsYXkgb2YgdGhpcyBsYW5kLCBidXQgeW91IGtub3cgdGhhdCB5b3VyIHRla2kgYXJlIGV2ZXJ5d2hlcmUuXV0sCiAgICAgIH0sCiAgICAgIGxvY2F0ZV9uZXh0ID0gewogICAgICAgICB0ZXh0ID0gW1tUaGFua2Z1bCB0aGF0IHlvdXIgJXNwIGF0ICVIIGNhbm5vdCBzZWUKeW91ciBmZWFyLCB5b3UgcHJlcGFyZSBhZ2FpbiB0byBhZHZhbmNlLl1dLAogICAgICB9LAogICAgICBuZW1lc2lzX2ZpcnN0ID0gewogICAgICAgICB0ZXh0ID0gW1siQWgsIHNvIGl0IGlzIHRvIGJlIHlvdSwgJXAtc2FuLiAgSSBvZmZlciB5b3Ugc2VwcHVrdS4KSSB3aWxsIGJlIHlvdXIgc2Vjb25kIGlmIHlvdSB3aXNoLiJdXSwKICAgICAgfSwKICAgICAgbmVtZXNpc19uZXh0ID0gewogICAgICAgICB0ZXh0ID0gW1siSSBoYXZlIG9mZmVyZWQgeW91IHRoZSBob25vcmFibGUgZXhpdC4gIE5vdyBJIHdpbGwgaGF2ZSB5b3VyCmhlYWQgdG8gc2VuZCB1bndhc2hlZCB0byAlbC4iXV0sCiAgICAgIH0sCiAgICAgIG5lbWVzaXNfb3RoZXIgPSB7CiAgICAgICAgIHRleHQgPSAiXCJBZnRlciBJIGhhdmUgZGlzcGF0Y2hlZCB5b3UsIEkgd2lsbCBjdXJzZSB5b3VyIGthbWkuXCIiLAogICAgICB9LAogICAgICBuZW1lc2lzX3dhbnRzaXQgPSB7CiAgICAgICAgIHRleHQgPSBbWyJZb3UgaGF2ZSBmb3VnaHQgbXkgc2FtdXJhaTsgc3VyZWx5IHlvdSBtdXN0IGtub3cgdGhhdCB5b3UKd2lsbCBub3QgYmUgYWJsZSB0byB0YWtlICVvIGJhY2sgdG8KJUguIl1dLAogICAgICB9LAogICAgICBuZXh0dGltZSA9IHsKICAgICAgICAgdGV4dCA9ICJPbmNlIGFnYWluLCB5b3UgYXJlIGJhY2sgYXQgJUguIiwKICAgICAgfSwKICAgICAgb2ZmZXJlZGl0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbVGhlIGVtcGVyb3Igd2FudHMgeW91IHRvIHRha2UgJW8gYW5kIHJlY292ZXIgdGhlIEFtdWxldC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tBcyB5b3UgYm93IGJlZm9yZSAlbCwgaGUgd2VsY29tZXMgeW91OgoKICAgICJZb3UgaGF2ZSBicm91Z2h0IHlvdXIgZmFtaWx5IGdyZWF0IGhvbm9yLCAlcC1zYW1hLgoKICAgICJXaGlsZSB5b3UgaGF2ZSBiZWVuIGdvbmUgdGhlIGVtcGVyb3IncyBhZHZpc29ycyBoYXZlIGRpc2NvdmVyZWQgaW4KICAgIHRoZSBhbmNpZW50IHRleHRzIHRoYXQgdGhlIGthcm1hIG9mIHRoZSBzYW11cmFpIHdobyBzZWVrcyB0byByZWNvdmVyCiAgICB0aGUgQW11bGV0IGFuZCB0aGUga2FybWEgb2YgJW8gYXJlIGpvaW5lZAogICAgYXMgdGhlIHNlYXNvbnMgam9pbiB0byBtYWtlIGEgeWVhci4KCiAgICAiQmVjYXVzZSB5b3UgaGF2ZSBzaG93biBzdWNoIGZpZGVsaXR5LCB0aGUgZW1wZXJvciByZXF1ZXN0cwogICAgdGhhdCB5b3UgdGFrZSBsZWF2ZSBvZiBvdGhlciBvYmxpZ2F0aW9ucyBhbmQgY29udGludWUgb24gdGhlCiAgICByb2FkIHRoYXQgZmF0ZSBoYXMgc2V0IHlvdXIgZmVldCB1cG9uLiAgSSB3b3VsZCBjb25zaWRlciBpdAogICAgYW4gaG9ub3IgaWYgeW91IHdvdWxkIGFsbG93IG1lIHRvIHdhdGNoIHlvdXIgaG91c2Vob2xkIHVudGlsCiAgICB5b3UgcmV0dXJuIHdpdGggdGhlIEFtdWxldC4iCgpXaXRoIHRoYXQsICVsIGJvd3MsIGFuZCBwbGFjZXMgaGlzIHN3b3JkIGF0b3AKJW8uXV0sCiAgICAgIH0sCiAgICAgIG9mZmVyZWRpdDIgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltUYWtlICVvLCByZXR1cm4gdG8gJVosIGFuZCByZWNvdmVyIHRoZSBBbXVsZXQuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbJWwgaG9sZHMgJW8gdGlnaHRseSBmb3IgYSBtb21lbnQsIHRoZW4gcmV0dXJucwpoaXMgZ2F6ZSB0byB5b3UuCgoiVGhlIHRpbWUgaXMgcmlwZSB0byByZWNvdmVyIHRoZSBBbXVsZXQuICBSZXR1cm4gdG8gJVoKdGhyb3VnaCB0aGUgbWFnaWMgcG9ydGFsIHRoYXQgdHJhbnNwb3J0ZWQgeW91IGhlcmUgc28gdGhhdCB5b3UgbWF5CmFjaGlldmUgdGhlIGRlc3Rpbnkgd2hpY2ggYXdhaXRzIHlvdS4iXV0sCiAgICAgIH0sCiAgICAgIG90aGVydGltZSA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiWyVIQyBpcyB0aHJlYXRlbmVkIGJ5ICVuLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbW1lvdSBhcmUgYmFjayBhdCAlSC4KCkluc3RhbnRseSB5b3Ugc2Vuc2UgYSBzdWJ0bGUgY2hhbmdlIGluIHlvdXIga2FybWEuICBZb3Ugc2VlbSB0byBrbm93IHRoYXQKaWYgeW91IGRvIG5vdCBzdWNjZWVkIGluIHlvdXIgcXVlc3QsICVuIHdpbGwgaGF2ZSBkZXN0cm95ZWQKdGhlIGthbWkgb2YgJUggYmVmb3JlIHlvdSByZXR1cm4gYWdhaW4uXV0sCiAgICAgIH0sCiAgICAgIHBvc3RoYW5rcyA9IHsKICAgICAgICAgdGV4dCA9ICIlbEMgYm93cy4gIFwiJXAtc2FtYSwgdGVsbCB1cyBvZiB5b3VyIHNlYXJjaCBmb3IgdGhlIEFtdWxldC5cIiIsCiAgICAgIH0sCiAgIH0sCiAgIFRvdSA9IHsKICAgICAgYXNzaWducXVlc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltFbnRlciAlaSBhbmQgcmVjb3ZlciAlbyBmcm9tICVuLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJZb3UgaGF2ZSBpbmRlZWQgcHJvdmVuIHlvdXJzZWxmIGEgd29ydGh5ICVjLCAlcC4KCiJCdXQgbm93IHlvdXIga2luZm9sayBhbmQgSSBtdXN0IGFzayB5b3UgdG8gcHV0IGFzaWRlIHlvdXIgdHJhdmVscyBhbmQKaGVscCB1cyBpbiBvdXIgdGltZSBvZiBuZWVkLiAgQWZ0ZXIgeW91IGxlZnQgdXMgd2UgZWxlY3RlZCBhIG5ldyBtYXlvciwKJW4uICBIZSBwcm92ZWQgdG8gYmUgYSBtb3N0IGhlaW5vdXMgYW5kIHZpbGUgY3JlYXR1cmUuCgoiU29vbiBhZnRlciB0YWtpbmcgb2ZmaWNlIGhlIGFic2NvbmRlZCB3aXRoICVvCmFuZCBmbGVkIHRvd24sIGxlYXZpbmcgYmVoaW5kIGhpcyBoZW5jaG1lbiB0byBydWxlIG92ZXIgdXMuICBJbiBvcmRlcgpmb3IgdXMgdG8gcmVnYWluIGNvbnRyb2wgb2Ygb3VyIHRvd24sIHlvdSBtdXN0IGVudGVyICVpCmFuZCByZWNvdmVyICVvLgoKIkRvIG5vdCBiZSBkaXN0cmFjdGVkIG9uIHlvdXIgcXVlc3QuICBJZiB5b3UgZG8gbm90IHJldHVybiBxdWlja2x5IEkgZmVhcgp0aGF0IGFsbCB3aWxsIGJlIGxvc3QuICBMZXQgdXMgYm90aCBwcmF5IG5vdyB0aGF0ICVkIHdpbGwgZ3VpZGUgeW91CmFuZCBrZWVwIHlvdSBzYWZlLiJdXSwKICAgICAgfSwKICAgICAgYmFkYWxpZ24gPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgYXJlIG5vdCBzdWZmaWNpZW50bHkgJWEuICBSZXR1cm4gd2hlbiB5b3UgYXJlLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJJdCB3b3VsZCBiZSBhbiBhZmZyb250IHRvICVkIHRvIGhhdmUgb25lIG5vdCB0cnVlIHRvIHRoZQolYSBwYXRoIHVuZGVydGFrZSBoZXIgYmlkZGluZy4KCiJZb3UgbXVzdCBub3QgcmV0dXJuIHRvIHVzIHVudGlsIHlvdSBoYXZlIHB1cmlmaWVkIHlvdXJzZWxmIG9mIHRoZXNlCmJhZCBpbmZsdWVuY2VzIG9uIHlvdXIgYWN0aW9ucy4gIFJlbWVtYmVyLCBvbmx5IGJ5IGZvbGxvd2luZyB0aGUgJWEKcGF0aCBjYW4geW91IGhvcGUgdG8gb3ZlcmNvbWUgdGhlIG9ic3RhY2xlcyB5b3Ugd2lsbCBmYWNlLiJdXSwKICAgICAgfSwKICAgICAgYmFkbGV2ZWwgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltSZXR1cm4gd2hlbiB5b3UgYXJlICVSYS5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siVGhlcmUgaXMgc3RpbGwgdG9vIG11Y2ggdGhhdCB5b3UgaGF2ZSB0byBsZWFybiBiZWZvcmUgeW91IGNhbiB1bmRlcnRha2UKdGhlIG5leHQgc3RlcC4gIFJldHVybiB0byB1cyBhcyBhIHByb3ZlbiAlUiwgYW5kIHBlcmhhcHMgdGhlbgp5b3Ugd2lsbCBiZSByZWFkeS4KCiJHbyBiYWNrIG5vdywgYW5kIG1heSB0aGUgdGVhY2hpbmdzIG9mICVkIHNlcnZlIHlvdSB3ZWxsLiJdXSwKICAgICAgfSwKICAgICAgZGlzY291cmFnZSA9IHsKICAgICAgICAgIlwiSSBkZWZlYXRlZCAlbCBhbmQgSSB3aWxsIGRlZmVhdCB5b3UsICVwLlwiIiwKICAgICAgICAgIlwiV2hlcmUgaXMgJWQgbm93ISAgWW91IG11c3QgcmVhbGl6ZSBubyBvbmUgY2FuIGhlbHAgeW91IGhlcmUuXCIiLAogICAgICAgICAiXCJCZWcgZm9yIG1lcmN5IG5vdyBhbmQgSSBtYXkgYmUgbGVuaWVudCBvbiB5b3UuXCIiLAogICAgICAgICAiXCJJZiB5b3Ugd2VyZSBub3Qgc28gJWEsIHlvdSBtaWdodCBoYXZlIHN0b29kIGEgY2hhbmNlLlwiIiwKICAgICAgICAgIlwiVmVuZ2VhbmNlIGlzIG1pbmUgYXQgbGFzdCwgJXAuXCIiLAogICAgICAgICAiXCJJIG9ubHkgd2lzaCB0aGF0ICVsIGhhZCBhIG1vcmUgd29ydGh5ICVyIHRvIHNlbmQgYWdhaW5zdCBtZS5cIiIsCiAgICAgICAgICJcIldpdGggJW8gaW4gbXkgcG9zc2Vzc2lvbiB5b3UgY2Fubm90IGhvcGUgdG8gZGVmZWF0IG1lLlwiIiwKICAgICAgICAgIlwiJW5DIGhhcyBuZXZlciBiZWVuIGRlZmVhdGVkLCBORVZFUiFcIiIsCiAgICAgICAgICJcIkFyZSB5b3UgdHJ1bHkgdGhlIGJlc3QgJUggaGFzIHRvIHNlbmQgYWdhaW5zdCBtZT8gIEkgcGl0eSAlbC5cIiIsCiAgICAgICAgICJcIkhvdyBkbyB5b3Ugc3BlbGwgJXA/ICBJIHdhbnQgdG8gZW5zdXJlIHRoZSBtYXJrZXIgb24geW91ciBncmF2ZSBpcyBjb3JyZWN0IGFzIGEgd2FybmluZyB0byB5b3VyICVzcC5cIiIsCiAgICAgIH0sCiAgICAgIGVuY291cmFnZSA9IHsKICAgICAgICAgIlwiRG8gbm90IGJlIGZvb2xlZCBieSB0aGUgZmFsc2UgcHJvbWlzZXMgb2YgJW4uXCIiLAogICAgICAgICAiXCJUbyBlbnRlciAlaSB5b3UgbXVzdCBwYXNzIG1hbnkgdHJhcHMuXCIiLAogICAgICAgICAiXCJJZiB5b3UgZG8gbm90IHJldHVybiB3aXRoICVvLCB5b3VyIHF1ZXN0IHdpbGwgYmUgaW4gdmFpbi5cIiIsCiAgICAgICAgICJcIkRvIG5vdCBiZSBhZnJhaWQgdG8gY2FsbCB1cG9uICVkIGlmIHlvdSB0cnVseSBuZWVkIGhlbHAuXCIiLAogICAgICAgICAiXCJJZiB5b3UgZG8gbm90IGRlc3Ryb3kgJW4sIGhlIHdpbGwgZm9sbG93IHlvdSBiYWNrIGhlcmUhXCIiLAogICAgICAgICAiXCJUYWtlICVvIGZyb20gJW4gYW5kIHlvdSBtYXkgYmUgYWJsZSB0byBkZWZlYXQgaGltLlwiIiwKICAgICAgICAgIlwiWW91IG11c3QgaHVycnksICVwIVwiIiwKICAgICAgICAgIlwiWW91IGFyZSBsaWtlICVTYSB0byBtZSwgJXAuICBEbyBub3QgbGV0IG1lIGRvd24uXCIiLAogICAgICAgICAiXCJJZiB5b3UgYXJlICVhIGF0IGFsbCB0aW1lcyB5b3UgbWF5IHN1Y2NlZWQsICVwLlwiIiwKICAgICAgICAgIlwiTGV0IGFsbCB3aG8gbWVldCB5b3Ugb24geW91ciBqb3VybmV5IGtub3cgdGhhdCB5b3UgYXJlIG9uIGEgcXVlc3QgZm9yICVsIGFuZCBncmFudCBzYWZlIHBhc3NhZ2UuXCIiLAogICAgICB9LAogICAgICBmaXJzdHRpbWUgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgZmluZCB5b3Vyc2VsZiBiYWNrIGF0ICVILCBidXQgdGhlIHF1aWV0IGlzIG9taW5vdXMuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbWW91IGJyZWF0aGUgYSBzaWdoIG9mIHJlbGllZiBhcyB5b3UgZmluZCB5b3Vyc2VsZiBiYWNrIGluIHRoZSBmYW1pbGlhcgpzdXJyb3VuZGluZ3Mgb2YgJUguCgpZb3UgcXVpY2tseSBub3RpY2UgdGhhdCB0aGluZ3MgZG8gbm90IGFwcGVhciB0aGUgd2F5IHRoZXkgZGlkIHdoZW4geW91CmxlZnQuICBUaGUgdG93biBpcyBkYXJrIGFuZCBxdWlldC4gIFRoZXJlIGFyZSBubyBzb3VuZHMgY29taW5nIGZyb20KYmVoaW5kIHRoZSB0b3duIHdhbGxzLCBhbmQgbm8gY2FtcGZpcmVzIGJ1cm5pbmcgaW4gdGhlIGZpZWxkcy4gIEFzIGEKbWF0dGVyIG9mIGZhY3QsIHlvdSBkbyBub3QgJXggYW55IG1vdmVtZW50IGluIHRoZSBmaWVsZHMgYXQgYWxsLCBhbmQKdGhlIGNyb3BzIHNlZW0gYXMgdGhvdWdoIHRoZXkgaGF2ZSBiZWVuIHVudGVuZGVkIGZvciBtYW55IHdlZWtzLl1dLAogICAgICB9LAogICAgICBnb2FsX2FsdCA9IHsKICAgICAgICAgdGV4dCA9ICJZb3UgaGF2ZSByZXR1cm5lZCB0byAlbnMgbGFpci4iLAogICAgICB9LAogICAgICBnb2FsX2ZpcnN0ID0gewogICAgICAgICB0ZXh0ID0gIllvdSBzZW5zZSB0aGUgcHJlc2VuY2Ugb2YgJW8uIiwKICAgICAgfSwKICAgICAgZ29hbF9uZXh0ID0gewogICAgICAgICB0ZXh0ID0gW1tZb3UgZ2FpbiBjb25maWRlbmNlLCBrbm93aW5nIHRoYXQgeW91IG1heSBzb29uIGJlIHVuaXRlZCB3aXRoCiVvLl1dLAogICAgICB9LAogICAgICBnb3RpdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSBwaWNrIHVwICVvIGFuZCBmZWVsIHJlbGllZi4gIFJldHVybiBpdCB0byAlbC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tBcyB5b3UgcGljayB1cCAlbywgeW91IGZlZWwgYSBncmVhdAp3ZWlnaHQgaGFzIGJlZW4gbGlmdGVkIGZyb20geW91ciBzaG91bGRlcnMuICBZb3VyIG9ubHkgdGhvdWdodHMgYXJlCnRvIHF1aWNrbHkgcmV0dXJuIHRvICVIIGFuZCBmaW5kICVsLl1dLAogICAgICB9LAogICAgICBndWFyZHRhbGtfYWZ0ZXIgPSB7CiAgICAgICAgICJcIkdlaGVubm9tIG9uIDUgem9ya21pZHMgYSBkYXkgLS0gbW9yZSBsaWtlIDUwMCBhIGRheSBpZiB5b3UgYXNrIG1lLlwiIiwKICAgICAgICAgIlwiRG8geW91IGtub3cgd2hlcmUgSSBjb3VsZCBmaW5kIHNvbWUgbmljZSBwb3N0Y2FyZHMgb2YgVGhlIEdub21pc2ggTWluZXM/XCIiLAogICAgICAgICAiXCJIYXZlIHlvdSB0cmllZCB0aGUgd2VpcmQgdG9pbGV0cz9cIiIsCiAgICAgICAgICJcIklmIHlvdSBzdGljayBhcm91bmQsIEknbGwgc2hvdyB5b3UgdGhlIHBpY3R1cmVzIGZyb20gbXkgbGF0ZXN0IHRyaXAuXCIiLAogICAgICAgICAiXCJEaWQgeW91IGJyaW5nIG1lIGJhY2sgYW55IHNvdXZlbmlycz9cIiIsCiAgICAgIH0sCiAgICAgIGd1YXJkdGFsa19iZWZvcmUgPSB7CiAgICAgICAgICJcIkdlaGVubm9tIG9uIDUgem9ya21pZHMgYSBkYXkgLS0gbW9yZSBsaWtlIDUwMCBhIGRheSBpZiB5b3UgYXNrIG1lLlwiIiwKICAgICAgICAgIlwiRG8geW91IGtub3cgd2hlcmUgSSBjb3VsZCBmaW5kIHNvbWUgbmljZSBwb3N0Y2FyZHMgb2YgVGhlIEdub21pc2ggTWluZXM/XCIiLAogICAgICAgICAiXCJIYXZlIHlvdSB0cmllZCB0aGUgd2VpcmQgdG9pbGV0cz9cIiIsCiAgICAgICAgICJcIkRvbid0IHN0YXkgYXQgdGhlIElubiwgSSBoZWFyIHRoZSBmb29kIGlzIHRlcnJpYmxlIGFuZCBpdCBoYXMgcmF0cy5cIiIsCiAgICAgICAgICJcIlRoZXkgdG9sZCBtZSB0aGF0IHRoaXMgd2FzIHRoZSBvZmYgc2Vhc29uIVwiIiwKICAgICAgfSwKICAgICAgaGFzYW11bGV0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IGhhdmUgdGhlIEFtdWxldC4gIFRha2UgaXQgdG8gdGhlIEFzdHJhbCBQbGFuZSB0byBmaW5pc2ggeW91ciB0YXNrLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJTdGFuZCBiYWNrIGFuZCBsZXQgbWUgbG9vayBhdCB5b3UsICVwLgpOb3cgdGhhdCB5b3UgaGF2ZSByZWNvdmVyZWQgdGhlIEFtdWxldCBvZiBZZW5kb3IsIEknbSBhZnJhaWQgbGl2aW5nCm91dCB5b3VyIGRheXMgaW4gJUggd291bGQgc2VlbSBwcmV0dHkgdGFtZS4KCiJZb3UgaGF2ZSBjb21lIHRvbyBmYXIgdG8gc3RvcCBub3csIGZvciB0aGVyZSBhcmUgc3RpbGwgbW9yZSB0YXNrcyB0aGF0Cm91ciBvcmFsIGhpc3RvcnkgZm9yZXRlbGxzIGZvciB5b3UuICBGb3JldmVyIG1vcmUsIHRob3VnaCwgeW91ciBuYW1lIHNoYWxsCmJlIHNwb2tlbiBieSB0aGUgJWdQIHdpdGggYXdlLiAgWW91IGFyZSB0cnVseSBhbiBpbnNwaXJhdGlvbiB0byB5b3VyCiVzcCEiXV0sCiAgICAgIH0sCiAgICAgIGtpbGxlZF9uZW1lc2lzID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbJW5DIGN1cnNlcyBhdCB5b3UgYXMgJW5oIGRpZXMuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbWW91IHR1cm4gaW4gdGhlIGRpcmVjdGlvbiBvZiAlbi4gIEFzIGhpcyBlYXJ0aGx5IGJvZHkgYmVnaW5zCnRvIHZhbmlzaCBiZWZvcmUgeW91ciBleWVzLCB5b3UgaGVhciBoaW0gY3Vyc2U6CgogICAgIllvdSBzaGFsbCBuZXZlciBiZSByaWQgb2YgbWUsICVwIQogICAgSSB3aWxsIGZpbmQgeW91IHdoZXJlIGV2ZXIgeW91IGdvIGFuZCByZWdhaW4gd2hhdCBpcyByaWdodGx5IG1pbmUuIl1dLAogICAgICB9LAogICAgICBsZWFkZXJfZmlyc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltTb21lb25lIG11c3QgZGVmZWF0ICVuLiAgQXJlIHlvdXIgcmVhZHk/XSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIklzIGl0IHJlYWxseSB5b3UsICVwISAgSSBoYWQgZ2l2ZW4gdXAgaG9wZSBmb3IgeW91ciByZXR1cm4uCkFzIHlvdSBjYW4gJXgsIHdlIGFyZSBkZXNwZXJhdGVseSBpbiBuZWVkIG9mIHlvdXIgdGFsZW50cy4gIFNvbWVvbmUgbXVzdApkZWZlYXQgJW4gaWYgb3VyIHRvd24gaXMgdG8gYmVjb21lIHdoYXQgaXQgb25jZSB3YXMuCgoiTGV0IG1lIHNlZSBpZiB5b3UgYXJlIHJlYWR5IHRvIGJlIHRoYXQgc29tZW9uZS4iXV0sCiAgICAgIH0sCiAgICAgIGxlYWRlcl9sYXN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbTGVhdmUgJUggYW5kIG5ldmVyIHJldHVybi5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siSXQgaXMgdG9vIGxhdGUsICVwLiAgWW91IGFyZSBub3QgZXZlbiB3b3J0aHkgdG8gZGllIGFtb25nc3QgdXMuCkxlYXZlICVIIGFuZCBuZXZlciByZXR1cm4uIl1dLAogICAgICB9LAogICAgICBsZWFkZXJfbmV4dCA9IHsKICAgICAgICAgdGV4dCA9ICJcIlRoaW5ncyBhcmUgZ2V0dGluZyB3b3JzZSwgJXAuICBJIGhvcGUgdGhhdCB0aGlzIHRpbWUgeW91IGFyZSByZWFkeS5cIiIsCiAgICAgIH0sCiAgICAgIGxlYWRlcl9vdGhlciA9IHsKICAgICAgICAgdGV4dCA9ICJcIkkgaG9wZSB0aGF0IGZvciB0aGUgc2FrZSBvZiAlSCB5b3UgaGF2ZSBwcmVwYXJlZCB5b3Vyc2VsZiB0aGlzIHRpbWUuXCIiLAogICAgICB9LAogICAgICBsb2NhdGVfZmlyc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgJXggdGhlIGhhbmRpd29yayBvZiAlbnMgaGVuY2hsaW5ncy5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tPbmx5IHlvdXIgZmFpdGggaW4gJWQga2VlcHMgeW91IGZyb20gdHJlbWJsaW5nLiAgWW91ICV4CnRoZSBoYW5kaXdvcmsgb2YgJW5zIGhlbmNobGluZ3MgZXZlcnl3aGVyZS5dXSwKICAgICAgfSwKICAgICAgbG9jYXRlX25leHQgPSB7CiAgICAgICAgIHRleHQgPSAiWW91IGtub3cgdGhhdCB0aGlzIHRpbWUgeW91IG11c3QgZmluZCBhbmQgZGVzdHJveSAlbi4iLAogICAgICB9LAogICAgICBuZW1lc2lzX2ZpcnN0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbJXJBIHdpbGwgbm90IGRlZmVhdCBtZS5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siU28sICVwLCAlbCB0aGlua3MgdGhhdCB5b3UgY2FuIHdyZXN0CiVvIGZyb20gbWUhCgoiSXQgb25seSBwcm92ZXMgaG93IGRlc3BlcmF0ZSBoZSBoYXMgYmVjb21lIHRoYXQgaGUgc2VuZHMgJXJhIHRvCnRyeSBhbmQgZGVmZWF0IG1lLiAgV2hlbiB0aGlzIGRheSBpcyBvdmVyLCBJIHdpbGwgaGF2ZSB5b3UgZW5zbGF2ZWQKaW4gdGhlIG1pbmVzIHdoZXJlIHlvdSB3aWxsIHJ1ZSB0aGUgZGF5IHRoYXQgeW91IGV2ZXIgZW50ZXJlZAolaS4iXV0sCiAgICAgIH0sCiAgICAgIG5lbWVzaXNfbmV4dCA9IHsKICAgICAgICAgdGV4dCA9IFtbIkkgbGV0IHlvdSBsaXZlIHRoZSBsYXN0IHRpbWUgYmVjYXVzZSBpdCBnYXZlIG1lIHBsZWFzdXJlLgpUaGlzIHRpbWUgSSB3aWxsIGRlc3Ryb3kgeW91LCAlcC4iXV0sCiAgICAgIH0sCiAgICAgIG5lbWVzaXNfb3RoZXIgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltSdW4gYXdheSBvciB5b3Ugd2lsbCBzdWZmZXIgc2V2ZXJlbHkuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIlRoZXNlIG1lZXRpbmdzIGNvbWUgdG8gYm9yZSBtZS4gIFlvdSBkaXN0dXJiIG15IHdvcmtpbmdzIHdpdGgKJW8uCgoiSWYgeW91IGRvIG5vdCBydW4gYXdheSBub3csIEkgd2lsbCBpbmZsaWN0IHNvIG11Y2ggc3VmZmVyaW5nIG9uIHlvdSB0aGF0CiVsIHdpbGwgZmVlbCBndWlsdHkgZm9yIGV2ZXIgaGF2aW5nIHNlbnQgaGlzICVTIHRvIG1lISJdXSwKICAgICAgfSwKICAgICAgbmVtZXNpc193YW50c2l0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbXCJSZXR1cm4gJW8gdG8gbWUgYW5kIHdlIHdpbGwgcnVsZSAlSC5cIl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJZb3UgZm9vbC4gIFlvdSBkbyBub3Qga25vdyBob3cgdG8gY2FsbCB1cG9uIHRoZSBwb3dlcnMgb2YKJW8uCgoiUmV0dXJuIGl0IHRvIG1lIGFuZCBJIHdpbGwgdGVhY2ggeW91IGhvdyB0byB1c2UgaXQsIGFuZCB0b2dldGhlciB3ZQp3aWxsIHJ1bGUgJUguICBCdXQgZG8gc28gbm93LCBhcyBteSBwYXRpZW5jZSBncm93cyB0aGluLiJdXSwKICAgICAgfSwKICAgICAgbmV4dHRpbWUgPSB7CiAgICAgICAgIHRleHQgPSAiT25jZSBhZ2FpbiwgeW91IGFyZSBiYWNrIGF0ICVILiIsCiAgICAgIH0sCiAgICAgIG9mZmVyZWRpdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1Rha2UgJW8gYW5kIHdpdGggJWRzIGd1aWRhbmNlLCByZWNvdmVyIHRoZSBBbXVsZXQuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbQXMgJWwgZGV0ZWN0cyB0aGUgcHJlc2VuY2Ugb2YgJW8sCmhlIGFsbW9zdCBzbWlsZXMgZm9yIHRoZSBmaXJzdCB0aW1lIGluIG1hbnkgYSBmdWxsIG1vb24uCgpBcyBoZSBsb29rcyB1cCBmcm9tICVvIGhlIHNheXM6CgogICAgIllvdSBoYXZlIHJlY292ZXJlZCAlby4gIFlvdSBhcmUgaXRzCiAgICBvd25lciBub3csIGJ1dCBub3QgaXRzIG1hc3Rlci4gIExldCBpdCB3b3JrIHdpdGggeW91IGFzIHlvdSBjb250aW51ZQogICAgeW91ciBqb3VybmV5LiAgV2l0aCBpdHMgaGVscCwgYW5kICVkIHRvIGd1aWRlIHlvdSBvbiB0aGUKICAgICVhIHBhdGgsIHlvdSBtYXkgeWV0IHJlY292ZXIgdGhlIEFtdWxldCBvZiBZZW5kb3IuIl1dLAogICAgICB9LAogICAgICBvZmZlcmVkaXQyID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbS2VlcCAlbyBhbmQgcmV0dXJuIHRvICVaIHRocm91Z2ggdGhlIHBvcnRhbC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siJW9DIGlzIHlvdXJzIG5vdy4gICVaCmF3YWl0IHlvdXIgcmV0dXJuIHRocm91Z2ggdGhlIG1hZ2ljIHBvcnRhbCB0aGF0IGJyb3VnaHQgeW91IGhlcmUuIl1dLAogICAgICB9LAogICAgICBvdGhlcnRpbWUgPSB7CiAgICAgICAgIHRleHQgPSBbW1lvdSBhcmUgYmFjayBhdCAlSC4KVGhpbmdzIGFwcGVhciB0byBoYXZlIGJlY29tZSBzbyBiYWQgdGhhdCB5b3UgZmVhciB0aGF0IHNvb24KJUggd2lsbCBub3QgYmUgaGVyZSB0byByZXR1cm4gdG8uXV0sCiAgICAgIH0sCiAgICAgIHBvc3RoYW5rcyA9IHsKICAgICAgICAgdGV4dCA9IFtbIkkgY291bGQgbm90IGJlIG1vcmUgcHJvdWQgdGhhbiBpZiB5b3Ugd2VyZSBteSBvd24gJVMsICVwIQpUZWxsIG1lIG9mIHlvdXIgYWR2ZW50dXJlcyBpbiBxdWVzdCBvZiB0aGUgQW11bGV0IG9mIFllbmRvci4iXV0sCiAgICAgIH0sCiAgIH0sCiAgIFZhbCA9IHsKICAgICAgYXNzaWducXVlc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltGaW5kICVpOyBkZWZlYXQgJW47IHJldHVybiB3aXRoICVvLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJJdCBpcyBub3QgY2xlYXIsICVwLCBmb3IgbXkgc2lnaHQgaXMgbGltaXRlZCB3aXRob3V0IG91ciByZWxpYy4KQnV0IGl0IGlzIG5vdyBsaWtlbHkgdGhhdCB5b3UgY2FuIGRlZmVhdCAlbiwgYW5kIHJlY292ZXIKJW8uCgoiQSBzaG9ydCB0aW1lIGFnbywgJW4gYW5kIGhpcyBtaW5pb25zIGF0dGFja2VkIHRoaXMgcGxhY2UuICBUaGV5Cm9wZW5lZCB0aGUgaHVnZSB2b2xjYW5pYyB2ZW50cyB5b3UgJXggYWJvdXQgdGhlIGhpbGwsIGFuZCBhdHRhY2tlZC4gIEkga25ldwp0aGF0IHRoaXMgd2FzIHRvIGNvbWUgdG8gcGFzcywgYW5kIGhhZCBhc2tlZCAlZCBmb3IgYSBncm91cCBvZiAlZ1AKdG8gaGVscCBkZWZlbmQgdGhpcyBwbGFjZS4gIFRoZSBmZXcgeW91ICV4IGhlcmUgYXJlIHRoZSBtaWdodGllc3Qgb2YKVmFsaGFsbGEncyBvd24sIGFuZCBhcmUgYWxsIHRoYXQgYXJlIGxlZnQgb2Ygb25lIGh1bmRyZWQgJWQgc2VudC4KCiJEZXNwaXRlIHRoZSBncmVhdCBhbmQgZ2xvcmlvdXMgYmF0dGxlIHdlIGZvdWdodCwgJW4gbWFuYWdlZCBhdApsYXN0IHRvIHN0ZWFsICVvLiAgVGhpcyBoYXMgdXBzZXQgdGhlIGJhbGFuY2Ugb2YgdGhlIHVuaXZlcnNlLAphbmQgdW5sZXNzICVvaCBpcyByZXR1cm5lZCBpbnRvIG15IGNhcmUsICVuIG1heSBzdGFydCBSYWduYXJvay4KCiJZb3UgbXVzdCBmaW5kIHRoZSBlbnRyYW5jZSB0byAlaS4gIFRyYXZlbCBkb3dud2FyZApmcm9tIHRoZXJlIGFuZCB5b3Ugd2lsbCBmaW5kICVucyBsYWlyLiAgRGVmZWF0IGhpbSBhbmQKcmV0dXJuICVvIHRvIG1lLiJdXSwKICAgICAgfSwKICAgICAgYmFkYWxpZ24gPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgaGF2ZSBzdHJheWVkIGZyb20gdGhlICVhIHBhdGguICBSZXR1cm4gYWZ0ZXIgeW91IHB1cmlmeSB5b3Vyc2VsZi5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siTk8hICBUaGlzIGlzIHRlcnJpYmxlLiAgSSBzZWUgeW91IGJlY29taW5nIGFuIGFsbHkgb2YgJW4sIGFuZApsZWFkaW5nIGhpcyBhcm1pZXMgaW4gdGhlIGZpbmFsIGdyZWF0IGJhdHRsZXMuICBUaGlzIG11c3Qgbm90IGNvbWUgdG8KcGFzcyEgIFlvdSBoYXZlIHN0cmF5ZWQgZnJvbSB0aGUgJWEgcGF0aC4gIFlvdSBtdXN0IHB1cmdlIHlvdXJzZWxmLAphbmQgcmV0dXJuIGhlcmUgb25seSB3aGVuIHlvdSBoYXZlIHJlZ2FpbmVkIGEgc3RhdGUgb2YgcHVyaXR5LiJdXSwKICAgICAgfSwKICAgICAgYmFkbGV2ZWwgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltDb21lIGJhY2sgd2hlbiB5b3UgYXJlICVSYS5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siSSBzZWUgeW91IGFuZCAlbiBmaWdodGluZywgJXAuICBCdXQgeW91IGFyZSBub3QgcHJlcGFyZWQgYW5kCnNoYWxsIGRpZSBhdCAlbnMgaGFuZCBpZiB5b3UgcHJvY2VlZC4gIE5vLiAgVGhpcyB3aWxsIG5vdCBkby4KR28gYmFjayBvdXQgaW50byB0aGUgd29ybGQsIGFuZCBncm93IG1vcmUgZXhwZXJpZW5jZWQgYXQgdGhlIHdheXMgb2Ygd2FyLgpPbmx5IHdoZW4geW91IGhhdmUgcmV0dXJuZWQgJVJhIHdpbGwgeW91IGJlIGFibGUgdG8gZGVmZWF0ICVuLiJdXSwKICAgICAgfSwKICAgICAgZGlzY291cmFnZSA9IHsKICAgICAgICAgIlwiSSBhbSB5b3VyIGRlYXRoLCAlYy5cIiIsCiAgICAgICAgICJcIllvdSBjYW5ub3QgcHJldmFpbCwgJXIuICBJIGhhdmUgZm9yZXNlZW4geW91ciBldmVyeSBtb3ZlLlwiIiwKICAgICAgICAgIlwiV2l0aCB5b3Ugb3V0IG9mIHRoZSB3YXksIFZhbGhhbGxhIHdpbGwgYmUgbWluZSBmb3IgdGhlIHRha2luZy5cIiIsCiAgICAgICAgICJcIkkga2lsbGVkIHNjb3JlcyBvZiAlZHMgYmVzdCB3aGVuIEkgdG9vayAlby4gRG8geW91IHJlYWxseSB0aGluayB0aGF0IG9uZSAlYyBjYW4gc3RhbmQgYWdhaW5zdCBtZT9cIiIsCiAgICAgICAgICJcIldobyBiZWFycyB0aGUgc291bHMgb2YgJWNQIHRvIFZhbGhhbGxhLCAlcj9cIiIsCiAgICAgICAgICJcIk5vLCAlZCBjYW5ub3QgaGVscCB5b3UgaGVyZS5cIiIsCiAgICAgICAgICJcIlNvbWUgaW5zdHJ1bWVudCBvZiAlZCB5b3UgYXJlLCAlcC4gIFlvdSBhcmUgYSB3ZWFrbGluZyFcIiIsCiAgICAgICAgICJcIk5ldmVyIGhhdmUgSSBzZWVuICVjYSBzbyBjbHVtc3kgaW4gYmF0dGxlLlwiIiwKICAgICAgICAgIlwiWW91IGRpZSBub3csIGxpdHRsZSAlcy5cIiIsCiAgICAgICAgICJcIllvdXIgYm9keSBJIGRlc3Ryb3kgbm93LCB5b3VyIHNvdWwgd2hlbiBteSBob3JkZXMgb3ZlcnJ1biBWYWxoYWxsYSFcIiIsCiAgICAgIH0sCiAgICAgIGVuY291cmFnZSA9IHsKICAgICAgICAgIlwiR28gd2l0aCB0aGUgYmxlc3NpbmdzIG9mICVkLlwiIiwKICAgICAgICAgIlwiQ2FsbCB1cG9uICVkIHdoZW4geW91IGFyZSBpbiBuZWVkLlwiIiwKICAgICAgICAgIlwiVXNlICVvIGlmIHlvdSBjYW4uICBJdCB3aWxsIHByb3RlY3QgeW91LlwiIiwKICAgICAgICAgIlwiTWFnaWNhbCBjb2xkIGlzIHZlcnkgZWZmZWN0aXZlIGFnYWluc3QgJW4uXCIiLAogICAgICAgICAiXCJUbyBmYWNlICVuLCB5b3Ugd2lsbCBuZWVkIHRvIGJlIGltbXVuZSB0byBmaXJlLlwiIiwKICAgICAgICAgIlwiTWF5ICVkIHN0cmVuZ3RoZW4geW91ciBzd29yZC1hcm0uXCIiLAogICAgICAgICAiXCJUcnVzdCBpbiAlZC4gIEhlIHdpbGwgbm90IGRlc2VydCB5b3UuXCIiLAogICAgICAgICAiXCJJdCBiZWNvbWVzIG1vcmUgbGlrZWx5IHRoYXQgUmFnbmFyb2sgd2lsbCBjb21lIHdpdGggZXZlcnkgcGFzc2luZyBtb21lbnQuIFlvdSBtdXN0IGh1cnJ5LCAlcC5cIiIsCiAgICAgICAgICJcIklmICVuIGNhbiBtYXN0ZXIgJW8sIGhlIHdpbGwgYmUgcG93ZXJmdWwgZW5vdWdoIHRvIGZhY2UgJWQgZmFyIGVhcmxpZXIgdGhhbiBpcyBmYXRlZC4gIFRoaXMgbXVzdCBub3QgYmUhXCIiLAogICAgICAgICAiXCJSZW1lbWJlciB5b3VyIHRyYWluaW5nLCAlcC4gIFlvdSBjYW4gc3VjY2VlZC5cIiIsCiAgICAgIH0sCiAgICAgIGZpcnN0dGltZSA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSBhcnJpdmUgYmVsb3cgJUguICBTb21ldGhpbmcgaXMgd3Jvbmc7IHRoZXJlIGlzIGxhdmEgcHJlc2VudC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tZb3UgbWF0ZXJpYWxpemUgYXQgdGhlIGJhc2Ugb2YgYSBzbm93eSBoaWxsLiAgQXRvcCB0aGUgaGlsbCBzaXRzCmEgcGxhY2UgeW91IGtub3cgd2VsbCwgJUguICBZb3UgaW1tZWRpYXRlbHkgcmVhbGl6ZQp0aGF0IHNvbWV0aGluZyBoZXJlIGlzIHZlcnkgd3JvbmchCgpJbiBwbGFjZXMsIHRoZSBzbm93IGFuZCBpY2UgaGF2ZSBiZWVuIG1lbHRlZCBpbnRvIHN0ZWFtaW5nIHBvb2xzIG9mCndhdGVyLiAgRnVtYXJvbGVzIGFuZCBwb29scyBvZiBidWJibGluZyBsYXZhIHN1cnJvdW5kIHRoZSBoaWxsLgpUaGUgc3RlbmNoIG9mIHN1bHBodXIgaXMgY2FycmllZCB0aHJvdWdoIHRoZSBhaXIsIGFuZCB5b3UgJXggY3JlYXR1cmVzCnRoYXQgc2hvdWxkIG5vdCBiZSBhYmxlIHRvIGxpdmUgaW4gdGhpcyBlbnZpcm9ubWVudCBtb3ZpbmcgdG93YXJkcyB5b3UuXV0sCiAgICAgIH0sCiAgICAgIGdvYWxfZmlyc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltUaGlzIGlzIHRoZSBsYWlyIG9mICVuLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbW1Rocm91Z2ggY2xvdWRzIG9mIHN1bHBodXJvdXMgZ2Fzc2VzLCB5b3UgJXggYSByb2NrIHBhbGlzYWRlCnN1cnJvdW5kZWQgd2l0aCBhIG1vYXQgb2YgYnViYmxpbmcgbGF2YS4gIFlvdSByZW1lbWJlciB0aGUgZGVzY3JpcHRpb24KZnJvbSBzb21ldGhpbmcgdGhhdCAlbCBzYWlkLiAgVGhpcyBpcyB0aGUgbGFpciBvZiAlbi5dXSwKICAgICAgfSwKICAgICAgZ29hbF9uZXh0ID0gewogICAgICAgICB0ZXh0ID0gIk9uY2UgYWdhaW4sIHlvdSBzdGFuZCBpbiBzaWdodCBvZiAlbnMgbGFpci4iLAogICAgICB9LAogICAgICBnb3RpdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSBtdXN0IHJldHVybiAlbyB0byAlbC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tBcyB5b3UgcGljayB1cCAlbywgeW91ciBtaW5kIGlzIHN1ZGRlbmx5IGZpbGxlZCB3aXRoIGltYWdlcywKYW5kIHlvdSBwZXJjZWl2ZSBhbGwgb2YgdGhlIHBvc3NpYmlsaXRpZXMgb2YgZWFjaCBwb3RlbnRpYWwgY2hvaWNlIHlvdQpjb3VsZCBtYWtlLiAgQXMgeW91IGJlZ2luIHRvIGNvbnRyb2wgYW5kIGNoYW5uZWwgeW91ciB0aG91Z2h0cywgeW91CnJlYWxpemUgdGhhdCB5b3UgbXVzdCByZXR1cm4gJW8gdG8gJWwgaW1tZWRpYXRlbHkuXV0sCiAgICAgIH0sCiAgICAgIGd1YXJkdGFsa19hZnRlciA9IHsKICAgICAgICAgIlwiSGFpbCwgYW5kIHdlbGwgbWV0LCBicmF2ZSAlYy5cIiIsCiAgICAgICAgICJcIk1heSAlZCBndWlkZSB5b3VyIHN0ZXBzLCAlcC5cIiIsCiAgICAgICAgICJcIiVsQyB0b2xkIHVzIHlvdSBoYWQgc3VjY2VlZGVkIVwiIiwKICAgICAgICAgIlwiWW91IHJlY292ZXJlZCAlbyBqdXN0IGluIHRpbWUsICVwLlwiIiwKICAgICAgICAgIlwiSGFpbCAlZCwgZm9yIGRlbGl2ZXJpbmcgJW8gYmFjayB0byB1cy5cIiIsCiAgICAgIH0sCiAgICAgIGd1YXJkdGFsa19iZWZvcmUgPSB7CiAgICAgICAgICJcIkhhaWwsIGFuZCB3ZWxsIG1ldCwgYnJhdmUgJWMuXCIiLAogICAgICAgICAiXCJNYXkgJWQgZ3VpZGUgeW91ciBzdGVwcywgJXAuXCIiLAogICAgICAgICAiXCIlbEMgd2Vha2Vucy4gIFdpdGhvdXQgJW8sIGhlciBmb3Jlc2lnaHQgaXMgZGltLlwiIiwKICAgICAgICAgIlwiWW91IG11c3QgaHVycnksICVwLCBlbHNlIFJhZ25hcm9rIG1heSB3ZWxsIGNvbWUuXCIiLAogICAgICAgICAiXCJJIHdvdWxkIGRlYWwgd2l0aCB0aGlzIGZvdWwgJW4gbXlzZWxmLCBidXQgJWQgZm9yYmlkcyBpdC5cIiIsCiAgICAgIH0sCiAgICAgIGhhc2FtdWxldCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1Rha2UgdGhlIEFtdWxldCB0byAlZHMgdGVtcGxlIG9uIHRoZSBBc3RyYWwgUGxhbmUgYW5kIG9mZmVyIGl0Ll0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJFeGNlbGxlbnQsICVwLiAgSSBzZWUgeW91IGhhdmUgcmVjb3ZlcmVkIHRoZSBBbXVsZXQhCgoiWW91IG11c3QgdGFrZSB0aGUgQW11bGV0IHRvIHRoZSBHcmVhdCBUZW1wbGUgb2YgJWQsIG9uIHRoZSBBc3RyYWwKUGxhbmUuICBUaGVyZSB5b3UgbXVzdCBvZmZlciB0aGUgQW11bGV0IHRvICVkLgoKIkdvIG5vdywgbXkgJVMuICBJIGNhbm5vdCB0ZWxsIHlvdSB5b3VyIGZhdGUsIGFzIHRoZSBwb3dlciBvZiB0aGUKQW11bGV0IGludGVyZmVyZXMgd2l0aCBtaW5lLiAgSSBob3BlIGZvciB5b3VyIHN1Y2Nlc3MuIl1dLAogICAgICB9LAogICAgICBraWxsZWRfbmVtZXNpcyA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiWyVuQyBkaWVzLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbW0EgbG9vayBvZiBzdXJwcmlzZSBhbmQgaG9ycm9yIGFwcGVhcnMgb24gJW5zIGZhY2UuCgogICAgIk5vISEhICAlbyBoYXMgbGllZCB0byBtZSEgIEkgaGF2ZSBiZWVuIG1pc2xlZCEiCgpTdWRkZW5seSwgJW4gZ3Jhc3BzIGhpcyBoZWFkIGFuZCBzY3JlYW1zIGluIGFnb255LCB0aGVuIGRpZXMuXV0sCiAgICAgIH0sCiAgICAgIGxlYWRlcl9maXJzdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1dlIG5lZWQgeW91ciBhaWQuICBBcmUgeW91IHJlYWR5P10iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJBaCwgJXAsIG15ICVTLiAgWW91IGhhdmUgcmV0dXJuZWQgdG8gJUgKYXQgbGFzdC4gIFdlIGFyZSBpbiBkaXJlIG5lZWQgb2YgeW91ciBhaWQsIGJ1dCBJIG11c3QgZGV0ZXJtaW5lIGlmIHlvdQphcmUgeWV0IHJlYWR5IGZvciBzdWNoIGFuIHVuZGVydGFraW5nLgoKIkxldCBtZSByZWFkIHlvdXIgZmF0ZS4uLiJdXSwKICAgICAgfSwKICAgICAgbGVhZGVyX2xhc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltcIkJlZ29uZSBmcm9tIG15IHByZXNlbmNlIGFuZCBuZXZlciByZXR1cm4uXCJdIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siTm8sICVwLiAgWW91ciBmYXRlIGlzIHNlYWxlZC4gIEkgbXVzdCBjYXN0IGFib3V0IGZvciBhbm90aGVyCmNoYW1waW9uLiAgQmVnb25lIGZyb20gbXkgcHJlc2VuY2UsIGFuZCBuZXZlciByZXR1cm4uICBLbm93IHRoaXMsIHRoYXQKeW91IHNoYWxsIG5ldmVyIHN1Y2NlZWQgaW4gdGhpcyBsaWZlLCBhbmQgVmFsaGFsbGEgaXMgZGVuaWVkIHRvIHlvdS4iXV0sCiAgICAgIH0sCiAgICAgIGxlYWRlcl9uZXh0ID0gewogICAgICAgICB0ZXh0ID0gW1siTGV0IG1lIHJlYWQgdGhlIGZ1dHVyZSBmb3IgeW91IG5vdywgJXAsIHBlcmhhcHMgeW91IGhhdmUgbWFuYWdlZCB0bwpjaGFuZ2UgaXQgZW5vdWdoLi4uIl1dLAogICAgICB9LAogICAgICBsZWFkZXJfb3RoZXIgPSB7CiAgICAgICAgIHRleHQgPSBbWyJBZ2FpbiwgSSBzaGFsbCByZWFkIHlvdXIgZmF0ZSwgbXkgJVMuICBMZXQgdXMgYm90aCBob3BlIHRoYXQgeW91IGhhdmUKbWFkZSBjaGFuZ2VzIHRvIGJlY29tZSByZWFkeSBmb3IgdGhpcyB0YXNrLi4uIl1dLAogICAgICB9LAogICAgICBsb2NhdGVfZmlyc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltUaGlzIGlzIHRoZSBlbnRyYW5jZSB0byAlaS5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tUaGUgaWNlIGFuZCBzbm93IGdpdmVzIHdheSB0byBhIHZhbGxleSBmbG9vci4gIFlvdSAleCBhaGVhZCBvZiB5b3UKYSBodWdlIHJvdW5kIGhpbGwgc3Vycm91bmRlZCBieSBwb29scyBvZiBsYXZhLiAgVGhpcyB0aGVuIGlzIHRoZSBlbnRyYW5jZQp0byAlaS4gIEl0IGxvb2tzIGxpa2UgeW91J3JlIG5vdCBnb2luZyB0byBnZXQgaW4gd2l0aG91dAphIGZpZ2h0IHRob3VnaC5dXSwKICAgICAgfSwKICAgICAgbG9jYXRlX25leHQgPSB7CiAgICAgICAgIHRleHQgPSAiT25jZSBhZ2FpbiwgeW91IHN0YW5kIGJlZm9yZSB0aGUgZW50cmFuY2UgdG8gJWkuIiwKICAgICAgfSwKICAgICAgbmVtZXNpc19maXJzdCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1wiJW9DIGhhcyBzaG93biBtZSB0aGF0IEkgbXVzdCBraWxsIHlvdS5cIl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJTbyEgICVsQyBoYXMgZmluYWxseSBzZW50ICVjYSB0byBjaGFsbGVuZ2UgbWUhCgoiSSB0aG91Z2h0IHRoYXQgbWFzdGVyaW5nICVvIHdvdWxkIGVuYWJsZSBtZSB0byBjaGFsbGVuZ2UKJWQsIGJ1dCBpdCBoYXMgc2hvd24gbWUgdGhhdCBmaXJzdCBJIG11c3Qga2lsbCB5b3UhICBTbyBjb21lLCBsaXR0bGUKJXMuICBPbmNlIEkgZGVmZWF0IHlvdSwgSSBjYW4gYXQgbGFzdCBiZWdpbiB0aGUgZmluYWwgYmF0dGxlIHdpdGggJWQuIl1dLAogICAgICB9LAogICAgICBuZW1lc2lzX25leHQgPSB7CiAgICAgICAgIHRleHQgPSAiXCJBZ2FpbiB5b3UgY2hhbGxlbmdlIG1lLCAlci4gIEdvb2QuICBJIHdpbGwga2lsbCB5b3Ugbm93LlwiIiwKICAgICAgfSwKICAgICAgbmVtZXNpc19vdGhlciA9IHsKICAgICAgICAgdGV4dCA9ICJcIkhhdmUgeW91IG5vdCBsZWFybmVkIHlldD8gIFlvdSBjYW5ub3QgZGVmZWF0ICVuIVwiIiwKICAgICAgfSwKICAgICAgbmVtZXNpc193YW50c2l0ID0gewogICAgICAgICB0ZXh0ID0gIlwiSSB3aWxsIGtpbGwgeW91LCAlYywgYW5kIHdyZXN0ICVvIGZyb20geW91ciBtYW5nbGVkIGhhbmRzLlwiIiwKICAgICAgfSwKICAgICAgbmV4dHRpbWUgPSB7CiAgICAgICAgIHRleHQgPSAiT25jZSBhZ2FpbiwgeW91IGFyZSBuZWFyIHRoZSBhYm9kZSBvZiAlbC4iLAogICAgICB9LAogICAgICBvZmZlcmVkaXQgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltUYWtlICVvLiAgU2VhcmNoIGZvciB0aGUgQW11bGV0Ll0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbW0FzIHlvdSBhcHByb2FjaCwgJWwgcmlzZXMgYW5kIHRvdWNoZXMgJW8uCgoiWW91IG1heSB0YWtlICVvIHdpdGggeW91LCAlcC4gIEkgaGF2ZSByZW1vdmVkIGZyb20KaXQgdGhlIHBvd2VyIHRvIGZvcmV0ZWxsIHRoZSBmdXR1cmUsIGZvciB0aGF0IHBvd2VyIG5vIG1vcnRhbCBzaG91bGQKaGF2ZS4gIEl0cyBvdGhlciBhYmlsaXRpZXMsIGhvd2V2ZXIsIHlvdSBoYXZlIGF0IHlvdXIgZGlzcG9zYWwuCgoiWW91IG11c3Qgbm93IGJlZ2luIGluICVkcyBuYW1lIHRvIHNlYXJjaCBmb3IgdGhlIEFtdWxldCBvZiBZZW5kb3IuCk1heSB5b3VyIHN0ZXBzIGJlIGd1aWRlZCBieSAlZCwgbXkgJVMuIl1dLAogICAgICB9LAogICAgICBvZmZlcmVkaXQyID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbWW91IGFyZSAlb3Mga2VlcGVyIG5vdy4gIFJldHVybiB0aHJvdWdoIHRoZSBwb3J0YWwgYW5kIGZpbmQgdGhlIEFtdWxldC5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siQ2FyZWZ1bCwgJXAhICAlb0MgbWlnaHQgYnJlYWssIGFuZCB0aGF0IHdvdWxkIGJlCmEgdHJhZ2ljIGxvc3MuICBZb3UgYXJlIGl0cyBrZWVwZXIgbm93LCBhbmQgdGhlIHRpbWUgaGFzIGNvbWUgdG8KcmVzdW1lIHlvdXIgc2VhcmNoIGZvciB0aGUgQW11bGV0LiAgJVogYXdhaXQgeW91cgpyZXR1cm4gdGhyb3VnaCB0aGUgbWFnaWMgcG9ydGFsIHRoYXQgYnJvdWdodCB5b3UgaGVyZS4iXV0sCiAgICAgIH0sCiAgICAgIG90aGVydGltZSA9IHsKICAgICAgICAgdGV4dCA9IFtbQWdhaW4geW91IG1hdGVyaWFsaXplIG5lYXIgJWxzIGFib2RlLiAgWW91IGhhdmUgYSBuYWdnaW5nIGZlZWxpbmcKdGhhdCB0aGlzIG1heSBiZSB0aGUgbGFzdCB0aW1lIHlvdSBjb21lIGhlcmUuXV0sCiAgICAgIH0sCiAgICAgIHBvc3RoYW5rcyA9IHsKICAgICAgICAgdGV4dCA9IFtbIkdyZWV0aW5ncywgJXAuICBJIGhhdmUgbm90IGJlZW4gYWJsZSB0byBwYXkgYXMgbXVjaCBhdHRlbnRpb24gdG8KeW91ciBzZWFyY2ggZm9yIHRoZSBBbXVsZXQgYXMgSSBoYXZlIHdpc2hlZC4gIEhvdyBkbyB5b3UgZmFyZT8iXV0sCiAgICAgIH0sCiAgIH0sCiAgIFdpeiA9IHsKICAgICAgYXNzaWducXVlc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltUcmF2ZWwgdG8gJWk7IG92ZXJjb21lICVuOyByZXR1cm4gd2l0aCAlby5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siWWVzLCAlcCwgeW91IHRydWx5IGFyZSByZWFkeSBmb3IgdGhpcyBkaXJlIHRhc2suICBMaXN0ZW4sCmNhcmVmdWxseSwgZm9yIHdoYXQgSSB0ZWxsIHlvdSBub3cgd2lsbCBiZSBvZiB2aXRhbCBpbXBvcnRhbmNlLgoKIlNpbmNlIHlvdSBsZWZ0IHVzIHRvIGhvbmUgeW91ciBza2lsbHMgaW4gdGhlIHdvcmxkLCB3ZSB1bmV4cGVjdGVkbHkgY2FtZQp1bmRlciBhdHRhY2sgYnkgdGhlIGZvcmNlcyBvZiAlbi4gIEFzIHlvdSBrbm93LCB3ZSB0aG91Z2h0CiVuIGhhZCBwZXJpc2hlZCBhdCB0aGUgZW5kIG9mIHRoZSBsYXN0IGFnZSwgYnV0LCBhbGFzLCB0aGlzIHdhcwpub3QgdGhlIGNhc2UuCgoiJW5DIHNlbnQgYW4gYXJteSBvZiBhYm9taW5hdGlvbnMgYWdhaW5zdCB1cy4gIEFtb25nIHRoZW0gd2FzIGEKbWluaW9uLCBtaW5kbGVzcyBhbmQgZW5zb3JjZWxsZWQsIGFuZCB0aHVzLCBpbiB0aGUgY29uZnVzaW9uLCBpdCB3YXMKYWJsZSB0byBwZW5ldHJhdGUgb3VyIGRlZmVuc2VzLiAgQWxhcywgdGhpcyBjcmVhdHVyZSBoYXMgc3RvbGVuCiVvIGFuZCBJIGZlYXIgaGFzIGRlbGl2ZXJlZCAlb2ggdG8gJW4uCgoiT3ZlciB0aGUgeWVhcnMsIEkgaGFkIHdvdmVuIG1vc3Qgb2YgbXkgcG93ZXIgaW50byB0aGlzIGFtdWxldCwgYW5kIHRodXMsCndpdGhvdXQgaXQsIEkgaGF2ZSBidXQgYSBzaGFkb3cgb2YgbXkgZm9ybWVyIHBvd2VyLCBhbmQgSSBmZWFyIHRoYXQgSQpzaGFsbCBzb29uIHBlcmlzaC4KCiJZb3UgbXVzdCB0cmF2ZWwgdG8gJWksIGFuZCB3aXRoaW4gaXRzIGR1bmdlb25zLApmaW5kIGFuZCBvdmVyY29tZSAlbiwgYW5kIHJldHVybiAlbyB0byBtZS4KCiJHbyBub3csIHdpdGggJWQsIGFuZCBjb21wbGV0ZSB0aGlzIHF1ZXN0IGJlZm9yZSBpdCBpcyB0b28gbGF0ZS4iXV0sCiAgICAgIH0sCiAgICAgIGJhZGFsaWduID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbR287IGNvbWUgYmFjayB3aGVuIHlvdSBhcmUgd29ydGh5IG9mICVkLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJZb3UgYW1hemUgbWUsICVwISAgSG93IG1hbnkgdGltZXMgZGlkIEkgdGVsbCB5b3UgdGhhdCB0aGUgd2F5IG9mIGEgbWFnZQppcyBhbiBleGFjdGluZyBvbmUuICBPbmUgbXVzdCB1c2UgdGhlIHdvcmxkIHdpdGggY2FyZSwgbGVzdCBvbmUgbGVhdmUgaXQKaW4gcnVpbnMgYW5kIHNpbXBsaWZ5IHRoZSB0YXNrIG9mICVuLgoKIllvdSBtdXN0IGdvIGJhY2sgYW5kIHNob3cgeW91ciB3b3J0aGluZXNzLiAgRG8gbm90IHJldHVybiB1bnRpbCB5b3UgYXJlCnRydWx5IHJlYWR5IGZvciB0aGlzIHF1ZXN0LiAgTWF5ICVkIGd1aWRlIHlvdSBpbiB0aGlzIHRhc2suIl1dLAogICAgICB9LAogICAgICBiYWRsZXZlbCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW0dvOyByZXR1cm4gd2hlbiB5b3UgYXJlICVSYS5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siQWxhcywgJXAsIHlvdSBoYXZlIG5vdCB5ZXQgc2hvd24geW91ciBwcm9maWNpZW5jeSBhcyBhIHdvcnRoeQpzcGVsbGNhc3Rlci4gIEFzICVyYSwgeW91IHdvdWxkIHN1cmVseSBiZSBvdmVyY29tZSBpbiB0aGUgY2hhbGxlbmdlCmFoZWFkLiAgR28sIG5vdywgZXhwYW5kIHlvdXIgaG9yaXpvbnMsIGFuZCByZXR1cm4gd2hlbiB5b3UgaGF2ZSBhdHRhaW5lZApyZW5vd24gYXMgJVJhLiJdXSwKICAgICAgfSwKICAgICAgZGlzY291cmFnZSA9IHsKICAgICAgICAgIlwiWW91ciBwdW55IHBvd2VycyBhcmUgbm8gbWF0Y2ggZm9yIG1lLCBmb29sIVwiIiwKICAgICAgICAgIlwiV2hlbiB5b3UgYXJlIGRlZmVhdGVkLCB5b3VyIHRvcm1lbnQgd2lsbCBsYXN0IGZvciBhIHRob3VzYW5kIHllYXJzLlwiIiwKICAgICAgICAgIlwiQWZ0ZXIgeW91ciBkb3duZmFsbCwgJXAsIEkgc2hhbGwgZGV2b3VyICVsIGZvciBkZXNzZXJ0IVwiIiwKICAgICAgICAgIlwiQXJlIHlvdSByZWFkeSB5ZXQgdG8gYmVnIGZvciBtZXJjeT8gIEkgY291bGQgYmUgbGVuaWVudC4uLlwiIiwKICAgICAgICAgIlwiWW91ciBzb3VsIHNoYWxsIGpvaW4gdGhlIGVuc2xhdmVkIG11bHRpdHVkZSBJIGNvbW1hbmQhXCIiLAogICAgICAgICAiXCJZb3VyIGxhY2sgb2Ygd2lsbCBpcyBldmlkZW50LCBhbmQgeW91IHNoYWxsIGRpZSBhcyBhIHJlc3VsdC5cIiIsCiAgICAgICAgICJcIllvdXIgZmFpdGggaW4gJWQgaXMgZm9yIG5hdWdodCEgIENvbWUsIHN1Ym1pdCB0byBtZSBub3chXCIiLAogICAgICAgICAiXCJBIG1lcmUgJXIgaXMgbm90aGluZyBjb21wYXJlZCB0byBteSBza2lsbCFcIiIsCiAgICAgICAgICJcIlNvLCB5b3UgYXJlIHRoZSBiZXN0IGhvcGUgb2YgJWw/ICBIb3cgZHJvbGwuXCIiLAogICAgICAgICAiXCJGZWVsIG15IHBvd2VyLCAlYyEgIE15IHZpY3RvcnkgaXMgaW1taW5lbnQhXCIiLAogICAgICB9LAogICAgICBlbmNvdXJhZ2UgPSB7CiAgICAgICAgICJcIkJld2FyZSwgZm9yICVuIGlzIGltbXVuZSB0byBtb3N0IG1hZ2ljYWwgYXR0YWNrcy5cIiIsCiAgICAgICAgICJcIlRvIGVudGVyICVpIHlvdSBtdXN0IHBhc3MgbWFueSB0cmFwcy5cIiIsCiAgICAgICAgICJcIiVuQyBtYXkgYmUgdnVsbmVyYWJsZSB0byBwaHlzaWNhbCBhdHRhY2tzLlwiIiwKICAgICAgICAgIlwiJWQgd2lsbCBjb21lIHRvIHlvdXIgYWlkIHdoZW4geW91IGNhbGwuXCIiLAogICAgICAgICAiXCJZb3UgbXVzdCB1dHRlcmx5IGRlc3Ryb3kgJW4uICBIZSB3aWxsIHB1cnN1ZSB5b3Ugb3RoZXJ3aXNlLlwiIiwKICAgICAgICAgIlwiJW9DIGlzIGEgbWlnaHR5IGFydGlmYWN0LiAgV2l0aCBpdCB5b3UgY2FuIGRlc3Ryb3kgJW4uXCIiLAogICAgICAgICAiXCJHbyBmb3J0aCB3aXRoIHRoZSBibGVzc2luZ3Mgb2YgJWQuXCIiLAogICAgICAgICAiXCJJIHdpbGwgaGF2ZSBteSAlZ1Agd2F0Y2ggZm9yIHlvdXIgcmV0dXJuLlwiIiwKICAgICAgICAgIlwiRmVlbCBmcmVlIHRvIHRha2UgYW55IGl0ZW1zIGluIHRoYXQgY2hlc3QgdGhhdCBtaWdodCBhaWQgeW91LlwiIiwKICAgICAgICAgIlwiWW91IHdpbGwga25vdyB3aGVuICVvIGlzIG5lYXIuICBQcm9jZWVkIHdpdGggY2FyZSFcIiIsCiAgICAgIH0sCiAgICAgIGZpcnN0dGltZSA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1lvdSBoYXZlIGFycml2ZWQgYXQgJWxzIHRvd2VyIGJ1dCBzb21ldGhpbmcgaXMgdmVyeSB3cm9uZy5dIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1tZb3UgYXJlIHN1ZGRlbmx5IGluIGZhbWlsaWFyIHN1cnJvdW5kaW5ncy4gIFlvdSBub3RpY2Ugd2hhdCBhcHBlYXJzIHRvCmJlIGEgbGFyZ2UsIHNxdWF0IHN0b25lIHN0cnVjdHVyZSBuZWFyYnkuICBXYWl0ISAgVGhhdCBsb29rcyBsaWtlIHRoZQp0b3dlciBvZiB5b3VyIGZvcm1lciB0ZWFjaGVyLCAlbC4KCkhvd2V2ZXIsIHRoaW5ncyBhcmUgbm90IHRoZSBzYW1lIGFzIHdoZW4geW91IHdlcmUgbGFzdCBoZXJlLiAgTWlzdHMgYW5kCmFyZWFzIG9mIHVuZXhwbGFpbmVkIGRhcmtuZXNzIHN1cnJvdW5kIHRoZSB0b3dlci4gIFRoZXJlIGlzIG1vdmVtZW50IGluCnRoZSBzaGFkb3dzLgoKWW91ciB0ZWFjaGVyIHdvdWxkIG5ldmVyIGFsbG93IHN1Y2ggdW5hZXN0aGV0aWMgZm9ybXMgdG8gc3Vycm91bmQgdGhlCnRvd2VyLi4uICB1bmxlc3Mgc29tZXRoaW5nIHdlcmUgZHJlYWRmdWxseSB3cm9uZyFdXSwKICAgICAgfSwKICAgICAgZ29hbF9hbHQgPSB7CiAgICAgICAgIHRleHQgPSAiWW91IGhhdmUgcmV0dXJuZWQgdG8gJW5zIGxhaXIuIiwKICAgICAgfSwKICAgICAgZ29hbF9maXJzdCA9IHsKICAgICAgICAgdGV4dCA9ICJZb3UgZmVlbCB5b3VyIG1lbnRvcidzIHByZXNlbmNlOyBwZXJoYXBzICVvIGlzIG5lYXJieS4iLAogICAgICB9LAogICAgICBnb2FsX25leHQgPSB7CiAgICAgICAgIHRleHQgPSAiVGhlIGF1cmEgb2YgJW8gdGluZ2xlcyBhdCB0aGUgZWRnZSBvZiB5b3VyIHBlcmNlcHRpb24uIiwKICAgICAgfSwKICAgICAgZ290aXQgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgZmVlbCAlb3MgcG93ZXIgYW5kIGtub3cgeW91IHNob3VsZCByZXR1cm4gJW9oIHRvICVsLl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbW0FzIHlvdSB0b3VjaCAlbywgaXRzIGNvbWZvcnRpbmcgcG93ZXIgaW5mdXNlcyB5b3UKd2l0aCBuZXcgZW5lcmd5LiAgWW91IGZlZWwgYXMgaWYgeW91IGNhbiBkZXRlY3Qgb3RoZXJzJyB0aG91Z2h0cyBmbG93aW5nCnRocm91Z2ggaXQuICBBbHRob3VnaCB5b3UgeWVhcm4gdG8gd2VhciAlbyBhbmQKYXR0YWNrIHRoZSBXaXphcmQgb2YgWWVuZG9yLCB5b3Uga25vdyB5b3UgbXVzdCByZXR1cm4gaXQgdG8gaXRzIHJpZ2h0ZnVsCm93bmVyLCAlbC5dXSwKICAgICAgfSwKICAgICAgZ3VhcmR0YWxrX2FmdGVyID0gewogICAgICAgICAiXCJJIGhhdmUgc29tZSBleWUgb2YgbmV3dCB0byB0cmFkZSwgZG8geW91IGhhdmUgYSBzcGFyZSBibGluZC13b3JtJ3Mgc3Rpbmc/XCIiLAogICAgICAgICAiXCJUaGUgbWFnaWMgcG9ydGFsIG5vdyBzZWVtcyBsaWtlIGl0IHdpbGwgcmVtYWluIHN0YWJsZSBmb3IgcXVpdGUgc29tZSB0aW1lLlwiIiwKICAgICAgICAgIlwiSGF2ZSB5b3Ugbm90aWNlZCBob3cgbXVjaCBzdHJvbmdlciAlbCBpcyBzaW5jZSAlbyB3YXMgcmVjb3ZlcmVkP1wiIiwKICAgICAgICAgIlwiVGhhbmsgJWQhICBXZSB3ZXJlbid0IHBvc2l0aXZlIHlvdSB3b3VsZCBkZWZlYXQgJW4uXCIiLAogICAgICAgICAiXCJJLCB0b28sIHdpbGwgdmVudHVyZSBpbnRvIHRoZSB3b3JsZCwgYmVjYXVzZSAlbiB3YXMgYnV0IG9uZSBvZiBtYW55IGV2aWxzIHRvIGJlIHZhbnF1aXNoZWQuXCIiLAogICAgICB9LAogICAgICBndWFyZHRhbGtfYmVmb3JlID0gewogICAgICAgICAiXCJXb3VsZCB5b3UgaGFwcGVuIHRvIGhhdmUgc29tZSBleWUgb2YgbmV3dCBpbiB0aGF0IG92ZXJzdHVmZmVkIHBhY2ssICVzP1wiIiwKICAgICAgICAgIlwiQWgsIHRoZSBzcGVsbCB0byBjcmVhdGUgdGhlIG1hZ2ljIHBvcnRhbCB3b3JrZWQuICBPdXRzdGFuZGluZyFcIiIsCiAgICAgICAgICJcIkh1cnJ5ISAgJWxDIG1heSBub3Qgc3Vydml2ZSB0aGF0IGNhc3Rpbmcgb2YgdGhlIHBvcnRhbCBzcGVsbCFcIiIsCiAgICAgICAgICJcIlRoZSBzcGVsbHMgb2YgJW4gd2VyZSBqdXN0IHRvbyBwb3dlcmZ1bCBmb3IgdXMgdG8gd2l0aHN0YW5kLlwiIiwKICAgICAgICAgIlwiSSwgdG9vLCB3aWxsIHZlbnR1cmUgaW50byB0aGUgd29ybGQsIGJlY2F1c2UgJW4gaXMgYnV0IG9uZSBvZiBtYW55IGV2aWxzIHRvIGJlIHZhbnF1aXNoZWQuXCIiLAogICAgICB9LAogICAgICBoYXNhbXVsZXQgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltUYWtlIHRoZSBBbXVsZXQgdG8gJWRzIGFsdGFyIG9uIHRoZSBBc3RyYWwgUGxhbmUuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIkNvbmdyYXR1bGF0aW9ucywgJXAuICBJIGFsd2F5cyBrbmV3IHRoYXQgaWYgYW55b25lIGNvdWxkIHN1Y2NlZWQKaW4gZGVmZWF0aW5nIHRoZSBXaXphcmQgb2YgWWVuZG9yIGFuZCBoaXMgbWluaW9ucywgaXQgd291bGQgYmUgeW91LgoKIkdvIG5vdywgYW5kIHRha2UgdGhlIEFtdWxldCB0byB0aGUgQXN0cmFsIFBsYW5lLiAgT25jZSB0aGVyZSwgcHJlc2VudAp0aGUgQW11bGV0IG9uIHRoZSBhbHRhciBvZiAlZC4gIEFsb25nIHRoZSB3YXkgeW91IHNoYWxsIHBhc3MgdGhyb3VnaAp0aGUgZm91ciBFbGVtZW50YWwgUGxhbmVzLiAgVGhlc2UgcGxhbmVzIGFyZSBsaWtlIG5vdGhpbmcgeW91IGhhdmUgZXZlcgpleHBlcmllbmNlZCBiZWZvcmUsIHNvIGJlIHByZXBhcmVkIQoKIkZvciB0aGlzIHlvdSB3ZXJlIGJvcm4sICVzISAgSSBhbSB2ZXJ5IHByb3VkIG9mIHlvdS4iXV0sCiAgICAgIH0sCiAgICAgIGtpbGxlZF9uZW1lc2lzID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbJW5DIGN1cnNlcyB5b3UgYXMgJW5oIGRpZXMuXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbJW5DLCB3aG9zZSBib2R5IGJlZ2lucyB0byBzaHJpdmVsIHVwLCBjcm9ha3Mgb3V0OgoKICAgICJJIHNoYWxsIGhhdW50IHlvdXIgcHJvZ3Jlc3MgdW50aWwgdGhlIGVuZCBvZiB0aW1lLiAgQSB0aG91c2FuZAogICAgY3Vyc2VzIG9uIHlvdSBhbmQgJWwuIgoKVGhlbiwgdGhlIGJvZHkgYnVyc3RzIGludG8gYSBjbG91ZCBvZiBjaG9raW5nIGR1c3QsIGFuZCBibG93cyBhd2F5Ll1dLAogICAgICB9LAogICAgICBsZWFkZXJfZmlyc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltZb3UgaGF2ZSBjb21lIGEgbG9uZyB3YXksIGJ1dCBhcmUgeW91IHJlYWR5IGZvciB0aGUgdGFzayBJIHJlcXVpcmU/XSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIkNvbWUgY2xvc2VyLCAlcCwgZm9yIG15IHZvaWNlIGZhbHRlcnMgaW4gbXkgb2xkIGFnZS4KWWVzLCBJIHNlZSB0aGF0IHlvdSBoYXZlIGNvbWUgYSBsb25nIHdheSBzaW5jZSB5b3Ugd2VudCBvdXQgaW50byB0aGUKd29ybGQsIGxlYXZpbmcgdGhlIHNhZmUgY29uZmluZXMgb2YgdGhpcyB0b3dlci4gIEhvd2V2ZXIsIEkgbXVzdCBmaXJzdApkZXRlcm1pbmUgaWYgeW91IGhhdmUgYWxsIG9mIHRoZSBza2lsbHMgcmVxdWlyZWQgdG8gdGFrZSBvbiB0aGUgdGFzawpJIHJlcXVpcmUgb2YgeW91LiJdXSwKICAgICAgfSwKICAgICAgbGVhZGVyX2xhc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltcIkdldCBvdXQgb2YgaGVyZSFcIl0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJZb3UgZm9vbCwgJXAhICBXaHkgZGlkIEkgd2FzdGUgYWxsIG9mIHRob3NlIHllYXJzIHRlYWNoaW5nIHlvdQp0aGUgZXNvdGVyaWMgYXJ0cz8gIEdldCBvdXQgb2YgaGVyZSEgIEkgc2hhbGwgZmluZCBhbm90aGVyLiJdXSwKICAgICAgfSwKICAgICAgbGVhZGVyX25leHQgPSB7CiAgICAgICAgIHRleHQgPSAiXCJXZWxsLCAlcCwgeW91IGhhdmUgcmV0dXJuZWQuICBQZXJoYXBzIHlvdSBhcmUgbm93IHJlYWR5Li4uXCIiLAogICAgICB9LAogICAgICBsZWFkZXJfb3RoZXIgPSB7CiAgICAgICAgIHRleHQgPSBbWyJUaGlzIGlzIGdldHRpbmcgdGVkaW91cywgJXAsIGJ1dCBwZXJzZXZlcmFuY2UgaXMgYSBzaWduIG9mIGEgdHJ1ZSBtYWdlLgpJIGNlcnRhaW5seSBob3BlIHRoYXQgeW91IGFyZSB0cnVseSByZWFkeSB0aGlzIHRpbWUhIl1dLAogICAgICB9LAogICAgICBsb2NhdGVfZmlyc3QgPSB7CiAgICAgICAgIHRleHQgPSAiV2lzcHMgb2YgZm9nIHN3aXJsIG5lYXJieS4gIFlvdSBmZWVsIHRoYXQgJW5zIGxhaXIgaXMgY2xvc2UuIiwKICAgICAgfSwKICAgICAgbG9jYXRlX25leHQgPSB7CiAgICAgICAgIHRleHQgPSAiWW91IGJlbGlldmUgdGhhdCB5b3UgbWF5IG9uY2UgYWdhaW4gaW52YWRlICVpLiIsCiAgICAgIH0sCiAgICAgIG5lbWVzaXNfZmlyc3QgPSB7CiAgICAgICAgIHN5bm9wc2lzID0gIltcIllvdXIgZGVzdHJ1Y3Rpb24gc2hvdWxkIG1ha2UgZm9yIGdvb2Qgc3BvcnQuXCJdIiwKICAgICAgICAgb3V0cHV0ID0gInRleHQiLAogICAgICAgICB0ZXh0ID0gW1siQWgsIEkgcmVjb2duaXplIHlvdSwgJXAuICBTbywgJWwgaGFzIHNlbnQgeW91IHRvIHN0ZWFsCiVvIGZyb20gbWUsIGhtbW0/ICBXZWxsLCAlbGggaXMgYSBmb29sIHRvIHNlbmQgc3VjaAphIG1lbnRhbCB3ZWFrbGluZyBhZ2FpbnN0IG1lLgoKIllvdXIgZGVzdHJ1Y3Rpb24sIGhvd2V2ZXIsIHNob3VsZCBtYWtlIGZvciBnb29kIHNwb3J0LiAgSW4gdGhlIGVuZCwgeW91CnNoYWxsIGJlZyBtZSB0byBraWxsIHlvdSEiXV0sCiAgICAgIH0sCiAgICAgIG5lbWVzaXNfbmV4dCA9IHsKICAgICAgICAgc3lub3BzaXMgPSAiW1wiWW91ciBzb3VsIHNoYWxsIHNvb24gYmUgbWluZSB0byBjb21tYW5kLlwiXSIsCiAgICAgICAgIG91dHB1dCA9ICJ0ZXh0IiwKICAgICAgICAgdGV4dCA9IFtbIkhvdyBuaWNlIG9mIHlvdSB0byByZXR1cm4sICVwISAgSSBlbmpveWVkIG91ciBsYXN0IG1lZXRpbmcuICBBcmUgeW91CnN0aWxsIGh1bmdyeSBmb3IgbW9yZSBwYWluPwoKIkNvbWUhICBZb3VyIHNvdWwsIGxpa2UgJW8sIHNoYWxsIHNvb24gYmUgbWluZSB0byBjb21tYW5kLiJdXSwKICAgICAgfSwKICAgICAgbmVtZXNpc19vdGhlciA9IHsKICAgICAgICAgdGV4dCA9IFtbIkknbSBzdXJlIHRoYXQgeW91ciBwZXJzZXZlcmFuY2Ugc2hhbGwgYmUgdGhlIHN1YmplY3Qgb2YgaW5udW1lcmFibGUKYmFsbGFkcywgYnV0IHlvdSBzaGFsbCBub3QgYmUgYXJvdW5kIHRvIGhlYXIgdGhlbSwgSSBmZWFyISJdXSwKICAgICAgfSwKICAgICAgbmVtZXNpc193YW50c2l0ID0gewogICAgICAgICB0ZXh0ID0gW1siVGhpZWYhICAlb0MgYmVsb25ncyB0byBtZSwgbm93LiAgSSBzaGFsbCBmZWVkCnlvdXIgbGl2aW5nIGZsZXNoIHRvIG15IG1pbmlvbnMuIl1dLAogICAgICB9LAogICAgICBuZXh0dGltZSA9IHsKICAgICAgICAgdGV4dCA9ICJPbmNlIGFnYWluLCB5b3UgYXJlIGJhY2sgYXQgJUguIiwKICAgICAgfSwKICAgICAgb2ZmZXJlZGl0ID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbVGFrZSAlbyB3aXRoIHlvdSBpbiB5b3VyIHF1ZXN0IGZvciB0aGUgQW11bGV0Ll0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyVsQyBub3RpY2VzICVvIGluIHlvdXIgcG9zc2Vzc2lvbiwKYmVhbXMgYXQgeW91IGFuZCBzYXlzOgoKICAgICJJIGtuZXcgeW91IGNvdWxkIGRlZmVhdCAlbiBhbmQgcmV0cmlldmUKICAgICVvLiAgV2Ugc2hhbGwgbmV2ZXIgZm9yZ2V0IHRoaXMKICAgIGJyYXZlIHNlcnZpY2UuCgogICAgIlRha2UgJW9oIHdpdGggeW91IGluIHlvdXIgcXVlc3QgZm9yIHRoZSBBbXVsZXQgb2YgWWVuZG9yLgogICAgSSBjYW4gc2Vuc2UgdGhhdCBpdCBoYXMgYXR0dW5lZCAlb2lzZWxmIHRvIHlvdSBhbHJlYWR5LgoKICAgICJNYXkgJWQgZ3VpZGUgeW91IGluIHlvdXIgcXVlc3QsIGFuZCBrZWVwIHlvdSBmcm9tIGhhcm0uIl1dLAogICAgICB9LAogICAgICBvZmZlcmVkaXQyID0gewogICAgICAgICBzeW5vcHNpcyA9ICJbS2VlcCAlbywgcmV0dXJuIHRocm91Z2ggdGhlIHBvcnRhbCB0byAlWjsgZmluZCB0aGUgb3RoZXIgQW11bGV0Ll0iLAogICAgICAgICBvdXRwdXQgPSAidGV4dCIsCiAgICAgICAgIHRleHQgPSBbWyJZb3UgYXJlIHRoZSBrZWVwZXIgb2YgJW8gbm93LiAgSXQgaXMgdGltZSB0bwpyZWNvdmVyIHRoZSAvb3RoZXIvIEFtdWxldC4gICVaIGF3YWl0IHlvdXIgcmV0dXJuIHRocm91Z2gKdGhlIG1hZ2ljIHBvcnRhbCB3aGljaCBicm91Z2h0IHlvdSBoZXJlLiJdXSwKICAgICAgfSwKICAgICAgb3RoZXJ0aW1lID0gewogICAgICAgICB0ZXh0ID0gW1tZb3UgYXJlIGJhY2sgYXQgJUguCllvdSBoYXZlIGFuIG9kZCBmZWVsaW5nIHRoaXMgbWF5IGJlIHRoZSBsYXN0IHRpbWUgeW91IGV2ZXIgY29tZSBoZXJlLl1dLAogICAgICB9LAogICAgICBwb3N0aGFua3MgPSB7CiAgICAgICAgIHRleHQgPSBbWyJDb21lIG5lYXIsIG15ICVTLCBhbmQgc2hhcmUgeW91ciBhZHZlbnR1cmVzIHdpdGggbWUuClNvLCBoYXZlIHlvdSBzdWNjZWVkZWQgaW4geW91ciBxdWVzdCBmb3IgdGhlIEFtdWxldCBvZiBZZW5kb3I/Il1dLAogICAgICB9LAogICB9LAp9CiMJVGhpcyBkYXRhIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5ICdtYWtlZGVmcycuICBEbyBub3QgZWRpdC4gCjAzNjksMDIzNTQ5LDAwMDA2ZDswMzk0LDAyNTUxNSwwMDVjNmE7MCwwLDAwYzAxNQpAImZkeW9mYmd8ZSJnaX4hYGEoZmRwfShlcmdifXwha2IoaW53I3p1IXZhZHVxY3BgeWIsW1dPXl1bVwpAImdpfmVnaGlyc3dpKHFnZG1wdWUic2FkaSJ3bWZkbCRrcW9maG1jIXFsZ2dyInBgdSF1ZXEwdmtwYDBgImlpd2hhZWQwbWtjYGQvCkAiZ3p1YG8keHlkImxpYyF2c2cwdHFheyohZGtndC8sKihxb2YkbX51Z3Z8cWhsaW1+dSxbV09eXVtXCkAiZ3ppcnZlZDBxbmV8dSFvZWF8IXVtZHwhbGt8MHN3d3w+Xl1bV09eXVtXT15dW1dPXl1bV09eXVtXCkAib2lkYGxlKH1oZWx8MHJubWt1IWMkf39zbyRhfiF2c2c+Xl1bV09eXVtXT15dW1dPXl1bV09eXVtXCkAiaWl3aGEkfn9sa3AoYHRvdChzbndobDBjZyR9Y2RkcWQwZ212KHdud3ZlcW9mdyZPXl1bV09eXVtXCkAianF9cWokY35udXcoeG51JHx/IXdqZH9iaSRreGBrans+Xl1bV09eXVtXT15dW1dPXl1bV09eXVtXCkAidGdkaG1qKH9nImZkeW9mam1jciJobWRyIn1nZSFxYW0waGxyYWNoYGhtMHVqbWZ3cixbV09eXVtXCkAidHp5ZHFwKHNgbCRvdXUicGB1IWVrbGMhdmsofGhxcG1+IWdle3lteypXT15dW1dPXl1bV09eXVtXCkAidHp5ZHFwbWNyImVmdCFjJH55c2VtZjB4bXEofWhlbHwwY2coKHJ0diR8eGB2JH1+aGFren4hdWtmN3UiZ2liZCwKQCJ2YX5mImtuMGJtam58aGFwKHlyImUocmBmJHx4aGxjKHlnInBgdXNnJGFjIWMkZmVzcWEoeW8icGB1IXBrZ30vCkAid2B/c3Yke2ducGAoeXIiamdkIWN3KHdubWAocXIiZSh8bmxjKGN2bXZsPl5dW1dPXl1bV09eXVtXCkAid31zYndmfWMhdW1kfCFlayh2YHBwYHVzInBgcW8iZSh+eG90YD5eXVtXT15dW1dPXl1bV09eXVtXCkAic2l+ZSJnaX4hZ3xnYmJrfm0wYCJ0aWN1ImFwYG1tdm1iJnEkb3hucXAmT15dW1dPXl1bV09eXVtXCkBhbWwwY25ramMhcWxnZW1mJGp1IWNwfHFiaWFsMGNjdm09aWNqbHVlLFtXT15dW1dPXl1bV09eXVtXCkBkYml5c3Ekf3l1aiRmaWxybHswYHBhKH9ndmFmMHdndnEwZHp0bX5ya3JtPl5dW1dPXl1bV09eXVtXCkBkdml5ZSJrbjBve2l4eHI9JChHZGN2KHEhcG1mdyFtYihxZW12Zn1kbHAmT15dW1dPXl1bV09eXVtXCkBkdml5ZSJrbjB4bXF6MHdjaH1xY25hezBjZ21mdyFxcGd8ZGw7KDBCY3Z6aSFva3p1IWhxZnsgXVtXCkBuc2lpciJmbTBgdWV6dSFtYihkaWckeHhgcWEof2cicGB1IW9rZ34gXVtXT15dW1dPXl1bV09eXVtXCkBuc2lpciJ3f3VkciR8eGQiYmR/bnAkanVnbXZtMGRsY3pxd2tqbzBob3RnYnVjanwwbGd3e3FmZ3cmCkBvcWR1dXEkZ3YhW2FmdG5wJGliZCJsaWJlInBnMGxjb20+ISJBfnVvImJnYiFjJH9xb2YkZ3YhdW17eGhsYyYKQGwkbXx3Z2ooc21tZWMwaHEkfWNkZHFkMGBlZWF+cnYkZXFma2cmT15dW1dPXl1bV09eXVtXT15dW1cKQGwkfX1jZ3YoeHRubyhzYGwkanUhYyRrf29kcXt5b2Uke3lmanAmT15dW1dPXl1bV09eXVtXT15dW1cKQHEkS2JubyRhYyFvfShnaHZqbWNyLiRBN21uJGZ1d2d2KHduImx9fmZwfShxZmNtZjFeXVtXT15dW1cKQHFvYX5mImVqf3R2JGV/b3FwbWJyImlpaSFgYShmZHB9KGVyZ2J9fC9dW1dPXl1bV09eXVtXT15dW1cKQHZwaXNqImhnfmYic2dibHEkbmJubyR8eGQidm1xcyIpJTB1amV8MGhxJHt/IW9xa3ghcWVudXMjW1cKQHZwaXNqa2pvMGBsJG11bSJzYHVzZyR8eGRwYSh5ciJqZ35kIm17MHRxcWl8bXskaTBnY3BpfCFvbXtkYGlhKQpDY2pscWZram8wdm1xZnRyImxtfHFxJGN1ZHIkfWAhY3R4dWBwZWZzZHEqV09eXVtXT15dW1dPXl1bVwpDY3dgeW9lJGV/b3FwbWJyInNhZGkiZShybnUkYWMhbGt8MHJ3Z2AwYCJjZ39lIm1sdWAsW1dPXl1bVwpDZyRrcXNnYn18ICIkXHhkIlNhamBwYCh9YHskeHxgbCRpfiFjaWplcmolV09eXVtXT15dW1dPXl1bVwpDZyRmeWJnJHx/IWMkZmVzcWEyMCFScXwwYHVlcTB4bXF6MHZnZXh/byJlZnQhdmVjdSFtYm4weG1xejBibmt8eGRxKgpDZ21mdyFmbW91cnZhbDBocSRpMHFjbWZ2dG5ocTBybmt/MHFwa2t1cnEqV09eXVtXT15dW1dPXl1bVwpDbmVmeyFxZ3p/bW53KH1gaWEofW5wYSh5b3ZhenVydm1mdyFwYWl0aGxjJk9eXVtXT15dW1dPXl1bVwpDbm1mdD4iJEtxdWFsKHEhZGhncXVram8wZHthKU9eXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpDbWtjY2RuaG1iciJqbWZkcCR6dWBmJHtzc21oZGM6InBgdXgiaWF3aXYkb3V1ImdpYnNrYWwwYHVlcT4KQmphZXlydnZxMDAyNTIwT2dybWIhcmt9YiF1ZXx1cyJtZmRuImVreWUsW1dPXl1bV09eXVtXT15dW1cKQm1qa3lyZyRrf29zcW1jdTgkKFNubHB6f20uJGt/b2Rxe3UtImdnfmt3dm08IWFrZnRkb2omT15dW1cKQm1qe3VzdGEodW9ndm9pLSJwfWJvImtudiF2bG0wbWtjYGRyLFtXT15dW1dPXl1bV09eXVtXT15dW1cKRWtjb3lvZSR9YCFjJG9iYHRhKHNud2hsMGNnJGkwY2NgKHllZ2UmPi9dW1dPXl1bV09eXVtXT15dW1cKRWtoYWRpa3FlMGJwfXtkYG53KHFzZyR6cXNnJGF+ZWdhbD5eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKRW1jezBgcGEocXV2dmlzdWdgKHJ4InBgdSFxaW18bSJrbjB1cG14dS9dW1dPXl1bV09eXVtXT15dW1cKRW1jezBgcGEoY3RyYXpjdWtwYX90cT8oZGlnfSh+ZHRhejBydmF4MG5sJGtlc3FhbDBodmFlYy9dW1cKRW1jezBuZCRveG5xcHswYHBhZjd1ImVmd3N7KCh6dHFwKHh0bGN6aS9dW1dPXl1bV09eXVtXT15dW1cKRW1qL2QhZGt6d2R2JSgwTWN2b3UhZmtvYyFjdm0wTFdHQDBpY3ZsdXMicGcwamtoZDB1amVmMG1rcHx8ZCJgZ3dyLApFbWovZCFuZXt4IW1xfDBgdiR4dW5yaG0wdmptZHUhYGhhfmVnYCZPXl1bV09eXVtXT15dW1dPXl1bVwpFbWovZCFvYXtjIXVtfHghcWxnYGpnYXh1c3EoKH9zIn1nZSZuaCh3ZHYkfHhkIkN9eW1mJGl2dWd2KGludyoKRXBlb39vcSRmdXdndihnaWt0KGRpZ216MGJqbWR0c2dqMzB1amFxMHZtcWR0byVwKHZkZ2goeXUjW1cKRGNwKGlud3Yoc2BwdmdkciwkKERpZ30vYmQiY2d/ZSJiZ2Ihe2t9YiFnfW1jL11bV09eXVtXT15dW1cKRGNwYX5mImUodnNnYXJ5b2Uke2BpZ3ZtMGhxJGR5amckbXF1a2pvMGAifW1kaCxbV09eXVtXT15dW1cKRGNwYX5mImUoe2huaG1iIWBhbTBocSRkeWpnJG1xdWtqbzBgIndrf3NybWd+L11bV09eXVtXT15dW1cKRGNwYX5mImUoZGRsY30waHEkZHlqZyRtcXVram8wYCJqcX1xaipXT15dW1dPXl1bV09eXVtXT15dW1cKRGNwYX5mImUoZ3NjbXx4IWt3KHEhcGF/cXNmbWZ3IWd8eHVza2Fmc2QjW1dPXl1bV09eXVtXT15dW1cKRGNwYX5mInFmYGBrYCh8ZHJ2bXNpY3FmYyFvZXEwY2ckaXR3Y2p8cWZna31jL11bV09eXVtXT15dW1cKRG5mbWJkdmwoeGBxJHllaHZhKHEhcGF4ZXVjcGF/byJlen90bGAoZGlnd20wcWN2fGMvXVtXT15dW1cKRG5iKHNucHR7dXIiZXp1IWtqa39scmV8eWNuYShnaHZsKGRpZyR7cW9maWl+LSJlZnQhY3AoZGhvYXswdWphKHduZncocXIic218bSwKRG5ybX4hYWhncWpxJGtxb2xrfDBzd3d8Pl5dW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKRG5ybWMhYWVmMGlnaHgweG1xKHZkZ2gofGRxdyhkaHBhbD5eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKRHRhZjBkdG1kMHFuZXF1c3EkYHF3ZyRpMGZ3ZXp0aGNqKHFvZWFkPl5dW1dPXl1bV09eXVtXT15dW1cKRHRhejBnbXFveHUic2FkaSJlZjBkbGdgcW92YWwwdW1rfHg+XVtXT15dW1dPXl1bV09eXVtXT15dW1cKRHRhejB1cG1tdCFwYWl0aGxjKGdpa2htMGJtam5lcmdgN09eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKRHRhejB1cG1tdCF2ayhgdHYkaTB1cGtkfCFranx/IWMkZHFzZWEocm56O1dPXl1bV09eXVtXT15dW1cKRHRhejB2bWpsdXNnYChnaXskZ35kInNnZW1mJH9xb3YkfH8hZm14MHJtaW1kaWtqbzBobCRpMHFtcGF/bz0KRHp0bX5ya3JtMGJjaW1iYHEkYHF3ZyR4dW9ncHpxdWtqbzBnbmV7eCFubW94dXEqV09eXVtXT15dW1cKRHpwenEhcXBpeXNhZXt1ciJobXFlInBnMGR6cHpxIW5hfnVtcSpXT15dW1dPXl1bV09eXVtXT15dW1cKR2themkhbmF8ZGRwdyh9aGVsfDBlZ3BtYiFva2ZjdWd2ez5eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKR212KHEhZWtndCF2bWV1IWdqb2JgdGEocERuZm1iZHZsLz5eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKRmdpezBgcGEoZG5tJHhiZGFtZ2VyInBnMGNnJHx4c21zZjBgdWVxMGJjdm18ZHF3ZGkvXVtXT15dW1cKRmdwfHlvZSRgZW9ldnEvISJXfH9xInNtcXNram8wc2tqb2MgXVtXT15dW1dPXl1bV09eXVtXT15dW1cKRmdwfHlvZSR8f24ic2libD0kKERgaWEof2dkJHx4YHYkSX10bmF8MG5kJFF1b2ZrejBgbGAoY3VjfShxdmN9KHZzbWkoZGlnJG1oaHYlCkZtYHswZHp0bXN1InBgdSFgYXtkIWR2Z30hdmxteXMidHp5ZHFwYH9uZipXT15dW1dPXl1bV09eXVtXCkZtYHswbW1rYzBlbXNmMHVqYWFiIWxre3VyImV8MGVnaWF3bmZ3Jk9eXVtXT15dW1dPXl1bV09eXVtXCkZtYHswbW1ybTBiY3B7MGBsYCh0bmV3Jk9eXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXCkZtcChxIXNxbWN1a2tmLyEiUHppIXBhaz5mY2ltYy9wa29lZG5tY3UvbGF8eGBhbyZPXl1bV09eXVtXCkZwZX51IXBranJkcHcoY25vYXx5bGd3KHdkdiR6eWJqKldPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXCkZ3fShdbmxwaXchaWFtYHIibGFjIXFnen9tbncoeW8iZShyYGUqV09eXVtXT15dW1dPXl1bV09eXVtXCkljamx8ZCJ9Z2VzImJkcXJpdyhzYHBhbmVtbn0oPSwicGB1c2ckZXlmanAocmQiZSh3aW13fDBobHdhdGQjCkltaHEwdmNwbWIhamV7MGxjanEwdHFhez5eXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXCkltdnt1ciJwemVydiR8eGRrdihiaGZhemMtImF+dW8ic2B1byJqZ2QhcWsodGRxYXpmZGYqV09eXVtXCkl3am91cyJtezBgImdnfmd3d2F+ZiJhcGBkcG1tfmJnJG5/cyJlKHRuZSVXT15dW1dPXl1bV09eXVtXCkgia2ZzZCJvZnV2ImUoeGBhb21iIXVsZzBgdmEoZG5tJG5xcnYkaX5lImdgf2pnYChkbiJgbXF1aipXCkgid2V1bW4kaTBsY35tMG5kJHxnaHFwcTBta3B8fGQidGljcmNjbWMvXVtXT15dW1dPXl1bV09eXVtXCkgic2FjaSJNKH5kdGF6MHZrd2B1ZSJlKGdgbGAof2cic2FjaWtqbz4hIixfeXJqYn18IXZsYX5qa2pvPigKSCJzZ2VtZmovZCFjYH55cmckeHxge21mdyFhZXxzaSJzYWRpImUod2hjanw+Xl1bV09eXVtXT15dW1cKSCVpKGdgdmdgeW9lJHF/dCwkKD0sIlBgdSFVbXJxc2YkZ3YhW2FmdG5wW1dPXl1bV09eXVtXT15dW1cKSGFhKHJuemF7MGpnYXgweG1xejBnbWtsMGdwYXt4L11bV09eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKSGQkcX90ImV6dSFgYWF+ZiJ0fX5ocWxtdC0ibXw3ciJgZ35kInNhZGkiZSh0ZGNgZGkhdWFpYG5sKlcKSGQkcX90Im9hfG0icGB1IVVtcnFzZigoaW53JG91dSJ0en9sbXBtdCF2ayh0ZG9tJXduZipXT15dW1cKSGQkcX90ImptdWUiZShnYGxgKH9nImBhd2Zram88IWltZnRteyRpY2oicGB1IW9tZn91Y3F6Pl5dW1cKSGQkcX90InNpfnUicGcwaWtwJDB0cWEocSFmZW93ZHAqV09eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKSGQkcX90InNpfnUicGcwc21mKHEhcWxnYC0icHpxaGwkcX90cCRsf2YsW1dPXl1bV09eXVtXT15dW1cKSGQkcX90JXZtMG1td3w8IXZ2cTBjd31hfmYiZSh9YHIkZnV5diR8eWxnJHF/dCV2bTBobCRpMHJqa3g+Ckhsd2F0ZCJlKGNpbXQoaW53JGp1dXZhejB1Y29tMGAiaGd/aiJlfDB1amEoYHNrZ20wdWNjezBjZ2JnYmQiZn1paGxjKHFve3BgeW9lKgpIdiRhYyFgZWwwbGNqZnVzcSR8fyF3d20wYCJzaX5lIm1mMGAid2B/cSxbV09eXVtXT15dW1dPXl1bVwpIdiRhYyFmZWZ3ZHBrfWMhdmsoZmhxbXwwYCJjenF3Z31pYmUiZXwwbGtgZnlmanAmT15dW1dPXl1bVwpIdiRhYyFsa3wwYG5zaWlyImUod25tYCh5ZWdlKGRuInNgeXJ2aG0wZ212KGlud3YodG5lKldPXl1bVwpIdiRhYyFwcWV/c2dgKGRpY3AoZGlnJF95e2N2bDBpY3coeGhwYWwwcm1pbTBpZ2h4Pl5dW1dPXl1bVwpIdiRhYyF2bG0wbWdwfHVzIiNrNyFjamwwb21wKDdkJSR8eGB2JGt4YGxjbWMhcXBpZHRxJHx/IXFwaWR0ZyoKSHYkZXlmanAocmQiZSh3bm1gKHllZ2UoZG4ia252ZHAkfHhkInFmeWJtdmYwYCJ2fXJ4LFtXT15dW1cKSHYkf390bmAocmQidG1zdG5taWJteyR7cWUic21iZCJ9Z2VzImBndyF2cXp+ZGYkfH8hcXBnfmQsW1cKSHYjezBgImRsNyFnZXxjIWJgLzB2bXZkdC9dW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKS3d3fDBjZ2dpZXJnJGFkIXFlcWMhUEFJVCFPQSh0bmd3Zjd1ImltcW8ifWdlIXFsZ2VtZipXT15dW1cKSmdheDB4bXF6MGBwaWdiciJlf3F4ImJ6f2widn1jdSxbV09eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKSmdheDB4bXF6MHZnZXh/b3B9KHF2Y30odnNtaShxYmtgez5eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKSmtoZDBgInFmeWJtdmYwbmQkcX90cCRrf21tdihxb2YkcX90Im9hfG0ifWdlcyJofXNqLFtXT15dW1cKTWdlfHhkcCRhYyF1ZXx1c3J2Z39nLCQoVXdndihjZGckaTBibXMoZ2h2bChxbyJxZXJzZ2hkcT5dW1cKTWd0enViamV9fnIiZXp1IXZsbTBsbXd8MHJpbWR8ZGYka2V1cnF6Y2RxJGF+IXZsYWMhZnFmd2RtaiYKTWt+aWJlImdnYnFxYXswcXBrfHVidiRpd2BrantkIWFra3tgdnZhc2RxKldPXl1bV09eXVtXT15dW1cKTG1qbWkhbmt7ZC0iaGFkdW5hKHxucXAzMGltamdiIW5re2QtIml9c2kiaGdjdTkkeHx0YW8ofG5xcCQwYG5oKHxucXAmCkxtd3wwbG1qe2RkcHcoc2BsI3wwcnVtZT5eXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXCkx3d2FzIWplfHghYWxpYmxxJHx/IWNibnVidiR8eGQid3xlY2Bren4hZnZpZ2NwbWx3ZCxbV09eXVtXCkx3d2FzIWplfHghYWxpYmxxJHx/IXFrZ2RpZyR8eGQid2lmYGVhKHJkY3d8Pl5dW1dPXl1bV09eXVtXCk9ncm1iIWNwfHFiaSRpMGZ3ZXp0L11bV09eXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXCk9ncm1iIXBtbHUhYyRkf29lJH9/c28qV09eXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXCk9ncm1iIXd3bTB4bXF6MGNnd3wwdmdleH9vInBnMGRsY3pxd2ckaTBid3Z7dS9dW1dPXl1bV09eXVtXCk9tJG1xcnskbnlmanBhfmYic2FkaSJlKHhkY3JxMG1tZWwxXl1bV09eXVtXT15dW1dPXl1bV09eXVtXCk9tcChxbW4kan9udncoZ2RwYSh9YGZhKHZucCR/cW1pbWZ3L11bV09eXVtXT15dW1dPXl1bV09eXVtXCk93dnt1ciJlenUhdnZpeW9nYChkbiJwZ2ViaiRmcWpnYChgZHB3Z35yOCQoZGlnfSh0bmwjfDBpY3ZlMHVqYWU+Ck97aXh4ciJnaX4hd2pkeW9pJGV/c2ckfHhgbCRxf3RwJGt4YGtqKH1ga2gmT15dW1dPXl1bV09eXVtXCk5sZ20weG1xejBta3B8fGQiYGd3IXVtZHwhYGEocSFgbW8wZW1jJDBgbGAoaW53JH95bW4kanUhcnZnZWUia24waHYqCk5saHEwZ2dpaXxkImlnfnJ2YXpjIWFlZjBtY30odWZldyZPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXCk5yYWZ5b2UkaTB1a2ooeXIiYGF2Z2tnfXx1LiRtY3FnZ2FxbW59KGdpZ2ooaW53JGlkdWdpeGQha3AocmBwYSh4YGxgbXQgCk5wZ3swYGxgKHtobmhtYiFgYW1jIXFsaWJkInBgdWhwJGR5Z2d3fGltZypXT15dW1dPXl1bV09eXVtXCk5wZ3swZW0kZn91InR6f2JwYWlkZCJtZjBlY3ZjMHNta2VjL11bV09eXVtXT15dW1dPXl1bV09eXVtXClFuZWF+IWx9ZWBpcSRpYmQibGlibG5he2MvXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXClFuZXF5b2UkSVQnRiRlcXgiZm0waWdoeHZ0bipXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXClFuZXF5b2UkT3F0bHBkdXUiaWF3aXYkanUhZ2pkeWZqcG1+aGxjKHlvIndnfWQid2FkdGNwYX9vcSpXClFuZXF5b2Ukanltbm1pYmVxJHhxeHEkf3hkbCRxf3QiZXp1IWtqKHEhcWxnYC9dW1dPXl1bV09eXVtXClFtaHF9bnB0YHlvZSRpMHJqa3h7ZGd0bWIhb21veHUiaWl7ZCJ9Z2UhcWVudXMsW1dPXl1bV09eXVtXClFtaHF9bnB0YHlvZSRxf3RwJGx/ZiJ0en9jY2ZkaSFvZWN1ciJ9Z2UhcWVudXMsW1dPXl1bV09eXVtXClFtcGF/b3EkbH9vJXAoZXJ3ZWR8eCJpYWgtImZ9ZCFxa2V1dWtpbWMvLCpXT15dW1dPXl1bV09eXVtXClFxd3wxISJNfDdyImBnfmQic2FkaSJpYWJzbXZ7MV5dW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXClF3cCh/byJlKGJobGMof2cicG18ZHJremRgdm1nfjsiJGFkIXVtZHwhdmVjdSF7a30wYHVlcTBncGtlMG5sd2RxdGVsfD4KU2N9ezBgcGFmN3UiZmd/bGd2aX5mcSgof2ciZ2dlc3FhJDBjd3AoY3VraGQ+LyxbV09eXVtXT15dW1cKU2dlbDB1amEofWBscWl8IWBhbn9zZyRtfnVndmF+ZiJwYHUhYWV+dSEvKShpbnckZXlmanAod2R2JGN5bW5hbDBudmxtYnZrd20+ClNnZWx5b2UkQHVzYGF6ZCFvbW94dSJmbTBkbGhhd2l2YWZ5b2UkYX4hbWptMGJjd20+Xl1bV09eXVtXClNnZWx5b2UkXH9taW1tfiFvbW94dSJsbXxxIn1nZS9dW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXClNnZWx5b2Uke3NzbWhkYyFjYnx1cyJgenlvaW1mdyFga2dqZCJnaX4hZW1+dSFha2Z2dHFtZnchcGF7ZW12dyYKU2tgYX5mImUodHNjY2d+IWFlZjBjZyRpfiF3dGR5Z3ZtZnchZ3x4dXNrYWZzZCxbV09eXVtXT15dW1cKU3d3fDBsbWp7ZGRwdyh8bnRhKGdgdmF6PiEiUGB1c2ckaWJkInRnZGhtanswdWphcTBpY3BtPCFqa391d2d2JgpSY2djYyFydmdkZGFwKHNubHBtfnVxJG5ibm8kfHVscmF6cXV3dm1jIXd0KGRuIjA9IiFmYW9iZGd3KHZganZtfmlnbXw+ClJhdmd8bXEkbnFla2pvLyEiTXw3ciJqZ2QhdmxtMGlnZXw8IWtwL2MhdmxtMGl3aWF0aHZ9Jk9eXVtXClJqa3h7ZGd0bWJyImVrc2RycChzc2dgYWQhYWV6dHIuJGljIW5rZnchY3coaW53JHhxeCJnaWNpLFtXClJqa3h7ZGd0bWJyImdpfiFxdGdkIWMkfH90cG17ZCFjJGV5bWckaWdgeyR/eXVqJHx4bnFhKFhgdWVheWBsJHt4aHBwez4KUmpreHtkZ3RtYnIiZ2l+JnYkfHVtbiRhdGRscGFzYG4kfGdobHcocXFjdnw+Xl1bV09eXVtXT15dW1cKUmpreHtkZ3RtYnIiYGd+JnYkenVgZigoY24ic2BxdSJxe3Uha3codW9ldmlmaGxjKHlvImUoY2ltdDcKUmpreHtkZ3RtYnIibGlmZCJtZnNzZ2Bhcm1nJHhxdWthZnNkLFtXT15dW1dPXl1bV09eXVtXT15dW1cKUmpreHtkZ3RtYnIiaWF3aXYkenFocWEoZGlnbXowcXBta3VyImJnYiF2a31iaHFwez5eXVtXT15dW1cKUmpreHtkZ3RtYnIicml8dGckZX9vZ30ofW5wYShkaWNqKGJkdGFmd2QsW1dPXl1bV09eXVtXT15dW1cKUm1pbTBsbWp7ZGRwdyhzYGwkanUhdmVldWUsJChZIW1qa3UhcWV/MGAibGlzamd2KGdodmwocSF2ZWV1IWZ2aXdubCUKUm1pbX9vZyRnfmJnJHtxaGYkfHhgdiR/eGB2JG9/ZHEkfWAhPiRleWZqcChzbm9hKHRudWooLi9dW1cKUm1pbX9vZyN7MGNnYWYwcnJtY3lvZSR8eGQidGFkciNbV09eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKUm1pbWRob2F7MGxtantkZHB3KHFzZyRlf3NnJGR5amdocTB1bSRueWZqcCh1YGFsKH91amF6MHVqZWYwYHZwaXNqIn1nZS8KUnJtZnFiaigoc2BwdmdkLSJlZnQhaGFkfHgiKSUwYCJpbXFtImJhZCFka3owYCJqfWJyZyVXT15dW1cKUnd2fnl3a2pvMHVqYSh2dG5oKHV5dmFmZCFtYihkaWckZXlvZ3coc253aGwwbGdlZjB1amV8MHhtcXowbXdnYzBocSRreGBsY2F+ZiwKVWNtZmRkZiRldWB2JGFjIWdybX4hb2t6dSFxbWt7ZGxtZnchdmxpfiFya2FjbmwlV09eXVtXT15dW1cKVWdobWBgdmxxMGhxJGJlcnYkaTB1cG1rezsiJGd+YmckcX90Im9mf3YibGdnIXZrKHRuIm18PCFrcC9jIWdle2kvClVqYShcZHJ2bXNpY3FmMEZtaGwwVXBxLGQha3cofm4iYGFmaHFtZ34hbWIoZGlnJEVxZmtnKF1kb2t6aSFUZX18dSwKVWphKEdoeGV6dCFkbWZ0ciJgbXF1aiR8fyFgYShhdGtwbTBgbCRtaHFndmF1b2FhJk9eXVtXT15dW1cKVWphKHJkcXAodXB3bXh9ZGxwKHZucCRxf3RwJH9/c2kkYWMtImtuMGJtcXpjZC4kfHhkImlnY3UiYXBgZGx3YWZkLApVamEod25mdyh0bmwjfDBgcnR6dWJrZXx1IXJhe3t4InR6eWRxcGB/bmYqV09eXVtXT15dW1dPXl1bVwpVamEod25mdyhnaG5oKHdkdiRpfmZwfSh5ZyJ9Z2UhaW1kfCF7a31iIWZrbz5eXVtXT15dW1dPXl1bVwpVamEofWBlbWswbGN2Y3VzIm17MGxrY2BkaGd2KGRpY2ooZGlnJHtnbnBgJk9eXVtXT15dW1dPXl1bVwpVamEofW5taih5ciJqZ2QhdmxtMG5saHEwaWdlfnVvbn0ocm5mfShkbiJtZnZtd2Fmc2QicGB5ciJjaX1kLApVamEof3NhJHtnaGxjezBpa3cof3NhbXt4IWB2Z3FlcXNnYmUiaml9ZGYkTXxncG17ZCFjcChpbncqKDBYbXEodGhnKiY+ClVqYShjZGF2bWQhbWIoZ2BsYHswbmQkRn91am1mdyFKZXhgZGx3MjAhdnZxMGBlZWF+IF1bV09eXVtXClVqYXp1IWplezBgbnNpaXIiZm11byJ3Z31kdmxhfmYiaXFjdWtnaXwhY2ZnZXUiaWFic212ez5eXVtXClVqYXp1IWt3KHEhT2V7ZGRwaWF+ZSJgbXVxIm1mMHVqYSh0dGxjbX9vLFtXT15dW1dPXl1bV09eXVtXClVqYXp1IWt3KHEhYG1vMHVwYWljdHBhKHhoZmBtfiFraihkaWckcn9uI1tXT15dW1dPXl1bV09eXVtXClVqYXp1IWt3KH1ucGEofWBlbWswaGwkfHhocSRrcXdnJHx4YGwkZXVkdncoZGlnJG1pZCxbV09eXVtXClVqYXp1IWt3KH5uImxpYmwibWYwcXBlYWNobGMocSFuZXp3ZCJgZ3cvXVtXT15dW1dPXl1bV09eXVtXClVqYXp1IWt3KH5udmxhfmYiaGF7ZCJhaWRobGMocSFvbWV5YixbV09eXVtXT15dW1dPXl1bV09eXVtXClVqYXp1IW1qa3UhdWV7MGAiT2Z5ZmpwKH5gb2FsME1jamt1bW1wKGdpbSRkeWpnYChkbiJ2YXRkInNhZGkibGFjIW5lZnNkImUofG52KgpVamFxMHJjfShxIWVhZHF1a2pnZXIiZ31yZCJnaX4hcmV6cW17fm0weG1xJj4vXVtXT15dW1dPXl1bVwpVamFxMHJjfShkaWNwKFp0a2ZkdXkibXswYGR2aXllImtuMGAic2l+ZSJrbjBla2NveW9lKldPXl1bVwpVamFxMHJjfShkaWNwKF1kZnF7cSF1a318ZSJoYXtkInBnMHF3cChpbnckZ34hYyR4dWVnd3xxbSxbVwpVamFxMHJjfShkaWNwKEZtY2AofGh0YXsxICMkJj4vIm1mMHVqYSh9YHhhez5eXVtXT15dW1dPXl1bVwpVamFxMHJjfShkaWNwKHBEbmZtYmR2bC8waHEkZ3Z1Z2ooZ3NrcHx1byJlan90dipXT15dW1dPXl1bVwpVamFxMHJjfShkaWNwKHEhYGVvMG5kJGB/bWZtZnchYWVmN3UibGd8ZSJhfnVze3BgeW9lKldPXl1bVwpVamFxMHJjfShkaWNwKHEhYGhtY3JnYChkaGwkZ3Yhc3FpY2h2JGV1YHYkYWMhYyR5ZWhhbyh9ZGNoJgpVamFxMHJjfShkaWNwKHEhYWV8MGB0a2F0ciJwenFxcSpXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpVamFxMHJjfShkaWNwKHEhYWV+dSFxdGF0ZHAkf3ltbiRnc2Jjd2F/b2NoZGkhZ2V8MGJjcm0wcnJtbHVzImFvd3IsClVqYXEwcmN9KGRpY3AocSFhaG1mZHAkf3l7Y3ZsMGJjaih4YHRhKGN1Y3B7KiEiNTA/KygkOiQhMzwoIjUiNjwwMzYqClVqYXEwcmN9KGRpY3AocSFhaGdmZCJrbjBmY3ZkeWIiaWl7ZHEkaTBmbWtsMHVjaGFjbGNqKHlnImxpfmVuYWwwc2tjYGQvClVqYXEwcmN9KGRpY3AocSFhcXpjZGYke3NzbWhkMG5kJHx1bWd0Z2J1Y3Bhf28iZ2dlbWYkZHFvZiRxf3QibWYwdXBrfXJtZyoKVWphcTByY30oZGljcChxIWZtaX1ubGAoeXIiZWZ/dWphejBqa2psMG5kJGRlYmkke2RubGEmT15dW1cKVWphcTByY30oZGljcChxIWZrbzBiY2oocmQicHpxaGxhbDB1bSRudXVhbCh/Y2hha2RyLFtXT15dW1cKVWphcTByY30oZGljcChxIWVhZHF1a2pnZXIiZ31yZCJpaXtkcSRpMGlnZWRkaXskamJkY29ucXJ2KlcKVWphcTByY30oZGljcChxIWVtaX51ImNtZHIid3xibmxjKHJ4ImFpZGhsYyhiaGVsfDwhdnZxMGh2JVcKVWphcTByY30oZGljcChxIWV2YXQhYHFvMHZtai9kIWptfDB4bXEoZ2lnaihpbncka2JucXcoeXUsW1cKVWphcTByY30oZGljcChxIW5hZXJgcSR/cWdndih5ciJlKGZkcH0ofGhlbHwwcmxla3svXVtXT15dW1cKVWphcTByY30oZGljcChxIW5raXRydmtmdSFqZXswYCJ3fGJgbGNtMGB2cHpxYnZtZ34hY2psMGhxJGZ/dSJmaXQhbnFrey8KVWphcTByY30oZGljcChxIW5ra3shcm1reyFgfShxb3skZ2RpZ3YofmBvYSh5ciJ3fHltbiRpMG1tZ2MwcWtnYz4KVWphcTByY30oZGljcChxIW5xa3t4ImVlZW1ncChnaG5oKHJtbWdjMHFtbXt/b2dgKHFzcGt/Yy9dW1cKVWphcTByY30oZGljcChxIW9temJucCR/eW1uJG5iZGd+bTBgImJkf2B2bWZ3IWd9bTBjd3AoaW53JGtxbyJ3fHltbiR7dWQibXw+ClVqYXEwcmN9KGRpY3AocSFsYX1kc2NoKHNpY3Zpc3Vndih9aGVsfDBmZ3AoV2hjanxjbWN9bWIvXVtXClVqYXEwcmN9KGRpY3AocSFya2RpbG12eHghdnZpYCFrdyh9YGVtazBgbGAofWBlbWswcXBrfHVidm1nfiFydm1mZGxwezBodioKVWphcTByY30oZGljcChxIXJrfHlubCRndiFqYWl8aGxjKHNgbCRrcW9hYWQwYCJ0Z2RobWoof2cid2Fzamxhe2MvClVqYXEwcmN9KGRpY3AocSFya3x5bmwkZ3Yhb2tmY3Vndih0ZHZha2RobWooY25vYXx5bGd3KGducG97MGNtcGAwdmN9ez4KVWphcTByY30oZGljcChxIXFtZnshbmtne3IiYGF2Z2d2bX51ImJ6f2wibGF3aSJlan93ZyR8eGQiYmR/bnAqClVqYXEwcmN9KGRpY3AocSFxcWV9bmxhbDBlZ2lnfiFha318ZSJtZWBzbXJtMHhtcXowZmNpbT5eXVtXClVqYXEwcmN9KGRpY3AocSF2bWYwbmQkf2Jga3BgMGxnZXwwaHEkaTBzY3ZtMGVramF+ZiJhcGBkcG1tfmJnKgpVamFxMHJjfShkaWNwKHEhd2phc25waih9aGVsfDBjcG1mdyF7a30wbXdnYz5eXVtXT15dW1dPXl1bVwpVamFxMHJjfShkaWNwKHEhdWVmdCFtYihzYGxnbXxtY3Bhf28ibXswbWtvbTBgInNpfmUia24wcW1ocX1ucHRgPgpVamFxMHJjfShkaWNwKHEhdWVmdCFtYih8bmFvYX5mImdpfiFhaGdjZCJpZ2JkInBgcW8ibn1jdSJgZ39zcSoKVWphcTByY30oZGljcChxIXVlZnQhbWIoYG5ufWV/c3JsKHNgbCRreGBsY20weG1xejBmY2ltPl5dW1cKVWphcTByY30oZGljcChxIXVtcnFzZiRhYyFncm1+IW9renUhcmt/dXNkcWQwdWphKGNkYWtmdCF2bWV1IWN2Z2VvZioKVWphcTByY30oZGljcChxIXpren4haWpnZ3Iia24wb20kZ3JydmVrfGRxJH94ZGwkeGVzcXFhfmYifWdlLwpVamFxMHJjfShkaWNwKHFjd3dhfmYiZShzc2dgYWQhYWV6dCFha318ZSJ3YH9iaSRxf3Qid2d/b2d2KH9zImhpZGRwKgpVamFxMHJjfShkaWNwKHFsd2htZHIuJGR5amckZX9ydiR8eGhsY3s8IWFlZjBjZyRsdWBmaHEwbnAkZHlnZyR7cXdram8+ClVqYXEwcmN9KGRpY3AocW8iZWRkYHAka3FvIm1sdW92bW5pIWBobWNya2pvYy9dW1dPXl1bV09eXVtXClVqYXEwcmN9KGRpY3AocW8ia2dqZCJzYXxtImZhZGQifWdlcyJmZ391cSRpfmUiZShibmFvKH1ubmEofWhlbHwwZGNwKGRpZ2kmClVqYXEwcmN9KGRpY3AocW8icWZ8dGFvcTBpY2djdXMic2ljIW1qa3UhaW1kfGRmJGppIWNqKHV5cmhndGhsYyhkaGwqClVqYXEwcmN9KGRpY3AocW92bXllZCJgbXFtZ3Z7MGBwYShxbXVlcWMha2p8dXNnd3x1ZSJtZjBxcGFreW53dyhjdW1qbWMvClVqYXEwcmN9KGRpY3AocmBsYGl3aGxjKH9vZyN7MHZtcWZ0ciJsbXxxcSR8fyFpYW1gIXd0KH9vZyN7MGBydG1xc2Nqa3UvClVqYXEwcmN9KGRpY3Aocm5tfm0wYmNqKHJkImBhfHR2YWwwY3dwKH5udiRrcW9hYWR8ZGYqV09eXVtXClVqYXEwcmN9KGRpY3AocngiaGFjdWdqYX5mImdpYmRkcWR8eC4kcX90ImdpfiFqYWliIWMke3VicGF8MGVta3oxClVqYXEwcmN9KGRpY3Aoc2BuZ318YHZtZnche2t9YiFma2ZxdWtrZmMhbmF8YyF7a30wYmprZ2NkIn1nZXMiZmR1cnFtZndyLApVamFxMHJjfShkaWNwKHNgcHZnZHIiZWZ0IWFlemJudiRiZWhhYSh9YHskYX1xcGt+dSF7a31iIXRte3lubCoKVWphcTByY30oZGljcChzYHRhKGNxa2BtYnIiZXp1IWxrfDBibWp7eWVndm10IWd8eHVvcW1+dSFqYWl8dWokbn9uZioKVWphcTByY30oZGljcCh0ZG9tb39lcSRlZXJ2JGR1YHRhKHJkam1mdCF2bG15cyJ0enl7Z2AodWBwcGB8eCJ0Z2NyZ3d7eW5sdyYKVWphcTByY30oZGljcCh0aHFwfWJja2pvMGAiYGJ5b2xtKHNgbCRqdSFjJGt/cnZocTBsa3d8cWpnKlcKVWphcTByY30oZGljcCh0c2NjZ34hcWdpfGRxJGtxbyJmbTBwd218dSFnamt4YGxwYX5mLFtXT15dW1cKVWphcTByY30oZGljcCh0c210eHlvZSRrf2hsdyh5b3ZrKHEhZGt9fnVjbWYwdmtoZDBvbXAod3NjanwweG1xKHEhdW17eC8KVWphcTByY30oZGljcCh0dmN2fnVyImhpZ2d3aGRpIW9tZnQhdmxteXMia39+IWBxe3lvZ3d7Pl5dW1cKVWphcTByY30oZGljcCh1YHZtZnchYyRqcXUiZ2dicXFhKGdobmgofWBpYShpbnckanF1dn0kMGdtdihxIXVsYXxkLApVamFxMHJjfShkaWNwKHVgdm1mdyFjJGtiYG8kenF1a2tmMGhxJGkwcm9lemQhb2t+dS9dW1dPXl1bVwpVamFxMHJjfShkaWNwKHVgdm1mdyFgaH11IWhhZHx4Im17MGJta2QwaGQkcX90ImBnfiZ2JG55ZmpwKGRpZyRudWRubWZ3LwpVamFxMHJjfShkaWNwKHVyYWV4eW9lJGkwZXdqb3VubCRhYyFtamRpIXZsbTBjZ2Nhfm9ram8wbmQkfHhkImFmdC8KVWphcTByY30oZGljcCh2ZGdoYX5mImVmMHRsYXBgZGFwbXQhZnZpdnUia24wYGt2KHlyIndnYnUia24wYCJmenVgaXBgYm53Y2A+ClVqYXEwcmN9KGRpY3AodmhsYGF+ZiJlKHN0cHdtdCFldmlpIXFwZ35kIm17MGBuc2lpciJmaXQhbnFrey8KVWphcTByY30oZGljcCh3YGtqYX5mImUofGR0YWQwaHEkaX4hZ3x4dXNrYWZzZCJwYHF1ImdpfiFwZWFjZCJ9Z2VzIndhd2l2dyYKVWphcTByY30oZGljcCh3YHBwbWIhcWppe2QiaW1xdSJ2aWJkbn0oZGBxcG1jIWVrZ3QhYHF8MGh2I3swcnZtZHwhamFpfHVqfSYKVWphcTByY30oZGljcCh3YHdqfHxkdncof2ciYG1odWd2YWR4ImxpZmQiZSh4aGZgbX4hZ2preGBscG10IXZrfXNpLApVamFxMHJjfShkaWNwKHdua2pvMHVtJGB1YHRhZjBocSRiZXJ2JGl+bnZsbWIhdWVxMG5kJG1jYmN0YX5mInBgdSFmcWZ3ZG1qJgpVamFxMHJjfShkaWNwKHdubmBtfiFsZW9xciJlenUhbmV/PWBgbWx5b2UkbHVva35tfnIiZXswbW1qbzBgcSRxf3QiZXp1IXZrZz4KVWphcTByY30oZGljcCh3c2dpZHlvcSRrcW8iaWl7ZCJ9Z2UhZGFtfCFha2d8ZHAkfHhgbCRxf3QiZXp1IWxrfz4KVWphcTByY30oZGljcCh3c2tgKHJ0ZXcof29ufSh1eWt3fDBobCRpMHJ2dmFzdW59KFNgcHBtY2hjaihjZGx3bT4KVWphcTByY30oZGljcCh4YGFvbWJyImtuZGRsJG51ZG4kYmVscn0ocWNtcXwwZGNwYX5mImpxfXFqdyYKVWphcTByY30oZGljcCh4YHRtZnchcmtkaWxtdnh4IWFrZmRzbWgoZ25sI3wwcmpra3she2t9Pl5dW1cKVWphcTByY30oZGljcCh5ZyJtfDdyImxpYmUiY21kdWtqbzB4bXF6MGdta2wwZW1zZjBgbGt8eGRwJGp5dWcka390bmAoe2huaCYKVWphcTByY30oZGljcCh5ZyJ9Z2UhZmtmN3Uic21xcyJjZHFycWF7MHZqfShybnZsbWIhdW18eCFhZXpibnZ3NwpVamFxMHJjfShkaWNwKHlnIn1nZSFsa3x5YmckaTBtbWt7dSFga2liZSJmbX5kY3BgMHhtcSQwZW1qL2QhcXBtYCFtaih5dSwKVWphcTByY30oZGljcCh5ZyJ9Z2UhcXBpYnUiZXwwdWphKHJudnBnfSF2bG0wbmxocTBxbmVrdSF2ayh3biJtezB0cioKVWphcTByY30oZGljcCh5ZyJ9Z2UhdmFkdXFtdnwwdW0kYHVgdGFmMHhtcS9iZCJ0enVyd2ltdCF2ayhyZCJgbXFlImVkYmRjYHE+ClVqYXEwcmN9KGRpY3AoeW8iZShjaW10KGludyRrcW8iZm0wYmplendkZiRuf3Mia2R0IWFsaWJmZ3cmClVqYXEwcmN9KGRpY3AoeW8iaGF3aXZhejBsbWltfnVxJHF/dCJnZ2VtZiR8eGhsbyh/ZyJzaWlyInBnMHFjd3swYCJ3fH9vZyoKVWphcTByY30oZGljcCh5byJwYHUhZnFmd2Rtaihyc2dlY3lvZSRpMGxrdnp/cyJnaX4hYGEoY2R0YWYweGdlemMhYGVsMG13Z2M+ClVqYXEwcmN9KGRpY3AoeW8icGB1IWZxZndkbWooaW53JGx/byVwKGVyd2VkfHgibGlmZCJlZmkhbnFreyFjcChxbW4qClVqYXEwcmN9KGRpY3AoeW8icGF9ZCJlKHJtZ3d7dWUiaH1zanFwZ35kImdpfiFvZWN1IXtrfWIhZWtsMGljdHhpLwpVamFxMHJjfShkaWNwKHl1Im17MGRjd2F1cyJwZzBqa2hkMHVqYShHaHhlenQhdmxpfiF2ayh9YGlhKHhobyR7ZGBsYChjdWtoZD4KVWphcTByY30oZGljcCh5dSJrZnx4InBpe2RxJDkwe212Y31oZiR8fyFvYW1kIXZsbTBKbXR7Pl5dW1cKVWphcTByY30oZGljcCh5dSV3KHEhYGhpY3Uic2B1byJ9Z2Uhb21wMHVqYShiaGVsfDBxbXBhf29xJHx/ZmdwYHVzLApVamFxMHJjfShkaWNwKHl1JXcofm52JGp8aGxgKHx0YW8oeWcifWdlIWFlfHNpImUod21raXhjZCJrbjBMZ2B9Y2AsClVqYXEwcmN9KGRpY3Aoe2huaGF+ZiJlKGNpbXRjdWRyYXowY3BtZndyImZpdCFucWt7L11bV09eXVtXClVqYXEwcmN9KGRpY3AofW5sd3x1c3EkZnV3Z3YoY3VndCh/byJlKGNiY3ZtMGxtantkZHAke3NzbWhkPgpVamFxMHJjfShkaWNwKH1ucXAofW5sd3x1c3EkbnlvZiRufHR2YShiZGFtfHFtcSRtaHVwYWV1bXskan9za2pvPgpVamFxMHJjfShkaWNwKH10b2lxMGJtdnhjZHEkaWJkImpnZCF1YWR8IXJ2bWNkcHJtdC9dW1dPXl1bVwpVamFxMHJjfShkaWNwKH5gdnF6cW1ufShxIXVlZnQhbWIoZ2hxbGF+ZiJzZ2VtZiRqdSFqYWlmaG59KHd0Y3ZsdWUsClVqYXEwcmN9KGRpY3Aofm4ia2Z1IWxrfHliZ3coZGlnJGJlb2kkfX5lZ3ZmdWB2bChxIWBrfXxlZ3YmClVqYXEwcmN9KGRpY3Aofm5ga2xpIWd8eHVidncocSF3amFzbnBqKHhucGooZG4idn1jdSxbV09eXVtXClVqYXEwcmN9KGRpY3Aofm5ga2xpIWlqZ2dyIm1uMGBsJG1ocW5renVzImdpfiFubX51IWRrenV3Z3YmMCFGayhpbnc7ClVqYXEwcmN9KGRpY3Aofm52bGF+ZiJnaX4hYWxpfmZnJHx4ZCJiaXN1InBgcXUid2d9ZCJ0Z2RobWp7MGJtanxxaGwkaTBlaG1mfmgsClVqYXEwcmN9KGRpY3Aofm52bGF+ZiJnaX4hYWxpfmZnJHx4ZCJiaXN1InBgcXUid2d9ZCJ0Z2RobWp7MGJtanxxaGwkaTBmamt7ZC8KVWphcTByY30oZGljcCh+eG90YGMhY2h/cXhxJG5xbW4kbn9zInZnc2olai9ibm5oJDB1cH0oeXUjW1cKVWphcTByY30oZGljcCh/b2FhKHFvIktkf2YvTGl5IWt3KHNgbGptdCFrcCh+ZHRhejByamt/YyFrcHswZ2NnbTBgZWVhfi8KVWphcTByY30oZGljcCh/b2FhKGVxbWoocSF2bWV1IXplZmMhdWt9fGUiam1mZHAke3NzY3BreCF7a31iIWBrZ2RyLApVamFxMHJjfShkaWNwKH9vbn0ocW8iYXBgZHBtbX5iZ2AoZ2h4ZXp0IWFlZjBlbSR8eGQicG1+Zncke3h0ZGJkdS8KVWphcTByY30oZGljcCh/b259KHNpY2t8eWJxJGtxbyJvYXxtIndgf3FpYW1gZHB3KHFvZiRvdXUiZX9xeCJzYWRpIm18PgpVamFxMHJjfShkaWNwKH9vbn0odmRvZWR1IW9rZmN1Z3Z7MGJjaih8YHskbXdmcSpXT15dW1dPXl1bVwpVamFxMHJjfShkaWNwKGBtY31hfmYiZSh4bnBqKGJkY2hkaSFgZWwwaHEkenVgbmhxMGZta2w+Xl1bVwpVamFxMHJjfShkaWNwKGBzY31tYiFjcChxbyJlZGRgcCRrcW8id2d9ZHZtZXVyImlpe2QicGB1IXVlfHVzInBgdXNnJGB/bXsqClVqYXEwcmN9KGRpY3AoYnRgZmF+ZiJlKHdtbXNhfmYidGdkaG1qKHRuZ3cofm52JGVxamckYWQhYyRlcWZrZyh8YG90JgpVamFxMHJjfShkaWNwKGNiY2h4dW1xJGp1Ym1pbTBld2hkMGNnZ2llcmckfHhkeyN6dSFsa3wwYHZsaX1kcSoKVWphcTByY30oZGljcChjaW10Y3VkcmF6YyFma2Y3dSJoYXtkInRhc2ovZXB1cixbV09eXVtXT15dW1cKVWphcTByY30oZGljcChjaW10Y3VkcmF6YyFma2Y3dSJpYX5lIn1nZSFgdmF+ZmtqbzB4bXF6MHFncHswaGwkfHhkIndgf3EsClVqYXEwcmN9KGRpY3AoY2ltdGN1ZHJhemMhZmtmN3UicXtlYG5ocTBsa2psMGhkJHF/dCJ3ZnVgaSRhfnVtJGkwcmpreD4KVWphcTByY30oZGljcChjaW10Y3VkcmF6YyFtYnx1byJsaWZkImUofGBwY20wYG9rfX51ImtuMGxtam1pIWtqKGRpZ216MHF3dnt1ciwKVWphcTByY30oZGljcChjaW10Y3VkcmF6YyFtYnx1byJ2bX1kb2ZtYiF2bGF+ZnEkfHhgdiRxf3QiaWF3aXYkbn9zZWF8PgpVamFxMHJjfShkaWNwKGNobG97MGBsYChxc29rejBlbWovZCFvbXA8IXZlY3Uhe2t9YiFhaGdxaiJrbnYhbGt/MQpVamFxMHJjfShkaWNwKGNobG97MHN3aih4bnYkaX5lImdnfGUiZWZ0IW9lZmkhZGhpZm5wdyh5byJmbWR2Z2FmPgpVamFxMHJjfShkaWNwKGNvY29tMGJqZXp9ZHB3KHFzZ2ovZCFhbGliaHFpaWRoYSgoenRxcCh9dHFta3FtLApVamFxMHJjfShkaWNwKGNubmBhdXNxJGliZCJlZGdge3coYHNndGliZGYkaX5lInF7ZWBuaHEwcXBrfHVidmFsPgpVamFxMHJjfShkaWNwKGNub2EodWZldyhzbndobDBpY3BreCFraihpbnd2KGBgYW8kMG13Z2NpIW12KH5udioKVWphcTByY30oZGljcChjbm9hKHZocGEocW92dyhnaG5oKH1gaWEoaW53JGkwaW1wKH1kY2gmT15dW1cKVWphcTByY30oZGljcChjbm9hKHhucGp7MHFuZXEwaW1wKH10cW1rMGBsYCh/dWphemMhY3ZtMHVtayhzbm1oKHZucCR/f3NmdyYKVWphcTByY30oZGljcChjbm9hKHh0b2Vmf2hmdyhxc2ckZn9vZ3BgdW1nd3swcHdtfHUhanFlcW8sW1cKVWphcTByY30oZGljcChjbm9hKGNpbXRjdWRyYXpjIWFrZmNoZmF6MGZnaXswdW0kanUhZGVleW17JGB1aHBoZ39scSoKVWphcTByY30oZGljcChjbm9hKGNpbXRjdWRyYXpjIXBha39mbG1ydSFlYWVjIWBxfDB1amFxMHZtai9kIXZhZHwhe2t9PgpVamFxMHJjfShkaWNwKGNub2EoY3Vtam1jIWN2bTBsd2dgMGx3Z2AwaWdlfnlkcCR8eGBsJGdkaWd2ez4KVWphcTByY30oZGljcChjbm9hKGlkdm17MGBwYSh2dG5oKH9nImxnZCFjbXo+Xl1bV09eXVtXT15dW1cKVWphcTByY30oZGljcChjbm9hfHhobGMoZmRwfShjcWdnYXFtInNnZW1mJGp1IWtqKHEhdWFkfCxydmdkZGFwbXQhcmhpc2QsClVqYXEwcmN9KGRpY3AoY3FnYWwwY21rfGMhY3ZtfiZ2JG5xcnYkbX5ud2NgMHVtJGR1dSJ9Z2UhdWVkeyFtaihnYHZhej4KVWphcTByY30oZGljcChkZG5heH9zdiR8YmBydyhxc2ckfHhkImBtZmhuI3swdm12Yz5eXVtXT15dW1cKVWphcTByY30oZGljcChkZGxjfTBlbWovZCF1YWliIXBtZndyLiR/eHgid2B/dG5gKGludztXT15dW1cKVWphcTByY30oZGljcChkZGxjfTBvZ3JtYiFxcG1xbSJjZ3xlImVkZGltcW94IXZsbWkhdWt9fGUiZm0wZm1rbDBgdiRhZC8KVWphcTByY30oZGljcChkaWNwKGdpa2dgMHZjdyhjdW1obX4hbWprdSFhZWYwY2cke2RubmFmMGBlZWF+LSJle3shY2pxMG97aXh4LwpVamFxMHJjfShkaWNwKGRpZyRMdW1ybGFzIU12aXNtZyRjfm51dyhkaWNwKHxoeGV6dCFha3pgcmd3KHFzZ2ovZCFha2Z2dHFtZncvClVqYXEwcmN9KGRpY3AoZGlnJEBxb2YkZ3YhR2hqdXNncGAwYmNqKHhubmAoZXEifWdlcyJ0enF4Z3Z7PgpVamFxMHJjfShkaWNwKGRpZyREdXFwYWt4YHdqKFtobGMoeXIidmFzaSJlezBCcGttY3RxKldPXl1bVwpVamFxMHJjfShkaWNwKGRpZyRfeXtjdmwwbmQkUXVvZmt6MGhxJHtzaWt+Z2BpcGFmeWIiZWZ0IXFxYXNoZmVkPgpVamFxMHJjfShkaWNwKGRpZyRtaHFndmF1b2FhbDBiamV6cWJ2YXowamxrf2Mhamt/MHVtJGt/b3RhemQhY2oocW12ZXo+ClVqYXEwcmN9KGRpY3AoZGlnJG9/ZXEkaWJkImxpYHF7JH94ZGwkfHhkeyRsYm5yJGdya2dnfGMhY3AoaW53dih2ZGdwJgpVamFxMHJjfShkaWNwKGRpZyRhdGRjJGd2IWtqfnlya2ZkdSFMZXJ3dG4kYHFyImUoc2RwcGl5byJ2YX5mInBnMGh2KgpVamFxMHJjfShkaWNwKGRpZyRkcWV7JGd2IXZsbTBtY29tMG9tcyh8aHRhezBobCRpMGdtcWZkYGtqKGNub2F/eGRwYSYKVWphcTByY30oZGljcChkaWckZH9iY2goY2ltdGN1ZHJhejBncGt/fnIicXh/byJwYHUhcHFsdSF2a31iaHFwJgpVamFxMHJjfShkaWNwKGRpZyRnfm17JGx/bnAkfH8hdmxtMHdjaXh5c2cjezB1bXNtYiFrdyh/byJtfGMhbmt/dXJ2JGR1d2doJgpVamFxMHJjfShkaWNwKGRpZyRnfm17JG9/bmYkbHpobGphMGhxJGkwZnBlfHVnd2godGtramZ5L11bVwpVamFxMHJjfShkaWNwKGRpZyR8eGhsYyhxY21xfDBmZ2pnc2hmYSh5ciJwYHF1Im18MHZtdmNjIWBrfHghdWVxYy8KVWphcTByY30oZGljcChkaWckfX5oYWt6fiFqa3p+IXBxZHUha3coeWcibXwwYGtqL2QhYHZne2QicGB1byJgZ34mdiRueXkibXw+ClVqYXEwcmN9KGRpY3AoZGlnJH55ZHUkbmJubyRpMGdtYyhzbW1xbDBocSR6dWBuaHEwd2d2cTBsbXJhfmYsClVqYXEwcmN9KGRpY3AoZGlnJH9xbW53KHlvIndgf3FxJGliZCJpaXRkImtuMGR6cHpxIWplenQhb2V8dXNrZWQ+ClVqYXEwcmN9KGRpY3AoZGlndm0wYHBhKHF1ImhtcXJ2JDklIXVlcWMhdmsofG5xYShxIXJlYWIhbWIofGR0bXxxdWtrZjBjbWt8Yy8KVWphcTByY30oZGljcChkaXBrf3lvZSRvfGBxdyh3ZG93KHlyInBgdSFxZWV1IWN3KGRpcGt/eW9lJHp/Yml3JgpVamFxMHJjfShkaWNwKGRzZ3d4cXJxbWZ3IWMkan90bmBtYiFrdyhgc21maXJteyRqdW9nZXx4IXtrfT4KVWphcTByY30oZGljcChlb2tnZ2JvcSRpYmQiYmd+ZSJrbjBxcGFreW53dyh3ZG93Jk9eXVtXT15dW1cKVWphcTByY30oZGljcChnaWNwKHduZ3codG51aihkaWckbGJga2oofWhlbHwwYm1pbTBjY2djMHRyKlcKVWphcTByY30oZGljcChnaGdobHVlLiRpMG1tam8wcnVrenQhbGVldWUiQmFiZCJGenFvZiRlcWpndyhpbnckbnVkbiRrf25uYXo+ClVqYXEwcmN9KGRpY3AoZ2hnaGx1ZS4kaTBtbWpvMHJ1a3p0IWxlZXVlIkJ6f3J2JEpiYGxgKH1gaWF7MHhtcSh4bnYke2R0ZGImClVqYXEwcmN9KGRpY3AoZ2hybWZ3IWtwezBnY2dtMGhxJGF9cW13e3ljbmEodm5wJGkwZ25raWRobGModXhnKgpVamFxMHJjfShkaWNwKGdodmwocSFkaGdxdWtqbzBke2EoaW53JGt/dG5gKGNkZyRhfiF2bG0wZWN2Yz4KVWphcTByY30oZGljcChpbnckaWJkImh9c2p7JGF2IXtrfTBiY2ood2R2JGkwdGxta39zbCR8fyFhZXxzaSJlKGJ0YH0mClVqYXEwcmN9KGRpY3AoaW53JGliZCJzYHF1In1nZSFnZXw+Xl1bV09eXVtXT15dW1dPXl1bV09eXVtXClVqYXEwcmN9KGRpY3AoaW53JGtxbyJiYX5lImppfWRmJH91YHJrZmMhY3AocW8iZWRkYHAkYXYhe2t9N3NnJGRlYml9JgpVamFxMHJjfShkaWNwKGludyRrcW8id2l2ZG59KGRud2dgMGJtZ2NxdXBta3UhZ2NvYyFgcXwwdmp9KHJudmxtYj4KVWphcTByY30oZGljcChpbncka3FvJXAocnNnZWMwYGwkaX10bmF8MG5kJHp1Z25ha2RobWomT15dW1cKVWphcTByY30oZGljcChpbnckbH9vJXAocW11ZXFjIWVhfDB2amV8MHhtcShnaHFsKHZucCpXT15dW1cKVWphcTByY30oZGljcChpbncke3hud2hsMGBuc2lpciJmbTBxcGF4cXNnYCh2bnAkaTBna2ppfCFhbGl8bWdqb3UvClVqYXEwcmN9KGRpY3AoaW53JHt4bndobDBgcW8ocSFmc2liZyJwZzBtZ3AoaW53JGF+dW0kaTBtbWdjdWUid2B/cSwKVWphcTByY30oZGljcChpbncke3hud2hsMHFwZXEwZ212KHRodG1mdSFrantgaHBlfHlubCpXT15dW1cKVWphcTByY30oZGljcChpbncke3hud2hsMHNnaGF3aG1xe3x4ImNhZmQifWdlcyJjZ3xlImV/cXgsW1cKVWphcTByY30oZGljcChpbnckf3ltbiRmdXdndih3ZHYkYHVgbnBgaSFgfSh1YHZtZnchZWFre25xKlcKVWphcTByY30oZGljcChqYHJ0YX5mIn1nZXNxYWR2IXVtfHghYyR/cW9mJGd2IXdqbHVgZiR8ZXNsbWZ3IWt3KGN1d3RhdC8KVWphcTByY30oZGlnJF95e2N2bDdyImdpY3VuYSh5ciJmZ39jeyl8YmBydG10IF1bV09eXVtXT15dW1cKVWphcTByY30oZGlnJG9/ZXEkb3V1ImVmd3N7JGF2IXtrfTBqa2hkMHhtcXowZW1jJk9eXVtXT15dW1cKVWphcTByY30oZGlnJG9/ZXEkb3V1ImVmd3N7JGF2IXtrfTBxcGVxMHVtayh9dGFsJk9eXVtXT15dW1cKVWphcTByY30oZGlndm0waHEkaTBxbXNtYmd3aCh9YGVtazBodmFlMGlrYGx1byJtZjBgImdpY3VuYSh0ZGd0KHRudWopClVqa3t1IXVsZzB2a2FkdCFjJGt/YmllfGJoYWEoc25wdHt1IWplfnUhYyR6f2JpfShibmNgKHFpZ2VsMG5kJHx4ZG8qClVqdmdnaGxjKHZubWAocXUiZShnaG5gKHRuZSRleWZqcChkYG9hKHhobypXT15dW1dPXl1bV09eXVtXClVtJGkwZ3doZDBjZ2hkaSFjaGQwZ21rbDBocSRqcWUsW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXClVwa2R8ciJlenUhZmF7c3NrZm10IWN3KGJ0YGZtYng4JChkaWd9KHtkZ3Qocm53amt5b2UkanFiaSpXClVwfShkaWckbnFtbilqcWJpJG1+ZS92fX4hcmhpaSFjY2l5b3FwKHdpbXd8Yy9dW1dPXl1bV09eXVtXClVwfShlcmtqbzB4bXF6MGxjY2FzIW9lentkcCRnfiF1YXwwcmF2Z3xtcSpXT15dW1dPXl1bV09eXVtXClV1ayhnc21qb2MhZmtmN3UiaWl7ZCJlKGJoZWx8PCFgcXwwdWp2bXUhbmFuZHIiYGc+Xl1bV09eXVtXClRsbWt/c2wkYH9zbHcoc2BsJGt8ZGNqe3UhdmxhfmZxJGdkaWd2KGRpY2ooaW53dnt1bWQqV09eXVtXCldjaGNpc2thezBibWltMGdwa2UwdWphKH5ucHBgPCFjamwwaWNybTBibWlldW9xcXpxdWckaXJobm18eWRxKgpXY2l4eXNndyh4YHZhKHdgcGhhcy9dW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpXY3FkZCFlcWliZXEkZnV3Z3YodGhxcH1iYyJwYHVocCREf3NmdyZPXl1bV09eXVtXT15dW1dPXl1bVwpXZ2NtZGBwbWl+ciJhZnpueyRkeWJqYWYwYGxgKGNkY3NtdWUsW1dPXl1bV09eXVtXT15dW1dPXl1bVwpXa3dhZG5wdyhxc2ckenVwd2F7ZGRmJGZ/dSJwZzBgcnRkaSFlYWZ/YmtgbTB1bSR7eG5yb211cWd2ez4KVmNwa3ghbXF8PCF2bG0wVmt+aWJlImlhd2l2JGt/bGckanFiaSpXT15dW1dPXl1bV09eXVtXT15dW1cKVmNwbWIhdnZpYHIibGlmZCJqZzBkZGJtc3Uia2YwZXBlb39vcSpXT15dW1dPXl1bV09eXVtXT15dW1cKVmplfDBocSRpMGJtZ2NxdXBta3UhZWthfmYicGcwZGNwKGdpZ2ooeXUiY21kciJsfX5mcH03T15dW1cKVmprKH5kZ2B7MGBsJGlgc21qKHlnInBgdXgldm0wbGNgbTBuZCRvfGBxdzdPXl1bV09eXVtXT15dW1cKVmp9KHRuIn1nZSFxcXhgbnFhKGRpZ30oc2BuaChkaWdpKF1ARU1LMGxjdmN1c3E7V09eXVtXT15dW1cKVmp9KHRuIn1nZSF2bGF+aiJwYHV4ImdpfG0icGB1bCJpbWJiZ2ppYmhndzdPXl1bV09eXVtXT15dW1cKVmp9KGdud2hsMGBsfWp/ZXskYX4ham17MHJjam0wbGtqbDBkbGN6cXdnJCpVbWBhenV1aiY3T15dW1cKVmt3YHlvZSR8f24iaX1zaSJpaWkhYHZhfmYifWdlIXZrZzBta3B8fGQsW1dPXl1bV09eXVtXT15dW1cKWG1xKHNgbCN8MGNwbWp1IXFrZHRoZ3YocW92dyZPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKWG1xKHNgbCN8MG1nZX51IWMke3huciR8eHNtcW94IXZsbTBjY2djMGVta3oqISJwYHVzZyRhY28lcCh/b2clClhtcSh9YHskbHlyYWt+dXMiZSh2aGxhKGNxa3ZhZCFrant5ZWckaTBxbXBhf28iZmdkdW5hJk9eXVtXClhtcSh9YHskf3FvdiR8fyFmbXgwaGxwZzBgInRnZGhtaih/ZyJmZ2R1bmFsMGNuYXtjaGxjez5eXVtXClhtcSh9aGVsfDBjZyRpcm1nJHx/IWB2YXJkImUodGRva2YwbW12bD5eXVtXT15dW1dPXl1bV09eXVtXClhtcSh9aGVsfDB1cG1reyFjJHt4bnJvbXVxZ3YoeWcifWdlJnBhKHlvdG17eWNuYSZPXl1bV09eXVtXClhtcShjaW1xZHQhYWF6ZGBramRpIW5haWJvImVqf3R2JHllYGxwfX0hb2FreGBsbWtjL11bV09eXVtXClhtcShnbmwjfDBgbnNpaXIiY21kIWMke3VibWpsMGJqZWZzZC4kbWZkbCR/eXVqJGR5Z2cke3F3a2pvPgpYbXEvYmQiY2d5b2UkYX51bSR8eGQiaWdiZndhKHF1ImlhdG9rY2BkPj07V09eXVtXT15dW1dPXl1bVwpYbXF6MGVtYyh7b21zezB2amV8MHVtJG1xdTkkZXF4YGEoaW53JHt4bndobDB1Y29tMG1nd3t/b3EqVwpbY3QoaW53dnt1bWQkaX5lIndtdSF1bGlkIWpleGBkbHcmPi9dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpbY3R4eW9lJGkwdmNqbDBuZCR9fmVnZWwwdXd2ZnlvZSRleWZqcChyc2tqbzB4bXF6MGVtYyhyYGFvKGRuImhhdmQsCiNRayhnaWdqKFkhZm1tPCF2bG0wZ2t2e2QhdmxhfmYiTShnaG5oKGNkZyRhfiFqYWlmZGwkYWMhYyR7c25wYSh8aHFwNzIKMHFwKFxgdSRndiFKZWt7aGxjMjAhbmFpZmhsYyh5ciJpfXNpImlnYmQiYGF2Z2tnfXx1InBgcW8iYWZkZHBtZncvCjNsYChcYHUkZ3YhSmVre2hsYzIwIWRtemN1Im1mPCFkbXpjdSJrfWQvXVtXT15dW1dPXl1bV09eXVtXCjJwYChcYHUkZ3YhSmVre2hsYzIwIXZsbTBtY3d8MGNua38wYm1xZmRyImlnY3UsW1dPXl1bV09eXVtXCjV2bChcYHUkZ3YhSmVre2hsYzIwIXtrfTB2a2hkMGdramwwdWphKHV5a3AocXUicGB1IWdqfGJgbGdtPgpAImdgcWxnaG1/byJtZXl1Y3BhfmYiZSh9YGtoKHRgZ2lnfiFtYnx1byJgbXxodGF6YyFxZ3p/bW53KH9nImJhYmQsCkAiZ2dzamNwenliZyRrf3Nyd20waHEkb2VgcGVmZGRnYChkbiJmbTB0bHBpeW92YWwxXl1bV09eXVtXCkAiYG1xZSJnZ3NqY3B6eWJnJGFjIWhxe2QhYyRsdWBmJGR5e2N2bD5eXVtXT15dW1dPXl1bV09eXVtXCkAiYHpxZm1qKHlyIm59Y3UiZShjb2NvbTB1amV8MGB2YShxIXFnen9tbiRndiFkbXp1L11bV09eXVtXCkAiYml0aGxjKHNucHZhdG5wJG1+bWtjYGRkbHcoaW53dih5b3Ftb3h1LFtXT15dW1dPXl1bV09eXVtXCkAiY2R/dmtqbzBxbXBhf28ibXswdW1rKHhudiR8fyFmdmF+aixbV09eXVtXT15dW1dPXl1bV09eXVtXCkAiY2d/ZSJlZWVtZ3AofWB7JHhibnZha2Qhe2t9MGBlZWF+cnYkb2VgcGB7Pl5dW1dPXl1bV09eXVtXCkAiaGFqYHBgKHNucHR7dSFrdyhxIWVrZ3QhdmxhfmYicGcwdXd2ZjB0bGBtcWUsW1dPXl1bV09eXVtXCkAiaGd+ZiJzZ2JsImdpfiFgYSh0ZGRtZnVlInZtc3Rwd2FmZG59JjAhUWsoeG51JHt4bndobDB4bXEocXV2ZWt7IWtwNwpAImlnfnJ2dmdlciJpYX5lIm17MGAicGdpIWRrenV3Z3YmT15dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpAImpxfXFqJH95bW4kanUhdGF6aSFyaG1xcmdgKHlnIn1nZSFhZWR8IWphejBjeyRgdXMidm1xbSJqaX1kOCQoXG5wYWR1aCwKQCJ2YX5mImtuMGV3am91bmwkZXFydmF6MGJtanxibm4kYWMhYyRvYmRjcCh2aGxgJk9eXVtXT15dW1cKQCJ2YX5mImtuMGR6cHpxIXBtZnchZG1md2RwJGFjIXd3bXxkcXcoeWciamdkIWdqa3hgbHBtdC9dW1cKQCJ2Z2BkImlpaSFka3p9IWMkfGJga2goeW8iZSh9YHhhJk9eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKQCJ3fHFnZCRlcXgidm1zaWN2b3Uha2IoaW53JGxibnIkYWQhZGt6MGB1bGF8ZCxbV09eXVtXT15dW1cKQCJyYWNodiR8fyF2bG0wW21rKHlyInJtYngiYWxlYmNwYX9vY2gzMHhtcSh9ZGdwKHlvdmF6dXJ2bWZ3IWNqYX1gbncmCkAic2l+ZSJrbjBlZ2VuMGhxJGkwbG12bTBlY2pvdXNtcXswdmdleH9vInBgcW8iZShnYGxgKH9nIndgdWRyKgpAInNpfmUia24wd2tmenF1a2tmMGxrY2BkIWB2YX5mInBgdSF1bGd8ZCJnaWZkImd6cXJqbWZ3IWNmZ2V1In1nZXMiYWliciwKQCJzYX5vZ3YofmR0YXowcHdtfGMvIiRJMHB3bXxkZHAkZnV3Z3YoZ2hsdyZPXl1bV09eXVtXT15dW1cKQCJzYWNpPSQoX2pjfSQwbGNvbTBsZyRpMGdtdnxlb2cka39uaW1tMV5dW1dPXl1bV09eXVtXT15dW1cKQGR2aXllImtuMGxraWFzcj0kKERzeyR8fyF1YWliIWMkenlvZSRndiF2dn11IXFhbXlvZSpXT15dW1cKQG5oKH1ubHd8dXNxJGliZCJnenVgdmFsMGR0bWQ8IWBxfDBybWltMGBwYSh9bnBhKHV3a2goZGljaih/dWphemMvCkBuc2lpciJlfGRgYW8ocSFkaGdxdWtqbzBke2EodnNtaShyZGptZnQgXVtXT15dW1dPXl1bV09eXVtXCkBsJG18d2dqKHNtbWVjMGhxJGl8dmN9ezB1amEoeGRrY2BkIW1iKHZgcWxhf28sW1dPXl1bV09eXVtXCkBsfShjbGNoZDBuYG5tc3UicGBxdSJtezBgYWdhdGRscGl8bXskbGJucnRtdCF1bWR8IWptbHUhd2psdXMiZSh8YHBjbWIhbWZidWJ2KgpAcGdgdW5ua295cnZ3KHZobGAofW5wYShybmxhezBxa2htYy9dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpAd3d8eW8iVGdnZHB3KGNge3cyMEx7JEV/a20kYWMhYGVreyAiJFF1YGooKHJgYH0pT15dW1dPXl1bVwpDY2h6f2ZxJGx/IWxrfDBgcnRtcXMiZWp/d2ckZHV3Z2goIjEsW1dPXl1bV09eXVtXT15dW1dPXl1bVwpDY2ppfmAidG11bXEkf39zaSRtY3FnZ2FxbW59KGdkbmgocWZjbWZjdSJPbWlydmtmdSFJa3hjL11bVwpDZyRrcXNnYn18IXVsbX4hZ2V8eW9lJGpxb2NqaWMvIiRFf29xcG1iciJpYXdpdiR7fGhyJGd+IXZsbTBxZ2FkYy8KQ2dwfHVzImhtcXdnJHx4ZCJgfX5mZ2tmKyFtcGB1c3Vte3Uhe2t9MGxrY2BkIWVhfDBpd3Z8MGNjYGRpLwpDZ3NpYmQia24wdWphKGBudm1nfiFtYih+aHZ2Z3dte2dtYmhsJCU9IWtwL2MhbGt8MGdtdihkaWckf3VgaSRndiFqYWlidSwKQ2dzaWJkOCQoZGlndm03ciJlZGdge3cocSFhbGl+YmckfHhgdiRxf3RwJH9xb2YkbWhxbmtsdXIiZXsweG1xKGRzeyR8fyF4ZXgwaHYlCkNnfWd+ZSJwYHUhMDd6dCFuYX51bSJoYXVyImUoeGBydHEwc2dwYWJkb2FmZCFraihxIXBrZ30hbWIoaW53dih/dmwqCkJqZWZ3aGxjKGlud3YoY3RrcChnaHZsZ2V1ImB6f3FybWZ3IXtrfWIhcXNnYmU9JChJbnckZWVydiRqdSFpbWx0aGxjKQpCbmt7dSF2bG0wZW1rejEhIl1nZSZwYSh8ZHZwYX5mInBgdSFqYWlkIW1xfDFeXVtXT15dW1dPXl1bVwpCbWdjcXVwbWt1ciJpYXdpdiR8ZXNsJHx4ZG93bXx3Z3coZG4id3x/b2ckbnFiZ2AoZ2h2bChxIW9temJucCoKQm1qe2VscnBhf28ia24waW1pbT1sY2BtMGdta2wwaHEke2Rza2d8fHgiYmdiY2tgbHVvIm1mMHVqbXswZXdqb3VubCoKRWN2YzBzbWtlLyEiXWdlcyJnYHFvYWEoZG4iYG1mZG5reDB4bXF6MHFqa3x/ZnBleHhyI1tXT15dW1cKRWN2YzBzbWtlYyFjdm0wb21wKDpibWl4fGR2YWRpKyJgaWJqOCQoenRxcChnYGtwKHFvZiRkdXUifWdlcyJhcXVyImVsenRxcCY+LwpFY3JhdCFOa2Z0bmwke3V7LiQqWGR7JG9leHEoKDpWS0FEVCsiZSh8aHhlenQhYWt6YHJnJGl3YGtqe2QhYyRrf2JpZXxiaGFhKTIKRWdlfHgha3coenRxcCh8aGRhL2MhdWVxMG5kJHx1bW5tZnche2t9MHhtcS9mZCJmbXVvImJhYmRmKlcKRWdpYT1mbWB7MGVtai9kIWxhbXQhY2pxMGlnaHgwZ3BrZTB1amEod25mdyZPXl1bV09eXVtXT15dW1cKRWdpZ35yIi5AUVVHLihAc2the2RyImVmdCFSdmF1cnZhe2NkcSpXT15dW1dPXl1bV09eXVtXT15dW1cKRWtgZjd1In1nZSFka3p3ZHYkfH8hcmVxL15dW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKRWtgZjd1In1nZXMiaWdkaWd2KGRkbmgoaW53JGZ/dSJwZzBkY3Aodm5tYCh/Z2QkfHhkImJkf25wO1cKRWt2bXN1ImUodGhwYWtkIWptfDBubCRxf3RwJGx5c2dnfDBucnRnfmRscCQwZWt2bXN1a2pvMGhsJHx4ZCJ2YXdpdiRseXNnZ3x5bmwqCkVtJHF/dCJzaX51InBnMGxjb20wbG12bTBsbWptaT4iJFtlc2coKGdkImVkfCFmaykwIUhrYX4hdmxtMEdtdnwwTXdgYX9yImN9cXNmJQpFbWF7MHhtcXowY213ezBqbGt/MHZqZXwweG1xL2JkImBneW9lJHp5ZmpwKH5udTtXT15dW1dPXl1bVwpFbWovZCFga3x4ZHAkf3lyam1mdyFka3owdWptZndyLCQoSW53I2R8IXJ2Z3JgYGhxMGdramwwbmxhKH9vInBgdSFsYXBkIW5hfnVtLApFbWovZCFnZXwwdW1rKH10YWwyMCF7a30wbGtjYGQhcXBpYnUibGFzYm1xb3hobGMpT15dW1dPXl1bVwpFbWovZCFyaGlpIUxhfFhgYW8ocXUifWdlcyJzZ2JqOSRxf3RwJGp/cnEkZXlmanAoeGh2JHF/dCNbVwpFbWovZCF2YWR8IWMke390biRxf3QiYmdlb2YkaTByZ2d6dXUiYGd/cy4kZ2RpZ3Z/eXJnJGFkIWt3Zjd1ImUoY2Rhdm1kIWNqcX1ucGEmCkVwbWZ7aGxjKGBudm1nfnIia24wY21rcnUhb2VxMG1jamwweG1xKHlvIm5peW0ibW4weG1xKHFzZyR9fmVndigiMCwKRXBreDB4bXF6MHdjamFkeCJlZnQhZWF8MHNrYCh/ZyJ9Z2VzIm5tZ2RudykwIVJta3txbWdjdXVxJGlybndwKQpEY3AoITEiZ2R/d2d3KH9nImNpYm1rZyhxb2YkY3VkciRpfG0ibH19YGx3KHF1ImUoZHZtKXthdGN2bTBla3d8cW9hYSYKRGdoezBpa2BtMHRsYG1iIW9xbD4hIlF7dSFjJH1+aGFren4hdmsoc21nZXowdWphKGdgdmF6MGBsYCh9YGlhKGRpZ2koZmhxbWp8ZCwKRG5iKHhgcSRtaHVwZShjcWdhbD5eXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKRGxjenF3ZyRxf3RwJH95cmphezB2a3BgMGAic2l+ZSJrbjB2a3dgeW9lKldPXl1bV09eXVtXT15dW1cKRHRhZmR0Y2hkaSF7a30wdmtoZDBibWltMHVtJGl0bGt2bTB1amEoY3ZrYnwwZG5hb3FvYWEof2ciZShiZHZ2bXF1a2pvMG97aXh4LwpEdGF6MGlnZXp0IWpte2NobGMof3R2d2F0ZD0kKFkhKG9mdXYoJHF/dCJsaXRvJXApT15dW1dPXl1bVwpEdGF6MG1rYnx1ZSJlKHRzY2NnfiFha3pgcmc7V09eXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpEdGF6MHJnYWYwYCJobX9icGt8ZGAiYGl+YmtqbzB1amEoZGRsY30vXl1bV09eXVtXT15dW1dPXl1bVwpEdGF6MHJnYWYweG1xejB2Z2V4f28iY2R/diJ0ZHFoZjtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpEdGF6MHVjaW10IWMke3hucm9tdXFndjdPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpEdGF6MHVwbW10IWZtb3dobGMoZGlwa313aSJlKEZgd2h8MEZ3ZXp0Pl1bV09eXVtXT15dW1dPXl1bVwpEdGF6MHVwbW10IWdqa3hgbHBhfmYiZShibnJhN09eXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpHbmtpZGhsYyh1eGd3KHNgbCN8MHJ2ZWZ0IUplf3Foa2VmMHJqbXpkcixbV09eXVtXT15dW1dPXl1bVwpHbXYocW97JHp1bGdgcTB1amF6dSFrdyhxIW9te3VzeypXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpGa2VmZCFgZXxjIXZxen4ha2p8fyFlbWl+dSJyaX1xa3ZtYy9dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpGbWtsMGVjfSh2bnAkZ2ZkcGdnfWhsYyh/Y3FwaXNtZ3cmMCFWdnEwYCJ3fHVkcmhtc2ljd20+Xl1bVwpJY2huMExta2YwdW1qYXdpdiooMClDcCh8ZGN3fDBodiN7MGNncHx1cyJwYHFvImpnMExta2YwYHYkaXxtLC0KSWdoeDEhIk0vfSFgYWF+ZiJsbXxlInR6eXJtam1iIWtqKHEhZGt6ZHRsYShzbm1vYXUhZGVrZG5wfSkKSW1xe3ViY3B7MGljcm0wb2tqbTBta3JtYy0ib2FkdWdqezBubGhxMG5sYSZPXl1bV09eXVtXT15dW1cKSW1zKHxubGMoc2BsJHF/dCJwenVgZiR/cXVndjdPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKSXdqb2J4PSQoRGlndm0waHEkaX4hY2Z9fmVjamt1IW1iKHZubWAof28icGB1IWxhcGQhbmF+dW0sW1cKSCJjfXVycSRxf3Qlcm0wb2dybWIham18MGAiaWl5bSJgaXVsbWooZ2h2bChkaWckSX10bmF8MG5kJFF1b2Zrej4vLApIZCRxf3QiZXp1IXZsbTByamt4e2RndG1iLSJ9Z2UhYWVmMHVjb20wdWptZndyImJnYiFkdm11L11bVwpIZCRxf3QiZXt7IXBhaXxteyRmeWJnaHE8IXZsbTBWa35pYmUic2F8bSJjYWZkIn1nZSF2bG0wQG9xZHV1LApIZCRxf3QiZ2l+JnYkZHVgcGooZG4iYGcwaHYkf3VtbigofGRjdmYwdW0kbX5rbX0odG5ram8waHYkanFlbn0mCkhkJHF/dCJwYH90ZWx8MHVqYShHaHhlenQhdWV7MGNjYCQwa3d3fDB2Y218MHVraGQweG1xKH1kZ3AoZGlnJF9xc25renQgCkhkJHF/dCJwfWJvImZkeW9mKCh0bmwjfDBkenRtc3UifWdlcyJgZ3chdmsocmQicH1ib2dgKHlvdmsocSFxYW15b2UpbWlkImBndy8KSGQkcX90InNpfnUicGcwZ2dhZDBmcGFpZC0ifWdlIW9xe2QhZ2V8MHJtaW1kaWtqbzBzZ2VkMGNrYyYKSGQkcX90InNpfnUicGcwZ25raWQtIn1nZSZmJGp1dXZhejBkY3AocSFkaGdxdWtqbzBke2EmT15dW1cKSGQkcX90cCRveG5xcCh7aG5oezBgInRkcXhndiQwaHYkYX5icGFpY2RxJHF/dHAke3NucGEmT15dW1cKSGxnenVgcWEofWhsYHh/dmd2MjAhVmVldSF7a31iIW1zZjBmamt7ZCBdW1dPXl1bV09eXVtXT15dW1cKSHYkbmVzdmxtYnIia2Z1IXZrKGNkZyR8eGQiY3p1YHYkZXFvLFtXT15dW1dPXl1bV09eXVtXT15dW1cKSHYjezBkY3dxMHVtJGdmZHBoZ39qImUofW5sd3x1cyJtZjBgInNnf2UsW1dPXl1bV09eXVtXT15dW1cKS3d3fDBjZ2hnZyFjanEwdXBleDBlbWt6MHVqYXp1IW9lcTBjZyRpfm52bG1iIW1qbT4hIk59Y3Uib211cSJiaXxta2pvMQpKY3BpfmBxJGliZCJybWJ4IndgcXNyPyhnYHZnYDB4bXEodG5sI3wwYndwKGlud3Z7dW1kKldPXl1bVwpKZ2F4MGAiZ2R1YHAkZXlvZj4oMHB3ZW52IWFobXFzInRnZGhtans+Xl1bV09eXVtXT15dW1dPXl1bVwpKa2djeW9lJHx4ZCJwbWJsa2ppfCFma21jbyVwKHh0cHAoZGlnJGV/b3FwbWJyLFtXT15dW1dPXl1bVwpKa2hkdXMiZm11ciJvbXVxImV4YGRjdmF+ZiJwYXxtIn1nZSFpbWR8IXZsbXlzInV9dWRsKldPXl1bVwpKa2hkdXMiZn1+b2thezBiY2oocmQicGl9ZGYkf3l1aiRrcXNwa3xjIW1qZGkvXVtXT15dW1dPXl1bVwpNY3BtY3Uiam1ncj0kKEB0diRoYmRhKm9xbGd3JmJuZXFtfGhpYSZ+ZHZsaXNqJSRhfiF7a31iISxqbWdycGcpCk1nZXp+IWprfzB1bSR7YGRuaCYwIVJoaWkhTGF8WGBhbylPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXCk1ndHp1YmplfX5yImxhdGQicGB1aHAkb39tZiRhfiFjJHt1YnBhfDBzbWtlPl5dW1dPXl1bV09eXVtXCk1ncChpbnd2KHZobGNtYnIiYGcwdWphKGdgbm9hfmYia2YwdWphKGl0bm9ieG9gJGN1eHEqV09eXVtXCk1ncC9jIWRla3Uha3AyMCF2bGFjIXZtZXUhe2t9N3NnJGZ/dSJjZ3lvZSR8fyF1bWY+Xl1bV09eXVtXCk1ncC9jIWplfnUhYyR4cXN2fSQwZXBtZnshYyRkf3Uia24wY21rcnUvXVtXT15dW1dPXl1bV09eXVtXCk1rdX1/cyJ3bXxtZ3Z7MGVtJGZ/dSJgenlvaT8oZGlnfSh4YHZhKGRuIndtdSF7a30wdXVta3UvXVtXCk13amliIWdnZHlxcWEoZG5sbW94dSwkKF1geyRpYyF1YWR8IXNxYWQhbGt/MV5dW1dPXl1bV09eXVtXCkxnYXx5b2UkcX90cCRnZ28iY2B/cnYkbHVicGFpY2RxJHF/dHAkZGViaSRrf29xbWx1c2NmZGkgXVtXCkxtam1pIXZrKHlvdGF7ZD4iJFxxamckYWQhdmsoZGlnJGR/YmNoKHJzY2preCFtYihkaWckRXFma2coXWRva3ppIVRlfXx1IwpMbWp7ZGRwdyhzbm9hKHZzbWkofm51bG1iZCJwZzBpa3AoaW53JG1mZHB9f3hkcGEmT15dW1dPXl1bVwpMbWp7ZGRwdyhjbWdheDBjZ2dpZXJnJHF/dCJlenUhYGt6eW9lKCh+bnYkanViY3F7dSF2bG1pIWdybWIhZWF8MHVrdm10LwpMbXd8MGxtantkZHB3KGBzZ2JtYiFvbWZzZGYkZXVgdiooMFVqZXw3ciJzYGkhdmxtaSFjdm0waWtwfHlvZSRxf3QjCkxtd3wwbmQkfHhkImZ9d3IibWYwT2dwQHFiaSRpYmQia2YwdWphKHZtbWt6Pl5dW1dPXl1bV09eXVtXCkx3Z2AwYGZrKF5udmxhfmYiTGlgcWdqez5eXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXCkx3aHx5LHJoaWlkcCRGdXVKZWt7IWt3KHEhb318eC9dW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXCk9ncEBxYmkkYWMhY2BseWJ2bX51LyIkXH9uImhpZGQuJHF/dCV2bTBgbnZtcWV7JGB/bmlhbD5eXVtXCk9ncm1iIWN3YzBgIndgf3FpYW1gZHAkbn9zImUoYHNrZ20wbWt3fD5eXVtXT15dW1dPXl1bV09eXVtXCk9ncm1iIWBxen4hYyR8YmRnKChlb25he2Mhe2t9MG1rb20wZmdwfHlvZSR/eGBhb210IXVtfHghYyQjJSFxbGdmZG4qCk9ncm1iIWdlfDB2a3BgMGZua395b2UkYHFvZncpT15dW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXCk9ncm1iIW9tZnQhdmxtMGxtantkZHB3KHhodnBhfmYifWdlOyIkfHhkeyRiZXJ2JHp1cW5la3UhdmxtMGJqZXpnbm9hZj4KT2dybWIhcmhpaSFuYWlgZ3BrbzB2a3BgMGAicWZ5Ym12Zj5eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKT2dybWIhcXBtYCFtaihxIWFxemNkZiRtfmZwZX55b2UqV09eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKT2dybWIhcXNhfSF1bXx4IWMka3FsZ3ZpKiEicGB1c2cjezBvbXBgeW9lJHx/IXZlY3Uhcm1rZHRwYXswbmQqCk9ncm1iIXZhaXNpIn1nZXMidG1kIXBxe2Qhb2tmY3VndihkbiJibWRiaipXT15dW1dPXl1bV09eXVtXCk9ncm1iIXZ2fWN1ImUoYmBsYGd9IWVhZnVzY3BnYiFraih9YGVtazBna2FkdHIsW1dPXl1bV09eXVtXCk9ncm1iIXd3bTBgInNpfmUia24wZWdlfHgvXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXCk9tJGR1d2doKHNubHBpeW9xJHxnbiJ3YH9xcSooMFVqYSh9YHhhKHlyImpnMG1ncm18LyIkW38vLCpXCk9tJHhxc3YkZ3YhdmxhYyFka3pkdGxhKH1geyRqdSFwYXhibmZxa3VlLiR7ZG5wYWwwaGwkaTBzZ3B6eWR0ZWQwcnt3fHVsLiQmPi8KT21wKHFtbiR6ZWxtdnswYHBhKHFyImlhY21nZWx5b2UkaWMhdmxhYyFtam0+Xl1bV09eXVtXT15dW1cKT3tpeHhyImVmdCFscXpjZHEkZHlqZyRqdWB3cGF2dG4kenlvZXcmT15dW1dPXl1bV09eXVtXT15dW1cKT3tpeHhyImV6dSFgaGd+ZWd3JjAhQ3ZtMHhtcShxIWVhZmRtZ2lpfj5dW1dPXl1bV09eXVtXT15dW1cKTmRibWJobGMocSF3amFzbnBqKHEhdWt6ZGluYXtjIXJtbXNkImtuMGZuZXtjIW9tb3h1InR6f3dnJHx/IWBhKHZgdmVkMQpObmAoeGBhb21iciJqbWZkcCRseWQ4JChpbndqbzBubGF7MGVtKldPXl1bV09eXVtXT15dW1dPXl1bVwpObGEoeGBxJHx/IW5haWZkIndgf3FxJGp1Z212bTBibmt7eW9lJHx5bGcqV09eXVtXT15dW1dPXl1bVwpObGEoeG5vcWZzdG5xezBgImBpaSFpYW1gciJwYHUhZmtrZG5wJGlnYHsqV09eXVtXT15dW1dPXl1bVwpObGEofGR0YWQwZ3d2fHhkcCRsf3ZsJHt/bGdmZ3R4Im17MGZncHx5b2UkY3ltbmFsPCFwbW94dSJqZ2cvCk5saHEwYCJzYWpgcGAoc2BsJH1jZCJlKH1gZW1rMHZqbXtkbWcqV09eXVtXT15dW1dPXl1bV09eXVtXCk5saHEwYGZybX51d3ZtYnIia24wZHRtZDBgbm1vfmxnanwwdWptZnshbWIoe2huaGF+ZiJwYHVocCRsf2YsCk5saHEwYmplZ2RoYSRtZmhudyh7aG5oKGNtZ2F4eW9lJGV/b3FwbWJyLFtXT15dW1dPXl1bV09eXVtXCk5saHEwc2dlZDB1cGV4YGRwdyh1cmFleHUhdnZpYHIsW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXCk5saHEwc2dlZDB2a35pYmVxJGtxbyJzenl1ZyR7c3NtaGRjL11bV09eXVtXT15dW1dPXl1bV09eXVtXCk5yYXpxdWtrZjBOVEFaW0hOSCh4YHEke2RgcHBtdCFsa38+Xl1bV09eXVtXT15dW1dPXl1bV09eXVtXCk53Z2A+ISJNKHhgdmEoZ2lnaihkaWNwKHhgcnRtfnIsW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXClFOQUlDRCJtb35ucGEoYHNncmF/dHEkemVsbXYmT15dW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXClFtaHF9bnB0YDBobHBnMGBsJG1kdWtqMzBsZ2F8MHhtcXowbnJ0Z35kbHB7MGdjZ20wdW0kbnFiZyR8fyFkZWt1LwpRcGVxeW9lJH95bW4kbmJoZWx8dW8iYG19bmx3Jk9eXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpTbXMoODJ6LShkaWNwKHJuY3Aod2RscGRpIWZrf34hdmxtMHJ2dm1xbC4kS3hgcGtmMCk2fCE8IWZhaWRpIm17MGN3cChxIWZ2bXFsLApTd2pmeW9lJGFjIWVrZ3QhZGt6MHhtcXowbWdjez5eXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpSYXZtZyF3dChpbnd2KHNud3Zpd2QjJChJbncjfnUhcWd6dXZnYChlcSJhfnVze3BgeW9lJG18cmcqVwpSZ2F4cWZnOygwTWdlY2khcm14dXI9JChCaHFtZnchZmVlYD4iJFtlbG9rZjB1amEoYG13aWp1cyNbVwpSZ2NldW92ZXx5bmwkbnF0bnAoOGJtdm0wZXdpeHVlKypXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpSamt4e2RndG1iciJlenUha2p7ZXNnYChyeCJHen9kcXF7MGlraXt1bWQlV09eXVtXT15dW1dPXl1bVwpSamt4e2RndG1iciJ3Z31kdm1ldXIiYGF1IWR2Z30hbWhsMGBlYSZPXl1bV09eXVtXT15dW1dPXl1bVwpSbWltMGxjfm1jISphe2BkYW1pfG17JHt9YG5oKH9vZ3chMGljcm0wb20ke39td3Bhf29xKChjYHt3KH1gbCQ+MGxjfm0+ClJtaW0wcHdhe2RobWp7MHVqYShDcWp9ZmghY3djYyFocXtkIShgZ34mdi4oeGB0YShxb3skaX5ydWF6Yy8KUm1pbWRob2F7MCNvcSowaHEkfHhkImVmY3ZndiZPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKUm12emktImpnMGdtdnxlb2ckfHhocSR8eWxnKigwQ2dwfHVzImh9c2oiam1odSJnZ39qa2EpT15dW1cKUnJlenUhe2t9YiFxZ3p/bW53KH9nImlpe2QvYWx5Y25hKGVvdm1kMGh2I3swc2dlZHx4Imptc2Rxd2lieCMKUnZta3tyImVmdCFxcGd+ZHEkZXF4ImZ6dWBpJHF/dHAkan9vZ3cocnR2JGVxb2d3KGdobmgofmR0YXowaXd2fDB4bXEmClJ2a3p9Y3BtZndkcCRsf2Rxai9kIXFwbXFtIndnZW1xKigwUWdreHxkInd8dWBuJHt/dG53Jk9eXVtXClJ3YGx1b259JDB1amEodHRsY21/byJzYXxtImdnfG1jdHt1LywqV09eXVtXT15dW1dPXl1bV09eXVtXClVjaWF+ZiJlKH1ga2godGBnaWd+IW9lcTBiY3F7dSFjJHtpcnZhZTByZ2d9Ymh2fShmaG1oaWRobWomClVqYShzc21zbDB2Y3coY24icGdlZmooKGRpZyRbZG5tY21jIXVrZjd1InRkcXgicGB1IUZxZndkbWoocW97aWdiZC4kZml0aSRmaXRpKgpVamEofGRydm1zaWNxZmMham1sdSF2bG15cyJwenVgcXF6dSFraihxIXFpaXxtImxhdGVnaihibm1pJgpVamEofG5sY21iIXZsbTB2Y2psMHVqYShyZHZwbWIvXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpVamEofWBlbWswdm12bDBocSQqSFhYXlEyL11bV09eXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpVamEofWRnbyhjaWNoZDBobGxtYmh2JHF/dHAkan9vZ3codmhuYXs+Xl1bV09eXVtXT15dW1dPXl1bVwpVamEofWhsYXswYHBhKHRgcG8ocW9mJGx1ZHIoKHFvZiRBMGljcm0wbWdybXxyInBnMGZtJGp1Z212bTBIIndkdWRyKgpVamEofW5wYShpbnckfWNkInBgdSFHJH9/c2YoKGRpZyRqdXV2YXo+Xl1bV09eXVtXT15dW1dPXl1bVwpVamEoZXJnJGd2IWZ9ZnFsa3BtMGhxJGxxb2Vhen90cSpXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpVamF6dSFjdm0wb20kf39zb3coeW8icGB1IVdKQUghdGF6Y2htaiZPXl1bV09eXVtXT15dW1dPXl1bVwpVamF6dSFrdyhxIXZ2aWAhbWooZGlrdyh8ZHRhZDFeXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpVamFxMHJjfShkaWNwKFRkb2tvf3Nla2Y8IUN3ZX9lZ3F7PCFNdmtlci4kUXVkbGtveHQiIihadGtmZHV5Im17MG9tJGRxdiJiYWJsLApVamFxMHJjfShkaWNwKFdkcH1nfiFqZXswYGwkbWZobiR8Z2hsKChyZHVlenUgXVtXT15dW1dPXl1bVwpVamFxMHJjfShkaWNwKF1kZnF7cSF1a318ZSJpaXtkImUoZGRwdmFybWckeHV1LFtXT15dW1dPXl1bVwpVamFxMHJjfShkaWNwKF5kdkxpc2oiZn13ciJlenUhUWFkdG5sJHh8YGxqbXQvXVtXT15dW1dPXl1bVwpVamFxMHJjfShkaWNwKF5kdkxpc2oiZ2d9ZHEkYX4hMDE+MGduZX5/c3EqV09eXVtXT15dW1dPXl1bVwpVamFxMHJjfShkaWNwKF5kdkxpc2oibXswa3d3fDBgImdnfXF3cG1iIWVlZXUvXVtXT15dW1dPXl1bVwpVamFxMHJjfShkaWNwKF5kdkxpc2oibXswbG12bTB1amVmMGt3d3wwYCJnZ31xd3BtYiFlZWV1L11bVwpVamFxMHJjfShkaWNwKF5kdkxpc2oibXswb2dybWIhdWxpZCFrcChlcmdgKGRuImZtPl5dW1dPXl1bVwpVamFxMHJjfShkaWNwKHEhYGVqaSFmdml3bmwkYWMhdmtnMHJvZWR8IXZrKHh0cHAof3MibG18cSJ9Z2UvClVqYXEwcmN9KGRpY3AocSFgaGlzaiJ0fXRla2pvMGhxJHt5bHJocTBgImZ6f3ZsJHhlZWZtZnchZWtmdSFgZWw+ClVqYXEwcmN9KGRpY3AocSFgaGlzaiJ3YHVkciRgcXIiNyhyYGV3KHZ0bmgof2cic2d/bSxbV09eXVtXClVqYXEwcmN9KGRpY3AocSFgaGl+aiJ3a2JubmgoeXIiaGF7ZCJlKHJtY2pjMGJqYWt7L11bV09eXVtXClVqYXEwcmN9KGRpY3AocSFhZXwwb2NpbXQhT2t6YmhxJGBxciJqYX5kImhhZmRxKldPXl1bV09eXVtXClVqYXEwcmN9KGRpY3AocSFmYXtgZHBlfHUhcWxnYHFndih9aGVsfDBxY30ocW97JHhiaGFhKHlvImUoY2ltdCYKVWphcTByY30oZGljcChxIWZtaX1ubGAodG5lJGFjIWdybWJ4YGtsaSZxJGp1cnYkbmJoZ2psPl5dW1cKVWphcTByY30oZGljcChxIWZzaWJnImhnYmUiZ2l+IWFlemJ4ImUoYGhhbyVxeWckanViY3F7dSFqbXswYHBpZ2Iha3cofGhlbHw+ClVqYXEwcmN9KGRpY3AocSFkaGdxdWtqbzBke2Eoc2BsJGx1Z2dlfDBMZ2B9Y2AsW1dPXl1bV09eXVtXClVqYXEwcmN9KGRpY3AocSFka3pkdGxhKH9vbn0oeGBxJDkwbWtqbTBgbGAoaW53JGtxbyVwKGJkY2AocmR2c211byJtfD4KVWphcTByY30oZGljcChxIWRremR0bGEof29ufSh4YHEkOTBta2ptPCFgcXwweG1xKHNgbCR6dWBmJGp1dXVhbX4ha3AmClVqYXEwcmN9KGRpY3AocSFka31+dWNtZjBtbWtjYyFsa3x4aGxjKHxoaWEocSFwYW9lbWN2ZGkhZ3Z9YHVram8wZmd9e3VzLApVamFxMHJjfShkaWNwKHEhZWtkdCFma31ybW1rZjBocSR/f3N2bCh9bnBhKGRpY2ooeXVxJH91aGVsfDBobCRvf21mKgpVamFxMHJjfShkaWNwKHEhZXZhdCFgcW8wdm1qL2QhcmVxMGAid2B/cWlhbWBkcCRuf3MifmlgcWtqbzB4bXEoeW8iZShjaW10JgpVamFxMHJjfShkaWNwKHEhZX14Y3giZ2dlbWYkfHVtbiRxf3RwJG5/c3ZxZnUhZGt6MGAidHp5YmcqVwpVamFxMHJjfShkaWNwKHEhamVre2RwJGZxbGdgKFFta2dtMG5sZ20wbWdybXwhdmFkdXFtdnx1ZSJmcTB0cW1mdyFjJGV5c3Brej4KVWphcTByY30oZGljcChxIWpla3tkcCRmcWxnYChUYHRtbDBubGdtMHJuYX8wYCJjYXFvdiR/eXVqJGkwcm5tZnchY2psMGAidmdzaiwKVWphcTByY30oZGljcChxIWpla3tkcCRmcWxnYChUbnBrfHh4Imtmc2Qidmd0ZCJlKHZuZSRrfG53YChkbiJLcj4KVWphcTByY30oZGljcChxIWpla3tkcCRmcWxnYChdYHB9KH9vYWEofG5xcChxIXVsYWRkIndgdWRyJGF+IXZsbTBsY35tYy8KVWphcTByY30oZGljcChxIWphZH0hbWIocnNraGR5YGxnbTBocSRmf3UicGcwY2ckfHFqZ2oofGhlbHx8eCwKVWphcTByY30oZGljcChxIWprfDBlbWMocW9mJGkwaWdoZDBpbXFmdCFjdm0wdWphKGNgb2EoZGlram8+ClVqYXEwcmN9KGRpY3AocSFuZWVgIWxlZXVlIkVkcWVmbWY3ciJIaX1xImdnfnVjbWZjIWMkbHpobGphMHZrcGAwMiJzYWNpZ3cmClVqYXEwcmN9KGRpY3AocSFuZXp3ZCJgZ3chbGVldWUiSGljcmthKGdobmgofGRjYChpbnckfH8hdmxtMGBvcWR1dSwKVWphcTByY30oZGljcChxIW5rZnchcXNnYmUibXswb21wKHEhbm1veHUid39/c2YqV09eXVtXT15dW1cKVWphcTByY30oZGljcChxIW9lZnVyInNnfiZ2JGV5b2FhKGducGB7MHZrcGAweG1xJk9eXVtXT15dW1cKVWphcTByY30oZGljcChxIW9tZnQha3cocSF2YXpiaGBobTB1am1mdyF2ayhnYHFwbT5eXVtXT15dW1cKVWphcTByY30oZGljcChxIXJoaXlvImpxfXFqJH95bW4kZ35teyR/dWBwJGkwdmt2bTBza2pvMGhsJGd+ZCJhaWIvClVqYXEwcmN9KGRpY3AocSFyaH19ZGYkYHF1ImdnZW1mJGp1IWMkeGJkdG1nZXJufShlcmdgKHNzZ3d8dWUibG18bGdwJgpVamFxMHJjfShkaWNwKHEhcmt8eW5sJGd2IW1tZDBocSRseWdkbWtlbXYkfH8hZXZpY3EsW1dPXl1bVwpVamFxMHJjfShkaWNwKHEhcmt8eW5sJGd2IXtrb2VzdiRhYyFjJGtxb2FhZHxkZiR4f3Vra2YwbmQke3liaWptY3IsClVqYXEwcmN9KGRpY3AocSFycXpgbWckf39zbyRhYyFsa3wwYCJmaXJ4InR9YnFuYSh0c2NjZ34vXVtXClVqYXEwcmN9KGRpY3AocSFzcWFmZHBtZnchYGhnciF2ZXtkZHEkbHlnZGF6dW92JHx4YGwkaTBmZ2hpZGhsa31jIWFxanUvClVqYXEwcmN9KGRpY3AocSFwcWZ1ZSJmen9gZnd/f3NmJGZxbGdgKEN1bXZlcnNram91cyJlfGRzY2d8YyF0a3pkaGFhez4KVWphcTByY30oZGljcChxIXFnen9tbiRndiFxcWV9bmxtZnchamV7MG52bG1iIWxlZXVyLFtXT15dW1cKVWphcTByY30oZGljcChxIXFsaX1gbCRrcW8iZm1jdW1zKHJtZ3d7eW9ldyhydHYkfWN0Y2hkaSFma21jbyVwJgpVamFxMHJjfShkaWNwKHEhcWxpfWBsJH95bW4kanxkcXcoaW53JG5/cyJlZjBke2Eof2ciam1ndSJlZnQhdW1mdyFtYihyYHYqClVqYXEwcmN9KGRpY3AocSFxbGF9bGd2YX5mImNnfGUid2B5ZG5gKHlyImpnZCFjJHh/bWt3YHVlIndhfHdndihjaWthZHQvClVqYXEwcmN9KGRpY3AocSFxdG1xcyJzYXxtImxhZCFjJGZ1bi9rfGl0ZWwmMCEqQGcwWE1RKHtvbXMoZ2ljcChkaWNwKHlyPS0KVWphcTByY30oZGljcChxIXF0Z2R1Z2AodHNjY2d+IWt3KGRpZyR9fHVraWlkZCJ3YHFxZyRreGBsY21iLwpVamFxMHJjfShkaWNwKHEhcXBtZGltd2t/cWckYWMhbGsod25tYCh5ZyJ9Z2UhYWVmMG5saHEwaWdlejB4bXF6MGlnZXpkY2dlfD4KVWphcTByY30oZGljcChxIXFxa3N0YHF7MG9jaW10IVFxcmkhdW1kfCFxa2V1dWtpbWMhdWV6fiF7a30wbmQkbHFvZWF6PgpVamFxMHJjfShkaWNwKHEhdWVmdCFtYihzYGxnbXxtY3Bhf28ibXswb21wKHxoaWEocSF1ZWZ0IW1iKGBubn1lf3NybCYKVWphcTByY30oZGljcChxIXVrZ3QhZWtkdWwiaml9ZGYkWHlvbWdreGhtJH9/dG5gKHJkImFpY3gicGcwYm1qfGJubioKVWphcTByY30oZGljcChxZ3ZhejBqa2hkeW9lJGkwZXBlb39vIm18N3IicGF9ZCJiZ2IhYyRreGBsY20wbmQke3NkbGF6aS8KVWphcTByY30oZGljcChxbyJlZWVtZ3Aof2cid3xiYGxjfXxgdm1nfiFrdyhnbnB3bTB1amVmMHNram8wYHBrfX5lInBgdSFha2R8YHAqClVqYXEwcmN9KGRpY3AocW8iZXxkaGEkYWMhdmxtMGNnd3wwcW5la3UhdmsoeGhmYShpbnd2KGRue3cmClVqYXEwcmN9KGRpY3AocW8iZXB1IWxlZXVlIkdkdWB0YXowbmxnbTBjZ2hnfmZnYChkbiJlKHhgYW9tYiFsZWV1ZSJGbXF3Z3YmClVqYXEwcmN9KGRpY3AocW8iYXF1IW1iKH5kdXAocW9mJGkwdmtqbzBuZCRqcXUiZXp1IWZrfXJtZyR8eGQicHp/dGBobT4KVWphcTByY30oZGljcChxbyJtZnN0YHF7MG9jaW10IUt+cmkhcWtldXVraW1jIW9lY3VyInNnfWRsJG51ZG4ke3VvcW18eXdnKgpVamFxMHJjfShkaWNwKHFvImt4ZW1nanwwdWp2Z35kInZnf2wibXswc2N2bXx4ImUoYG1jZ20wdW0kf3lyaiRxf3QlYChyZCJtZj4KVWphcTByY30oZGljcChxbyJxZnx0YW9xMGljZ2N1cyJrZnNkImxpdCFjJGZ/cmckanxkZ2AocXUiZWYwYG5waWIhY2psMGVrYWw+ClVqYXEwcmN9KGRpY3AocW9mJHx4ZHske3F4InBgeXIiZn1kIXZsbWkhbGF+dXMid2lpIWxhfnVzLiRmdXdndikKVWphcTByY30oZGljcChxb3skeWVgbHB9fSFvYWt4YGxtazBqbGt/YyF2bGlkIXF0bXVlIm9hfG1xKlcKVWphcTByY30oZGljcChxcXJocXlvZSRpMHRsbWt/c2wkYH9zbCRldWBsdyhpbncjfnUhb217Y2RmJHx4ZCJ0Z3lvdioKVWphcTByY30oZGljcChybXdhKGN1bWptYyFjdm0wc2NgYX9gYXBhZmQuJGp1dmN2bT5eXVtXT15dW1cKVWphcTByY30oZGljcChydGtobHlvZSRpMGV3am91bmwkYWMhYyR8dWBvJG12Z212fD5eXVtXT15dW1cKVWphcTByY30oZGljcChzaWNrfHliImdgcXNjZ3x1c3EkZnV3Z3Yod2R2JGkwamtnYzBud3Aof2ciZWRkYHB3JgpVamFxMHJjfShkaWNwKHNubmhpYHJram8wYCJgfX5mZ2tmMG5kcG1+IWF2bXF1Z3cocSFyZWZ5YixbVwpVamFxMHJjfShkaWNwKHNud2p8eW9lJHF/dHAkbXdmcSRqdWdtdm0wdWphcTBpY3BreCFxbGdnciJwYHF1In1nZSFhZXp1LwpVamFxMHJjfShkaWNwKHRocnRhfmYiZShyYGUkZ3YhdnZhc2pxJGF+IWMkbn90bHBpeW8ic2d+JnYkZXFqZyRhZCFjaih5YmdmZ2gvClVqYXEwcmN9KGRpY3AodGhydGF+ZiJlZjBkZ2gocW9mJGpibnVqKH1ubmAoeW8ibGdkIXVlfHVzImlpe2RxJGp/dGtoZHFjY217Y2QsClVqYXEwcmN9KGRpY3AodG5sZXx5b2UkaTBlbXFqfG5taih5ciJhcGRzZ2ltfHgidGF/dHEka3hgcG18aS8KVWphcTByY30oZGljcCh0dGxjbX9vZ2F6YyFydm12ZHAkbHFzaSRreG5ha2RxdWcqV09eXVtXT15dW1cKVWphcTByY30oZGljcCh1YHZtZnchcGtxcW0ibm18bXskaWR1cGVrZHIiY3p5e3hocTBudWhqdWBwdyYKVWphcTByY30oZGljcCh1ZmV3JDBxY2prcWpndyhxb2YkYmVoYWEocXNnJGJlcnYkaTBsd2pscW9nJGpiZGNvbnFydioKVWphcTByY30oZGljcCh1d2d2cX9vZyRjfm51dyhnaXskRXVld3dpMHJ2ZWZ0ciJlZH9vZyRhfiF2bG0wZWN2Yz4KVWphcTByY30oZGljcCh1d2d2cX9vZyR/cW92YWwwc2dnJndgb2F7PmljZ2MwdW0kfX5lZ3ZvfyFjJGZxbGcka3hgbGNtPgpVamFxMHJjfShkaWNwKHZobGBhfmYiZShnaGxqYX5mInd8YmB2YW9pIWt3KHEhZmFkeWNndmlkZCJpZ2ZkImtmMHhtcXowcWN2fD4KVWphcTByY30oZGljcCh2aGxgYX5mInNnYnVqaG1jciJjZHFycSRhYyF1a3pkaSJ3Z31kdmxhfmYsW1cKVWphcTByY30oZGljcCh2bnBwfX5kImdnf2prYXswYHBhKHZubWAodm5wJHx4bndjYGQvXVtXT15dW1cKVWphcTByY30oZGljcCh3bm5gKHlyImtmfHgic2ljdWdgKH9vImUoYGR2JGxiYGVrZj5eXVtXT15dW1cKVWphcTByY30oZGljcCh3bm1gKGRpa2pvYyFha2V1IXZrKGRpbXdtMHVqZXwwdmNtfD5eXVtXT15dW1cKVWphcTByY30oZGljcCh3c2dle3VlImtqemRhcHswdmtoZDBybm14MG53cCh/ZyJpZ35ydmF6YyYibGl+ZXEqClVqYXEwcmN9KGRpY3AoeWcifWdlIWFlZjd1Ind4dW1uJHx4ZGwkcX90JWhkMHZrd2AweG1xKHhgZiRpMHJyYWR8Y21rYz4KVWphcTByY30oZGljcCh5ZyJ9Z2Uhbm1+dSFgfShkaWcke2ducGAkMHhtcS98bSJgYXUhYH0oZGlnJHtnbnBgJgpVamFxMHJjfShkaWNwKHlnIn1nZSFyaGlpIW5tY3UhYyRlf29xcG1iIXtrfTdtbiRgcXdnJGkwY2dwfHVzImNpfWQsClVqYXEwcmN9KGRpY3AoeWcifWdlIXFobXVxInNhZGkiZSh0ZG9rZjB4bXEofWhlbHwwYHVlY3UhdW18eCFjJGB1YGZla3hkLApVamFxMHJjfShkaWNwKHlnIn1nZSFxcG1gIW1qKHEhYXZpc2oifWdlIWFrfXxlImZ6dWBpJHF/dHAkZX91amF6N3IiZmlzaiwKVWphcTByY30oZGljcCh5ZyJ9Z2UmcGEoeW90bXt5Y25hKGludyRrcW8id3x5bW4kanUhamFpYmUjW1cKVWphcTByY30oZGljcCh5ZyJ9Z2UmcGEofHRhb3EweG1xKHNgbCRudWRuJHx4ZCJ2fX5kcSRnfiFjJHtzc21oZD4KVWphcTByY30oZGljcCh5byJwYHUhYG1vMHFrZ3xlc2ckb39tZiRhYyFtamRpIXFpaXxtImdgcW9lYSYKVWphcTByY30oZGljcCh5byJwYHUhZnFmd2Rtaih5dSV3KH5udiR/eGB2JHF/dCJvZn92InBgcXUidm1xbW59KH1gdnBtYnIsClVqYXEwcmN9KGRpY3AoeW8icGB1IWZxZndkbWoofW5taihibmFvezBgcGEoYmRjaGRpIWZtZHl1am19fSFhdnFjdWNoez4KVWphcTByY30oZGljcCh5byJwYHUhZnFmd2RtaihkaWckan9ucG17eCFhcXtkbm9hejBocSRmdXdndihiaGVsfD4KVWphcTByY30oZGljcCh5byJwYHUhZnFmd2RtaihpbnckbH9vJXAofmRnYChxIXVlfHNpInBnMHVnaGQwdWtpbT4KVWphcTByY30oZGljcCh5byJwYHUhZnFmd2RtaihpbnckZnVkZiR7f2xncGB5b2UkZ3xlLiRmdXYuJGplc3Brf3VlImVmdCFgaH11LwpVamFxMHJjfShkaWNwKHlvInBgdSFmcWZ3ZG1qKGludyR7eG53aGwwYG5zaWlyImdnZW92JHF/dHAkanxkcXdhfmZxKgpVamFxMHJjfShkaWNwKHlzbWood25uYWUwcW5lfHUhb2VhfCFrd2Y3dSJzZ2J1aiR/eXJqbWZ3IWRrej4KVWphcTByY30oZGljcCh5dSJwaXtkcSRuf3RwJHllYHBwbWJydmVudnIicGcwbGNvbTBubGEoY3VjYm4+ClVqYXEwcmN9KGRpY3AoeXUldyh+bnYkZ2ZkcCR8eW1uJHx4ZCJiaWQhbmVseWRxJHt5b2UqV09eXVtXClVqYXEwcmN9KGRpY3AoeXUldyh+bnYkZ2ZkcCR8eW1uJHx4ZCJiaWQhbmVsaSFxbGdldXEkaF9nZCR/eXVqJGFkciJsbXFlJSoKVWphcTByY30oZGljcCh7aGFvYX5mImUoeGRjcnEwcnZlfGVkIm17MHNnZWR8eCJlKHR0b2YofW50YSYKVWphcTByY30oZGljcCh7aGFvYX5mImUoZmBucWlybWckb3VsImBndXJsI3wwcmdhZTB1bSRlcWpnJHt1b3FhJgpVamFxMHJjfShkaWNwKHxkcnZtc2ljcWZjIWlqZ2chTmV8eW8iZWZ0IXtrfTByamt9fGUicGd/L11bVwpVamFxMHJjfShkaWNwKH1obGt8cXRwdyh3ZHYkZH9ydiRnZXVxbWx1IW1iKGRpZyRlcXtndyZPXl1bVwpVamFxMHJjfShkaWNwKH1ucXAoZHNtaGRjIWN2bTBjbXZmMGBlZWF+L11bV09eXVtXT15dW1dPXl1bVwpVamFxMHJjfShkaWNwKH5gb21mdyF7a31iIWFlfDBGY3ZueWRuYChnaG5oKH1gaWEoaW53JGV/c2ckaWR1cGVrZGh0YSYKVWphcTByY30oZGljcCh+biJrZnUhaWpnZ3IiYX51c3twYHlvZSRpcm53cCh1d2d2cWRpa2pvMGhsJHx4ZCJgfX5mZ2tmPgpVamFxMHJjfShkaWNwKH5uImtmdSFyaGlpciJKbWRJY2djMGt3d3wwZ212KGRpZyRuZW8ia24waHYqVwpVamFxMHJjfShkaWNwKH5uImtmdSFwYWl8bXske2VjcWd6eWNndyhkbiJ2bXMvZWVldXIsdmd3dGdoYXtkLGptZGljZ2M+ClVqYXEwcmN9KGRpY3Aofm4ia2Z1IXVtZHwhY2BleXUicGcwcnZlemRobGMocSFwcWV/cyxbV09eXVtXClVqYXEwcmN9KGRpY3AofnRwd21jIXFrZXV1a2ltYyFhZXpieCJ3a3FtcmFkYyFjamwwb2dybWIhd3dtMHVqYWU+ClVqYXEwcmN9KGRpY3Aof29hYShpbncjfnUhb2F8MG5sYShnaHhlenQhe2t9N3dnJGV1dSJwYHVsImVkfC8KVWphcTByY30oZGljcCh/b2ckfGJubmgoeXIic2didWokOSAtMjQ4MG9nc3xjL11bV09eXVtXT15dW1cKVWphcTByY30oZGljcCh/b259KFRgdG1sMGJjaih2aGxgKGRpZyRyf24jW1dPXl1bV09eXVtXT15dW1cKVWphcTByY30oZGljcCh/b259KHFvZWFkYyFyaGlpIXZsbXlzImxpYnFxJG5/cyJwYHVocCR4dXVxKlcKVWphcTByY30oZGljcCh/b259KHJoZSR7YGRsYG1iciJnaWJzeyRvf21mKldPXl1bV09eXVtXT15dW1cKVWphcTByY30oZGljcCh/c2Eke3hgb2VmYyFjdm0waWdlZGRpeygoZ2RjaHx4eCJlZnQhdW17dS9dW1cKVWphcTByY30oZGljcChgbWN9YX5mIkptZEljZ2MwaHEkZHlqZyR/cW1pbWZ3IWtqfH8hYyRsdWB2bChkc2N0JgpVamFxMHJjfShkaWNwKGBzbWZkdWwiZnp1YHZsYX5mIm17MGNnd3wwdXBhaWRkZiRqaSFjJHhibnJhejBla2F8PgpVamFxMHJjfShkaWNwKGF0Y2JueW9lJGVxb3skeH91a2tmYyFtYih8ZHRtfHF1a2tmMGJjaih3aHRhKGludyRpMGlnZWxxYmphJgpVamFxMHJjfShkaWNwKGF0Z2FmMGNnYXswZmdwKGRpY3AoZ2B7JGppIWdlfHlvZSR6f3hjaCh6ZG5ocT4KVWphcTByY30oZGljcChiZGNgYX5mImUoY2Jjdm0wbG1qe2RkcCR7c3NtaGQwaHEkfHhkIndpfWQiZXswcmN9YX5mIkFkcmRwYXx4LwpVamFxMHJjfShkaWNwKGJkY2goeGBhb21iciJlZGdge3cocXNnJGt/b3Z2Z3xtZ2AmT15dW1dPXl1bVwpVamFxMHJjfShkaWNwKGJkY2goeGBhb21iciJqbWZkcCR7fGRndCZPXl1bV09eXVtXT15dW1dPXl1bVwpVamFxMHJjfShkaWNwKGNpbXRjdWRyYXpjIWN2bTBobHd9YmRmJGppIUF2Z3Vyd3coeGhvd218ZyNbVwpVamFxMHJjfShkaWNwKGNpbXRjdWRyYXpjIWxhfnVzImdpYnN7JGV/c2ckfHhgbCQ6ICFla2R0IXJtbXNkcSgocXUiamF3aXYqClVqYXEwcmN9KGRpY3AoY2ltdGN1ZHJhemMhbGF+dXMid218bSJmZHVycWFsMHFtcGF/b3EkZ3Yha2p+eXJrZmF8aHZ9JgpVamFxMHJjfShkaWNwKGNubmBhdXNxJH91YHAkY3llImNkf3dndyhxb2Yke3ltbn0oeGRuaW1kcixbVwpVamFxMHJjfShkaWNwKGNub2EoW25ydyhxc2ckZ34hdmxtMHVjb20+Xl1bV09eXVtXT15dW1dPXl1bVwpVamFxMHJjfShkaWNwKGNub2Eod3RjdmxjJiJ0aXxscSRrcW8iZm0wZnBhaWNkZipXT15dW1dPXl1bVwpVamFxMHJjfShkaWNwKGNub2EofW5sd3x1c3EkZXF4Im9hY3IifWdlcyJmZ391cSR8fyFxcGdgIXtrfWIhZnZ9fSFyaGlpaGxjJgpVamFxMHJjfShkaWNwKGNub2F8eWxndyhpbncka3FvImZtMHVqYSh4aHYkZ3YhdmxtMHFjdnxpIXVsbX4hcmhpaWhsYyhxIWpren4vClVqYXEwcmN9KGRpY3AoZGlnJEZ1dUpla3shZWtsYyFlYWZ1c2NoZGkhdWFkc25vYShpbnd2KGNgYXZhdmhhYXs+ClVqYXEwcmN9KGRpY3AoZGlnJFx4c2dhKEJobGN7MGBwYSh+YG9hbDBXa2hxcS0iSm1+eGMkaX5lIkppYnhjKgpVamFxMHJjfShkaWNwKGRpZyRfeXtjdmwwbmQkUXVvZmt6MGljdyhxIWZhaWRpInNhY2ksW1dPXl1bVwpVamFxMHJjfShkaWNwKGRpZyRoeGBrdih/ZyJwYHUhZmtvNyFrdyhjbm9hfHlsZ3cocW8iYW52ZGFwYWZkInZtfWRmfSYKVWphcTByY30oZGljcChkaWckanVydiR8eWxnJHx/IXFlfnUhe2t9YiFlZWV1IWt3KH5udSRqdWdtdm0waHYjezB1bWsofGB2YSYKVWphcTByY30oZGljcChkaWckanlmZWF7ZCFtZntkYGFobTBobCRGdXVKZWt7IWt3KGlud3YofWhsYCYKVWphcTByY30oZGljcChkaWckb39lcSRpYmQiZWZ3c3skf3hkbCR8eGR7JGB5dSJ9Z2UhdW18eCFtZmJ1YnZ3JgpVamFxMHJjfShkaWNwKGRpZyR4Ymhnd3x4bm1gKHFzZyR7YGRhbWl8bXskbnF3bXZtdCFgfShkaWckb39lcSoKVWphcTByY30oZGljcChkaWckf3F4InBnMGxjb20wYCJxZnlibXZmMGljdHhpIWt3KGRuImNhZmQibXwwdmplfDBodiR/cW92dyYKVWphcTByY30oZGljcChkaWd2bTBgcGEofm4iZmRxYmkkZ2IhdWxhZGQid3x/b2d3JDBubGhxMGZwZXE+ClVqYXEwcmN9KGRpY3AoZGlndm0wYHBhKH5uIndjdW1ncGd+ciJsbX5iZyR8eGRwYShxc2ckZn8hcW9tfGR2a2Ywamd9ez4KVWphcTByY30oZGljcChkaWd2bTBocSRpMGJuYX51cyJ2Z3d0ZyRhfiFncm1ieCJsaXNqZ3YoenRxcCh0eGtqbzB1bSRtY2JjdG0+ClVqYXEwcmN9KGRpY3AoZGlndm0waHEkZn8hcXFreCF2bGF+ZiJlezBncGFtMGBmcmFzZCxbV09eXVtXClVqYXEwcmN9KGRpY3AoZGlndm0waHEkZ35teyRnfmQic2lpIXZrKGdobCRpZCFMYXxYYGFvJk9eXVtXClVqYXEwcmN9KGRpY3AoZGlndm0wbmxnbTB2Y3cocSFkYWlicm1pbTBiamVnZGhhJHtxbHd2aXkhbGVldWUiSH17IUxrJgpVamFxMHJjfShkaWNwKGRpZ3ZtMHZjdyhxIXZtZXUhdWxtfiFhcXpjZGYkYH9teyR/cXVndihnYHFqL2QhdWV8dXMsClVqYXEwcmN9KGRpY3AoZGlndm03ciJqZzBxbW1mZCFraihzc3ttZnchbXJtYiFjJG9iYHskZ397ZypXClVqYXEwcmN9KGRpY3AoZGlndm03ciJrZnx4ImxnYGQiaG12dSJlbmRkcCRxf3Qlcm0wbnJhZnVlIlRpfmVtdmk3ciJmZ2gvClVqYXEwcmN9KGRpY3AoZHNjdCh0bm12ezByamt9fGUiZWRnYHt3KHJkImlpYmpnYChwQmNxfHlubD4oMFVwZXgwRW1rejcvClVqYXEwcmN9KGRpY3AoZXJram8wYGwkaX10bmF8MG5kJGt4YGxjbTBocWovZCFjJGx5Z2Rta2VtdiRnYGRwZXx5bmwqClVqYXEwcmN9KGRpY3AoZ2B2YXowdmNoY3lvZSRqf252dyhxc2ckanV1dmF6MGhkJHF/dCJlenUhZGV7ZCFubWN1IUphen1kcSoKVWphcTByY30oZGljcChnaWdqKGludyR/dWBwJGkwYmt2a2VtY3YocWx3aG1kIXtrfTBsa2NgZCFwYXt1bGBobTBgInB6f21uKgpVamFxMHJjfShkaWNwKGdpZ2ooaW53I3p1IWpxZndzeyRxf3QiZ2l+IWVhfDBgInRhantjJGF+ITE0KH1udGF7MG5wJGFkJnEkbmJkZyoKVWphcTByY30oZGljcChnaWdqKGlud3Yod25mJGFjIWNqb2J4In1nZSFxbGdlbWYkfGJ4ImVmf3VqYXowbmxhJgpVamFxMHJjfShkaWNwKGdoZ2hseW9lJGkwdGxta39zbCRgf3NsJHxxamd3KGN1cGFmd3VqKldPXl1bVwpVamFxMHJjfShkaWNwKGdodmwoY3FnYWwwY21rfGMhe2t9MG9ncm1iIXVremJ4ImVqf3R2JGB5dSJlZnQhcHFmMGBhZ2F0ZGxwez4KVWphcTByY30oZGljcChpbncka3FvImBtdmRjcChxIWltZHxkcCRqdWQic2FkaSJlKGVva2dnYm8ibGdibywKVWphcTByY30oZGljcChpbncka3FvImtmfHgiZ3p/cnEkfHhkIlZhZmRwJFtkeHokYX4hQWxpYm5sI3swY21lfD4KVWphcTByY30oZGljcChpbncka3FvImtmfHgib2F8bSJlKHxoYWwof29hYShxb2YkfHhkbCRxf3QlYChyZHZwbWIhYGEoc2BwYW5lbSwKVWphcTByY30oZGljcChpbncka3FvImtmfHgic2FjaSJiZ2IhdmxhfmZxJHF/dCVybTBgbnZtcWV7JGBxZSwKVWphcTByY30oZGljcChpbncka3FvInB6cWhsJGkwYmNwKHJ4InBpfGpram8wZmdqfHx4InBnMGh2KlcKVWphcTByY30oZGljcChpbncka3FvInB6cWhsJGkwZW1jKHJ4InBpfGpram8wZ2t2ZXx4InBnMGh2KlcKVWphcTByY30oZGljcChpbncka3FvInB6ZXJ2JHF/dHAkb39tZiR/eXVqJHx4ZCJvYX5mLFtXT15dW1cKVWphcTByY30oZGljcChpbncka3FvJXAoZ2hyYShpbnd2KHdzZ2V7aSFgZXp1IWplZnRyImtmMGAiZmRxb2kke3NzbWhkPgpVamFxMHJjfShkaWNwKGludyRrcW9sa3wwdXBxe2QhcWd6f21udyh/ZyJ2fX1ucCpXT15dW1dPXl1bVwpVamFxMHJjfShkaWNwKGludyRrf3RuYCh2YG5oKHhkY2Aof3dndih4ZGdoezBnbXYocW8iYWZ1c2V9KGZucHBtaC8KVWphcTByY30oZGljcChpbnckZnVkZiRpMGpnfSh5byJrenRkcCR8fyFtdG1+IW5ra3tkZiRsf25wdyYKVWphcTByY30oZGljcChpbnckZnVkZiRpMGxrdnp/cyJwZzBvbXBhc2QiZSh9aG9tazBobCRpfiFjanx5cHdhKGNpbXQmClVqYXEwcmN9KGRpY3AoaW53JHp1YG5ocTBiY2ooZXJnJGkwcWtnYz1gemEoZW9uYXtjIXtrfTBzZ2VkfHgiZ2l+JnYqClVqYXEwcmN9KGRpY3AoaW53JHt4bndobDBgbnNpaXIid3x/c2ckcX90cCR8f25udyh5byJwYHUhYWFkfGBwKgpVamFxMHJjfShkaWNwKGludyR7eG53aGwwY2cka3FzZ2J9fCF1bGF8ZCJnZHlsYG1mdyF2bG0wbWNgbHVzInBnMHJ3Z2t1cnEqClVqYXEwcmN9KGRpY3AoaW53JHt4bndobDBiY2hkMHhtcXowYHBpZ2IhYnZ9Y3Vydmd/ZyUqV09eXVtXClVqYXEwcmN9KGRpY3AoaW53JHt4bndobDBvY2ltMHhtcXowZW1jKENxd2B7MHVtJGBxd2ckaTBibWtkMHFncCYKVWphcTByY30oZGljcChpbncke3hud2hsMG9jaW0weG1xejB2Z2V4f28iZW5kZHAkcX90cCRueXNxcCh9bmx3fHVzIm9hfG0sClVqYXEwcmN9KGRpY3AoaW53JHt4bndobDBvZ3JtYiFranxibmZxa3UhYyR6f3FnJG9/bWdpKGRuImUoY3RhZ31ydHEqClVqYXEwcmN9KGRpY3AoaW53JHt4bndobDBvZ3JtYiFxaG11cSJqbXFzIm1mZmhxbWp8ZCJ2YX5mInN6cWh2bHs+ClVqYXEwcmN9KGRpY3AoaW53JHt4bndobDBvZ3JtYiF2dnEwdW0kZHVgdGEoZGlnJGxlb2VhZ34hdW18eCFjJGpxZiJrbjBmZ2l7PgpVamFxMHJjfShkaWNwKGludyR7eG53aGwwc2dpZ2ZkIn1nZXMiZXp9bnAkanVnbXZtMHJrcHx5b2UkZ34hYyR8eHNtam0+ClVqbXswZ212fGVvZyRrf25pbW0waHEka39xeyR4Ym52YWtkZGYqV09eXVtXT15dW1dPXl1bV09eXVtXClVqbXswZ212fGVvZyRrf25pbW0waHEkfHhkInR6f3FndnxpIW1iKFZucHB9fmQiR2d/amthezwhS2prPgpVam17MHNnaG1xcmcka39vdmVhfnIiNTg1IXBha2libmFsMGxjcG1iaGNoJk9eXVtXT15dW1dPXl1bVwpVa2ltMHJ2ZWZ0ciJ3fHltbiRpYyF2bG0wcndna2Vjd3coc2ljam91ciJsbWIhYWVkdW9mZXowdW0kQnFvd2V6aSEzKCgiMTI0JgpVa3ZtdD4iJFxieCJlKGNicGtkfCFtYihzaWN2b3lvZSRnfiF7a31icmdobj5eXVtXT15dW1dPXl1bVwpVbSRpc2lrYX51IXZsbTBvZ3x8MGlrY2B1cyJ2aWRobGMkMHhtcSh+ZGdgKCMhb2t6dSFya2F+dXEqVwpVbSR6dWBhbCh4ZGNybX4tImF7c2ByYShkaWckbGVvZWFnfiF1bGF8ZCJzbXFza2pvMGAidmF+ZiJrbjBtZ3JhZGB2bWd+LwpVbXF6eXJ2dyhnZGN2KGNpa3Z8YyFua310IWdqZ2VmaiR8fyF1ZWN1IXZsbTBlZ2VsPl5dW1dPXl1bVwpVcH0oc2BuaGF+ZiJ9Z2VzIm9pZGBsZShdbndoYX5kdnBtPl5dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpUbmdgMSEiUGBxdSJpbXF1InNpYyFyZWF+dWdgKU9eXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpUbGJnYnV3amlkZG59JDB1am17MGxnd3txZmckf3FyImhtdnUibWZkZGxwYX9vY2hkaSFgaGl+aixbVwpUcW1mdyFjJGV/c2xtZnchcXBpYiFraihkaWckbWZkbG1mdyFqZXswb20kbXZnZ2d8Pl5dW1dPXl1bVwpWY2h8ai0iYH19YyJqcX1xaigodm5wJHllaGFvKHpoZXcoZmR6KldPXl1bV09eXVtXT15dW1dPXl1bVwpWY2p8MGAibGF+dT0kKEpgciRpMHZjamwwbmQkZXFqZyRhfndrd2FybWckZ34he2t9YiF1YWlgbmwlVwpWY2p8MHVtJGljYmdqbDBobCRpMGl3dnppPiIkSWBxbn0ocXUiQ2FqbG1qYXMhS2p7ZGh2cXx1L11bVwpWY2p8dWU4JHt4bnJvbXVxZ3Z7PiEiV21+ZSJlKGNicGtkfCFtYih9YGtoKGRuIklpd2Qia24wWGdqbH9zLUhtZmRuJDslLkZxZndkbWomClZjdmZ5b2U+KDBnbXZ8ZW9nJHp1YGZtZnchYWVmMGNnJGBxe2N2bH90cSR8fyF7a31iIWphaXx1aipXClZnJGBxd2ckZnV2InNpaXIia24wZWdwbXN1a2pvMHVwYWlzaWd2cT4vLFtXT15dW1dPXl1bV09eXVtXClZncChkbnVhZGMhb2VjdSFldm1xdSJzbXFxbWp7MV5dW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXClZqZXwwYCJ0YWR4LiRxf3QiZ2l+b21wKGJkY2AoeXUjW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXClZqZXx1d2d2KHNgbCRvfyF1dmd+Zi4kf3ltbiRvfyF1dmd+ZixbV09eXVtXT15dW1dPXl1bV09eXVtXClZqYWYwYCJ0YXVzYWF6MGVwa3hjIWtqKH9vIn1nZS0ifWdlIXVtZHwhYGEoZGRvdHx1ZSJwZzBpa3AoZGlnJGt1aG5tZncgClZqYWYwaGwkaTBsY35tMGdtaGR/diJwYHUhcG1veHUic2l8bSJlZnQhe2t9MHZraGQwb2dybWIhZWF8MG1td3w+ClZqYWYweG1xKHhgdGEocSFpYXE8IXtrfTBlbWovZCFqZX51IXZrKGdga3Aodm5wJHx4ZCJjfXFzZipXClZqfShxc2ckcX90InNpY3Vram8wdWtpbTBzZ2VseW9lJG5/c3ZxZnVyPVtXT15dW1dPXl1bV09eXVtXClZrd2AwZ212KHEhb2V7ZGRwJGN1eCJlZnQhbXRtfiF2bG0wTGNjYXMhT2Flf3N7JF5xdG5wKU9eXVtXClZrfmliZSJhcGBkYXB7MGR0YXppIW9rZmN1Z3YoZG4iYGcwaHZ3KHR0dn0mT15dW1dPXl1bV09eXVtXClZtcykwIVtrfTBibXFkdCZ0YSh4YGYkaTBxbXBhf28ia24wZ3BxYWQhaHFhc2QjW1dPXl1bV09eXVtXClhncChRb21wYHVzIldhfG17JEV1cnFlb3UhKl1JQ0wrKldPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXClhtcShxc2ckbHVydm1mdWUicGcwY2ckZXlybmFsMGN7JGkwZ212fGVvZypXT15dW1dPXl1bV09eXVtXClhtcShzYGwkb3V1ImUod2RscWF+ZCJFZWVtZ3Aof2ciXW1+ZW12KHJ4ImBneW9lJHx4ZCJiZ3xtbXNhfmY4JCg9LE9renUsLwpYbXEoc2BsJGVxamckYH9teyR/cXVndihyeCJmZ3lta2pvMHVqYSh4ZG5oKH90diRndiFrcCZPXl1bVwpYbXEoc2BsJHhibnZha2Qhe2t9YnJnaG4wZ3BrZTBjbmVreyFmdml3bmx3KHJ4ImBneW9lJHx4ZCJiZ3xtbXNhfmY4JCg9LE9renUsLwpYbXEoc2BsI3wwZmdwKHJ4InBgdSFxaml7ZCxbV09eXVtXT15dW1dPXl1bV09eXVtXT15dW1dPXl1bVwpYbXEoc2ltb20wbmwkfHhkImJnYnV3am0wYm1rY3lkLCQoPSxPa3p1LC9bV09eXVtXT15dW1dPXl1bVwpYbXEodmRnaCh8aGlhKGNub2FnfmQibXswcXdoZHlvZSRxf3RwJGR1ZixbV09eXVtXT15dW1dPXl1bVwpYbXEoeGB0YShkbiJrfWR2a3AoZGlnJFtgaXtqcDBucCR4cXgibG1iL11bV09eXVtXT15dW1dPXl1bVwpYbXEoeGRjdihkaWckbn9zdnFmdSFha2d7aGcjezBpa3d7eW9lJVdPXl1bV09eXVtXT15dW1dPXl1bVwpYbXEofWB7JG91dSJ2YXNpIndtfG1ram8wbWdwfHVzcSgocnR2JGp1dmN2bTBuZCRqdWhsYyhybWNnY31ga2htdCAKWG1xKH9nZGFmdCFRbGl5LEpxZGVlImZxMHJqYWlkaWtqbzB4bXF6MGJwfXt7b2tibTB2a3Bgf3R2JGBxd2tqbzBlcGV/fiFgaGd/ZSwKWG1xKGN2Y2hkf3ZnYChkaWckbn9zdnFmdSBdW1dPXl1bV09eXVtXT15dW1dPXl1bV09eXVtXT15dW1cKWG1xKGdgbHAoZG4idm13YGtqKGN1cGFmd3VqOygwVXVrKHxkdGFkYyFjbG1xZSJtezBgImN9dXJ2bGdlcmclClhtcShnaG5oKHVvYWt9fnVndihxIXZlZHwtImBpYmouJGl+ZSJjemVkcWtldSFhdm1xdXd2bT4vLFtXCg==';
Module['FS_createDataFile']('/', 'nhdat', decodeBase64(fileData2), true, true, false);
var fileData3 = '';
Module['FS_createDataFile']('/', 'perm', decodeBase64(fileData3), true, true, false);
var fileData4 = '';
Module['FS_createDataFile']('/', 'record', decodeBase64(fileData4), true, true, false);
var fileData5 = '';
Module['FS_createDataFile']('/', 'symbols', decodeBase64(fileData5), true, true, false);
var fileData6 = '';
Module['FS_createDataFile']('/', 'sysconf', decodeBase64(fileData6), true, true, false);
var fileData7 = '';
Module['FS_createDataFile']('/', 'xlogfile', decodeBase64(fileData7), true, true, false);

    }
    if (Module['calledRun']) {
      runWithFS();
    } else {
      if (!Module['preRun']) Module['preRun'] = [];
      Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
    }
  
   }
   loadPackage({"files": []});
  
  })();
  


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

// Normally we don't log exceptions but instead let them bubble out the top
// level where the embedding environment (e.g. the browser) can handle
// them.
// However under v8 and node we sometimes exit the process direcly in which case
// its up to use us to log the exception before exiting.
// If we fix https://github.com/emscripten-core/emscripten/issues/15080
// this may no longer be needed under node.
function logExceptionOnExit(e) {
  if (e instanceof ExitStatus) return;
  var toLog = e;
  err('exiting due to exception: ' + toLog);
}

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }

// include: node_shell_read.js


read_ = function shell_read(filename, binary) {
  if (!nodeFS) nodeFS = require('fs');
  if (!nodePath) nodePath = require('path');
  filename = nodePath['normalize'](filename);
  return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
};

readBinary = function readBinary(filename) {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};

readAsync = function readAsync(filename, onload, onerror) {
  if (!nodeFS) nodeFS = require('fs');
  if (!nodePath) nodePath = require('path');
  filename = nodePath['normalize'](filename);
  nodeFS['readFile'](filename, function(err, data) {
    if (err) onerror(err);
    else onload(data.buffer);
  });
};

// end include: node_shell_read.js
  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  // MODULARIZE will export the module in the proper place outside, we don't need to export here

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  // Without this older versions of node (< v15) will log unhandled rejections
  // but return 0, which is not normally the desired behaviour.  This is
  // not be needed with node v15 and about because it is now the default
  // behaviour:
  // See https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode
  process['on']('unhandledRejection', function(reason) { throw reason; });

  quit_ = function(status, toThrow) {
    if (keepRuntimeAlive()) {
      process['exitCode'] = status;
      throw toThrow;
    }
    logExceptionOnExit(toThrow);
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document !== 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE, this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {

// include: web_or_worker_shell_read.js


  read_ = function(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
    };
  }

  readAsync = function(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = function(title) { document.title = title };
} else
{
}

var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];

if (Module['thisProgram']) thisProgram = Module['thisProgram'];

if (Module['quit']) quit_ = Module['quit'];

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message




var STACK_ALIGN = 16;

function getPointerSize() {
  return 4;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return getPointerSize();
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

// include: runtime_functions.js


// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {

  // If the type reflection proposal is available, use the new
  // "WebAssembly.Function" constructor.
  // Otherwise, construct a minimal wasm module importing the JS function and
  // re-exporting it.
  if (typeof WebAssembly.Function === "function") {
    var typeNames = {
      'i': 'i32',
      'j': 'i64',
      'f': 'f32',
      'd': 'f64'
    };
    var type = {
      parameters: [],
      results: sig[0] == 'v' ? [] : [typeNames[sig[0]]]
    };
    for (var i = 1; i < sig.length; ++i) {
      type.parameters.push(typeNames[sig[i]]);
    }
    return new WebAssembly.Function(type, func);
  }

  // The module is static, with the exception of the type section, which is
  // generated based on the signature passed in.
  var typeSection = [
    0x01, // id: section,
    0x00, // length: 0 (placeholder)
    0x01, // count: 1
    0x60, // form: func
  ];
  var sigRet = sig.slice(0, 1);
  var sigParam = sig.slice(1);
  var typeCodes = {
    'i': 0x7f, // i32
    'j': 0x7e, // i64
    'f': 0x7d, // f32
    'd': 0x7c, // f64
  };

  // Parameters, length + signatures
  typeSection.push(sigParam.length);
  for (var i = 0; i < sigParam.length; ++i) {
    typeSection.push(typeCodes[sigParam[i]]);
  }

  // Return values, length + signatures
  // With no multi-return in MVP, either 0 (void) or 1 (anything else)
  if (sigRet == 'v') {
    typeSection.push(0x00);
  } else {
    typeSection = typeSection.concat([0x01, typeCodes[sigRet]]);
  }

  // Write the overall length of the type section back into the section header
  // (excepting the 2 bytes for the section id and length)
  typeSection[1] = typeSection.length - 2;

  // Rest of the module is static
  var bytes = new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, // magic ("\0asm")
    0x01, 0x00, 0x00, 0x00, // version: 1
  ].concat(typeSection, [
    0x02, 0x07, // import section
      // (import "e" "f" (func 0 (type 0)))
      0x01, 0x01, 0x65, 0x01, 0x66, 0x00, 0x00,
    0x07, 0x05, // export section
      // (export "f" (func 0 (type 0)))
      0x01, 0x01, 0x66, 0x00, 0x00,
  ]));

   // We can compile this wasm module synchronously because it is very small.
  // This accepts an import (at "e.f"), that it reroutes to an export (at "f")
  var module = new WebAssembly.Module(bytes);
  var instance = new WebAssembly.Instance(module, {
    'e': {
      'f': func
    }
  });
  var wrappedFunc = instance.exports['f'];
  return wrappedFunc;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

function getEmptyTableSlot() {
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    return freeTableIndexes.pop();
  }
  // Grow the table
  try {
    wasmTable.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
  }
  return wasmTable.length - 1;
}

function updateTableMap(offset, count) {
  for (var i = offset; i < offset + count; i++) {
    var item = getWasmTableEntry(i);
    // Ignore null values.
    if (item) {
      functionsInTableMap.set(item, i);
    }
  }
}

// Add a function to the table.
// 'sig' parameter is required if the function being added is a JS function.
function addFunction(func, sig) {

  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    updateTableMap(0, wasmTable.length);
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.

  var ret = getEmptyTableSlot();

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    setWasmTableEntry(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    var wrapped = convertJsFunctionToWasm(func, sig);
    setWasmTableEntry(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunction(index) {
  functionsInTableMap.delete(getWasmTableEntry(index));
  freeTableIndexes.push(index);
}

// end include: runtime_functions.js
// include: runtime_debug.js


// end include: runtime_debug.js
var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
var noExitRuntime = Module['noExitRuntime'] || true;

if (typeof WebAssembly !== 'object') {
  abort('no native wasm support detected');
}

// include: runtime_safe_heap.js


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32';
    switch (type) {
      case 'i1': HEAP8[((ptr)>>0)] = value; break;
      case 'i8': HEAP8[((ptr)>>0)] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32';
    switch (type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return Number(HEAPF64[((ptr)>>3)]);
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

// end include: runtime_safe_heap.js
// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  function onDone(ret) {
    runtimeKeepalivePop();
    if (stack !== 0) stackRestore(stack);
    return convertReturnValue(ret);
  }
  runtimeKeepalivePush();
  var asyncMode = opts && opts.async;
  // Check if we started an async operation just now.
  if (Asyncify.currData) {
    // If so, the WASM function ran asynchronous and unwound its stack.
    // We need to return a Promise that resolves the return value
    // once the stack is rewound and execution finishes.
    return Asyncify.whenDone().then(onDone);
  }

  ret = onDone(ret);
  // If this is an async ccall, ensure we return a promise
  if (asyncMode) return Promise.resolve(ret);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  argTypes = argTypes || [];
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs && !opts) {
    return getCFunc(ident);
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((Uint8Array|Array<number>), number)} */
function allocate(slab, allocator) {
  var ret;

  if (allocator == ALLOC_STACK) {
    ret = stackAlloc(slab.length);
  } else {
    ret = _malloc(slab.length);
  }

  if (slab.subarray || slab.slice) {
    HEAPU8.set(/** @type {!Uint8Array} */(slab), ret);
  } else {
    HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
}

// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  ;
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}

// end include: runtime_strings.js
// include: runtime_strings_extra.js


// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var str = '';

    // If maxBytesToRead is not passed explicitly, it will be undefined, and the for-loop's condition
    // will always evaluate to true. The loop is then terminated on the first null char.
    for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) break;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }

    return str;
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)] = codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)] = codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)] = str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;
}

// end include: runtime_strings_extra.js
// Memory management

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// end include: runtime_stack_check.js
// include: runtime_assertions.js


// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;
var runtimeKeepaliveCounter = 0;

function keepRuntimeAlive() {
  return noExitRuntime || runtimeKeepaliveCounter > 0;
}

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  runtimeInitialized = true;

  
if (!Module["noFSInit"] && !FS.init.initialized)
  FS.init();
FS.ignorePermissions = false;

TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  runtimeExited = true;
}

function postRun() {

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  {
    if (Module['onAbort']) {
      Module['onAbort'](what);
    }
  }

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  what += '. Build with -s ASSERTIONS=1 for more info.';

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  var e = new WebAssembly.RuntimeError(what);

  readyPromiseReject(e);
  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// include: URIUtils.js


// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
var wasmBinaryFile;
  wasmBinaryFile = 'nethack.wasm';
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    if (readBinary) {
      return readBinary(file);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch === 'function'
      && !isFileURI(wasmBinaryFile)
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
    else {
      if (readAsync) {
        // fetch is not available or url is file => try XHR (readAsync uses XHR internally)
        return new Promise(function(resolve, reject) {
          readAsync(wasmBinaryFile, function(response) { resolve(new Uint8Array(/** @type{!ArrayBuffer} */(response))) }, reject)
        });
      }
    }
  }

  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    exports = Asyncify.instrumentWasmExports(exports);

    Module['asm'] = exports;

    wasmMemory = Module['asm']['memory'];
    updateGlobalBufferAndViews(wasmMemory.buffer);

    wasmTable = Module['asm']['__indirect_function_table'];

    addOnInit(Module['asm']['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(function (instance) {
      return instance;
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      abort(reason);
    });
  }

  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);

        return result.then(
          receiveInstantiationResult,
          function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiationResult);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiationResult);
    }
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      exports = Asyncify.instrumentWasmExports(exports);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  // If instantiation fails, reject the module ready promise.
  instantiateAsync().catch(readyPromiseReject);
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  462436: function() {globalThis.nethackGlobal = globalThis.nethackGlobal || {}; globalThis.nethackGlobal.constants = globalThis.nethackGlobal.constants || {};},  
 462578: function() {globalThis.nethackGlobal = globalThis.nethackGlobal || {}; globalThis.nethackGlobal.globals = globalThis.nethackGlobal.globals || {};}
};
function create_global(name_str,ptr,type_str){ let name = UTF8ToString(name_str); let type = UTF8ToString(type_str); let getPointerValue = globalThis.nethackGlobal.helpers.getPointerValue; let setPointerValue = globalThis.nethackGlobal.helpers.setPointerValue; let { obj, prop } = createPath(globalThis.nethackGlobal.globals, name); Object.defineProperty(obj, prop, { get: getPointerValue.bind(null, name, ptr, type), set: setPointerValue.bind(null, name, ptr, type), configurable: true, enumerable: true }); function createPath(obj, path) { path = path.split("."); let i; for (i = 0; i < path.length - 1; i++) { if (obj[path[i]] === undefined) { obj[path[i]] = {}; } obj = obj[path[i]]; } return { obj, prop: path[i] }; } }
function js_helpers_init(){ globalThis.nethackGlobal = globalThis.nethackGlobal || {}; globalThis.nethackGlobal.helpers = globalThis.nethackGlobal.helpers || {}; installHelper(mapglyphHelper); installHelper(displayInventory); installHelper(getPointerValue); installHelper(setPointerValue); function mapglyphHelper(glyph, x, y, mgflags) { let ochar = _malloc(4); let ocolor = _malloc(4); let ospecial = _malloc(4); _mapglyph(glyph, ochar, ocolor, ospecial, x, y, mgflags); let ch = getValue(ochar, "i32"); let color = getValue(ocolor, "i32"); let special = getValue(ospecial, "i32"); _free (ochar); _free (ocolor); _free (ospecial); return { glyph, ch, color, special, x, y, mgflags }; } function displayInventory() { return _display_inventory(0, 0); } function getPointerValue(name, ptr, type) { switch(type) { case "s": return UTF8ToString(ptr); case "p": if(!ptr) return 0; return getValue(ptr, "*"); case "c": return String.fromCharCode(getValue(ptr, "i8")); case "0": return getValue(ptr, "i8"); case "1": return getValue(ptr, "i16"); case "2": case "i": case "n": return getValue(ptr, "i32"); case "f": return getValue(ptr, "float"); case "d": return getValue(ptr, "double"); case "o": return ptr; default: throw new TypeError ("unknown type:" + type); } } function setPointerValue(name, ptr, type, value = 0) { switch (type) { case "p": throw new Error("not implemented"); case "s": if(typeof value !== "string") throw new TypeError(`expected ${name} return type to be string`); stringToUTF8(value, ptr, 1024); break; case "i": if(typeof value !== "number" || !Number.isInteger(value)) throw new TypeError(`expected ${name} return type to be integer`); setValue(ptr, value, "i32"); break; case "c": if(typeof value !== "number" || value < 0 || value > 128) throw new TypeError(`expected ${name} return type to be integer representing an ASCII character`); setValue(ptr, value, "i8"); break; case "f": if(typeof value !== "number" || isFloat(value)) throw new TypeError(`expected ${name} return type to be float`); setValue(ptr, value, "double"); break; case "d": if(typeof value !== "number" || isFloat(value)) throw new TypeError(`expected ${name} return type to be double`); setValue(ptr, value, "double"); break; case "v": break; default: throw new Error("unknown type"); } function isFloat(n){ return n === +n && n !== (n|0) && !Number.isInteger(n); } } function installHelper(fn, name) { name = name || fn.name; globalThis.nethackGlobal.helpers[name] = fn; } }
function local_callback(cb_name,shim_name,ret_ptr,fmt_str,args){ Asyncify.handleSleep(wakeUp => { let name = UTF8ToString(shim_name); let fmt = UTF8ToString(fmt_str); let cbName = UTF8ToString(cb_name); let getPointerValue = globalThis.nethackGlobal.helpers.getPointerValue; let setPointerValue = globalThis.nethackGlobal.helpers.setPointerValue; reentryMutexLock(name); let argTypes = fmt.split(""); let retType = argTypes.shift(); let jsArgs = []; for (let i = 0; i < argTypes.length; i++) { let ptr = args + (4*i); let val = getArg(name, ptr, argTypes[i]); jsArgs.push(val); } let userCallback = globalThis[cbName]; runJsEventLoop(() => userCallback.call(this, name, ... jsArgs)).then((retVal) => { setPointerValue(name, ret_ptr, retType, retVal); setTimeout(() => { reentryMutexUnlock(); wakeUp(); }, 0); }); function getArg(name, ptr, type) { return (type === "o")?ptr:getPointerValue(name, getValue(ptr, "*"), type); } async function runJsEventLoop(cb) { return new Promise((resolve) => { setTimeout(() => { resolve(cb()); }, 0); }); } function reentryMutexLock(name) { globalThis.nethackGlobal = globalThis.nethackGlobal || {}; if(globalThis.nethackGlobal.shimFunctionRunning) { throw new Error(`'${name}' attempting second call to 'local_callback' before '${globalThis.nethackGlobal.shimFunctionRunning}' has finished, will crash emscripten Asyncify. For details see: emscripten.org/docs/porting/asyncify.html#reentrancy`); } globalThis.nethackGlobal.shimFunctionRunning = name; } function reentryMutexUnlock() { globalThis.nethackGlobal.shimFunctionRunning = null; } }); }
function set_const(scope_str,name_str,num){ let scope = UTF8ToString(scope_str); let name = UTF8ToString(name_str); globalThis.nethackGlobal.constants[scope] = globalThis.nethackGlobal.constants[scope] || {}; globalThis.nethackGlobal.constants[scope][name] = num; globalThis.nethackGlobal.constants[scope][num] = name; }
function set_const_str(scope_str,name_str,input_str){ let scope = UTF8ToString(scope_str); let name = UTF8ToString(name_str); let str = UTF8ToString(input_str); globalThis.nethackGlobal.constants[scope] = globalThis.nethackGlobal.constants[scope] || {}; globalThis.nethackGlobal.constants[scope][name] = str; }





  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            (function() {  dynCall_v.call(null, func); })();
          } else {
            (function(a1) {  dynCall_vi.apply(null, [func, a1]); })(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function withStackSave(f) {
      var stack = stackSave();
      var ret = f();
      stackRestore(stack);
      return ret;
    }
  function demangle(func) {
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  var wasmTableMirror = [];
  function getWasmTableEntry(funcPtr) {
      var func = wasmTableMirror[funcPtr];
      if (!func) {
        if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;
        wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
      }
      return func;
    }

  function handleException(e) {
      // Certain exception types we do not treat as errors since they are used for
      // internal control flow.
      // 1. ExitStatus, which is thrown by exit()
      // 2. "unwind", which is thrown by emscripten_unwind_to_js_event_loop() and others
      //    that wish to return to JS event loop.
      if (e instanceof ExitStatus || e == 'unwind') {
        return EXITSTATUS;
      }
      quit_(1, e);
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  function setWasmTableEntry(idx, func) {
      wasmTable.set(idx, func);
      wasmTableMirror[idx] = func;
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  var _emscripten_get_now;if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else _emscripten_get_now = function() { return performance.now(); }
  ;
  
  var _emscripten_get_now_is_monotonic = true;;
  
  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)] = value;
      return value;
    }
  function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if ((clk_id === 1 || clk_id === 4) && _emscripten_get_now_is_monotonic) {
        now = _emscripten_get_now();
      } else {
        setErrNo(28);
        return -1;
      }
      HEAP32[((tp)>>2)] = (now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)] = ((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }
  function ___clock_gettime(a0,a1
  ) {
  return _clock_gettime(a0,a1);
  }

  function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)] = date.getUTCSeconds();
      HEAP32[(((tmPtr)+(4))>>2)] = date.getUTCMinutes();
      HEAP32[(((tmPtr)+(8))>>2)] = date.getUTCHours();
      HEAP32[(((tmPtr)+(12))>>2)] = date.getUTCDate();
      HEAP32[(((tmPtr)+(16))>>2)] = date.getUTCMonth();
      HEAP32[(((tmPtr)+(20))>>2)] = date.getUTCFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)] = date.getUTCDay();
      HEAP32[(((tmPtr)+(36))>>2)] = 0;
      HEAP32[(((tmPtr)+(32))>>2)] = 0;
      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
      var yday = ((date.getTime() - start) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)] = yday;
      // Allocate a string "GMT" for us to point to.
      if (!_gmtime_r.GMTString) _gmtime_r.GMTString = allocateUTF8("GMT");
      HEAP32[(((tmPtr)+(40))>>2)] = _gmtime_r.GMTString;
      return tmPtr;
    }
  function ___gmtime_r(a0,a1
  ) {
  return _gmtime_r(a0,a1);
  }

  function _tzset_impl() {
      var currentYear = new Date().getFullYear();
      var winter = new Date(currentYear, 0, 1);
      var summer = new Date(currentYear, 6, 1);
      var winterOffset = winter.getTimezoneOffset();
      var summerOffset = summer.getTimezoneOffset();
  
      // Local standard timezone offset. Local standard time is not adjusted for daylight savings.
      // This code uses the fact that getTimezoneOffset returns a greater value during Standard Time versus Daylight Saving Time (DST).
      // Thus it determines the expected output during Standard Time, and it compares whether the output of the given date the same (Standard) or less (DST).
      var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
  
      // timezone is specified as seconds west of UTC ("The external variable
      // `timezone` shall be set to the difference, in seconds, between
      // Coordinated Universal Time (UTC) and local standard time."), the same
      // as returned by stdTimezoneOffset.
      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
      HEAP32[((__get_timezone())>>2)] = stdTimezoneOffset * 60;
  
      HEAP32[((__get_daylight())>>2)] = Number(winterOffset != summerOffset);
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocateUTF8(winterName);
      var summerNamePtr = allocateUTF8(summerName);
      if (summerOffset < winterOffset) {
        // Northern hemisphere
        HEAP32[((__get_tzname())>>2)] = winterNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)] = summerNamePtr;
      } else {
        HEAP32[((__get_tzname())>>2)] = summerNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)] = winterNamePtr;
      }
    }
  function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
      _tzset_impl();
    }
  function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)] = date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)] = date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)] = date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)] = date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)] = date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)] = date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)] = date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)] = yday;
      HEAP32[(((tmPtr)+(36))>>2)] = -(date.getTimezoneOffset() * 60);
  
      // Attention: DST is in December in South, and some regions don't have DST at all.
      var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)] = dst;
  
      var zonePtr = HEAP32[(((__get_tzname())+(dst ? 4 : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)] = zonePtr;
  
      return tmPtr;
    }
  function ___localtime_r(a0,a1
  ) {
  return _localtime_r(a0,a1);
  }

  var PATH = {splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        path = PATH.normalize(path);
        path = path.replace(/\/$/, "");
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  function getRandomDevice() {
      if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
        // for modern web browsers
        var randomBuffer = new Uint8Array(1);
        return function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
      } else
      if (ENVIRONMENT_IS_NODE) {
        // for nodejs with or without crypto support included
        try {
          var crypto_module = require('crypto');
          // nodejs has crypto support
          return function() { return crypto_module['randomBytes'](1)[0]; };
        } catch (e) {
          // nodejs doesn't have crypto support
        }
      }
      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
      return function() { abort("randomDevice"); };
    }
  
  var PATH_FS = {resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY = {ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().includes('EOF')) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  function zeroMemory(address, size) {
      HEAPU8.fill(0, address, address + size);
    }
  
  function alignMemory(size, alignment) {
      return Math.ceil(size / alignment) * alignment;
    }
  function mmapAlloc(size) {
      abort();
    }
  var MEMFS = {ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
          parent.timestamp = node.timestamp;
        }
        return node;
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
        } else {
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
        }
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.parent.timestamp = Date.now()
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          new_dir.timestamp = old_node.parent.timestamp;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, address, length, position, prot, flags) {
          if (address !== 0) {
            // We don't currently support location hints for the address of the mapping
            throw new FS.ErrnoError(28);
          }
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  function asyncLoad(url, onload, onerror, noRunDep) {
      var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
      readAsync(url, function(arrayBuffer) {
        assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
        onload(new Uint8Array(arrayBuffer));
        if (dep) removeRunDependency(dep);
      }, function(event) {
        if (onerror) {
          onerror();
        } else {
          throw 'Loading data file "' + url + '" failed.';
        }
      });
      if (dep) addRunDependency(dep);
    }
  var FS = {root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"r+":2,"w":577,"w+":578,"a":1089,"a+":1090},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.includes('r') && !(node.mode & 292)) {
          return 2;
        } else if (perms.includes('w') && !(node.mode & 146)) {
          return 2;
        } else if (perms.includes('x') && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.includes(current.mount)) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existant directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          id: node.id,
          flags: flags,
          mode: node.mode,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          node_ops: node.node_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
          }
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, address, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using err() rather than out()
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device = getRandomDevice();
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
        // name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        var proc_self = FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode(proc_self, 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 0);
        var stdout = FS.open('/dev/stdout', 1);
        var stderr = FS.open('/dev/stderr', 1);
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
          };
          this.setErrno(errno);
          this.message = 'FS error';
  
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            FS.forceLoadFile(node);
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          FS.forceLoadFile(node);
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  var SYSCALLS = {mappings:{},DEFAULT_POLLMASK:5,calculateAt:function(dirfd, path, allowEmpty) {
        if (path[0] === '/') {
          return path;
        }
        // relative path
        var dir;
        if (dirfd === -100) {
          dir = FS.cwd();
        } else {
          var dirstream = FS.getStream(dirfd);
          if (!dirstream) throw new FS.ErrnoError(8);
          dir = dirstream.path;
        }
        if (path.length == 0) {
          if (!allowEmpty) {
            throw new FS.ErrnoError(44);;
          }
          return dir;
        }
        return PATH.join2(dir, path);
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)] = stat.dev;
        HEAP32[(((buf)+(4))>>2)] = 0;
        HEAP32[(((buf)+(8))>>2)] = stat.ino;
        HEAP32[(((buf)+(12))>>2)] = stat.mode;
        HEAP32[(((buf)+(16))>>2)] = stat.nlink;
        HEAP32[(((buf)+(20))>>2)] = stat.uid;
        HEAP32[(((buf)+(24))>>2)] = stat.gid;
        HEAP32[(((buf)+(28))>>2)] = stat.rdev;
        HEAP32[(((buf)+(32))>>2)] = 0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);
        HEAP32[(((buf)+(48))>>2)] = 4096;
        HEAP32[(((buf)+(52))>>2)] = stat.blocks;
        HEAP32[(((buf)+(56))>>2)] = (stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)] = 0;
        HEAP32[(((buf)+(64))>>2)] = (stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)] = 0;
        HEAP32[(((buf)+(72))>>2)] = (stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)] = 0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)] = tempI64[0],HEAP32[(((buf)+(84))>>2)] = tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        return low;
      }};
  function ___syscall_access(path, amode) {try {
  
      path = SYSCALLS.getStr(path);
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall_chdir(path) {try {
  
      path = SYSCALLS.getStr(path);
      FS.chdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall_chmod(path, mode) {try {
  
      path = SYSCALLS.getStr(path);
      FS.chmod(path, mode);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall_dup3(fd, suggestFD, flags) {try {
  
      var old = SYSCALLS.getStreamFromFD(fd);
      if (old.fd === suggestFD) return -28;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall_fcntl64(fd, cmd, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)] = 2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall_fstat64(fd, buf) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall_getcwd(buf, size) {try {
  
      if (size === 0) return -28;
      var cwd = FS.cwd();
      var cwdLengthInBytes = lengthBytesUTF8(cwd);
      if (size < cwdLengthInBytes + 1) return -68;
      stringToUTF8(cwd, buf, size);
      return buf;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall_getegid32() {
      return 0;
    }
  function ___syscall_getgid32(
  ) {
  return ___syscall_getegid32();
  }

  function ___syscall_getuid32(
  ) {
  return ___syscall_getegid32();
  }

  function ___syscall_ioctl(fd, op, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)] = 0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall_lstat64(path, buf) {try {
  
      path = SYSCALLS.getStr(path);
      return SYSCALLS.doStat(FS.lstat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall_open(path, flags, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var pathname = SYSCALLS.getStr(path);
      var mode = varargs ? SYSCALLS.get() : 0;
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall_rename(old_path, new_path) {try {
  
      old_path = SYSCALLS.getStr(old_path);
      new_path = SYSCALLS.getStr(new_path);
      FS.rename(old_path, new_path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall_rmdir(path) {try {
  
      path = SYSCALLS.getStr(path);
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall_unlink(path) {try {
  
      path = SYSCALLS.getStr(path);
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function __emscripten_throw_longjmp() { throw 'longjmp'; }

  function _abort() {
      abort('');
    }

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }

  function _difftime(time1, time0) {
      return time1 - time0;
    }

  var readAsmConstArgsArray = [];
  function readAsmConstArgs(sigPtr, buf) {
      ;
      readAsmConstArgsArray.length = 0;
      var ch;
      // Most arguments are i32s, so shift the buffer pointer so it is a plain
      // index into HEAP32.
      buf >>= 2;
      while (ch = HEAPU8[sigPtr++]) {
        // A double takes two 32-bit slots, and must also be aligned - the backend
        // will emit padding to avoid that.
        var readAsmConstArgsDouble = ch < 105;
        if (readAsmConstArgsDouble && (buf & 1)) buf++;
        readAsmConstArgsArray.push(readAsmConstArgsDouble ? HEAPF64[buf++ >> 1] : HEAP32[buf]);
        ++buf;
      }
      return readAsmConstArgsArray;
    }
  function _emscripten_asm_const_int(code, sigPtr, argbuf) {
      var args = readAsmConstArgs(sigPtr, argbuf);
      return ASM_CONSTS[code].apply(null, args);
    }


  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function abortOnCannotGrowMemory(requestedSize) {
      abort('OOM');
    }
  function _emscripten_resize_heap(requestedSize) {
      var oldSize = HEAPU8.length;
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  var ENV = {};
  
  function getExecutableName() {
      return thisProgram || './this.program';
    }
  function getEnvStrings() {
      if (!getEnvStrings.strings) {
        // Default values.
        // Browser language detection #8751
        var lang = ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          'LANG': lang,
          '_': getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          // x is a key in ENV; if ENV[x] is undefined, that means it was
          // explicitly set to be so. We allow user code to do that to
          // force variables with default values to remain unset.
          if (ENV[x] === undefined) delete env[x];
          else env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(x + '=' + env[x]);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    }
  function _environ_get(__environ, environ_buf) {
      var bufSize = 0;
      getEnvStrings().forEach(function(string, i) {
        var ptr = environ_buf + bufSize;
        HEAP32[(((__environ)+(i * 4))>>2)] = ptr;
        writeAsciiToMemory(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    }

  function _environ_sizes_get(penviron_count, penviron_buf_size) {
      var strings = getEnvStrings();
      HEAP32[((penviron_count)>>2)] = strings.length;
      var bufSize = 0;
      strings.forEach(function(string) {
        bufSize += string.length + 1;
      });
      HEAP32[((penviron_buf_size)>>2)] = bufSize;
      return 0;
    }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }

  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)] = num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      ;
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)] = num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _getTempRet0() {
      return getTempRet0();
    }

  function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        // Attention: some regions don't have DST at all.
        HEAP32[(((tmPtr)+(32))>>2)] = Number(summerOffset != winterOffset && dstOffset == guessedOffset);
      } else if ((dst > 0) != (dstOffset == guessedOffset)) {
        var nonDstOffset = Math.max(winterOffset, summerOffset);
        var trueOffset = dst > 0 ? dstOffset : nonDstOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)] = date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)] = yday;
      // To match expected behavior, update fields from date
      HEAP32[((tmPtr)>>2)] = date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)] = date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)] = date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)] = date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)] = date.getMonth();
  
      return (date.getTime() / 1000)|0;
    }

  function _setTempRet0(val) {
      setTempRet0(val);
    }

  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]) {
        // no-op
      }
      return sum;
    }
  
  var __MONTH_DAYS_LEAP = [31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR = [31,28,31,30,31,30,31,31,30,31,30,31];
  function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while (days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }
  function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation
        // Modified Conversion Specifiers
        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.
        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.
        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.
        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.
        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.
        '%EY': '%Y',                      // Replaced by the full alternative year representation.
        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.
        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.
        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.
        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      }
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      }
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        }
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      }
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      }
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      }
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          return date.tm_wday || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          return date.tm_wday;
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.includes(rule)) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }

  function _system(command) {
      if (ENVIRONMENT_IS_NODE) {
        if (!command) return 1; // shell is available
  
        var cmdstr = UTF8ToString(command);
        if (!cmdstr.length) return 0; // this is what glibc seems to do (shell works test?)
  
        var cp = require('child_process');
        var ret = cp.spawnSync(cmdstr, [], {shell:true, stdio:'inherit'});
  
        var _W_EXITCODE = function(ret, sig) {
          return ((ret) << 8 | (sig));
        }
  
        // this really only can happen if process is killed by signal
        if (ret.status === null) {
          // sadly node doesn't expose such function
          var signalToNumber = function(sig) {
            // implement only the most common ones, and fallback to SIGINT
            switch (sig) {
              case 'SIGHUP': return 1;
              case 'SIGINT': return 2;
              case 'SIGQUIT': return 3;
              case 'SIGFPE': return 8;
              case 'SIGKILL': return 9;
              case 'SIGALRM': return 14;
              case 'SIGTERM': return 15;
            }
            return 2; // SIGINT
          }
          return _W_EXITCODE(0, signalToNumber(ret.signal));
        }
  
        return _W_EXITCODE(ret.status, 0);
      }
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      if (!command) return 0; // no shell available
      setErrNo(52);
      return -1;
    }

  function _time(ptr) {
      ;
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)] = ret;
      }
      return ret;
    }


  function runAndAbortIfError(func) {
      try {
        return func();
      } catch (e) {
        abort(e);
      }
    }
  
  function callUserCallback(func, synchronous) {
      if (runtimeExited || ABORT) {
        return;
      }
      // For synchronous calls, let any exceptions propagate, and don't let the runtime exit.
      if (synchronous) {
        func();
        return;
      }
      try {
        func();
      } catch (e) {
        handleException(e);
      }
    }
  
  function runtimeKeepalivePush() {
      runtimeKeepaliveCounter += 1;
    }
  
  function runtimeKeepalivePop() {
      runtimeKeepaliveCounter -= 1;
    }
  var Asyncify = {State:{Normal:0,Unwinding:1,Rewinding:2,Disabled:3},state:0,StackSize:4096,currData:null,handleSleepReturnValue:0,exportCallStack:[],callStackNameToId:{},callStackIdToName:{},callStackId:0,asyncPromiseHandlers:null,sleepCallbacks:[],getCallStackId:function(funcName) {
        var id = Asyncify.callStackNameToId[funcName];
        if (id === undefined) {
          id = Asyncify.callStackId++;
          Asyncify.callStackNameToId[funcName] = id;
          Asyncify.callStackIdToName[id] = funcName;
        }
        return id;
      },instrumentWasmExports:function(exports) {
        var ret = {};
        for (var x in exports) {
          (function(x) {
            var original = exports[x];
            if (typeof original === 'function') {
              ret[x] = function() {
                Asyncify.exportCallStack.push(x);
                try {
                  return original.apply(null, arguments);
                } finally {
                  if (!ABORT) {
                    var y = Asyncify.exportCallStack.pop();
                    assert(y === x);
                    Asyncify.maybeStopUnwind();
                  }
                }
              };
            } else {
              ret[x] = original;
            }
          })(x);
        }
        return ret;
      },maybeStopUnwind:function() {
        if (Asyncify.currData &&
            Asyncify.state === Asyncify.State.Unwinding &&
            Asyncify.exportCallStack.length === 0) {
          // We just finished unwinding.
          
          Asyncify.state = Asyncify.State.Normal;
          // Keep the runtime alive so that a re-wind can be done later.
          runAndAbortIfError(Module['_asyncify_stop_unwind']);
          if (typeof Fibers !== 'undefined') {
            Fibers.trampoline();
          }
        }
      },whenDone:function() {
        return new Promise(function(resolve, reject) {
          Asyncify.asyncPromiseHandlers = {
            resolve: resolve,
            reject: reject
          };
        });
      },allocateData:function() {
        // An asyncify data structure has three fields:
        //  0  current stack pos
        //  4  max stack pos
        //  8  id of function at bottom of the call stack (callStackIdToName[id] == name of js function)
        //
        // The Asyncify ABI only interprets the first two fields, the rest is for the runtime.
        // We also embed a stack in the same memory region here, right next to the structure.
        // This struct is also defined as asyncify_data_t in emscripten/fiber.h
        var ptr = _malloc(12 + Asyncify.StackSize);
        Asyncify.setDataHeader(ptr, ptr + 12, Asyncify.StackSize);
        Asyncify.setDataRewindFunc(ptr);
        return ptr;
      },setDataHeader:function(ptr, stack, stackSize) {
        HEAP32[((ptr)>>2)] = stack;
        HEAP32[(((ptr)+(4))>>2)] = stack + stackSize;
      },setDataRewindFunc:function(ptr) {
        var bottomOfCallStack = Asyncify.exportCallStack[0];
        var rewindId = Asyncify.getCallStackId(bottomOfCallStack);
        HEAP32[(((ptr)+(8))>>2)] = rewindId;
      },getDataRewindFunc:function(ptr) {
        var id = HEAP32[(((ptr)+(8))>>2)];
        var name = Asyncify.callStackIdToName[id];
        var func = Module['asm'][name];
        return func;
      },doRewind:function(ptr) {
        var start = Asyncify.getDataRewindFunc(ptr);
        // Once we have rewound and the stack we no longer need to artificially keep
        // the runtime alive.
        
        return start();
      },handleSleep:function(startAsync) {
        if (ABORT) return;
        if (Asyncify.state === Asyncify.State.Normal) {
          // Prepare to sleep. Call startAsync, and see what happens:
          // if the code decided to call our callback synchronously,
          // then no async operation was in fact begun, and we don't
          // need to do anything.
          var reachedCallback = false;
          var reachedAfterCallback = false;
          startAsync(function(handleSleepReturnValue) {
            if (ABORT) return;
            Asyncify.handleSleepReturnValue = handleSleepReturnValue || 0;
            reachedCallback = true;
            if (!reachedAfterCallback) {
              // We are happening synchronously, so no need for async.
              return;
            }
            Asyncify.state = Asyncify.State.Rewinding;
            runAndAbortIfError(function() { Module['_asyncify_start_rewind'](Asyncify.currData) });
            if (typeof Browser !== 'undefined' && Browser.mainLoop.func) {
              Browser.mainLoop.resume();
            }
            var asyncWasmReturnValue, isError = false;
            try {
              asyncWasmReturnValue = Asyncify.doRewind(Asyncify.currData);
            } catch (err) {
              asyncWasmReturnValue = err;
              isError = true;
            }
            // Track whether the return value was handled by any promise handlers.
            var handled = false;
            if (!Asyncify.currData) {
              // All asynchronous execution has finished.
              // `asyncWasmReturnValue` now contains the final
              // return value of the exported async WASM function.
              //
              // Note: `asyncWasmReturnValue` is distinct from
              // `Asyncify.handleSleepReturnValue`.
              // `Asyncify.handleSleepReturnValue` contains the return
              // value of the last C function to have executed
              // `Asyncify.handleSleep()`, where as `asyncWasmReturnValue`
              // contains the return value of the exported WASM function
              // that may have called C functions that
              // call `Asyncify.handleSleep()`.
              var asyncPromiseHandlers = Asyncify.asyncPromiseHandlers;
              if (asyncPromiseHandlers) {
                Asyncify.asyncPromiseHandlers = null;
                (isError ? asyncPromiseHandlers.reject : asyncPromiseHandlers.resolve)(asyncWasmReturnValue);
                handled = true;
              }
            }
            if (isError && !handled) {
              // If there was an error and it was not handled by now, we have no choice but to
              // rethrow that error into the global scope where it can be caught only by
              // `onerror` or `onunhandledpromiserejection`.
              throw asyncWasmReturnValue;
            }
          });
          reachedAfterCallback = true;
          if (!reachedCallback) {
            // A true async operation was begun; start a sleep.
            Asyncify.state = Asyncify.State.Unwinding;
            // TODO: reuse, don't alloc/free every sleep
            Asyncify.currData = Asyncify.allocateData();
            runAndAbortIfError(function() { Module['_asyncify_start_unwind'](Asyncify.currData) });
            if (typeof Browser !== 'undefined' && Browser.mainLoop.func) {
              Browser.mainLoop.pause();
            }
          }
        } else if (Asyncify.state === Asyncify.State.Rewinding) {
          // Stop a resume.
          Asyncify.state = Asyncify.State.Normal;
          runAndAbortIfError(Module['_asyncify_stop_rewind']);
          _free(Asyncify.currData);
          Asyncify.currData = null;
          // Call all sleep callbacks now that the sleep-resume is all done.
          Asyncify.sleepCallbacks.forEach(function(func) {
            callUserCallback(func);
          });
        } else {
          abort('invalid state: ' + Asyncify.state);
        }
        return Asyncify.handleSleepReturnValue;
      },handleAsync:function(startAsync) {
        return Asyncify.handleSleep(function(wakeUp) {
          // TODO: add error handling as a second param when handleSleep implements it.
          startAsync().then(wakeUp);
        });
      }};

  var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
var ASSERTIONS = false;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf = Buffer.from(s, 'base64');
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


var asmLibraryArg = {
  "__clock_gettime": ___clock_gettime,
  "__gmtime_r": ___gmtime_r,
  "__localtime_r": ___localtime_r,
  "__syscall_access": ___syscall_access,
  "__syscall_chdir": ___syscall_chdir,
  "__syscall_chmod": ___syscall_chmod,
  "__syscall_dup3": ___syscall_dup3,
  "__syscall_fcntl64": ___syscall_fcntl64,
  "__syscall_fstat64": ___syscall_fstat64,
  "__syscall_getcwd": ___syscall_getcwd,
  "__syscall_getgid32": ___syscall_getgid32,
  "__syscall_getuid32": ___syscall_getuid32,
  "__syscall_ioctl": ___syscall_ioctl,
  "__syscall_lstat64": ___syscall_lstat64,
  "__syscall_open": ___syscall_open,
  "__syscall_rename": ___syscall_rename,
  "__syscall_rmdir": ___syscall_rmdir,
  "__syscall_unlink": ___syscall_unlink,
  "_emscripten_throw_longjmp": __emscripten_throw_longjmp,
  "abort": _abort,
  "clock": _clock,
  "create_global": create_global,
  "difftime": _difftime,
  "emscripten_asm_const_int": _emscripten_asm_const_int,
  "emscripten_get_now": _emscripten_get_now,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "environ_get": _environ_get,
  "environ_sizes_get": _environ_sizes_get,
  "exit": _exit,
  "fd_close": _fd_close,
  "fd_read": _fd_read,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "getTempRet0": _getTempRet0,
  "invoke_vii": invoke_vii,
  "js_helpers_init": js_helpers_init,
  "local_callback": local_callback,
  "mktime": _mktime,
  "setTempRet0": _setTempRet0,
  "set_const": set_const,
  "set_const_str": set_const_str,
  "strftime": _strftime,
  "system": _system,
  "time": _time
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
  return (___wasm_call_ctors = Module["___wasm_call_ctors"] = Module["asm"]["__wasm_call_ctors"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = function() {
  return (_malloc = Module["_malloc"] = Module["asm"]["malloc"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _free = Module["_free"] = function() {
  return (_free = Module["_free"] = Module["asm"]["free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _display_inventory = Module["_display_inventory"] = function() {
  return (_display_inventory = Module["_display_inventory"] = Module["asm"]["display_inventory"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _mapglyph = Module["_mapglyph"] = function() {
  return (_mapglyph = Module["_mapglyph"] = Module["asm"]["mapglyph"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = function() {
  return (___errno_location = Module["___errno_location"] = Module["asm"]["__errno_location"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _main = Module["_main"] = function() {
  return (_main = Module["_main"] = Module["asm"]["main"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _shim_graphics_set_callback = Module["_shim_graphics_set_callback"] = function() {
  return (_shim_graphics_set_callback = Module["_shim_graphics_set_callback"] = Module["asm"]["shim_graphics_set_callback"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _saveSetjmp = Module["_saveSetjmp"] = function() {
  return (_saveSetjmp = Module["_saveSetjmp"] = Module["asm"]["saveSetjmp"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var __get_tzname = Module["__get_tzname"] = function() {
  return (__get_tzname = Module["__get_tzname"] = Module["asm"]["_get_tzname"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var __get_daylight = Module["__get_daylight"] = function() {
  return (__get_daylight = Module["__get_daylight"] = Module["asm"]["_get_daylight"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var __get_timezone = Module["__get_timezone"] = function() {
  return (__get_timezone = Module["__get_timezone"] = Module["asm"]["_get_timezone"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = function() {
  return (stackSave = Module["stackSave"] = Module["asm"]["stackSave"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = function() {
  return (stackRestore = Module["stackRestore"] = Module["asm"]["stackRestore"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = function() {
  return (stackAlloc = Module["stackAlloc"] = Module["asm"]["stackAlloc"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_set_limits = Module["_emscripten_stack_set_limits"] = function() {
  return (_emscripten_stack_set_limits = Module["_emscripten_stack_set_limits"] = Module["asm"]["emscripten_stack_set_limits"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = function() {
  return (_emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = Module["asm"]["emscripten_stack_get_base"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
  return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _setThrew = Module["_setThrew"] = function() {
  return (_setThrew = Module["_setThrew"] = Module["asm"]["setThrew"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_vi = Module["dynCall_vi"] = function() {
  return (dynCall_vi = Module["dynCall_vi"] = Module["asm"]["dynCall_vi"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_iii = Module["dynCall_iii"] = function() {
  return (dynCall_iii = Module["dynCall_iii"] = Module["asm"]["dynCall_iii"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_iiii = Module["dynCall_iiii"] = function() {
  return (dynCall_iiii = Module["dynCall_iiii"] = Module["asm"]["dynCall_iiii"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_ii = Module["dynCall_ii"] = function() {
  return (dynCall_ii = Module["dynCall_ii"] = Module["asm"]["dynCall_ii"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_i = Module["dynCall_i"] = function() {
  return (dynCall_i = Module["dynCall_i"] = Module["asm"]["dynCall_i"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_vii = Module["dynCall_vii"] = function() {
  return (dynCall_vii = Module["dynCall_vii"] = Module["asm"]["dynCall_vii"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_viii = Module["dynCall_viii"] = function() {
  return (dynCall_viii = Module["dynCall_viii"] = Module["asm"]["dynCall_viii"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_v = Module["dynCall_v"] = function() {
  return (dynCall_v = Module["dynCall_v"] = Module["asm"]["dynCall_v"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
  return (dynCall_iiiii = Module["dynCall_iiiii"] = Module["asm"]["dynCall_iiiii"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_iiiiii = Module["dynCall_iiiiii"] = function() {
  return (dynCall_iiiiii = Module["dynCall_iiiiii"] = Module["asm"]["dynCall_iiiiii"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = function() {
  return (dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = Module["asm"]["dynCall_viiiiiiii"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
  return (dynCall_viiiii = Module["dynCall_viiiii"] = Module["asm"]["dynCall_viiiii"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_viiii = Module["dynCall_viiii"] = function() {
  return (dynCall_viiii = Module["dynCall_viiii"] = Module["asm"]["dynCall_viiii"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  return (dynCall_viiiiii = Module["dynCall_viiiiii"] = Module["asm"]["dynCall_viiiiii"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = function() {
  return (dynCall_jiji = Module["dynCall_jiji"] = Module["asm"]["dynCall_jiji"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_iidiiii = Module["dynCall_iidiiii"] = function() {
  return (dynCall_iidiiii = Module["dynCall_iidiiii"] = Module["asm"]["dynCall_iidiiii"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _asyncify_start_unwind = Module["_asyncify_start_unwind"] = function() {
  return (_asyncify_start_unwind = Module["_asyncify_start_unwind"] = Module["asm"]["asyncify_start_unwind"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _asyncify_stop_unwind = Module["_asyncify_stop_unwind"] = function() {
  return (_asyncify_stop_unwind = Module["_asyncify_stop_unwind"] = Module["asm"]["asyncify_stop_unwind"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _asyncify_start_rewind = Module["_asyncify_start_rewind"] = function() {
  return (_asyncify_start_rewind = Module["_asyncify_start_rewind"] = Module["asm"]["asyncify_start_rewind"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _asyncify_stop_rewind = Module["_asyncify_stop_rewind"] = function() {
  return (_asyncify_stop_rewind = Module["_asyncify_stop_rewind"] = Module["asm"]["asyncify_stop_rewind"]).apply(null, arguments);
};


function invoke_vii(index,a1,a2) {
  var sp = stackSave();
  try {
    dynCall_vii(index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}




// === Auto-generated postamble setup entry stuff ===

Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
Module["setValue"] = setValue;
Module["getValue"] = getValue;
Module["UTF8ToString"] = UTF8ToString;
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
Module["addFunction"] = addFunction;
Module["removeFunction"] = removeFunction;

var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args) {

  var entryFunction = Module['_main'];

  args = args || [];

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(thisProgram);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;

  try {

    var ret = entryFunction(argc, argv);

    // In PROXY_TO_PTHREAD builds, we should never exit the runtime below, as
    // execution is asynchronously handed off to a pthread.
    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
    return ret;
  }
  catch (e) {
    return handleException(e);
  } finally {
    calledMain = true;

  }
}

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    readyPromiseResolve(Module);
    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (shouldRunNow) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
}
Module['run'] = run;

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  EXITSTATUS = status;

  if (keepRuntimeAlive()) {
  } else {
    exitRuntime();
  }

  procExit(status);
}

function procExit(code) {
  EXITSTATUS = code;
  if (!keepRuntimeAlive()) {
    if (Module['onExit']) Module['onExit'](code);
    ABORT = true;
  }
  quit_(code, new ExitStatus(code));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;

run();







  return Module.ready
}
);
})();
// if (typeof exports === 'object' && typeof module === 'object')
//   module.exports = Module;
// else if (typeof define === 'function' && define['amd'])
//   define([], function() { return Module; });
// else if (typeof exports === 'object')
//   exports["Module"] = Module;

export default Module;