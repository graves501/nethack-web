diff --git a/include/global.h b/include/global.h
index 1cdc6a168..c4be2b3ca 100644
--- a/include/global.h
+++ b/include/global.h
@@ -246,7 +246,7 @@ extern struct cross_target_s cross_target;
 #endif
 
 #if defined(X11_GRAPHICS) || defined(QT_GRAPHICS) || defined(GNOME_GRAPHICS) \
-    || defined(WIN32)
+    || defined(WIN32) || defined(SHIM_GRAPHICS)
 #ifndef USE_TILES
 #define USE_TILES /* glyph2tile[] will be available */
 #endif
diff --git a/include/tradstdc.h b/include/tradstdc.h
index 65fea90b0..fe355b0c8 100644
--- a/include/tradstdc.h
+++ b/include/tradstdc.h
@@ -431,7 +431,7 @@ typedef genericptr genericptr_t; /* (void *) or (char *) */
 #define NORETURN __attribute__((noreturn))
 /* disable gcc's __attribute__((__warn_unused_result__)) since explicitly
    discarding the result by casting to (void) is not accepted as a 'use' */
-#define __warn_unused_result__ /*empty*/
+#define __warn_unused_result__ __unused__
 #define warn_unused_result /*empty*/
 #endif
 #endif
diff --git a/sys/libnh/libnhmain.c b/sys/libnh/libnhmain.c
index bbd16482f..3354643d8 100644
--- a/sys/libnh/libnhmain.c
+++ b/sys/libnh/libnhmain.c
@@ -8,6 +8,8 @@
 #include "hack.h"
 #include "dlb.h"
 
+extern short glyph2tile[];
+
 #include <ctype.h>
 #include <sys/stat.h>
 #include <signal.h>
@@ -759,6 +761,11 @@ sys_random_seed()
     return seed;
 }
 
+unsigned glyph_to_tile(int glyph) 
+{
+    return glyph2tile[glyph];
+}
+
 #ifdef __EMSCRIPTEN__
 /***
  * Helpers
diff --git a/sys/unix/hints/include/cross-pre.2020 b/sys/unix/hints/include/cross-pre.2020
index 6146c8143..c7eff02bd 100644
--- a/sys/unix/hints/include/cross-pre.2020
+++ b/sys/unix/hints/include/cross-pre.2020
@@ -29,6 +29,7 @@ endif
 ifdef CROSS_TO_WASM
 CROSS=1
 BUILD_TARGET_LUA=1
+CROSS_SHARED=1
 HACKDIR=/
 PREFIX=
 override TARGET = wasm
@@ -311,20 +312,21 @@ EMCC_LFLAGS += -s ALLOW_TABLE_GROWTH
 EMCC_LFLAGS += -s ASYNCIFY -s ASYNCIFY_IMPORTS='["local_callback"]'
 EMCC_LFLAGS += -O3
 EMCC_LFLAGS += -s MODULARIZE
-EMCC_LFLAGS += -s EXPORTED_FUNCTIONS='["_main", "_shim_graphics_set_callback", "_mapglyph", "_display_inventory"]'
+EMCC_LFLAGS += -s EXPORTED_FUNCTIONS='["_main", "_shim_graphics_set_callback", "_glyph_to_tile", "_mapglyph", "_display_inventory", "_malloc", "_free"]'
 EMCC_LFLAGS += -s EXPORTED_RUNTIME_METHODS='["cwrap", "ccall", "addFunction", \
 			"removeFunction", "UTF8ToString", "getValue", "setValue"]'
 EMCC_LFLAGS += -s ERROR_ON_UNDEFINED_SYMBOLS=0
 # XXX: the "@/" at the end of "--embed-file" tells emscripten to embed the files
 # in the root directory, otherwise they will end up in the $(WASM_DATA_DIR) path
 EMCC_LFLAGS += --embed-file $(WASM_DATA_DIR)@/
+EMCC_LFLAGS += --preload-file ../dat
 # For a list of EMCC settings:
 # https://github.com/emscripten-core/emscripten/blob/master/src/settings.js
 #
 # WASM C flags
 EMCC_CFLAGS =
 EMCC_CFLAGS += -Wall
-EMCC_CFLAGS += -Werror
+#EMCC_CFLAGS += -Werror
 EMCC_CFLAGS += -DNO_SIGNAL
 #EMCC_CFLAGS += -s DISABLE_EXCEPTION_CATCHING=0
 #EMCC_DEBUG_CFLAGS += -s ASSERTIONS=1
@@ -349,7 +351,8 @@ endif
 override TARGET_CC = emcc
 override TARGET_CXX = emcc
 override TARGET_AR = emar
-WASM_CFLAGS = -Wall -Wextra -Wno-missing-field-initializers
+WASM_CFLAGS = -Wall -DUSE_TILES
+#-Wextra -Wno-missing-field-initializers
 WASM_CFLAGS += -Wimplicit -Wreturn-type -Wunused -Wformat -Wswitch
 WASM_CFLAGS += -Wshadow
 # WASM_CFLAGS += -Wwrite-strings
@@ -379,10 +382,12 @@ override TARGET_LFLAGS= $(EMCC_LFLAGS)
 override SYSSRC = ../sys/libnh/libnhmain.c \
 		../sys/share/ioctl.c ../sys/share/unixtty.c \
 		../sys/unix/unixunix.c ../sys/unix/unixres.c \
+		../win/share/tileset.c \
 		../win/shim/winshim.c
 override SYSOBJ= $(TARGETPFX)libnhmain.o \
 		$(TARGETPFX)ioctl.o $(TARGETPFX)unixtty.o \
 		$(TARGETPFX)unixunix.o $(TARGETPFX)unixres.o \
+		$(TARGETPFX)tileset.o $(TARGETPFX)tile.o \
 		$(TARGETPFX)winshim.o
 override WINLIB = emranlib 
 override LUALIB=
